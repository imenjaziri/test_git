#include "ihm.h"
#define RX_BUFFER_SIZE 64

uint8_t rxBuffer[RX_BUFFER_SIZE];
uint8_t rxByte;
uint8_t rxIndex = 0;
char txBuffer[128];
uint8_t currentStep = 0;

// Fonction pour afficher le menu principal complet
void AfficherMenuPrincipal(void) {
    // Afficher tout le menu une seule fois
    snprintf(txBuffer, sizeof(txBuffer), "************ Menu Principal ************\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);

    snprintf(txBuffer, sizeof(txBuffer), "Pour modifier LORA, écrire : lora\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);

    snprintf(txBuffer, sizeof(txBuffer), "Pour modifier GPS, écrire : GPS\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);

    snprintf(txBuffer, sizeof(txBuffer), "Pour quitter, écrire : exit\r\n");
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);

    // Initialiser la réception pour attendre la commande de l'utilisateur
    IHM_Init();
}

// Fonction pour initialiser la réception UART
void IHM_Init(void) {
    if (HAL_UART_Receive_IT(&huart2, &rxByte, 1) != HAL_OK) {
        Error_Handler();  // Gérer l'erreur
    }
}

// Callback pour traiter les données reçues par UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance == USART2) {
        if (rxByte == '\n' || rxByte == '\r') {
            // Fin de message, ajouter un caractère de fin de chaîne
            rxBuffer[rxIndex] = '\0';  // Null-terminate the string

            // Afficher la commande reçue pour déboguer
            HAL_UART_Transmit(&huart2, rxBuffer, strlen((char*)rxBuffer), 100);

            // Traiter la commande
            processMessage(rxBuffer);

            // Réinitialiser l'index pour la prochaine commande
            rxIndex = 0;
        } else {
            // Ajouter l'octet reçu dans le tampon
            if (rxIndex < RX_BUFFER_SIZE - 1) {
                rxBuffer[rxIndex++] = rxByte;
            } else {
                // Si le tampon déborde, réinitialiser
                rxIndex = 0;
            }
        }

        // Redémarrer la réception du prochain octet
        HAL_UART_Receive_IT(huart, &rxByte, 1);
    }
}
// Fonction pour traiter le message de l'utilisateur
void processMessage(uint8_t *rxBuffer) {
    // Si la commande est "SET"
    if (strcmp((char*)rxBuffer, "SET") == 0) {
        HAL_UART_Transmit(&huart2, (uint8_t*)"Success\r\n", 9, 100);
    } else if (strcmp((char*)rxBuffer, "exit") == 0) {
        // Si la commande est "exit"
        HAL_UART_Transmit(&huart2, (uint8_t*)"Exiting...\r\n", 13, 100);
    } else {
        // Si la commande n'est pas reconnue
        HAL_UART_Transmit(&huart2, (uint8_t*)"Command not recognized\r\n", 24, 100);
    }
}
