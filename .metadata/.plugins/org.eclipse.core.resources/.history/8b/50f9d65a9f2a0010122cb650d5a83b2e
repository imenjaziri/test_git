/*
 * ihm.c
 *
 *  Created on: May 5, 2025
 *      Author: ThinkPad
 */

#include "ihm.h"
#define RX_BUFFER_SIZE 64
uint8_t rxBuffer[RX_BUFFER_SIZE];
uint8_t rxByte ;
uint8_t rxIndex =0 ;
char txBuffer[128];
uint8_t currentStep = 0;
void AfficherMenuPrincipal(void) {
    currentStep = 0;
    EnvoyerEtapeMenu();
}

void EnvoyerEtapeMenu(void) {
    switch (currentStep) {
        case 0:
            snprintf(txBuffer, sizeof(txBuffer), "************ Menu Principal ************\r\n");
            break;
        case 1:
            snprintf(txBuffer, sizeof(txBuffer), "Pour modifier LORA, écrire : lora\r\n");
            break;
        case 2:
            snprintf(txBuffer, sizeof(txBuffer), "Pour modifier WiFi, écrire : wifi\r\n");
            break;
        case 3:
            snprintf(txBuffer, sizeof(txBuffer), "Pour quitter, écrire : exit\r\n");
            break;
        default:
            return;
    }

    HAL_UART_Transmit_IT(&huart2, (uint8_t*)txBuffer, strlen(txBuffer));
    currentStep++;
}


void IHM_Init(void)
{
    uint8_t rxBuffer[RX_BUFFER_SIZE];

    if (HAL_UART_Receive_IT(&huart2, rxBuffer, sizeof(rxBuffer)-1) != HAL_OK)
    {
        Error_Handler();
    }
};
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
     if (huart->Instance == USART2) {
         if (rxByte == '\n' || rxByte == '\r') {
             // End of message
             rxBuffer[rxIndex] = '\0'; // Null-terminate string

             // Send to message buffer or process
             processMessage(rxBuffer);

             // Reset buffer
             rxIndex = 0;
         } else {
             if (rxIndex < RX_BUFFER_SIZE - 1) {
                 rxBuffer[rxIndex++] = rxByte;
             } else {
                 // ❌ Buffer overflow
                 rxIndex = 0; // Reset to avoid undefined behavior

             }
         }

         // Restart receiving next byte
         HAL_UART_Receive_IT(huart, &rxByte, 1);
     }
 }
// Callback appelée automatiquement à la fin de chaque transmission
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
   if (huart->Instance == USART2) {
       EnvoyerEtapeMenu();  // Envoie la prochaine ligne du menu
   }
}

void processMessage(uint8_t rxBuffer){
	if (rxBuffer=="SET"){
		HAL_UART_Transmit_IT(&huart2, "Success", 8);
	}
}



/*void Menu_function(void){
sprintf(MSG, "Hello Dudes! Tracing X = %d\r\n", X);

printf("Hello, write your command\n here are the following commands\n");
printf("Pour modifier la valeur de Kc écrire : SET KC valeur");
printf("Pour modifier la valeur de Kp écrire : SET Kp valeur");
printf("Pour modifier la valeur de SF écrire : SET SF 7");
printf("Pour modifier la valeur de CRC écrire : SET CRC 3/4");
printf("Pour donner la qualité du sol écrire : SET SOL Argileux");
printf("Pour modifier la valeur de Kc écrire : GET KC valeur");
printf("Pour modifier la valeur de Kp écrire : GET Kp valeur");
printf("Pour modifier la valeur de SF écrire : GET SF 7");
printf("Pour modifier la valeur de CRC écrire :GET CRC 3/4");
printf("Pour donner la qualité du sol écrire : GET SOL Argileux");
};*/

