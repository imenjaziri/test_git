/*
 * ihm.c
 *
 *  Created on: May 7, 2025
 *      Author: ThinkPad
 */


#include "ihm.h"
#define RX_BUFFER_SIZE 64
uint8_t rxBuffer[RX_BUFFER_SIZE];
uint8_t rxByte ;
uint8_t rxIndex =0 ;
char txBuffer[128];
uint8_t currentStep;
void AfficherMenuPrincipal(void) {
    currentStep = 0;
    while (currentStep <= 3) {
        EnvoyerEtapeMenu();
    }
}

void EnvoyerEtapeMenu(void) {
    switch (currentStep) {
        case 0:
            snprintf(txBuffer, sizeof(txBuffer), "************ Menu Principal ************\r\n");
            break;
        case 1:
            snprintf(txBuffer, sizeof(txBuffer), "Pour modifier LORA, écrire : lora\r\n");
            break;
        case 2:
            snprintf(txBuffer, sizeof(txBuffer), "Pour modifier GPS, écrire : GPS\r\n");
            break;
        case 3:
            snprintf(txBuffer, sizeof(txBuffer), "Pour quitter, écrire : exit\r\n");
            break;
        default:
            return;
    }
    if (HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100) != HAL_OK) {
        Error_Handler(); // Gérer l'erreur
    }
    currentStep++;
    if (currentStep == 3)
      {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
    	  IHM_Init();
      }
}

void IHM_Init(void)
{
    if (HAL_UART_Receive_IT(&huart2, &rxByte, 1) != HAL_OK)
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
        Error_Handler();
    }
};
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
     if (huart->Instance == USART2) {
         if (rxByte == '\n' || rxByte == '\r') {
             // End of message
             rxBuffer[rxIndex] = '\0'; // Null-terminate string

             // Send to message buffer or process
             processMessage(rxBuffer);

             // Reset buffer
             rxIndex = 0;
         } else {
             if (rxIndex < RX_BUFFER_SIZE - 1) {
                 rxBuffer[rxIndex++] = rxByte;
             } else {
                 // ❌ Buffer overflow
                 rxIndex = 0; // Reset to avoid undefined behavior

             }
         }

         // Restart receiving next byte
         HAL_UART_Receive_IT(&huart2, &rxByte, 1);
     }
 }
// Callback appelée automatiquement à la fin de chaque transmission

void processMessage(uint8_t *rxBuffer) {

    if (strcmp((char*)rxBuffer, "SET\r\n") == 0) {
        HAL_UART_Transmit(&huart2, (uint8_t*)"Success\r\n", 9,100);

    }
}


