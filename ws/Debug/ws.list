
ws.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005954  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005ae4  08005ae4  00006ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b80  08005b80  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b80  08005b80  00006b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b88  08005b88  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b88  08005b88  00006b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b8c  08005b8c  00006b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005b90  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fc8  20000010  08005ba0  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003fd8  08005ba0  00007fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001676d  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003609  00000000  00000000  0001d7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00020db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdd  00000000  00000000  00022238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028338  00000000  00000000  00023215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018580  00000000  00000000  0004b54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fab41  00000000  00000000  00063acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e60e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005454  00000000  00000000  0015e654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00163aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005acc 	.word	0x08005acc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005acc 	.word	0x08005acc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <StartIhmTask>:
#include "main.h"
#include "usart.h"
uint8_t RxChar=0;

void StartIhmTask(void const * argument)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartIhmTask */
	/* Infinite loop */
	HAL_UART_Receive_IT(&huart2, &RxChar,1);
 8000504:	2201      	movs	r2, #1
 8000506:	4904      	ldr	r1, [pc, #16]	@ (8000518 <StartIhmTask+0x1c>)
 8000508:	4804      	ldr	r0, [pc, #16]	@ (800051c <StartIhmTask+0x20>)
 800050a:	f002 fd3f 	bl	8002f8c <HAL_UART_Receive_IT>
	for(;;)
	{
		osDelay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f004 f8b9 	bl	8004686 <osDelay>
	{
 8000514:	bf00      	nop
 8000516:	e7fa      	b.n	800050e <StartIhmTask+0x12>
 8000518:	2000002c 	.word	0x2000002c
 800051c:	20000360 	.word	0x20000360

08000520 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	4a07      	ldr	r2, [pc, #28]	@ (800054c <vApplicationGetIdleTaskMemory+0x2c>)
 8000530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4a06      	ldr	r2, [pc, #24]	@ (8000550 <vApplicationGetIdleTaskMemory+0x30>)
 8000536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2280      	movs	r2, #128	@ 0x80
 800053c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000038 	.word	0x20000038
 8000550:	2000008c 	.word	0x2000008c

08000554 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000554:	b5b0      	push	{r4, r5, r7, lr}
 8000556:	b08e      	sub	sp, #56	@ 0x38
 8000558:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800055a:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_FREERTOS_Init+0x58>)
 800055c:	f107 041c 	add.w	r4, r7, #28
 8000560:	461d      	mov	r5, r3
 8000562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000566:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f004 f83a 	bl	80045ee <osThreadCreate>
 800057a:	4603      	mov	r3, r0
 800057c:	4a0c      	ldr	r2, [pc, #48]	@ (80005b0 <MX_FREERTOS_Init+0x5c>)
 800057e:	6013      	str	r3, [r2, #0]

  /* definition and creation of IhmTask */
  osThreadDef(IhmTask, StartIhmTask, osPriorityIdle, 0, 512);
 8000580:	4b0c      	ldr	r3, [pc, #48]	@ (80005b4 <MX_FREERTOS_Init+0x60>)
 8000582:	463c      	mov	r4, r7
 8000584:	461d      	mov	r5, r3
 8000586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IhmTaskHandle = osThreadCreate(osThread(IhmTask), NULL);
 8000592:	463b      	mov	r3, r7
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f004 f829 	bl	80045ee <osThreadCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a06      	ldr	r2, [pc, #24]	@ (80005b8 <MX_FREERTOS_Init+0x64>)
 80005a0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005a2:	bf00      	nop
 80005a4:	3738      	adds	r7, #56	@ 0x38
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bdb0      	pop	{r4, r5, r7, pc}
 80005aa:	bf00      	nop
 80005ac:	08005af0 	.word	0x08005af0
 80005b0:	20000030 	.word	0x20000030
 80005b4:	08005b14 	.word	0x08005b14
 80005b8:	20000034 	.word	0x20000034

080005bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f004 f85e 	bl	8004686 <osDelay>
 80005ca:	e7fb      	b.n	80005c4 <StartDefaultTask+0x8>

080005cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <MX_GPIO_Init+0xc4>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000690 <MX_GPIO_Init+0xc4>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ee:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <MX_GPIO_Init+0xc4>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fa:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <MX_GPIO_Init+0xc4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	4a24      	ldr	r2, [pc, #144]	@ (8000690 <MX_GPIO_Init+0xc4>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000606:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <MX_GPIO_Init+0xc4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <MX_GPIO_Init+0xc4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	4a1e      	ldr	r2, [pc, #120]	@ (8000690 <MX_GPIO_Init+0xc4>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061e:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <MX_GPIO_Init+0xc4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <MX_GPIO_Init+0xc4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	4a18      	ldr	r2, [pc, #96]	@ (8000690 <MX_GPIO_Init+0xc4>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2120      	movs	r1, #32
 8000646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064a:	f000 fe21 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000654:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	480b      	ldr	r0, [pc, #44]	@ (8000694 <MX_GPIO_Init+0xc8>)
 8000666:	f000 fc69 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800066a:	2320      	movs	r3, #32
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000684:	f000 fc5a 	bl	8000f3c <HAL_GPIO_Init>

}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	@ 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	48000800 	.word	0x48000800

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 faac 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f80c 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f7ff ff92 	bl	80005cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a8:	f000 f99c 	bl	80009e4 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80006ac:	f000 f96a 	bl	8000984 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80006b0:	f7ff ff50 	bl	8000554 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006b4:	f003 ff94 	bl	80045e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <main+0x20>

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b096      	sub	sp, #88	@ 0x58
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2244      	movs	r2, #68	@ 0x44
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 f9d2 	bl	8005a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006e2:	f000 fdfb 	bl	80012dc <HAL_PWREx_ControlVoltageScaling>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ec:	f000 f846 	bl	800077c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	2310      	movs	r3, #16
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800070a:	230a      	movs	r3, #10
 800070c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800070e:	2307      	movs	r3, #7
 8000710:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fe32 	bl	8001388 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800072a:	f000 f827 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2303      	movs	r3, #3
 8000734:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	2104      	movs	r1, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f9fa 	bl	8001b40 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000752:	f000 f813 	bl	800077c <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3758      	adds	r7, #88	@ 0x58
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800076e:	d101      	bne.n	8000774 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000770:	f000 fa62 	bl	8000c38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <Error_Handler+0x8>

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <HAL_MspInit+0x4c>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000792:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <HAL_MspInit+0x4c>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6613      	str	r3, [r2, #96]	@ 0x60
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <HAL_MspInit+0x4c>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <HAL_MspInit+0x4c>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007aa:	4a0a      	ldr	r2, [pc, #40]	@ (80007d4 <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <HAL_MspInit+0x4c>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	210f      	movs	r1, #15
 80007c2:	f06f 0001 	mvn.w	r0, #1
 80007c6:	f000 fb0f 	bl	8000de8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	@ 0x38
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80007e0:	2300      	movs	r3, #0
 80007e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007e6:	4b34      	ldr	r3, [pc, #208]	@ (80008b8 <HAL_InitTick+0xe0>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	4a33      	ldr	r2, [pc, #204]	@ (80008b8 <HAL_InitTick+0xe0>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007f2:	4b31      	ldr	r3, [pc, #196]	@ (80008b8 <HAL_InitTick+0xe0>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007fe:	f107 0210 	add.w	r2, r7, #16
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fb5d 	bl	8001ec8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800080e:	6a3b      	ldr	r3, [r7, #32]
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000814:	2b00      	cmp	r3, #0
 8000816:	d103      	bne.n	8000820 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000818:	f001 fb2a 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 800081c:	6378      	str	r0, [r7, #52]	@ 0x34
 800081e:	e004      	b.n	800082a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000820:	f001 fb26 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8000824:	4603      	mov	r3, r0
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800082a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800082c:	4a23      	ldr	r2, [pc, #140]	@ (80008bc <HAL_InitTick+0xe4>)
 800082e:	fba2 2303 	umull	r2, r3, r2, r3
 8000832:	0c9b      	lsrs	r3, r3, #18
 8000834:	3b01      	subs	r3, #1
 8000836:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000838:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <HAL_InitTick+0xe8>)
 800083a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800083e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000840:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <HAL_InitTick+0xe8>)
 8000842:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000846:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000848:	4a1d      	ldr	r2, [pc, #116]	@ (80008c0 <HAL_InitTick+0xe8>)
 800084a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800084c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800084e:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <HAL_InitTick+0xe8>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <HAL_InitTick+0xe8>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085a:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <HAL_InitTick+0xe8>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000860:	4817      	ldr	r0, [pc, #92]	@ (80008c0 <HAL_InitTick+0xe8>)
 8000862:	f002 f87f 	bl	8002964 <HAL_TIM_Base_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800086c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000870:	2b00      	cmp	r3, #0
 8000872:	d11b      	bne.n	80008ac <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000874:	4812      	ldr	r0, [pc, #72]	@ (80008c0 <HAL_InitTick+0xe8>)
 8000876:	f002 f8d7 	bl	8002a28 <HAL_TIM_Base_Start_IT>
 800087a:	4603      	mov	r3, r0
 800087c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000880:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000884:	2b00      	cmp	r3, #0
 8000886:	d111      	bne.n	80008ac <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000888:	201c      	movs	r0, #28
 800088a:	f000 fac9 	bl	8000e20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	d808      	bhi.n	80008a6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000894:	2200      	movs	r2, #0
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	201c      	movs	r0, #28
 800089a:	f000 faa5 	bl	8000de8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800089e:	4a09      	ldr	r2, [pc, #36]	@ (80008c4 <HAL_InitTick+0xec>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	e002      	b.n	80008ac <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3738      	adds	r7, #56	@ 0x38
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	431bde83 	.word	0x431bde83
 80008c0:	2000028c 	.word	0x2000028c
 80008c4:	20000004 	.word	0x20000004

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <NMI_Handler+0x4>

080008d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <MemManage_Handler+0x4>

080008e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <UsageFault_Handler+0x4>

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000904:	4802      	ldr	r0, [pc, #8]	@ (8000910 <TIM2_IRQHandler+0x10>)
 8000906:	f002 f8ff 	bl	8002b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000028c 	.word	0x2000028c

08000914 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000918:	4802      	ldr	r0, [pc, #8]	@ (8000924 <USART2_IRQHandler+0x10>)
 800091a:	f002 fb83 	bl	8003024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000360 	.word	0x20000360

08000928 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800092c:	4802      	ldr	r0, [pc, #8]	@ (8000938 <UART4_IRQHandler+0x10>)
 800092e:	f002 fb79 	bl	8003024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200002d8 	.word	0x200002d8

0800093c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 /* Prevent unused argument(s) compilation warning */
 UNUSED(huart);

	HAL_UART_Receive_IT(&huart2, &RxChar,1);
 8000944:	2201      	movs	r2, #1
 8000946:	4904      	ldr	r1, [pc, #16]	@ (8000958 <HAL_UART_RxCpltCallback+0x1c>)
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <HAL_UART_RxCpltCallback+0x20>)
 800094a:	f002 fb1f 	bl	8002f8c <HAL_UART_Receive_IT>


 /* NOTE : This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback can be implemented in the user file.
  */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000002c 	.word	0x2000002c
 800095c:	20000360 	.word	0x20000360

08000960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_UART4_Init+0x58>)
 800098a:	4a15      	ldr	r2, [pc, #84]	@ (80009e0 <MX_UART4_Init+0x5c>)
 800098c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <MX_UART4_Init+0x58>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_UART4_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_UART4_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_UART4_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_UART4_Init+0x58>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_UART4_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_UART4_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_UART4_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_UART4_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_UART4_Init+0x58>)
 80009c8:	f002 fa92 	bl	8002ef0 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009d2:	f7ff fed3 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200002d8 	.word	0x200002d8
 80009e0:	40004c00 	.word	0x40004c00

080009e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e8:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <MX_USART2_UART_Init+0x58>)
 80009ea:	4a15      	ldr	r2, [pc, #84]	@ (8000a40 <MX_USART2_UART_Init+0x5c>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ee:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <MX_USART2_UART_Init+0x58>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <MX_USART2_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <MX_USART2_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_USART2_UART_Init+0x58>)
 8000a28:	f002 fa62 	bl	8002ef0 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a32:	f7ff fea3 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000360 	.word	0x20000360
 8000a40:	40004400 	.word	0x40004400

08000a44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0ae      	sub	sp, #184	@ 0xb8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	2288      	movs	r2, #136	@ 0x88
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f005 f805 	bl	8005a74 <memset>
  if(uartHandle->Instance==UART4)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8000b98 <HAL_UART_MspInit+0x154>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d144      	bne.n	8000afe <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000a74:	2308      	movs	r3, #8
 8000a76:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fab3 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a8c:	f7ff fe76 	bl	800077c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a90:	4b42      	ldr	r3, [pc, #264]	@ (8000b9c <HAL_UART_MspInit+0x158>)
 8000a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a94:	4a41      	ldr	r2, [pc, #260]	@ (8000b9c <HAL_UART_MspInit+0x158>)
 8000a96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b9c <HAL_UART_MspInit+0x158>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000aa4:	61bb      	str	r3, [r7, #24]
 8000aa6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	@ (8000b9c <HAL_UART_MspInit+0x158>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aac:	4a3b      	ldr	r2, [pc, #236]	@ (8000b9c <HAL_UART_MspInit+0x158>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab4:	4b39      	ldr	r3, [pc, #228]	@ (8000b9c <HAL_UART_MspInit+0x158>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae8:	f000 fa28 	bl	8000f3c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2105      	movs	r1, #5
 8000af0:	2034      	movs	r0, #52	@ 0x34
 8000af2:	f000 f979 	bl	8000de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000af6:	2034      	movs	r0, #52	@ 0x34
 8000af8:	f000 f992 	bl	8000e20 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000afc:	e048      	b.n	8000b90 <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a27      	ldr	r2, [pc, #156]	@ (8000ba0 <HAL_UART_MspInit+0x15c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d143      	bne.n	8000b90 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fa69 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000b20:	f7ff fe2c 	bl	800077c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b24:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <HAL_UART_MspInit+0x158>)
 8000b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b28:	4a1c      	ldr	r2, [pc, #112]	@ (8000b9c <HAL_UART_MspInit+0x158>)
 8000b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <HAL_UART_MspInit+0x158>)
 8000b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <HAL_UART_MspInit+0x158>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b40:	4a16      	ldr	r2, [pc, #88]	@ (8000b9c <HAL_UART_MspInit+0x158>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_UART_MspInit+0x158>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b54:	230c      	movs	r3, #12
 8000b56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7c:	f000 f9de 	bl	8000f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2105      	movs	r1, #5
 8000b84:	2026      	movs	r0, #38	@ 0x26
 8000b86:	f000 f92f 	bl	8000de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b8a:	2026      	movs	r0, #38	@ 0x26
 8000b8c:	f000 f948 	bl	8000e20 <HAL_NVIC_EnableIRQ>
}
 8000b90:	bf00      	nop
 8000b92:	37b8      	adds	r7, #184	@ 0xb8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40004c00 	.word	0x40004c00
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba8:	f7ff feda 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bae:	490d      	ldr	r1, [pc, #52]	@ (8000be4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <LoopForever+0xe>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf0 <LoopForever+0x16>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f004 ff57 	bl	8005a84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd6:	f7ff fd5f 	bl	8000698 <main>

08000bda <LoopForever>:

LoopForever:
    b LoopForever
 8000bda:	e7fe      	b.n	8000bda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bdc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000be8:	08005b90 	.word	0x08005b90
  ldr r2, =_sbss
 8000bec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bf0:	20003fd8 	.word	0x20003fd8

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <HAL_Init+0x3c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a0b      	ldr	r2, [pc, #44]	@ (8000c34 <HAL_Init+0x3c>)
 8000c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0e:	2003      	movs	r0, #3
 8000c10:	f000 f8df 	bl	8000dd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c14:	200f      	movs	r0, #15
 8000c16:	f7ff fddf 	bl	80007d8 <HAL_InitTick>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	e001      	b.n	8000c2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c26:	f7ff fdaf 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40022000 	.word	0x40022000

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	200003e8 	.word	0x200003e8

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	@ (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200003e8 	.word	0x200003e8

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db0b      	blt.n	8000d06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 021f 	and.w	r2, r3, #31
 8000cf4:	4907      	ldr	r1, [pc, #28]	@ (8000d14 <__NVIC_EnableIRQ+0x38>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	095b      	lsrs	r3, r3, #5
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	@ (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	@ (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	@ 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	@ 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ff4c 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfa:	f7ff ff61 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000dfe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	6978      	ldr	r0, [r7, #20]
 8000e06:	f7ff ffb1 	bl	8000d6c <NVIC_EncodePriority>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff80 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff54 	bl	8000cdc <__NVIC_EnableIRQ>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d008      	beq.n	8000e66 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2204      	movs	r2, #4
 8000e58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e022      	b.n	8000eac <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 020e 	bic.w	r2, r2, #14
 8000e74:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0201 	bic.w	r2, r2, #1
 8000e84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f003 021c 	and.w	r2, r3, #28
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	2101      	movs	r1, #1
 8000e94:	fa01 f202 	lsl.w	r2, r1, r2
 8000e98:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d005      	beq.n	8000edc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	e029      	b.n	8000f30 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 020e 	bic.w	r2, r2, #14
 8000eea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0201 	bic.w	r2, r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f00:	f003 021c 	and.w	r2, r3, #28
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f08:	2101      	movs	r1, #1
 8000f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	4798      	blx	r3
    }
  }
  return status;
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e17f      	b.n	800124c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	2101      	movs	r1, #1
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 8171 	beq.w	8001246 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d005      	beq.n	8000f7c <HAL_GPIO_Init+0x40>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d130      	bne.n	8000fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f003 0201 	and.w	r2, r3, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d118      	bne.n	800101c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	08db      	lsrs	r3, r3, #3
 8001006:	f003 0201 	and.w	r2, r3, #1
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b03      	cmp	r3, #3
 8001026:	d017      	beq.n	8001058 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d123      	bne.n	80010ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	6939      	ldr	r1, [r7, #16]
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0203 	and.w	r2, r3, #3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80ac 	beq.w	8001246 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	4b5f      	ldr	r3, [pc, #380]	@ (800126c <HAL_GPIO_Init+0x330>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f2:	4a5e      	ldr	r2, [pc, #376]	@ (800126c <HAL_GPIO_Init+0x330>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010fa:	4b5c      	ldr	r3, [pc, #368]	@ (800126c <HAL_GPIO_Init+0x330>)
 80010fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001106:	4a5a      	ldr	r2, [pc, #360]	@ (8001270 <HAL_GPIO_Init+0x334>)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001130:	d025      	beq.n	800117e <HAL_GPIO_Init+0x242>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4f      	ldr	r2, [pc, #316]	@ (8001274 <HAL_GPIO_Init+0x338>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01f      	beq.n	800117a <HAL_GPIO_Init+0x23e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4e      	ldr	r2, [pc, #312]	@ (8001278 <HAL_GPIO_Init+0x33c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d019      	beq.n	8001176 <HAL_GPIO_Init+0x23a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4d      	ldr	r2, [pc, #308]	@ (800127c <HAL_GPIO_Init+0x340>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0x236>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4c      	ldr	r2, [pc, #304]	@ (8001280 <HAL_GPIO_Init+0x344>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_GPIO_Init+0x232>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4b      	ldr	r2, [pc, #300]	@ (8001284 <HAL_GPIO_Init+0x348>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x22e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4a      	ldr	r2, [pc, #296]	@ (8001288 <HAL_GPIO_Init+0x34c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_GPIO_Init+0x22a>
 8001162:	2306      	movs	r3, #6
 8001164:	e00c      	b.n	8001180 <HAL_GPIO_Init+0x244>
 8001166:	2307      	movs	r3, #7
 8001168:	e00a      	b.n	8001180 <HAL_GPIO_Init+0x244>
 800116a:	2305      	movs	r3, #5
 800116c:	e008      	b.n	8001180 <HAL_GPIO_Init+0x244>
 800116e:	2304      	movs	r3, #4
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x244>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x244>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x244>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x244>
 800117e:	2300      	movs	r3, #0
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001190:	4937      	ldr	r1, [pc, #220]	@ (8001270 <HAL_GPIO_Init+0x334>)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800119e:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <HAL_GPIO_Init+0x350>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011c2:	4a32      	ldr	r2, [pc, #200]	@ (800128c <HAL_GPIO_Init+0x350>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011c8:	4b30      	ldr	r3, [pc, #192]	@ (800128c <HAL_GPIO_Init+0x350>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ec:	4a27      	ldr	r2, [pc, #156]	@ (800128c <HAL_GPIO_Init+0x350>)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011f2:	4b26      	ldr	r3, [pc, #152]	@ (800128c <HAL_GPIO_Init+0x350>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001216:	4a1d      	ldr	r2, [pc, #116]	@ (800128c <HAL_GPIO_Init+0x350>)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <HAL_GPIO_Init+0x350>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001240:	4a12      	ldr	r2, [pc, #72]	@ (800128c <HAL_GPIO_Init+0x350>)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa22 f303 	lsr.w	r3, r2, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	f47f ae78 	bne.w	8000f4c <HAL_GPIO_Init+0x10>
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	371c      	adds	r7, #28
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000
 8001274:	48000400 	.word	0x48000400
 8001278:	48000800 	.word	0x48000800
 800127c:	48000c00 	.word	0x48000c00
 8001280:	48001000 	.word	0x48001000
 8001284:	48001400 	.word	0x48001400
 8001288:	48001800 	.word	0x48001800
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40007000 	.word	0x40007000

080012dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012ea:	d130      	bne.n	800134e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ec:	4b23      	ldr	r3, [pc, #140]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012f8:	d038      	beq.n	800136c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fa:	4b20      	ldr	r3, [pc, #128]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001302:	4a1e      	ldr	r2, [pc, #120]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001304:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001308:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2232      	movs	r2, #50	@ 0x32
 8001310:	fb02 f303 	mul.w	r3, r2, r3
 8001314:	4a1b      	ldr	r2, [pc, #108]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001316:	fba2 2303 	umull	r2, r3, r2, r3
 800131a:	0c9b      	lsrs	r3, r3, #18
 800131c:	3301      	adds	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001320:	e002      	b.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3b01      	subs	r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001334:	d102      	bne.n	800133c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f2      	bne.n	8001322 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001348:	d110      	bne.n	800136c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e00f      	b.n	800136e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800135a:	d007      	beq.n	800136c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800135c:	4b07      	ldr	r3, [pc, #28]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001364:	4a05      	ldr	r2, [pc, #20]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800136a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40007000 	.word	0x40007000
 8001380:	20000000 	.word	0x20000000
 8001384:	431bde83 	.word	0x431bde83

08001388 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e3ca      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800139a:	4b97      	ldr	r3, [pc, #604]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a4:	4b94      	ldr	r3, [pc, #592]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 80e4 	beq.w	8001584 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d007      	beq.n	80013d2 <HAL_RCC_OscConfig+0x4a>
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	2b0c      	cmp	r3, #12
 80013c6:	f040 808b 	bne.w	80014e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	f040 8087 	bne.w	80014e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d2:	4b89      	ldr	r3, [pc, #548]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x62>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e3a2      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1a      	ldr	r2, [r3, #32]
 80013ee:	4b82      	ldr	r3, [pc, #520]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d004      	beq.n	8001404 <HAL_RCC_OscConfig+0x7c>
 80013fa:	4b7f      	ldr	r3, [pc, #508]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001402:	e005      	b.n	8001410 <HAL_RCC_OscConfig+0x88>
 8001404:	4b7c      	ldr	r3, [pc, #496]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001410:	4293      	cmp	r3, r2
 8001412:	d223      	bcs.n	800145c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fd87 	bl	8001f2c <RCC_SetFlashLatencyFromMSIRange>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e383      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001428:	4b73      	ldr	r3, [pc, #460]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a72      	ldr	r2, [pc, #456]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b70      	ldr	r3, [pc, #448]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	496d      	ldr	r1, [pc, #436]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001446:	4b6c      	ldr	r3, [pc, #432]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	4968      	ldr	r1, [pc, #416]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
 800145a:	e025      	b.n	80014a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800145c:	4b66      	ldr	r3, [pc, #408]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a65      	ldr	r2, [pc, #404]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001462:	f043 0308 	orr.w	r3, r3, #8
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b63      	ldr	r3, [pc, #396]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4960      	ldr	r1, [pc, #384]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800147a:	4b5f      	ldr	r3, [pc, #380]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	495b      	ldr	r1, [pc, #364]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d109      	bne.n	80014a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fd47 	bl	8001f2c <RCC_SetFlashLatencyFromMSIRange>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e343      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014a8:	f000 fc4a 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b52      	ldr	r3, [pc, #328]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	4950      	ldr	r1, [pc, #320]	@ (80015fc <HAL_RCC_OscConfig+0x274>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001600 <HAL_RCC_OscConfig+0x278>)
 80014c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001604 <HAL_RCC_OscConfig+0x27c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f983 	bl	80007d8 <HAL_InitTick>
 80014d2:	4603      	mov	r3, r0
 80014d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d052      	beq.n	8001582 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	e327      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d032      	beq.n	800154e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014e8:	4b43      	ldr	r3, [pc, #268]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a42      	ldr	r2, [pc, #264]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fbb4 	bl	8000c60 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014fc:	f7ff fbb0 	bl	8000c60 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e310      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800150e:	4b3a      	ldr	r3, [pc, #232]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800151a:	4b37      	ldr	r3, [pc, #220]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a36      	ldr	r2, [pc, #216]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4931      	ldr	r1, [pc, #196]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001538:	4b2f      	ldr	r3, [pc, #188]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	021b      	lsls	r3, r3, #8
 8001546:	492c      	ldr	r1, [pc, #176]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]
 800154c:	e01a      	b.n	8001584 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a29      	ldr	r2, [pc, #164]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800155a:	f7ff fb81 	bl	8000c60 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001562:	f7ff fb7d 	bl	8000c60 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e2dd      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001574:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f0      	bne.n	8001562 <HAL_RCC_OscConfig+0x1da>
 8001580:	e000      	b.n	8001584 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001582:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d074      	beq.n	800167a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b08      	cmp	r3, #8
 8001594:	d005      	beq.n	80015a2 <HAL_RCC_OscConfig+0x21a>
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2b0c      	cmp	r3, #12
 800159a:	d10e      	bne.n	80015ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d10b      	bne.n	80015ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d064      	beq.n	8001678 <HAL_RCC_OscConfig+0x2f0>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d160      	bne.n	8001678 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e2ba      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015c2:	d106      	bne.n	80015d2 <HAL_RCC_OscConfig+0x24a>
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80015ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e026      	b.n	8001620 <HAL_RCC_OscConfig+0x298>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015da:	d115      	bne.n	8001608 <HAL_RCC_OscConfig+0x280>
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a05      	ldr	r2, [pc, #20]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80015e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b03      	ldr	r3, [pc, #12]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a02      	ldr	r2, [pc, #8]	@ (80015f8 <HAL_RCC_OscConfig+0x270>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e014      	b.n	8001620 <HAL_RCC_OscConfig+0x298>
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	08005b38 	.word	0x08005b38
 8001600:	20000000 	.word	0x20000000
 8001604:	20000004 	.word	0x20000004
 8001608:	4ba0      	ldr	r3, [pc, #640]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a9f      	ldr	r2, [pc, #636]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 800160e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b9d      	ldr	r3, [pc, #628]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a9c      	ldr	r2, [pc, #624]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800161e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fb1a 	bl	8000c60 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fb16 	bl	8000c60 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	@ 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e276      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001642:	4b92      	ldr	r3, [pc, #584]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x2a8>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fb06 	bl	8000c60 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fb02 	bl	8000c60 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	@ 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e262      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800166a:	4b88      	ldr	r3, [pc, #544]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x2d0>
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d060      	beq.n	8001748 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d005      	beq.n	8001698 <HAL_RCC_OscConfig+0x310>
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d119      	bne.n	80016c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d116      	bne.n	80016c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001698:	4b7c      	ldr	r3, [pc, #496]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_OscConfig+0x328>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e23f      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	4b76      	ldr	r3, [pc, #472]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	061b      	lsls	r3, r3, #24
 80016be:	4973      	ldr	r1, [pc, #460]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c4:	e040      	b.n	8001748 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d023      	beq.n	8001716 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ce:	4b6f      	ldr	r3, [pc, #444]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a6e      	ldr	r2, [pc, #440]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016da:	f7ff fac1 	bl	8000c60 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff fabd 	bl	8000c60 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e21d      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f4:	4b65      	ldr	r3, [pc, #404]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b62      	ldr	r3, [pc, #392]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	061b      	lsls	r3, r3, #24
 800170e:	495f      	ldr	r1, [pc, #380]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
 8001714:	e018      	b.n	8001748 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001716:	4b5d      	ldr	r3, [pc, #372]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a5c      	ldr	r2, [pc, #368]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 800171c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fa9d 	bl	8000c60 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172a:	f7ff fa99 	bl	8000c60 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e1f9      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800173c:	4b53      	ldr	r3, [pc, #332]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d03c      	beq.n	80017ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01c      	beq.n	8001796 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175c:	4b4b      	ldr	r3, [pc, #300]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001762:	4a4a      	ldr	r2, [pc, #296]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff fa78 	bl	8000c60 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001774:	f7ff fa74 	bl	8000c60 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1d4      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001786:	4b41      	ldr	r3, [pc, #260]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 8001788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0ef      	beq.n	8001774 <HAL_RCC_OscConfig+0x3ec>
 8001794:	e01b      	b.n	80017ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001796:	4b3d      	ldr	r3, [pc, #244]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 8001798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800179c:	4a3b      	ldr	r2, [pc, #236]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff fa5b 	bl	8000c60 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff fa57 	bl	8000c60 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e1b7      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017c0:	4b32      	ldr	r3, [pc, #200]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1ef      	bne.n	80017ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80a6 	beq.w	8001928 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017e0:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10d      	bne.n	8001808 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f0:	4a26      	ldr	r2, [pc, #152]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 80017f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f8:	4b24      	ldr	r3, [pc, #144]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001804:	2301      	movs	r3, #1
 8001806:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001808:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <HAL_RCC_OscConfig+0x508>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d118      	bne.n	8001846 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001814:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <HAL_RCC_OscConfig+0x508>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1d      	ldr	r2, [pc, #116]	@ (8001890 <HAL_RCC_OscConfig+0x508>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001820:	f7ff fa1e 	bl	8000c60 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001828:	f7ff fa1a 	bl	8000c60 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e17a      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_RCC_OscConfig+0x508>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d108      	bne.n	8001860 <HAL_RCC_OscConfig+0x4d8>
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 8001850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800185e:	e029      	b.n	80018b4 <HAL_RCC_OscConfig+0x52c>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b05      	cmp	r3, #5
 8001866:	d115      	bne.n	8001894 <HAL_RCC_OscConfig+0x50c>
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 800186a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800186e:	4a07      	ldr	r2, [pc, #28]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001878:	4b04      	ldr	r3, [pc, #16]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 800187a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800187e:	4a03      	ldr	r2, [pc, #12]	@ (800188c <HAL_RCC_OscConfig+0x504>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001888:	e014      	b.n	80018b4 <HAL_RCC_OscConfig+0x52c>
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	40007000 	.word	0x40007000
 8001894:	4b9c      	ldr	r3, [pc, #624]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800189a:	4a9b      	ldr	r2, [pc, #620]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018a4:	4b98      	ldr	r3, [pc, #608]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018aa:	4a97      	ldr	r2, [pc, #604]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d016      	beq.n	80018ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff f9d0 	bl	8000c60 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c2:	e00a      	b.n	80018da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7ff f9cc 	bl	8000c60 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e12a      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018da:	4b8b      	ldr	r3, [pc, #556]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 80018dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0ed      	beq.n	80018c4 <HAL_RCC_OscConfig+0x53c>
 80018e8:	e015      	b.n	8001916 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff f9b9 	bl	8000c60 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7ff f9b5 	bl	8000c60 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e113      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001908:	4b7f      	ldr	r3, [pc, #508]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 800190a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ed      	bne.n	80018f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001916:	7ffb      	ldrb	r3, [r7, #31]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191c:	4b7a      	ldr	r3, [pc, #488]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	4a79      	ldr	r2, [pc, #484]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001926:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80fe 	beq.w	8001b2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001936:	2b02      	cmp	r3, #2
 8001938:	f040 80d0 	bne.w	8001adc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800193c:	4b72      	ldr	r3, [pc, #456]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f003 0203 	and.w	r2, r3, #3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194c:	429a      	cmp	r2, r3
 800194e:	d130      	bne.n	80019b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	3b01      	subs	r3, #1
 800195c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d127      	bne.n	80019b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800196c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d11f      	bne.n	80019b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800197c:	2a07      	cmp	r2, #7
 800197e:	bf14      	ite	ne
 8001980:	2201      	movne	r2, #1
 8001982:	2200      	moveq	r2, #0
 8001984:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	4293      	cmp	r3, r2
 8001988:	d113      	bne.n	80019b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	3b01      	subs	r3, #1
 8001998:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d109      	bne.n	80019b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	3b01      	subs	r3, #1
 80019ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d06e      	beq.n	8001a90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	2b0c      	cmp	r3, #12
 80019b6:	d069      	beq.n	8001a8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019b8:	4b53      	ldr	r3, [pc, #332]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019c4:	4b50      	ldr	r3, [pc, #320]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0ad      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 80019da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019e0:	f7ff f93e 	bl	8000c60 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f93a 	bl	8000c60 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e09a      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019fa:	4b43      	ldr	r3, [pc, #268]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a06:	4b40      	ldr	r3, [pc, #256]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	4b40      	ldr	r3, [pc, #256]	@ (8001b0c <HAL_RCC_OscConfig+0x784>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a16:	3a01      	subs	r2, #1
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a20:	0212      	lsls	r2, r2, #8
 8001a22:	4311      	orrs	r1, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a28:	0852      	lsrs	r2, r2, #1
 8001a2a:	3a01      	subs	r2, #1
 8001a2c:	0552      	lsls	r2, r2, #21
 8001a2e:	4311      	orrs	r1, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a34:	0852      	lsrs	r2, r2, #1
 8001a36:	3a01      	subs	r2, #1
 8001a38:	0652      	lsls	r2, r2, #25
 8001a3a:	4311      	orrs	r1, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a40:	0912      	lsrs	r2, r2, #4
 8001a42:	0452      	lsls	r2, r2, #17
 8001a44:	430a      	orrs	r2, r1
 8001a46:	4930      	ldr	r1, [pc, #192]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a2d      	ldr	r2, [pc, #180]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a58:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a64:	f7ff f8fc 	bl	8000c60 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff f8f8 	bl	8000c60 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e058      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7e:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a8a:	e050      	b.n	8001b2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e04f      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a90:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d148      	bne.n	8001b2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aa8:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4a16      	ldr	r2, [pc, #88]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ab2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ab4:	f7ff f8d4 	bl	8000c60 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff f8d0 	bl	8000c60 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e030      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x734>
 8001ada:	e028      	b.n	8001b2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d023      	beq.n	8001b2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a08      	ldr	r2, [pc, #32]	@ (8001b08 <HAL_RCC_OscConfig+0x780>)
 8001ae8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7ff f8b7 	bl	8000c60 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af4:	e00c      	b.n	8001b10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff f8b3 	bl	8000c60 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d905      	bls.n	8001b10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e013      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b10:	4b09      	ldr	r3, [pc, #36]	@ (8001b38 <HAL_RCC_OscConfig+0x7b0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1ec      	bne.n	8001af6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_RCC_OscConfig+0x7b0>)
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	4905      	ldr	r1, [pc, #20]	@ (8001b38 <HAL_RCC_OscConfig+0x7b0>)
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_RCC_OscConfig+0x7b4>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	60cb      	str	r3, [r1, #12]
 8001b28:	e001      	b.n	8001b2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	feeefffc 	.word	0xfeeefffc

08001b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0e7      	b.n	8001d24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	4b75      	ldr	r3, [pc, #468]	@ (8001d2c <HAL_RCC_ClockConfig+0x1ec>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d910      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b72      	ldr	r3, [pc, #456]	@ (8001d2c <HAL_RCC_ClockConfig+0x1ec>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 0207 	bic.w	r2, r3, #7
 8001b6a:	4970      	ldr	r1, [pc, #448]	@ (8001d2c <HAL_RCC_ClockConfig+0x1ec>)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b72:	4b6e      	ldr	r3, [pc, #440]	@ (8001d2c <HAL_RCC_ClockConfig+0x1ec>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0cf      	b.n	8001d24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d010      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4b66      	ldr	r3, [pc, #408]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d908      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba0:	4b63      	ldr	r3, [pc, #396]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4960      	ldr	r1, [pc, #384]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d04c      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d121      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0a6      	b.n	8001d24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bde:	4b54      	ldr	r3, [pc, #336]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d115      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e09a      	b.n	8001d24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e08e      	b.n	8001d24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c06:	4b4a      	ldr	r3, [pc, #296]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e086      	b.n	8001d24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c16:	4b46      	ldr	r3, [pc, #280]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f023 0203 	bic.w	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4943      	ldr	r1, [pc, #268]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c28:	f7ff f81a 	bl	8000c60 <HAL_GetTick>
 8001c2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c30:	f7ff f816 	bl	8000c60 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e06e      	b.n	8001d24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	4b3a      	ldr	r3, [pc, #232]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 020c 	and.w	r2, r3, #12
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d1eb      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d010      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	4b31      	ldr	r3, [pc, #196]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d208      	bcs.n	8001c86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	492b      	ldr	r1, [pc, #172]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c86:	4b29      	ldr	r3, [pc, #164]	@ (8001d2c <HAL_RCC_ClockConfig+0x1ec>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d210      	bcs.n	8001cb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c94:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <HAL_RCC_ClockConfig+0x1ec>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 0207 	bic.w	r2, r3, #7
 8001c9c:	4923      	ldr	r1, [pc, #140]	@ (8001d2c <HAL_RCC_ClockConfig+0x1ec>)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca4:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <HAL_RCC_ClockConfig+0x1ec>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e036      	b.n	8001d24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	4918      	ldr	r1, [pc, #96]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d009      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4910      	ldr	r1, [pc, #64]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cf4:	f000 f824 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	091b      	lsrs	r3, r3, #4
 8001d00:	f003 030f 	and.w	r3, r3, #15
 8001d04:	490b      	ldr	r1, [pc, #44]	@ (8001d34 <HAL_RCC_ClockConfig+0x1f4>)
 8001d06:	5ccb      	ldrb	r3, [r1, r3]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d10:	4a09      	ldr	r2, [pc, #36]	@ (8001d38 <HAL_RCC_ClockConfig+0x1f8>)
 8001d12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d14:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_RCC_ClockConfig+0x1fc>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fd5d 	bl	80007d8 <HAL_InitTick>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d22:	7afb      	ldrb	r3, [r7, #11]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	08005b38 	.word	0x08005b38
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	@ 0x24
 8001d44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d58:	4b3b      	ldr	r3, [pc, #236]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x34>
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d121      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d11e      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d74:	4b34      	ldr	r3, [pc, #208]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d80:	4b31      	ldr	r3, [pc, #196]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	e005      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d90:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10d      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001db8:	4b25      	ldr	r3, [pc, #148]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	e004      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dc4:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d134      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dce:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d003      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0xac>
 8001de4:	e005      	b.n	8001df2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001de8:	617b      	str	r3, [r7, #20]
      break;
 8001dea:	e005      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dec:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dee:	617b      	str	r3, [r7, #20]
      break;
 8001df0:	e002      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	617b      	str	r3, [r7, #20]
      break;
 8001df6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001df8:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	3301      	adds	r3, #1
 8001e04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e06:	4b10      	ldr	r3, [pc, #64]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	fb03 f202 	mul.w	r2, r3, r2
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	0e5b      	lsrs	r3, r3, #25
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e38:	69bb      	ldr	r3, [r7, #24]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	@ 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	08005b50 	.word	0x08005b50
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200

08001e58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000000 	.word	0x20000000

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e74:	f7ff fff0 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4904      	ldr	r1, [pc, #16]	@ (8001e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	08005b48 	.word	0x08005b48

08001e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ea0:	f7ff ffda 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0adb      	lsrs	r3, r3, #11
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	4904      	ldr	r1, [pc, #16]	@ (8001ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eb2:	5ccb      	ldrb	r3, [r1, r3]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08005b48 	.word	0x08005b48

08001ec8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <HAL_RCC_GetClockConfig+0x5c>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <HAL_RCC_GetClockConfig+0x5c>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001efc:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <HAL_RCC_GetClockConfig+0x5c>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f0a:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <HAL_RCC_GetClockConfig+0x60>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0207 	and.w	r2, r3, #7
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	601a      	str	r2, [r3, #0]
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40022000 	.word	0x40022000

08001f2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f38:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f44:	f7ff f9bc 	bl	80012c0 <HAL_PWREx_GetVoltageRange>
 8001f48:	6178      	str	r0, [r7, #20]
 8001f4a:	e014      	b.n	8001f76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f4c:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f50:	4a24      	ldr	r2, [pc, #144]	@ (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f64:	f7ff f9ac 	bl	80012c0 <HAL_PWREx_GetVoltageRange>
 8001f68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f7c:	d10b      	bne.n	8001f96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b80      	cmp	r3, #128	@ 0x80
 8001f82:	d919      	bls.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f88:	d902      	bls.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e013      	b.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f90:	2301      	movs	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	e010      	b.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b80      	cmp	r3, #128	@ 0x80
 8001f9a:	d902      	bls.n	8001fa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	e00a      	b.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b80      	cmp	r3, #128	@ 0x80
 8001fa6:	d102      	bne.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa8:	2302      	movs	r3, #2
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e004      	b.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b70      	cmp	r3, #112	@ 0x70
 8001fb2:	d101      	bne.n	8001fb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 0207 	bic.w	r2, r3, #7
 8001fc0:	4909      	ldr	r1, [pc, #36]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fc8:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d001      	beq.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40022000 	.word	0x40022000

08001fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002004:	2b00      	cmp	r3, #0
 8002006:	d041      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800200c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002010:	d02a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002012:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002016:	d824      	bhi.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002018:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800201c:	d008      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800201e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002022:	d81e      	bhi.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002028:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800202c:	d010      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800202e:	e018      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002030:	4b86      	ldr	r3, [pc, #536]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a85      	ldr	r2, [pc, #532]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800203c:	e015      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3304      	adds	r3, #4
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f000 fabb 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 800204a:	4603      	mov	r3, r0
 800204c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800204e:	e00c      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3320      	adds	r3, #32
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fba6 	bl	80027a8 <RCCEx_PLLSAI2_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002060:	e003      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	74fb      	strb	r3, [r7, #19]
      break;
 8002066:	e000      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800206a:	7cfb      	ldrb	r3, [r7, #19]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10b      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002070:	4b76      	ldr	r3, [pc, #472]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002076:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800207e:	4973      	ldr	r1, [pc, #460]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002086:	e001      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002088:	7cfb      	ldrb	r3, [r7, #19]
 800208a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d041      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800209c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020a0:	d02a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020a6:	d824      	bhi.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020ac:	d008      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020b2:	d81e      	bhi.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020bc:	d010      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020be:	e018      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020c0:	4b62      	ldr	r3, [pc, #392]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a61      	ldr	r2, [pc, #388]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020cc:	e015      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fa73 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 80020da:	4603      	mov	r3, r0
 80020dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020de:	e00c      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3320      	adds	r3, #32
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fb5e 	bl	80027a8 <RCCEx_PLLSAI2_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020f0:	e003      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	74fb      	strb	r3, [r7, #19]
      break;
 80020f6:	e000      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80020f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020fa:	7cfb      	ldrb	r3, [r7, #19]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002100:	4b52      	ldr	r3, [pc, #328]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002106:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800210e:	494f      	ldr	r1, [pc, #316]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002116:	e001      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a0 	beq.w	800226a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800212e:	4b47      	ldr	r3, [pc, #284]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800213e:	2300      	movs	r3, #0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00d      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002144:	4b41      	ldr	r3, [pc, #260]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002148:	4a40      	ldr	r2, [pc, #256]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800214e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002150:	4b3e      	ldr	r3, [pc, #248]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215c:	2301      	movs	r3, #1
 800215e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a3a      	ldr	r2, [pc, #232]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800216c:	f7fe fd78 	bl	8000c60 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002172:	e009      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002174:	f7fe fd74 	bl	8000c60 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d902      	bls.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	74fb      	strb	r3, [r7, #19]
        break;
 8002186:	e005      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002188:	4b31      	ldr	r3, [pc, #196]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ef      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d15c      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800219a:	4b2c      	ldr	r3, [pc, #176]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01f      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d019      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021b8:	4b24      	ldr	r3, [pc, #144]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021c4:	4b21      	ldr	r3, [pc, #132]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ca:	4a20      	ldr	r2, [pc, #128]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021d4:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021da:	4a1c      	ldr	r2, [pc, #112]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021e4:	4a19      	ldr	r2, [pc, #100]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d016      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7fe fd33 	bl	8000c60 <HAL_GetTick>
 80021fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fc:	e00b      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7fe fd2f 	bl	8000c60 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d902      	bls.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	74fb      	strb	r3, [r7, #19]
            break;
 8002214:	e006      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ec      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10c      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800222a:	4b08      	ldr	r3, [pc, #32]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800223a:	4904      	ldr	r1, [pc, #16]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002242:	e009      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
 8002248:	e006      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002258:	7c7b      	ldrb	r3, [r7, #17]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4b9e      	ldr	r3, [pc, #632]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002262:	4a9d      	ldr	r2, [pc, #628]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002268:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002276:	4b98      	ldr	r3, [pc, #608]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800227c:	f023 0203 	bic.w	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002284:	4994      	ldr	r1, [pc, #592]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002298:	4b8f      	ldr	r3, [pc, #572]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229e:	f023 020c 	bic.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a6:	498c      	ldr	r1, [pc, #560]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ba:	4b87      	ldr	r3, [pc, #540]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	4983      	ldr	r1, [pc, #524]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022dc:	4b7e      	ldr	r3, [pc, #504]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	497b      	ldr	r1, [pc, #492]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022fe:	4b76      	ldr	r3, [pc, #472]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002304:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230c:	4972      	ldr	r1, [pc, #456]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002320:	4b6d      	ldr	r3, [pc, #436]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002326:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	496a      	ldr	r1, [pc, #424]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002342:	4b65      	ldr	r3, [pc, #404]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002348:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002350:	4961      	ldr	r1, [pc, #388]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002364:	4b5c      	ldr	r3, [pc, #368]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800236a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002372:	4959      	ldr	r1, [pc, #356]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002386:	4b54      	ldr	r3, [pc, #336]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002394:	4950      	ldr	r1, [pc, #320]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023a8:	4b4b      	ldr	r3, [pc, #300]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b6:	4948      	ldr	r1, [pc, #288]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ca:	4b43      	ldr	r3, [pc, #268]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d8:	493f      	ldr	r1, [pc, #252]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d028      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ec:	4b3a      	ldr	r3, [pc, #232]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023fa:	4937      	ldr	r1, [pc, #220]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002406:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800240a:	d106      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240c:	4b32      	ldr	r3, [pc, #200]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a31      	ldr	r2, [pc, #196]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002416:	60d3      	str	r3, [r2, #12]
 8002418:	e011      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800241e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002422:	d10c      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	2101      	movs	r1, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f8c8 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d028      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800244a:	4b23      	ldr	r3, [pc, #140]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002450:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	491f      	ldr	r1, [pc, #124]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002468:	d106      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800246a:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4a1a      	ldr	r2, [pc, #104]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002470:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002474:	60d3      	str	r3, [r2, #12]
 8002476:	e011      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002480:	d10c      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f899 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d02b      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024a8:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b6:	4908      	ldr	r1, [pc, #32]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024c6:	d109      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c8:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a02      	ldr	r2, [pc, #8]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024d2:	60d3      	str	r3, [r2, #12]
 80024d4:	e014      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2101      	movs	r1, #1
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f867 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 80024f2:	4603      	mov	r3, r0
 80024f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d02f      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800250c:	4b2b      	ldr	r3, [pc, #172]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002512:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800251a:	4928      	ldr	r1, [pc, #160]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800252a:	d10d      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3304      	adds	r3, #4
 8002530:	2102      	movs	r1, #2
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f844 	bl	80025c0 <RCCEx_PLLSAI1_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d014      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	74bb      	strb	r3, [r7, #18]
 8002546:	e011      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800254c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002550:	d10c      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3320      	adds	r3, #32
 8002556:	2102      	movs	r1, #2
 8002558:	4618      	mov	r0, r3
 800255a:	f000 f925 	bl	80027a8 <RCCEx_PLLSAI2_Config>
 800255e:	4603      	mov	r3, r0
 8002560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002578:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002586:	490d      	ldr	r1, [pc, #52]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800259a:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025aa:	4904      	ldr	r1, [pc, #16]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000

080025c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ce:	4b75      	ldr	r3, [pc, #468]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d018      	beq.n	800260c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025da:	4b72      	ldr	r3, [pc, #456]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f003 0203 	and.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d10d      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
       ||
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025f2:	4b6c      	ldr	r3, [pc, #432]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
       ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d047      	beq.n	8002696 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	e044      	b.n	8002696 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d018      	beq.n	8002646 <RCCEx_PLLSAI1_Config+0x86>
 8002614:	2b03      	cmp	r3, #3
 8002616:	d825      	bhi.n	8002664 <RCCEx_PLLSAI1_Config+0xa4>
 8002618:	2b01      	cmp	r3, #1
 800261a:	d002      	beq.n	8002622 <RCCEx_PLLSAI1_Config+0x62>
 800261c:	2b02      	cmp	r3, #2
 800261e:	d009      	beq.n	8002634 <RCCEx_PLLSAI1_Config+0x74>
 8002620:	e020      	b.n	8002664 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002622:	4b60      	ldr	r3, [pc, #384]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d11d      	bne.n	800266a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002632:	e01a      	b.n	800266a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002634:	4b5b      	ldr	r3, [pc, #364]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d116      	bne.n	800266e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002644:	e013      	b.n	800266e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002646:	4b57      	ldr	r3, [pc, #348]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10f      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002652:	4b54      	ldr	r3, [pc, #336]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002662:	e006      	b.n	8002672 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      break;
 8002668:	e004      	b.n	8002674 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800266a:	bf00      	nop
 800266c:	e002      	b.n	8002674 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002672:	bf00      	nop
    }

    if(status == HAL_OK)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10d      	bne.n	8002696 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800267a:	4b4a      	ldr	r3, [pc, #296]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6819      	ldr	r1, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	3b01      	subs	r3, #1
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	430b      	orrs	r3, r1
 8002690:	4944      	ldr	r1, [pc, #272]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d17d      	bne.n	8002798 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800269c:	4b41      	ldr	r3, [pc, #260]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a40      	ldr	r2, [pc, #256]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a8:	f7fe fada 	bl	8000c60 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026ae:	e009      	b.n	80026c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b0:	f7fe fad6 	bl	8000c60 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d902      	bls.n	80026c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	73fb      	strb	r3, [r7, #15]
        break;
 80026c2:	e005      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026c4:	4b37      	ldr	r3, [pc, #220]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ef      	bne.n	80026b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d160      	bne.n	8002798 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d111      	bne.n	8002700 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026dc:	4b31      	ldr	r3, [pc, #196]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6892      	ldr	r2, [r2, #8]
 80026ec:	0211      	lsls	r1, r2, #8
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68d2      	ldr	r2, [r2, #12]
 80026f2:	0912      	lsrs	r2, r2, #4
 80026f4:	0452      	lsls	r2, r2, #17
 80026f6:	430a      	orrs	r2, r1
 80026f8:	492a      	ldr	r1, [pc, #168]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	610b      	str	r3, [r1, #16]
 80026fe:	e027      	b.n	8002750 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d112      	bne.n	800272c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002706:	4b27      	ldr	r3, [pc, #156]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800270e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6892      	ldr	r2, [r2, #8]
 8002716:	0211      	lsls	r1, r2, #8
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6912      	ldr	r2, [r2, #16]
 800271c:	0852      	lsrs	r2, r2, #1
 800271e:	3a01      	subs	r2, #1
 8002720:	0552      	lsls	r2, r2, #21
 8002722:	430a      	orrs	r2, r1
 8002724:	491f      	ldr	r1, [pc, #124]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002726:	4313      	orrs	r3, r2
 8002728:	610b      	str	r3, [r1, #16]
 800272a:	e011      	b.n	8002750 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800272c:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002734:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6892      	ldr	r2, [r2, #8]
 800273c:	0211      	lsls	r1, r2, #8
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6952      	ldr	r2, [r2, #20]
 8002742:	0852      	lsrs	r2, r2, #1
 8002744:	3a01      	subs	r2, #1
 8002746:	0652      	lsls	r2, r2, #25
 8002748:	430a      	orrs	r2, r1
 800274a:	4916      	ldr	r1, [pc, #88]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002750:	4b14      	ldr	r3, [pc, #80]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a13      	ldr	r2, [pc, #76]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002756:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800275a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fa80 	bl	8000c60 <HAL_GetTick>
 8002760:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002762:	e009      	b.n	8002778 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002764:	f7fe fa7c 	bl	8000c60 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	73fb      	strb	r3, [r7, #15]
          break;
 8002776:	e005      	b.n	8002784 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002778:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ef      	beq.n	8002764 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800278a:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	4904      	ldr	r1, [pc, #16]	@ (80027a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000

080027a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d018      	beq.n	80027f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027c2:	4b67      	ldr	r3, [pc, #412]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0203 	and.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d10d      	bne.n	80027ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
       ||
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027da:	4b61      	ldr	r3, [pc, #388]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
       ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d047      	beq.n	800287e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	e044      	b.n	800287e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d018      	beq.n	800282e <RCCEx_PLLSAI2_Config+0x86>
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d825      	bhi.n	800284c <RCCEx_PLLSAI2_Config+0xa4>
 8002800:	2b01      	cmp	r3, #1
 8002802:	d002      	beq.n	800280a <RCCEx_PLLSAI2_Config+0x62>
 8002804:	2b02      	cmp	r3, #2
 8002806:	d009      	beq.n	800281c <RCCEx_PLLSAI2_Config+0x74>
 8002808:	e020      	b.n	800284c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800280a:	4b55      	ldr	r3, [pc, #340]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d11d      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281a:	e01a      	b.n	8002852 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800281c:	4b50      	ldr	r3, [pc, #320]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d116      	bne.n	8002856 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282c:	e013      	b.n	8002856 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800282e:	4b4c      	ldr	r3, [pc, #304]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800283a:	4b49      	ldr	r3, [pc, #292]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800284a:	e006      	b.n	800285a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      break;
 8002850:	e004      	b.n	800285c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002852:	bf00      	nop
 8002854:	e002      	b.n	800285c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002856:	bf00      	nop
 8002858:	e000      	b.n	800285c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800285a:	bf00      	nop
    }

    if(status == HAL_OK)
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10d      	bne.n	800287e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002862:	4b3f      	ldr	r3, [pc, #252]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6819      	ldr	r1, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	430b      	orrs	r3, r1
 8002878:	4939      	ldr	r1, [pc, #228]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287a:	4313      	orrs	r3, r2
 800287c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d167      	bne.n	8002954 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002884:	4b36      	ldr	r3, [pc, #216]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a35      	ldr	r2, [pc, #212]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800288e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002890:	f7fe f9e6 	bl	8000c60 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002896:	e009      	b.n	80028ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002898:	f7fe f9e2 	bl	8000c60 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	73fb      	strb	r3, [r7, #15]
        break;
 80028aa:	e005      	b.n	80028b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ef      	bne.n	8002898 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d14a      	bne.n	8002954 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d111      	bne.n	80028e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028c4:	4b26      	ldr	r3, [pc, #152]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6892      	ldr	r2, [r2, #8]
 80028d4:	0211      	lsls	r1, r2, #8
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	0912      	lsrs	r2, r2, #4
 80028dc:	0452      	lsls	r2, r2, #17
 80028de:	430a      	orrs	r2, r1
 80028e0:	491f      	ldr	r1, [pc, #124]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	614b      	str	r3, [r1, #20]
 80028e6:	e011      	b.n	800290c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80028f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6892      	ldr	r2, [r2, #8]
 80028f8:	0211      	lsls	r1, r2, #8
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6912      	ldr	r2, [r2, #16]
 80028fe:	0852      	lsrs	r2, r2, #1
 8002900:	3a01      	subs	r2, #1
 8002902:	0652      	lsls	r2, r2, #25
 8002904:	430a      	orrs	r2, r1
 8002906:	4916      	ldr	r1, [pc, #88]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002908:	4313      	orrs	r3, r2
 800290a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800290c:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a13      	ldr	r2, [pc, #76]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002916:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7fe f9a2 	bl	8000c60 <HAL_GetTick>
 800291c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800291e:	e009      	b.n	8002934 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002920:	f7fe f99e 	bl	8000c60 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d902      	bls.n	8002934 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	73fb      	strb	r3, [r7, #15]
          break;
 8002932:	e005      	b.n	8002940 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002934:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ef      	beq.n	8002920 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	4904      	ldr	r1, [pc, #16]	@ (8002960 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002950:	4313      	orrs	r3, r2
 8002952:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000

08002964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e049      	b.n	8002a0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f841 	bl	8002a12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 f9e0 	bl	8002d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d001      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e04f      	b.n	8002ae0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <HAL_TIM_Base_Start_IT+0xc4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01d      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x76>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a6a:	d018      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x76>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	@ (8002af0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x76>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002af4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00e      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x76>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1c      	ldr	r2, [pc, #112]	@ (8002af8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x76>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002afc <HAL_TIM_Base_Start_IT+0xd4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x76>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a19      	ldr	r2, [pc, #100]	@ (8002b00 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d115      	bne.n	8002aca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	4b17      	ldr	r3, [pc, #92]	@ (8002b04 <HAL_TIM_Base_Start_IT+0xdc>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b06      	cmp	r3, #6
 8002aae:	d015      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0xb4>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab6:	d011      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac8:	e008      	b.n	8002adc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	e000      	b.n	8002ade <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002adc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40000c00 	.word	0x40000c00
 8002afc:	40013400 	.word	0x40013400
 8002b00:	40014000 	.word	0x40014000
 8002b04:	00010007 	.word	0x00010007

08002b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d020      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0202 	mvn.w	r2, #2
 8002b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8e9 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8db 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f8ec 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d020      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0204 	mvn.w	r2, #4
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8c3 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8b5 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f8c6 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d020      	beq.n	8002c04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01b      	beq.n	8002c04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0208 	mvn.w	r2, #8
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f89d 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f88f 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f8a0 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d020      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01b      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0210 	mvn.w	r2, #16
 8002c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2208      	movs	r2, #8
 8002c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f877 	bl	8002d2a <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f869 	bl	8002d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f87a 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00c      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0201 	mvn.w	r2, #1
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd fd75 	bl	800075e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f913 	bl	8002ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00c      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f90b 	bl	8002edc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00c      	beq.n	8002cea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f834 	bl	8002d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00c      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f06f 0220 	mvn.w	r2, #32
 8002d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f8d3 	bl	8002eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a46      	ldr	r2, [pc, #280]	@ (8002e94 <TIM_Base_SetConfig+0x12c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d86:	d00f      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a43      	ldr	r2, [pc, #268]	@ (8002e98 <TIM_Base_SetConfig+0x130>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00b      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a42      	ldr	r2, [pc, #264]	@ (8002e9c <TIM_Base_SetConfig+0x134>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d007      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a41      	ldr	r2, [pc, #260]	@ (8002ea0 <TIM_Base_SetConfig+0x138>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d003      	beq.n	8002da8 <TIM_Base_SetConfig+0x40>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a40      	ldr	r2, [pc, #256]	@ (8002ea4 <TIM_Base_SetConfig+0x13c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d108      	bne.n	8002dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a35      	ldr	r2, [pc, #212]	@ (8002e94 <TIM_Base_SetConfig+0x12c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d01f      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc8:	d01b      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a32      	ldr	r2, [pc, #200]	@ (8002e98 <TIM_Base_SetConfig+0x130>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d017      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a31      	ldr	r2, [pc, #196]	@ (8002e9c <TIM_Base_SetConfig+0x134>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a30      	ldr	r2, [pc, #192]	@ (8002ea0 <TIM_Base_SetConfig+0x138>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00f      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea4 <TIM_Base_SetConfig+0x13c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00b      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea8 <TIM_Base_SetConfig+0x140>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a2d      	ldr	r2, [pc, #180]	@ (8002eac <TIM_Base_SetConfig+0x144>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d003      	beq.n	8002e02 <TIM_Base_SetConfig+0x9a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb0 <TIM_Base_SetConfig+0x148>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d108      	bne.n	8002e14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a16      	ldr	r2, [pc, #88]	@ (8002e94 <TIM_Base_SetConfig+0x12c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00f      	beq.n	8002e60 <TIM_Base_SetConfig+0xf8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a18      	ldr	r2, [pc, #96]	@ (8002ea4 <TIM_Base_SetConfig+0x13c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d00b      	beq.n	8002e60 <TIM_Base_SetConfig+0xf8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ea8 <TIM_Base_SetConfig+0x140>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d007      	beq.n	8002e60 <TIM_Base_SetConfig+0xf8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a16      	ldr	r2, [pc, #88]	@ (8002eac <TIM_Base_SetConfig+0x144>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d003      	beq.n	8002e60 <TIM_Base_SetConfig+0xf8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a15      	ldr	r2, [pc, #84]	@ (8002eb0 <TIM_Base_SetConfig+0x148>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d103      	bne.n	8002e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d105      	bne.n	8002e86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f023 0201 	bic.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	611a      	str	r2, [r3, #16]
  }
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	40000800 	.word	0x40000800
 8002ea0:	40000c00 	.word	0x40000c00
 8002ea4:	40013400 	.word	0x40013400
 8002ea8:	40014000 	.word	0x40014000
 8002eac:	40014400 	.word	0x40014400
 8002eb0:	40014800 	.word	0x40014800

08002eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e040      	b.n	8002f84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fd fd96 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	@ 0x24
 8002f1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fe52 	bl	8003be0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fb97 	bl	8003670 <UART_SetConfig>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e01b      	b.n	8002f84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fed1 	bl	8003d24 <UART_CheckIdleState>
 8002f82:	4603      	mov	r3, r0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	@ 0x28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d137      	bne.n	8003014 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_UART_Receive_IT+0x24>
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e030      	b.n	8003016 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a18      	ldr	r2, [pc, #96]	@ (8003020 <HAL_UART_Receive_IT+0x94>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d01f      	beq.n	8003004 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d018      	beq.n	8003004 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	e853 3f00 	ldrex	r3, [r3]
 8002fde:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	623b      	str	r3, [r7, #32]
 8002ff2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff4:	69f9      	ldr	r1, [r7, #28]
 8002ff6:	6a3a      	ldr	r2, [r7, #32]
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e6      	bne.n	8002fd2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	461a      	mov	r2, r3
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 ffa0 	bl	8003f50 <UART_Start_Receive_IT>
 8003010:	4603      	mov	r3, r0
 8003012:	e000      	b.n	8003016 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3728      	adds	r7, #40	@ 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40008000 	.word	0x40008000

08003024 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b0ba      	sub	sp, #232	@ 0xe8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800304a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800304e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003052:	4013      	ands	r3, r2
 8003054:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003058:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d115      	bne.n	800308c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00f      	beq.n	800308c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800306c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d009      	beq.n	800308c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 82ca 	beq.w	8003616 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
      }
      return;
 800308a:	e2c4      	b.n	8003616 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800308c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8117 	beq.w	80032c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80030a6:	4b85      	ldr	r3, [pc, #532]	@ (80032bc <HAL_UART_IRQHandler+0x298>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 810a 	beq.w	80032c4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d011      	beq.n	80030e0 <HAL_UART_IRQHandler+0xbc>
 80030bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00b      	beq.n	80030e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2201      	movs	r2, #1
 80030ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030d6:	f043 0201 	orr.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d011      	beq.n	8003110 <HAL_UART_IRQHandler+0xec>
 80030ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2202      	movs	r2, #2
 80030fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003106:	f043 0204 	orr.w	r2, r3, #4
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d011      	beq.n	8003140 <HAL_UART_IRQHandler+0x11c>
 800311c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2204      	movs	r2, #4
 800312e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003136:	f043 0202 	orr.w	r2, r3, #2
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d017      	beq.n	800317c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800314c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d105      	bne.n	8003164 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800315c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2208      	movs	r2, #8
 800316a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003172:	f043 0208 	orr.w	r2, r3, #8
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800317c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003180:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003184:	2b00      	cmp	r3, #0
 8003186:	d012      	beq.n	80031ae <HAL_UART_IRQHandler+0x18a>
 8003188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800318c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00c      	beq.n	80031ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800319c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8230 	beq.w	800361a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00d      	beq.n	80031e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f6:	2b40      	cmp	r3, #64	@ 0x40
 80031f8:	d005      	beq.n	8003206 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003202:	2b00      	cmp	r3, #0
 8003204:	d04f      	beq.n	80032a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 ff68 	bl	80040dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003216:	2b40      	cmp	r3, #64	@ 0x40
 8003218:	d141      	bne.n	800329e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3308      	adds	r3, #8
 8003220:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003230:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003238:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3308      	adds	r3, #8
 8003242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003246:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800324a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800325e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1d9      	bne.n	800321a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800326a:	2b00      	cmp	r3, #0
 800326c:	d013      	beq.n	8003296 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003272:	4a13      	ldr	r2, [pc, #76]	@ (80032c0 <HAL_UART_IRQHandler+0x29c>)
 8003274:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd fe1c 	bl	8000eb8 <HAL_DMA_Abort_IT>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d017      	beq.n	80032b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800328a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003290:	4610      	mov	r0, r2
 8003292:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	e00f      	b.n	80032b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9d4 	bl	8003644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	e00b      	b.n	80032b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f9d0 	bl	8003644 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	e007      	b.n	80032b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9cc 	bl	8003644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80032b4:	e1b1      	b.n	800361a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b6:	bf00      	nop
    return;
 80032b8:	e1af      	b.n	800361a <HAL_UART_IRQHandler+0x5f6>
 80032ba:	bf00      	nop
 80032bc:	04000120 	.word	0x04000120
 80032c0:	080041a5 	.word	0x080041a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	f040 816a 	bne.w	80035a2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8163 	beq.w	80035a2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 815c 	beq.w	80035a2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2210      	movs	r2, #16
 80032f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b40      	cmp	r3, #64	@ 0x40
 80032fe:	f040 80d4 	bne.w	80034aa <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800330e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80ad 	beq.w	8003472 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800331e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003322:	429a      	cmp	r2, r3
 8003324:	f080 80a5 	bcs.w	8003472 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800332e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 8086 	bne.w	8003450 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003358:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800335c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800336e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003372:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800337a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003386:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1da      	bne.n	8003344 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3308      	adds	r3, #8
 8003394:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800339e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3308      	adds	r3, #8
 80033ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e1      	bne.n	800338e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3308      	adds	r3, #8
 80033d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3308      	adds	r3, #8
 80033ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e3      	bne.n	80033ca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003418:	e853 3f00 	ldrex	r3, [r3]
 800341c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800341e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003420:	f023 0310 	bic.w	r3, r3, #16
 8003424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003432:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003434:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003438:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800343a:	e841 2300 	strex	r3, r2, [r1]
 800343e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e4      	bne.n	8003410 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800344a:	4618      	mov	r0, r3
 800344c:	f7fd fcf6 	bl	8000e3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003462:	b29b      	uxth	r3, r3
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	b29b      	uxth	r3, r3
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f8f4 	bl	8003658 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003470:	e0d5      	b.n	800361e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003478:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800347c:	429a      	cmp	r2, r3
 800347e:	f040 80ce 	bne.w	800361e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b20      	cmp	r3, #32
 8003490:	f040 80c5 	bne.w	800361e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80034a0:	4619      	mov	r1, r3
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8d8 	bl	8003658 <HAL_UARTEx_RxEventCallback>
      return;
 80034a8:	e0b9      	b.n	800361e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80ab 	beq.w	8003622 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80034cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80a6 	beq.w	8003622 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	e853 3f00 	ldrex	r3, [r3]
 80034e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e4      	bne.n	80034d6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3308      	adds	r3, #8
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	623b      	str	r3, [r7, #32]
   return(result);
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3308      	adds	r3, #8
 800352c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003530:	633a      	str	r2, [r7, #48]	@ 0x30
 8003532:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800353e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e3      	bne.n	800350c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	60fb      	str	r3, [r7, #12]
   return(result);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f023 0310 	bic.w	r3, r3, #16
 800356c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	69b9      	ldr	r1, [r7, #24]
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	617b      	str	r3, [r7, #20]
   return(result);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e4      	bne.n	8003558 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003598:	4619      	mov	r1, r3
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f85c 	bl	8003658 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035a0:	e03f      	b.n	8003622 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00e      	beq.n	80035cc <HAL_UART_IRQHandler+0x5a8>
 80035ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 ffe9 	bl	800459c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035ca:	e02d      	b.n	8003628 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00e      	beq.n	80035f6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01c      	beq.n	8003626 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
    }
    return;
 80035f4:	e017      	b.n	8003626 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d012      	beq.n	8003628 <HAL_UART_IRQHandler+0x604>
 8003602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00c      	beq.n	8003628 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fdde 	bl	80041d0 <UART_EndTransmit_IT>
    return;
 8003614:	e008      	b.n	8003628 <HAL_UART_IRQHandler+0x604>
      return;
 8003616:	bf00      	nop
 8003618:	e006      	b.n	8003628 <HAL_UART_IRQHandler+0x604>
    return;
 800361a:	bf00      	nop
 800361c:	e004      	b.n	8003628 <HAL_UART_IRQHandler+0x604>
      return;
 800361e:	bf00      	nop
 8003620:	e002      	b.n	8003628 <HAL_UART_IRQHandler+0x604>
      return;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <HAL_UART_IRQHandler+0x604>
    return;
 8003626:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003628:	37e8      	adds	r7, #232	@ 0xe8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop

08003630 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b08a      	sub	sp, #40	@ 0x28
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	431a      	orrs	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	431a      	orrs	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	4313      	orrs	r3, r2
 8003696:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4ba4      	ldr	r3, [pc, #656]	@ (8003930 <UART_SetConfig+0x2c0>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a99      	ldr	r2, [pc, #612]	@ (8003934 <UART_SetConfig+0x2c4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d004      	beq.n	80036dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d8:	4313      	orrs	r3, r2
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ec:	430a      	orrs	r2, r1
 80036ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a90      	ldr	r2, [pc, #576]	@ (8003938 <UART_SetConfig+0x2c8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d126      	bne.n	8003748 <UART_SetConfig+0xd8>
 80036fa:	4b90      	ldr	r3, [pc, #576]	@ (800393c <UART_SetConfig+0x2cc>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b03      	cmp	r3, #3
 8003706:	d81b      	bhi.n	8003740 <UART_SetConfig+0xd0>
 8003708:	a201      	add	r2, pc, #4	@ (adr r2, 8003710 <UART_SetConfig+0xa0>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003721 	.word	0x08003721
 8003714:	08003731 	.word	0x08003731
 8003718:	08003729 	.word	0x08003729
 800371c:	08003739 	.word	0x08003739
 8003720:	2301      	movs	r3, #1
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003726:	e116      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003728:	2302      	movs	r3, #2
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800372e:	e112      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003730:	2304      	movs	r3, #4
 8003732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003736:	e10e      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003738:	2308      	movs	r3, #8
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373e:	e10a      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003740:	2310      	movs	r3, #16
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003746:	e106      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a7c      	ldr	r2, [pc, #496]	@ (8003940 <UART_SetConfig+0x2d0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d138      	bne.n	80037c4 <UART_SetConfig+0x154>
 8003752:	4b7a      	ldr	r3, [pc, #488]	@ (800393c <UART_SetConfig+0x2cc>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b0c      	cmp	r3, #12
 800375e:	d82d      	bhi.n	80037bc <UART_SetConfig+0x14c>
 8003760:	a201      	add	r2, pc, #4	@ (adr r2, 8003768 <UART_SetConfig+0xf8>)
 8003762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003766:	bf00      	nop
 8003768:	0800379d 	.word	0x0800379d
 800376c:	080037bd 	.word	0x080037bd
 8003770:	080037bd 	.word	0x080037bd
 8003774:	080037bd 	.word	0x080037bd
 8003778:	080037ad 	.word	0x080037ad
 800377c:	080037bd 	.word	0x080037bd
 8003780:	080037bd 	.word	0x080037bd
 8003784:	080037bd 	.word	0x080037bd
 8003788:	080037a5 	.word	0x080037a5
 800378c:	080037bd 	.word	0x080037bd
 8003790:	080037bd 	.word	0x080037bd
 8003794:	080037bd 	.word	0x080037bd
 8003798:	080037b5 	.word	0x080037b5
 800379c:	2300      	movs	r3, #0
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037a2:	e0d8      	b.n	8003956 <UART_SetConfig+0x2e6>
 80037a4:	2302      	movs	r3, #2
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037aa:	e0d4      	b.n	8003956 <UART_SetConfig+0x2e6>
 80037ac:	2304      	movs	r3, #4
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b2:	e0d0      	b.n	8003956 <UART_SetConfig+0x2e6>
 80037b4:	2308      	movs	r3, #8
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ba:	e0cc      	b.n	8003956 <UART_SetConfig+0x2e6>
 80037bc:	2310      	movs	r3, #16
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c2:	e0c8      	b.n	8003956 <UART_SetConfig+0x2e6>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003944 <UART_SetConfig+0x2d4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d125      	bne.n	800381a <UART_SetConfig+0x1aa>
 80037ce:	4b5b      	ldr	r3, [pc, #364]	@ (800393c <UART_SetConfig+0x2cc>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037d8:	2b30      	cmp	r3, #48	@ 0x30
 80037da:	d016      	beq.n	800380a <UART_SetConfig+0x19a>
 80037dc:	2b30      	cmp	r3, #48	@ 0x30
 80037de:	d818      	bhi.n	8003812 <UART_SetConfig+0x1a2>
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d00a      	beq.n	80037fa <UART_SetConfig+0x18a>
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d814      	bhi.n	8003812 <UART_SetConfig+0x1a2>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <UART_SetConfig+0x182>
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d008      	beq.n	8003802 <UART_SetConfig+0x192>
 80037f0:	e00f      	b.n	8003812 <UART_SetConfig+0x1a2>
 80037f2:	2300      	movs	r3, #0
 80037f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037f8:	e0ad      	b.n	8003956 <UART_SetConfig+0x2e6>
 80037fa:	2302      	movs	r3, #2
 80037fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003800:	e0a9      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003802:	2304      	movs	r3, #4
 8003804:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003808:	e0a5      	b.n	8003956 <UART_SetConfig+0x2e6>
 800380a:	2308      	movs	r3, #8
 800380c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003810:	e0a1      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003812:	2310      	movs	r3, #16
 8003814:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003818:	e09d      	b.n	8003956 <UART_SetConfig+0x2e6>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a4a      	ldr	r2, [pc, #296]	@ (8003948 <UART_SetConfig+0x2d8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d125      	bne.n	8003870 <UART_SetConfig+0x200>
 8003824:	4b45      	ldr	r3, [pc, #276]	@ (800393c <UART_SetConfig+0x2cc>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800382e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003830:	d016      	beq.n	8003860 <UART_SetConfig+0x1f0>
 8003832:	2bc0      	cmp	r3, #192	@ 0xc0
 8003834:	d818      	bhi.n	8003868 <UART_SetConfig+0x1f8>
 8003836:	2b80      	cmp	r3, #128	@ 0x80
 8003838:	d00a      	beq.n	8003850 <UART_SetConfig+0x1e0>
 800383a:	2b80      	cmp	r3, #128	@ 0x80
 800383c:	d814      	bhi.n	8003868 <UART_SetConfig+0x1f8>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <UART_SetConfig+0x1d8>
 8003842:	2b40      	cmp	r3, #64	@ 0x40
 8003844:	d008      	beq.n	8003858 <UART_SetConfig+0x1e8>
 8003846:	e00f      	b.n	8003868 <UART_SetConfig+0x1f8>
 8003848:	2300      	movs	r3, #0
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800384e:	e082      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003850:	2302      	movs	r3, #2
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003856:	e07e      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003858:	2304      	movs	r3, #4
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385e:	e07a      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003860:	2308      	movs	r3, #8
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003866:	e076      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003868:	2310      	movs	r3, #16
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386e:	e072      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a35      	ldr	r2, [pc, #212]	@ (800394c <UART_SetConfig+0x2dc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d12a      	bne.n	80038d0 <UART_SetConfig+0x260>
 800387a:	4b30      	ldr	r3, [pc, #192]	@ (800393c <UART_SetConfig+0x2cc>)
 800387c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003880:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003884:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003888:	d01a      	beq.n	80038c0 <UART_SetConfig+0x250>
 800388a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800388e:	d81b      	bhi.n	80038c8 <UART_SetConfig+0x258>
 8003890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003894:	d00c      	beq.n	80038b0 <UART_SetConfig+0x240>
 8003896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800389a:	d815      	bhi.n	80038c8 <UART_SetConfig+0x258>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <UART_SetConfig+0x238>
 80038a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a4:	d008      	beq.n	80038b8 <UART_SetConfig+0x248>
 80038a6:	e00f      	b.n	80038c8 <UART_SetConfig+0x258>
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ae:	e052      	b.n	8003956 <UART_SetConfig+0x2e6>
 80038b0:	2302      	movs	r3, #2
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b6:	e04e      	b.n	8003956 <UART_SetConfig+0x2e6>
 80038b8:	2304      	movs	r3, #4
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038be:	e04a      	b.n	8003956 <UART_SetConfig+0x2e6>
 80038c0:	2308      	movs	r3, #8
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038c6:	e046      	b.n	8003956 <UART_SetConfig+0x2e6>
 80038c8:	2310      	movs	r3, #16
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ce:	e042      	b.n	8003956 <UART_SetConfig+0x2e6>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a17      	ldr	r2, [pc, #92]	@ (8003934 <UART_SetConfig+0x2c4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d13a      	bne.n	8003950 <UART_SetConfig+0x2e0>
 80038da:	4b18      	ldr	r3, [pc, #96]	@ (800393c <UART_SetConfig+0x2cc>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038e8:	d01a      	beq.n	8003920 <UART_SetConfig+0x2b0>
 80038ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038ee:	d81b      	bhi.n	8003928 <UART_SetConfig+0x2b8>
 80038f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038f4:	d00c      	beq.n	8003910 <UART_SetConfig+0x2a0>
 80038f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038fa:	d815      	bhi.n	8003928 <UART_SetConfig+0x2b8>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <UART_SetConfig+0x298>
 8003900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003904:	d008      	beq.n	8003918 <UART_SetConfig+0x2a8>
 8003906:	e00f      	b.n	8003928 <UART_SetConfig+0x2b8>
 8003908:	2300      	movs	r3, #0
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800390e:	e022      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003910:	2302      	movs	r3, #2
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003916:	e01e      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003918:	2304      	movs	r3, #4
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800391e:	e01a      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003920:	2308      	movs	r3, #8
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003926:	e016      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003928:	2310      	movs	r3, #16
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800392e:	e012      	b.n	8003956 <UART_SetConfig+0x2e6>
 8003930:	efff69f3 	.word	0xefff69f3
 8003934:	40008000 	.word	0x40008000
 8003938:	40013800 	.word	0x40013800
 800393c:	40021000 	.word	0x40021000
 8003940:	40004400 	.word	0x40004400
 8003944:	40004800 	.word	0x40004800
 8003948:	40004c00 	.word	0x40004c00
 800394c:	40005000 	.word	0x40005000
 8003950:	2310      	movs	r3, #16
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a9f      	ldr	r2, [pc, #636]	@ (8003bd8 <UART_SetConfig+0x568>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d17a      	bne.n	8003a56 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003960:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003964:	2b08      	cmp	r3, #8
 8003966:	d824      	bhi.n	80039b2 <UART_SetConfig+0x342>
 8003968:	a201      	add	r2, pc, #4	@ (adr r2, 8003970 <UART_SetConfig+0x300>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	08003995 	.word	0x08003995
 8003974:	080039b3 	.word	0x080039b3
 8003978:	0800399d 	.word	0x0800399d
 800397c:	080039b3 	.word	0x080039b3
 8003980:	080039a3 	.word	0x080039a3
 8003984:	080039b3 	.word	0x080039b3
 8003988:	080039b3 	.word	0x080039b3
 800398c:	080039b3 	.word	0x080039b3
 8003990:	080039ab 	.word	0x080039ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003994:	f7fe fa6c 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8003998:	61f8      	str	r0, [r7, #28]
        break;
 800399a:	e010      	b.n	80039be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800399c:	4b8f      	ldr	r3, [pc, #572]	@ (8003bdc <UART_SetConfig+0x56c>)
 800399e:	61fb      	str	r3, [r7, #28]
        break;
 80039a0:	e00d      	b.n	80039be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039a2:	f7fe f9cd 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 80039a6:	61f8      	str	r0, [r7, #28]
        break;
 80039a8:	e009      	b.n	80039be <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ae:	61fb      	str	r3, [r7, #28]
        break;
 80039b0:	e005      	b.n	80039be <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80039bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80fb 	beq.w	8003bbc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4413      	add	r3, r2
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d305      	bcc.n	80039e2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d903      	bls.n	80039ea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039e8:	e0e8      	b.n	8003bbc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2200      	movs	r2, #0
 80039ee:	461c      	mov	r4, r3
 80039f0:	4615      	mov	r5, r2
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	022b      	lsls	r3, r5, #8
 80039fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a00:	0222      	lsls	r2, r4, #8
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	6849      	ldr	r1, [r1, #4]
 8003a06:	0849      	lsrs	r1, r1, #1
 8003a08:	2000      	movs	r0, #0
 8003a0a:	4688      	mov	r8, r1
 8003a0c:	4681      	mov	r9, r0
 8003a0e:	eb12 0a08 	adds.w	sl, r2, r8
 8003a12:	eb43 0b09 	adc.w	fp, r3, r9
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a24:	4650      	mov	r0, sl
 8003a26:	4659      	mov	r1, fp
 8003a28:	f7fc fbd2 	bl	80001d0 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a3a:	d308      	bcc.n	8003a4e <UART_SetConfig+0x3de>
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a42:	d204      	bcs.n	8003a4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	60da      	str	r2, [r3, #12]
 8003a4c:	e0b6      	b.n	8003bbc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a54:	e0b2      	b.n	8003bbc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a5e:	d15e      	bne.n	8003b1e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d828      	bhi.n	8003aba <UART_SetConfig+0x44a>
 8003a68:	a201      	add	r2, pc, #4	@ (adr r2, 8003a70 <UART_SetConfig+0x400>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	08003abb 	.word	0x08003abb
 8003a80:	08003aab 	.word	0x08003aab
 8003a84:	08003abb 	.word	0x08003abb
 8003a88:	08003abb 	.word	0x08003abb
 8003a8c:	08003abb 	.word	0x08003abb
 8003a90:	08003ab3 	.word	0x08003ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a94:	f7fe f9ec 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8003a98:	61f8      	str	r0, [r7, #28]
        break;
 8003a9a:	e014      	b.n	8003ac6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a9c:	f7fe f9fe 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8003aa0:	61f8      	str	r0, [r7, #28]
        break;
 8003aa2:	e010      	b.n	8003ac6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8003bdc <UART_SetConfig+0x56c>)
 8003aa6:	61fb      	str	r3, [r7, #28]
        break;
 8003aa8:	e00d      	b.n	8003ac6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aaa:	f7fe f949 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8003aae:	61f8      	str	r0, [r7, #28]
        break;
 8003ab0:	e009      	b.n	8003ac6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ab6:	61fb      	str	r3, [r7, #28]
        break;
 8003ab8:	e005      	b.n	8003ac6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ac4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d077      	beq.n	8003bbc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005a      	lsls	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	441a      	add	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b0f      	cmp	r3, #15
 8003ae6:	d916      	bls.n	8003b16 <UART_SetConfig+0x4a6>
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aee:	d212      	bcs.n	8003b16 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f023 030f 	bic.w	r3, r3, #15
 8003af8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	085b      	lsrs	r3, r3, #1
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	8afb      	ldrh	r3, [r7, #22]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	8afa      	ldrh	r2, [r7, #22]
 8003b12:	60da      	str	r2, [r3, #12]
 8003b14:	e052      	b.n	8003bbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b1c:	e04e      	b.n	8003bbc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d827      	bhi.n	8003b76 <UART_SetConfig+0x506>
 8003b26:	a201      	add	r2, pc, #4	@ (adr r2, 8003b2c <UART_SetConfig+0x4bc>)
 8003b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2c:	08003b51 	.word	0x08003b51
 8003b30:	08003b59 	.word	0x08003b59
 8003b34:	08003b61 	.word	0x08003b61
 8003b38:	08003b77 	.word	0x08003b77
 8003b3c:	08003b67 	.word	0x08003b67
 8003b40:	08003b77 	.word	0x08003b77
 8003b44:	08003b77 	.word	0x08003b77
 8003b48:	08003b77 	.word	0x08003b77
 8003b4c:	08003b6f 	.word	0x08003b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b50:	f7fe f98e 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8003b54:	61f8      	str	r0, [r7, #28]
        break;
 8003b56:	e014      	b.n	8003b82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b58:	f7fe f9a0 	bl	8001e9c <HAL_RCC_GetPCLK2Freq>
 8003b5c:	61f8      	str	r0, [r7, #28]
        break;
 8003b5e:	e010      	b.n	8003b82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b60:	4b1e      	ldr	r3, [pc, #120]	@ (8003bdc <UART_SetConfig+0x56c>)
 8003b62:	61fb      	str	r3, [r7, #28]
        break;
 8003b64:	e00d      	b.n	8003b82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b66:	f7fe f8eb 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8003b6a:	61f8      	str	r0, [r7, #28]
        break;
 8003b6c:	e009      	b.n	8003b82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b72:	61fb      	str	r3, [r7, #28]
        break;
 8003b74:	e005      	b.n	8003b82 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b80:	bf00      	nop
    }

    if (pclk != 0U)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d019      	beq.n	8003bbc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	085a      	lsrs	r2, r3, #1
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	441a      	add	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b0f      	cmp	r3, #15
 8003ba0:	d909      	bls.n	8003bb6 <UART_SetConfig+0x546>
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba8:	d205      	bcs.n	8003bb6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	60da      	str	r2, [r3, #12]
 8003bb4:	e002      	b.n	8003bbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003bc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3728      	adds	r7, #40	@ 0x28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40008000 	.word	0x40008000
 8003bdc:	00f42400 	.word	0x00f42400

08003be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01a      	beq.n	8003cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cde:	d10a      	bne.n	8003cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]
  }
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b098      	sub	sp, #96	@ 0x60
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d34:	f7fc ff94 	bl	8000c60 <HAL_GetTick>
 8003d38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d12e      	bne.n	8003da6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d50:	2200      	movs	r2, #0
 8003d52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f88c 	bl	8003e74 <UART_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d021      	beq.n	8003da6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e6      	bne.n	8003d62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e062      	b.n	8003e6c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d149      	bne.n	8003e48 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f856 	bl	8003e74 <UART_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d03c      	beq.n	8003e48 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	623b      	str	r3, [r7, #32]
   return(result);
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dec:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003df4:	e841 2300 	strex	r3, r2, [r1]
 8003df8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e6      	bne.n	8003dce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3308      	adds	r3, #8
 8003e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e20:	61fa      	str	r2, [r7, #28]
 8003e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	69b9      	ldr	r1, [r7, #24]
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e5      	bne.n	8003e00 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e011      	b.n	8003e6c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3758      	adds	r7, #88	@ 0x58
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e84:	e04f      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d04b      	beq.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fc fee7 	bl	8000c60 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e04e      	b.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d037      	beq.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b80      	cmp	r3, #128	@ 0x80
 8003eba:	d034      	beq.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b40      	cmp	r3, #64	@ 0x40
 8003ec0:	d031      	beq.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d110      	bne.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f8ff 	bl	80040dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e029      	b.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f00:	d111      	bne.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f8e5 	bl	80040dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e00f      	b.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	bf0c      	ite	eq
 8003f36:	2301      	moveq	r3, #1
 8003f38:	2300      	movne	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d0a0      	beq.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b097      	sub	sp, #92	@ 0x5c
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	88fa      	ldrh	r2, [r7, #6]
 8003f68:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	88fa      	ldrh	r2, [r7, #6]
 8003f70:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f82:	d10e      	bne.n	8003fa2 <UART_Start_Receive_IT+0x52>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d105      	bne.n	8003f98 <UART_Start_Receive_IT+0x48>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003f92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003f96:	e02d      	b.n	8003ff4 <UART_Start_Receive_IT+0xa4>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	22ff      	movs	r2, #255	@ 0xff
 8003f9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003fa0:	e028      	b.n	8003ff4 <UART_Start_Receive_IT+0xa4>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10d      	bne.n	8003fc6 <UART_Start_Receive_IT+0x76>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d104      	bne.n	8003fbc <UART_Start_Receive_IT+0x6c>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22ff      	movs	r2, #255	@ 0xff
 8003fb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003fba:	e01b      	b.n	8003ff4 <UART_Start_Receive_IT+0xa4>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	227f      	movs	r2, #127	@ 0x7f
 8003fc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003fc4:	e016      	b.n	8003ff4 <UART_Start_Receive_IT+0xa4>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fce:	d10d      	bne.n	8003fec <UART_Start_Receive_IT+0x9c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <UART_Start_Receive_IT+0x92>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	227f      	movs	r2, #127	@ 0x7f
 8003fdc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003fe0:	e008      	b.n	8003ff4 <UART_Start_Receive_IT+0xa4>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	223f      	movs	r2, #63	@ 0x3f
 8003fe6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003fea:	e003      	b.n	8003ff4 <UART_Start_Receive_IT+0xa4>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2222      	movs	r2, #34	@ 0x22
 8004000:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3308      	adds	r3, #8
 800400a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	657b      	str	r3, [r7, #84]	@ 0x54
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3308      	adds	r3, #8
 8004022:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004024:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004026:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800402a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e5      	bne.n	8004004 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004040:	d107      	bne.n	8004052 <UART_Start_Receive_IT+0x102>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d103      	bne.n	8004052 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4a21      	ldr	r2, [pc, #132]	@ (80040d4 <UART_Start_Receive_IT+0x184>)
 800404e:	669a      	str	r2, [r3, #104]	@ 0x68
 8004050:	e002      	b.n	8004058 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4a20      	ldr	r2, [pc, #128]	@ (80040d8 <UART_Start_Receive_IT+0x188>)
 8004056:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d019      	beq.n	8004094 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800407e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004080:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004084:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800408c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e6      	bne.n	8004060 <UART_Start_Receive_IT+0x110>
 8004092:	e018      	b.n	80040c6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	613b      	str	r3, [r7, #16]
   return(result);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f043 0320 	orr.w	r3, r3, #32
 80040a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040b2:	623b      	str	r3, [r7, #32]
 80040b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	69f9      	ldr	r1, [r7, #28]
 80040b8:	6a3a      	ldr	r2, [r7, #32]
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	61bb      	str	r3, [r7, #24]
   return(result);
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e6      	bne.n	8004094 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	375c      	adds	r7, #92	@ 0x5c
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	080043e1 	.word	0x080043e1
 80040d8:	08004225 	.word	0x08004225

080040dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b095      	sub	sp, #84	@ 0x54
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	461a      	mov	r2, r3
 8004100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004102:	643b      	str	r3, [r7, #64]	@ 0x40
 8004104:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004108:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e6      	bne.n	80040e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3308      	adds	r3, #8
 800411c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	61fb      	str	r3, [r7, #28]
   return(result);
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3308      	adds	r3, #8
 8004134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004138:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800413c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e5      	bne.n	8004116 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414e:	2b01      	cmp	r3, #1
 8004150:	d118      	bne.n	8004184 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f023 0310 	bic.w	r3, r3, #16
 8004166:	647b      	str	r3, [r7, #68]	@ 0x44
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004170:	61bb      	str	r3, [r7, #24]
 8004172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6979      	ldr	r1, [r7, #20]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	613b      	str	r3, [r7, #16]
   return(result);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e6      	bne.n	8004152 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004198:	bf00      	nop
 800419a:	3754      	adds	r7, #84	@ 0x54
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff fa3e 	bl	8003644 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	61bb      	str	r3, [r7, #24]
 80041f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6979      	ldr	r1, [r7, #20]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	613b      	str	r3, [r7, #16]
   return(result);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e6      	bne.n	80041d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff fa0a 	bl	8003630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800421c:	bf00      	nop
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b09c      	sub	sp, #112	@ 0x70
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004232:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800423c:	2b22      	cmp	r3, #34	@ 0x22
 800423e:	f040 80be 	bne.w	80043be <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004248:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800424c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004250:	b2d9      	uxtb	r1, r3
 8004252:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004256:	b2da      	uxtb	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425c:	400a      	ands	r2, r1
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 80a3 	bne.w	80043d2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800429a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800429c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e6      	bne.n	800428c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3308      	adds	r3, #8
 80042c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3308      	adds	r3, #8
 80042dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80042de:	647a      	str	r2, [r7, #68]	@ 0x44
 80042e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a34      	ldr	r2, [pc, #208]	@ (80043dc <UART_RxISR_8BIT+0x1b8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d01f      	beq.n	8004350 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d018      	beq.n	8004350 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	623b      	str	r3, [r7, #32]
   return(result);
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004332:	663b      	str	r3, [r7, #96]	@ 0x60
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800433c:	633b      	str	r3, [r7, #48]	@ 0x30
 800433e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800434a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e6      	bne.n	800431e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004354:	2b01      	cmp	r3, #1
 8004356:	d12e      	bne.n	80043b6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	60fb      	str	r3, [r7, #12]
   return(result);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0310 	bic.w	r3, r3, #16
 8004372:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	69b9      	ldr	r1, [r7, #24]
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	617b      	str	r3, [r7, #20]
   return(result);
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e6      	bne.n	800435e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b10      	cmp	r3, #16
 800439c:	d103      	bne.n	80043a6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2210      	movs	r2, #16
 80043a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff f952 	bl	8003658 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043b4:	e00d      	b.n	80043d2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fc fac0 	bl	800093c <HAL_UART_RxCpltCallback>
}
 80043bc:	e009      	b.n	80043d2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	8b1b      	ldrh	r3, [r3, #24]
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0208 	orr.w	r2, r2, #8
 80043ce:	b292      	uxth	r2, r2
 80043d0:	831a      	strh	r2, [r3, #24]
}
 80043d2:	bf00      	nop
 80043d4:	3770      	adds	r7, #112	@ 0x70
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40008000 	.word	0x40008000

080043e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b09c      	sub	sp, #112	@ 0x70
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f8:	2b22      	cmp	r3, #34	@ 0x22
 80043fa:	f040 80be 	bne.w	800457a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004404:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800440e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004412:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004416:	4013      	ands	r3, r2
 8004418:	b29a      	uxth	r2, r3
 800441a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800441c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004422:	1c9a      	adds	r2, r3, #2
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004440:	b29b      	uxth	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	f040 80a3 	bne.w	800458e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004458:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800445c:	667b      	str	r3, [r7, #100]	@ 0x64
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004466:	657b      	str	r3, [r7, #84]	@ 0x54
 8004468:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800446c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004474:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e6      	bne.n	8004448 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3308      	adds	r3, #8
 8004480:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	663b      	str	r3, [r7, #96]	@ 0x60
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3308      	adds	r3, #8
 8004498:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800449a:	643a      	str	r2, [r7, #64]	@ 0x40
 800449c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a34      	ldr	r2, [pc, #208]	@ (8004598 <UART_RxISR_16BIT+0x1b8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d01f      	beq.n	800450c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d018      	beq.n	800450c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e6      	bne.n	80044da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004510:	2b01      	cmp	r3, #1
 8004512:	d12e      	bne.n	8004572 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	60bb      	str	r3, [r7, #8]
   return(result);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f023 0310 	bic.w	r3, r3, #16
 800452e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6979      	ldr	r1, [r7, #20]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	613b      	str	r3, [r7, #16]
   return(result);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e6      	bne.n	800451a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	2b10      	cmp	r3, #16
 8004558:	d103      	bne.n	8004562 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2210      	movs	r2, #16
 8004560:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff f874 	bl	8003658 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004570:	e00d      	b.n	800458e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fc f9e2 	bl	800093c <HAL_UART_RxCpltCallback>
}
 8004578:	e009      	b.n	800458e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	8b1b      	ldrh	r3, [r3, #24]
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0208 	orr.w	r2, r2, #8
 800458a:	b292      	uxth	r2, r2
 800458c:	831a      	strh	r2, [r3, #24]
}
 800458e:	bf00      	nop
 8004590:	3770      	adds	r7, #112	@ 0x70
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40008000 	.word	0x40008000

0800459c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045c2:	2b84      	cmp	r3, #132	@ 0x84
 80045c4:	d005      	beq.n	80045d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	3303      	adds	r3, #3
 80045d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045d2:	68fb      	ldr	r3, [r7, #12]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80045e4:	f000 fae4 	bl	8004bb0 <vTaskStartScheduler>
  
  return osOK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	bd80      	pop	{r7, pc}

080045ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045f0:	b089      	sub	sp, #36	@ 0x24
 80045f2:	af04      	add	r7, sp, #16
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <osThreadCreate+0x54>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01c      	beq.n	8004642 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685c      	ldr	r4, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691e      	ldr	r6, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff ffc8 	bl	80045b0 <makeFreeRtosPriority>
 8004620:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800462a:	9202      	str	r2, [sp, #8]
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	9100      	str	r1, [sp, #0]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	4632      	mov	r2, r6
 8004634:	4629      	mov	r1, r5
 8004636:	4620      	mov	r0, r4
 8004638:	f000 f8ed 	bl	8004816 <xTaskCreateStatic>
 800463c:	4603      	mov	r3, r0
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e01c      	b.n	800467c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685c      	ldr	r4, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800464e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff ffaa 	bl	80045b0 <makeFreeRtosPriority>
 800465c:	4602      	mov	r2, r0
 800465e:	f107 030c 	add.w	r3, r7, #12
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	9200      	str	r2, [sp, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	4632      	mov	r2, r6
 800466a:	4629      	mov	r1, r5
 800466c:	4620      	mov	r0, r4
 800466e:	f000 f932 	bl	80048d6 <xTaskCreate>
 8004672:	4603      	mov	r3, r0
 8004674:	2b01      	cmp	r3, #1
 8004676:	d001      	beq.n	800467c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	e000      	b.n	800467e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800467c:	68fb      	ldr	r3, [r7, #12]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004686 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <osDelay+0x16>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	e000      	b.n	800469e <osDelay+0x18>
 800469c:	2301      	movs	r3, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fa50 	bl	8004b44 <vTaskDelay>
  
  return osOK;
 80046a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f103 0208 	add.w	r2, r3, #8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f04f 32ff 	mov.w	r2, #4294967295
 80046c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f103 0208 	add.w	r2, r3, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f103 0208 	add.w	r2, r3, #8
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	601a      	str	r2, [r3, #0]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d103      	bne.n	8004770 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	e00c      	b.n	800478a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3308      	adds	r3, #8
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	e002      	b.n	800477e <vListInsert+0x2e>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	d2f6      	bcs.n	8004778 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6892      	ldr	r2, [r2, #8]
 80047d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6852      	ldr	r2, [r2, #4]
 80047e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d103      	bne.n	80047f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	1e5a      	subs	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004816:	b580      	push	{r7, lr}
 8004818:	b08e      	sub	sp, #56	@ 0x38
 800481a:	af04      	add	r7, sp, #16
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	e7fd      	b.n	800483e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10b      	bne.n	8004860 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	61fb      	str	r3, [r7, #28]
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004860:	2354      	movs	r3, #84	@ 0x54
 8004862:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b54      	cmp	r3, #84	@ 0x54
 8004868:	d00b      	beq.n	8004882 <xTaskCreateStatic+0x6c>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	61bb      	str	r3, [r7, #24]
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	e7fd      	b.n	800487e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004882:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01e      	beq.n	80048c8 <xTaskCreateStatic+0xb2>
 800488a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01b      	beq.n	80048c8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004892:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004898:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	2202      	movs	r2, #2
 800489e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048a2:	2300      	movs	r3, #0
 80048a4:	9303      	str	r3, [sp, #12]
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	9302      	str	r3, [sp, #8]
 80048aa:	f107 0314 	add.w	r3, r7, #20
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68b9      	ldr	r1, [r7, #8]
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f850 	bl	8004960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048c2:	f000 f8d5 	bl	8004a70 <prvAddNewTaskToReadyList>
 80048c6:	e001      	b.n	80048cc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048cc:	697b      	ldr	r3, [r7, #20]
	}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3728      	adds	r7, #40	@ 0x28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b08c      	sub	sp, #48	@ 0x30
 80048da:	af04      	add	r7, sp, #16
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	603b      	str	r3, [r7, #0]
 80048e2:	4613      	mov	r3, r2
 80048e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048e6:	88fb      	ldrh	r3, [r7, #6]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fed4 	bl	8005698 <pvPortMalloc>
 80048f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00e      	beq.n	8004916 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80048f8:	2054      	movs	r0, #84	@ 0x54
 80048fa:	f000 fecd 	bl	8005698 <pvPortMalloc>
 80048fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
 800490c:	e005      	b.n	800491a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800490e:	6978      	ldr	r0, [r7, #20]
 8004910:	f000 ff90 	bl	8005834 <vPortFree>
 8004914:	e001      	b.n	800491a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d017      	beq.n	8004950 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004928:	88fa      	ldrh	r2, [r7, #6]
 800492a:	2300      	movs	r3, #0
 800492c:	9303      	str	r3, [sp, #12]
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	9302      	str	r3, [sp, #8]
 8004932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f80e 	bl	8004960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004944:	69f8      	ldr	r0, [r7, #28]
 8004946:	f000 f893 	bl	8004a70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800494a:	2301      	movs	r3, #1
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	e002      	b.n	8004956 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004950:	f04f 33ff 	mov.w	r3, #4294967295
 8004954:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004956:	69bb      	ldr	r3, [r7, #24]
	}
 8004958:	4618      	mov	r0, r3
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800496e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004978:	3b01      	subs	r3, #1
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f023 0307 	bic.w	r3, r3, #7
 8004986:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	617b      	str	r3, [r7, #20]
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	e7fd      	b.n	80049a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01f      	beq.n	80049f0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	e012      	b.n	80049dc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	7819      	ldrb	r1, [r3, #0]
 80049be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	3334      	adds	r3, #52	@ 0x34
 80049c6:	460a      	mov	r2, r1
 80049c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4413      	add	r3, r2
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	3301      	adds	r3, #1
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	2b0f      	cmp	r3, #15
 80049e0:	d9e9      	bls.n	80049b6 <prvInitialiseNewTask+0x56>
 80049e2:	e000      	b.n	80049e6 <prvInitialiseNewTask+0x86>
			{
				break;
 80049e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049ee:	e003      	b.n	80049f8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d901      	bls.n	8004a02 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049fe:	2306      	movs	r3, #6
 8004a00:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a06:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	2200      	movs	r2, #0
 8004a12:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a16:	3304      	adds	r3, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fe68 	bl	80046ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a20:	3318      	adds	r3, #24
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fe63 	bl	80046ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a30:	f1c3 0207 	rsb	r2, r3, #7
 8004a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a3c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	2200      	movs	r2, #0
 8004a42:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	69b8      	ldr	r0, [r7, #24]
 8004a52:	f000 fc0d 	bl	8005270 <pxPortInitialiseStack>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a68:	bf00      	nop
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a78:	f000 fd2e 	bl	80054d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004b28 <prvAddNewTaskToReadyList+0xb8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3301      	adds	r3, #1
 8004a82:	4a29      	ldr	r2, [pc, #164]	@ (8004b28 <prvAddNewTaskToReadyList+0xb8>)
 8004a84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a86:	4b29      	ldr	r3, [pc, #164]	@ (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a8e:	4a27      	ldr	r2, [pc, #156]	@ (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a94:	4b24      	ldr	r3, [pc, #144]	@ (8004b28 <prvAddNewTaskToReadyList+0xb8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d110      	bne.n	8004abe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a9c:	f000 fac4 	bl	8005028 <prvInitialiseTaskLists>
 8004aa0:	e00d      	b.n	8004abe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004aa2:	4b23      	ldr	r3, [pc, #140]	@ (8004b30 <prvAddNewTaskToReadyList+0xc0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aaa:	4b20      	ldr	r3, [pc, #128]	@ (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d802      	bhi.n	8004abe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004abe:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <prvAddNewTaskToReadyList+0xc4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b34 <prvAddNewTaskToReadyList+0xc4>)
 8004ac6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	2201      	movs	r2, #1
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	4b19      	ldr	r3, [pc, #100]	@ (8004b38 <prvAddNewTaskToReadyList+0xc8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	4a18      	ldr	r2, [pc, #96]	@ (8004b38 <prvAddNewTaskToReadyList+0xc8>)
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4a15      	ldr	r2, [pc, #84]	@ (8004b3c <prvAddNewTaskToReadyList+0xcc>)
 8004ae8:	441a      	add	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3304      	adds	r3, #4
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f7ff fe09 	bl	8004708 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004af6:	f000 fd21 	bl	800553c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <prvAddNewTaskToReadyList+0xc0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00e      	beq.n	8004b20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b02:	4b0a      	ldr	r3, [pc, #40]	@ (8004b2c <prvAddNewTaskToReadyList+0xbc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d207      	bcs.n	8004b20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b10:	4b0b      	ldr	r3, [pc, #44]	@ (8004b40 <prvAddNewTaskToReadyList+0xd0>)
 8004b12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	200004ec 	.word	0x200004ec
 8004b2c:	200003ec 	.word	0x200003ec
 8004b30:	200004f8 	.word	0x200004f8
 8004b34:	20000508 	.word	0x20000508
 8004b38:	200004f4 	.word	0x200004f4
 8004b3c:	200003f0 	.word	0x200003f0
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d018      	beq.n	8004b88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b56:	4b14      	ldr	r3, [pc, #80]	@ (8004ba8 <vTaskDelay+0x64>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <vTaskDelay+0x32>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	60bb      	str	r3, [r7, #8]
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b76:	f000 f87d 	bl	8004c74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fb11 	bl	80051a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b82:	f000 f885 	bl	8004c90 <xTaskResumeAll>
 8004b86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d107      	bne.n	8004b9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b8e:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <vTaskDelay+0x68>)
 8004b90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000514 	.word	0x20000514
 8004bac:	e000ed04 	.word	0xe000ed04

08004bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	@ 0x28
 8004bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004bbe:	463a      	mov	r2, r7
 8004bc0:	1d39      	adds	r1, r7, #4
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fb fcaa 	bl	8000520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004bcc:	6839      	ldr	r1, [r7, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	9202      	str	r2, [sp, #8]
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	460a      	mov	r2, r1
 8004bde:	491f      	ldr	r1, [pc, #124]	@ (8004c5c <vTaskStartScheduler+0xac>)
 8004be0:	481f      	ldr	r0, [pc, #124]	@ (8004c60 <vTaskStartScheduler+0xb0>)
 8004be2:	f7ff fe18 	bl	8004816 <xTaskCreateStatic>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4a1e      	ldr	r2, [pc, #120]	@ (8004c64 <vTaskStartScheduler+0xb4>)
 8004bea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bec:	4b1d      	ldr	r3, [pc, #116]	@ (8004c64 <vTaskStartScheduler+0xb4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e001      	b.n	8004bfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d116      	bne.n	8004c32 <vTaskStartScheduler+0x82>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	613b      	str	r3, [r7, #16]
}
 8004c16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c18:	4b13      	ldr	r3, [pc, #76]	@ (8004c68 <vTaskStartScheduler+0xb8>)
 8004c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c20:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <vTaskStartScheduler+0xbc>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c26:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <vTaskStartScheduler+0xc0>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c2c:	f000 fbb0 	bl	8005390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c30:	e00f      	b.n	8004c52 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c38:	d10b      	bne.n	8004c52 <vTaskStartScheduler+0xa2>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	60fb      	str	r3, [r7, #12]
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	e7fd      	b.n	8004c4e <vTaskStartScheduler+0x9e>
}
 8004c52:	bf00      	nop
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	08005b30 	.word	0x08005b30
 8004c60:	08004ff9 	.word	0x08004ff9
 8004c64:	20000510 	.word	0x20000510
 8004c68:	2000050c 	.word	0x2000050c
 8004c6c:	200004f8 	.word	0x200004f8
 8004c70:	200004f0 	.word	0x200004f0

08004c74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c78:	4b04      	ldr	r3, [pc, #16]	@ (8004c8c <vTaskSuspendAll+0x18>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	4a03      	ldr	r2, [pc, #12]	@ (8004c8c <vTaskSuspendAll+0x18>)
 8004c80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c82:	bf00      	nop
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	20000514 	.word	0x20000514

08004c90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c9e:	4b42      	ldr	r3, [pc, #264]	@ (8004da8 <xTaskResumeAll+0x118>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <xTaskResumeAll+0x2e>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	603b      	str	r3, [r7, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004cbe:	f000 fc0b 	bl	80054d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004cc2:	4b39      	ldr	r3, [pc, #228]	@ (8004da8 <xTaskResumeAll+0x118>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	4a37      	ldr	r2, [pc, #220]	@ (8004da8 <xTaskResumeAll+0x118>)
 8004cca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ccc:	4b36      	ldr	r3, [pc, #216]	@ (8004da8 <xTaskResumeAll+0x118>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d161      	bne.n	8004d98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cd4:	4b35      	ldr	r3, [pc, #212]	@ (8004dac <xTaskResumeAll+0x11c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05d      	beq.n	8004d98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cdc:	e02e      	b.n	8004d3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cde:	4b34      	ldr	r3, [pc, #208]	@ (8004db0 <xTaskResumeAll+0x120>)
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3318      	adds	r3, #24
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fd69 	bl	80047c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff fd64 	bl	80047c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfe:	2201      	movs	r2, #1
 8004d00:	409a      	lsls	r2, r3
 8004d02:	4b2c      	ldr	r3, [pc, #176]	@ (8004db4 <xTaskResumeAll+0x124>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	4a2a      	ldr	r2, [pc, #168]	@ (8004db4 <xTaskResumeAll+0x124>)
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4a27      	ldr	r2, [pc, #156]	@ (8004db8 <xTaskResumeAll+0x128>)
 8004d1a:	441a      	add	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f7ff fcf0 	bl	8004708 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d2c:	4b23      	ldr	r3, [pc, #140]	@ (8004dbc <xTaskResumeAll+0x12c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004d36:	4b22      	ldr	r3, [pc, #136]	@ (8004dc0 <xTaskResumeAll+0x130>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004db0 <xTaskResumeAll+0x120>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1cc      	bne.n	8004cde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d4a:	f000 fa0b 	bl	8005164 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc4 <xTaskResumeAll+0x134>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d010      	beq.n	8004d7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d5a:	f000 f837 	bl	8004dcc <xTaskIncrementTick>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004d64:	4b16      	ldr	r3, [pc, #88]	@ (8004dc0 <xTaskResumeAll+0x130>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f1      	bne.n	8004d5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004d76:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <xTaskResumeAll+0x134>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d7c:	4b10      	ldr	r3, [pc, #64]	@ (8004dc0 <xTaskResumeAll+0x130>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d84:	2301      	movs	r3, #1
 8004d86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d88:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc8 <xTaskResumeAll+0x138>)
 8004d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d98:	f000 fbd0 	bl	800553c <vPortExitCritical>

	return xAlreadyYielded;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000514 	.word	0x20000514
 8004dac:	200004ec 	.word	0x200004ec
 8004db0:	200004ac 	.word	0x200004ac
 8004db4:	200004f4 	.word	0x200004f4
 8004db8:	200003f0 	.word	0x200003f0
 8004dbc:	200003ec 	.word	0x200003ec
 8004dc0:	20000500 	.word	0x20000500
 8004dc4:	200004fc 	.word	0x200004fc
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8004f14 <xTaskIncrementTick+0x148>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f040 808f 	bne.w	8004efe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004de0:	4b4d      	ldr	r3, [pc, #308]	@ (8004f18 <xTaskIncrementTick+0x14c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004de8:	4a4b      	ldr	r2, [pc, #300]	@ (8004f18 <xTaskIncrementTick+0x14c>)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d121      	bne.n	8004e38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004df4:	4b49      	ldr	r3, [pc, #292]	@ (8004f1c <xTaskIncrementTick+0x150>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	603b      	str	r3, [r7, #0]
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	e7fd      	b.n	8004e12 <xTaskIncrementTick+0x46>
 8004e16:	4b41      	ldr	r3, [pc, #260]	@ (8004f1c <xTaskIncrementTick+0x150>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	4b40      	ldr	r3, [pc, #256]	@ (8004f20 <xTaskIncrementTick+0x154>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a3e      	ldr	r2, [pc, #248]	@ (8004f1c <xTaskIncrementTick+0x150>)
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	4a3e      	ldr	r2, [pc, #248]	@ (8004f20 <xTaskIncrementTick+0x154>)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f24 <xTaskIncrementTick+0x158>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	4a3c      	ldr	r2, [pc, #240]	@ (8004f24 <xTaskIncrementTick+0x158>)
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	f000 f996 	bl	8005164 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e38:	4b3b      	ldr	r3, [pc, #236]	@ (8004f28 <xTaskIncrementTick+0x15c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d348      	bcc.n	8004ed4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e42:	4b36      	ldr	r3, [pc, #216]	@ (8004f1c <xTaskIncrementTick+0x150>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d104      	bne.n	8004e56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e4c:	4b36      	ldr	r3, [pc, #216]	@ (8004f28 <xTaskIncrementTick+0x15c>)
 8004e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e52:	601a      	str	r2, [r3, #0]
					break;
 8004e54:	e03e      	b.n	8004ed4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e56:	4b31      	ldr	r3, [pc, #196]	@ (8004f1c <xTaskIncrementTick+0x150>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d203      	bcs.n	8004e76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f28 <xTaskIncrementTick+0x15c>)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e74:	e02e      	b.n	8004ed4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff fca1 	bl	80047c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d004      	beq.n	8004e92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	3318      	adds	r3, #24
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fc98 	bl	80047c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e96:	2201      	movs	r2, #1
 8004e98:	409a      	lsls	r2, r3
 8004e9a:	4b24      	ldr	r3, [pc, #144]	@ (8004f2c <xTaskIncrementTick+0x160>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	4a22      	ldr	r2, [pc, #136]	@ (8004f2c <xTaskIncrementTick+0x160>)
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f30 <xTaskIncrementTick+0x164>)
 8004eb2:	441a      	add	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f7ff fc24 	bl	8004708 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f34 <xTaskIncrementTick+0x168>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d3b9      	bcc.n	8004e42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ed2:	e7b6      	b.n	8004e42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ed4:	4b17      	ldr	r3, [pc, #92]	@ (8004f34 <xTaskIncrementTick+0x168>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eda:	4915      	ldr	r1, [pc, #84]	@ (8004f30 <xTaskIncrementTick+0x164>)
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d901      	bls.n	8004ef0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004eec:	2301      	movs	r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ef0:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <xTaskIncrementTick+0x16c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e004      	b.n	8004f08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004efe:	4b0f      	ldr	r3, [pc, #60]	@ (8004f3c <xTaskIncrementTick+0x170>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3301      	adds	r3, #1
 8004f04:	4a0d      	ldr	r2, [pc, #52]	@ (8004f3c <xTaskIncrementTick+0x170>)
 8004f06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f08:	697b      	ldr	r3, [r7, #20]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000514 	.word	0x20000514
 8004f18:	200004f0 	.word	0x200004f0
 8004f1c:	200004a4 	.word	0x200004a4
 8004f20:	200004a8 	.word	0x200004a8
 8004f24:	20000504 	.word	0x20000504
 8004f28:	2000050c 	.word	0x2000050c
 8004f2c:	200004f4 	.word	0x200004f4
 8004f30:	200003f0 	.word	0x200003f0
 8004f34:	200003ec 	.word	0x200003ec
 8004f38:	20000500 	.word	0x20000500
 8004f3c:	200004fc 	.word	0x200004fc

08004f40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f46:	4b27      	ldr	r3, [pc, #156]	@ (8004fe4 <vTaskSwitchContext+0xa4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f4e:	4b26      	ldr	r3, [pc, #152]	@ (8004fe8 <vTaskSwitchContext+0xa8>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f54:	e040      	b.n	8004fd8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004f56:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <vTaskSwitchContext+0xa8>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f5c:	4b23      	ldr	r3, [pc, #140]	@ (8004fec <vTaskSwitchContext+0xac>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	fab3 f383 	clz	r3, r3
 8004f68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f6a:	7afb      	ldrb	r3, [r7, #11]
 8004f6c:	f1c3 031f 	rsb	r3, r3, #31
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	491f      	ldr	r1, [pc, #124]	@ (8004ff0 <vTaskSwitchContext+0xb0>)
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10b      	bne.n	8004f9e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	607b      	str	r3, [r7, #4]
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	e7fd      	b.n	8004f9a <vTaskSwitchContext+0x5a>
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4a11      	ldr	r2, [pc, #68]	@ (8004ff0 <vTaskSwitchContext+0xb0>)
 8004faa:	4413      	add	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	605a      	str	r2, [r3, #4]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d104      	bne.n	8004fce <vTaskSwitchContext+0x8e>
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4a07      	ldr	r2, [pc, #28]	@ (8004ff4 <vTaskSwitchContext+0xb4>)
 8004fd6:	6013      	str	r3, [r2, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	20000514 	.word	0x20000514
 8004fe8:	20000500 	.word	0x20000500
 8004fec:	200004f4 	.word	0x200004f4
 8004ff0:	200003f0 	.word	0x200003f0
 8004ff4:	200003ec 	.word	0x200003ec

08004ff8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005000:	f000 f852 	bl	80050a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005004:	4b06      	ldr	r3, [pc, #24]	@ (8005020 <prvIdleTask+0x28>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d9f9      	bls.n	8005000 <prvIdleTask+0x8>
			{
				taskYIELD();
 800500c:	4b05      	ldr	r3, [pc, #20]	@ (8005024 <prvIdleTask+0x2c>)
 800500e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800501c:	e7f0      	b.n	8005000 <prvIdleTask+0x8>
 800501e:	bf00      	nop
 8005020:	200003f0 	.word	0x200003f0
 8005024:	e000ed04 	.word	0xe000ed04

08005028 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800502e:	2300      	movs	r3, #0
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	e00c      	b.n	800504e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4a12      	ldr	r2, [pc, #72]	@ (8005088 <prvInitialiseTaskLists+0x60>)
 8005040:	4413      	add	r3, r2
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fb33 	bl	80046ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3301      	adds	r3, #1
 800504c:	607b      	str	r3, [r7, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b06      	cmp	r3, #6
 8005052:	d9ef      	bls.n	8005034 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005054:	480d      	ldr	r0, [pc, #52]	@ (800508c <prvInitialiseTaskLists+0x64>)
 8005056:	f7ff fb2a 	bl	80046ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800505a:	480d      	ldr	r0, [pc, #52]	@ (8005090 <prvInitialiseTaskLists+0x68>)
 800505c:	f7ff fb27 	bl	80046ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005060:	480c      	ldr	r0, [pc, #48]	@ (8005094 <prvInitialiseTaskLists+0x6c>)
 8005062:	f7ff fb24 	bl	80046ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005066:	480c      	ldr	r0, [pc, #48]	@ (8005098 <prvInitialiseTaskLists+0x70>)
 8005068:	f7ff fb21 	bl	80046ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800506c:	480b      	ldr	r0, [pc, #44]	@ (800509c <prvInitialiseTaskLists+0x74>)
 800506e:	f7ff fb1e 	bl	80046ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005072:	4b0b      	ldr	r3, [pc, #44]	@ (80050a0 <prvInitialiseTaskLists+0x78>)
 8005074:	4a05      	ldr	r2, [pc, #20]	@ (800508c <prvInitialiseTaskLists+0x64>)
 8005076:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005078:	4b0a      	ldr	r3, [pc, #40]	@ (80050a4 <prvInitialiseTaskLists+0x7c>)
 800507a:	4a05      	ldr	r2, [pc, #20]	@ (8005090 <prvInitialiseTaskLists+0x68>)
 800507c:	601a      	str	r2, [r3, #0]
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	200003f0 	.word	0x200003f0
 800508c:	2000047c 	.word	0x2000047c
 8005090:	20000490 	.word	0x20000490
 8005094:	200004ac 	.word	0x200004ac
 8005098:	200004c0 	.word	0x200004c0
 800509c:	200004d8 	.word	0x200004d8
 80050a0:	200004a4 	.word	0x200004a4
 80050a4:	200004a8 	.word	0x200004a8

080050a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050ae:	e019      	b.n	80050e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050b0:	f000 fa12 	bl	80054d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050b4:	4b10      	ldr	r3, [pc, #64]	@ (80050f8 <prvCheckTasksWaitingTermination+0x50>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fb7e 	bl	80047c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050c6:	4b0d      	ldr	r3, [pc, #52]	@ (80050fc <prvCheckTasksWaitingTermination+0x54>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	4a0b      	ldr	r2, [pc, #44]	@ (80050fc <prvCheckTasksWaitingTermination+0x54>)
 80050ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005100 <prvCheckTasksWaitingTermination+0x58>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005100 <prvCheckTasksWaitingTermination+0x58>)
 80050d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050da:	f000 fa2f 	bl	800553c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f810 	bl	8005104 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050e4:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <prvCheckTasksWaitingTermination+0x58>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e1      	bne.n	80050b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	200004c0 	.word	0x200004c0
 80050fc:	200004ec 	.word	0x200004ec
 8005100:	200004d4 	.word	0x200004d4

08005104 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005112:	2b00      	cmp	r3, #0
 8005114:	d108      	bne.n	8005128 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fb8a 	bl	8005834 <vPortFree>
				vPortFree( pxTCB );
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fb87 	bl	8005834 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005126:	e019      	b.n	800515c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800512e:	2b01      	cmp	r3, #1
 8005130:	d103      	bne.n	800513a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fb7e 	bl	8005834 <vPortFree>
	}
 8005138:	e010      	b.n	800515c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005140:	2b02      	cmp	r3, #2
 8005142:	d00b      	beq.n	800515c <prvDeleteTCB+0x58>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	60fb      	str	r3, [r7, #12]
}
 8005156:	bf00      	nop
 8005158:	bf00      	nop
 800515a:	e7fd      	b.n	8005158 <prvDeleteTCB+0x54>
	}
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800516a:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <prvResetNextTaskUnblockTime+0x38>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005174:	4b0a      	ldr	r3, [pc, #40]	@ (80051a0 <prvResetNextTaskUnblockTime+0x3c>)
 8005176:	f04f 32ff 	mov.w	r2, #4294967295
 800517a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800517c:	e008      	b.n	8005190 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800517e:	4b07      	ldr	r3, [pc, #28]	@ (800519c <prvResetNextTaskUnblockTime+0x38>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	4a04      	ldr	r2, [pc, #16]	@ (80051a0 <prvResetNextTaskUnblockTime+0x3c>)
 800518e:	6013      	str	r3, [r2, #0]
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	200004a4 	.word	0x200004a4
 80051a0:	2000050c 	.word	0x2000050c

080051a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051ae:	4b29      	ldr	r3, [pc, #164]	@ (8005254 <prvAddCurrentTaskToDelayedList+0xb0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051b4:	4b28      	ldr	r3, [pc, #160]	@ (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff fb01 	bl	80047c2 <uxListRemove>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80051c6:	4b24      	ldr	r3, [pc, #144]	@ (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051cc:	2201      	movs	r2, #1
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	43da      	mvns	r2, r3
 80051d4:	4b21      	ldr	r3, [pc, #132]	@ (800525c <prvAddCurrentTaskToDelayedList+0xb8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4013      	ands	r3, r2
 80051da:	4a20      	ldr	r2, [pc, #128]	@ (800525c <prvAddCurrentTaskToDelayedList+0xb8>)
 80051dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d10a      	bne.n	80051fc <prvAddCurrentTaskToDelayedList+0x58>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d007      	beq.n	80051fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3304      	adds	r3, #4
 80051f2:	4619      	mov	r1, r3
 80051f4:	481a      	ldr	r0, [pc, #104]	@ (8005260 <prvAddCurrentTaskToDelayedList+0xbc>)
 80051f6:	f7ff fa87 	bl	8004708 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051fa:	e026      	b.n	800524a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4413      	add	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005204:	4b14      	ldr	r3, [pc, #80]	@ (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	429a      	cmp	r2, r3
 8005212:	d209      	bcs.n	8005228 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005214:	4b13      	ldr	r3, [pc, #76]	@ (8005264 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b0f      	ldr	r3, [pc, #60]	@ (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7ff fa95 	bl	8004750 <vListInsert>
}
 8005226:	e010      	b.n	800524a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005228:	4b0f      	ldr	r3, [pc, #60]	@ (8005268 <prvAddCurrentTaskToDelayedList+0xc4>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	4b0a      	ldr	r3, [pc, #40]	@ (8005258 <prvAddCurrentTaskToDelayedList+0xb4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3304      	adds	r3, #4
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f7ff fa8b 	bl	8004750 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800523a:	4b0c      	ldr	r3, [pc, #48]	@ (800526c <prvAddCurrentTaskToDelayedList+0xc8>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	429a      	cmp	r2, r3
 8005242:	d202      	bcs.n	800524a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005244:	4a09      	ldr	r2, [pc, #36]	@ (800526c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	6013      	str	r3, [r2, #0]
}
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	200004f0 	.word	0x200004f0
 8005258:	200003ec 	.word	0x200003ec
 800525c:	200004f4 	.word	0x200004f4
 8005260:	200004d8 	.word	0x200004d8
 8005264:	200004a8 	.word	0x200004a8
 8005268:	200004a4 	.word	0x200004a4
 800526c:	2000050c 	.word	0x2000050c

08005270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3b04      	subs	r3, #4
 8005280:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3b04      	subs	r3, #4
 800528e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f023 0201 	bic.w	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3b04      	subs	r3, #4
 800529e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80052a0:	4a0c      	ldr	r2, [pc, #48]	@ (80052d4 <pxPortInitialiseStack+0x64>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3b14      	subs	r3, #20
 80052aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3b04      	subs	r3, #4
 80052b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f06f 0202 	mvn.w	r2, #2
 80052be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3b20      	subs	r3, #32
 80052c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052c6:	68fb      	ldr	r3, [r7, #12]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	080052d9 	.word	0x080052d9

080052d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052e2:	4b13      	ldr	r3, [pc, #76]	@ (8005330 <prvTaskExitError+0x58>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d00b      	beq.n	8005304 <prvTaskExitError+0x2c>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	60fb      	str	r3, [r7, #12]
}
 80052fe:	bf00      	nop
 8005300:	bf00      	nop
 8005302:	e7fd      	b.n	8005300 <prvTaskExitError+0x28>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	60bb      	str	r3, [r7, #8]
}
 8005316:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005318:	bf00      	nop
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0fc      	beq.n	800531a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	2000000c 	.word	0x2000000c
	...

08005340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005340:	4b07      	ldr	r3, [pc, #28]	@ (8005360 <pxCurrentTCBConst2>)
 8005342:	6819      	ldr	r1, [r3, #0]
 8005344:	6808      	ldr	r0, [r1, #0]
 8005346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534a:	f380 8809 	msr	PSP, r0
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8811 	msr	BASEPRI, r0
 800535a:	4770      	bx	lr
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst2>:
 8005360:	200003ec 	.word	0x200003ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005368:	4808      	ldr	r0, [pc, #32]	@ (800538c <prvPortStartFirstTask+0x24>)
 800536a:	6800      	ldr	r0, [r0, #0]
 800536c:	6800      	ldr	r0, [r0, #0]
 800536e:	f380 8808 	msr	MSP, r0
 8005372:	f04f 0000 	mov.w	r0, #0
 8005376:	f380 8814 	msr	CONTROL, r0
 800537a:	b662      	cpsie	i
 800537c:	b661      	cpsie	f
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	df00      	svc	0
 8005388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800538a:	bf00      	nop
 800538c:	e000ed08 	.word	0xe000ed08

08005390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005396:	4b47      	ldr	r3, [pc, #284]	@ (80054b4 <xPortStartScheduler+0x124>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a47      	ldr	r2, [pc, #284]	@ (80054b8 <xPortStartScheduler+0x128>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d10b      	bne.n	80053b8 <xPortStartScheduler+0x28>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	60fb      	str	r3, [r7, #12]
}
 80053b2:	bf00      	nop
 80053b4:	bf00      	nop
 80053b6:	e7fd      	b.n	80053b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053b8:	4b3e      	ldr	r3, [pc, #248]	@ (80054b4 <xPortStartScheduler+0x124>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a3f      	ldr	r2, [pc, #252]	@ (80054bc <xPortStartScheduler+0x12c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d10b      	bne.n	80053da <xPortStartScheduler+0x4a>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	613b      	str	r3, [r7, #16]
}
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	e7fd      	b.n	80053d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053da:	4b39      	ldr	r3, [pc, #228]	@ (80054c0 <xPortStartScheduler+0x130>)
 80053dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	22ff      	movs	r2, #255	@ 0xff
 80053ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	4b31      	ldr	r3, [pc, #196]	@ (80054c4 <xPortStartScheduler+0x134>)
 8005400:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005402:	4b31      	ldr	r3, [pc, #196]	@ (80054c8 <xPortStartScheduler+0x138>)
 8005404:	2207      	movs	r2, #7
 8005406:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005408:	e009      	b.n	800541e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800540a:	4b2f      	ldr	r3, [pc, #188]	@ (80054c8 <xPortStartScheduler+0x138>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3b01      	subs	r3, #1
 8005410:	4a2d      	ldr	r2, [pc, #180]	@ (80054c8 <xPortStartScheduler+0x138>)
 8005412:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	b2db      	uxtb	r3, r3
 800541c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005426:	2b80      	cmp	r3, #128	@ 0x80
 8005428:	d0ef      	beq.n	800540a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800542a:	4b27      	ldr	r3, [pc, #156]	@ (80054c8 <xPortStartScheduler+0x138>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f1c3 0307 	rsb	r3, r3, #7
 8005432:	2b04      	cmp	r3, #4
 8005434:	d00b      	beq.n	800544e <xPortStartScheduler+0xbe>
	__asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	60bb      	str	r3, [r7, #8]
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	e7fd      	b.n	800544a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800544e:	4b1e      	ldr	r3, [pc, #120]	@ (80054c8 <xPortStartScheduler+0x138>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	4a1c      	ldr	r2, [pc, #112]	@ (80054c8 <xPortStartScheduler+0x138>)
 8005456:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005458:	4b1b      	ldr	r3, [pc, #108]	@ (80054c8 <xPortStartScheduler+0x138>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005460:	4a19      	ldr	r2, [pc, #100]	@ (80054c8 <xPortStartScheduler+0x138>)
 8005462:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800546c:	4b17      	ldr	r3, [pc, #92]	@ (80054cc <xPortStartScheduler+0x13c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a16      	ldr	r2, [pc, #88]	@ (80054cc <xPortStartScheduler+0x13c>)
 8005472:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005476:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005478:	4b14      	ldr	r3, [pc, #80]	@ (80054cc <xPortStartScheduler+0x13c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a13      	ldr	r2, [pc, #76]	@ (80054cc <xPortStartScheduler+0x13c>)
 800547e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005482:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005484:	f000 f8da 	bl	800563c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005488:	4b11      	ldr	r3, [pc, #68]	@ (80054d0 <xPortStartScheduler+0x140>)
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800548e:	f000 f8f9 	bl	8005684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005492:	4b10      	ldr	r3, [pc, #64]	@ (80054d4 <xPortStartScheduler+0x144>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a0f      	ldr	r2, [pc, #60]	@ (80054d4 <xPortStartScheduler+0x144>)
 8005498:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800549c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800549e:	f7ff ff63 	bl	8005368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054a2:	f7ff fd4d 	bl	8004f40 <vTaskSwitchContext>
	prvTaskExitError();
 80054a6:	f7ff ff17 	bl	80052d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	e000ed00 	.word	0xe000ed00
 80054b8:	410fc271 	.word	0x410fc271
 80054bc:	410fc270 	.word	0x410fc270
 80054c0:	e000e400 	.word	0xe000e400
 80054c4:	20000518 	.word	0x20000518
 80054c8:	2000051c 	.word	0x2000051c
 80054cc:	e000ed20 	.word	0xe000ed20
 80054d0:	2000000c 	.word	0x2000000c
 80054d4:	e000ef34 	.word	0xe000ef34

080054d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	607b      	str	r3, [r7, #4]
}
 80054f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054f2:	4b10      	ldr	r3, [pc, #64]	@ (8005534 <vPortEnterCritical+0x5c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3301      	adds	r3, #1
 80054f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005534 <vPortEnterCritical+0x5c>)
 80054fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005534 <vPortEnterCritical+0x5c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d110      	bne.n	8005526 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005504:	4b0c      	ldr	r3, [pc, #48]	@ (8005538 <vPortEnterCritical+0x60>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <vPortEnterCritical+0x4e>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	603b      	str	r3, [r7, #0]
}
 8005520:	bf00      	nop
 8005522:	bf00      	nop
 8005524:	e7fd      	b.n	8005522 <vPortEnterCritical+0x4a>
	}
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	2000000c 	.word	0x2000000c
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005542:	4b12      	ldr	r3, [pc, #72]	@ (800558c <vPortExitCritical+0x50>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <vPortExitCritical+0x26>
	__asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	607b      	str	r3, [r7, #4]
}
 800555c:	bf00      	nop
 800555e:	bf00      	nop
 8005560:	e7fd      	b.n	800555e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005562:	4b0a      	ldr	r3, [pc, #40]	@ (800558c <vPortExitCritical+0x50>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3b01      	subs	r3, #1
 8005568:	4a08      	ldr	r2, [pc, #32]	@ (800558c <vPortExitCritical+0x50>)
 800556a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800556c:	4b07      	ldr	r3, [pc, #28]	@ (800558c <vPortExitCritical+0x50>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d105      	bne.n	8005580 <vPortExitCritical+0x44>
 8005574:	2300      	movs	r3, #0
 8005576:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800557e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	2000000c 	.word	0x2000000c

08005590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005590:	f3ef 8009 	mrs	r0, PSP
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	4b15      	ldr	r3, [pc, #84]	@ (80055f0 <pxCurrentTCBConst>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	f01e 0f10 	tst.w	lr, #16
 80055a0:	bf08      	it	eq
 80055a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055aa:	6010      	str	r0, [r2, #0]
 80055ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80055b4:	f380 8811 	msr	BASEPRI, r0
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f7ff fcbe 	bl	8004f40 <vTaskSwitchContext>
 80055c4:	f04f 0000 	mov.w	r0, #0
 80055c8:	f380 8811 	msr	BASEPRI, r0
 80055cc:	bc09      	pop	{r0, r3}
 80055ce:	6819      	ldr	r1, [r3, #0]
 80055d0:	6808      	ldr	r0, [r1, #0]
 80055d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d6:	f01e 0f10 	tst.w	lr, #16
 80055da:	bf08      	it	eq
 80055dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055e0:	f380 8809 	msr	PSP, r0
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	f3af 8000 	nop.w

080055f0 <pxCurrentTCBConst>:
 80055f0:	200003ec 	.word	0x200003ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop

080055f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	607b      	str	r3, [r7, #4]
}
 8005610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005612:	f7ff fbdb 	bl	8004dcc <xTaskIncrementTick>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800561c:	4b06      	ldr	r3, [pc, #24]	@ (8005638 <SysTick_Handler+0x40>)
 800561e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	2300      	movs	r3, #0
 8005626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f383 8811 	msr	BASEPRI, r3
}
 800562e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005640:	4b0b      	ldr	r3, [pc, #44]	@ (8005670 <vPortSetupTimerInterrupt+0x34>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005646:	4b0b      	ldr	r3, [pc, #44]	@ (8005674 <vPortSetupTimerInterrupt+0x38>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800564c:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <vPortSetupTimerInterrupt+0x3c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0a      	ldr	r2, [pc, #40]	@ (800567c <vPortSetupTimerInterrupt+0x40>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	4a09      	ldr	r2, [pc, #36]	@ (8005680 <vPortSetupTimerInterrupt+0x44>)
 800565a:	3b01      	subs	r3, #1
 800565c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800565e:	4b04      	ldr	r3, [pc, #16]	@ (8005670 <vPortSetupTimerInterrupt+0x34>)
 8005660:	2207      	movs	r2, #7
 8005662:	601a      	str	r2, [r3, #0]
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	e000e010 	.word	0xe000e010
 8005674:	e000e018 	.word	0xe000e018
 8005678:	20000000 	.word	0x20000000
 800567c:	10624dd3 	.word	0x10624dd3
 8005680:	e000e014 	.word	0xe000e014

08005684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005684:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005694 <vPortEnableVFP+0x10>
 8005688:	6801      	ldr	r1, [r0, #0]
 800568a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800568e:	6001      	str	r1, [r0, #0]
 8005690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005692:	bf00      	nop
 8005694:	e000ed88 	.word	0xe000ed88

08005698 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	@ 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056a4:	f7ff fae6 	bl	8004c74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056a8:	4b5c      	ldr	r3, [pc, #368]	@ (800581c <pvPortMalloc+0x184>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056b0:	f000 f924 	bl	80058fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005820 <pvPortMalloc+0x188>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f040 8095 	bne.w	80057ec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01e      	beq.n	8005706 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80056c8:	2208      	movs	r2, #8
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d015      	beq.n	8005706 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f023 0307 	bic.w	r3, r3, #7
 80056e0:	3308      	adds	r3, #8
 80056e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <pvPortMalloc+0x6e>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	617b      	str	r3, [r7, #20]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d06f      	beq.n	80057ec <pvPortMalloc+0x154>
 800570c:	4b45      	ldr	r3, [pc, #276]	@ (8005824 <pvPortMalloc+0x18c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	429a      	cmp	r2, r3
 8005714:	d86a      	bhi.n	80057ec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005716:	4b44      	ldr	r3, [pc, #272]	@ (8005828 <pvPortMalloc+0x190>)
 8005718:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800571a:	4b43      	ldr	r3, [pc, #268]	@ (8005828 <pvPortMalloc+0x190>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005720:	e004      	b.n	800572c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	d903      	bls.n	800573e <pvPortMalloc+0xa6>
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f1      	bne.n	8005722 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800573e:	4b37      	ldr	r3, [pc, #220]	@ (800581c <pvPortMalloc+0x184>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005744:	429a      	cmp	r2, r3
 8005746:	d051      	beq.n	80057ec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2208      	movs	r2, #8
 800574e:	4413      	add	r3, r2
 8005750:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	1ad2      	subs	r2, r2, r3
 8005762:	2308      	movs	r3, #8
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	429a      	cmp	r2, r3
 8005768:	d920      	bls.n	80057ac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800576a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4413      	add	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <pvPortMalloc+0xfc>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	613b      	str	r3, [r7, #16]
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	e7fd      	b.n	8005790 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	1ad2      	subs	r2, r2, r3
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057a6:	69b8      	ldr	r0, [r7, #24]
 80057a8:	f000 f90a 	bl	80059c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005824 <pvPortMalloc+0x18c>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005824 <pvPortMalloc+0x18c>)
 80057b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <pvPortMalloc+0x18c>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b1b      	ldr	r3, [pc, #108]	@ (800582c <pvPortMalloc+0x194>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d203      	bcs.n	80057ce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057c6:	4b17      	ldr	r3, [pc, #92]	@ (8005824 <pvPortMalloc+0x18c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a18      	ldr	r2, [pc, #96]	@ (800582c <pvPortMalloc+0x194>)
 80057cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	4b13      	ldr	r3, [pc, #76]	@ (8005820 <pvPortMalloc+0x188>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057e2:	4b13      	ldr	r3, [pc, #76]	@ (8005830 <pvPortMalloc+0x198>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3301      	adds	r3, #1
 80057e8:	4a11      	ldr	r2, [pc, #68]	@ (8005830 <pvPortMalloc+0x198>)
 80057ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057ec:	f7ff fa50 	bl	8004c90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <pvPortMalloc+0x17a>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	60fb      	str	r3, [r7, #12]
}
 800580c:	bf00      	nop
 800580e:	bf00      	nop
 8005810:	e7fd      	b.n	800580e <pvPortMalloc+0x176>
	return pvReturn;
 8005812:	69fb      	ldr	r3, [r7, #28]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3728      	adds	r7, #40	@ 0x28
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20003fc0 	.word	0x20003fc0
 8005820:	20003fd4 	.word	0x20003fd4
 8005824:	20003fc4 	.word	0x20003fc4
 8005828:	20003fb8 	.word	0x20003fb8
 800582c:	20003fc8 	.word	0x20003fc8
 8005830:	20003fcc 	.word	0x20003fcc

08005834 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d04f      	beq.n	80058e6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005846:	2308      	movs	r3, #8
 8005848:	425b      	negs	r3, r3
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4413      	add	r3, r2
 800584e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	4b25      	ldr	r3, [pc, #148]	@ (80058f0 <vPortFree+0xbc>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4013      	ands	r3, r2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <vPortFree+0x46>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	60fb      	str	r3, [r7, #12]
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	e7fd      	b.n	8005876 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <vPortFree+0x66>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	60bb      	str	r3, [r7, #8]
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	e7fd      	b.n	8005896 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	4b14      	ldr	r3, [pc, #80]	@ (80058f0 <vPortFree+0xbc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01e      	beq.n	80058e6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d11a      	bne.n	80058e6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	4b0e      	ldr	r3, [pc, #56]	@ (80058f0 <vPortFree+0xbc>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	401a      	ands	r2, r3
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058c0:	f7ff f9d8 	bl	8004c74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	4b0a      	ldr	r3, [pc, #40]	@ (80058f4 <vPortFree+0xc0>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4413      	add	r3, r2
 80058ce:	4a09      	ldr	r2, [pc, #36]	@ (80058f4 <vPortFree+0xc0>)
 80058d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058d2:	6938      	ldr	r0, [r7, #16]
 80058d4:	f000 f874 	bl	80059c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058d8:	4b07      	ldr	r3, [pc, #28]	@ (80058f8 <vPortFree+0xc4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3301      	adds	r3, #1
 80058de:	4a06      	ldr	r2, [pc, #24]	@ (80058f8 <vPortFree+0xc4>)
 80058e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058e2:	f7ff f9d5 	bl	8004c90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058e6:	bf00      	nop
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20003fd4 	.word	0x20003fd4
 80058f4:	20003fc4 	.word	0x20003fc4
 80058f8:	20003fd0 	.word	0x20003fd0

080058fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005902:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8005906:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005908:	4b27      	ldr	r3, [pc, #156]	@ (80059a8 <prvHeapInit+0xac>)
 800590a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00c      	beq.n	8005930 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3307      	adds	r3, #7
 800591a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0307 	bic.w	r3, r3, #7
 8005922:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	4a1f      	ldr	r2, [pc, #124]	@ (80059a8 <prvHeapInit+0xac>)
 800592c:	4413      	add	r3, r2
 800592e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005934:	4a1d      	ldr	r2, [pc, #116]	@ (80059ac <prvHeapInit+0xb0>)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800593a:	4b1c      	ldr	r3, [pc, #112]	@ (80059ac <prvHeapInit+0xb0>)
 800593c:	2200      	movs	r2, #0
 800593e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	4413      	add	r3, r2
 8005946:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005948:	2208      	movs	r2, #8
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0307 	bic.w	r3, r3, #7
 8005956:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a15      	ldr	r2, [pc, #84]	@ (80059b0 <prvHeapInit+0xb4>)
 800595c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800595e:	4b14      	ldr	r3, [pc, #80]	@ (80059b0 <prvHeapInit+0xb4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2200      	movs	r2, #0
 8005964:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005966:	4b12      	ldr	r3, [pc, #72]	@ (80059b0 <prvHeapInit+0xb4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	1ad2      	subs	r2, r2, r3
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800597c:	4b0c      	ldr	r3, [pc, #48]	@ (80059b0 <prvHeapInit+0xb4>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4a0a      	ldr	r2, [pc, #40]	@ (80059b4 <prvHeapInit+0xb8>)
 800598a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4a09      	ldr	r2, [pc, #36]	@ (80059b8 <prvHeapInit+0xbc>)
 8005992:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005994:	4b09      	ldr	r3, [pc, #36]	@ (80059bc <prvHeapInit+0xc0>)
 8005996:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800599a:	601a      	str	r2, [r3, #0]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	20000520 	.word	0x20000520
 80059ac:	20003fb8 	.word	0x20003fb8
 80059b0:	20003fc0 	.word	0x20003fc0
 80059b4:	20003fc8 	.word	0x20003fc8
 80059b8:	20003fc4 	.word	0x20003fc4
 80059bc:	20003fd4 	.word	0x20003fd4

080059c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059c8:	4b28      	ldr	r3, [pc, #160]	@ (8005a6c <prvInsertBlockIntoFreeList+0xac>)
 80059ca:	60fb      	str	r3, [r7, #12]
 80059cc:	e002      	b.n	80059d4 <prvInsertBlockIntoFreeList+0x14>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d8f7      	bhi.n	80059ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	4413      	add	r3, r2
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d108      	bne.n	8005a02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	441a      	add	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	441a      	add	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d118      	bne.n	8005a48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b15      	ldr	r3, [pc, #84]	@ (8005a70 <prvInsertBlockIntoFreeList+0xb0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d00d      	beq.n	8005a3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	441a      	add	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e008      	b.n	8005a50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a70 <prvInsertBlockIntoFreeList+0xb0>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e003      	b.n	8005a50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d002      	beq.n	8005a5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20003fb8 	.word	0x20003fb8
 8005a70:	20003fc0 	.word	0x20003fc0

08005a74 <memset>:
 8005a74:	4402      	add	r2, r0
 8005a76:	4603      	mov	r3, r0
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d100      	bne.n	8005a7e <memset+0xa>
 8005a7c:	4770      	bx	lr
 8005a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a82:	e7f9      	b.n	8005a78 <memset+0x4>

08005a84 <__libc_init_array>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	4d0d      	ldr	r5, [pc, #52]	@ (8005abc <__libc_init_array+0x38>)
 8005a88:	4c0d      	ldr	r4, [pc, #52]	@ (8005ac0 <__libc_init_array+0x3c>)
 8005a8a:	1b64      	subs	r4, r4, r5
 8005a8c:	10a4      	asrs	r4, r4, #2
 8005a8e:	2600      	movs	r6, #0
 8005a90:	42a6      	cmp	r6, r4
 8005a92:	d109      	bne.n	8005aa8 <__libc_init_array+0x24>
 8005a94:	4d0b      	ldr	r5, [pc, #44]	@ (8005ac4 <__libc_init_array+0x40>)
 8005a96:	4c0c      	ldr	r4, [pc, #48]	@ (8005ac8 <__libc_init_array+0x44>)
 8005a98:	f000 f818 	bl	8005acc <_init>
 8005a9c:	1b64      	subs	r4, r4, r5
 8005a9e:	10a4      	asrs	r4, r4, #2
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	42a6      	cmp	r6, r4
 8005aa4:	d105      	bne.n	8005ab2 <__libc_init_array+0x2e>
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
 8005aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aac:	4798      	blx	r3
 8005aae:	3601      	adds	r6, #1
 8005ab0:	e7ee      	b.n	8005a90 <__libc_init_array+0xc>
 8005ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab6:	4798      	blx	r3
 8005ab8:	3601      	adds	r6, #1
 8005aba:	e7f2      	b.n	8005aa2 <__libc_init_array+0x1e>
 8005abc:	08005b88 	.word	0x08005b88
 8005ac0:	08005b88 	.word	0x08005b88
 8005ac4:	08005b88 	.word	0x08005b88
 8005ac8:	08005b8c 	.word	0x08005b8c

08005acc <_init>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	bf00      	nop
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr

08005ad8 <_fini>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	bf00      	nop
 8005adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ade:	bc08      	pop	{r3}
 8005ae0:	469e      	mov	lr, r3
 8005ae2:	4770      	bx	lr
