
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008130  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080082c0  080082c0  000092c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800871c  0800871c  0000a090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800871c  0800871c  0000971c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008724  08008724  0000a090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008724  08008724  00009724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008728  08008728  00009728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800872c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005604  20000090  080087bc  0000a090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005694  080087bc  0000a694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ac9  00000000  00000000  0000a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dd5  00000000  00000000  00023b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  00027960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001128  00000000  00000000  00028f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5eb  00000000  00000000  0002a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac17  00000000  00000000  0005469b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feab7  00000000  00000000  0006f2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016dd69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066fc  00000000  00000000  0016ddac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001744a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082a8 	.word	0x080082a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080082a8 	.word	0x080082a8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4a07      	ldr	r2, [pc, #28]	@ (80005f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <vApplicationGetIdleTaskMemory+0x30>)
 80005e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200000b4 	.word	0x200000b4
 80005fc:	20000154 	.word	0x20000154

08000600 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b08e      	sub	sp, #56	@ 0x38
 8000604:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <MX_FREERTOS_Init+0x58>)
 8000608:	f107 041c 	add.w	r4, r7, #28
 800060c:	461d      	mov	r5, r3
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fb4c 	bl	8004cbe <osThreadCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <MX_FREERTOS_Init+0x5c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* definition and creation of IHM_Task */
  osThreadDef(IHM_Task, Start_IHM_Task, osPriorityIdle, 0, 1024);
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_FREERTOS_Init+0x60>)
 800062e:	463c      	mov	r4, r7
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IHM_TaskHandle = osThreadCreate(osThread(IHM_Task), NULL);
 800063e:	463b      	mov	r3, r7
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fb3b 	bl	8004cbe <osThreadCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a06      	ldr	r2, [pc, #24]	@ (8000664 <MX_FREERTOS_Init+0x64>)
 800064c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800064e:	bf00      	nop
 8000650:	3738      	adds	r7, #56	@ 0x38
 8000652:	46bd      	mov	sp, r7
 8000654:	bdb0      	pop	{r4, r5, r7, pc}
 8000656:	bf00      	nop
 8000658:	080082cc 	.word	0x080082cc
 800065c:	200000ac 	.word	0x200000ac
 8000660:	080082f4 	.word	0x080082f4
 8000664:	200000b0 	.word	0x200000b0

08000668 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f004 fb70 	bl	8004d56 <osDelay>
 8000676:	e7fb      	b.n	8000670 <StartDefaultTask+0x8>

08000678 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b2b      	ldr	r3, [pc, #172]	@ (800073c <MX_GPIO_Init+0xc4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a2a      	ldr	r2, [pc, #168]	@ (800073c <MX_GPIO_Init+0xc4>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b28      	ldr	r3, [pc, #160]	@ (800073c <MX_GPIO_Init+0xc4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b25      	ldr	r3, [pc, #148]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a24      	ldr	r2, [pc, #144]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b22      	ldr	r3, [pc, #136]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a1e      	ldr	r2, [pc, #120]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	4a18      	ldr	r2, [pc, #96]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2120      	movs	r1, #32
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f6:	f001 f8a9 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000700:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	480b      	ldr	r0, [pc, #44]	@ (8000740 <MX_GPIO_Init+0xc8>)
 8000712:	f000 fef1 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000716:	2320      	movs	r3, #32
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000730:	f000 fee2 	bl	80014f8 <HAL_GPIO_Init>

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	@ 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	48000800 	.word	0x48000800

08000744 <Start_IHM_Task>:
char *tokens[10];
uint8_t SF_Value;
uint8_t sf_buff[35];

void Start_IHM_Task(void const * argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_IHM_Task */
	AfficherMenuPrincipal();
 800074c:	f000 f83a 	bl	80007c4 <AfficherMenuPrincipal>
	MessageBufferHandle = xMessageBufferCreate(xMessageBufferSizeBytes);
 8000750:	2364      	movs	r3, #100	@ 0x64
 8000752:	2201      	movs	r2, #1
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fbc5 	bl	8004ee6 <xStreamBufferGenericCreate>
 800075c:	4603      	mov	r3, r0
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <Start_IHM_Task+0x6c>)
 8000760:	6013      	str	r3, [r2, #0]
	if( MessageBufferHandle != NULL )
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <Start_IHM_Task+0x6c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d105      	bne.n	8000776 <Start_IHM_Task+0x32>
	{
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 800076a:	2364      	movs	r3, #100	@ 0x64
 800076c:	2222      	movs	r2, #34	@ 0x22
 800076e:	4911      	ldr	r1, [pc, #68]	@ (80007b4 <Start_IHM_Task+0x70>)
 8000770:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <Start_IHM_Task+0x74>)
 8000772:	f002 fee9 	bl	8003548 <HAL_UART_Transmit>
	}

	/* Infinite loop */
	for(;;)
	{
		xMessageBufferReceive( MessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <Start_IHM_Task+0x6c>)
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	2240      	movs	r2, #64	@ 0x40
 8000780:	490e      	ldr	r1, [pc, #56]	@ (80007bc <Start_IHM_Task+0x78>)
 8000782:	f004 fcf2 	bl	800516a <xStreamBufferReceive>
		memset(new_buff,0,sizeof(new_buff));
 8000786:	2240      	movs	r2, #64	@ 0x40
 8000788:	2100      	movs	r1, #0
 800078a:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <Start_IHM_Task+0x7c>)
 800078c:	f006 fc83 	bl	8007096 <memset>
		tokenization((char*)received_data);
 8000790:	480a      	ldr	r0, [pc, #40]	@ (80007bc <Start_IHM_Task+0x78>)
 8000792:	f000 f93d 	bl	8000a10 <tokenization>
		ParseCommand();
 8000796:	f000 f9e5 	bl	8000b64 <ParseCommand>
		memset(received_data,0,sizeof(received_data));
 800079a:	2240      	movs	r2, #64	@ 0x40
 800079c:	2100      	movs	r1, #0
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <Start_IHM_Task+0x78>)
 80007a0:	f006 fc79 	bl	8007096 <memset>
		osDelay(1);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f004 fad6 	bl	8004d56 <osDelay>
		xMessageBufferReceive( MessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 80007aa:	bf00      	nop
 80007ac:	e7e3      	b.n	8000776 <Start_IHM_Task+0x32>
 80007ae:	bf00      	nop
 80007b0:	2000049c 	.word	0x2000049c
 80007b4:	08008310 	.word	0x08008310
 80007b8:	20000548 	.word	0x20000548
 80007bc:	2000045c 	.word	0x2000045c
 80007c0:	20000394 	.word	0x20000394

080007c4 <AfficherMenuPrincipal>:
	}
	/* USER CODE END Start_IHM_Task */
}
// Fonction pour afficher le menu principal complet
void AfficherMenuPrincipal(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	// Afficher tout le menu une seule fois
	sprintf((char*)txBuffer,"*************** MAIN MENU ***************\r\n");
 80007c8:	4934      	ldr	r1, [pc, #208]	@ (800089c <AfficherMenuPrincipal+0xd8>)
 80007ca:	4835      	ldr	r0, [pc, #212]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 80007cc:	f006 fbfe 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80007d0:	4833      	ldr	r0, [pc, #204]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 80007d2:	f7ff fd07 	bl	80001e4 <strlen>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b29a      	uxth	r2, r3
 80007da:	2364      	movs	r3, #100	@ 0x64
 80007dc:	4930      	ldr	r1, [pc, #192]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 80007de:	4831      	ldr	r0, [pc, #196]	@ (80008a4 <AfficherMenuPrincipal+0xe0>)
 80007e0:	f002 feb2 	bl	8003548 <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO ACCESS SENSORS DATA WRITE : SENSORS \r\n");
 80007e4:	4930      	ldr	r1, [pc, #192]	@ (80008a8 <AfficherMenuPrincipal+0xe4>)
 80007e6:	482e      	ldr	r0, [pc, #184]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 80007e8:	f006 fbf0 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80007ec:	482c      	ldr	r0, [pc, #176]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 80007ee:	f7ff fcf9 	bl	80001e4 <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	2364      	movs	r3, #100	@ 0x64
 80007f8:	4929      	ldr	r1, [pc, #164]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 80007fa:	482a      	ldr	r0, [pc, #168]	@ (80008a4 <AfficherMenuPrincipal+0xe0>)
 80007fc:	f002 fea4 	bl	8003548 <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO ACCESS SATELLITE PREDICTION MENU WRITE : SATELLITE\r\n");
 8000800:	492a      	ldr	r1, [pc, #168]	@ (80008ac <AfficherMenuPrincipal+0xe8>)
 8000802:	4827      	ldr	r0, [pc, #156]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 8000804:	f006 fbe2 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8000808:	4825      	ldr	r0, [pc, #148]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 800080a:	f7ff fceb 	bl	80001e4 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	b29a      	uxth	r2, r3
 8000812:	2364      	movs	r3, #100	@ 0x64
 8000814:	4922      	ldr	r1, [pc, #136]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 8000816:	4823      	ldr	r0, [pc, #140]	@ (80008a4 <AfficherMenuPrincipal+0xe0>)
 8000818:	f002 fe96 	bl	8003548 <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO ACCESS GPS MENU WRITE : GPS\r\n");
 800081c:	4924      	ldr	r1, [pc, #144]	@ (80008b0 <AfficherMenuPrincipal+0xec>)
 800081e:	4820      	ldr	r0, [pc, #128]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 8000820:	f006 fbd4 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8000824:	481e      	ldr	r0, [pc, #120]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 8000826:	f7ff fcdd 	bl	80001e4 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29a      	uxth	r2, r3
 800082e:	2364      	movs	r3, #100	@ 0x64
 8000830:	491b      	ldr	r1, [pc, #108]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 8000832:	481c      	ldr	r0, [pc, #112]	@ (80008a4 <AfficherMenuPrincipal+0xe0>)
 8000834:	f002 fe88 	bl	8003548 <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO ACCESS LORA MENU, WRITE : LORA\r\n");
 8000838:	491e      	ldr	r1, [pc, #120]	@ (80008b4 <AfficherMenuPrincipal+0xf0>)
 800083a:	4819      	ldr	r0, [pc, #100]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 800083c:	f006 fbc6 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8000840:	4817      	ldr	r0, [pc, #92]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 8000842:	f7ff fccf 	bl	80001e4 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	b29a      	uxth	r2, r3
 800084a:	2364      	movs	r3, #100	@ 0x64
 800084c:	4914      	ldr	r1, [pc, #80]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 800084e:	4815      	ldr	r0, [pc, #84]	@ (80008a4 <AfficherMenuPrincipal+0xe0>)
 8000850:	f002 fe7a 	bl	8003548 <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO RESET TO THE PREVIOUS STATE WRITE : RESET\r\n");
 8000854:	4918      	ldr	r1, [pc, #96]	@ (80008b8 <AfficherMenuPrincipal+0xf4>)
 8000856:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 8000858:	f006 fbb8 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 800085c:	4810      	ldr	r0, [pc, #64]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 800085e:	f7ff fcc1 	bl	80001e4 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	2364      	movs	r3, #100	@ 0x64
 8000868:	490d      	ldr	r1, [pc, #52]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 800086a:	480e      	ldr	r0, [pc, #56]	@ (80008a4 <AfficherMenuPrincipal+0xe0>)
 800086c:	f002 fe6c 	bl	8003548 <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO SAVE CHANGES WRITE : SAVE\r\n");
 8000870:	4912      	ldr	r1, [pc, #72]	@ (80008bc <AfficherMenuPrincipal+0xf8>)
 8000872:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 8000874:	f006 fbaa 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8000878:	4809      	ldr	r0, [pc, #36]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 800087a:	f7ff fcb3 	bl	80001e4 <strlen>
 800087e:	4603      	mov	r3, r0
 8000880:	b29a      	uxth	r2, r3
 8000882:	2364      	movs	r3, #100	@ 0x64
 8000884:	4906      	ldr	r1, [pc, #24]	@ (80008a0 <AfficherMenuPrincipal+0xdc>)
 8000886:	4807      	ldr	r0, [pc, #28]	@ (80008a4 <AfficherMenuPrincipal+0xe0>)
 8000888:	f002 fe5e 	bl	8003548 <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	490c      	ldr	r1, [pc, #48]	@ (80008c0 <AfficherMenuPrincipal+0xfc>)
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <AfficherMenuPrincipal+0xe0>)
 8000892:	f002 fee3 	bl	800365c <HAL_UART_Receive_IT>

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	08008334 	.word	0x08008334
 80008a0:	200003d8 	.word	0x200003d8
 80008a4:	20000548 	.word	0x20000548
 80008a8:	08008360 	.word	0x08008360
 80008ac:	0800838c 	.word	0x0800838c
 80008b0:	080083c4 	.word	0x080083c4
 80008b4:	080083e8 	.word	0x080083e8
 80008b8:	0800840c 	.word	0x0800840c
 80008bc:	0800843c 	.word	0x0800843c
 80008c0:	200003d4 	.word	0x200003d4

080008c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	if (!processing)
 80008cc:	4b44      	ldr	r3, [pc, #272]	@ (80009e0 <HAL_UART_RxCpltCallback+0x11c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d17b      	bne.n	80009cc <HAL_UART_RxCpltCallback+0x108>
	{ if ((rxByte == '\r')||(rxByte=='\n'))
 80008d4:	4b43      	ldr	r3, [pc, #268]	@ (80009e4 <HAL_UART_RxCpltCallback+0x120>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b0d      	cmp	r3, #13
 80008da:	d003      	beq.n	80008e4 <HAL_UART_RxCpltCallback+0x20>
 80008dc:	4b41      	ldr	r3, [pc, #260]	@ (80009e4 <HAL_UART_RxCpltCallback+0x120>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b0a      	cmp	r3, #10
 80008e2:	d13a      	bne.n	800095a <HAL_UART_RxCpltCallback+0x96>
	{   if (rxIndex!=0)
 80008e4:	4b40      	ldr	r3, [pc, #256]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d06f      	beq.n	80009cc <HAL_UART_RxCpltCallback+0x108>
	{
		processing=1;
 80008ec:	4b3c      	ldr	r3, [pc, #240]	@ (80009e0 <HAL_UART_RxCpltCallback+0x11c>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
		rxBuffer[rxIndex] = '\0';
 80008f2:	4b3d      	ldr	r3, [pc, #244]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b3c      	ldr	r3, [pc, #240]	@ (80009ec <HAL_UART_RxCpltCallback+0x128>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	5499      	strb	r1, [r3, r2]
		memcpy(new_buff,rxBuffer,rxIndex);
 80008fe:	4b3a      	ldr	r3, [pc, #232]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	4939      	ldr	r1, [pc, #228]	@ (80009ec <HAL_UART_RxCpltCallback+0x128>)
 8000906:	483a      	ldr	r0, [pc, #232]	@ (80009f0 <HAL_UART_RxCpltCallback+0x12c>)
 8000908:	f006 fcfb 	bl	8007302 <memcpy>
		xBytesSent=xMessageBufferSendFromISR(MessageBufferHandle,new_buff,strlen((char*)new_buff),&xHigherPriorityTaskWoken);
 800090c:	4b39      	ldr	r3, [pc, #228]	@ (80009f4 <HAL_UART_RxCpltCallback+0x130>)
 800090e:	681c      	ldr	r4, [r3, #0]
 8000910:	4837      	ldr	r0, [pc, #220]	@ (80009f0 <HAL_UART_RxCpltCallback+0x12c>)
 8000912:	f7ff fc67 	bl	80001e4 <strlen>
 8000916:	4602      	mov	r2, r0
 8000918:	4b37      	ldr	r3, [pc, #220]	@ (80009f8 <HAL_UART_RxCpltCallback+0x134>)
 800091a:	4935      	ldr	r1, [pc, #212]	@ (80009f0 <HAL_UART_RxCpltCallback+0x12c>)
 800091c:	4620      	mov	r0, r4
 800091e:	f004 fb74 	bl	800500a <xStreamBufferSendFromISR>
 8000922:	4603      	mov	r3, r0
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b35      	ldr	r3, [pc, #212]	@ (80009fc <HAL_UART_RxCpltCallback+0x138>)
 8000928:	701a      	strb	r2, [r3, #0]
		//The number of bytes actually written to the message buffer.  If the
		// * message buffer didn't have enough free space for the message to be stored
		// * then 0 is returned, otherwise xDataLengthBytes is returned.
		if( xBytesSent != strlen((char*)new_buff))
 800092a:	4b34      	ldr	r3, [pc, #208]	@ (80009fc <HAL_UART_RxCpltCallback+0x138>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461c      	mov	r4, r3
 8000930:	482f      	ldr	r0, [pc, #188]	@ (80009f0 <HAL_UART_RxCpltCallback+0x12c>)
 8000932:	f7ff fc57 	bl	80001e4 <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	429c      	cmp	r4, r3
 800093a:	d005      	beq.n	8000948 <HAL_UART_RxCpltCallback+0x84>
		{
			HAL_UART_Transmit(&huart2, (const uint8_t *)"Message sent !=buffer data\r\n",26,100);
 800093c:	2364      	movs	r3, #100	@ 0x64
 800093e:	221a      	movs	r2, #26
 8000940:	492f      	ldr	r1, [pc, #188]	@ (8000a00 <HAL_UART_RxCpltCallback+0x13c>)
 8000942:	4830      	ldr	r0, [pc, #192]	@ (8000a04 <HAL_UART_RxCpltCallback+0x140>)
 8000944:	f002 fe00 	bl	8003548 <HAL_UART_Transmit>
		}
		memset(rxBuffer,0,sizeof(rxBuffer));
 8000948:	2240      	movs	r2, #64	@ 0x40
 800094a:	2100      	movs	r1, #0
 800094c:	4827      	ldr	r0, [pc, #156]	@ (80009ec <HAL_UART_RxCpltCallback+0x128>)
 800094e:	f006 fba2 	bl	8007096 <memset>
		rxIndex = 0;}
 8000952:	4b25      	ldr	r3, [pc, #148]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
	{   if (rxIndex!=0)
 8000958:	e038      	b.n	80009cc <HAL_UART_RxCpltCallback+0x108>
	}

	else { if (rxIndex > 0){
 800095a:	4b23      	ldr	r3, [pc, #140]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d021      	beq.n	80009a6 <HAL_UART_RxCpltCallback+0xe2>

		if (rxByte == '\b') {
 8000962:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <HAL_UART_RxCpltCallback+0x120>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b08      	cmp	r3, #8
 8000968:	d11d      	bne.n	80009a6 <HAL_UART_RxCpltCallback+0xe2>
			rxBuffer[rxIndex]=' ';
 800096a:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <HAL_UART_RxCpltCallback+0x128>)
 8000972:	2120      	movs	r1, #32
 8000974:	5499      	strb	r1, [r3, r2]
			rxIndex=rxIndex-1;
 8000976:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	3b01      	subs	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b1a      	ldr	r3, [pc, #104]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 8000980:	701a      	strb	r2, [r3, #0]
			rxBuffer[rxIndex]=' ';
 8000982:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <HAL_UART_RxCpltCallback+0x128>)
 800098a:	2120      	movs	r1, #32
 800098c:	5499      	strb	r1, [r3, r2]
			retour=rxIndex-1;
 800098e:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	3b01      	subs	r3, #1
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <HAL_UART_RxCpltCallback+0x144>)
 8000998:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, (uint8_t *)" \b", 2, 100);
 800099a:	2364      	movs	r3, #100	@ 0x64
 800099c:	2202      	movs	r2, #2
 800099e:	491b      	ldr	r1, [pc, #108]	@ (8000a0c <HAL_UART_RxCpltCallback+0x148>)
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f002 fdd1 	bl	8003548 <HAL_UART_Transmit>
			//{rxBuffer[i]=rxBuffer[retour++];
			//if (i==retour)
			//rxBuffer[i]='\0';}
		}
	}
	if (rxIndex < RX_BUFFER_SIZE-1) {
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80009ac:	d80b      	bhi.n	80009c6 <HAL_UART_RxCpltCallback+0x102>

		rxBuffer[rxIndex++] = rxByte;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	b2d1      	uxtb	r1, r2
 80009b6:	4a0c      	ldr	r2, [pc, #48]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 80009b8:	7011      	strb	r1, [r2, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_UART_RxCpltCallback+0x120>)
 80009be:	7819      	ldrb	r1, [r3, #0]
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <HAL_UART_RxCpltCallback+0x128>)
 80009c2:	5499      	strb	r1, [r3, r2]
 80009c4:	e002      	b.n	80009cc <HAL_UART_RxCpltCallback+0x108>
	}
	else {
		rxIndex=0;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <HAL_UART_RxCpltCallback+0x124>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
	}
	}
	}
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	4905      	ldr	r1, [pc, #20]	@ (80009e4 <HAL_UART_RxCpltCallback+0x120>)
 80009d0:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <HAL_UART_RxCpltCallback+0x140>)
 80009d2:	f002 fe43 	bl	800365c <HAL_UART_Receive_IT>
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	bf00      	nop
 80009e0:	200004a4 	.word	0x200004a4
 80009e4:	200003d4 	.word	0x200003d4
 80009e8:	200003d5 	.word	0x200003d5
 80009ec:	20000354 	.word	0x20000354
 80009f0:	20000394 	.word	0x20000394
 80009f4:	2000049c 	.word	0x2000049c
 80009f8:	200004a0 	.word	0x200004a0
 80009fc:	20000458 	.word	0x20000458
 8000a00:	0800845c 	.word	0x0800845c
 8000a04:	20000548 	.word	0x20000548
 8000a08:	200004a5 	.word	0x200004a5
 8000a0c:	0800847c 	.word	0x0800847c

08000a10 <tokenization>:
	char* helper;
	cmdHandler handler;
	uint8_t MenuIndex;
}CMD;
void tokenization(char *str) //function to tokenize input string
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	tokens[0]=strtok(str," ");
 8000a18:	4912      	ldr	r1, [pc, #72]	@ (8000a64 <tokenization+0x54>)
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f006 fb44 	bl	80070a8 <strtok>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4a11      	ldr	r2, [pc, #68]	@ (8000a68 <tokenization+0x58>)
 8000a24:	6013      	str	r3, [r2, #0]
	for (uint8_t i=1; i<10;i++)
 8000a26:	2301      	movs	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	e011      	b.n	8000a50 <tokenization+0x40>
	{   tokens[i]=strtok(NULL," ");
 8000a2c:	7bfc      	ldrb	r4, [r7, #15]
 8000a2e:	490d      	ldr	r1, [pc, #52]	@ (8000a64 <tokenization+0x54>)
 8000a30:	2000      	movs	r0, #0
 8000a32:	f006 fb39 	bl	80070a8 <strtok>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4a0b      	ldr	r2, [pc, #44]	@ (8000a68 <tokenization+0x58>)
 8000a3a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (tokens[i]==NULL)
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	4a09      	ldr	r2, [pc, #36]	@ (8000a68 <tokenization+0x58>)
 8000a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d006      	beq.n	8000a58 <tokenization+0x48>
	for (uint8_t i=1; i<10;i++)
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	2b09      	cmp	r3, #9
 8000a54:	d9ea      	bls.n	8000a2c <tokenization+0x1c>
		break;
	}
}
 8000a56:	e000      	b.n	8000a5a <tokenization+0x4a>
		break;
 8000a58:	bf00      	nop
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	bf00      	nop
 8000a64:	08008480 	.word	0x08008480
 8000a68:	200004a8 	.word	0x200004a8

08000a6c <SetSF_f>:
		{"GETGPS",0,GetTimeGPS_f,0},
		{"SETGPS",0,SetGPS_f,0},
		{"GETGPS",0,GetGPS_f,0},*/
};
uint8_t cl_elements=sizeof(cmd_list)/sizeof(cmd_list[0]);
void SetSF_f(char* arg){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	uint8_t MAX_TH_SF=12;
 8000a74:	230c      	movs	r3, #12
 8000a76:	73bb      	strb	r3, [r7, #14]
	uint8_t MIN_TH_SF=6;
 8000a78:	2306      	movs	r3, #6
 8000a7a:	737b      	strb	r3, [r7, #13]
	uint8_t success = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73fb      	strb	r3, [r7, #15]

	    if (tokens[1] != NULL && strlen(tokens[1]) < 3) {
 8000a80:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <SetSF_f+0x9c>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d02c      	beq.n	8000ae2 <SetSF_f+0x76>
 8000a88:	4b1f      	ldr	r3, [pc, #124]	@ (8000b08 <SetSF_f+0x9c>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fba9 	bl	80001e4 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d824      	bhi.n	8000ae2 <SetSF_f+0x76>
	        int sf_new_value = atoi(tokens[1]);
 8000a98:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <SetSF_f+0x9c>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f006 f94b 	bl	8006d38 <atoi>
 8000aa2:	60b8      	str	r0, [r7, #8]

	        if (sf_new_value >= MIN_TH_SF && sf_new_value <= MAX_TH_SF) {
 8000aa4:	7b7b      	ldrb	r3, [r7, #13]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	db1a      	blt.n	8000ae2 <SetSF_f+0x76>
 8000aac:	7bbb      	ldrb	r3, [r7, #14]
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dc16      	bgt.n	8000ae2 <SetSF_f+0x76>
	            SF_Value = sf_new_value;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <SetSF_f+0xa0>)
 8000aba:	701a      	strb	r2, [r3, #0]
	            sprintf((char*)sf_buff, "SF VALUE SET TO %d SUCCESSFULLY\r\n", SF_Value);
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <SetSF_f+0xa0>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4913      	ldr	r1, [pc, #76]	@ (8000b10 <SetSF_f+0xa4>)
 8000ac4:	4813      	ldr	r0, [pc, #76]	@ (8000b14 <SetSF_f+0xa8>)
 8000ac6:	f006 fa81 	bl	8006fcc <siprintf>
	            HAL_UART_Transmit(&huart2, sf_buff, strlen((char*)sf_buff), 100);
 8000aca:	4812      	ldr	r0, [pc, #72]	@ (8000b14 <SetSF_f+0xa8>)
 8000acc:	f7ff fb8a 	bl	80001e4 <strlen>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	2364      	movs	r3, #100	@ 0x64
 8000ad6:	490f      	ldr	r1, [pc, #60]	@ (8000b14 <SetSF_f+0xa8>)
 8000ad8:	480f      	ldr	r0, [pc, #60]	@ (8000b18 <SetSF_f+0xac>)
 8000ada:	f002 fd35 	bl	8003548 <HAL_UART_Transmit>
	            success = 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
	        }
	    }

	    if (success==0) {
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d105      	bne.n	8000af4 <SetSF_f+0x88>
	        HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8000ae8:	2364      	movs	r3, #100	@ 0x64
 8000aea:	2210      	movs	r2, #16
 8000aec:	490b      	ldr	r1, [pc, #44]	@ (8000b1c <SetSF_f+0xb0>)
 8000aee:	480a      	ldr	r0, [pc, #40]	@ (8000b18 <SetSF_f+0xac>)
 8000af0:	f002 fd2a 	bl	8003548 <HAL_UART_Transmit>
	    }

	    memset(sf_buff, 0, sizeof(sf_buff));  // always clear at the end
 8000af4:	2223      	movs	r2, #35	@ 0x23
 8000af6:	2100      	movs	r1, #0
 8000af8:	4806      	ldr	r0, [pc, #24]	@ (8000b14 <SetSF_f+0xa8>)
 8000afa:	f006 facc 	bl	8007096 <memset>
	}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200004a8 	.word	0x200004a8
 8000b0c:	200004d0 	.word	0x200004d0
 8000b10:	08008494 	.word	0x08008494
 8000b14:	200004d4 	.word	0x200004d4
 8000b18:	20000548 	.word	0x20000548
 8000b1c:	080084b8 	.word	0x080084b8

08000b20 <GetSF_f>:
void GetSF_f(char* arg)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	sprintf((char*)sf_buff,"SF VALUE IS %d ",SF_Value);
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <GetSF_f+0x34>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	490a      	ldr	r1, [pc, #40]	@ (8000b58 <GetSF_f+0x38>)
 8000b30:	480a      	ldr	r0, [pc, #40]	@ (8000b5c <GetSF_f+0x3c>)
 8000b32:	f006 fa4b 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&huart2,sf_buff,strlen((char*)sf_buff), 100);
 8000b36:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <GetSF_f+0x3c>)
 8000b38:	f7ff fb54 	bl	80001e4 <strlen>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	2364      	movs	r3, #100	@ 0x64
 8000b42:	4906      	ldr	r1, [pc, #24]	@ (8000b5c <GetSF_f+0x3c>)
 8000b44:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <GetSF_f+0x40>)
 8000b46:	f002 fcff 	bl	8003548 <HAL_UART_Transmit>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200004d0 	.word	0x200004d0
 8000b58:	080084c8 	.word	0x080084c8
 8000b5c:	200004d4 	.word	0x200004d4
 8000b60:	20000548 	.word	0x20000548

08000b64 <ParseCommand>:

//After tokenizing , check the type , check type + subname , activate the function
//inside the function check the value
void ParseCommand() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
	uint8_t c=0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	uint8_t correspond=0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	71bb      	strb	r3, [r7, #6]
	while (c<cl_elements)
 8000b72:	e01c      	b.n	8000bae <ParseCommand+0x4a>
	{if (strcmp(tokens[0], cmd_list[c].Name)== 0)
 8000b74:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <ParseCommand+0x74>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4918      	ldr	r1, [pc, #96]	@ (8000bdc <ParseCommand+0x78>)
 8000b7c:	011b      	lsls	r3, r3, #4
 8000b7e:	440b      	add	r3, r1
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4619      	mov	r1, r3
 8000b84:	4610      	mov	r0, r2
 8000b86:	f7ff fb23 	bl	80001d0 <strcmp>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10b      	bne.n	8000ba8 <ParseCommand+0x44>
	{ cmd_list[c].handler(tokens[1]);
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <ParseCommand+0x78>)
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	4413      	add	r3, r2
 8000b98:	3308      	adds	r3, #8
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd8 <ParseCommand+0x74>)
 8000b9e:	6852      	ldr	r2, [r2, #4]
 8000ba0:	4610      	mov	r0, r2
 8000ba2:	4798      	blx	r3
	correspond=1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	71bb      	strb	r3, [r7, #6]
	}
	c++;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	3301      	adds	r3, #1
 8000bac:	71fb      	strb	r3, [r7, #7]
	while (c<cl_elements)
 8000bae:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <ParseCommand+0x7c>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d3dd      	bcc.n	8000b74 <ParseCommand+0x10>
	}
	if (correspond==0)
 8000bb8:	79bb      	ldrb	r3, [r7, #6]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d105      	bne.n	8000bca <ParseCommand+0x66>
	{HAL_UART_Transmit(&huart2, (uint8_t*)"COMMAND ERROR\r\n",16,100);}
 8000bbe:	2364      	movs	r3, #100	@ 0x64
 8000bc0:	2210      	movs	r2, #16
 8000bc2:	4908      	ldr	r1, [pc, #32]	@ (8000be4 <ParseCommand+0x80>)
 8000bc4:	4808      	ldr	r0, [pc, #32]	@ (8000be8 <ParseCommand+0x84>)
 8000bc6:	f002 fcbf 	bl	8003548 <HAL_UART_Transmit>
	processing=0;
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <ParseCommand+0x88>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200004a8 	.word	0x200004a8
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000020 	.word	0x20000020
 8000be4:	080084d8 	.word	0x080084d8
 8000be8:	20000548 	.word	0x20000548
 8000bec:	200004a4 	.word	0x200004a4

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf4:	f000 fade 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf8:	f000 f80a 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfc:	f7ff fd3c 	bl	8000678 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c00:	f000 fa1a 	bl	8001038 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c04:	f7ff fcfc 	bl	8000600 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c08:	f004 f852 	bl	8004cb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <main+0x1c>

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b096      	sub	sp, #88	@ 0x58
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	2244      	movs	r2, #68	@ 0x44
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f006 fa39 	bl	8007096 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c32:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c36:	f000 fe2f 	bl	8001898 <HAL_PWREx_ControlVoltageScaling>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c40:	f000 f84a 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c44:	2302      	movs	r3, #2
 8000c46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4e:	2310      	movs	r3, #16
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c52:	2302      	movs	r3, #2
 8000c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c56:	2302      	movs	r3, #2
 8000c58:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c5e:	230a      	movs	r3, #10
 8000c60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c62:	2307      	movs	r3, #7
 8000c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fe66 	bl	8001944 <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c7e:	f000 f82b 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	230f      	movs	r3, #15
 8000c84:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c86:	2303      	movs	r3, #3
 8000c88:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c96:	463b      	mov	r3, r7
 8000c98:	2104      	movs	r1, #4
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 fa2e 	bl	80020fc <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ca6:	f000 f817 	bl	8000cd8 <Error_Handler>
  }
}
 8000caa:	bf00      	nop
 8000cac:	3758      	adds	r7, #88	@ 0x58
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d101      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000cc6:	f000 fa95 	bl	80011f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40001000 	.word	0x40001000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <Error_Handler+0x8>

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cee:	4a10      	ldr	r2, [pc, #64]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0e:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	210f      	movs	r1, #15
 8000d1e:	f06f 0001 	mvn.w	r0, #1
 8000d22:	f000 fb3f 	bl	80013a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08e      	sub	sp, #56	@ 0x38
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d42:	4b34      	ldr	r3, [pc, #208]	@ (8000e14 <HAL_InitTick+0xe0>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d46:	4a33      	ldr	r2, [pc, #204]	@ (8000e14 <HAL_InitTick+0xe0>)
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4e:	4b31      	ldr	r3, [pc, #196]	@ (8000e14 <HAL_InitTick+0xe0>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d5a:	f107 0210 	add.w	r2, r7, #16
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 fb8d 	bl	8002484 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d103      	bne.n	8000d7c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d74:	f001 fb5a 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8000d78:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d7a:	e004      	b.n	8000d86 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d7c:	f001 fb56 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8000d80:	4603      	mov	r3, r0
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d88:	4a23      	ldr	r2, [pc, #140]	@ (8000e18 <HAL_InitTick+0xe4>)
 8000d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8e:	0c9b      	lsrs	r3, r3, #18
 8000d90:	3b01      	subs	r3, #1
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d94:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <HAL_InitTick+0xe8>)
 8000d96:	4a22      	ldr	r2, [pc, #136]	@ (8000e20 <HAL_InitTick+0xec>)
 8000d98:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	@ (8000e1c <HAL_InitTick+0xe8>)
 8000d9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000da0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000da2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e1c <HAL_InitTick+0xe8>)
 8000da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000da8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <HAL_InitTick+0xe8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <HAL_InitTick+0xe8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db4:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <HAL_InitTick+0xe8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dba:	4818      	ldr	r0, [pc, #96]	@ (8000e1c <HAL_InitTick+0xe8>)
 8000dbc:	f002 f8b0 	bl	8002f20 <HAL_TIM_Base_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000dc6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d11b      	bne.n	8000e06 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dce:	4813      	ldr	r0, [pc, #76]	@ (8000e1c <HAL_InitTick+0xe8>)
 8000dd0:	f002 f908 	bl	8002fe4 <HAL_TIM_Base_Start_IT>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000dda:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d111      	bne.n	8000e06 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000de2:	2036      	movs	r0, #54	@ 0x36
 8000de4:	f000 fafa 	bl	80013dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b0f      	cmp	r3, #15
 8000dec:	d808      	bhi.n	8000e00 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dee:	2200      	movs	r2, #0
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	2036      	movs	r0, #54	@ 0x36
 8000df4:	f000 fad6 	bl	80013a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <HAL_InitTick+0xf0>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e002      	b.n	8000e06 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3738      	adds	r7, #56	@ 0x38
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	431bde83 	.word	0x431bde83
 8000e1c:	200004f8 	.word	0x200004f8
 8000e20:	40001000 	.word	0x40001000
 8000e24:	20000028 	.word	0x20000028

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <NMI_Handler+0x4>

08000e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <MemManage_Handler+0x4>

08000e40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <USART2_IRQHandler+0x10>)
 8000e66:	f002 fc45 	bl	80036f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000548 	.word	0x20000548

08000e74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <TIM6_DAC_IRQHandler+0x10>)
 8000e7a:	f002 f923 	bl	80030c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200004f8 	.word	0x200004f8

08000e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return 1;
 8000e8c:	2301      	movs	r3, #1
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_kill>:

int _kill(int pid, int sig)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ea2:	f006 fa01 	bl	80072a8 <__errno>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2216      	movs	r2, #22
 8000eaa:	601a      	str	r2, [r3, #0]
  return -1;
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_exit>:

void _exit (int status)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ffe7 	bl	8000e98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eca:	bf00      	nop
 8000ecc:	e7fd      	b.n	8000eca <_exit+0x12>

08000ece <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	e00a      	b.n	8000ef6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ee0:	f3af 8000 	nop.w
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	60ba      	str	r2, [r7, #8]
 8000eec:	b2ca      	uxtb	r2, r1
 8000eee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	dbf0      	blt.n	8000ee0 <_read+0x12>
  }

  return len;
 8000efe:	687b      	ldr	r3, [r7, #4]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e009      	b.n	8000f2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	60ba      	str	r2, [r7, #8]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	dbf1      	blt.n	8000f1a <_write+0x12>
  }
  return len;
 8000f36:	687b      	ldr	r3, [r7, #4]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_close>:

int _close(int file)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f68:	605a      	str	r2, [r3, #4]
  return 0;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_isatty>:

int _isatty(int file)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f80:	2301      	movs	r3, #1
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	@ (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	@ (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	@ (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f006 f966 	bl	80072a8 <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	@ (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20018000 	.word	0x20018000
 8001008:	00000400 	.word	0x00000400
 800100c:	20000544 	.word	0x20000544
 8001010:	20005698 	.word	0x20005698

08001014 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	@ (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_USART2_UART_Init+0x58>)
 800103e:	4a15      	ldr	r2, [pc, #84]	@ (8001094 <MX_USART2_UART_Init+0x5c>)
 8001040:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_USART2_UART_Init+0x58>)
 8001044:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001048:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_USART2_UART_Init+0x58>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_USART2_UART_Init+0x58>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <MX_USART2_UART_Init+0x58>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <MX_USART2_UART_Init+0x58>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <MX_USART2_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <MX_USART2_UART_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <MX_USART2_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <MX_USART2_UART_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <MX_USART2_UART_Init+0x58>)
 800107c:	f002 fa16 	bl	80034ac <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001086:	f7ff fe27 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000548 	.word	0x20000548
 8001094:	40004400 	.word	0x40004400

08001098 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0ac      	sub	sp, #176	@ 0xb0
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2288      	movs	r2, #136	@ 0x88
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f005 ffec 	bl	8007096 <memset>
  if(uartHandle->Instance==USART2)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a25      	ldr	r2, [pc, #148]	@ (8001158 <HAL_UART_MspInit+0xc0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d143      	bne.n	8001150 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fa67 	bl	80025a8 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010e0:	f7ff fdfa 	bl	8000cd8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <HAL_UART_MspInit+0xc4>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e8:	4a1c      	ldr	r2, [pc, #112]	@ (800115c <HAL_UART_MspInit+0xc4>)
 80010ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <HAL_UART_MspInit+0xc4>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <HAL_UART_MspInit+0xc4>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001100:	4a16      	ldr	r2, [pc, #88]	@ (800115c <HAL_UART_MspInit+0xc4>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <HAL_UART_MspInit+0xc4>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001114:	230c      	movs	r3, #12
 8001116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112c:	2307      	movs	r3, #7
 800112e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113c:	f000 f9dc 	bl	80014f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2105      	movs	r1, #5
 8001144:	2026      	movs	r0, #38	@ 0x26
 8001146:	f000 f92d 	bl	80013a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800114a:	2026      	movs	r0, #38	@ 0x26
 800114c:	f000 f946 	bl	80013dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001150:	bf00      	nop
 8001152:	37b0      	adds	r7, #176	@ 0xb0
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40004400 	.word	0x40004400
 800115c:	40021000 	.word	0x40021000

08001160 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001198 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001164:	f7ff ff56 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <LoopForever+0x6>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	@ (80011a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <LoopForever+0xe>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	@ (80011ac <LoopForever+0x16>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f006 f891 	bl	80072b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001192:	f7ff fd2d 	bl	8000bf0 <main>

08001196 <LoopForever>:

LoopForever:
    b LoopForever
 8001196:	e7fe      	b.n	8001196 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001198:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80011a4:	0800872c 	.word	0x0800872c
  ldr r2, =_sbss
 80011a8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80011ac:	20005694 	.word	0x20005694

080011b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC1_2_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <HAL_Init+0x3c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a0b      	ldr	r2, [pc, #44]	@ (80011f0 <HAL_Init+0x3c>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f000 f8df 	bl	800138e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d0:	200f      	movs	r0, #15
 80011d2:	f7ff fdaf 	bl	8000d34 <HAL_InitTick>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	e001      	b.n	80011e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011e2:	f7ff fd7f 	bl	8000ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40022000 	.word	0x40022000

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	2000002c 	.word	0x2000002c
 8001218:	200005d0 	.word	0x200005d0

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	200005d0 	.word	0x200005d0

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	@ (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	@ (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	@ 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ff4c 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013b6:	f7ff ff61 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	6978      	ldr	r0, [r7, #20]
 80013c2:	f7ff ffb1 	bl	8001328 <NVIC_EncodePriority>
 80013c6:	4602      	mov	r2, r0
 80013c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff80 	bl	80012d4 <__NVIC_SetPriority>
}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff54 	bl	8001298 <__NVIC_EnableIRQ>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2204      	movs	r2, #4
 8001414:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e022      	b.n	8001468 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 020e 	bic.w	r2, r2, #14
 8001430:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f003 021c 	and.w	r2, r3, #28
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d005      	beq.n	8001498 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2204      	movs	r2, #4
 8001490:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	e029      	b.n	80014ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 020e 	bic.w	r2, r2, #14
 80014a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0201 	bic.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014bc:	f003 021c 	and.w	r2, r3, #28
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	2101      	movs	r1, #1
 80014c6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
    }
  }
  return status;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001506:	e17f      	b.n	8001808 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2101      	movs	r1, #1
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8171 	beq.w	8001802 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b01      	cmp	r3, #1
 800152a:	d005      	beq.n	8001538 <HAL_GPIO_Init+0x40>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d130      	bne.n	800159a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800156e:	2201      	movs	r2, #1
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	f003 0201 	and.w	r2, r3, #1
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d118      	bne.n	80015d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015ac:	2201      	movs	r2, #1
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	08db      	lsrs	r3, r3, #3
 80015c2:	f003 0201 	and.w	r2, r3, #1
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d017      	beq.n	8001614 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d123      	bne.n	8001668 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220f      	movs	r2, #15
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	08da      	lsrs	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3208      	adds	r2, #8
 8001662:	6939      	ldr	r1, [r7, #16]
 8001664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0203 	and.w	r2, r3, #3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80ac 	beq.w	8001802 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001828 <HAL_GPIO_Init+0x330>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001828 <HAL_GPIO_Init+0x330>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001828 <HAL_GPIO_Init+0x330>)
 80016b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016c2:	4a5a      	ldr	r2, [pc, #360]	@ (800182c <HAL_GPIO_Init+0x334>)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016ec:	d025      	beq.n	800173a <HAL_GPIO_Init+0x242>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001830 <HAL_GPIO_Init+0x338>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01f      	beq.n	8001736 <HAL_GPIO_Init+0x23e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001834 <HAL_GPIO_Init+0x33c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d019      	beq.n	8001732 <HAL_GPIO_Init+0x23a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4d      	ldr	r2, [pc, #308]	@ (8001838 <HAL_GPIO_Init+0x340>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d013      	beq.n	800172e <HAL_GPIO_Init+0x236>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4c      	ldr	r2, [pc, #304]	@ (800183c <HAL_GPIO_Init+0x344>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00d      	beq.n	800172a <HAL_GPIO_Init+0x232>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4b      	ldr	r2, [pc, #300]	@ (8001840 <HAL_GPIO_Init+0x348>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d007      	beq.n	8001726 <HAL_GPIO_Init+0x22e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4a      	ldr	r2, [pc, #296]	@ (8001844 <HAL_GPIO_Init+0x34c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_GPIO_Init+0x22a>
 800171e:	2306      	movs	r3, #6
 8001720:	e00c      	b.n	800173c <HAL_GPIO_Init+0x244>
 8001722:	2307      	movs	r3, #7
 8001724:	e00a      	b.n	800173c <HAL_GPIO_Init+0x244>
 8001726:	2305      	movs	r3, #5
 8001728:	e008      	b.n	800173c <HAL_GPIO_Init+0x244>
 800172a:	2304      	movs	r3, #4
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x244>
 800172e:	2303      	movs	r3, #3
 8001730:	e004      	b.n	800173c <HAL_GPIO_Init+0x244>
 8001732:	2302      	movs	r3, #2
 8001734:	e002      	b.n	800173c <HAL_GPIO_Init+0x244>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_GPIO_Init+0x244>
 800173a:	2300      	movs	r3, #0
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	f002 0203 	and.w	r2, r2, #3
 8001742:	0092      	lsls	r2, r2, #2
 8001744:	4093      	lsls	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800174c:	4937      	ldr	r1, [pc, #220]	@ (800182c <HAL_GPIO_Init+0x334>)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	3302      	adds	r3, #2
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800175a:	4b3b      	ldr	r3, [pc, #236]	@ (8001848 <HAL_GPIO_Init+0x350>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800177e:	4a32      	ldr	r2, [pc, #200]	@ (8001848 <HAL_GPIO_Init+0x350>)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001784:	4b30      	ldr	r3, [pc, #192]	@ (8001848 <HAL_GPIO_Init+0x350>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017a8:	4a27      	ldr	r2, [pc, #156]	@ (8001848 <HAL_GPIO_Init+0x350>)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017ae:	4b26      	ldr	r3, [pc, #152]	@ (8001848 <HAL_GPIO_Init+0x350>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001848 <HAL_GPIO_Init+0x350>)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <HAL_GPIO_Init+0x350>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017fc:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <HAL_GPIO_Init+0x350>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	f47f ae78 	bne.w	8001508 <HAL_GPIO_Init+0x10>
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	40010000 	.word	0x40010000
 8001830:	48000400 	.word	0x48000400
 8001834:	48000800 	.word	0x48000800
 8001838:	48000c00 	.word	0x48000c00
 800183c:	48001000 	.word	0x48001000
 8001840:	48001400 	.word	0x48001400
 8001844:	48001800 	.word	0x48001800
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001868:	e002      	b.n	8001870 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <HAL_PWREx_GetVoltageRange+0x18>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40007000 	.word	0x40007000

08001898 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018a6:	d130      	bne.n	800190a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018a8:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018b4:	d038      	beq.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018be:	4a1e      	ldr	r2, [pc, #120]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018c6:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2232      	movs	r2, #50	@ 0x32
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0c9b      	lsrs	r3, r3, #18
 80018d8:	3301      	adds	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018dc:	e002      	b.n	80018e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e4:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f0:	d102      	bne.n	80018f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f2      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001904:	d110      	bne.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e00f      	b.n	800192a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800190a:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001916:	d007      	beq.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001918:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001920:	4a05      	ldr	r2, [pc, #20]	@ (8001938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001922:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001926:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40007000 	.word	0x40007000
 800193c:	20000024 	.word	0x20000024
 8001940:	431bde83 	.word	0x431bde83

08001944 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e3ca      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001956:	4b97      	ldr	r3, [pc, #604]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001960:	4b94      	ldr	r3, [pc, #592]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 80e4 	beq.w	8001b40 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_RCC_OscConfig+0x4a>
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	f040 808b 	bne.w	8001a9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b01      	cmp	r3, #1
 800198a:	f040 8087 	bne.w	8001a9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800198e:	4b89      	ldr	r3, [pc, #548]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x62>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e3a2      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1a      	ldr	r2, [r3, #32]
 80019aa:	4b82      	ldr	r3, [pc, #520]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d004      	beq.n	80019c0 <HAL_RCC_OscConfig+0x7c>
 80019b6:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019be:	e005      	b.n	80019cc <HAL_RCC_OscConfig+0x88>
 80019c0:	4b7c      	ldr	r3, [pc, #496]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019c6:	091b      	lsrs	r3, r3, #4
 80019c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d223      	bcs.n	8001a18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fd87 	bl	80024e8 <RCC_SetFlashLatencyFromMSIRange>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e383      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e4:	4b73      	ldr	r3, [pc, #460]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a72      	ldr	r2, [pc, #456]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019ea:	f043 0308 	orr.w	r3, r3, #8
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b70      	ldr	r3, [pc, #448]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	496d      	ldr	r1, [pc, #436]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a02:	4b6c      	ldr	r3, [pc, #432]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	4968      	ldr	r1, [pc, #416]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	604b      	str	r3, [r1, #4]
 8001a16:	e025      	b.n	8001a64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a18:	4b66      	ldr	r3, [pc, #408]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a65      	ldr	r2, [pc, #404]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b63      	ldr	r3, [pc, #396]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4960      	ldr	r1, [pc, #384]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a36:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	495b      	ldr	r1, [pc, #364]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d109      	bne.n	8001a64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fd47 	bl	80024e8 <RCC_SetFlashLatencyFromMSIRange>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e343      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a64:	f000 fc4a 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b52      	ldr	r3, [pc, #328]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	4950      	ldr	r1, [pc, #320]	@ (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a80:	4a4e      	ldr	r2, [pc, #312]	@ (8001bbc <HAL_RCC_OscConfig+0x278>)
 8001a82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a84:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc0 <HAL_RCC_OscConfig+0x27c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f953 	bl	8000d34 <HAL_InitTick>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d052      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	e327      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d032      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aa4:	4b43      	ldr	r3, [pc, #268]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a42      	ldr	r2, [pc, #264]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fbb4 	bl	800121c <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fbb0 	bl	800121c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e310      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aca:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad6:	4b37      	ldr	r3, [pc, #220]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a36      	ldr	r2, [pc, #216]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b34      	ldr	r3, [pc, #208]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4931      	ldr	r1, [pc, #196]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af4:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	492c      	ldr	r1, [pc, #176]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
 8001b08:	e01a      	b.n	8001b40 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a29      	ldr	r2, [pc, #164]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fb81 	bl	800121c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b1e:	f7ff fb7d 	bl	800121c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e2dd      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b30:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x1da>
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d074      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x21a>
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d10e      	bne.n	8001b76 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d10b      	bne.n	8001b76 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d064      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d160      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e2ba      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x24a>
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e026      	b.n	8001bdc <HAL_RCC_OscConfig+0x298>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b96:	d115      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x280>
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a05      	ldr	r2, [pc, #20]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a02      	ldr	r2, [pc, #8]	@ (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e014      	b.n	8001bdc <HAL_RCC_OscConfig+0x298>
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	080084f0 	.word	0x080084f0
 8001bbc:	20000024 	.word	0x20000024
 8001bc0:	20000028 	.word	0x20000028
 8001bc4:	4ba0      	ldr	r3, [pc, #640]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a9f      	ldr	r2, [pc, #636]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b9d      	ldr	r3, [pc, #628]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a9c      	ldr	r2, [pc, #624]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff fb1a 	bl	800121c <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fb16 	bl	800121c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	@ 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e276      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfe:	4b92      	ldr	r3, [pc, #584]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x2a8>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fb06 	bl	800121c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fb02 	bl	800121c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	@ 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e262      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c26:	4b88      	ldr	r3, [pc, #544]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2d0>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d060      	beq.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_OscConfig+0x310>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d119      	bne.n	8001c82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d116      	bne.n	8001c82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c54:	4b7c      	ldr	r3, [pc, #496]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_OscConfig+0x328>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e23f      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6c:	4b76      	ldr	r3, [pc, #472]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	061b      	lsls	r3, r3, #24
 8001c7a:	4973      	ldr	r1, [pc, #460]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c80:	e040      	b.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d023      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a6e      	ldr	r2, [pc, #440]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c96:	f7ff fac1 	bl	800121c <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fabd 	bl	800121c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e21d      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb0:	4b65      	ldr	r3, [pc, #404]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4b62      	ldr	r3, [pc, #392]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	061b      	lsls	r3, r3, #24
 8001cca:	495f      	ldr	r1, [pc, #380]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
 8001cd0:	e018      	b.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff fa9d 	bl	800121c <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fa99 	bl	800121c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e1f9      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf8:	4b53      	ldr	r3, [pc, #332]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d03c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01c      	beq.n	8001d52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d18:	4b4b      	ldr	r3, [pc, #300]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7ff fa78 	bl	800121c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7ff fa74 	bl	800121c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1d4      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d42:	4b41      	ldr	r3, [pc, #260]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0ef      	beq.n	8001d30 <HAL_RCC_OscConfig+0x3ec>
 8001d50:	e01b      	b.n	8001d8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d52:	4b3d      	ldr	r3, [pc, #244]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d58:	4a3b      	ldr	r2, [pc, #236]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff fa5b 	bl	800121c <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fa57 	bl	800121c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e1b7      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d7c:	4b32      	ldr	r3, [pc, #200]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ef      	bne.n	8001d6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80a6 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dac:	4a26      	ldr	r2, [pc, #152]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db4:	4b24      	ldr	r3, [pc, #144]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc4:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <HAL_RCC_OscConfig+0x508>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d118      	bne.n	8001e02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <HAL_RCC_OscConfig+0x508>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e4c <HAL_RCC_OscConfig+0x508>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fa1e 	bl	800121c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de4:	f7ff fa1a 	bl	800121c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e17a      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <HAL_RCC_OscConfig+0x508>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4d8>
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e10:	4a0d      	ldr	r2, [pc, #52]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e1a:	e029      	b.n	8001e70 <HAL_RCC_OscConfig+0x52c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d115      	bne.n	8001e50 <HAL_RCC_OscConfig+0x50c>
 8001e24:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e2a:	4a07      	ldr	r2, [pc, #28]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e34:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3a:	4a03      	ldr	r2, [pc, #12]	@ (8001e48 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e44:	e014      	b.n	8001e70 <HAL_RCC_OscConfig+0x52c>
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40007000 	.word	0x40007000
 8001e50:	4b9c      	ldr	r3, [pc, #624]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e56:	4a9b      	ldr	r2, [pc, #620]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e60:	4b98      	ldr	r3, [pc, #608]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e66:	4a97      	ldr	r2, [pc, #604]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d016      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e78:	f7ff f9d0 	bl	800121c <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7ff f9cc 	bl	800121c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e12a      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e96:	4b8b      	ldr	r3, [pc, #556]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ed      	beq.n	8001e80 <HAL_RCC_OscConfig+0x53c>
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7ff f9b9 	bl	800121c <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff f9b5 	bl	800121c <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e113      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec4:	4b7f      	ldr	r3, [pc, #508]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ed      	bne.n	8001eae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed2:	7ffb      	ldrb	r3, [r7, #31]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed8:	4b7a      	ldr	r3, [pc, #488]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001edc:	4a79      	ldr	r2, [pc, #484]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001ede:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80fe 	beq.w	80020ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	f040 80d0 	bne.w	8002098 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ef8:	4b72      	ldr	r3, [pc, #456]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0203 	and.w	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d130      	bne.n	8001f6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	3b01      	subs	r3, #1
 8001f18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d127      	bne.n	8001f6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f28:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d11f      	bne.n	8001f6e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f38:	2a07      	cmp	r2, #7
 8001f3a:	bf14      	ite	ne
 8001f3c:	2201      	movne	r2, #1
 8001f3e:	2200      	moveq	r2, #0
 8001f40:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d113      	bne.n	8001f6e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	3b01      	subs	r3, #1
 8001f54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d109      	bne.n	8001f6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	085b      	lsrs	r3, r3, #1
 8001f66:	3b01      	subs	r3, #1
 8001f68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d06e      	beq.n	800204c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b0c      	cmp	r3, #12
 8001f72:	d069      	beq.n	8002048 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f74:	4b53      	ldr	r3, [pc, #332]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f80:	4b50      	ldr	r3, [pc, #320]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0ad      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f90:	4b4c      	ldr	r3, [pc, #304]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a4b      	ldr	r2, [pc, #300]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f9c:	f7ff f93e 	bl	800121c <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff f93a 	bl	800121c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e09a      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb6:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc2:	4b40      	ldr	r3, [pc, #256]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	4b40      	ldr	r3, [pc, #256]	@ (80020c8 <HAL_RCC_OscConfig+0x784>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001fd2:	3a01      	subs	r2, #1
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	4311      	orrs	r1, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001fdc:	0212      	lsls	r2, r2, #8
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fe4:	0852      	lsrs	r2, r2, #1
 8001fe6:	3a01      	subs	r2, #1
 8001fe8:	0552      	lsls	r2, r2, #21
 8001fea:	4311      	orrs	r1, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ff0:	0852      	lsrs	r2, r2, #1
 8001ff2:	3a01      	subs	r2, #1
 8001ff4:	0652      	lsls	r2, r2, #25
 8001ff6:	4311      	orrs	r1, r2
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ffc:	0912      	lsrs	r2, r2, #4
 8001ffe:	0452      	lsls	r2, r2, #17
 8002000:	430a      	orrs	r2, r1
 8002002:	4930      	ldr	r1, [pc, #192]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8002004:	4313      	orrs	r3, r2
 8002006:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002008:	4b2e      	ldr	r3, [pc, #184]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2d      	ldr	r2, [pc, #180]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 800200e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002012:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002014:	4b2b      	ldr	r3, [pc, #172]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a2a      	ldr	r2, [pc, #168]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 800201a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800201e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002020:	f7ff f8fc 	bl	800121c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7ff f8f8 	bl	800121c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e058      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203a:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002046:	e050      	b.n	80020ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e04f      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d148      	bne.n	80020ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002058:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a19      	ldr	r2, [pc, #100]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 800205e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002062:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a16      	ldr	r2, [pc, #88]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 800206a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800206e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002070:	f7ff f8d4 	bl	800121c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002078:	f7ff f8d0 	bl	800121c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e030      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x734>
 8002096:	e028      	b.n	80020ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d023      	beq.n	80020e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209e:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a08      	ldr	r2, [pc, #32]	@ (80020c4 <HAL_RCC_OscConfig+0x780>)
 80020a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7ff f8b7 	bl	800121c <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b0:	e00c      	b.n	80020cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7ff f8b3 	bl	800121c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d905      	bls.n	80020cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e013      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
 80020c4:	40021000 	.word	0x40021000
 80020c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020cc:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ec      	bne.n	80020b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	4905      	ldr	r1, [pc, #20]	@ (80020f4 <HAL_RCC_OscConfig+0x7b0>)
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_RCC_OscConfig+0x7b4>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	60cb      	str	r3, [r1, #12]
 80020e4:	e001      	b.n	80020ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000
 80020f8:	feeefffc 	.word	0xfeeefffc

080020fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0e7      	b.n	80022e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002110:	4b75      	ldr	r3, [pc, #468]	@ (80022e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d910      	bls.n	8002140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b72      	ldr	r3, [pc, #456]	@ (80022e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 0207 	bic.w	r2, r3, #7
 8002126:	4970      	ldr	r1, [pc, #448]	@ (80022e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b6e      	ldr	r3, [pc, #440]	@ (80022e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0cf      	b.n	80022e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d010      	beq.n	800216e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	4b66      	ldr	r3, [pc, #408]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002158:	429a      	cmp	r2, r3
 800215a:	d908      	bls.n	800216e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215c:	4b63      	ldr	r3, [pc, #396]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4960      	ldr	r1, [pc, #384]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d04c      	beq.n	8002214 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	4b5a      	ldr	r3, [pc, #360]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d121      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e0a6      	b.n	80022e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219a:	4b54      	ldr	r3, [pc, #336]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d115      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e09a      	b.n	80022e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b2:	4b4e      	ldr	r3, [pc, #312]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e08e      	b.n	80022e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c2:	4b4a      	ldr	r3, [pc, #296]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e086      	b.n	80022e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021d2:	4b46      	ldr	r3, [pc, #280]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f023 0203 	bic.w	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4943      	ldr	r1, [pc, #268]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e4:	f7ff f81a 	bl	800121c <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	f7ff f816 	bl	800121c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e06e      	b.n	80022e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	4b3a      	ldr	r3, [pc, #232]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 020c 	and.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	429a      	cmp	r2, r3
 8002212:	d1eb      	bne.n	80021ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d010      	beq.n	8002242 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800222c:	429a      	cmp	r2, r3
 800222e:	d208      	bcs.n	8002242 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b2e      	ldr	r3, [pc, #184]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	492b      	ldr	r1, [pc, #172]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002242:	4b29      	ldr	r3, [pc, #164]	@ (80022e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d210      	bcs.n	8002272 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002250:	4b25      	ldr	r3, [pc, #148]	@ (80022e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 0207 	bic.w	r2, r3, #7
 8002258:	4923      	ldr	r1, [pc, #140]	@ (80022e8 <HAL_RCC_ClockConfig+0x1ec>)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002260:	4b21      	ldr	r3, [pc, #132]	@ (80022e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d001      	beq.n	8002272 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e036      	b.n	80022e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d008      	beq.n	8002290 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227e:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	4918      	ldr	r1, [pc, #96]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	4313      	orrs	r3, r2
 800228e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d009      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800229c:	4b13      	ldr	r3, [pc, #76]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4910      	ldr	r1, [pc, #64]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022b0:	f000 f824 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b0d      	ldr	r3, [pc, #52]	@ (80022ec <HAL_RCC_ClockConfig+0x1f0>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	490b      	ldr	r1, [pc, #44]	@ (80022f0 <HAL_RCC_ClockConfig+0x1f4>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
 80022cc:	4a09      	ldr	r2, [pc, #36]	@ (80022f4 <HAL_RCC_ClockConfig+0x1f8>)
 80022ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022d0:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <HAL_RCC_ClockConfig+0x1fc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe fd2d 	bl	8000d34 <HAL_InitTick>
 80022da:	4603      	mov	r3, r0
 80022dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80022de:	7afb      	ldrb	r3, [r7, #11]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40022000 	.word	0x40022000
 80022ec:	40021000 	.word	0x40021000
 80022f0:	080084f0 	.word	0x080084f0
 80022f4:	20000024 	.word	0x20000024
 80022f8:	20000028 	.word	0x20000028

080022fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	@ 0x24
 8002300:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800230a:	4b3e      	ldr	r3, [pc, #248]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002314:	4b3b      	ldr	r3, [pc, #236]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x34>
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b0c      	cmp	r3, #12
 8002328:	d121      	bne.n	800236e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d11e      	bne.n	800236e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002330:	4b34      	ldr	r3, [pc, #208]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800233c:	4b31      	ldr	r3, [pc, #196]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 800233e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e005      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800234c:	4b2d      	ldr	r3, [pc, #180]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002358:	4a2b      	ldr	r2, [pc, #172]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x10c>)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002360:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10d      	bne.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b04      	cmp	r3, #4
 8002372:	d102      	bne.n	800237a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002374:	4b25      	ldr	r3, [pc, #148]	@ (800240c <HAL_RCC_GetSysClockFreq+0x110>)
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	e004      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d101      	bne.n	8002384 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002380:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x114>)
 8002382:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d134      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800238a:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d003      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d003      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0xac>
 80023a0:	e005      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023a2:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <HAL_RCC_GetSysClockFreq+0x110>)
 80023a4:	617b      	str	r3, [r7, #20]
      break;
 80023a6:	e005      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x114>)
 80023aa:	617b      	str	r3, [r7, #20]
      break;
 80023ac:	e002      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	617b      	str	r3, [r7, #20]
      break;
 80023b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023b4:	4b13      	ldr	r3, [pc, #76]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	3301      	adds	r3, #1
 80023c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	fb03 f202 	mul.w	r2, r3, r2
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x108>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	0e5b      	lsrs	r3, r3, #25
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	3301      	adds	r3, #1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023f4:	69bb      	ldr	r3, [r7, #24]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	@ 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	08008508 	.word	0x08008508
 800240c:	00f42400 	.word	0x00f42400
 8002410:	007a1200 	.word	0x007a1200

08002414 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002418:	4b03      	ldr	r3, [pc, #12]	@ (8002428 <HAL_RCC_GetHCLKFreq+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000024 	.word	0x20000024

0800242c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002430:	f7ff fff0 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4904      	ldr	r1, [pc, #16]	@ (8002454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	08008500 	.word	0x08008500

08002458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800245c:	f7ff ffda 	bl	8002414 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0adb      	lsrs	r3, r3, #11
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4904      	ldr	r1, [pc, #16]	@ (8002480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	08008500 	.word	0x08008500

08002484 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	220f      	movs	r2, #15
 8002492:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002494:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80024a0:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <HAL_RCC_GetClockConfig+0x5c>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80024ac:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <HAL_RCC_GetClockConfig+0x5c>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80024b8:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_RCC_GetClockConfig+0x5c>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	08db      	lsrs	r3, r3, #3
 80024be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80024c6:	4b07      	ldr	r3, [pc, #28]	@ (80024e4 <HAL_RCC_GetClockConfig+0x60>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0207 	and.w	r2, r3, #7
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40022000 	.word	0x40022000

080024e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024f4:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002500:	f7ff f9bc 	bl	800187c <HAL_PWREx_GetVoltageRange>
 8002504:	6178      	str	r0, [r7, #20]
 8002506:	e014      	b.n	8002532 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b25      	ldr	r3, [pc, #148]	@ (80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	4a24      	ldr	r2, [pc, #144]	@ (80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002512:	6593      	str	r3, [r2, #88]	@ 0x58
 8002514:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002520:	f7ff f9ac 	bl	800187c <HAL_PWREx_GetVoltageRange>
 8002524:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002526:	4b1e      	ldr	r3, [pc, #120]	@ (80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	4a1d      	ldr	r2, [pc, #116]	@ (80025a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002530:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002538:	d10b      	bne.n	8002552 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b80      	cmp	r3, #128	@ 0x80
 800253e:	d919      	bls.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2ba0      	cmp	r3, #160	@ 0xa0
 8002544:	d902      	bls.n	800254c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002546:	2302      	movs	r3, #2
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	e013      	b.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800254c:	2301      	movs	r3, #1
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	e010      	b.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b80      	cmp	r3, #128	@ 0x80
 8002556:	d902      	bls.n	800255e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002558:	2303      	movs	r3, #3
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	e00a      	b.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b80      	cmp	r3, #128	@ 0x80
 8002562:	d102      	bne.n	800256a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002564:	2302      	movs	r3, #2
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	e004      	b.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b70      	cmp	r3, #112	@ 0x70
 800256e:	d101      	bne.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002570:	2301      	movs	r3, #1
 8002572:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002574:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 0207 	bic.w	r2, r3, #7
 800257c:	4909      	ldr	r1, [pc, #36]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002584:	4b07      	ldr	r3, [pc, #28]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40022000 	.word	0x40022000

080025a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025b0:	2300      	movs	r3, #0
 80025b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025b4:	2300      	movs	r3, #0
 80025b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d041      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025cc:	d02a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025d2:	d824      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025d8:	d008      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025de:	d81e      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e8:	d010      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025ea:	e018      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025ec:	4b86      	ldr	r3, [pc, #536]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4a85      	ldr	r2, [pc, #532]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025f8:	e015      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fabb 	bl	8002b7c <RCCEx_PLLSAI1_Config>
 8002606:	4603      	mov	r3, r0
 8002608:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800260a:	e00c      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3320      	adds	r3, #32
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fba6 	bl	8002d64 <RCCEx_PLLSAI2_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800261c:	e003      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	74fb      	strb	r3, [r7, #19]
      break;
 8002622:	e000      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800262c:	4b76      	ldr	r3, [pc, #472]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002632:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800263a:	4973      	ldr	r1, [pc, #460]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002642:	e001      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d041      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002658:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800265c:	d02a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800265e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002662:	d824      	bhi.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002664:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002668:	d008      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800266a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800266e:	d81e      	bhi.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002678:	d010      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800267a:	e018      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800267c:	4b62      	ldr	r3, [pc, #392]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a61      	ldr	r2, [pc, #388]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002686:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002688:	e015      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fa73 	bl	8002b7c <RCCEx_PLLSAI1_Config>
 8002696:	4603      	mov	r3, r0
 8002698:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800269a:	e00c      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3320      	adds	r3, #32
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fb5e 	bl	8002d64 <RCCEx_PLLSAI2_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ac:	e003      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	74fb      	strb	r3, [r7, #19]
      break;
 80026b2:	e000      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026bc:	4b52      	ldr	r3, [pc, #328]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026ca:	494f      	ldr	r1, [pc, #316]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026d2:	e001      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80a0 	beq.w	8002826 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026ea:	4b47      	ldr	r3, [pc, #284]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026fa:	2300      	movs	r3, #0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00d      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002700:	4b41      	ldr	r3, [pc, #260]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002704:	4a40      	ldr	r2, [pc, #256]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270a:	6593      	str	r3, [r2, #88]	@ 0x58
 800270c:	4b3e      	ldr	r3, [pc, #248]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002718:	2301      	movs	r3, #1
 800271a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800271c:	4b3b      	ldr	r3, [pc, #236]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a3a      	ldr	r2, [pc, #232]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002726:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002728:	f7fe fd78 	bl	800121c <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800272e:	e009      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002730:	f7fe fd74 	bl	800121c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d902      	bls.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	74fb      	strb	r3, [r7, #19]
        break;
 8002742:	e005      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002744:	4b31      	ldr	r3, [pc, #196]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0ef      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d15c      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002756:	4b2c      	ldr	r3, [pc, #176]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002760:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01f      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	429a      	cmp	r2, r3
 8002772:	d019      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800277e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002780:	4b21      	ldr	r3, [pc, #132]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	4a20      	ldr	r2, [pc, #128]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002790:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002796:	4a1c      	ldr	r2, [pc, #112]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800279c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027a0:	4a19      	ldr	r2, [pc, #100]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d016      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe fd33 	bl	800121c <HAL_GetTick>
 80027b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b8:	e00b      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7fe fd2f 	bl	800121c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d902      	bls.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	74fb      	strb	r3, [r7, #19]
            break;
 80027d0:	e006      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ec      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027e6:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027f6:	4904      	ldr	r1, [pc, #16]	@ (8002808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027fe:	e009      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	74bb      	strb	r3, [r7, #18]
 8002804:	e006      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002814:	7c7b      	ldrb	r3, [r7, #17]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281a:	4b9e      	ldr	r3, [pc, #632]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281e:	4a9d      	ldr	r2, [pc, #628]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002824:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002832:	4b98      	ldr	r3, [pc, #608]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002838:	f023 0203 	bic.w	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002840:	4994      	ldr	r1, [pc, #592]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002854:	4b8f      	ldr	r3, [pc, #572]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285a:	f023 020c 	bic.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002862:	498c      	ldr	r1, [pc, #560]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002876:	4b87      	ldr	r3, [pc, #540]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	4983      	ldr	r1, [pc, #524]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002898:	4b7e      	ldr	r3, [pc, #504]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	497b      	ldr	r1, [pc, #492]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ba:	4b76      	ldr	r3, [pc, #472]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c8:	4972      	ldr	r1, [pc, #456]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028dc:	4b6d      	ldr	r3, [pc, #436]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ea:	496a      	ldr	r1, [pc, #424]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028fe:	4b65      	ldr	r3, [pc, #404]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002904:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290c:	4961      	ldr	r1, [pc, #388]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002920:	4b5c      	ldr	r3, [pc, #368]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292e:	4959      	ldr	r1, [pc, #356]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002942:	4b54      	ldr	r3, [pc, #336]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002948:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002950:	4950      	ldr	r1, [pc, #320]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002964:	4b4b      	ldr	r3, [pc, #300]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002972:	4948      	ldr	r1, [pc, #288]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002986:	4b43      	ldr	r3, [pc, #268]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002994:	493f      	ldr	r1, [pc, #252]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d028      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029b6:	4937      	ldr	r1, [pc, #220]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029c6:	d106      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c8:	4b32      	ldr	r3, [pc, #200]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a31      	ldr	r2, [pc, #196]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029d2:	60d3      	str	r3, [r2, #12]
 80029d4:	e011      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029de:	d10c      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	2101      	movs	r1, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f8c8 	bl	8002b7c <RCCEx_PLLSAI1_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d028      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a06:	4b23      	ldr	r3, [pc, #140]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a14:	491f      	ldr	r1, [pc, #124]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a24:	d106      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a26:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a30:	60d3      	str	r3, [r2, #12]
 8002a32:	e011      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2101      	movs	r1, #1
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 f899 	bl	8002b7c <RCCEx_PLLSAI1_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a4e:	7cfb      	ldrb	r3, [r7, #19]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d02b      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a72:	4908      	ldr	r1, [pc, #32]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a82:	d109      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a84:	4b03      	ldr	r3, [pc, #12]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a02      	ldr	r2, [pc, #8]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a8e:	60d3      	str	r3, [r2, #12]
 8002a90:	e014      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f867 	bl	8002b7c <RCCEx_PLLSAI1_Config>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ab2:	7cfb      	ldrb	r3, [r7, #19]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d02f      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ace:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ad6:	4928      	ldr	r1, [pc, #160]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ae6:	d10d      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	2102      	movs	r1, #2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f844 	bl	8002b7c <RCCEx_PLLSAI1_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d014      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002afe:	7cfb      	ldrb	r3, [r7, #19]
 8002b00:	74bb      	strb	r3, [r7, #18]
 8002b02:	e011      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3320      	adds	r3, #32
 8002b12:	2102      	movs	r1, #2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f925 	bl	8002d64 <RCCEx_PLLSAI2_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b34:	4b10      	ldr	r3, [pc, #64]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b42:	490d      	ldr	r1, [pc, #52]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b56:	4b08      	ldr	r3, [pc, #32]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b66:	4904      	ldr	r1, [pc, #16]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000

08002b7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b8a:	4b75      	ldr	r3, [pc, #468]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d018      	beq.n	8002bc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b96:	4b72      	ldr	r3, [pc, #456]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d10d      	bne.n	8002bc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bae:	4b6c      	ldr	r3, [pc, #432]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d047      	beq.n	8002c52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	e044      	b.n	8002c52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d018      	beq.n	8002c02 <RCCEx_PLLSAI1_Config+0x86>
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d825      	bhi.n	8002c20 <RCCEx_PLLSAI1_Config+0xa4>
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d002      	beq.n	8002bde <RCCEx_PLLSAI1_Config+0x62>
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d009      	beq.n	8002bf0 <RCCEx_PLLSAI1_Config+0x74>
 8002bdc:	e020      	b.n	8002c20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bde:	4b60      	ldr	r3, [pc, #384]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11d      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bee:	e01a      	b.n	8002c26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bf0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d116      	bne.n	8002c2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c00:	e013      	b.n	8002c2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c02:	4b57      	ldr	r3, [pc, #348]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c0e:	4b54      	ldr	r3, [pc, #336]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c1e:	e006      	b.n	8002c2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
      break;
 8002c24:	e004      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c26:	bf00      	nop
 8002c28:	e002      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e000      	b.n	8002c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c36:	4b4a      	ldr	r3, [pc, #296]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6819      	ldr	r1, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	4944      	ldr	r1, [pc, #272]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d17d      	bne.n	8002d54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c58:	4b41      	ldr	r3, [pc, #260]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a40      	ldr	r2, [pc, #256]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c64:	f7fe fada 	bl	800121c <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c6a:	e009      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c6c:	f7fe fad6 	bl	800121c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d902      	bls.n	8002c80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c7e:	e005      	b.n	8002c8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c80:	4b37      	ldr	r3, [pc, #220]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ef      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d160      	bne.n	8002d54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d111      	bne.n	8002cbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c98:	4b31      	ldr	r3, [pc, #196]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6892      	ldr	r2, [r2, #8]
 8002ca8:	0211      	lsls	r1, r2, #8
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68d2      	ldr	r2, [r2, #12]
 8002cae:	0912      	lsrs	r2, r2, #4
 8002cb0:	0452      	lsls	r2, r2, #17
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	492a      	ldr	r1, [pc, #168]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	610b      	str	r3, [r1, #16]
 8002cba:	e027      	b.n	8002d0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d112      	bne.n	8002ce8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc2:	4b27      	ldr	r3, [pc, #156]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002cca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6892      	ldr	r2, [r2, #8]
 8002cd2:	0211      	lsls	r1, r2, #8
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6912      	ldr	r2, [r2, #16]
 8002cd8:	0852      	lsrs	r2, r2, #1
 8002cda:	3a01      	subs	r2, #1
 8002cdc:	0552      	lsls	r2, r2, #21
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	491f      	ldr	r1, [pc, #124]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	610b      	str	r3, [r1, #16]
 8002ce6:	e011      	b.n	8002d0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cf0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6892      	ldr	r2, [r2, #8]
 8002cf8:	0211      	lsls	r1, r2, #8
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6952      	ldr	r2, [r2, #20]
 8002cfe:	0852      	lsrs	r2, r2, #1
 8002d00:	3a01      	subs	r2, #1
 8002d02:	0652      	lsls	r2, r2, #25
 8002d04:	430a      	orrs	r2, r1
 8002d06:	4916      	ldr	r1, [pc, #88]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d0c:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a13      	ldr	r2, [pc, #76]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe fa80 	bl	800121c <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d1e:	e009      	b.n	8002d34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d20:	f7fe fa7c 	bl	800121c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d902      	bls.n	8002d34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	73fb      	strb	r3, [r7, #15]
          break;
 8002d32:	e005      	b.n	8002d40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d34:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0ef      	beq.n	8002d20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d106      	bne.n	8002d54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d46:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	4904      	ldr	r1, [pc, #16]	@ (8002d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000

08002d64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d72:	4b6a      	ldr	r3, [pc, #424]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d018      	beq.n	8002db0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d7e:	4b67      	ldr	r3, [pc, #412]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0203 	and.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d10d      	bne.n	8002daa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
       ||
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d96:	4b61      	ldr	r3, [pc, #388]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
       ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d047      	beq.n	8002e3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	e044      	b.n	8002e3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d018      	beq.n	8002dea <RCCEx_PLLSAI2_Config+0x86>
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d825      	bhi.n	8002e08 <RCCEx_PLLSAI2_Config+0xa4>
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d002      	beq.n	8002dc6 <RCCEx_PLLSAI2_Config+0x62>
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d009      	beq.n	8002dd8 <RCCEx_PLLSAI2_Config+0x74>
 8002dc4:	e020      	b.n	8002e08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dc6:	4b55      	ldr	r3, [pc, #340]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d11d      	bne.n	8002e0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd6:	e01a      	b.n	8002e0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dd8:	4b50      	ldr	r3, [pc, #320]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d116      	bne.n	8002e12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de8:	e013      	b.n	8002e12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dea:	4b4c      	ldr	r3, [pc, #304]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10f      	bne.n	8002e16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002df6:	4b49      	ldr	r3, [pc, #292]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e06:	e006      	b.n	8002e16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0c:	e004      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e0e:	bf00      	nop
 8002e10:	e002      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e12:	bf00      	nop
 8002e14:	e000      	b.n	8002e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10d      	bne.n	8002e3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	430b      	orrs	r3, r1
 8002e34:	4939      	ldr	r1, [pc, #228]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d167      	bne.n	8002f10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e40:	4b36      	ldr	r3, [pc, #216]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a35      	ldr	r2, [pc, #212]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e4c:	f7fe f9e6 	bl	800121c <HAL_GetTick>
 8002e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e52:	e009      	b.n	8002e68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e54:	f7fe f9e2 	bl	800121c <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d902      	bls.n	8002e68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	73fb      	strb	r3, [r7, #15]
        break;
 8002e66:	e005      	b.n	8002e74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e68:	4b2c      	ldr	r3, [pc, #176]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ef      	bne.n	8002e54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d14a      	bne.n	8002f10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d111      	bne.n	8002ea4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e80:	4b26      	ldr	r3, [pc, #152]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6892      	ldr	r2, [r2, #8]
 8002e90:	0211      	lsls	r1, r2, #8
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68d2      	ldr	r2, [r2, #12]
 8002e96:	0912      	lsrs	r2, r2, #4
 8002e98:	0452      	lsls	r2, r2, #17
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	491f      	ldr	r1, [pc, #124]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	614b      	str	r3, [r1, #20]
 8002ea2:	e011      	b.n	8002ec8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002eac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6892      	ldr	r2, [r2, #8]
 8002eb4:	0211      	lsls	r1, r2, #8
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6912      	ldr	r2, [r2, #16]
 8002eba:	0852      	lsrs	r2, r2, #1
 8002ebc:	3a01      	subs	r2, #1
 8002ebe:	0652      	lsls	r2, r2, #25
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	4916      	ldr	r1, [pc, #88]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ec8:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a13      	ldr	r2, [pc, #76]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fe f9a2 	bl	800121c <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eda:	e009      	b.n	8002ef0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002edc:	f7fe f99e 	bl	800121c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d902      	bls.n	8002ef0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	73fb      	strb	r3, [r7, #15]
          break;
 8002eee:	e005      	b.n	8002efc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ef      	beq.n	8002edc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	4904      	ldr	r1, [pc, #16]	@ (8002f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000

08002f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e049      	b.n	8002fc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f841 	bl	8002fce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f000 f9e0 	bl	8003324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d001      	beq.n	8002ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e04f      	b.n	800309c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a23      	ldr	r2, [pc, #140]	@ (80030a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d01d      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x76>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003026:	d018      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x76>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1f      	ldr	r2, [pc, #124]	@ (80030ac <HAL_TIM_Base_Start_IT+0xc8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d013      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x76>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1e      	ldr	r2, [pc, #120]	@ (80030b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00e      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x76>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1c      	ldr	r2, [pc, #112]	@ (80030b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d009      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x76>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1b      	ldr	r2, [pc, #108]	@ (80030b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_TIM_Base_Start_IT+0x76>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a19      	ldr	r2, [pc, #100]	@ (80030bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d115      	bne.n	8003086 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003062:	4013      	ands	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b06      	cmp	r3, #6
 800306a:	d015      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0xb4>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003072:	d011      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003084:	e008      	b.n	8003098 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e000      	b.n	800309a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40000400 	.word	0x40000400
 80030b0:	40000800 	.word	0x40000800
 80030b4:	40000c00 	.word	0x40000c00
 80030b8:	40013400 	.word	0x40013400
 80030bc:	40014000 	.word	0x40014000
 80030c0:	00010007 	.word	0x00010007

080030c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d020      	beq.n	8003128 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01b      	beq.n	8003128 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0202 	mvn.w	r2, #2
 80030f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f8e9 	bl	80032e6 <HAL_TIM_IC_CaptureCallback>
 8003114:	e005      	b.n	8003122 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f8db 	bl	80032d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f8ec 	bl	80032fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d020      	beq.n	8003174 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01b      	beq.n	8003174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0204 	mvn.w	r2, #4
 8003144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f8c3 	bl	80032e6 <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8b5 	bl	80032d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f8c6 	bl	80032fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d020      	beq.n	80031c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0208 	mvn.w	r2, #8
 8003190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2204      	movs	r2, #4
 8003196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f89d 	bl	80032e6 <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f88f 	bl	80032d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f8a0 	bl	80032fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d020      	beq.n	800320c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01b      	beq.n	800320c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0210 	mvn.w	r2, #16
 80031dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2208      	movs	r2, #8
 80031e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f877 	bl	80032e6 <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f869 	bl	80032d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f87a 	bl	80032fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00c      	beq.n	8003230 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0201 	mvn.w	r2, #1
 8003228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fd fd42 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003236:	2b00      	cmp	r3, #0
 8003238:	d104      	bne.n	8003244 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00c      	beq.n	800325e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f913 	bl	8003484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00c      	beq.n	8003282 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800327a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f90b 	bl	8003498 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00c      	beq.n	80032a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800329e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f834 	bl	800330e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00c      	beq.n	80032ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f06f 0220 	mvn.w	r2, #32
 80032c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f8d3 	bl	8003470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a46      	ldr	r2, [pc, #280]	@ (8003450 <TIM_Base_SetConfig+0x12c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <TIM_Base_SetConfig+0x40>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003342:	d00f      	beq.n	8003364 <TIM_Base_SetConfig+0x40>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a43      	ldr	r2, [pc, #268]	@ (8003454 <TIM_Base_SetConfig+0x130>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00b      	beq.n	8003364 <TIM_Base_SetConfig+0x40>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a42      	ldr	r2, [pc, #264]	@ (8003458 <TIM_Base_SetConfig+0x134>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d007      	beq.n	8003364 <TIM_Base_SetConfig+0x40>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a41      	ldr	r2, [pc, #260]	@ (800345c <TIM_Base_SetConfig+0x138>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <TIM_Base_SetConfig+0x40>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a40      	ldr	r2, [pc, #256]	@ (8003460 <TIM_Base_SetConfig+0x13c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d108      	bne.n	8003376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800336a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a35      	ldr	r2, [pc, #212]	@ (8003450 <TIM_Base_SetConfig+0x12c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d01f      	beq.n	80033be <TIM_Base_SetConfig+0x9a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003384:	d01b      	beq.n	80033be <TIM_Base_SetConfig+0x9a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a32      	ldr	r2, [pc, #200]	@ (8003454 <TIM_Base_SetConfig+0x130>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d017      	beq.n	80033be <TIM_Base_SetConfig+0x9a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a31      	ldr	r2, [pc, #196]	@ (8003458 <TIM_Base_SetConfig+0x134>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <TIM_Base_SetConfig+0x9a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a30      	ldr	r2, [pc, #192]	@ (800345c <TIM_Base_SetConfig+0x138>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00f      	beq.n	80033be <TIM_Base_SetConfig+0x9a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003460 <TIM_Base_SetConfig+0x13c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d00b      	beq.n	80033be <TIM_Base_SetConfig+0x9a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003464 <TIM_Base_SetConfig+0x140>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d007      	beq.n	80033be <TIM_Base_SetConfig+0x9a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003468 <TIM_Base_SetConfig+0x144>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d003      	beq.n	80033be <TIM_Base_SetConfig+0x9a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a2c      	ldr	r2, [pc, #176]	@ (800346c <TIM_Base_SetConfig+0x148>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d108      	bne.n	80033d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a16      	ldr	r2, [pc, #88]	@ (8003450 <TIM_Base_SetConfig+0x12c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00f      	beq.n	800341c <TIM_Base_SetConfig+0xf8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a18      	ldr	r2, [pc, #96]	@ (8003460 <TIM_Base_SetConfig+0x13c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00b      	beq.n	800341c <TIM_Base_SetConfig+0xf8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a17      	ldr	r2, [pc, #92]	@ (8003464 <TIM_Base_SetConfig+0x140>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d007      	beq.n	800341c <TIM_Base_SetConfig+0xf8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a16      	ldr	r2, [pc, #88]	@ (8003468 <TIM_Base_SetConfig+0x144>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d003      	beq.n	800341c <TIM_Base_SetConfig+0xf8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a15      	ldr	r2, [pc, #84]	@ (800346c <TIM_Base_SetConfig+0x148>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d103      	bne.n	8003424 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b01      	cmp	r3, #1
 8003434:	d105      	bne.n	8003442 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f023 0201 	bic.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	611a      	str	r2, [r3, #16]
  }
}
 8003442:	bf00      	nop
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40000400 	.word	0x40000400
 8003458:	40000800 	.word	0x40000800
 800345c:	40000c00 	.word	0x40000c00
 8003460:	40013400 	.word	0x40013400
 8003464:	40014000 	.word	0x40014000
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800

08003470 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e040      	b.n	8003540 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fde2 	bl	8001098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2224      	movs	r2, #36	@ 0x24
 80034d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0201 	bic.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fedc 	bl	80042b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fc21 	bl	8003d40 <UART_SetConfig>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e01b      	b.n	8003540 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 ff5b 	bl	80043f4 <UART_CheckIdleState>
 800353e:	4603      	mov	r3, r0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	@ 0x28
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800355c:	2b20      	cmp	r3, #32
 800355e:	d177      	bne.n	8003650 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_UART_Transmit+0x24>
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e070      	b.n	8003652 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2221      	movs	r2, #33	@ 0x21
 800357c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800357e:	f7fd fe4d 	bl	800121c <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	88fa      	ldrh	r2, [r7, #6]
 8003588:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800359c:	d108      	bne.n	80035b0 <HAL_UART_Transmit+0x68>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d104      	bne.n	80035b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	e003      	b.n	80035b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035b8:	e02f      	b.n	800361a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2200      	movs	r2, #0
 80035c2:	2180      	movs	r1, #128	@ 0x80
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 ffbd 	bl	8004544 <UART_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e03b      	b.n	8003652 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	881a      	ldrh	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ec:	b292      	uxth	r2, r2
 80035ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	3302      	adds	r3, #2
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	e007      	b.n	8003608 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	781a      	ldrb	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3301      	adds	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1c9      	bne.n	80035ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	2140      	movs	r1, #64	@ 0x40
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 ff87 	bl	8004544 <UART_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e005      	b.n	8003652 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	@ 0x28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003670:	2b20      	cmp	r3, #32
 8003672:	d137      	bne.n	80036e4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_UART_Receive_IT+0x24>
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e030      	b.n	80036e6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a18      	ldr	r2, [pc, #96]	@ (80036f0 <HAL_UART_Receive_IT+0x94>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d01f      	beq.n	80036d4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d018      	beq.n	80036d4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	613b      	str	r3, [r7, #16]
   return(result);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	69f9      	ldr	r1, [r7, #28]
 80036c6:	6a3a      	ldr	r2, [r7, #32]
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e6      	bne.n	80036a2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	461a      	mov	r2, r3
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 ffa0 	bl	8004620 <UART_Start_Receive_IT>
 80036e0:	4603      	mov	r3, r0
 80036e2:	e000      	b.n	80036e6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3728      	adds	r7, #40	@ 0x28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40008000 	.word	0x40008000

080036f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b0ba      	sub	sp, #232	@ 0xe8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800371a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800371e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003722:	4013      	ands	r3, r2
 8003724:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d115      	bne.n	800375c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00f      	beq.n	800375c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800373c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d009      	beq.n	800375c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 82ca 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
      }
      return;
 800375a:	e2c4      	b.n	8003ce6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800375c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8117 	beq.w	8003994 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003772:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003776:	4b85      	ldr	r3, [pc, #532]	@ (800398c <HAL_UART_IRQHandler+0x298>)
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 810a 	beq.w	8003994 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d011      	beq.n	80037b0 <HAL_UART_IRQHandler+0xbc>
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2201      	movs	r2, #1
 800379e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d011      	beq.n	80037e0 <HAL_UART_IRQHandler+0xec>
 80037bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00b      	beq.n	80037e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2202      	movs	r2, #2
 80037ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d6:	f043 0204 	orr.w	r2, r3, #4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d011      	beq.n	8003810 <HAL_UART_IRQHandler+0x11c>
 80037ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2204      	movs	r2, #4
 80037fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003806:	f043 0202 	orr.w	r2, r3, #2
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d017      	beq.n	800384c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800382c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00b      	beq.n	800384c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2208      	movs	r2, #8
 800383a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003842:	f043 0208 	orr.w	r2, r3, #8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800384c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003850:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003854:	2b00      	cmp	r3, #0
 8003856:	d012      	beq.n	800387e <HAL_UART_IRQHandler+0x18a>
 8003858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800385c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00c      	beq.n	800387e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800386c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8230 	beq.w	8003cea <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c6:	2b40      	cmp	r3, #64	@ 0x40
 80038c8:	d005      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d04f      	beq.n	8003976 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 ff68 	bl	80047ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e6:	2b40      	cmp	r3, #64	@ 0x40
 80038e8:	d141      	bne.n	800396e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3308      	adds	r3, #8
 80038f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3308      	adds	r3, #8
 8003912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003916:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800391a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800392e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1d9      	bne.n	80038ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393a:	2b00      	cmp	r3, #0
 800393c:	d013      	beq.n	8003966 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003942:	4a13      	ldr	r2, [pc, #76]	@ (8003990 <HAL_UART_IRQHandler+0x29c>)
 8003944:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd fd92 	bl	8001474 <HAL_DMA_Abort_IT>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d017      	beq.n	8003986 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003960:	4610      	mov	r0, r2
 8003962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	e00f      	b.n	8003986 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f9d4 	bl	8003d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396c:	e00b      	b.n	8003986 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f9d0 	bl	8003d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	e007      	b.n	8003986 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f9cc 	bl	8003d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003984:	e1b1      	b.n	8003cea <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003986:	bf00      	nop
    return;
 8003988:	e1af      	b.n	8003cea <HAL_UART_IRQHandler+0x5f6>
 800398a:	bf00      	nop
 800398c:	04000120 	.word	0x04000120
 8003990:	08004875 	.word	0x08004875

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003998:	2b01      	cmp	r3, #1
 800399a:	f040 816a 	bne.w	8003c72 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8163 	beq.w	8003c72 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 815c 	beq.w	8003c72 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2210      	movs	r2, #16
 80039c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039cc:	2b40      	cmp	r3, #64	@ 0x40
 80039ce:	f040 80d4 	bne.w	8003b7a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80ad 	beq.w	8003b42 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039f2:	429a      	cmp	r2, r3
 80039f4:	f080 80a5 	bcs.w	8003b42 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f040 8086 	bne.w	8003b20 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a42:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1da      	bne.n	8003a14 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3308      	adds	r3, #8
 8003a64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e1      	bne.n	8003a5e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3308      	adds	r3, #8
 8003aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003abe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ac4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003acc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e3      	bne.n	8003a9a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003af0:	f023 0310 	bic.w	r3, r3, #16
 8003af4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1e4      	bne.n	8003ae0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd fc6c 	bl	80013f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8f4 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003b40:	e0d5      	b.n	8003cee <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	f040 80ce 	bne.w	8003cee <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	f040 80c5 	bne.w	8003cee <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f8d8 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
      return;
 8003b78:	e0b9      	b.n	8003cee <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 80ab 	beq.w	8003cf2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80a6 	beq.w	8003cf2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e4      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3308      	adds	r3, #8
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	623b      	str	r3, [r7, #32]
   return(result);
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c00:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c08:	e841 2300 	strex	r3, r2, [r1]
 8003c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1e3      	bne.n	8003bdc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f023 0310 	bic.w	r3, r3, #16
 8003c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	69b9      	ldr	r1, [r7, #24]
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	617b      	str	r3, [r7, #20]
   return(result);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e4      	bne.n	8003c28 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f85c 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c70:	e03f      	b.n	8003cf2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00e      	beq.n	8003c9c <HAL_UART_IRQHandler+0x5a8>
 8003c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 ffe9 	bl	8004c6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c9a:	e02d      	b.n	8003cf8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01c      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
    }
    return;
 8003cc4:	e017      	b.n	8003cf6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d012      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x604>
 8003cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00c      	beq.n	8003cf8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fdde 	bl	80048a0 <UART_EndTransmit_IT>
    return;
 8003ce4:	e008      	b.n	8003cf8 <HAL_UART_IRQHandler+0x604>
      return;
 8003ce6:	bf00      	nop
 8003ce8:	e006      	b.n	8003cf8 <HAL_UART_IRQHandler+0x604>
    return;
 8003cea:	bf00      	nop
 8003cec:	e004      	b.n	8003cf8 <HAL_UART_IRQHandler+0x604>
      return;
 8003cee:	bf00      	nop
 8003cf0:	e002      	b.n	8003cf8 <HAL_UART_IRQHandler+0x604>
      return;
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <HAL_UART_IRQHandler+0x604>
    return;
 8003cf6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003cf8:	37e8      	adds	r7, #232	@ 0xe8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop

08003d00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d44:	b08a      	sub	sp, #40	@ 0x28
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4ba4      	ldr	r3, [pc, #656]	@ (8004000 <UART_SetConfig+0x2c0>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a99      	ldr	r2, [pc, #612]	@ (8004004 <UART_SetConfig+0x2c4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da8:	4313      	orrs	r3, r2
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a90      	ldr	r2, [pc, #576]	@ (8004008 <UART_SetConfig+0x2c8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d126      	bne.n	8003e18 <UART_SetConfig+0xd8>
 8003dca:	4b90      	ldr	r3, [pc, #576]	@ (800400c <UART_SetConfig+0x2cc>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d81b      	bhi.n	8003e10 <UART_SetConfig+0xd0>
 8003dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <UART_SetConfig+0xa0>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003df1 	.word	0x08003df1
 8003de4:	08003e01 	.word	0x08003e01
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003e09 	.word	0x08003e09
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df6:	e116      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfe:	e112      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e06:	e10e      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0e:	e10a      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e16:	e106      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a7c      	ldr	r2, [pc, #496]	@ (8004010 <UART_SetConfig+0x2d0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d138      	bne.n	8003e94 <UART_SetConfig+0x154>
 8003e22:	4b7a      	ldr	r3, [pc, #488]	@ (800400c <UART_SetConfig+0x2cc>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	d82d      	bhi.n	8003e8c <UART_SetConfig+0x14c>
 8003e30:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <UART_SetConfig+0xf8>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003e8d 	.word	0x08003e8d
 8003e40:	08003e8d 	.word	0x08003e8d
 8003e44:	08003e8d 	.word	0x08003e8d
 8003e48:	08003e7d 	.word	0x08003e7d
 8003e4c:	08003e8d 	.word	0x08003e8d
 8003e50:	08003e8d 	.word	0x08003e8d
 8003e54:	08003e8d 	.word	0x08003e8d
 8003e58:	08003e75 	.word	0x08003e75
 8003e5c:	08003e8d 	.word	0x08003e8d
 8003e60:	08003e8d 	.word	0x08003e8d
 8003e64:	08003e8d 	.word	0x08003e8d
 8003e68:	08003e85 	.word	0x08003e85
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e72:	e0d8      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003e74:	2302      	movs	r3, #2
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7a:	e0d4      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e82:	e0d0      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003e84:	2308      	movs	r3, #8
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8a:	e0cc      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003e8c:	2310      	movs	r3, #16
 8003e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e92:	e0c8      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a5e      	ldr	r2, [pc, #376]	@ (8004014 <UART_SetConfig+0x2d4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d125      	bne.n	8003eea <UART_SetConfig+0x1aa>
 8003e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800400c <UART_SetConfig+0x2cc>)
 8003ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ea8:	2b30      	cmp	r3, #48	@ 0x30
 8003eaa:	d016      	beq.n	8003eda <UART_SetConfig+0x19a>
 8003eac:	2b30      	cmp	r3, #48	@ 0x30
 8003eae:	d818      	bhi.n	8003ee2 <UART_SetConfig+0x1a2>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d00a      	beq.n	8003eca <UART_SetConfig+0x18a>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d814      	bhi.n	8003ee2 <UART_SetConfig+0x1a2>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <UART_SetConfig+0x182>
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d008      	beq.n	8003ed2 <UART_SetConfig+0x192>
 8003ec0:	e00f      	b.n	8003ee2 <UART_SetConfig+0x1a2>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec8:	e0ad      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed0:	e0a9      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed8:	e0a5      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003eda:	2308      	movs	r3, #8
 8003edc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee0:	e0a1      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003ee2:	2310      	movs	r3, #16
 8003ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee8:	e09d      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a4a      	ldr	r2, [pc, #296]	@ (8004018 <UART_SetConfig+0x2d8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d125      	bne.n	8003f40 <UART_SetConfig+0x200>
 8003ef4:	4b45      	ldr	r3, [pc, #276]	@ (800400c <UART_SetConfig+0x2cc>)
 8003ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003efa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f00:	d016      	beq.n	8003f30 <UART_SetConfig+0x1f0>
 8003f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f04:	d818      	bhi.n	8003f38 <UART_SetConfig+0x1f8>
 8003f06:	2b80      	cmp	r3, #128	@ 0x80
 8003f08:	d00a      	beq.n	8003f20 <UART_SetConfig+0x1e0>
 8003f0a:	2b80      	cmp	r3, #128	@ 0x80
 8003f0c:	d814      	bhi.n	8003f38 <UART_SetConfig+0x1f8>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <UART_SetConfig+0x1d8>
 8003f12:	2b40      	cmp	r3, #64	@ 0x40
 8003f14:	d008      	beq.n	8003f28 <UART_SetConfig+0x1e8>
 8003f16:	e00f      	b.n	8003f38 <UART_SetConfig+0x1f8>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1e:	e082      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003f20:	2302      	movs	r3, #2
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f26:	e07e      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f2e:	e07a      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003f30:	2308      	movs	r3, #8
 8003f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f36:	e076      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f3e:	e072      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a35      	ldr	r2, [pc, #212]	@ (800401c <UART_SetConfig+0x2dc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d12a      	bne.n	8003fa0 <UART_SetConfig+0x260>
 8003f4a:	4b30      	ldr	r3, [pc, #192]	@ (800400c <UART_SetConfig+0x2cc>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f58:	d01a      	beq.n	8003f90 <UART_SetConfig+0x250>
 8003f5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f5e:	d81b      	bhi.n	8003f98 <UART_SetConfig+0x258>
 8003f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f64:	d00c      	beq.n	8003f80 <UART_SetConfig+0x240>
 8003f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f6a:	d815      	bhi.n	8003f98 <UART_SetConfig+0x258>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <UART_SetConfig+0x238>
 8003f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f74:	d008      	beq.n	8003f88 <UART_SetConfig+0x248>
 8003f76:	e00f      	b.n	8003f98 <UART_SetConfig+0x258>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f7e:	e052      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003f80:	2302      	movs	r3, #2
 8003f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f86:	e04e      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f8e:	e04a      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003f90:	2308      	movs	r3, #8
 8003f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f96:	e046      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9e:	e042      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a17      	ldr	r2, [pc, #92]	@ (8004004 <UART_SetConfig+0x2c4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d13a      	bne.n	8004020 <UART_SetConfig+0x2e0>
 8003faa:	4b18      	ldr	r3, [pc, #96]	@ (800400c <UART_SetConfig+0x2cc>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fb8:	d01a      	beq.n	8003ff0 <UART_SetConfig+0x2b0>
 8003fba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fbe:	d81b      	bhi.n	8003ff8 <UART_SetConfig+0x2b8>
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fc4:	d00c      	beq.n	8003fe0 <UART_SetConfig+0x2a0>
 8003fc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fca:	d815      	bhi.n	8003ff8 <UART_SetConfig+0x2b8>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <UART_SetConfig+0x298>
 8003fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd4:	d008      	beq.n	8003fe8 <UART_SetConfig+0x2a8>
 8003fd6:	e00f      	b.n	8003ff8 <UART_SetConfig+0x2b8>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fde:	e022      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe6:	e01e      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fee:	e01a      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ff6:	e016      	b.n	8004026 <UART_SetConfig+0x2e6>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ffe:	e012      	b.n	8004026 <UART_SetConfig+0x2e6>
 8004000:	efff69f3 	.word	0xefff69f3
 8004004:	40008000 	.word	0x40008000
 8004008:	40013800 	.word	0x40013800
 800400c:	40021000 	.word	0x40021000
 8004010:	40004400 	.word	0x40004400
 8004014:	40004800 	.word	0x40004800
 8004018:	40004c00 	.word	0x40004c00
 800401c:	40005000 	.word	0x40005000
 8004020:	2310      	movs	r3, #16
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a9f      	ldr	r2, [pc, #636]	@ (80042a8 <UART_SetConfig+0x568>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d17a      	bne.n	8004126 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004030:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004034:	2b08      	cmp	r3, #8
 8004036:	d824      	bhi.n	8004082 <UART_SetConfig+0x342>
 8004038:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <UART_SetConfig+0x300>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004065 	.word	0x08004065
 8004044:	08004083 	.word	0x08004083
 8004048:	0800406d 	.word	0x0800406d
 800404c:	08004083 	.word	0x08004083
 8004050:	08004073 	.word	0x08004073
 8004054:	08004083 	.word	0x08004083
 8004058:	08004083 	.word	0x08004083
 800405c:	08004083 	.word	0x08004083
 8004060:	0800407b 	.word	0x0800407b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004064:	f7fe f9e2 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8004068:	61f8      	str	r0, [r7, #28]
        break;
 800406a:	e010      	b.n	800408e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800406c:	4b8f      	ldr	r3, [pc, #572]	@ (80042ac <UART_SetConfig+0x56c>)
 800406e:	61fb      	str	r3, [r7, #28]
        break;
 8004070:	e00d      	b.n	800408e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004072:	f7fe f943 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 8004076:	61f8      	str	r0, [r7, #28]
        break;
 8004078:	e009      	b.n	800408e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800407e:	61fb      	str	r3, [r7, #28]
        break;
 8004080:	e005      	b.n	800408e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800408c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80fb 	beq.w	800428c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d305      	bcc.n	80040b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d903      	bls.n	80040ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040b8:	e0e8      	b.n	800428c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	2200      	movs	r2, #0
 80040be:	461c      	mov	r4, r3
 80040c0:	4615      	mov	r5, r2
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	022b      	lsls	r3, r5, #8
 80040cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040d0:	0222      	lsls	r2, r4, #8
 80040d2:	68f9      	ldr	r1, [r7, #12]
 80040d4:	6849      	ldr	r1, [r1, #4]
 80040d6:	0849      	lsrs	r1, r1, #1
 80040d8:	2000      	movs	r0, #0
 80040da:	4688      	mov	r8, r1
 80040dc:	4681      	mov	r9, r0
 80040de:	eb12 0a08 	adds.w	sl, r2, r8
 80040e2:	eb43 0b09 	adc.w	fp, r3, r9
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040f4:	4650      	mov	r0, sl
 80040f6:	4659      	mov	r1, fp
 80040f8:	f7fc f8d2 	bl	80002a0 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4613      	mov	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800410a:	d308      	bcc.n	800411e <UART_SetConfig+0x3de>
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004112:	d204      	bcs.n	800411e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	e0b6      	b.n	800428c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004124:	e0b2      	b.n	800428c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800412e:	d15e      	bne.n	80041ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004130:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004134:	2b08      	cmp	r3, #8
 8004136:	d828      	bhi.n	800418a <UART_SetConfig+0x44a>
 8004138:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <UART_SetConfig+0x400>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004165 	.word	0x08004165
 8004144:	0800416d 	.word	0x0800416d
 8004148:	08004175 	.word	0x08004175
 800414c:	0800418b 	.word	0x0800418b
 8004150:	0800417b 	.word	0x0800417b
 8004154:	0800418b 	.word	0x0800418b
 8004158:	0800418b 	.word	0x0800418b
 800415c:	0800418b 	.word	0x0800418b
 8004160:	08004183 	.word	0x08004183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004164:	f7fe f962 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8004168:	61f8      	str	r0, [r7, #28]
        break;
 800416a:	e014      	b.n	8004196 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800416c:	f7fe f974 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8004170:	61f8      	str	r0, [r7, #28]
        break;
 8004172:	e010      	b.n	8004196 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004174:	4b4d      	ldr	r3, [pc, #308]	@ (80042ac <UART_SetConfig+0x56c>)
 8004176:	61fb      	str	r3, [r7, #28]
        break;
 8004178:	e00d      	b.n	8004196 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800417a:	f7fe f8bf 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 800417e:	61f8      	str	r0, [r7, #28]
        break;
 8004180:	e009      	b.n	8004196 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004186:	61fb      	str	r3, [r7, #28]
        break;
 8004188:	e005      	b.n	8004196 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d077      	beq.n	800428c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	005a      	lsls	r2, r3, #1
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	441a      	add	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b0f      	cmp	r3, #15
 80041b6:	d916      	bls.n	80041e6 <UART_SetConfig+0x4a6>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041be:	d212      	bcs.n	80041e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f023 030f 	bic.w	r3, r3, #15
 80041c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	085b      	lsrs	r3, r3, #1
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	8afb      	ldrh	r3, [r7, #22]
 80041d8:	4313      	orrs	r3, r2
 80041da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	8afa      	ldrh	r2, [r7, #22]
 80041e2:	60da      	str	r2, [r3, #12]
 80041e4:	e052      	b.n	800428c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041ec:	e04e      	b.n	800428c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d827      	bhi.n	8004246 <UART_SetConfig+0x506>
 80041f6:	a201      	add	r2, pc, #4	@ (adr r2, 80041fc <UART_SetConfig+0x4bc>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004229 	.word	0x08004229
 8004204:	08004231 	.word	0x08004231
 8004208:	08004247 	.word	0x08004247
 800420c:	08004237 	.word	0x08004237
 8004210:	08004247 	.word	0x08004247
 8004214:	08004247 	.word	0x08004247
 8004218:	08004247 	.word	0x08004247
 800421c:	0800423f 	.word	0x0800423f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004220:	f7fe f904 	bl	800242c <HAL_RCC_GetPCLK1Freq>
 8004224:	61f8      	str	r0, [r7, #28]
        break;
 8004226:	e014      	b.n	8004252 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004228:	f7fe f916 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 800422c:	61f8      	str	r0, [r7, #28]
        break;
 800422e:	e010      	b.n	8004252 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004230:	4b1e      	ldr	r3, [pc, #120]	@ (80042ac <UART_SetConfig+0x56c>)
 8004232:	61fb      	str	r3, [r7, #28]
        break;
 8004234:	e00d      	b.n	8004252 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004236:	f7fe f861 	bl	80022fc <HAL_RCC_GetSysClockFreq>
 800423a:	61f8      	str	r0, [r7, #28]
        break;
 800423c:	e009      	b.n	8004252 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800423e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004242:	61fb      	str	r3, [r7, #28]
        break;
 8004244:	e005      	b.n	8004252 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004250:	bf00      	nop
    }

    if (pclk != 0U)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d019      	beq.n	800428c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	085a      	lsrs	r2, r3, #1
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	441a      	add	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b0f      	cmp	r3, #15
 8004270:	d909      	bls.n	8004286 <UART_SetConfig+0x546>
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004278:	d205      	bcs.n	8004286 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60da      	str	r2, [r3, #12]
 8004284:	e002      	b.n	800428c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004298:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800429c:	4618      	mov	r0, r3
 800429e:	3728      	adds	r7, #40	@ 0x28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a6:	bf00      	nop
 80042a8:	40008000 	.word	0x40008000
 80042ac:	00f42400 	.word	0x00f42400

080042b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01a      	beq.n	80043c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043ae:	d10a      	bne.n	80043c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	605a      	str	r2, [r3, #4]
  }
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b098      	sub	sp, #96	@ 0x60
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004404:	f7fc ff0a 	bl	800121c <HAL_GetTick>
 8004408:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b08      	cmp	r3, #8
 8004416:	d12e      	bne.n	8004476 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004418:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004420:	2200      	movs	r2, #0
 8004422:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f88c 	bl	8004544 <UART_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d021      	beq.n	8004476 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004446:	653b      	str	r3, [r7, #80]	@ 0x50
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004450:	647b      	str	r3, [r7, #68]	@ 0x44
 8004452:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800445e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e6      	bne.n	8004432 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e062      	b.n	800453c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b04      	cmp	r3, #4
 8004482:	d149      	bne.n	8004518 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004484:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800448c:	2200      	movs	r2, #0
 800448e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f856 	bl	8004544 <UART_WaitOnFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d03c      	beq.n	8004518 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	623b      	str	r3, [r7, #32]
   return(result);
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80044be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e6      	bne.n	800449e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044f0:	61fa      	str	r2, [r7, #28]
 80044f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	69b9      	ldr	r1, [r7, #24]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	617b      	str	r3, [r7, #20]
   return(result);
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e5      	bne.n	80044d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e011      	b.n	800453c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3758      	adds	r7, #88	@ 0x58
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	4613      	mov	r3, r2
 8004552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004554:	e04f      	b.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d04b      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455e:	f7fc fe5d 	bl	800121c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	429a      	cmp	r2, r3
 800456c:	d302      	bcc.n	8004574 <UART_WaitOnFlagUntilTimeout+0x30>
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e04e      	b.n	8004616 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	2b00      	cmp	r3, #0
 8004584:	d037      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b80      	cmp	r3, #128	@ 0x80
 800458a:	d034      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b40      	cmp	r3, #64	@ 0x40
 8004590:	d031      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b08      	cmp	r3, #8
 800459e:	d110      	bne.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2208      	movs	r2, #8
 80045a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f8ff 	bl	80047ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2208      	movs	r2, #8
 80045b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e029      	b.n	8004616 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045d0:	d111      	bne.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f8e5 	bl	80047ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e00f      	b.n	8004616 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4013      	ands	r3, r2
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	429a      	cmp	r2, r3
 8004604:	bf0c      	ite	eq
 8004606:	2301      	moveq	r3, #1
 8004608:	2300      	movne	r3, #0
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	429a      	cmp	r2, r3
 8004612:	d0a0      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004620:	b480      	push	{r7}
 8004622:	b097      	sub	sp, #92	@ 0x5c
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	88fa      	ldrh	r2, [r7, #6]
 8004640:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004652:	d10e      	bne.n	8004672 <UART_Start_Receive_IT+0x52>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d105      	bne.n	8004668 <UART_Start_Receive_IT+0x48>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004662:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004666:	e02d      	b.n	80046c4 <UART_Start_Receive_IT+0xa4>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	22ff      	movs	r2, #255	@ 0xff
 800466c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004670:	e028      	b.n	80046c4 <UART_Start_Receive_IT+0xa4>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10d      	bne.n	8004696 <UART_Start_Receive_IT+0x76>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d104      	bne.n	800468c <UART_Start_Receive_IT+0x6c>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	22ff      	movs	r2, #255	@ 0xff
 8004686:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800468a:	e01b      	b.n	80046c4 <UART_Start_Receive_IT+0xa4>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	227f      	movs	r2, #127	@ 0x7f
 8004690:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004694:	e016      	b.n	80046c4 <UART_Start_Receive_IT+0xa4>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800469e:	d10d      	bne.n	80046bc <UART_Start_Receive_IT+0x9c>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d104      	bne.n	80046b2 <UART_Start_Receive_IT+0x92>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	227f      	movs	r2, #127	@ 0x7f
 80046ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80046b0:	e008      	b.n	80046c4 <UART_Start_Receive_IT+0xa4>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	223f      	movs	r2, #63	@ 0x3f
 80046b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80046ba:	e003      	b.n	80046c4 <UART_Start_Receive_IT+0xa4>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2222      	movs	r2, #34	@ 0x22
 80046d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3308      	adds	r3, #8
 80046da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046de:	e853 3f00 	ldrex	r3, [r3]
 80046e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3308      	adds	r3, #8
 80046f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046f4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80046f6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046fc:	e841 2300 	strex	r3, r2, [r1]
 8004700:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1e5      	bne.n	80046d4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004710:	d107      	bne.n	8004722 <UART_Start_Receive_IT+0x102>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d103      	bne.n	8004722 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4a21      	ldr	r2, [pc, #132]	@ (80047a4 <UART_Start_Receive_IT+0x184>)
 800471e:	669a      	str	r2, [r3, #104]	@ 0x68
 8004720:	e002      	b.n	8004728 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a20      	ldr	r2, [pc, #128]	@ (80047a8 <UART_Start_Receive_IT+0x188>)
 8004726:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d019      	beq.n	8004764 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800474e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004750:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800475c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e6      	bne.n	8004730 <UART_Start_Receive_IT+0x110>
 8004762:	e018      	b.n	8004796 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	613b      	str	r3, [r7, #16]
   return(result);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f043 0320 	orr.w	r3, r3, #32
 8004778:	653b      	str	r3, [r7, #80]	@ 0x50
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004782:	623b      	str	r3, [r7, #32]
 8004784:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	69f9      	ldr	r1, [r7, #28]
 8004788:	6a3a      	ldr	r2, [r7, #32]
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e6      	bne.n	8004764 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	375c      	adds	r7, #92	@ 0x5c
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	08004ab1 	.word	0x08004ab1
 80047a8:	080048f5 	.word	0x080048f5

080047ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b095      	sub	sp, #84	@ 0x54
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80047d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e6      	bne.n	80047b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3308      	adds	r3, #8
 8004804:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004806:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004808:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800480c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e5      	bne.n	80047e6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481e:	2b01      	cmp	r3, #1
 8004820:	d118      	bne.n	8004854 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f023 0310 	bic.w	r3, r3, #16
 8004836:	647b      	str	r3, [r7, #68]	@ 0x44
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6979      	ldr	r1, [r7, #20]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	613b      	str	r3, [r7, #16]
   return(result);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e6      	bne.n	8004822 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004868:	bf00      	nop
 800486a:	3754      	adds	r7, #84	@ 0x54
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004880:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff fa3e 	bl	8003d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048bc:	61fb      	str	r3, [r7, #28]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	61bb      	str	r3, [r7, #24]
 80048c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6979      	ldr	r1, [r7, #20]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	613b      	str	r3, [r7, #16]
   return(result);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e6      	bne.n	80048a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff fa0a 	bl	8003d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ec:	bf00      	nop
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b09c      	sub	sp, #112	@ 0x70
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004902:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800490c:	2b22      	cmp	r3, #34	@ 0x22
 800490e:	f040 80be 	bne.w	8004a8e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004918:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800491c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004920:	b2d9      	uxtb	r1, r3
 8004922:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004926:	b2da      	uxtb	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492c:	400a      	ands	r2, r1
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	f040 80a3 	bne.w	8004aa2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800496a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800496c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004970:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800497a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800497c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004980:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004982:	e841 2300 	strex	r3, r2, [r1]
 8004986:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1e6      	bne.n	800495c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800499e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3308      	adds	r3, #8
 80049ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80049ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80049b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e5      	bne.n	800498e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a34      	ldr	r2, [pc, #208]	@ (8004aac <UART_RxISR_8BIT+0x1b8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d01f      	beq.n	8004a20 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d018      	beq.n	8004a20 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	623b      	str	r3, [r7, #32]
   return(result);
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a02:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e6      	bne.n	80049ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d12e      	bne.n	8004a86 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0310 	bic.w	r3, r3, #16
 8004a42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	69b9      	ldr	r1, [r7, #24]
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	617b      	str	r3, [r7, #20]
   return(result);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e6      	bne.n	8004a2e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f003 0310 	and.w	r3, r3, #16
 8004a6a:	2b10      	cmp	r3, #16
 8004a6c:	d103      	bne.n	8004a76 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2210      	movs	r2, #16
 8004a74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff f952 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a84:	e00d      	b.n	8004aa2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fb ff1c 	bl	80008c4 <HAL_UART_RxCpltCallback>
}
 8004a8c:	e009      	b.n	8004aa2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	8b1b      	ldrh	r3, [r3, #24]
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0208 	orr.w	r2, r2, #8
 8004a9e:	b292      	uxth	r2, r2
 8004aa0:	831a      	strh	r2, [r3, #24]
}
 8004aa2:	bf00      	nop
 8004aa4:	3770      	adds	r7, #112	@ 0x70
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40008000 	.word	0x40008000

08004ab0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b09c      	sub	sp, #112	@ 0x70
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004abe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ac8:	2b22      	cmp	r3, #34	@ 0x22
 8004aca:	f040 80be 	bne.w	8004c4a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004ad4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004adc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004ade:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004ae2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004aec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af2:	1c9a      	adds	r2, r3, #2
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f040 80a3 	bne.w	8004c5e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b36:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b38:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e6      	bne.n	8004b18 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004b6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e5      	bne.n	8004b4a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a34      	ldr	r2, [pc, #208]	@ (8004c68 <UART_RxISR_16BIT+0x1b8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d01f      	beq.n	8004bdc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d018      	beq.n	8004bdc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e6      	bne.n	8004baa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d12e      	bne.n	8004c42 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f023 0310 	bic.w	r3, r3, #16
 8004bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6979      	ldr	r1, [r7, #20]
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	613b      	str	r3, [r7, #16]
   return(result);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e6      	bne.n	8004bea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d103      	bne.n	8004c32 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2210      	movs	r2, #16
 8004c30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff f874 	bl	8003d28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c40:	e00d      	b.n	8004c5e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7fb fe3e 	bl	80008c4 <HAL_UART_RxCpltCallback>
}
 8004c48:	e009      	b.n	8004c5e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	8b1b      	ldrh	r3, [r3, #24]
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0208 	orr.w	r2, r2, #8
 8004c5a:	b292      	uxth	r2, r2
 8004c5c:	831a      	strh	r2, [r3, #24]
}
 8004c5e:	bf00      	nop
 8004c60:	3770      	adds	r7, #112	@ 0x70
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40008000 	.word	0x40008000

08004c6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c92:	2b84      	cmp	r3, #132	@ 0x84
 8004c94:	d005      	beq.n	8004ca2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	3303      	adds	r3, #3
 8004ca0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004cb4:	f000 fe4e 	bl	8005954 <vTaskStartScheduler>
  
  return osOK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc0:	b089      	sub	sp, #36	@ 0x24
 8004cc2:	af04      	add	r7, sp, #16
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d020      	beq.n	8004d12 <osThreadCreate+0x54>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01c      	beq.n	8004d12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685c      	ldr	r4, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691e      	ldr	r6, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff ffc8 	bl	8004c80 <makeFreeRtosPriority>
 8004cf0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cfa:	9202      	str	r2, [sp, #8]
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	9100      	str	r1, [sp, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	4632      	mov	r2, r6
 8004d04:	4629      	mov	r1, r5
 8004d06:	4620      	mov	r0, r4
 8004d08:	f000 fc3f 	bl	800558a <xTaskCreateStatic>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	e01c      	b.n	8004d4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685c      	ldr	r4, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d1e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff ffaa 	bl	8004c80 <makeFreeRtosPriority>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	f107 030c 	add.w	r3, r7, #12
 8004d32:	9301      	str	r3, [sp, #4]
 8004d34:	9200      	str	r2, [sp, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	4632      	mov	r2, r6
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	f000 fc84 	bl	800564a <xTaskCreate>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d001      	beq.n	8004d4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e000      	b.n	8004d4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <osDelay+0x16>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	e000      	b.n	8004d6e <osDelay+0x18>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fdba 	bl	80058e8 <vTaskDelay>
  
  return osOK;
 8004d74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f103 0208 	add.w	r2, r3, #8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f04f 32ff 	mov.w	r2, #4294967295
 8004d96:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f103 0208 	add.w	r2, r3, #8
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f103 0208 	add.w	r2, r3, #8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d103      	bne.n	8004e40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	e00c      	b.n	8004e5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3308      	adds	r3, #8
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	e002      	b.n	8004e4e <vListInsert+0x2e>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d2f6      	bcs.n	8004e48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	601a      	str	r2, [r3, #0]
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e92:	b480      	push	{r7}
 8004e94:	b085      	sub	sp, #20
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6892      	ldr	r2, [r2, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6852      	ldr	r2, [r2, #4]
 8004eb2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d103      	bne.n	8004ec6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	1e5a      	subs	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b08c      	sub	sp, #48	@ 0x30
 8004eea:	af02      	add	r7, sp, #8
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d111      	bne.n	8004f1c <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d81d      	bhi.n	8004f40 <xStreamBufferGenericCreate+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	61bb      	str	r3, [r7, #24]
}
 8004f3a:	bf00      	nop
 8004f3c:	bf00      	nop
 8004f3e:	e7fd      	b.n	8004f3c <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d90b      	bls.n	8004f60 <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	617b      	str	r3, [r7, #20]
}
 8004f5a:	bf00      	nop
 8004f5c:	bf00      	nop
 8004f5e:	e7fd      	b.n	8004f5c <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8004f66:	2301      	movs	r3, #1
 8004f68:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3320      	adds	r3, #32
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 fcf1 	bl	800695c <pvPortMalloc>
 8004f7a:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	f103 0120 	add.w	r1, r3, #32
 8004f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	6a38      	ldr	r0, [r7, #32]
 8004f94:	f000 fac5 	bl	8005522 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8004f98:	6a3b      	ldr	r3, [r7, #32]
	}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3728      	adds	r7, #40	@ 0x28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b087      	sub	sp, #28
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10b      	bne.n	8004fcc <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	60fb      	str	r3, [r7, #12]
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	e7fd      	b.n	8004fc8 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d304      	bcc.n	8004ffc <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8004ffc:	697b      	ldr	r3, [r7, #20]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b090      	sub	sp, #64	@ 0x40
 800500e:	af02      	add	r7, sp, #8
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10b      	bne.n	800503e <xStreamBufferSendFromISR+0x34>
	__asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	623b      	str	r3, [r7, #32]
}
 8005038:	bf00      	nop
 800503a:	bf00      	nop
 800503c:	e7fd      	b.n	800503a <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <xStreamBufferSendFromISR+0x52>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	61fb      	str	r3, [r7, #28]
}
 8005056:	bf00      	nop
 8005058:	bf00      	nop
 800505a:	e7fd      	b.n	8005058 <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800505c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505e:	7f1b      	ldrb	r3, [r3, #28]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8005068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506a:	3304      	adds	r3, #4
 800506c:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800506e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005070:	f7ff ff97 	bl	8004fa2 <xStreamBufferSpacesAvailable>
 8005074:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8005076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005082:	f000 f835 	bl	80050f0 <prvWriteMessageToBuffer>
 8005086:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8005088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508a:	2b00      	cmp	r3, #0
 800508c:	d02b      	beq.n	80050e6 <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800508e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005090:	f000 fa27 	bl	80054e2 <prvBytesInBuffer>
 8005094:	4602      	mov	r2, r0
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	429a      	cmp	r2, r3
 800509c:	d323      	bcc.n	80050e6 <xStreamBufferSendFromISR+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800509e:	f3ef 8211 	mrs	r2, BASEPRI
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	61ba      	str	r2, [r7, #24]
 80050b4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80050b6:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <xStreamBufferSendFromISR+0xd0>
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	6918      	ldr	r0, [r3, #16]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	2300      	movs	r3, #0
 80050cc:	2200      	movs	r2, #0
 80050ce:	2100      	movs	r1, #0
 80050d0:	f001 f882 	bl	80061d8 <xTaskGenericNotifyFromISR>
 80050d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d6:	2200      	movs	r2, #0
 80050d8:	611a      	str	r2, [r3, #16]
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050e4:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80050e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3738      	adds	r7, #56	@ 0x38
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e01d      	b.n	8005146 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	7f1b      	ldrb	r3, [r3, #28]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d108      	bne.n	8005128 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8005116:	2301      	movs	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	4293      	cmp	r3, r2
 8005120:	bf28      	it	cs
 8005122:	4613      	movcs	r3, r2
 8005124:	607b      	str	r3, [r7, #4]
 8005126:	e00e      	b.n	8005146 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	429a      	cmp	r2, r3
 800512e:	d308      	bcc.n	8005142 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8005130:	2301      	movs	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8005134:	1d3b      	adds	r3, r7, #4
 8005136:	2204      	movs	r2, #4
 8005138:	4619      	mov	r1, r3
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f8df 	bl	80052fe <prvWriteBytesToBuffer>
 8005140:	e001      	b.n	8005146 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	461a      	mov	r2, r3
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f8d3 	bl	80052fe <prvWriteBytesToBuffer>
 8005158:	6138      	str	r0, [r7, #16]
 800515a:	e001      	b.n	8005160 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8005160:	693b      	ldr	r3, [r7, #16]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b08e      	sub	sp, #56	@ 0x38
 800516e:	af02      	add	r7, sp, #8
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
 8005176:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800517c:	2300      	movs	r3, #0
 800517e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10b      	bne.n	800519e <xStreamBufferReceive+0x34>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	61fb      	str	r3, [r7, #28]
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	e7fd      	b.n	800519a <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <xStreamBufferReceive+0x52>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	61bb      	str	r3, [r7, #24]
}
 80051b6:	bf00      	nop
 80051b8:	bf00      	nop
 80051ba:	e7fd      	b.n	80051b8 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	7f1b      	ldrb	r3, [r3, #28]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80051c8:	2304      	movs	r3, #4
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80051cc:	e001      	b.n	80051d2 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d035      	beq.n	8005244 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80051d8:	f001 fa9e 	bl	8006718 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80051dc:	6a38      	ldr	r0, [r7, #32]
 80051de:	f000 f980 	bl	80054e2 <prvBytesInBuffer>
 80051e2:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80051e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d817      	bhi.n	800521c <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80051ec:	2000      	movs	r0, #0
 80051ee:	f001 f8d9 	bl	80063a4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00b      	beq.n	8005212 <xStreamBufferReceive+0xa8>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	617b      	str	r3, [r7, #20]
}
 800520c:	bf00      	nop
 800520e:	bf00      	nop
 8005210:	e7fd      	b.n	800520e <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8005212:	f000 feaf 	bl	8005f74 <xTaskGetCurrentTaskHandle>
 8005216:	4602      	mov	r2, r0
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800521c:	f001 faae 	bl	800677c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8005220:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	429a      	cmp	r2, r3
 8005226:	d811      	bhi.n	800524c <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	2100      	movs	r1, #0
 800522e:	2000      	movs	r0, #0
 8005230:	f000 feb0 	bl	8005f94 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	2200      	movs	r2, #0
 8005238:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800523a:	6a38      	ldr	r0, [r7, #32]
 800523c:	f000 f951 	bl	80054e2 <prvBytesInBuffer>
 8005240:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005242:	e003      	b.n	800524c <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8005244:	6a38      	ldr	r0, [r7, #32]
 8005246:	f000 f94c 	bl	80054e2 <prvBytesInBuffer>
 800524a:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800524c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	429a      	cmp	r2, r3
 8005252:	d91d      	bls.n	8005290 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	6a38      	ldr	r0, [r7, #32]
 8005260:	f000 f81b 	bl	800529a <prvReadMessageFromBuffer>
 8005264:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8005266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d011      	beq.n	8005290 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800526c:	f000 fbdc 	bl	8005a28 <vTaskSuspendAll>
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d009      	beq.n	800528c <xStreamBufferReceive+0x122>
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	6958      	ldr	r0, [r3, #20]
 800527c:	2300      	movs	r3, #0
 800527e:	2200      	movs	r2, #0
 8005280:	2100      	movs	r1, #0
 8005282:	f000 fee7 	bl	8006054 <xTaskGenericNotify>
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	2200      	movs	r2, #0
 800528a:	615a      	str	r2, [r3, #20]
 800528c:	f000 fbda 	bl	8005a44 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8005290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005292:	4618      	mov	r0, r3
 8005294:	3730      	adds	r7, #48	@ 0x30
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b088      	sub	sp, #32
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80052a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d019      	beq.n	80052e2 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80052b4:	f107 0110 	add.w	r1, r7, #16
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f893 	bl	80053e8 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d907      	bls.n	80052e6 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	61fb      	str	r3, [r7, #28]
 80052e0:	e001      	b.n	80052e6 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f87b 	bl	80053e8 <prvReadBytesFromBuffer>
 80052f2:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80052f4:	697b      	ldr	r3, [r7, #20]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b08a      	sub	sp, #40	@ 0x28
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10b      	bne.n	8005328 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8005310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	61fb      	str	r3, [r7, #28]
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	e7fd      	b.n	8005324 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4293      	cmp	r3, r2
 800533a:	bf28      	it	cs
 800533c:	4613      	movcs	r3, r2
 800533e:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8005340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	441a      	add	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	429a      	cmp	r2, r3
 800534c:	d90b      	bls.n	8005366 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	61bb      	str	r3, [r7, #24]
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	4413      	add	r3, r2
 800536e:	6a3a      	ldr	r2, [r7, #32]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	4618      	mov	r0, r3
 8005374:	f001 ffc5 	bl	8007302 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	429a      	cmp	r2, r3
 800537e:	d91d      	bls.n	80053bc <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	1ad2      	subs	r2, r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	429a      	cmp	r2, r3
 800538c:	d90b      	bls.n	80053a6 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	617b      	str	r3, [r7, #20]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6998      	ldr	r0, [r3, #24]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	18d1      	adds	r1, r2, r3
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	f001 ffa3 	bl	8007302 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80053bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4413      	add	r3, r2
 80053c2:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d304      	bcc.n	80053d8 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053dc:	605a      	str	r2, [r3, #4]

	return xCount;
 80053de:	687b      	ldr	r3, [r7, #4]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3728      	adds	r7, #40	@ 0x28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	@ 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	4293      	cmp	r3, r2
 80053fc:	bf28      	it	cs
 80053fe:	4613      	movcs	r3, r2
 8005400:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d067      	beq.n	80054d8 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	6a3a      	ldr	r2, [r7, #32]
 8005418:	4293      	cmp	r3, r2
 800541a:	bf28      	it	cs
 800541c:	4613      	movcs	r3, r2
 800541e:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	429a      	cmp	r2, r3
 8005426:	d90b      	bls.n	8005440 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	61bb      	str	r3, [r7, #24]
}
 800543a:	bf00      	nop
 800543c:	bf00      	nop
 800543e:	e7fd      	b.n	800543c <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8005440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	441a      	add	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	429a      	cmp	r2, r3
 800544c:	d90b      	bls.n	8005466 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	617b      	str	r3, [r7, #20]
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	e7fd      	b.n	8005462 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	4413      	add	r3, r2
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	4619      	mov	r1, r3
 8005472:	68b8      	ldr	r0, [r7, #8]
 8005474:	f001 ff45 	bl	8007302 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8005478:	6a3a      	ldr	r2, [r7, #32]
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	429a      	cmp	r2, r3
 800547e:	d91a      	bls.n	80054b6 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8005480:	6a3a      	ldr	r2, [r7, #32]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d90b      	bls.n	80054a0 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	613b      	str	r3, [r7, #16]
}
 800549a:	bf00      	nop
 800549c:	bf00      	nop
 800549e:	e7fd      	b.n	800549c <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	18d0      	adds	r0, r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6999      	ldr	r1, [r3, #24]
 80054aa:	6a3a      	ldr	r2, [r7, #32]
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	f001 ff26 	bl	8007302 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80054b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	4413      	add	r3, r2
 80054bc:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d304      	bcc.n	80054d2 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d6:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80054d8:	6a3b      	ldr	r3, [r7, #32]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3728      	adds	r7, #40	@ 0x28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	4413      	add	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	429a      	cmp	r2, r3
 8005508:	d304      	bcc.n	8005514 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8005514:	68fb      	ldr	r3, [r7, #12]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b086      	sub	sp, #24
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8005530:	2355      	movs	r3, #85	@ 0x55
 8005532:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6979      	ldr	r1, [r7, #20]
 8005538:	68b8      	ldr	r0, [r7, #8]
 800553a:	f001 fdac 	bl	8007096 <memset>
 800553e:	4602      	mov	r2, r0
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4293      	cmp	r3, r2
 8005544:	d00b      	beq.n	800555e <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	613b      	str	r3, [r7, #16]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800555e:	2220      	movs	r2, #32
 8005560:	2100      	movs	r1, #0
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f001 fd97 	bl	8007096 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005580:	771a      	strb	r2, [r3, #28]
}
 8005582:	bf00      	nop
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800558a:	b580      	push	{r7, lr}
 800558c:	b08e      	sub	sp, #56	@ 0x38
 800558e:	af04      	add	r7, sp, #16
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
 8005596:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10b      	bne.n	80055b6 <xTaskCreateStatic+0x2c>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	623b      	str	r3, [r7, #32]
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	e7fd      	b.n	80055b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	61fb      	str	r3, [r7, #28]
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	e7fd      	b.n	80055d0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055d4:	23a0      	movs	r3, #160	@ 0xa0
 80055d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2ba0      	cmp	r3, #160	@ 0xa0
 80055dc:	d00b      	beq.n	80055f6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	61bb      	str	r3, [r7, #24]
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	e7fd      	b.n	80055f2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80055f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d01e      	beq.n	800563c <xTaskCreateStatic+0xb2>
 80055fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01b      	beq.n	800563c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005606:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800560c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	2202      	movs	r2, #2
 8005612:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005616:	2300      	movs	r3, #0
 8005618:	9303      	str	r3, [sp, #12]
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	9302      	str	r3, [sp, #8]
 800561e:	f107 0314 	add.w	r3, r7, #20
 8005622:	9301      	str	r3, [sp, #4]
 8005624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f850 	bl	80056d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005634:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005636:	f000 f8ed 	bl	8005814 <prvAddNewTaskToReadyList>
 800563a:	e001      	b.n	8005640 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005640:	697b      	ldr	r3, [r7, #20]
	}
 8005642:	4618      	mov	r0, r3
 8005644:	3728      	adds	r7, #40	@ 0x28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800564a:	b580      	push	{r7, lr}
 800564c:	b08c      	sub	sp, #48	@ 0x30
 800564e:	af04      	add	r7, sp, #16
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	4613      	mov	r3, r2
 8005658:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800565a:	88fb      	ldrh	r3, [r7, #6]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4618      	mov	r0, r3
 8005660:	f001 f97c 	bl	800695c <pvPortMalloc>
 8005664:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00e      	beq.n	800568a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800566c:	20a0      	movs	r0, #160	@ 0xa0
 800566e:	f001 f975 	bl	800695c <pvPortMalloc>
 8005672:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005680:	e005      	b.n	800568e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005682:	6978      	ldr	r0, [r7, #20]
 8005684:	f001 fa38 	bl	8006af8 <vPortFree>
 8005688:	e001      	b.n	800568e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d017      	beq.n	80056c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800569c:	88fa      	ldrh	r2, [r7, #6]
 800569e:	2300      	movs	r3, #0
 80056a0:	9303      	str	r3, [sp, #12]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	9302      	str	r3, [sp, #8]
 80056a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f80e 	bl	80056d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056b8:	69f8      	ldr	r0, [r7, #28]
 80056ba:	f000 f8ab 	bl	8005814 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056be:	2301      	movs	r3, #1
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	e002      	b.n	80056ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056c4:	f04f 33ff 	mov.w	r3, #4294967295
 80056c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056ca:	69bb      	ldr	r3, [r7, #24]
	}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3720      	adds	r7, #32
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056ec:	3b01      	subs	r3, #1
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f023 0307 	bic.w	r3, r3, #7
 80056fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	617b      	str	r3, [r7, #20]
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	e7fd      	b.n	800571a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01f      	beq.n	8005764 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005724:	2300      	movs	r3, #0
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	e012      	b.n	8005750 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4413      	add	r3, r2
 8005730:	7819      	ldrb	r1, [r3, #0]
 8005732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	3334      	adds	r3, #52	@ 0x34
 800573a:	460a      	mov	r2, r1
 800573c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d006      	beq.n	8005758 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	3301      	adds	r3, #1
 800574e:	61fb      	str	r3, [r7, #28]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b0f      	cmp	r3, #15
 8005754:	d9e9      	bls.n	800572a <prvInitialiseNewTask+0x56>
 8005756:	e000      	b.n	800575a <prvInitialiseNewTask+0x86>
			{
				break;
 8005758:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800575a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005762:	e003      	b.n	800576c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	2b06      	cmp	r3, #6
 8005770:	d901      	bls.n	8005776 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005772:	2306      	movs	r3, #6
 8005774:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800577a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800577c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005780:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005784:	2200      	movs	r2, #0
 8005786:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578a:	3304      	adds	r3, #4
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fb16 	bl	8004dbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005794:	3318      	adds	r3, #24
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff fb11 	bl	8004dbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	f1c3 0207 	rsb	r2, r3, #7
 80057a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	334c      	adds	r3, #76	@ 0x4c
 80057c6:	224c      	movs	r2, #76	@ 0x4c
 80057c8:	2100      	movs	r1, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	f001 fc63 	bl	8007096 <memset>
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005808 <prvInitialiseNewTask+0x134>)
 80057d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80057d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d8:	4a0c      	ldr	r2, [pc, #48]	@ (800580c <prvInitialiseNewTask+0x138>)
 80057da:	655a      	str	r2, [r3, #84]	@ 0x54
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	4a0c      	ldr	r2, [pc, #48]	@ (8005810 <prvInitialiseNewTask+0x13c>)
 80057e0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	68f9      	ldr	r1, [r7, #12]
 80057e6:	69b8      	ldr	r0, [r7, #24]
 80057e8:	f000 fe68 	bl	80064bc <pxPortInitialiseStack>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80057f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057fe:	bf00      	nop
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20005548 	.word	0x20005548
 800580c:	200055b0 	.word	0x200055b0
 8005810:	20005618 	.word	0x20005618

08005814 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800581c:	f000 ff7c 	bl	8006718 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005820:	4b2a      	ldr	r3, [pc, #168]	@ (80058cc <prvAddNewTaskToReadyList+0xb8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3301      	adds	r3, #1
 8005826:	4a29      	ldr	r2, [pc, #164]	@ (80058cc <prvAddNewTaskToReadyList+0xb8>)
 8005828:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800582a:	4b29      	ldr	r3, [pc, #164]	@ (80058d0 <prvAddNewTaskToReadyList+0xbc>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005832:	4a27      	ldr	r2, [pc, #156]	@ (80058d0 <prvAddNewTaskToReadyList+0xbc>)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005838:	4b24      	ldr	r3, [pc, #144]	@ (80058cc <prvAddNewTaskToReadyList+0xb8>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d110      	bne.n	8005862 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005840:	f000 fad4 	bl	8005dec <prvInitialiseTaskLists>
 8005844:	e00d      	b.n	8005862 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005846:	4b23      	ldr	r3, [pc, #140]	@ (80058d4 <prvAddNewTaskToReadyList+0xc0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800584e:	4b20      	ldr	r3, [pc, #128]	@ (80058d0 <prvAddNewTaskToReadyList+0xbc>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	429a      	cmp	r2, r3
 800585a:	d802      	bhi.n	8005862 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800585c:	4a1c      	ldr	r2, [pc, #112]	@ (80058d0 <prvAddNewTaskToReadyList+0xbc>)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005862:	4b1d      	ldr	r3, [pc, #116]	@ (80058d8 <prvAddNewTaskToReadyList+0xc4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3301      	adds	r3, #1
 8005868:	4a1b      	ldr	r2, [pc, #108]	@ (80058d8 <prvAddNewTaskToReadyList+0xc4>)
 800586a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	2201      	movs	r2, #1
 8005872:	409a      	lsls	r2, r3
 8005874:	4b19      	ldr	r3, [pc, #100]	@ (80058dc <prvAddNewTaskToReadyList+0xc8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4313      	orrs	r3, r2
 800587a:	4a18      	ldr	r2, [pc, #96]	@ (80058dc <prvAddNewTaskToReadyList+0xc8>)
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4a15      	ldr	r2, [pc, #84]	@ (80058e0 <prvAddNewTaskToReadyList+0xcc>)
 800588c:	441a      	add	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	4619      	mov	r1, r3
 8005894:	4610      	mov	r0, r2
 8005896:	f7ff fa9f 	bl	8004dd8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800589a:	f000 ff6f 	bl	800677c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800589e:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <prvAddNewTaskToReadyList+0xc0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00e      	beq.n	80058c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058a6:	4b0a      	ldr	r3, [pc, #40]	@ (80058d0 <prvAddNewTaskToReadyList+0xbc>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d207      	bcs.n	80058c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058b4:	4b0b      	ldr	r3, [pc, #44]	@ (80058e4 <prvAddNewTaskToReadyList+0xd0>)
 80058b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058c4:	bf00      	nop
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	200006d4 	.word	0x200006d4
 80058d0:	200005d4 	.word	0x200005d4
 80058d4:	200006e0 	.word	0x200006e0
 80058d8:	200006f0 	.word	0x200006f0
 80058dc:	200006dc 	.word	0x200006dc
 80058e0:	200005d8 	.word	0x200005d8
 80058e4:	e000ed04 	.word	0xe000ed04

080058e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d018      	beq.n	800592c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80058fa:	4b14      	ldr	r3, [pc, #80]	@ (800594c <vTaskDelay+0x64>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <vTaskDelay+0x32>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	60bb      	str	r3, [r7, #8]
}
 8005914:	bf00      	nop
 8005916:	bf00      	nop
 8005918:	e7fd      	b.n	8005916 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800591a:	f000 f885 	bl	8005a28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800591e:	2100      	movs	r1, #0
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fd65 	bl	80063f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005926:	f000 f88d 	bl	8005a44 <xTaskResumeAll>
 800592a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d107      	bne.n	8005942 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005932:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <vTaskDelay+0x68>)
 8005934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200006fc 	.word	0x200006fc
 8005950:	e000ed04 	.word	0xe000ed04

08005954 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08a      	sub	sp, #40	@ 0x28
 8005958:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005962:	463a      	mov	r2, r7
 8005964:	1d39      	adds	r1, r7, #4
 8005966:	f107 0308 	add.w	r3, r7, #8
 800596a:	4618      	mov	r0, r3
 800596c:	f7fa fe2e 	bl	80005cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	9202      	str	r2, [sp, #8]
 8005978:	9301      	str	r3, [sp, #4]
 800597a:	2300      	movs	r3, #0
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	2300      	movs	r3, #0
 8005980:	460a      	mov	r2, r1
 8005982:	4921      	ldr	r1, [pc, #132]	@ (8005a08 <vTaskStartScheduler+0xb4>)
 8005984:	4821      	ldr	r0, [pc, #132]	@ (8005a0c <vTaskStartScheduler+0xb8>)
 8005986:	f7ff fe00 	bl	800558a <xTaskCreateStatic>
 800598a:	4603      	mov	r3, r0
 800598c:	4a20      	ldr	r2, [pc, #128]	@ (8005a10 <vTaskStartScheduler+0xbc>)
 800598e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005990:	4b1f      	ldr	r3, [pc, #124]	@ (8005a10 <vTaskStartScheduler+0xbc>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005998:	2301      	movs	r3, #1
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	e001      	b.n	80059a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d11b      	bne.n	80059e0 <vTaskStartScheduler+0x8c>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	613b      	str	r3, [r7, #16]
}
 80059ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059bc:	4b15      	ldr	r3, [pc, #84]	@ (8005a14 <vTaskStartScheduler+0xc0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	334c      	adds	r3, #76	@ 0x4c
 80059c2:	4a15      	ldr	r2, [pc, #84]	@ (8005a18 <vTaskStartScheduler+0xc4>)
 80059c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059c6:	4b15      	ldr	r3, [pc, #84]	@ (8005a1c <vTaskStartScheduler+0xc8>)
 80059c8:	f04f 32ff 	mov.w	r2, #4294967295
 80059cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059ce:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <vTaskStartScheduler+0xcc>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059d4:	4b13      	ldr	r3, [pc, #76]	@ (8005a24 <vTaskStartScheduler+0xd0>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059da:	f000 fdf9 	bl	80065d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059de:	e00f      	b.n	8005a00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e6:	d10b      	bne.n	8005a00 <vTaskStartScheduler+0xac>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	60fb      	str	r3, [r7, #12]
}
 80059fa:	bf00      	nop
 80059fc:	bf00      	nop
 80059fe:	e7fd      	b.n	80059fc <vTaskStartScheduler+0xa8>
}
 8005a00:	bf00      	nop
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	080084e8 	.word	0x080084e8
 8005a0c:	08005dbd 	.word	0x08005dbd
 8005a10:	200006f8 	.word	0x200006f8
 8005a14:	200005d4 	.word	0x200005d4
 8005a18:	20000040 	.word	0x20000040
 8005a1c:	200006f4 	.word	0x200006f4
 8005a20:	200006e0 	.word	0x200006e0
 8005a24:	200006d8 	.word	0x200006d8

08005a28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a2c:	4b04      	ldr	r3, [pc, #16]	@ (8005a40 <vTaskSuspendAll+0x18>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3301      	adds	r3, #1
 8005a32:	4a03      	ldr	r2, [pc, #12]	@ (8005a40 <vTaskSuspendAll+0x18>)
 8005a34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a36:	bf00      	nop
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	200006fc 	.word	0x200006fc

08005a44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a52:	4b42      	ldr	r3, [pc, #264]	@ (8005b5c <xTaskResumeAll+0x118>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10b      	bne.n	8005a72 <xTaskResumeAll+0x2e>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	603b      	str	r3, [r7, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	bf00      	nop
 8005a70:	e7fd      	b.n	8005a6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a72:	f000 fe51 	bl	8006718 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a76:	4b39      	ldr	r3, [pc, #228]	@ (8005b5c <xTaskResumeAll+0x118>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	4a37      	ldr	r2, [pc, #220]	@ (8005b5c <xTaskResumeAll+0x118>)
 8005a7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a80:	4b36      	ldr	r3, [pc, #216]	@ (8005b5c <xTaskResumeAll+0x118>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d161      	bne.n	8005b4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a88:	4b35      	ldr	r3, [pc, #212]	@ (8005b60 <xTaskResumeAll+0x11c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d05d      	beq.n	8005b4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a90:	e02e      	b.n	8005af0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a92:	4b34      	ldr	r3, [pc, #208]	@ (8005b64 <xTaskResumeAll+0x120>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3318      	adds	r3, #24
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff f9f7 	bl	8004e92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff f9f2 	bl	8004e92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	409a      	lsls	r2, r3
 8005ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8005b68 <xTaskResumeAll+0x124>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	4a2a      	ldr	r2, [pc, #168]	@ (8005b68 <xTaskResumeAll+0x124>)
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4a27      	ldr	r2, [pc, #156]	@ (8005b6c <xTaskResumeAll+0x128>)
 8005ace:	441a      	add	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	f7ff f97e 	bl	8004dd8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae0:	4b23      	ldr	r3, [pc, #140]	@ (8005b70 <xTaskResumeAll+0x12c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d302      	bcc.n	8005af0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005aea:	4b22      	ldr	r3, [pc, #136]	@ (8005b74 <xTaskResumeAll+0x130>)
 8005aec:	2201      	movs	r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005af0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b64 <xTaskResumeAll+0x120>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1cc      	bne.n	8005a92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005afe:	f000 fa19 	bl	8005f34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b02:	4b1d      	ldr	r3, [pc, #116]	@ (8005b78 <xTaskResumeAll+0x134>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d010      	beq.n	8005b30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b0e:	f000 f837 	bl	8005b80 <xTaskIncrementTick>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b18:	4b16      	ldr	r3, [pc, #88]	@ (8005b74 <xTaskResumeAll+0x130>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f1      	bne.n	8005b0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005b2a:	4b13      	ldr	r3, [pc, #76]	@ (8005b78 <xTaskResumeAll+0x134>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b30:	4b10      	ldr	r3, [pc, #64]	@ (8005b74 <xTaskResumeAll+0x130>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b7c <xTaskResumeAll+0x138>)
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b4c:	f000 fe16 	bl	800677c <vPortExitCritical>

	return xAlreadyYielded;
 8005b50:	68bb      	ldr	r3, [r7, #8]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	200006fc 	.word	0x200006fc
 8005b60:	200006d4 	.word	0x200006d4
 8005b64:	20000694 	.word	0x20000694
 8005b68:	200006dc 	.word	0x200006dc
 8005b6c:	200005d8 	.word	0x200005d8
 8005b70:	200005d4 	.word	0x200005d4
 8005b74:	200006e8 	.word	0x200006e8
 8005b78:	200006e4 	.word	0x200006e4
 8005b7c:	e000ed04 	.word	0xe000ed04

08005b80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b8a:	4b4f      	ldr	r3, [pc, #316]	@ (8005cc8 <xTaskIncrementTick+0x148>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f040 808f 	bne.w	8005cb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b94:	4b4d      	ldr	r3, [pc, #308]	@ (8005ccc <xTaskIncrementTick+0x14c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005b9c:	4a4b      	ldr	r2, [pc, #300]	@ (8005ccc <xTaskIncrementTick+0x14c>)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d121      	bne.n	8005bec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ba8:	4b49      	ldr	r3, [pc, #292]	@ (8005cd0 <xTaskIncrementTick+0x150>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00b      	beq.n	8005bca <xTaskIncrementTick+0x4a>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	603b      	str	r3, [r7, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	e7fd      	b.n	8005bc6 <xTaskIncrementTick+0x46>
 8005bca:	4b41      	ldr	r3, [pc, #260]	@ (8005cd0 <xTaskIncrementTick+0x150>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	4b40      	ldr	r3, [pc, #256]	@ (8005cd4 <xTaskIncrementTick+0x154>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a3e      	ldr	r2, [pc, #248]	@ (8005cd0 <xTaskIncrementTick+0x150>)
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	4a3e      	ldr	r2, [pc, #248]	@ (8005cd4 <xTaskIncrementTick+0x154>)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	4b3e      	ldr	r3, [pc, #248]	@ (8005cd8 <xTaskIncrementTick+0x158>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3301      	adds	r3, #1
 8005be4:	4a3c      	ldr	r2, [pc, #240]	@ (8005cd8 <xTaskIncrementTick+0x158>)
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	f000 f9a4 	bl	8005f34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005bec:	4b3b      	ldr	r3, [pc, #236]	@ (8005cdc <xTaskIncrementTick+0x15c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d348      	bcc.n	8005c88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bf6:	4b36      	ldr	r3, [pc, #216]	@ (8005cd0 <xTaskIncrementTick+0x150>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c00:	4b36      	ldr	r3, [pc, #216]	@ (8005cdc <xTaskIncrementTick+0x15c>)
 8005c02:	f04f 32ff 	mov.w	r2, #4294967295
 8005c06:	601a      	str	r2, [r3, #0]
					break;
 8005c08:	e03e      	b.n	8005c88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c0a:	4b31      	ldr	r3, [pc, #196]	@ (8005cd0 <xTaskIncrementTick+0x150>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d203      	bcs.n	8005c2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c22:	4a2e      	ldr	r2, [pc, #184]	@ (8005cdc <xTaskIncrementTick+0x15c>)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c28:	e02e      	b.n	8005c88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff f92f 	bl	8004e92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d004      	beq.n	8005c46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	3318      	adds	r3, #24
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff f926 	bl	8004e92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	409a      	lsls	r2, r3
 8005c4e:	4b24      	ldr	r3, [pc, #144]	@ (8005ce0 <xTaskIncrementTick+0x160>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	4a22      	ldr	r2, [pc, #136]	@ (8005ce0 <xTaskIncrementTick+0x160>)
 8005c56:	6013      	str	r3, [r2, #0]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce4 <xTaskIncrementTick+0x164>)
 8005c66:	441a      	add	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f7ff f8b2 	bl	8004dd8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c78:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce8 <xTaskIncrementTick+0x168>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d3b9      	bcc.n	8005bf6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005c82:	2301      	movs	r3, #1
 8005c84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c86:	e7b6      	b.n	8005bf6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005c88:	4b17      	ldr	r3, [pc, #92]	@ (8005ce8 <xTaskIncrementTick+0x168>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8e:	4915      	ldr	r1, [pc, #84]	@ (8005ce4 <xTaskIncrementTick+0x164>)
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d901      	bls.n	8005ca4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ca4:	4b11      	ldr	r3, [pc, #68]	@ (8005cec <xTaskIncrementTick+0x16c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d007      	beq.n	8005cbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005cac:	2301      	movs	r3, #1
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	e004      	b.n	8005cbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf0 <xTaskIncrementTick+0x170>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8005cf0 <xTaskIncrementTick+0x170>)
 8005cba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005cbc:	697b      	ldr	r3, [r7, #20]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	200006fc 	.word	0x200006fc
 8005ccc:	200006d8 	.word	0x200006d8
 8005cd0:	2000068c 	.word	0x2000068c
 8005cd4:	20000690 	.word	0x20000690
 8005cd8:	200006ec 	.word	0x200006ec
 8005cdc:	200006f4 	.word	0x200006f4
 8005ce0:	200006dc 	.word	0x200006dc
 8005ce4:	200005d8 	.word	0x200005d8
 8005ce8:	200005d4 	.word	0x200005d4
 8005cec:	200006e8 	.word	0x200006e8
 8005cf0:	200006e4 	.word	0x200006e4

08005cf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8005da4 <vTaskSwitchContext+0xb0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d02:	4b29      	ldr	r3, [pc, #164]	@ (8005da8 <vTaskSwitchContext+0xb4>)
 8005d04:	2201      	movs	r2, #1
 8005d06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d08:	e045      	b.n	8005d96 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005d0a:	4b27      	ldr	r3, [pc, #156]	@ (8005da8 <vTaskSwitchContext+0xb4>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d10:	4b26      	ldr	r3, [pc, #152]	@ (8005dac <vTaskSwitchContext+0xb8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	fab3 f383 	clz	r3, r3
 8005d1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d1e:	7afb      	ldrb	r3, [r7, #11]
 8005d20:	f1c3 031f 	rsb	r3, r3, #31
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	4922      	ldr	r1, [pc, #136]	@ (8005db0 <vTaskSwitchContext+0xbc>)
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10b      	bne.n	8005d52 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	607b      	str	r3, [r7, #4]
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	e7fd      	b.n	8005d4e <vTaskSwitchContext+0x5a>
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4a14      	ldr	r2, [pc, #80]	@ (8005db0 <vTaskSwitchContext+0xbc>)
 8005d5e:	4413      	add	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	605a      	str	r2, [r3, #4]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3308      	adds	r3, #8
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d104      	bne.n	8005d82 <vTaskSwitchContext+0x8e>
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4a0a      	ldr	r2, [pc, #40]	@ (8005db4 <vTaskSwitchContext+0xc0>)
 8005d8a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d8c:	4b09      	ldr	r3, [pc, #36]	@ (8005db4 <vTaskSwitchContext+0xc0>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	334c      	adds	r3, #76	@ 0x4c
 8005d92:	4a09      	ldr	r2, [pc, #36]	@ (8005db8 <vTaskSwitchContext+0xc4>)
 8005d94:	6013      	str	r3, [r2, #0]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	200006fc 	.word	0x200006fc
 8005da8:	200006e8 	.word	0x200006e8
 8005dac:	200006dc 	.word	0x200006dc
 8005db0:	200005d8 	.word	0x200005d8
 8005db4:	200005d4 	.word	0x200005d4
 8005db8:	20000040 	.word	0x20000040

08005dbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005dc4:	f000 f852 	bl	8005e6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005dc8:	4b06      	ldr	r3, [pc, #24]	@ (8005de4 <prvIdleTask+0x28>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d9f9      	bls.n	8005dc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005dd0:	4b05      	ldr	r3, [pc, #20]	@ (8005de8 <prvIdleTask+0x2c>)
 8005dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005de0:	e7f0      	b.n	8005dc4 <prvIdleTask+0x8>
 8005de2:	bf00      	nop
 8005de4:	200005d8 	.word	0x200005d8
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005df2:	2300      	movs	r3, #0
 8005df4:	607b      	str	r3, [r7, #4]
 8005df6:	e00c      	b.n	8005e12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4a12      	ldr	r2, [pc, #72]	@ (8005e4c <prvInitialiseTaskLists+0x60>)
 8005e04:	4413      	add	r3, r2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe ffb9 	bl	8004d7e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b06      	cmp	r3, #6
 8005e16:	d9ef      	bls.n	8005df8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e18:	480d      	ldr	r0, [pc, #52]	@ (8005e50 <prvInitialiseTaskLists+0x64>)
 8005e1a:	f7fe ffb0 	bl	8004d7e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e1e:	480d      	ldr	r0, [pc, #52]	@ (8005e54 <prvInitialiseTaskLists+0x68>)
 8005e20:	f7fe ffad 	bl	8004d7e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e24:	480c      	ldr	r0, [pc, #48]	@ (8005e58 <prvInitialiseTaskLists+0x6c>)
 8005e26:	f7fe ffaa 	bl	8004d7e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e2a:	480c      	ldr	r0, [pc, #48]	@ (8005e5c <prvInitialiseTaskLists+0x70>)
 8005e2c:	f7fe ffa7 	bl	8004d7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e30:	480b      	ldr	r0, [pc, #44]	@ (8005e60 <prvInitialiseTaskLists+0x74>)
 8005e32:	f7fe ffa4 	bl	8004d7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e36:	4b0b      	ldr	r3, [pc, #44]	@ (8005e64 <prvInitialiseTaskLists+0x78>)
 8005e38:	4a05      	ldr	r2, [pc, #20]	@ (8005e50 <prvInitialiseTaskLists+0x64>)
 8005e3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e68 <prvInitialiseTaskLists+0x7c>)
 8005e3e:	4a05      	ldr	r2, [pc, #20]	@ (8005e54 <prvInitialiseTaskLists+0x68>)
 8005e40:	601a      	str	r2, [r3, #0]
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200005d8 	.word	0x200005d8
 8005e50:	20000664 	.word	0x20000664
 8005e54:	20000678 	.word	0x20000678
 8005e58:	20000694 	.word	0x20000694
 8005e5c:	200006a8 	.word	0x200006a8
 8005e60:	200006c0 	.word	0x200006c0
 8005e64:	2000068c 	.word	0x2000068c
 8005e68:	20000690 	.word	0x20000690

08005e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e72:	e019      	b.n	8005ea8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e74:	f000 fc50 	bl	8006718 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e78:	4b10      	ldr	r3, [pc, #64]	@ (8005ebc <prvCheckTasksWaitingTermination+0x50>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff f804 	bl	8004e92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec0 <prvCheckTasksWaitingTermination+0x54>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	4a0b      	ldr	r2, [pc, #44]	@ (8005ec0 <prvCheckTasksWaitingTermination+0x54>)
 8005e92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e94:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec4 <prvCheckTasksWaitingTermination+0x58>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ec4 <prvCheckTasksWaitingTermination+0x58>)
 8005e9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e9e:	f000 fc6d 	bl	800677c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f810 	bl	8005ec8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ea8:	4b06      	ldr	r3, [pc, #24]	@ (8005ec4 <prvCheckTasksWaitingTermination+0x58>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e1      	bne.n	8005e74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	200006a8 	.word	0x200006a8
 8005ec0:	200006d4 	.word	0x200006d4
 8005ec4:	200006bc 	.word	0x200006bc

08005ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	334c      	adds	r3, #76	@ 0x4c
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 f953 	bl	8007180 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d108      	bne.n	8005ef6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 fe05 	bl	8006af8 <vPortFree>
				vPortFree( pxTCB );
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fe02 	bl	8006af8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ef4:	e019      	b.n	8005f2a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d103      	bne.n	8005f08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fdf9 	bl	8006af8 <vPortFree>
	}
 8005f06:	e010      	b.n	8005f2a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d00b      	beq.n	8005f2a <prvDeleteTCB+0x62>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	60fb      	str	r3, [r7, #12]
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	e7fd      	b.n	8005f26 <prvDeleteTCB+0x5e>
	}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f6c <prvResetNextTaskUnblockTime+0x38>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d104      	bne.n	8005f4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f44:	4b0a      	ldr	r3, [pc, #40]	@ (8005f70 <prvResetNextTaskUnblockTime+0x3c>)
 8005f46:	f04f 32ff 	mov.w	r2, #4294967295
 8005f4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f4c:	e008      	b.n	8005f60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f4e:	4b07      	ldr	r3, [pc, #28]	@ (8005f6c <prvResetNextTaskUnblockTime+0x38>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	4a04      	ldr	r2, [pc, #16]	@ (8005f70 <prvResetNextTaskUnblockTime+0x3c>)
 8005f5e:	6013      	str	r3, [r2, #0]
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	2000068c 	.word	0x2000068c
 8005f70:	200006f4 	.word	0x200006f4

08005f74 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005f7a:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <xTaskGetCurrentTaskHandle+0x1c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005f80:	687b      	ldr	r3, [r7, #4]
	}
 8005f82:	4618      	mov	r0, r3
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	200005d4 	.word	0x200005d4

08005f94 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005fa2:	f000 fbb9 	bl	8006718 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005fa6:	4b29      	ldr	r3, [pc, #164]	@ (800604c <xTaskNotifyWait+0xb8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d01c      	beq.n	8005fee <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005fb4:	4b25      	ldr	r3, [pc, #148]	@ (800604c <xTaskNotifyWait+0xb8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	43d2      	mvns	r2, r2
 8005fc0:	400a      	ands	r2, r1
 8005fc2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005fc6:	4b21      	ldr	r3, [pc, #132]	@ (800604c <xTaskNotifyWait+0xb8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00b      	beq.n	8005fee <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	6838      	ldr	r0, [r7, #0]
 8005fda:	f000 fa09 	bl	80063f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005fde:	4b1c      	ldr	r3, [pc, #112]	@ (8006050 <xTaskNotifyWait+0xbc>)
 8005fe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005fee:	f000 fbc5 	bl	800677c <vPortExitCritical>

		taskENTER_CRITICAL();
 8005ff2:	f000 fb91 	bl	8006718 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005ffc:	4b13      	ldr	r3, [pc, #76]	@ (800604c <xTaskNotifyWait+0xb8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006008:	4b10      	ldr	r3, [pc, #64]	@ (800604c <xTaskNotifyWait+0xb8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d002      	beq.n	800601c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e00a      	b.n	8006032 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800601c:	4b0b      	ldr	r3, [pc, #44]	@ (800604c <xTaskNotifyWait+0xb8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	43d2      	mvns	r2, r2
 8006028:	400a      	ands	r2, r1
 800602a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 800602e:	2301      	movs	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006032:	4b06      	ldr	r3, [pc, #24]	@ (800604c <xTaskNotifyWait+0xb8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800603c:	f000 fb9e 	bl	800677c <vPortExitCritical>

		return xReturn;
 8006040:	697b      	ldr	r3, [r7, #20]
	}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	200005d4 	.word	0x200005d4
 8006050:	e000ed04 	.word	0xe000ed04

08006054 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	@ 0x28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4613      	mov	r3, r2
 8006062:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006064:	2301      	movs	r3, #1
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10b      	bne.n	8006086 <xTaskGenericNotify+0x32>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	61bb      	str	r3, [r7, #24]
}
 8006080:	bf00      	nop
 8006082:	bf00      	nop
 8006084:	e7fd      	b.n	8006082 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800608a:	f000 fb45 	bl	8006718 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80060a4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	2202      	movs	r2, #2
 80060aa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d82e      	bhi.n	8006112 <xTaskGenericNotify+0xbe>
 80060b4:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <xTaskGenericNotify+0x68>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	08006137 	.word	0x08006137
 80060c0:	080060d1 	.word	0x080060d1
 80060c4:	080060e3 	.word	0x080060e3
 80060c8:	080060f3 	.word	0x080060f3
 80060cc:	080060fd 	.word	0x080060fd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	431a      	orrs	r2, r3
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80060e0:	e02c      	b.n	800613c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80060f0:	e024      	b.n	800613c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80060fa:	e01f      	b.n	800613c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80060fc:	7ffb      	ldrb	r3, [r7, #31]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d004      	beq.n	800610c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800610a:	e017      	b.n	800613c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800610c:	2300      	movs	r3, #0
 800610e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006110:	e014      	b.n	800613c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d00d      	beq.n	800613a <xTaskGenericNotify+0xe6>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	617b      	str	r3, [r7, #20]
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <xTaskGenericNotify+0xde>
					break;
 8006136:	bf00      	nop
 8006138:	e000      	b.n	800613c <xTaskGenericNotify+0xe8>

					break;
 800613a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800613c:	7ffb      	ldrb	r3, [r7, #31]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d13a      	bne.n	80061b8 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	3304      	adds	r3, #4
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe fea3 	bl	8004e92 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006150:	2201      	movs	r2, #1
 8006152:	409a      	lsls	r2, r3
 8006154:	4b1c      	ldr	r3, [pc, #112]	@ (80061c8 <xTaskGenericNotify+0x174>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4313      	orrs	r3, r2
 800615a:	4a1b      	ldr	r2, [pc, #108]	@ (80061c8 <xTaskGenericNotify+0x174>)
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4a18      	ldr	r2, [pc, #96]	@ (80061cc <xTaskGenericNotify+0x178>)
 800616c:	441a      	add	r2, r3
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	3304      	adds	r3, #4
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f7fe fe2f 	bl	8004dd8 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <xTaskGenericNotify+0x146>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	613b      	str	r3, [r7, #16]
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	e7fd      	b.n	8006196 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800619e:	4b0c      	ldr	r3, [pc, #48]	@ (80061d0 <xTaskGenericNotify+0x17c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d907      	bls.n	80061b8 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80061a8:	4b0a      	ldr	r3, [pc, #40]	@ (80061d4 <xTaskGenericNotify+0x180>)
 80061aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80061b8:	f000 fae0 	bl	800677c <vPortExitCritical>

		return xReturn;
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80061be:	4618      	mov	r0, r3
 80061c0:	3728      	adds	r7, #40	@ 0x28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	200006dc 	.word	0x200006dc
 80061cc:	200005d8 	.word	0x200005d8
 80061d0:	200005d4 	.word	0x200005d4
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08e      	sub	sp, #56	@ 0x38
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	4613      	mov	r3, r2
 80061e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80061e8:	2301      	movs	r3, #1
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	e7fd      	b.n	8006206 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800620a:	f000 fb65 	bl	80068d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8006212:	f3ef 8211 	mrs	r2, BASEPRI
 8006216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	623a      	str	r2, [r7, #32]
 8006228:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800622a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800622c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006236:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8006244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	2202      	movs	r2, #2
 800624c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	2b04      	cmp	r3, #4
 8006254:	d82e      	bhi.n	80062b4 <xTaskGenericNotifyFromISR+0xdc>
 8006256:	a201      	add	r2, pc, #4	@ (adr r2, 800625c <xTaskGenericNotifyFromISR+0x84>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	080062d9 	.word	0x080062d9
 8006260:	08006271 	.word	0x08006271
 8006264:	08006283 	.word	0x08006283
 8006268:	08006293 	.word	0x08006293
 800626c:	0800629d 	.word	0x0800629d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006272:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	431a      	orrs	r2, r3
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8006280:	e02d      	b.n	80062de <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8006290:	e025      	b.n	80062de <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800629a:	e020      	b.n	80062de <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800629c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d004      	beq.n	80062ae <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80062ac:	e017      	b.n	80062de <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80062b2:	e014      	b.n	80062de <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80062b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d00d      	beq.n	80062dc <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	61bb      	str	r3, [r7, #24]
}
 80062d2:	bf00      	nop
 80062d4:	bf00      	nop
 80062d6:	e7fd      	b.n	80062d4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80062d8:	bf00      	nop
 80062da:	e000      	b.n	80062de <xTaskGenericNotifyFromISR+0x106>
					break;
 80062dc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80062de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d146      	bne.n	8006374 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	617b      	str	r3, [r7, #20]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006306:	4b21      	ldr	r3, [pc, #132]	@ (800638c <xTaskGenericNotifyFromISR+0x1b4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d11c      	bne.n	8006348 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006310:	3304      	adds	r3, #4
 8006312:	4618      	mov	r0, r3
 8006314:	f7fe fdbd 	bl	8004e92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	2201      	movs	r2, #1
 800631e:	409a      	lsls	r2, r3
 8006320:	4b1b      	ldr	r3, [pc, #108]	@ (8006390 <xTaskGenericNotifyFromISR+0x1b8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4313      	orrs	r3, r2
 8006326:	4a1a      	ldr	r2, [pc, #104]	@ (8006390 <xTaskGenericNotifyFromISR+0x1b8>)
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4a17      	ldr	r2, [pc, #92]	@ (8006394 <xTaskGenericNotifyFromISR+0x1bc>)
 8006338:	441a      	add	r2, r3
 800633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633c:	3304      	adds	r3, #4
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f7fe fd49 	bl	8004dd8 <vListInsertEnd>
 8006346:	e005      	b.n	8006354 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	3318      	adds	r3, #24
 800634c:	4619      	mov	r1, r3
 800634e:	4812      	ldr	r0, [pc, #72]	@ (8006398 <xTaskGenericNotifyFromISR+0x1c0>)
 8006350:	f7fe fd42 	bl	8004dd8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006358:	4b10      	ldr	r3, [pc, #64]	@ (800639c <xTaskGenericNotifyFromISR+0x1c4>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635e:	429a      	cmp	r2, r3
 8006360:	d908      	bls.n	8006374 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800636a:	2201      	movs	r2, #1
 800636c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800636e:	4b0c      	ldr	r3, [pc, #48]	@ (80063a0 <xTaskGenericNotifyFromISR+0x1c8>)
 8006370:	2201      	movs	r2, #1
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006376:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8006382:	4618      	mov	r0, r3
 8006384:	3738      	adds	r7, #56	@ 0x38
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200006fc 	.word	0x200006fc
 8006390:	200006dc 	.word	0x200006dc
 8006394:	200005d8 	.word	0x200005d8
 8006398:	20000694 	.word	0x20000694
 800639c:	200005d4 	.word	0x200005d4
 80063a0:	200006e8 	.word	0x200006e8

080063a4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <xTaskNotifyStateClear+0x14>
 80063b2:	4b0e      	ldr	r3, [pc, #56]	@ (80063ec <xTaskNotifyStateClear+0x48>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	e000      	b.n	80063ba <xTaskNotifyStateClear+0x16>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80063bc:	f000 f9ac 	bl	8006718 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d106      	bne.n	80063da <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				xReturn = pdPASS;
 80063d4:	2301      	movs	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	e001      	b.n	80063de <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80063de:	f000 f9cd 	bl	800677c <vPortExitCritical>

		return xReturn;
 80063e2:	68fb      	ldr	r3, [r7, #12]
	}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	200005d4 	.word	0x200005d4

080063f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063fa:	4b29      	ldr	r3, [pc, #164]	@ (80064a0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006400:	4b28      	ldr	r3, [pc, #160]	@ (80064a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3304      	adds	r3, #4
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fd43 	bl	8004e92 <uxListRemove>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10b      	bne.n	800642a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006412:	4b24      	ldr	r3, [pc, #144]	@ (80064a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006418:	2201      	movs	r2, #1
 800641a:	fa02 f303 	lsl.w	r3, r2, r3
 800641e:	43da      	mvns	r2, r3
 8006420:	4b21      	ldr	r3, [pc, #132]	@ (80064a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4013      	ands	r3, r2
 8006426:	4a20      	ldr	r2, [pc, #128]	@ (80064a8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006428:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006430:	d10a      	bne.n	8006448 <prvAddCurrentTaskToDelayedList+0x58>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d007      	beq.n	8006448 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006438:	4b1a      	ldr	r3, [pc, #104]	@ (80064a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3304      	adds	r3, #4
 800643e:	4619      	mov	r1, r3
 8006440:	481a      	ldr	r0, [pc, #104]	@ (80064ac <prvAddCurrentTaskToDelayedList+0xbc>)
 8006442:	f7fe fcc9 	bl	8004dd8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006446:	e026      	b.n	8006496 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4413      	add	r3, r2
 800644e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006450:	4b14      	ldr	r3, [pc, #80]	@ (80064a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	429a      	cmp	r2, r3
 800645e:	d209      	bcs.n	8006474 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006460:	4b13      	ldr	r3, [pc, #76]	@ (80064b0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	4b0f      	ldr	r3, [pc, #60]	@ (80064a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3304      	adds	r3, #4
 800646a:	4619      	mov	r1, r3
 800646c:	4610      	mov	r0, r2
 800646e:	f7fe fcd7 	bl	8004e20 <vListInsert>
}
 8006472:	e010      	b.n	8006496 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006474:	4b0f      	ldr	r3, [pc, #60]	@ (80064b4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	4b0a      	ldr	r3, [pc, #40]	@ (80064a4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3304      	adds	r3, #4
 800647e:	4619      	mov	r1, r3
 8006480:	4610      	mov	r0, r2
 8006482:	f7fe fccd 	bl	8004e20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006486:	4b0c      	ldr	r3, [pc, #48]	@ (80064b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	429a      	cmp	r2, r3
 800648e:	d202      	bcs.n	8006496 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006490:	4a09      	ldr	r2, [pc, #36]	@ (80064b8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6013      	str	r3, [r2, #0]
}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	200006d8 	.word	0x200006d8
 80064a4:	200005d4 	.word	0x200005d4
 80064a8:	200006dc 	.word	0x200006dc
 80064ac:	200006c0 	.word	0x200006c0
 80064b0:	20000690 	.word	0x20000690
 80064b4:	2000068c 	.word	0x2000068c
 80064b8:	200006f4 	.word	0x200006f4

080064bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3b04      	subs	r3, #4
 80064cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3b04      	subs	r3, #4
 80064da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f023 0201 	bic.w	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3b04      	subs	r3, #4
 80064ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006520 <pxPortInitialiseStack+0x64>)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3b14      	subs	r3, #20
 80064f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3b04      	subs	r3, #4
 8006502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f06f 0202 	mvn.w	r2, #2
 800650a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3b20      	subs	r3, #32
 8006510:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006512:	68fb      	ldr	r3, [r7, #12]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	08006525 	.word	0x08006525

08006524 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800652e:	4b13      	ldr	r3, [pc, #76]	@ (800657c <prvTaskExitError+0x58>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006536:	d00b      	beq.n	8006550 <prvTaskExitError+0x2c>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	60fb      	str	r3, [r7, #12]
}
 800654a:	bf00      	nop
 800654c:	bf00      	nop
 800654e:	e7fd      	b.n	800654c <prvTaskExitError+0x28>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	60bb      	str	r3, [r7, #8]
}
 8006562:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006564:	bf00      	nop
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0fc      	beq.n	8006566 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800656c:	bf00      	nop
 800656e:	bf00      	nop
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	20000030 	.word	0x20000030

08006580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006580:	4b07      	ldr	r3, [pc, #28]	@ (80065a0 <pxCurrentTCBConst2>)
 8006582:	6819      	ldr	r1, [r3, #0]
 8006584:	6808      	ldr	r0, [r1, #0]
 8006586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658a:	f380 8809 	msr	PSP, r0
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f380 8811 	msr	BASEPRI, r0
 800659a:	4770      	bx	lr
 800659c:	f3af 8000 	nop.w

080065a0 <pxCurrentTCBConst2>:
 80065a0:	200005d4 	.word	0x200005d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop

080065a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065a8:	4808      	ldr	r0, [pc, #32]	@ (80065cc <prvPortStartFirstTask+0x24>)
 80065aa:	6800      	ldr	r0, [r0, #0]
 80065ac:	6800      	ldr	r0, [r0, #0]
 80065ae:	f380 8808 	msr	MSP, r0
 80065b2:	f04f 0000 	mov.w	r0, #0
 80065b6:	f380 8814 	msr	CONTROL, r0
 80065ba:	b662      	cpsie	i
 80065bc:	b661      	cpsie	f
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	df00      	svc	0
 80065c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065ca:	bf00      	nop
 80065cc:	e000ed08 	.word	0xe000ed08

080065d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065d6:	4b47      	ldr	r3, [pc, #284]	@ (80066f4 <xPortStartScheduler+0x124>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a47      	ldr	r2, [pc, #284]	@ (80066f8 <xPortStartScheduler+0x128>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d10b      	bne.n	80065f8 <xPortStartScheduler+0x28>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	60fb      	str	r3, [r7, #12]
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	e7fd      	b.n	80065f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065f8:	4b3e      	ldr	r3, [pc, #248]	@ (80066f4 <xPortStartScheduler+0x124>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a3f      	ldr	r2, [pc, #252]	@ (80066fc <xPortStartScheduler+0x12c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d10b      	bne.n	800661a <xPortStartScheduler+0x4a>
	__asm volatile
 8006602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	613b      	str	r3, [r7, #16]
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	e7fd      	b.n	8006616 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800661a:	4b39      	ldr	r3, [pc, #228]	@ (8006700 <xPortStartScheduler+0x130>)
 800661c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	22ff      	movs	r2, #255	@ 0xff
 800662a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800663c:	b2da      	uxtb	r2, r3
 800663e:	4b31      	ldr	r3, [pc, #196]	@ (8006704 <xPortStartScheduler+0x134>)
 8006640:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006642:	4b31      	ldr	r3, [pc, #196]	@ (8006708 <xPortStartScheduler+0x138>)
 8006644:	2207      	movs	r2, #7
 8006646:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006648:	e009      	b.n	800665e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800664a:	4b2f      	ldr	r3, [pc, #188]	@ (8006708 <xPortStartScheduler+0x138>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3b01      	subs	r3, #1
 8006650:	4a2d      	ldr	r2, [pc, #180]	@ (8006708 <xPortStartScheduler+0x138>)
 8006652:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	b2db      	uxtb	r3, r3
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	b2db      	uxtb	r3, r3
 800665c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006666:	2b80      	cmp	r3, #128	@ 0x80
 8006668:	d0ef      	beq.n	800664a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800666a:	4b27      	ldr	r3, [pc, #156]	@ (8006708 <xPortStartScheduler+0x138>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f1c3 0307 	rsb	r3, r3, #7
 8006672:	2b04      	cmp	r3, #4
 8006674:	d00b      	beq.n	800668e <xPortStartScheduler+0xbe>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	60bb      	str	r3, [r7, #8]
}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	e7fd      	b.n	800668a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800668e:	4b1e      	ldr	r3, [pc, #120]	@ (8006708 <xPortStartScheduler+0x138>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	4a1c      	ldr	r2, [pc, #112]	@ (8006708 <xPortStartScheduler+0x138>)
 8006696:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006698:	4b1b      	ldr	r3, [pc, #108]	@ (8006708 <xPortStartScheduler+0x138>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066a0:	4a19      	ldr	r2, [pc, #100]	@ (8006708 <xPortStartScheduler+0x138>)
 80066a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066ac:	4b17      	ldr	r3, [pc, #92]	@ (800670c <xPortStartScheduler+0x13c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a16      	ldr	r2, [pc, #88]	@ (800670c <xPortStartScheduler+0x13c>)
 80066b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066b8:	4b14      	ldr	r3, [pc, #80]	@ (800670c <xPortStartScheduler+0x13c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a13      	ldr	r2, [pc, #76]	@ (800670c <xPortStartScheduler+0x13c>)
 80066be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066c4:	f000 f8da 	bl	800687c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066c8:	4b11      	ldr	r3, [pc, #68]	@ (8006710 <xPortStartScheduler+0x140>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066ce:	f000 f8f9 	bl	80068c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066d2:	4b10      	ldr	r3, [pc, #64]	@ (8006714 <xPortStartScheduler+0x144>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006714 <xPortStartScheduler+0x144>)
 80066d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80066dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066de:	f7ff ff63 	bl	80065a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066e2:	f7ff fb07 	bl	8005cf4 <vTaskSwitchContext>
	prvTaskExitError();
 80066e6:	f7ff ff1d 	bl	8006524 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	e000ed00 	.word	0xe000ed00
 80066f8:	410fc271 	.word	0x410fc271
 80066fc:	410fc270 	.word	0x410fc270
 8006700:	e000e400 	.word	0xe000e400
 8006704:	20000700 	.word	0x20000700
 8006708:	20000704 	.word	0x20000704
 800670c:	e000ed20 	.word	0xe000ed20
 8006710:	20000030 	.word	0x20000030
 8006714:	e000ef34 	.word	0xe000ef34

08006718 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	607b      	str	r3, [r7, #4]
}
 8006730:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006732:	4b10      	ldr	r3, [pc, #64]	@ (8006774 <vPortEnterCritical+0x5c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	4a0e      	ldr	r2, [pc, #56]	@ (8006774 <vPortEnterCritical+0x5c>)
 800673a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800673c:	4b0d      	ldr	r3, [pc, #52]	@ (8006774 <vPortEnterCritical+0x5c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d110      	bne.n	8006766 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006744:	4b0c      	ldr	r3, [pc, #48]	@ (8006778 <vPortEnterCritical+0x60>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00b      	beq.n	8006766 <vPortEnterCritical+0x4e>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	603b      	str	r3, [r7, #0]
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	e7fd      	b.n	8006762 <vPortEnterCritical+0x4a>
	}
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20000030 	.word	0x20000030
 8006778:	e000ed04 	.word	0xe000ed04

0800677c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006782:	4b12      	ldr	r3, [pc, #72]	@ (80067cc <vPortExitCritical+0x50>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10b      	bne.n	80067a2 <vPortExitCritical+0x26>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	607b      	str	r3, [r7, #4]
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	e7fd      	b.n	800679e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80067a2:	4b0a      	ldr	r3, [pc, #40]	@ (80067cc <vPortExitCritical+0x50>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	4a08      	ldr	r2, [pc, #32]	@ (80067cc <vPortExitCritical+0x50>)
 80067aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067ac:	4b07      	ldr	r3, [pc, #28]	@ (80067cc <vPortExitCritical+0x50>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d105      	bne.n	80067c0 <vPortExitCritical+0x44>
 80067b4:	2300      	movs	r3, #0
 80067b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	f383 8811 	msr	BASEPRI, r3
}
 80067be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	20000030 	.word	0x20000030

080067d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067d0:	f3ef 8009 	mrs	r0, PSP
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	4b15      	ldr	r3, [pc, #84]	@ (8006830 <pxCurrentTCBConst>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	f01e 0f10 	tst.w	lr, #16
 80067e0:	bf08      	it	eq
 80067e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ea:	6010      	str	r0, [r2, #0]
 80067ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80067f4:	f380 8811 	msr	BASEPRI, r0
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f7ff fa78 	bl	8005cf4 <vTaskSwitchContext>
 8006804:	f04f 0000 	mov.w	r0, #0
 8006808:	f380 8811 	msr	BASEPRI, r0
 800680c:	bc09      	pop	{r0, r3}
 800680e:	6819      	ldr	r1, [r3, #0]
 8006810:	6808      	ldr	r0, [r1, #0]
 8006812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006816:	f01e 0f10 	tst.w	lr, #16
 800681a:	bf08      	it	eq
 800681c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006820:	f380 8809 	msr	PSP, r0
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	f3af 8000 	nop.w

08006830 <pxCurrentTCBConst>:
 8006830:	200005d4 	.word	0x200005d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop

08006838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	607b      	str	r3, [r7, #4]
}
 8006850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006852:	f7ff f995 	bl	8005b80 <xTaskIncrementTick>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800685c:	4b06      	ldr	r3, [pc, #24]	@ (8006878 <SysTick_Handler+0x40>)
 800685e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	2300      	movs	r3, #0
 8006866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	f383 8811 	msr	BASEPRI, r3
}
 800686e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006870:	bf00      	nop
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006880:	4b0b      	ldr	r3, [pc, #44]	@ (80068b0 <vPortSetupTimerInterrupt+0x34>)
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006886:	4b0b      	ldr	r3, [pc, #44]	@ (80068b4 <vPortSetupTimerInterrupt+0x38>)
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800688c:	4b0a      	ldr	r3, [pc, #40]	@ (80068b8 <vPortSetupTimerInterrupt+0x3c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0a      	ldr	r2, [pc, #40]	@ (80068bc <vPortSetupTimerInterrupt+0x40>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	099b      	lsrs	r3, r3, #6
 8006898:	4a09      	ldr	r2, [pc, #36]	@ (80068c0 <vPortSetupTimerInterrupt+0x44>)
 800689a:	3b01      	subs	r3, #1
 800689c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800689e:	4b04      	ldr	r3, [pc, #16]	@ (80068b0 <vPortSetupTimerInterrupt+0x34>)
 80068a0:	2207      	movs	r2, #7
 80068a2:	601a      	str	r2, [r3, #0]
}
 80068a4:	bf00      	nop
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	e000e010 	.word	0xe000e010
 80068b4:	e000e018 	.word	0xe000e018
 80068b8:	20000024 	.word	0x20000024
 80068bc:	10624dd3 	.word	0x10624dd3
 80068c0:	e000e014 	.word	0xe000e014

080068c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80068d4 <vPortEnableVFP+0x10>
 80068c8:	6801      	ldr	r1, [r0, #0]
 80068ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068ce:	6001      	str	r1, [r0, #0]
 80068d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068d2:	bf00      	nop
 80068d4:	e000ed88 	.word	0xe000ed88

080068d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068de:	f3ef 8305 	mrs	r3, IPSR
 80068e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b0f      	cmp	r3, #15
 80068e8:	d915      	bls.n	8006916 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068ea:	4a18      	ldr	r2, [pc, #96]	@ (800694c <vPortValidateInterruptPriority+0x74>)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068f4:	4b16      	ldr	r3, [pc, #88]	@ (8006950 <vPortValidateInterruptPriority+0x78>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	7afa      	ldrb	r2, [r7, #11]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d20b      	bcs.n	8006916 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	607b      	str	r3, [r7, #4]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006916:	4b0f      	ldr	r3, [pc, #60]	@ (8006954 <vPortValidateInterruptPriority+0x7c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800691e:	4b0e      	ldr	r3, [pc, #56]	@ (8006958 <vPortValidateInterruptPriority+0x80>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	d90b      	bls.n	800693e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	603b      	str	r3, [r7, #0]
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop
 800693c:	e7fd      	b.n	800693a <vPortValidateInterruptPriority+0x62>
	}
 800693e:	bf00      	nop
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	e000e3f0 	.word	0xe000e3f0
 8006950:	20000700 	.word	0x20000700
 8006954:	e000ed0c 	.word	0xe000ed0c
 8006958:	20000704 	.word	0x20000704

0800695c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08a      	sub	sp, #40	@ 0x28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006964:	2300      	movs	r3, #0
 8006966:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006968:	f7ff f85e 	bl	8005a28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800696c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ae0 <pvPortMalloc+0x184>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006974:	f000 f924 	bl	8006bc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006978:	4b5a      	ldr	r3, [pc, #360]	@ (8006ae4 <pvPortMalloc+0x188>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4013      	ands	r3, r2
 8006980:	2b00      	cmp	r3, #0
 8006982:	f040 8095 	bne.w	8006ab0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01e      	beq.n	80069ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800698c:	2208      	movs	r2, #8
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4413      	add	r3, r2
 8006992:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	2b00      	cmp	r3, #0
 800699c:	d015      	beq.n	80069ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f023 0307 	bic.w	r3, r3, #7
 80069a4:	3308      	adds	r3, #8
 80069a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00b      	beq.n	80069ca <pvPortMalloc+0x6e>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	617b      	str	r3, [r7, #20]
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop
 80069c8:	e7fd      	b.n	80069c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d06f      	beq.n	8006ab0 <pvPortMalloc+0x154>
 80069d0:	4b45      	ldr	r3, [pc, #276]	@ (8006ae8 <pvPortMalloc+0x18c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d86a      	bhi.n	8006ab0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069da:	4b44      	ldr	r3, [pc, #272]	@ (8006aec <pvPortMalloc+0x190>)
 80069dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069de:	4b43      	ldr	r3, [pc, #268]	@ (8006aec <pvPortMalloc+0x190>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069e4:	e004      	b.n	80069f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d903      	bls.n	8006a02 <pvPortMalloc+0xa6>
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f1      	bne.n	80069e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a02:	4b37      	ldr	r3, [pc, #220]	@ (8006ae0 <pvPortMalloc+0x184>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d051      	beq.n	8006ab0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2208      	movs	r2, #8
 8006a12:	4413      	add	r3, r2
 8006a14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	1ad2      	subs	r2, r2, r3
 8006a26:	2308      	movs	r3, #8
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d920      	bls.n	8006a70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4413      	add	r3, r2
 8006a34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00b      	beq.n	8006a58 <pvPortMalloc+0xfc>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	613b      	str	r3, [r7, #16]
}
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	e7fd      	b.n	8006a54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	1ad2      	subs	r2, r2, r3
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a6a:	69b8      	ldr	r0, [r7, #24]
 8006a6c:	f000 f90a 	bl	8006c84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a70:	4b1d      	ldr	r3, [pc, #116]	@ (8006ae8 <pvPortMalloc+0x18c>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae8 <pvPortMalloc+0x18c>)
 8006a7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae8 <pvPortMalloc+0x18c>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4b1b      	ldr	r3, [pc, #108]	@ (8006af0 <pvPortMalloc+0x194>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d203      	bcs.n	8006a92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a8a:	4b17      	ldr	r3, [pc, #92]	@ (8006ae8 <pvPortMalloc+0x18c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a18      	ldr	r2, [pc, #96]	@ (8006af0 <pvPortMalloc+0x194>)
 8006a90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	4b13      	ldr	r3, [pc, #76]	@ (8006ae4 <pvPortMalloc+0x188>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006aa6:	4b13      	ldr	r3, [pc, #76]	@ (8006af4 <pvPortMalloc+0x198>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	4a11      	ldr	r2, [pc, #68]	@ (8006af4 <pvPortMalloc+0x198>)
 8006aae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ab0:	f7fe ffc8 	bl	8005a44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00b      	beq.n	8006ad6 <pvPortMalloc+0x17a>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	60fb      	str	r3, [r7, #12]
}
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
 8006ad4:	e7fd      	b.n	8006ad2 <pvPortMalloc+0x176>
	return pvReturn;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3728      	adds	r7, #40	@ 0x28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20005530 	.word	0x20005530
 8006ae4:	20005544 	.word	0x20005544
 8006ae8:	20005534 	.word	0x20005534
 8006aec:	20005528 	.word	0x20005528
 8006af0:	20005538 	.word	0x20005538
 8006af4:	2000553c 	.word	0x2000553c

08006af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d04f      	beq.n	8006baa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	425b      	negs	r3, r3
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4413      	add	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	4b25      	ldr	r3, [pc, #148]	@ (8006bb4 <vPortFree+0xbc>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4013      	ands	r3, r2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10b      	bne.n	8006b3e <vPortFree+0x46>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	60fb      	str	r3, [r7, #12]
}
 8006b38:	bf00      	nop
 8006b3a:	bf00      	nop
 8006b3c:	e7fd      	b.n	8006b3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <vPortFree+0x66>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	60bb      	str	r3, [r7, #8]
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	e7fd      	b.n	8006b5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <vPortFree+0xbc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4013      	ands	r3, r2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01e      	beq.n	8006baa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d11a      	bne.n	8006baa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb4 <vPortFree+0xbc>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	401a      	ands	r2, r3
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b84:	f7fe ff50 	bl	8005a28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb8 <vPortFree+0xc0>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4413      	add	r3, r2
 8006b92:	4a09      	ldr	r2, [pc, #36]	@ (8006bb8 <vPortFree+0xc0>)
 8006b94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b96:	6938      	ldr	r0, [r7, #16]
 8006b98:	f000 f874 	bl	8006c84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b9c:	4b07      	ldr	r3, [pc, #28]	@ (8006bbc <vPortFree+0xc4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	4a06      	ldr	r2, [pc, #24]	@ (8006bbc <vPortFree+0xc4>)
 8006ba4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006ba6:	f7fe ff4d 	bl	8005a44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006baa:	bf00      	nop
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20005544 	.word	0x20005544
 8006bb8:	20005534 	.word	0x20005534
 8006bbc:	20005540 	.word	0x20005540

08006bc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bc6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006bca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bcc:	4b27      	ldr	r3, [pc, #156]	@ (8006c6c <prvHeapInit+0xac>)
 8006bce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00c      	beq.n	8006bf4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3307      	adds	r3, #7
 8006bde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0307 	bic.w	r3, r3, #7
 8006be6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	4a1f      	ldr	r2, [pc, #124]	@ (8006c6c <prvHeapInit+0xac>)
 8006bf0:	4413      	add	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c70 <prvHeapInit+0xb0>)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8006c70 <prvHeapInit+0xb0>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	4413      	add	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0307 	bic.w	r3, r3, #7
 8006c1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4a15      	ldr	r2, [pc, #84]	@ (8006c74 <prvHeapInit+0xb4>)
 8006c20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c22:	4b14      	ldr	r3, [pc, #80]	@ (8006c74 <prvHeapInit+0xb4>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2200      	movs	r2, #0
 8006c28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c2a:	4b12      	ldr	r3, [pc, #72]	@ (8006c74 <prvHeapInit+0xb4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	1ad2      	subs	r2, r2, r3
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c40:	4b0c      	ldr	r3, [pc, #48]	@ (8006c74 <prvHeapInit+0xb4>)
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c78 <prvHeapInit+0xb8>)
 8006c4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	4a09      	ldr	r2, [pc, #36]	@ (8006c7c <prvHeapInit+0xbc>)
 8006c56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c58:	4b09      	ldr	r3, [pc, #36]	@ (8006c80 <prvHeapInit+0xc0>)
 8006c5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c5e:	601a      	str	r2, [r3, #0]
}
 8006c60:	bf00      	nop
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	20000708 	.word	0x20000708
 8006c70:	20005528 	.word	0x20005528
 8006c74:	20005530 	.word	0x20005530
 8006c78:	20005538 	.word	0x20005538
 8006c7c:	20005534 	.word	0x20005534
 8006c80:	20005544 	.word	0x20005544

08006c84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c8c:	4b28      	ldr	r3, [pc, #160]	@ (8006d30 <prvInsertBlockIntoFreeList+0xac>)
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	e002      	b.n	8006c98 <prvInsertBlockIntoFreeList+0x14>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d8f7      	bhi.n	8006c92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	4413      	add	r3, r2
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d108      	bne.n	8006cc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	441a      	add	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	441a      	add	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d118      	bne.n	8006d0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	4b15      	ldr	r3, [pc, #84]	@ (8006d34 <prvInsertBlockIntoFreeList+0xb0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d00d      	beq.n	8006d02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	441a      	add	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	e008      	b.n	8006d14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d02:	4b0c      	ldr	r3, [pc, #48]	@ (8006d34 <prvInsertBlockIntoFreeList+0xb0>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	e003      	b.n	8006d14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d002      	beq.n	8006d22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d22:	bf00      	nop
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20005528 	.word	0x20005528
 8006d34:	20005530 	.word	0x20005530

08006d38 <atoi>:
 8006d38:	220a      	movs	r2, #10
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	f000 b87a 	b.w	8006e34 <strtol>

08006d40 <_strtol_l.isra.0>:
 8006d40:	2b24      	cmp	r3, #36	@ 0x24
 8006d42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d46:	4686      	mov	lr, r0
 8006d48:	4690      	mov	r8, r2
 8006d4a:	d801      	bhi.n	8006d50 <_strtol_l.isra.0+0x10>
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d106      	bne.n	8006d5e <_strtol_l.isra.0+0x1e>
 8006d50:	f000 faaa 	bl	80072a8 <__errno>
 8006d54:	2316      	movs	r3, #22
 8006d56:	6003      	str	r3, [r0, #0]
 8006d58:	2000      	movs	r0, #0
 8006d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5e:	4834      	ldr	r0, [pc, #208]	@ (8006e30 <_strtol_l.isra.0+0xf0>)
 8006d60:	460d      	mov	r5, r1
 8006d62:	462a      	mov	r2, r5
 8006d64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d68:	5d06      	ldrb	r6, [r0, r4]
 8006d6a:	f016 0608 	ands.w	r6, r6, #8
 8006d6e:	d1f8      	bne.n	8006d62 <_strtol_l.isra.0+0x22>
 8006d70:	2c2d      	cmp	r4, #45	@ 0x2d
 8006d72:	d110      	bne.n	8006d96 <_strtol_l.isra.0+0x56>
 8006d74:	782c      	ldrb	r4, [r5, #0]
 8006d76:	2601      	movs	r6, #1
 8006d78:	1c95      	adds	r5, r2, #2
 8006d7a:	f033 0210 	bics.w	r2, r3, #16
 8006d7e:	d115      	bne.n	8006dac <_strtol_l.isra.0+0x6c>
 8006d80:	2c30      	cmp	r4, #48	@ 0x30
 8006d82:	d10d      	bne.n	8006da0 <_strtol_l.isra.0+0x60>
 8006d84:	782a      	ldrb	r2, [r5, #0]
 8006d86:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d8a:	2a58      	cmp	r2, #88	@ 0x58
 8006d8c:	d108      	bne.n	8006da0 <_strtol_l.isra.0+0x60>
 8006d8e:	786c      	ldrb	r4, [r5, #1]
 8006d90:	3502      	adds	r5, #2
 8006d92:	2310      	movs	r3, #16
 8006d94:	e00a      	b.n	8006dac <_strtol_l.isra.0+0x6c>
 8006d96:	2c2b      	cmp	r4, #43	@ 0x2b
 8006d98:	bf04      	itt	eq
 8006d9a:	782c      	ldrbeq	r4, [r5, #0]
 8006d9c:	1c95      	addeq	r5, r2, #2
 8006d9e:	e7ec      	b.n	8006d7a <_strtol_l.isra.0+0x3a>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1f6      	bne.n	8006d92 <_strtol_l.isra.0+0x52>
 8006da4:	2c30      	cmp	r4, #48	@ 0x30
 8006da6:	bf14      	ite	ne
 8006da8:	230a      	movne	r3, #10
 8006daa:	2308      	moveq	r3, #8
 8006dac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006db0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006db4:	2200      	movs	r2, #0
 8006db6:	fbbc f9f3 	udiv	r9, ip, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	fb03 ca19 	mls	sl, r3, r9, ip
 8006dc0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006dc4:	2f09      	cmp	r7, #9
 8006dc6:	d80f      	bhi.n	8006de8 <_strtol_l.isra.0+0xa8>
 8006dc8:	463c      	mov	r4, r7
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	dd1b      	ble.n	8006e06 <_strtol_l.isra.0+0xc6>
 8006dce:	1c57      	adds	r7, r2, #1
 8006dd0:	d007      	beq.n	8006de2 <_strtol_l.isra.0+0xa2>
 8006dd2:	4581      	cmp	r9, r0
 8006dd4:	d314      	bcc.n	8006e00 <_strtol_l.isra.0+0xc0>
 8006dd6:	d101      	bne.n	8006ddc <_strtol_l.isra.0+0x9c>
 8006dd8:	45a2      	cmp	sl, r4
 8006dda:	db11      	blt.n	8006e00 <_strtol_l.isra.0+0xc0>
 8006ddc:	fb00 4003 	mla	r0, r0, r3, r4
 8006de0:	2201      	movs	r2, #1
 8006de2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006de6:	e7eb      	b.n	8006dc0 <_strtol_l.isra.0+0x80>
 8006de8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006dec:	2f19      	cmp	r7, #25
 8006dee:	d801      	bhi.n	8006df4 <_strtol_l.isra.0+0xb4>
 8006df0:	3c37      	subs	r4, #55	@ 0x37
 8006df2:	e7ea      	b.n	8006dca <_strtol_l.isra.0+0x8a>
 8006df4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006df8:	2f19      	cmp	r7, #25
 8006dfa:	d804      	bhi.n	8006e06 <_strtol_l.isra.0+0xc6>
 8006dfc:	3c57      	subs	r4, #87	@ 0x57
 8006dfe:	e7e4      	b.n	8006dca <_strtol_l.isra.0+0x8a>
 8006e00:	f04f 32ff 	mov.w	r2, #4294967295
 8006e04:	e7ed      	b.n	8006de2 <_strtol_l.isra.0+0xa2>
 8006e06:	1c53      	adds	r3, r2, #1
 8006e08:	d108      	bne.n	8006e1c <_strtol_l.isra.0+0xdc>
 8006e0a:	2322      	movs	r3, #34	@ 0x22
 8006e0c:	f8ce 3000 	str.w	r3, [lr]
 8006e10:	4660      	mov	r0, ip
 8006e12:	f1b8 0f00 	cmp.w	r8, #0
 8006e16:	d0a0      	beq.n	8006d5a <_strtol_l.isra.0+0x1a>
 8006e18:	1e69      	subs	r1, r5, #1
 8006e1a:	e006      	b.n	8006e2a <_strtol_l.isra.0+0xea>
 8006e1c:	b106      	cbz	r6, 8006e20 <_strtol_l.isra.0+0xe0>
 8006e1e:	4240      	negs	r0, r0
 8006e20:	f1b8 0f00 	cmp.w	r8, #0
 8006e24:	d099      	beq.n	8006d5a <_strtol_l.isra.0+0x1a>
 8006e26:	2a00      	cmp	r2, #0
 8006e28:	d1f6      	bne.n	8006e18 <_strtol_l.isra.0+0xd8>
 8006e2a:	f8c8 1000 	str.w	r1, [r8]
 8006e2e:	e794      	b.n	8006d5a <_strtol_l.isra.0+0x1a>
 8006e30:	08008539 	.word	0x08008539

08006e34 <strtol>:
 8006e34:	4613      	mov	r3, r2
 8006e36:	460a      	mov	r2, r1
 8006e38:	4601      	mov	r1, r0
 8006e3a:	4802      	ldr	r0, [pc, #8]	@ (8006e44 <strtol+0x10>)
 8006e3c:	6800      	ldr	r0, [r0, #0]
 8006e3e:	f7ff bf7f 	b.w	8006d40 <_strtol_l.isra.0>
 8006e42:	bf00      	nop
 8006e44:	20000040 	.word	0x20000040

08006e48 <std>:
 8006e48:	2300      	movs	r3, #0
 8006e4a:	b510      	push	{r4, lr}
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e56:	6083      	str	r3, [r0, #8]
 8006e58:	8181      	strh	r1, [r0, #12]
 8006e5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e5c:	81c2      	strh	r2, [r0, #14]
 8006e5e:	6183      	str	r3, [r0, #24]
 8006e60:	4619      	mov	r1, r3
 8006e62:	2208      	movs	r2, #8
 8006e64:	305c      	adds	r0, #92	@ 0x5c
 8006e66:	f000 f916 	bl	8007096 <memset>
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea0 <std+0x58>)
 8006e6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea4 <std+0x5c>)
 8006e70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e72:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea8 <std+0x60>)
 8006e74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e76:	4b0d      	ldr	r3, [pc, #52]	@ (8006eac <std+0x64>)
 8006e78:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb0 <std+0x68>)
 8006e7c:	6224      	str	r4, [r4, #32]
 8006e7e:	429c      	cmp	r4, r3
 8006e80:	d006      	beq.n	8006e90 <std+0x48>
 8006e82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e86:	4294      	cmp	r4, r2
 8006e88:	d002      	beq.n	8006e90 <std+0x48>
 8006e8a:	33d0      	adds	r3, #208	@ 0xd0
 8006e8c:	429c      	cmp	r4, r3
 8006e8e:	d105      	bne.n	8006e9c <std+0x54>
 8006e90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e98:	f000 ba30 	b.w	80072fc <__retarget_lock_init_recursive>
 8006e9c:	bd10      	pop	{r4, pc}
 8006e9e:	bf00      	nop
 8006ea0:	08007011 	.word	0x08007011
 8006ea4:	08007033 	.word	0x08007033
 8006ea8:	0800706b 	.word	0x0800706b
 8006eac:	0800708f 	.word	0x0800708f
 8006eb0:	20005548 	.word	0x20005548

08006eb4 <stdio_exit_handler>:
 8006eb4:	4a02      	ldr	r2, [pc, #8]	@ (8006ec0 <stdio_exit_handler+0xc>)
 8006eb6:	4903      	ldr	r1, [pc, #12]	@ (8006ec4 <stdio_exit_handler+0x10>)
 8006eb8:	4803      	ldr	r0, [pc, #12]	@ (8006ec8 <stdio_exit_handler+0x14>)
 8006eba:	f000 b869 	b.w	8006f90 <_fwalk_sglue>
 8006ebe:	bf00      	nop
 8006ec0:	20000034 	.word	0x20000034
 8006ec4:	08007c2d 	.word	0x08007c2d
 8006ec8:	20000044 	.word	0x20000044

08006ecc <cleanup_stdio>:
 8006ecc:	6841      	ldr	r1, [r0, #4]
 8006ece:	4b0c      	ldr	r3, [pc, #48]	@ (8006f00 <cleanup_stdio+0x34>)
 8006ed0:	4299      	cmp	r1, r3
 8006ed2:	b510      	push	{r4, lr}
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	d001      	beq.n	8006edc <cleanup_stdio+0x10>
 8006ed8:	f000 fea8 	bl	8007c2c <_fflush_r>
 8006edc:	68a1      	ldr	r1, [r4, #8]
 8006ede:	4b09      	ldr	r3, [pc, #36]	@ (8006f04 <cleanup_stdio+0x38>)
 8006ee0:	4299      	cmp	r1, r3
 8006ee2:	d002      	beq.n	8006eea <cleanup_stdio+0x1e>
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 fea1 	bl	8007c2c <_fflush_r>
 8006eea:	68e1      	ldr	r1, [r4, #12]
 8006eec:	4b06      	ldr	r3, [pc, #24]	@ (8006f08 <cleanup_stdio+0x3c>)
 8006eee:	4299      	cmp	r1, r3
 8006ef0:	d004      	beq.n	8006efc <cleanup_stdio+0x30>
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef8:	f000 be98 	b.w	8007c2c <_fflush_r>
 8006efc:	bd10      	pop	{r4, pc}
 8006efe:	bf00      	nop
 8006f00:	20005548 	.word	0x20005548
 8006f04:	200055b0 	.word	0x200055b0
 8006f08:	20005618 	.word	0x20005618

08006f0c <global_stdio_init.part.0>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f3c <global_stdio_init.part.0+0x30>)
 8006f10:	4c0b      	ldr	r4, [pc, #44]	@ (8006f40 <global_stdio_init.part.0+0x34>)
 8006f12:	4a0c      	ldr	r2, [pc, #48]	@ (8006f44 <global_stdio_init.part.0+0x38>)
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	4620      	mov	r0, r4
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2104      	movs	r1, #4
 8006f1c:	f7ff ff94 	bl	8006e48 <std>
 8006f20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f24:	2201      	movs	r2, #1
 8006f26:	2109      	movs	r1, #9
 8006f28:	f7ff ff8e 	bl	8006e48 <std>
 8006f2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f30:	2202      	movs	r2, #2
 8006f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f36:	2112      	movs	r1, #18
 8006f38:	f7ff bf86 	b.w	8006e48 <std>
 8006f3c:	20005680 	.word	0x20005680
 8006f40:	20005548 	.word	0x20005548
 8006f44:	08006eb5 	.word	0x08006eb5

08006f48 <__sfp_lock_acquire>:
 8006f48:	4801      	ldr	r0, [pc, #4]	@ (8006f50 <__sfp_lock_acquire+0x8>)
 8006f4a:	f000 b9d8 	b.w	80072fe <__retarget_lock_acquire_recursive>
 8006f4e:	bf00      	nop
 8006f50:	20005689 	.word	0x20005689

08006f54 <__sfp_lock_release>:
 8006f54:	4801      	ldr	r0, [pc, #4]	@ (8006f5c <__sfp_lock_release+0x8>)
 8006f56:	f000 b9d3 	b.w	8007300 <__retarget_lock_release_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20005689 	.word	0x20005689

08006f60 <__sinit>:
 8006f60:	b510      	push	{r4, lr}
 8006f62:	4604      	mov	r4, r0
 8006f64:	f7ff fff0 	bl	8006f48 <__sfp_lock_acquire>
 8006f68:	6a23      	ldr	r3, [r4, #32]
 8006f6a:	b11b      	cbz	r3, 8006f74 <__sinit+0x14>
 8006f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f70:	f7ff bff0 	b.w	8006f54 <__sfp_lock_release>
 8006f74:	4b04      	ldr	r3, [pc, #16]	@ (8006f88 <__sinit+0x28>)
 8006f76:	6223      	str	r3, [r4, #32]
 8006f78:	4b04      	ldr	r3, [pc, #16]	@ (8006f8c <__sinit+0x2c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1f5      	bne.n	8006f6c <__sinit+0xc>
 8006f80:	f7ff ffc4 	bl	8006f0c <global_stdio_init.part.0>
 8006f84:	e7f2      	b.n	8006f6c <__sinit+0xc>
 8006f86:	bf00      	nop
 8006f88:	08006ecd 	.word	0x08006ecd
 8006f8c:	20005680 	.word	0x20005680

08006f90 <_fwalk_sglue>:
 8006f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f94:	4607      	mov	r7, r0
 8006f96:	4688      	mov	r8, r1
 8006f98:	4614      	mov	r4, r2
 8006f9a:	2600      	movs	r6, #0
 8006f9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fa0:	f1b9 0901 	subs.w	r9, r9, #1
 8006fa4:	d505      	bpl.n	8006fb2 <_fwalk_sglue+0x22>
 8006fa6:	6824      	ldr	r4, [r4, #0]
 8006fa8:	2c00      	cmp	r4, #0
 8006faa:	d1f7      	bne.n	8006f9c <_fwalk_sglue+0xc>
 8006fac:	4630      	mov	r0, r6
 8006fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb2:	89ab      	ldrh	r3, [r5, #12]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d907      	bls.n	8006fc8 <_fwalk_sglue+0x38>
 8006fb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	d003      	beq.n	8006fc8 <_fwalk_sglue+0x38>
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	47c0      	blx	r8
 8006fc6:	4306      	orrs	r6, r0
 8006fc8:	3568      	adds	r5, #104	@ 0x68
 8006fca:	e7e9      	b.n	8006fa0 <_fwalk_sglue+0x10>

08006fcc <siprintf>:
 8006fcc:	b40e      	push	{r1, r2, r3}
 8006fce:	b510      	push	{r4, lr}
 8006fd0:	b09d      	sub	sp, #116	@ 0x74
 8006fd2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006fd4:	9002      	str	r0, [sp, #8]
 8006fd6:	9006      	str	r0, [sp, #24]
 8006fd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006fdc:	480a      	ldr	r0, [pc, #40]	@ (8007008 <siprintf+0x3c>)
 8006fde:	9107      	str	r1, [sp, #28]
 8006fe0:	9104      	str	r1, [sp, #16]
 8006fe2:	490a      	ldr	r1, [pc, #40]	@ (800700c <siprintf+0x40>)
 8006fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe8:	9105      	str	r1, [sp, #20]
 8006fea:	2400      	movs	r4, #0
 8006fec:	a902      	add	r1, sp, #8
 8006fee:	6800      	ldr	r0, [r0, #0]
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006ff4:	f000 fb0e 	bl	8007614 <_svfiprintf_r>
 8006ff8:	9b02      	ldr	r3, [sp, #8]
 8006ffa:	701c      	strb	r4, [r3, #0]
 8006ffc:	b01d      	add	sp, #116	@ 0x74
 8006ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007002:	b003      	add	sp, #12
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20000040 	.word	0x20000040
 800700c:	ffff0208 	.word	0xffff0208

08007010 <__sread>:
 8007010:	b510      	push	{r4, lr}
 8007012:	460c      	mov	r4, r1
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	f000 f922 	bl	8007260 <_read_r>
 800701c:	2800      	cmp	r0, #0
 800701e:	bfab      	itete	ge
 8007020:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007022:	89a3      	ldrhlt	r3, [r4, #12]
 8007024:	181b      	addge	r3, r3, r0
 8007026:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800702a:	bfac      	ite	ge
 800702c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800702e:	81a3      	strhlt	r3, [r4, #12]
 8007030:	bd10      	pop	{r4, pc}

08007032 <__swrite>:
 8007032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007036:	461f      	mov	r7, r3
 8007038:	898b      	ldrh	r3, [r1, #12]
 800703a:	05db      	lsls	r3, r3, #23
 800703c:	4605      	mov	r5, r0
 800703e:	460c      	mov	r4, r1
 8007040:	4616      	mov	r6, r2
 8007042:	d505      	bpl.n	8007050 <__swrite+0x1e>
 8007044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007048:	2302      	movs	r3, #2
 800704a:	2200      	movs	r2, #0
 800704c:	f000 f8f6 	bl	800723c <_lseek_r>
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007056:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800705a:	81a3      	strh	r3, [r4, #12]
 800705c:	4632      	mov	r2, r6
 800705e:	463b      	mov	r3, r7
 8007060:	4628      	mov	r0, r5
 8007062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007066:	f000 b90d 	b.w	8007284 <_write_r>

0800706a <__sseek>:
 800706a:	b510      	push	{r4, lr}
 800706c:	460c      	mov	r4, r1
 800706e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007072:	f000 f8e3 	bl	800723c <_lseek_r>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	bf15      	itete	ne
 800707c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800707e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007082:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007086:	81a3      	strheq	r3, [r4, #12]
 8007088:	bf18      	it	ne
 800708a:	81a3      	strhne	r3, [r4, #12]
 800708c:	bd10      	pop	{r4, pc}

0800708e <__sclose>:
 800708e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007092:	f000 b865 	b.w	8007160 <_close_r>

08007096 <memset>:
 8007096:	4402      	add	r2, r0
 8007098:	4603      	mov	r3, r0
 800709a:	4293      	cmp	r3, r2
 800709c:	d100      	bne.n	80070a0 <memset+0xa>
 800709e:	4770      	bx	lr
 80070a0:	f803 1b01 	strb.w	r1, [r3], #1
 80070a4:	e7f9      	b.n	800709a <memset+0x4>
	...

080070a8 <strtok>:
 80070a8:	4b16      	ldr	r3, [pc, #88]	@ (8007104 <strtok+0x5c>)
 80070aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ae:	681f      	ldr	r7, [r3, #0]
 80070b0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80070b2:	4605      	mov	r5, r0
 80070b4:	460e      	mov	r6, r1
 80070b6:	b9ec      	cbnz	r4, 80070f4 <strtok+0x4c>
 80070b8:	2050      	movs	r0, #80	@ 0x50
 80070ba:	f000 f999 	bl	80073f0 <malloc>
 80070be:	4602      	mov	r2, r0
 80070c0:	6478      	str	r0, [r7, #68]	@ 0x44
 80070c2:	b920      	cbnz	r0, 80070ce <strtok+0x26>
 80070c4:	4b10      	ldr	r3, [pc, #64]	@ (8007108 <strtok+0x60>)
 80070c6:	4811      	ldr	r0, [pc, #68]	@ (800710c <strtok+0x64>)
 80070c8:	215b      	movs	r1, #91	@ 0x5b
 80070ca:	f000 f929 	bl	8007320 <__assert_func>
 80070ce:	e9c0 4400 	strd	r4, r4, [r0]
 80070d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80070d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80070da:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80070de:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80070e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80070e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80070ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80070ee:	6184      	str	r4, [r0, #24]
 80070f0:	7704      	strb	r4, [r0, #28]
 80070f2:	6244      	str	r4, [r0, #36]	@ 0x24
 80070f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	2301      	movs	r3, #1
 80070fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007100:	f000 b806 	b.w	8007110 <__strtok_r>
 8007104:	20000040 	.word	0x20000040
 8007108:	08008639 	.word	0x08008639
 800710c:	08008650 	.word	0x08008650

08007110 <__strtok_r>:
 8007110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007112:	4604      	mov	r4, r0
 8007114:	b908      	cbnz	r0, 800711a <__strtok_r+0xa>
 8007116:	6814      	ldr	r4, [r2, #0]
 8007118:	b144      	cbz	r4, 800712c <__strtok_r+0x1c>
 800711a:	4620      	mov	r0, r4
 800711c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007120:	460f      	mov	r7, r1
 8007122:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007126:	b91e      	cbnz	r6, 8007130 <__strtok_r+0x20>
 8007128:	b965      	cbnz	r5, 8007144 <__strtok_r+0x34>
 800712a:	6015      	str	r5, [r2, #0]
 800712c:	2000      	movs	r0, #0
 800712e:	e005      	b.n	800713c <__strtok_r+0x2c>
 8007130:	42b5      	cmp	r5, r6
 8007132:	d1f6      	bne.n	8007122 <__strtok_r+0x12>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f0      	bne.n	800711a <__strtok_r+0xa>
 8007138:	6014      	str	r4, [r2, #0]
 800713a:	7003      	strb	r3, [r0, #0]
 800713c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800713e:	461c      	mov	r4, r3
 8007140:	e00c      	b.n	800715c <__strtok_r+0x4c>
 8007142:	b91d      	cbnz	r5, 800714c <__strtok_r+0x3c>
 8007144:	4627      	mov	r7, r4
 8007146:	f814 3b01 	ldrb.w	r3, [r4], #1
 800714a:	460e      	mov	r6, r1
 800714c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007150:	42ab      	cmp	r3, r5
 8007152:	d1f6      	bne.n	8007142 <__strtok_r+0x32>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0f2      	beq.n	800713e <__strtok_r+0x2e>
 8007158:	2300      	movs	r3, #0
 800715a:	703b      	strb	r3, [r7, #0]
 800715c:	6014      	str	r4, [r2, #0]
 800715e:	e7ed      	b.n	800713c <__strtok_r+0x2c>

08007160 <_close_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4d06      	ldr	r5, [pc, #24]	@ (800717c <_close_r+0x1c>)
 8007164:	2300      	movs	r3, #0
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	602b      	str	r3, [r5, #0]
 800716c:	f7f9 fee8 	bl	8000f40 <_close>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_close_r+0x1a>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_close_r+0x1a>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	20005684 	.word	0x20005684

08007180 <_reclaim_reent>:
 8007180:	4b2d      	ldr	r3, [pc, #180]	@ (8007238 <_reclaim_reent+0xb8>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4283      	cmp	r3, r0
 8007186:	b570      	push	{r4, r5, r6, lr}
 8007188:	4604      	mov	r4, r0
 800718a:	d053      	beq.n	8007234 <_reclaim_reent+0xb4>
 800718c:	69c3      	ldr	r3, [r0, #28]
 800718e:	b31b      	cbz	r3, 80071d8 <_reclaim_reent+0x58>
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	b163      	cbz	r3, 80071ae <_reclaim_reent+0x2e>
 8007194:	2500      	movs	r5, #0
 8007196:	69e3      	ldr	r3, [r4, #28]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	5959      	ldr	r1, [r3, r5]
 800719c:	b9b1      	cbnz	r1, 80071cc <_reclaim_reent+0x4c>
 800719e:	3504      	adds	r5, #4
 80071a0:	2d80      	cmp	r5, #128	@ 0x80
 80071a2:	d1f8      	bne.n	8007196 <_reclaim_reent+0x16>
 80071a4:	69e3      	ldr	r3, [r4, #28]
 80071a6:	4620      	mov	r0, r4
 80071a8:	68d9      	ldr	r1, [r3, #12]
 80071aa:	f000 f8d7 	bl	800735c <_free_r>
 80071ae:	69e3      	ldr	r3, [r4, #28]
 80071b0:	6819      	ldr	r1, [r3, #0]
 80071b2:	b111      	cbz	r1, 80071ba <_reclaim_reent+0x3a>
 80071b4:	4620      	mov	r0, r4
 80071b6:	f000 f8d1 	bl	800735c <_free_r>
 80071ba:	69e3      	ldr	r3, [r4, #28]
 80071bc:	689d      	ldr	r5, [r3, #8]
 80071be:	b15d      	cbz	r5, 80071d8 <_reclaim_reent+0x58>
 80071c0:	4629      	mov	r1, r5
 80071c2:	4620      	mov	r0, r4
 80071c4:	682d      	ldr	r5, [r5, #0]
 80071c6:	f000 f8c9 	bl	800735c <_free_r>
 80071ca:	e7f8      	b.n	80071be <_reclaim_reent+0x3e>
 80071cc:	680e      	ldr	r6, [r1, #0]
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 f8c4 	bl	800735c <_free_r>
 80071d4:	4631      	mov	r1, r6
 80071d6:	e7e1      	b.n	800719c <_reclaim_reent+0x1c>
 80071d8:	6961      	ldr	r1, [r4, #20]
 80071da:	b111      	cbz	r1, 80071e2 <_reclaim_reent+0x62>
 80071dc:	4620      	mov	r0, r4
 80071de:	f000 f8bd 	bl	800735c <_free_r>
 80071e2:	69e1      	ldr	r1, [r4, #28]
 80071e4:	b111      	cbz	r1, 80071ec <_reclaim_reent+0x6c>
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 f8b8 	bl	800735c <_free_r>
 80071ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80071ee:	b111      	cbz	r1, 80071f6 <_reclaim_reent+0x76>
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 f8b3 	bl	800735c <_free_r>
 80071f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071f8:	b111      	cbz	r1, 8007200 <_reclaim_reent+0x80>
 80071fa:	4620      	mov	r0, r4
 80071fc:	f000 f8ae 	bl	800735c <_free_r>
 8007200:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007202:	b111      	cbz	r1, 800720a <_reclaim_reent+0x8a>
 8007204:	4620      	mov	r0, r4
 8007206:	f000 f8a9 	bl	800735c <_free_r>
 800720a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800720c:	b111      	cbz	r1, 8007214 <_reclaim_reent+0x94>
 800720e:	4620      	mov	r0, r4
 8007210:	f000 f8a4 	bl	800735c <_free_r>
 8007214:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007216:	b111      	cbz	r1, 800721e <_reclaim_reent+0x9e>
 8007218:	4620      	mov	r0, r4
 800721a:	f000 f89f 	bl	800735c <_free_r>
 800721e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007220:	b111      	cbz	r1, 8007228 <_reclaim_reent+0xa8>
 8007222:	4620      	mov	r0, r4
 8007224:	f000 f89a 	bl	800735c <_free_r>
 8007228:	6a23      	ldr	r3, [r4, #32]
 800722a:	b11b      	cbz	r3, 8007234 <_reclaim_reent+0xb4>
 800722c:	4620      	mov	r0, r4
 800722e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007232:	4718      	bx	r3
 8007234:	bd70      	pop	{r4, r5, r6, pc}
 8007236:	bf00      	nop
 8007238:	20000040 	.word	0x20000040

0800723c <_lseek_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4d07      	ldr	r5, [pc, #28]	@ (800725c <_lseek_r+0x20>)
 8007240:	4604      	mov	r4, r0
 8007242:	4608      	mov	r0, r1
 8007244:	4611      	mov	r1, r2
 8007246:	2200      	movs	r2, #0
 8007248:	602a      	str	r2, [r5, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	f7f9 fe9f 	bl	8000f8e <_lseek>
 8007250:	1c43      	adds	r3, r0, #1
 8007252:	d102      	bne.n	800725a <_lseek_r+0x1e>
 8007254:	682b      	ldr	r3, [r5, #0]
 8007256:	b103      	cbz	r3, 800725a <_lseek_r+0x1e>
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	bd38      	pop	{r3, r4, r5, pc}
 800725c:	20005684 	.word	0x20005684

08007260 <_read_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4d07      	ldr	r5, [pc, #28]	@ (8007280 <_read_r+0x20>)
 8007264:	4604      	mov	r4, r0
 8007266:	4608      	mov	r0, r1
 8007268:	4611      	mov	r1, r2
 800726a:	2200      	movs	r2, #0
 800726c:	602a      	str	r2, [r5, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	f7f9 fe2d 	bl	8000ece <_read>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d102      	bne.n	800727e <_read_r+0x1e>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	b103      	cbz	r3, 800727e <_read_r+0x1e>
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	20005684 	.word	0x20005684

08007284 <_write_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4d07      	ldr	r5, [pc, #28]	@ (80072a4 <_write_r+0x20>)
 8007288:	4604      	mov	r4, r0
 800728a:	4608      	mov	r0, r1
 800728c:	4611      	mov	r1, r2
 800728e:	2200      	movs	r2, #0
 8007290:	602a      	str	r2, [r5, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	f7f9 fe38 	bl	8000f08 <_write>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d102      	bne.n	80072a2 <_write_r+0x1e>
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	b103      	cbz	r3, 80072a2 <_write_r+0x1e>
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	20005684 	.word	0x20005684

080072a8 <__errno>:
 80072a8:	4b01      	ldr	r3, [pc, #4]	@ (80072b0 <__errno+0x8>)
 80072aa:	6818      	ldr	r0, [r3, #0]
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	20000040 	.word	0x20000040

080072b4 <__libc_init_array>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	4d0d      	ldr	r5, [pc, #52]	@ (80072ec <__libc_init_array+0x38>)
 80072b8:	4c0d      	ldr	r4, [pc, #52]	@ (80072f0 <__libc_init_array+0x3c>)
 80072ba:	1b64      	subs	r4, r4, r5
 80072bc:	10a4      	asrs	r4, r4, #2
 80072be:	2600      	movs	r6, #0
 80072c0:	42a6      	cmp	r6, r4
 80072c2:	d109      	bne.n	80072d8 <__libc_init_array+0x24>
 80072c4:	4d0b      	ldr	r5, [pc, #44]	@ (80072f4 <__libc_init_array+0x40>)
 80072c6:	4c0c      	ldr	r4, [pc, #48]	@ (80072f8 <__libc_init_array+0x44>)
 80072c8:	f000 ffee 	bl	80082a8 <_init>
 80072cc:	1b64      	subs	r4, r4, r5
 80072ce:	10a4      	asrs	r4, r4, #2
 80072d0:	2600      	movs	r6, #0
 80072d2:	42a6      	cmp	r6, r4
 80072d4:	d105      	bne.n	80072e2 <__libc_init_array+0x2e>
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
 80072d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072dc:	4798      	blx	r3
 80072de:	3601      	adds	r6, #1
 80072e0:	e7ee      	b.n	80072c0 <__libc_init_array+0xc>
 80072e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e6:	4798      	blx	r3
 80072e8:	3601      	adds	r6, #1
 80072ea:	e7f2      	b.n	80072d2 <__libc_init_array+0x1e>
 80072ec:	08008724 	.word	0x08008724
 80072f0:	08008724 	.word	0x08008724
 80072f4:	08008724 	.word	0x08008724
 80072f8:	08008728 	.word	0x08008728

080072fc <__retarget_lock_init_recursive>:
 80072fc:	4770      	bx	lr

080072fe <__retarget_lock_acquire_recursive>:
 80072fe:	4770      	bx	lr

08007300 <__retarget_lock_release_recursive>:
 8007300:	4770      	bx	lr

08007302 <memcpy>:
 8007302:	440a      	add	r2, r1
 8007304:	4291      	cmp	r1, r2
 8007306:	f100 33ff 	add.w	r3, r0, #4294967295
 800730a:	d100      	bne.n	800730e <memcpy+0xc>
 800730c:	4770      	bx	lr
 800730e:	b510      	push	{r4, lr}
 8007310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007314:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007318:	4291      	cmp	r1, r2
 800731a:	d1f9      	bne.n	8007310 <memcpy+0xe>
 800731c:	bd10      	pop	{r4, pc}
	...

08007320 <__assert_func>:
 8007320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007322:	4614      	mov	r4, r2
 8007324:	461a      	mov	r2, r3
 8007326:	4b09      	ldr	r3, [pc, #36]	@ (800734c <__assert_func+0x2c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4605      	mov	r5, r0
 800732c:	68d8      	ldr	r0, [r3, #12]
 800732e:	b14c      	cbz	r4, 8007344 <__assert_func+0x24>
 8007330:	4b07      	ldr	r3, [pc, #28]	@ (8007350 <__assert_func+0x30>)
 8007332:	9100      	str	r1, [sp, #0]
 8007334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007338:	4906      	ldr	r1, [pc, #24]	@ (8007354 <__assert_func+0x34>)
 800733a:	462b      	mov	r3, r5
 800733c:	f000 fc9e 	bl	8007c7c <fiprintf>
 8007340:	f000 fcd8 	bl	8007cf4 <abort>
 8007344:	4b04      	ldr	r3, [pc, #16]	@ (8007358 <__assert_func+0x38>)
 8007346:	461c      	mov	r4, r3
 8007348:	e7f3      	b.n	8007332 <__assert_func+0x12>
 800734a:	bf00      	nop
 800734c:	20000040 	.word	0x20000040
 8007350:	080086aa 	.word	0x080086aa
 8007354:	080086b7 	.word	0x080086b7
 8007358:	080086e5 	.word	0x080086e5

0800735c <_free_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4605      	mov	r5, r0
 8007360:	2900      	cmp	r1, #0
 8007362:	d041      	beq.n	80073e8 <_free_r+0x8c>
 8007364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007368:	1f0c      	subs	r4, r1, #4
 800736a:	2b00      	cmp	r3, #0
 800736c:	bfb8      	it	lt
 800736e:	18e4      	addlt	r4, r4, r3
 8007370:	f000 f8e8 	bl	8007544 <__malloc_lock>
 8007374:	4a1d      	ldr	r2, [pc, #116]	@ (80073ec <_free_r+0x90>)
 8007376:	6813      	ldr	r3, [r2, #0]
 8007378:	b933      	cbnz	r3, 8007388 <_free_r+0x2c>
 800737a:	6063      	str	r3, [r4, #4]
 800737c:	6014      	str	r4, [r2, #0]
 800737e:	4628      	mov	r0, r5
 8007380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007384:	f000 b8e4 	b.w	8007550 <__malloc_unlock>
 8007388:	42a3      	cmp	r3, r4
 800738a:	d908      	bls.n	800739e <_free_r+0x42>
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	1821      	adds	r1, r4, r0
 8007390:	428b      	cmp	r3, r1
 8007392:	bf01      	itttt	eq
 8007394:	6819      	ldreq	r1, [r3, #0]
 8007396:	685b      	ldreq	r3, [r3, #4]
 8007398:	1809      	addeq	r1, r1, r0
 800739a:	6021      	streq	r1, [r4, #0]
 800739c:	e7ed      	b.n	800737a <_free_r+0x1e>
 800739e:	461a      	mov	r2, r3
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	b10b      	cbz	r3, 80073a8 <_free_r+0x4c>
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	d9fa      	bls.n	800739e <_free_r+0x42>
 80073a8:	6811      	ldr	r1, [r2, #0]
 80073aa:	1850      	adds	r0, r2, r1
 80073ac:	42a0      	cmp	r0, r4
 80073ae:	d10b      	bne.n	80073c8 <_free_r+0x6c>
 80073b0:	6820      	ldr	r0, [r4, #0]
 80073b2:	4401      	add	r1, r0
 80073b4:	1850      	adds	r0, r2, r1
 80073b6:	4283      	cmp	r3, r0
 80073b8:	6011      	str	r1, [r2, #0]
 80073ba:	d1e0      	bne.n	800737e <_free_r+0x22>
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	6053      	str	r3, [r2, #4]
 80073c2:	4408      	add	r0, r1
 80073c4:	6010      	str	r0, [r2, #0]
 80073c6:	e7da      	b.n	800737e <_free_r+0x22>
 80073c8:	d902      	bls.n	80073d0 <_free_r+0x74>
 80073ca:	230c      	movs	r3, #12
 80073cc:	602b      	str	r3, [r5, #0]
 80073ce:	e7d6      	b.n	800737e <_free_r+0x22>
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	1821      	adds	r1, r4, r0
 80073d4:	428b      	cmp	r3, r1
 80073d6:	bf04      	itt	eq
 80073d8:	6819      	ldreq	r1, [r3, #0]
 80073da:	685b      	ldreq	r3, [r3, #4]
 80073dc:	6063      	str	r3, [r4, #4]
 80073de:	bf04      	itt	eq
 80073e0:	1809      	addeq	r1, r1, r0
 80073e2:	6021      	streq	r1, [r4, #0]
 80073e4:	6054      	str	r4, [r2, #4]
 80073e6:	e7ca      	b.n	800737e <_free_r+0x22>
 80073e8:	bd38      	pop	{r3, r4, r5, pc}
 80073ea:	bf00      	nop
 80073ec:	20005690 	.word	0x20005690

080073f0 <malloc>:
 80073f0:	4b02      	ldr	r3, [pc, #8]	@ (80073fc <malloc+0xc>)
 80073f2:	4601      	mov	r1, r0
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	f000 b825 	b.w	8007444 <_malloc_r>
 80073fa:	bf00      	nop
 80073fc:	20000040 	.word	0x20000040

08007400 <sbrk_aligned>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	4e0f      	ldr	r6, [pc, #60]	@ (8007440 <sbrk_aligned+0x40>)
 8007404:	460c      	mov	r4, r1
 8007406:	6831      	ldr	r1, [r6, #0]
 8007408:	4605      	mov	r5, r0
 800740a:	b911      	cbnz	r1, 8007412 <sbrk_aligned+0x12>
 800740c:	f000 fc62 	bl	8007cd4 <_sbrk_r>
 8007410:	6030      	str	r0, [r6, #0]
 8007412:	4621      	mov	r1, r4
 8007414:	4628      	mov	r0, r5
 8007416:	f000 fc5d 	bl	8007cd4 <_sbrk_r>
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	d103      	bne.n	8007426 <sbrk_aligned+0x26>
 800741e:	f04f 34ff 	mov.w	r4, #4294967295
 8007422:	4620      	mov	r0, r4
 8007424:	bd70      	pop	{r4, r5, r6, pc}
 8007426:	1cc4      	adds	r4, r0, #3
 8007428:	f024 0403 	bic.w	r4, r4, #3
 800742c:	42a0      	cmp	r0, r4
 800742e:	d0f8      	beq.n	8007422 <sbrk_aligned+0x22>
 8007430:	1a21      	subs	r1, r4, r0
 8007432:	4628      	mov	r0, r5
 8007434:	f000 fc4e 	bl	8007cd4 <_sbrk_r>
 8007438:	3001      	adds	r0, #1
 800743a:	d1f2      	bne.n	8007422 <sbrk_aligned+0x22>
 800743c:	e7ef      	b.n	800741e <sbrk_aligned+0x1e>
 800743e:	bf00      	nop
 8007440:	2000568c 	.word	0x2000568c

08007444 <_malloc_r>:
 8007444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007448:	1ccd      	adds	r5, r1, #3
 800744a:	f025 0503 	bic.w	r5, r5, #3
 800744e:	3508      	adds	r5, #8
 8007450:	2d0c      	cmp	r5, #12
 8007452:	bf38      	it	cc
 8007454:	250c      	movcc	r5, #12
 8007456:	2d00      	cmp	r5, #0
 8007458:	4606      	mov	r6, r0
 800745a:	db01      	blt.n	8007460 <_malloc_r+0x1c>
 800745c:	42a9      	cmp	r1, r5
 800745e:	d904      	bls.n	800746a <_malloc_r+0x26>
 8007460:	230c      	movs	r3, #12
 8007462:	6033      	str	r3, [r6, #0]
 8007464:	2000      	movs	r0, #0
 8007466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800746a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007540 <_malloc_r+0xfc>
 800746e:	f000 f869 	bl	8007544 <__malloc_lock>
 8007472:	f8d8 3000 	ldr.w	r3, [r8]
 8007476:	461c      	mov	r4, r3
 8007478:	bb44      	cbnz	r4, 80074cc <_malloc_r+0x88>
 800747a:	4629      	mov	r1, r5
 800747c:	4630      	mov	r0, r6
 800747e:	f7ff ffbf 	bl	8007400 <sbrk_aligned>
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	4604      	mov	r4, r0
 8007486:	d158      	bne.n	800753a <_malloc_r+0xf6>
 8007488:	f8d8 4000 	ldr.w	r4, [r8]
 800748c:	4627      	mov	r7, r4
 800748e:	2f00      	cmp	r7, #0
 8007490:	d143      	bne.n	800751a <_malloc_r+0xd6>
 8007492:	2c00      	cmp	r4, #0
 8007494:	d04b      	beq.n	800752e <_malloc_r+0xea>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	4639      	mov	r1, r7
 800749a:	4630      	mov	r0, r6
 800749c:	eb04 0903 	add.w	r9, r4, r3
 80074a0:	f000 fc18 	bl	8007cd4 <_sbrk_r>
 80074a4:	4581      	cmp	r9, r0
 80074a6:	d142      	bne.n	800752e <_malloc_r+0xea>
 80074a8:	6821      	ldr	r1, [r4, #0]
 80074aa:	1a6d      	subs	r5, r5, r1
 80074ac:	4629      	mov	r1, r5
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7ff ffa6 	bl	8007400 <sbrk_aligned>
 80074b4:	3001      	adds	r0, #1
 80074b6:	d03a      	beq.n	800752e <_malloc_r+0xea>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	442b      	add	r3, r5
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	f8d8 3000 	ldr.w	r3, [r8]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	bb62      	cbnz	r2, 8007520 <_malloc_r+0xdc>
 80074c6:	f8c8 7000 	str.w	r7, [r8]
 80074ca:	e00f      	b.n	80074ec <_malloc_r+0xa8>
 80074cc:	6822      	ldr	r2, [r4, #0]
 80074ce:	1b52      	subs	r2, r2, r5
 80074d0:	d420      	bmi.n	8007514 <_malloc_r+0xd0>
 80074d2:	2a0b      	cmp	r2, #11
 80074d4:	d917      	bls.n	8007506 <_malloc_r+0xc2>
 80074d6:	1961      	adds	r1, r4, r5
 80074d8:	42a3      	cmp	r3, r4
 80074da:	6025      	str	r5, [r4, #0]
 80074dc:	bf18      	it	ne
 80074de:	6059      	strne	r1, [r3, #4]
 80074e0:	6863      	ldr	r3, [r4, #4]
 80074e2:	bf08      	it	eq
 80074e4:	f8c8 1000 	streq.w	r1, [r8]
 80074e8:	5162      	str	r2, [r4, r5]
 80074ea:	604b      	str	r3, [r1, #4]
 80074ec:	4630      	mov	r0, r6
 80074ee:	f000 f82f 	bl	8007550 <__malloc_unlock>
 80074f2:	f104 000b 	add.w	r0, r4, #11
 80074f6:	1d23      	adds	r3, r4, #4
 80074f8:	f020 0007 	bic.w	r0, r0, #7
 80074fc:	1ac2      	subs	r2, r0, r3
 80074fe:	bf1c      	itt	ne
 8007500:	1a1b      	subne	r3, r3, r0
 8007502:	50a3      	strne	r3, [r4, r2]
 8007504:	e7af      	b.n	8007466 <_malloc_r+0x22>
 8007506:	6862      	ldr	r2, [r4, #4]
 8007508:	42a3      	cmp	r3, r4
 800750a:	bf0c      	ite	eq
 800750c:	f8c8 2000 	streq.w	r2, [r8]
 8007510:	605a      	strne	r2, [r3, #4]
 8007512:	e7eb      	b.n	80074ec <_malloc_r+0xa8>
 8007514:	4623      	mov	r3, r4
 8007516:	6864      	ldr	r4, [r4, #4]
 8007518:	e7ae      	b.n	8007478 <_malloc_r+0x34>
 800751a:	463c      	mov	r4, r7
 800751c:	687f      	ldr	r7, [r7, #4]
 800751e:	e7b6      	b.n	800748e <_malloc_r+0x4a>
 8007520:	461a      	mov	r2, r3
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	42a3      	cmp	r3, r4
 8007526:	d1fb      	bne.n	8007520 <_malloc_r+0xdc>
 8007528:	2300      	movs	r3, #0
 800752a:	6053      	str	r3, [r2, #4]
 800752c:	e7de      	b.n	80074ec <_malloc_r+0xa8>
 800752e:	230c      	movs	r3, #12
 8007530:	6033      	str	r3, [r6, #0]
 8007532:	4630      	mov	r0, r6
 8007534:	f000 f80c 	bl	8007550 <__malloc_unlock>
 8007538:	e794      	b.n	8007464 <_malloc_r+0x20>
 800753a:	6005      	str	r5, [r0, #0]
 800753c:	e7d6      	b.n	80074ec <_malloc_r+0xa8>
 800753e:	bf00      	nop
 8007540:	20005690 	.word	0x20005690

08007544 <__malloc_lock>:
 8007544:	4801      	ldr	r0, [pc, #4]	@ (800754c <__malloc_lock+0x8>)
 8007546:	f7ff beda 	b.w	80072fe <__retarget_lock_acquire_recursive>
 800754a:	bf00      	nop
 800754c:	20005688 	.word	0x20005688

08007550 <__malloc_unlock>:
 8007550:	4801      	ldr	r0, [pc, #4]	@ (8007558 <__malloc_unlock+0x8>)
 8007552:	f7ff bed5 	b.w	8007300 <__retarget_lock_release_recursive>
 8007556:	bf00      	nop
 8007558:	20005688 	.word	0x20005688

0800755c <__ssputs_r>:
 800755c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007560:	688e      	ldr	r6, [r1, #8]
 8007562:	461f      	mov	r7, r3
 8007564:	42be      	cmp	r6, r7
 8007566:	680b      	ldr	r3, [r1, #0]
 8007568:	4682      	mov	sl, r0
 800756a:	460c      	mov	r4, r1
 800756c:	4690      	mov	r8, r2
 800756e:	d82d      	bhi.n	80075cc <__ssputs_r+0x70>
 8007570:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007574:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007578:	d026      	beq.n	80075c8 <__ssputs_r+0x6c>
 800757a:	6965      	ldr	r5, [r4, #20]
 800757c:	6909      	ldr	r1, [r1, #16]
 800757e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007582:	eba3 0901 	sub.w	r9, r3, r1
 8007586:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800758a:	1c7b      	adds	r3, r7, #1
 800758c:	444b      	add	r3, r9
 800758e:	106d      	asrs	r5, r5, #1
 8007590:	429d      	cmp	r5, r3
 8007592:	bf38      	it	cc
 8007594:	461d      	movcc	r5, r3
 8007596:	0553      	lsls	r3, r2, #21
 8007598:	d527      	bpl.n	80075ea <__ssputs_r+0x8e>
 800759a:	4629      	mov	r1, r5
 800759c:	f7ff ff52 	bl	8007444 <_malloc_r>
 80075a0:	4606      	mov	r6, r0
 80075a2:	b360      	cbz	r0, 80075fe <__ssputs_r+0xa2>
 80075a4:	6921      	ldr	r1, [r4, #16]
 80075a6:	464a      	mov	r2, r9
 80075a8:	f7ff feab 	bl	8007302 <memcpy>
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80075b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075b6:	81a3      	strh	r3, [r4, #12]
 80075b8:	6126      	str	r6, [r4, #16]
 80075ba:	6165      	str	r5, [r4, #20]
 80075bc:	444e      	add	r6, r9
 80075be:	eba5 0509 	sub.w	r5, r5, r9
 80075c2:	6026      	str	r6, [r4, #0]
 80075c4:	60a5      	str	r5, [r4, #8]
 80075c6:	463e      	mov	r6, r7
 80075c8:	42be      	cmp	r6, r7
 80075ca:	d900      	bls.n	80075ce <__ssputs_r+0x72>
 80075cc:	463e      	mov	r6, r7
 80075ce:	6820      	ldr	r0, [r4, #0]
 80075d0:	4632      	mov	r2, r6
 80075d2:	4641      	mov	r1, r8
 80075d4:	f000 fb64 	bl	8007ca0 <memmove>
 80075d8:	68a3      	ldr	r3, [r4, #8]
 80075da:	1b9b      	subs	r3, r3, r6
 80075dc:	60a3      	str	r3, [r4, #8]
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	4433      	add	r3, r6
 80075e2:	6023      	str	r3, [r4, #0]
 80075e4:	2000      	movs	r0, #0
 80075e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ea:	462a      	mov	r2, r5
 80075ec:	f000 fb89 	bl	8007d02 <_realloc_r>
 80075f0:	4606      	mov	r6, r0
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d1e0      	bne.n	80075b8 <__ssputs_r+0x5c>
 80075f6:	6921      	ldr	r1, [r4, #16]
 80075f8:	4650      	mov	r0, sl
 80075fa:	f7ff feaf 	bl	800735c <_free_r>
 80075fe:	230c      	movs	r3, #12
 8007600:	f8ca 3000 	str.w	r3, [sl]
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	f04f 30ff 	mov.w	r0, #4294967295
 8007610:	e7e9      	b.n	80075e6 <__ssputs_r+0x8a>
	...

08007614 <_svfiprintf_r>:
 8007614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	4698      	mov	r8, r3
 800761a:	898b      	ldrh	r3, [r1, #12]
 800761c:	061b      	lsls	r3, r3, #24
 800761e:	b09d      	sub	sp, #116	@ 0x74
 8007620:	4607      	mov	r7, r0
 8007622:	460d      	mov	r5, r1
 8007624:	4614      	mov	r4, r2
 8007626:	d510      	bpl.n	800764a <_svfiprintf_r+0x36>
 8007628:	690b      	ldr	r3, [r1, #16]
 800762a:	b973      	cbnz	r3, 800764a <_svfiprintf_r+0x36>
 800762c:	2140      	movs	r1, #64	@ 0x40
 800762e:	f7ff ff09 	bl	8007444 <_malloc_r>
 8007632:	6028      	str	r0, [r5, #0]
 8007634:	6128      	str	r0, [r5, #16]
 8007636:	b930      	cbnz	r0, 8007646 <_svfiprintf_r+0x32>
 8007638:	230c      	movs	r3, #12
 800763a:	603b      	str	r3, [r7, #0]
 800763c:	f04f 30ff 	mov.w	r0, #4294967295
 8007640:	b01d      	add	sp, #116	@ 0x74
 8007642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007646:	2340      	movs	r3, #64	@ 0x40
 8007648:	616b      	str	r3, [r5, #20]
 800764a:	2300      	movs	r3, #0
 800764c:	9309      	str	r3, [sp, #36]	@ 0x24
 800764e:	2320      	movs	r3, #32
 8007650:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007654:	f8cd 800c 	str.w	r8, [sp, #12]
 8007658:	2330      	movs	r3, #48	@ 0x30
 800765a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80077f8 <_svfiprintf_r+0x1e4>
 800765e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007662:	f04f 0901 	mov.w	r9, #1
 8007666:	4623      	mov	r3, r4
 8007668:	469a      	mov	sl, r3
 800766a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800766e:	b10a      	cbz	r2, 8007674 <_svfiprintf_r+0x60>
 8007670:	2a25      	cmp	r2, #37	@ 0x25
 8007672:	d1f9      	bne.n	8007668 <_svfiprintf_r+0x54>
 8007674:	ebba 0b04 	subs.w	fp, sl, r4
 8007678:	d00b      	beq.n	8007692 <_svfiprintf_r+0x7e>
 800767a:	465b      	mov	r3, fp
 800767c:	4622      	mov	r2, r4
 800767e:	4629      	mov	r1, r5
 8007680:	4638      	mov	r0, r7
 8007682:	f7ff ff6b 	bl	800755c <__ssputs_r>
 8007686:	3001      	adds	r0, #1
 8007688:	f000 80a7 	beq.w	80077da <_svfiprintf_r+0x1c6>
 800768c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800768e:	445a      	add	r2, fp
 8007690:	9209      	str	r2, [sp, #36]	@ 0x24
 8007692:	f89a 3000 	ldrb.w	r3, [sl]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 809f 	beq.w	80077da <_svfiprintf_r+0x1c6>
 800769c:	2300      	movs	r3, #0
 800769e:	f04f 32ff 	mov.w	r2, #4294967295
 80076a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076a6:	f10a 0a01 	add.w	sl, sl, #1
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	9307      	str	r3, [sp, #28]
 80076ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80076b4:	4654      	mov	r4, sl
 80076b6:	2205      	movs	r2, #5
 80076b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076bc:	484e      	ldr	r0, [pc, #312]	@ (80077f8 <_svfiprintf_r+0x1e4>)
 80076be:	f7f8 fd9f 	bl	8000200 <memchr>
 80076c2:	9a04      	ldr	r2, [sp, #16]
 80076c4:	b9d8      	cbnz	r0, 80076fe <_svfiprintf_r+0xea>
 80076c6:	06d0      	lsls	r0, r2, #27
 80076c8:	bf44      	itt	mi
 80076ca:	2320      	movmi	r3, #32
 80076cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076d0:	0711      	lsls	r1, r2, #28
 80076d2:	bf44      	itt	mi
 80076d4:	232b      	movmi	r3, #43	@ 0x2b
 80076d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076da:	f89a 3000 	ldrb.w	r3, [sl]
 80076de:	2b2a      	cmp	r3, #42	@ 0x2a
 80076e0:	d015      	beq.n	800770e <_svfiprintf_r+0xfa>
 80076e2:	9a07      	ldr	r2, [sp, #28]
 80076e4:	4654      	mov	r4, sl
 80076e6:	2000      	movs	r0, #0
 80076e8:	f04f 0c0a 	mov.w	ip, #10
 80076ec:	4621      	mov	r1, r4
 80076ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076f2:	3b30      	subs	r3, #48	@ 0x30
 80076f4:	2b09      	cmp	r3, #9
 80076f6:	d94b      	bls.n	8007790 <_svfiprintf_r+0x17c>
 80076f8:	b1b0      	cbz	r0, 8007728 <_svfiprintf_r+0x114>
 80076fa:	9207      	str	r2, [sp, #28]
 80076fc:	e014      	b.n	8007728 <_svfiprintf_r+0x114>
 80076fe:	eba0 0308 	sub.w	r3, r0, r8
 8007702:	fa09 f303 	lsl.w	r3, r9, r3
 8007706:	4313      	orrs	r3, r2
 8007708:	9304      	str	r3, [sp, #16]
 800770a:	46a2      	mov	sl, r4
 800770c:	e7d2      	b.n	80076b4 <_svfiprintf_r+0xa0>
 800770e:	9b03      	ldr	r3, [sp, #12]
 8007710:	1d19      	adds	r1, r3, #4
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	9103      	str	r1, [sp, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	bfbb      	ittet	lt
 800771a:	425b      	neglt	r3, r3
 800771c:	f042 0202 	orrlt.w	r2, r2, #2
 8007720:	9307      	strge	r3, [sp, #28]
 8007722:	9307      	strlt	r3, [sp, #28]
 8007724:	bfb8      	it	lt
 8007726:	9204      	strlt	r2, [sp, #16]
 8007728:	7823      	ldrb	r3, [r4, #0]
 800772a:	2b2e      	cmp	r3, #46	@ 0x2e
 800772c:	d10a      	bne.n	8007744 <_svfiprintf_r+0x130>
 800772e:	7863      	ldrb	r3, [r4, #1]
 8007730:	2b2a      	cmp	r3, #42	@ 0x2a
 8007732:	d132      	bne.n	800779a <_svfiprintf_r+0x186>
 8007734:	9b03      	ldr	r3, [sp, #12]
 8007736:	1d1a      	adds	r2, r3, #4
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	9203      	str	r2, [sp, #12]
 800773c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007740:	3402      	adds	r4, #2
 8007742:	9305      	str	r3, [sp, #20]
 8007744:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007808 <_svfiprintf_r+0x1f4>
 8007748:	7821      	ldrb	r1, [r4, #0]
 800774a:	2203      	movs	r2, #3
 800774c:	4650      	mov	r0, sl
 800774e:	f7f8 fd57 	bl	8000200 <memchr>
 8007752:	b138      	cbz	r0, 8007764 <_svfiprintf_r+0x150>
 8007754:	9b04      	ldr	r3, [sp, #16]
 8007756:	eba0 000a 	sub.w	r0, r0, sl
 800775a:	2240      	movs	r2, #64	@ 0x40
 800775c:	4082      	lsls	r2, r0
 800775e:	4313      	orrs	r3, r2
 8007760:	3401      	adds	r4, #1
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007768:	4824      	ldr	r0, [pc, #144]	@ (80077fc <_svfiprintf_r+0x1e8>)
 800776a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800776e:	2206      	movs	r2, #6
 8007770:	f7f8 fd46 	bl	8000200 <memchr>
 8007774:	2800      	cmp	r0, #0
 8007776:	d036      	beq.n	80077e6 <_svfiprintf_r+0x1d2>
 8007778:	4b21      	ldr	r3, [pc, #132]	@ (8007800 <_svfiprintf_r+0x1ec>)
 800777a:	bb1b      	cbnz	r3, 80077c4 <_svfiprintf_r+0x1b0>
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	3307      	adds	r3, #7
 8007780:	f023 0307 	bic.w	r3, r3, #7
 8007784:	3308      	adds	r3, #8
 8007786:	9303      	str	r3, [sp, #12]
 8007788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800778a:	4433      	add	r3, r6
 800778c:	9309      	str	r3, [sp, #36]	@ 0x24
 800778e:	e76a      	b.n	8007666 <_svfiprintf_r+0x52>
 8007790:	fb0c 3202 	mla	r2, ip, r2, r3
 8007794:	460c      	mov	r4, r1
 8007796:	2001      	movs	r0, #1
 8007798:	e7a8      	b.n	80076ec <_svfiprintf_r+0xd8>
 800779a:	2300      	movs	r3, #0
 800779c:	3401      	adds	r4, #1
 800779e:	9305      	str	r3, [sp, #20]
 80077a0:	4619      	mov	r1, r3
 80077a2:	f04f 0c0a 	mov.w	ip, #10
 80077a6:	4620      	mov	r0, r4
 80077a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ac:	3a30      	subs	r2, #48	@ 0x30
 80077ae:	2a09      	cmp	r2, #9
 80077b0:	d903      	bls.n	80077ba <_svfiprintf_r+0x1a6>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0c6      	beq.n	8007744 <_svfiprintf_r+0x130>
 80077b6:	9105      	str	r1, [sp, #20]
 80077b8:	e7c4      	b.n	8007744 <_svfiprintf_r+0x130>
 80077ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80077be:	4604      	mov	r4, r0
 80077c0:	2301      	movs	r3, #1
 80077c2:	e7f0      	b.n	80077a6 <_svfiprintf_r+0x192>
 80077c4:	ab03      	add	r3, sp, #12
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	462a      	mov	r2, r5
 80077ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007804 <_svfiprintf_r+0x1f0>)
 80077cc:	a904      	add	r1, sp, #16
 80077ce:	4638      	mov	r0, r7
 80077d0:	f3af 8000 	nop.w
 80077d4:	1c42      	adds	r2, r0, #1
 80077d6:	4606      	mov	r6, r0
 80077d8:	d1d6      	bne.n	8007788 <_svfiprintf_r+0x174>
 80077da:	89ab      	ldrh	r3, [r5, #12]
 80077dc:	065b      	lsls	r3, r3, #25
 80077de:	f53f af2d 	bmi.w	800763c <_svfiprintf_r+0x28>
 80077e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077e4:	e72c      	b.n	8007640 <_svfiprintf_r+0x2c>
 80077e6:	ab03      	add	r3, sp, #12
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	462a      	mov	r2, r5
 80077ec:	4b05      	ldr	r3, [pc, #20]	@ (8007804 <_svfiprintf_r+0x1f0>)
 80077ee:	a904      	add	r1, sp, #16
 80077f0:	4638      	mov	r0, r7
 80077f2:	f000 f879 	bl	80078e8 <_printf_i>
 80077f6:	e7ed      	b.n	80077d4 <_svfiprintf_r+0x1c0>
 80077f8:	080086e6 	.word	0x080086e6
 80077fc:	080086f0 	.word	0x080086f0
 8007800:	00000000 	.word	0x00000000
 8007804:	0800755d 	.word	0x0800755d
 8007808:	080086ec 	.word	0x080086ec

0800780c <_printf_common>:
 800780c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	4616      	mov	r6, r2
 8007812:	4698      	mov	r8, r3
 8007814:	688a      	ldr	r2, [r1, #8]
 8007816:	690b      	ldr	r3, [r1, #16]
 8007818:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800781c:	4293      	cmp	r3, r2
 800781e:	bfb8      	it	lt
 8007820:	4613      	movlt	r3, r2
 8007822:	6033      	str	r3, [r6, #0]
 8007824:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007828:	4607      	mov	r7, r0
 800782a:	460c      	mov	r4, r1
 800782c:	b10a      	cbz	r2, 8007832 <_printf_common+0x26>
 800782e:	3301      	adds	r3, #1
 8007830:	6033      	str	r3, [r6, #0]
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	0699      	lsls	r1, r3, #26
 8007836:	bf42      	ittt	mi
 8007838:	6833      	ldrmi	r3, [r6, #0]
 800783a:	3302      	addmi	r3, #2
 800783c:	6033      	strmi	r3, [r6, #0]
 800783e:	6825      	ldr	r5, [r4, #0]
 8007840:	f015 0506 	ands.w	r5, r5, #6
 8007844:	d106      	bne.n	8007854 <_printf_common+0x48>
 8007846:	f104 0a19 	add.w	sl, r4, #25
 800784a:	68e3      	ldr	r3, [r4, #12]
 800784c:	6832      	ldr	r2, [r6, #0]
 800784e:	1a9b      	subs	r3, r3, r2
 8007850:	42ab      	cmp	r3, r5
 8007852:	dc26      	bgt.n	80078a2 <_printf_common+0x96>
 8007854:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007858:	6822      	ldr	r2, [r4, #0]
 800785a:	3b00      	subs	r3, #0
 800785c:	bf18      	it	ne
 800785e:	2301      	movne	r3, #1
 8007860:	0692      	lsls	r2, r2, #26
 8007862:	d42b      	bmi.n	80078bc <_printf_common+0xb0>
 8007864:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007868:	4641      	mov	r1, r8
 800786a:	4638      	mov	r0, r7
 800786c:	47c8      	blx	r9
 800786e:	3001      	adds	r0, #1
 8007870:	d01e      	beq.n	80078b0 <_printf_common+0xa4>
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	6922      	ldr	r2, [r4, #16]
 8007876:	f003 0306 	and.w	r3, r3, #6
 800787a:	2b04      	cmp	r3, #4
 800787c:	bf02      	ittt	eq
 800787e:	68e5      	ldreq	r5, [r4, #12]
 8007880:	6833      	ldreq	r3, [r6, #0]
 8007882:	1aed      	subeq	r5, r5, r3
 8007884:	68a3      	ldr	r3, [r4, #8]
 8007886:	bf0c      	ite	eq
 8007888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800788c:	2500      	movne	r5, #0
 800788e:	4293      	cmp	r3, r2
 8007890:	bfc4      	itt	gt
 8007892:	1a9b      	subgt	r3, r3, r2
 8007894:	18ed      	addgt	r5, r5, r3
 8007896:	2600      	movs	r6, #0
 8007898:	341a      	adds	r4, #26
 800789a:	42b5      	cmp	r5, r6
 800789c:	d11a      	bne.n	80078d4 <_printf_common+0xc8>
 800789e:	2000      	movs	r0, #0
 80078a0:	e008      	b.n	80078b4 <_printf_common+0xa8>
 80078a2:	2301      	movs	r3, #1
 80078a4:	4652      	mov	r2, sl
 80078a6:	4641      	mov	r1, r8
 80078a8:	4638      	mov	r0, r7
 80078aa:	47c8      	blx	r9
 80078ac:	3001      	adds	r0, #1
 80078ae:	d103      	bne.n	80078b8 <_printf_common+0xac>
 80078b0:	f04f 30ff 	mov.w	r0, #4294967295
 80078b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b8:	3501      	adds	r5, #1
 80078ba:	e7c6      	b.n	800784a <_printf_common+0x3e>
 80078bc:	18e1      	adds	r1, r4, r3
 80078be:	1c5a      	adds	r2, r3, #1
 80078c0:	2030      	movs	r0, #48	@ 0x30
 80078c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078c6:	4422      	add	r2, r4
 80078c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078d0:	3302      	adds	r3, #2
 80078d2:	e7c7      	b.n	8007864 <_printf_common+0x58>
 80078d4:	2301      	movs	r3, #1
 80078d6:	4622      	mov	r2, r4
 80078d8:	4641      	mov	r1, r8
 80078da:	4638      	mov	r0, r7
 80078dc:	47c8      	blx	r9
 80078de:	3001      	adds	r0, #1
 80078e0:	d0e6      	beq.n	80078b0 <_printf_common+0xa4>
 80078e2:	3601      	adds	r6, #1
 80078e4:	e7d9      	b.n	800789a <_printf_common+0x8e>
	...

080078e8 <_printf_i>:
 80078e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078ec:	7e0f      	ldrb	r7, [r1, #24]
 80078ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078f0:	2f78      	cmp	r7, #120	@ 0x78
 80078f2:	4691      	mov	r9, r2
 80078f4:	4680      	mov	r8, r0
 80078f6:	460c      	mov	r4, r1
 80078f8:	469a      	mov	sl, r3
 80078fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078fe:	d807      	bhi.n	8007910 <_printf_i+0x28>
 8007900:	2f62      	cmp	r7, #98	@ 0x62
 8007902:	d80a      	bhi.n	800791a <_printf_i+0x32>
 8007904:	2f00      	cmp	r7, #0
 8007906:	f000 80d1 	beq.w	8007aac <_printf_i+0x1c4>
 800790a:	2f58      	cmp	r7, #88	@ 0x58
 800790c:	f000 80b8 	beq.w	8007a80 <_printf_i+0x198>
 8007910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007914:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007918:	e03a      	b.n	8007990 <_printf_i+0xa8>
 800791a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800791e:	2b15      	cmp	r3, #21
 8007920:	d8f6      	bhi.n	8007910 <_printf_i+0x28>
 8007922:	a101      	add	r1, pc, #4	@ (adr r1, 8007928 <_printf_i+0x40>)
 8007924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007928:	08007981 	.word	0x08007981
 800792c:	08007995 	.word	0x08007995
 8007930:	08007911 	.word	0x08007911
 8007934:	08007911 	.word	0x08007911
 8007938:	08007911 	.word	0x08007911
 800793c:	08007911 	.word	0x08007911
 8007940:	08007995 	.word	0x08007995
 8007944:	08007911 	.word	0x08007911
 8007948:	08007911 	.word	0x08007911
 800794c:	08007911 	.word	0x08007911
 8007950:	08007911 	.word	0x08007911
 8007954:	08007a93 	.word	0x08007a93
 8007958:	080079bf 	.word	0x080079bf
 800795c:	08007a4d 	.word	0x08007a4d
 8007960:	08007911 	.word	0x08007911
 8007964:	08007911 	.word	0x08007911
 8007968:	08007ab5 	.word	0x08007ab5
 800796c:	08007911 	.word	0x08007911
 8007970:	080079bf 	.word	0x080079bf
 8007974:	08007911 	.word	0x08007911
 8007978:	08007911 	.word	0x08007911
 800797c:	08007a55 	.word	0x08007a55
 8007980:	6833      	ldr	r3, [r6, #0]
 8007982:	1d1a      	adds	r2, r3, #4
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6032      	str	r2, [r6, #0]
 8007988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800798c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007990:	2301      	movs	r3, #1
 8007992:	e09c      	b.n	8007ace <_printf_i+0x1e6>
 8007994:	6833      	ldr	r3, [r6, #0]
 8007996:	6820      	ldr	r0, [r4, #0]
 8007998:	1d19      	adds	r1, r3, #4
 800799a:	6031      	str	r1, [r6, #0]
 800799c:	0606      	lsls	r6, r0, #24
 800799e:	d501      	bpl.n	80079a4 <_printf_i+0xbc>
 80079a0:	681d      	ldr	r5, [r3, #0]
 80079a2:	e003      	b.n	80079ac <_printf_i+0xc4>
 80079a4:	0645      	lsls	r5, r0, #25
 80079a6:	d5fb      	bpl.n	80079a0 <_printf_i+0xb8>
 80079a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079ac:	2d00      	cmp	r5, #0
 80079ae:	da03      	bge.n	80079b8 <_printf_i+0xd0>
 80079b0:	232d      	movs	r3, #45	@ 0x2d
 80079b2:	426d      	negs	r5, r5
 80079b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079b8:	4858      	ldr	r0, [pc, #352]	@ (8007b1c <_printf_i+0x234>)
 80079ba:	230a      	movs	r3, #10
 80079bc:	e011      	b.n	80079e2 <_printf_i+0xfa>
 80079be:	6821      	ldr	r1, [r4, #0]
 80079c0:	6833      	ldr	r3, [r6, #0]
 80079c2:	0608      	lsls	r0, r1, #24
 80079c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80079c8:	d402      	bmi.n	80079d0 <_printf_i+0xe8>
 80079ca:	0649      	lsls	r1, r1, #25
 80079cc:	bf48      	it	mi
 80079ce:	b2ad      	uxthmi	r5, r5
 80079d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80079d2:	4852      	ldr	r0, [pc, #328]	@ (8007b1c <_printf_i+0x234>)
 80079d4:	6033      	str	r3, [r6, #0]
 80079d6:	bf14      	ite	ne
 80079d8:	230a      	movne	r3, #10
 80079da:	2308      	moveq	r3, #8
 80079dc:	2100      	movs	r1, #0
 80079de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079e2:	6866      	ldr	r6, [r4, #4]
 80079e4:	60a6      	str	r6, [r4, #8]
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	db05      	blt.n	80079f6 <_printf_i+0x10e>
 80079ea:	6821      	ldr	r1, [r4, #0]
 80079ec:	432e      	orrs	r6, r5
 80079ee:	f021 0104 	bic.w	r1, r1, #4
 80079f2:	6021      	str	r1, [r4, #0]
 80079f4:	d04b      	beq.n	8007a8e <_printf_i+0x1a6>
 80079f6:	4616      	mov	r6, r2
 80079f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80079fc:	fb03 5711 	mls	r7, r3, r1, r5
 8007a00:	5dc7      	ldrb	r7, [r0, r7]
 8007a02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a06:	462f      	mov	r7, r5
 8007a08:	42bb      	cmp	r3, r7
 8007a0a:	460d      	mov	r5, r1
 8007a0c:	d9f4      	bls.n	80079f8 <_printf_i+0x110>
 8007a0e:	2b08      	cmp	r3, #8
 8007a10:	d10b      	bne.n	8007a2a <_printf_i+0x142>
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	07df      	lsls	r7, r3, #31
 8007a16:	d508      	bpl.n	8007a2a <_printf_i+0x142>
 8007a18:	6923      	ldr	r3, [r4, #16]
 8007a1a:	6861      	ldr	r1, [r4, #4]
 8007a1c:	4299      	cmp	r1, r3
 8007a1e:	bfde      	ittt	le
 8007a20:	2330      	movle	r3, #48	@ 0x30
 8007a22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a2a:	1b92      	subs	r2, r2, r6
 8007a2c:	6122      	str	r2, [r4, #16]
 8007a2e:	f8cd a000 	str.w	sl, [sp]
 8007a32:	464b      	mov	r3, r9
 8007a34:	aa03      	add	r2, sp, #12
 8007a36:	4621      	mov	r1, r4
 8007a38:	4640      	mov	r0, r8
 8007a3a:	f7ff fee7 	bl	800780c <_printf_common>
 8007a3e:	3001      	adds	r0, #1
 8007a40:	d14a      	bne.n	8007ad8 <_printf_i+0x1f0>
 8007a42:	f04f 30ff 	mov.w	r0, #4294967295
 8007a46:	b004      	add	sp, #16
 8007a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	f043 0320 	orr.w	r3, r3, #32
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	4832      	ldr	r0, [pc, #200]	@ (8007b20 <_printf_i+0x238>)
 8007a56:	2778      	movs	r7, #120	@ 0x78
 8007a58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	6831      	ldr	r1, [r6, #0]
 8007a60:	061f      	lsls	r7, r3, #24
 8007a62:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a66:	d402      	bmi.n	8007a6e <_printf_i+0x186>
 8007a68:	065f      	lsls	r7, r3, #25
 8007a6a:	bf48      	it	mi
 8007a6c:	b2ad      	uxthmi	r5, r5
 8007a6e:	6031      	str	r1, [r6, #0]
 8007a70:	07d9      	lsls	r1, r3, #31
 8007a72:	bf44      	itt	mi
 8007a74:	f043 0320 	orrmi.w	r3, r3, #32
 8007a78:	6023      	strmi	r3, [r4, #0]
 8007a7a:	b11d      	cbz	r5, 8007a84 <_printf_i+0x19c>
 8007a7c:	2310      	movs	r3, #16
 8007a7e:	e7ad      	b.n	80079dc <_printf_i+0xf4>
 8007a80:	4826      	ldr	r0, [pc, #152]	@ (8007b1c <_printf_i+0x234>)
 8007a82:	e7e9      	b.n	8007a58 <_printf_i+0x170>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	f023 0320 	bic.w	r3, r3, #32
 8007a8a:	6023      	str	r3, [r4, #0]
 8007a8c:	e7f6      	b.n	8007a7c <_printf_i+0x194>
 8007a8e:	4616      	mov	r6, r2
 8007a90:	e7bd      	b.n	8007a0e <_printf_i+0x126>
 8007a92:	6833      	ldr	r3, [r6, #0]
 8007a94:	6825      	ldr	r5, [r4, #0]
 8007a96:	6961      	ldr	r1, [r4, #20]
 8007a98:	1d18      	adds	r0, r3, #4
 8007a9a:	6030      	str	r0, [r6, #0]
 8007a9c:	062e      	lsls	r6, r5, #24
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	d501      	bpl.n	8007aa6 <_printf_i+0x1be>
 8007aa2:	6019      	str	r1, [r3, #0]
 8007aa4:	e002      	b.n	8007aac <_printf_i+0x1c4>
 8007aa6:	0668      	lsls	r0, r5, #25
 8007aa8:	d5fb      	bpl.n	8007aa2 <_printf_i+0x1ba>
 8007aaa:	8019      	strh	r1, [r3, #0]
 8007aac:	2300      	movs	r3, #0
 8007aae:	6123      	str	r3, [r4, #16]
 8007ab0:	4616      	mov	r6, r2
 8007ab2:	e7bc      	b.n	8007a2e <_printf_i+0x146>
 8007ab4:	6833      	ldr	r3, [r6, #0]
 8007ab6:	1d1a      	adds	r2, r3, #4
 8007ab8:	6032      	str	r2, [r6, #0]
 8007aba:	681e      	ldr	r6, [r3, #0]
 8007abc:	6862      	ldr	r2, [r4, #4]
 8007abe:	2100      	movs	r1, #0
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f7f8 fb9d 	bl	8000200 <memchr>
 8007ac6:	b108      	cbz	r0, 8007acc <_printf_i+0x1e4>
 8007ac8:	1b80      	subs	r0, r0, r6
 8007aca:	6060      	str	r0, [r4, #4]
 8007acc:	6863      	ldr	r3, [r4, #4]
 8007ace:	6123      	str	r3, [r4, #16]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ad6:	e7aa      	b.n	8007a2e <_printf_i+0x146>
 8007ad8:	6923      	ldr	r3, [r4, #16]
 8007ada:	4632      	mov	r2, r6
 8007adc:	4649      	mov	r1, r9
 8007ade:	4640      	mov	r0, r8
 8007ae0:	47d0      	blx	sl
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	d0ad      	beq.n	8007a42 <_printf_i+0x15a>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	079b      	lsls	r3, r3, #30
 8007aea:	d413      	bmi.n	8007b14 <_printf_i+0x22c>
 8007aec:	68e0      	ldr	r0, [r4, #12]
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	4298      	cmp	r0, r3
 8007af2:	bfb8      	it	lt
 8007af4:	4618      	movlt	r0, r3
 8007af6:	e7a6      	b.n	8007a46 <_printf_i+0x15e>
 8007af8:	2301      	movs	r3, #1
 8007afa:	4632      	mov	r2, r6
 8007afc:	4649      	mov	r1, r9
 8007afe:	4640      	mov	r0, r8
 8007b00:	47d0      	blx	sl
 8007b02:	3001      	adds	r0, #1
 8007b04:	d09d      	beq.n	8007a42 <_printf_i+0x15a>
 8007b06:	3501      	adds	r5, #1
 8007b08:	68e3      	ldr	r3, [r4, #12]
 8007b0a:	9903      	ldr	r1, [sp, #12]
 8007b0c:	1a5b      	subs	r3, r3, r1
 8007b0e:	42ab      	cmp	r3, r5
 8007b10:	dcf2      	bgt.n	8007af8 <_printf_i+0x210>
 8007b12:	e7eb      	b.n	8007aec <_printf_i+0x204>
 8007b14:	2500      	movs	r5, #0
 8007b16:	f104 0619 	add.w	r6, r4, #25
 8007b1a:	e7f5      	b.n	8007b08 <_printf_i+0x220>
 8007b1c:	080086f7 	.word	0x080086f7
 8007b20:	08008708 	.word	0x08008708

08007b24 <__sflush_r>:
 8007b24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2c:	0716      	lsls	r6, r2, #28
 8007b2e:	4605      	mov	r5, r0
 8007b30:	460c      	mov	r4, r1
 8007b32:	d454      	bmi.n	8007bde <__sflush_r+0xba>
 8007b34:	684b      	ldr	r3, [r1, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dc02      	bgt.n	8007b40 <__sflush_r+0x1c>
 8007b3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	dd48      	ble.n	8007bd2 <__sflush_r+0xae>
 8007b40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b42:	2e00      	cmp	r6, #0
 8007b44:	d045      	beq.n	8007bd2 <__sflush_r+0xae>
 8007b46:	2300      	movs	r3, #0
 8007b48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b4c:	682f      	ldr	r7, [r5, #0]
 8007b4e:	6a21      	ldr	r1, [r4, #32]
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	d030      	beq.n	8007bb6 <__sflush_r+0x92>
 8007b54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	0759      	lsls	r1, r3, #29
 8007b5a:	d505      	bpl.n	8007b68 <__sflush_r+0x44>
 8007b5c:	6863      	ldr	r3, [r4, #4]
 8007b5e:	1ad2      	subs	r2, r2, r3
 8007b60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b62:	b10b      	cbz	r3, 8007b68 <__sflush_r+0x44>
 8007b64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b66:	1ad2      	subs	r2, r2, r3
 8007b68:	2300      	movs	r3, #0
 8007b6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b6c:	6a21      	ldr	r1, [r4, #32]
 8007b6e:	4628      	mov	r0, r5
 8007b70:	47b0      	blx	r6
 8007b72:	1c43      	adds	r3, r0, #1
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	d106      	bne.n	8007b86 <__sflush_r+0x62>
 8007b78:	6829      	ldr	r1, [r5, #0]
 8007b7a:	291d      	cmp	r1, #29
 8007b7c:	d82b      	bhi.n	8007bd6 <__sflush_r+0xb2>
 8007b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8007c28 <__sflush_r+0x104>)
 8007b80:	40ca      	lsrs	r2, r1
 8007b82:	07d6      	lsls	r6, r2, #31
 8007b84:	d527      	bpl.n	8007bd6 <__sflush_r+0xb2>
 8007b86:	2200      	movs	r2, #0
 8007b88:	6062      	str	r2, [r4, #4]
 8007b8a:	04d9      	lsls	r1, r3, #19
 8007b8c:	6922      	ldr	r2, [r4, #16]
 8007b8e:	6022      	str	r2, [r4, #0]
 8007b90:	d504      	bpl.n	8007b9c <__sflush_r+0x78>
 8007b92:	1c42      	adds	r2, r0, #1
 8007b94:	d101      	bne.n	8007b9a <__sflush_r+0x76>
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	b903      	cbnz	r3, 8007b9c <__sflush_r+0x78>
 8007b9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b9e:	602f      	str	r7, [r5, #0]
 8007ba0:	b1b9      	cbz	r1, 8007bd2 <__sflush_r+0xae>
 8007ba2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ba6:	4299      	cmp	r1, r3
 8007ba8:	d002      	beq.n	8007bb0 <__sflush_r+0x8c>
 8007baa:	4628      	mov	r0, r5
 8007bac:	f7ff fbd6 	bl	800735c <_free_r>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bb4:	e00d      	b.n	8007bd2 <__sflush_r+0xae>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b0      	blx	r6
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	1c50      	adds	r0, r2, #1
 8007bc0:	d1c9      	bne.n	8007b56 <__sflush_r+0x32>
 8007bc2:	682b      	ldr	r3, [r5, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0c6      	beq.n	8007b56 <__sflush_r+0x32>
 8007bc8:	2b1d      	cmp	r3, #29
 8007bca:	d001      	beq.n	8007bd0 <__sflush_r+0xac>
 8007bcc:	2b16      	cmp	r3, #22
 8007bce:	d11e      	bne.n	8007c0e <__sflush_r+0xea>
 8007bd0:	602f      	str	r7, [r5, #0]
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	e022      	b.n	8007c1c <__sflush_r+0xf8>
 8007bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bda:	b21b      	sxth	r3, r3
 8007bdc:	e01b      	b.n	8007c16 <__sflush_r+0xf2>
 8007bde:	690f      	ldr	r7, [r1, #16]
 8007be0:	2f00      	cmp	r7, #0
 8007be2:	d0f6      	beq.n	8007bd2 <__sflush_r+0xae>
 8007be4:	0793      	lsls	r3, r2, #30
 8007be6:	680e      	ldr	r6, [r1, #0]
 8007be8:	bf08      	it	eq
 8007bea:	694b      	ldreq	r3, [r1, #20]
 8007bec:	600f      	str	r7, [r1, #0]
 8007bee:	bf18      	it	ne
 8007bf0:	2300      	movne	r3, #0
 8007bf2:	eba6 0807 	sub.w	r8, r6, r7
 8007bf6:	608b      	str	r3, [r1, #8]
 8007bf8:	f1b8 0f00 	cmp.w	r8, #0
 8007bfc:	dde9      	ble.n	8007bd2 <__sflush_r+0xae>
 8007bfe:	6a21      	ldr	r1, [r4, #32]
 8007c00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c02:	4643      	mov	r3, r8
 8007c04:	463a      	mov	r2, r7
 8007c06:	4628      	mov	r0, r5
 8007c08:	47b0      	blx	r6
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	dc08      	bgt.n	8007c20 <__sflush_r+0xfc>
 8007c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c16:	81a3      	strh	r3, [r4, #12]
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c20:	4407      	add	r7, r0
 8007c22:	eba8 0800 	sub.w	r8, r8, r0
 8007c26:	e7e7      	b.n	8007bf8 <__sflush_r+0xd4>
 8007c28:	20400001 	.word	0x20400001

08007c2c <_fflush_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	690b      	ldr	r3, [r1, #16]
 8007c30:	4605      	mov	r5, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	b913      	cbnz	r3, 8007c3c <_fflush_r+0x10>
 8007c36:	2500      	movs	r5, #0
 8007c38:	4628      	mov	r0, r5
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	b118      	cbz	r0, 8007c46 <_fflush_r+0x1a>
 8007c3e:	6a03      	ldr	r3, [r0, #32]
 8007c40:	b90b      	cbnz	r3, 8007c46 <_fflush_r+0x1a>
 8007c42:	f7ff f98d 	bl	8006f60 <__sinit>
 8007c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0f3      	beq.n	8007c36 <_fflush_r+0xa>
 8007c4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c50:	07d0      	lsls	r0, r2, #31
 8007c52:	d404      	bmi.n	8007c5e <_fflush_r+0x32>
 8007c54:	0599      	lsls	r1, r3, #22
 8007c56:	d402      	bmi.n	8007c5e <_fflush_r+0x32>
 8007c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c5a:	f7ff fb50 	bl	80072fe <__retarget_lock_acquire_recursive>
 8007c5e:	4628      	mov	r0, r5
 8007c60:	4621      	mov	r1, r4
 8007c62:	f7ff ff5f 	bl	8007b24 <__sflush_r>
 8007c66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c68:	07da      	lsls	r2, r3, #31
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	d4e4      	bmi.n	8007c38 <_fflush_r+0xc>
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	059b      	lsls	r3, r3, #22
 8007c72:	d4e1      	bmi.n	8007c38 <_fflush_r+0xc>
 8007c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c76:	f7ff fb43 	bl	8007300 <__retarget_lock_release_recursive>
 8007c7a:	e7dd      	b.n	8007c38 <_fflush_r+0xc>

08007c7c <fiprintf>:
 8007c7c:	b40e      	push	{r1, r2, r3}
 8007c7e:	b503      	push	{r0, r1, lr}
 8007c80:	4601      	mov	r1, r0
 8007c82:	ab03      	add	r3, sp, #12
 8007c84:	4805      	ldr	r0, [pc, #20]	@ (8007c9c <fiprintf+0x20>)
 8007c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c8a:	6800      	ldr	r0, [r0, #0]
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	f000 f88f 	bl	8007db0 <_vfiprintf_r>
 8007c92:	b002      	add	sp, #8
 8007c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c98:	b003      	add	sp, #12
 8007c9a:	4770      	bx	lr
 8007c9c:	20000040 	.word	0x20000040

08007ca0 <memmove>:
 8007ca0:	4288      	cmp	r0, r1
 8007ca2:	b510      	push	{r4, lr}
 8007ca4:	eb01 0402 	add.w	r4, r1, r2
 8007ca8:	d902      	bls.n	8007cb0 <memmove+0x10>
 8007caa:	4284      	cmp	r4, r0
 8007cac:	4623      	mov	r3, r4
 8007cae:	d807      	bhi.n	8007cc0 <memmove+0x20>
 8007cb0:	1e43      	subs	r3, r0, #1
 8007cb2:	42a1      	cmp	r1, r4
 8007cb4:	d008      	beq.n	8007cc8 <memmove+0x28>
 8007cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cbe:	e7f8      	b.n	8007cb2 <memmove+0x12>
 8007cc0:	4402      	add	r2, r0
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	428a      	cmp	r2, r1
 8007cc6:	d100      	bne.n	8007cca <memmove+0x2a>
 8007cc8:	bd10      	pop	{r4, pc}
 8007cca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cd2:	e7f7      	b.n	8007cc4 <memmove+0x24>

08007cd4 <_sbrk_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d06      	ldr	r5, [pc, #24]	@ (8007cf0 <_sbrk_r+0x1c>)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	f7f9 f962 	bl	8000fa8 <_sbrk>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_sbrk_r+0x1a>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_sbrk_r+0x1a>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	20005684 	.word	0x20005684

08007cf4 <abort>:
 8007cf4:	b508      	push	{r3, lr}
 8007cf6:	2006      	movs	r0, #6
 8007cf8:	f000 fa2e 	bl	8008158 <raise>
 8007cfc:	2001      	movs	r0, #1
 8007cfe:	f7f9 f8db 	bl	8000eb8 <_exit>

08007d02 <_realloc_r>:
 8007d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d06:	4607      	mov	r7, r0
 8007d08:	4614      	mov	r4, r2
 8007d0a:	460d      	mov	r5, r1
 8007d0c:	b921      	cbnz	r1, 8007d18 <_realloc_r+0x16>
 8007d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d12:	4611      	mov	r1, r2
 8007d14:	f7ff bb96 	b.w	8007444 <_malloc_r>
 8007d18:	b92a      	cbnz	r2, 8007d26 <_realloc_r+0x24>
 8007d1a:	f7ff fb1f 	bl	800735c <_free_r>
 8007d1e:	4625      	mov	r5, r4
 8007d20:	4628      	mov	r0, r5
 8007d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d26:	f000 fa33 	bl	8008190 <_malloc_usable_size_r>
 8007d2a:	4284      	cmp	r4, r0
 8007d2c:	4606      	mov	r6, r0
 8007d2e:	d802      	bhi.n	8007d36 <_realloc_r+0x34>
 8007d30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d34:	d8f4      	bhi.n	8007d20 <_realloc_r+0x1e>
 8007d36:	4621      	mov	r1, r4
 8007d38:	4638      	mov	r0, r7
 8007d3a:	f7ff fb83 	bl	8007444 <_malloc_r>
 8007d3e:	4680      	mov	r8, r0
 8007d40:	b908      	cbnz	r0, 8007d46 <_realloc_r+0x44>
 8007d42:	4645      	mov	r5, r8
 8007d44:	e7ec      	b.n	8007d20 <_realloc_r+0x1e>
 8007d46:	42b4      	cmp	r4, r6
 8007d48:	4622      	mov	r2, r4
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	bf28      	it	cs
 8007d4e:	4632      	movcs	r2, r6
 8007d50:	f7ff fad7 	bl	8007302 <memcpy>
 8007d54:	4629      	mov	r1, r5
 8007d56:	4638      	mov	r0, r7
 8007d58:	f7ff fb00 	bl	800735c <_free_r>
 8007d5c:	e7f1      	b.n	8007d42 <_realloc_r+0x40>

08007d5e <__sfputc_r>:
 8007d5e:	6893      	ldr	r3, [r2, #8]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	b410      	push	{r4}
 8007d66:	6093      	str	r3, [r2, #8]
 8007d68:	da08      	bge.n	8007d7c <__sfputc_r+0x1e>
 8007d6a:	6994      	ldr	r4, [r2, #24]
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	db01      	blt.n	8007d74 <__sfputc_r+0x16>
 8007d70:	290a      	cmp	r1, #10
 8007d72:	d103      	bne.n	8007d7c <__sfputc_r+0x1e>
 8007d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d78:	f000 b932 	b.w	8007fe0 <__swbuf_r>
 8007d7c:	6813      	ldr	r3, [r2, #0]
 8007d7e:	1c58      	adds	r0, r3, #1
 8007d80:	6010      	str	r0, [r2, #0]
 8007d82:	7019      	strb	r1, [r3, #0]
 8007d84:	4608      	mov	r0, r1
 8007d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <__sfputs_r>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460f      	mov	r7, r1
 8007d92:	4614      	mov	r4, r2
 8007d94:	18d5      	adds	r5, r2, r3
 8007d96:	42ac      	cmp	r4, r5
 8007d98:	d101      	bne.n	8007d9e <__sfputs_r+0x12>
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	e007      	b.n	8007dae <__sfputs_r+0x22>
 8007d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da2:	463a      	mov	r2, r7
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff ffda 	bl	8007d5e <__sfputc_r>
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	d1f3      	bne.n	8007d96 <__sfputs_r+0xa>
 8007dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007db0 <_vfiprintf_r>:
 8007db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db4:	460d      	mov	r5, r1
 8007db6:	b09d      	sub	sp, #116	@ 0x74
 8007db8:	4614      	mov	r4, r2
 8007dba:	4698      	mov	r8, r3
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	b118      	cbz	r0, 8007dc8 <_vfiprintf_r+0x18>
 8007dc0:	6a03      	ldr	r3, [r0, #32]
 8007dc2:	b90b      	cbnz	r3, 8007dc8 <_vfiprintf_r+0x18>
 8007dc4:	f7ff f8cc 	bl	8006f60 <__sinit>
 8007dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dca:	07d9      	lsls	r1, r3, #31
 8007dcc:	d405      	bmi.n	8007dda <_vfiprintf_r+0x2a>
 8007dce:	89ab      	ldrh	r3, [r5, #12]
 8007dd0:	059a      	lsls	r2, r3, #22
 8007dd2:	d402      	bmi.n	8007dda <_vfiprintf_r+0x2a>
 8007dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dd6:	f7ff fa92 	bl	80072fe <__retarget_lock_acquire_recursive>
 8007dda:	89ab      	ldrh	r3, [r5, #12]
 8007ddc:	071b      	lsls	r3, r3, #28
 8007dde:	d501      	bpl.n	8007de4 <_vfiprintf_r+0x34>
 8007de0:	692b      	ldr	r3, [r5, #16]
 8007de2:	b99b      	cbnz	r3, 8007e0c <_vfiprintf_r+0x5c>
 8007de4:	4629      	mov	r1, r5
 8007de6:	4630      	mov	r0, r6
 8007de8:	f000 f938 	bl	800805c <__swsetup_r>
 8007dec:	b170      	cbz	r0, 8007e0c <_vfiprintf_r+0x5c>
 8007dee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007df0:	07dc      	lsls	r4, r3, #31
 8007df2:	d504      	bpl.n	8007dfe <_vfiprintf_r+0x4e>
 8007df4:	f04f 30ff 	mov.w	r0, #4294967295
 8007df8:	b01d      	add	sp, #116	@ 0x74
 8007dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfe:	89ab      	ldrh	r3, [r5, #12]
 8007e00:	0598      	lsls	r0, r3, #22
 8007e02:	d4f7      	bmi.n	8007df4 <_vfiprintf_r+0x44>
 8007e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e06:	f7ff fa7b 	bl	8007300 <__retarget_lock_release_recursive>
 8007e0a:	e7f3      	b.n	8007df4 <_vfiprintf_r+0x44>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e10:	2320      	movs	r3, #32
 8007e12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e1a:	2330      	movs	r3, #48	@ 0x30
 8007e1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007fcc <_vfiprintf_r+0x21c>
 8007e20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e24:	f04f 0901 	mov.w	r9, #1
 8007e28:	4623      	mov	r3, r4
 8007e2a:	469a      	mov	sl, r3
 8007e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e30:	b10a      	cbz	r2, 8007e36 <_vfiprintf_r+0x86>
 8007e32:	2a25      	cmp	r2, #37	@ 0x25
 8007e34:	d1f9      	bne.n	8007e2a <_vfiprintf_r+0x7a>
 8007e36:	ebba 0b04 	subs.w	fp, sl, r4
 8007e3a:	d00b      	beq.n	8007e54 <_vfiprintf_r+0xa4>
 8007e3c:	465b      	mov	r3, fp
 8007e3e:	4622      	mov	r2, r4
 8007e40:	4629      	mov	r1, r5
 8007e42:	4630      	mov	r0, r6
 8007e44:	f7ff ffa2 	bl	8007d8c <__sfputs_r>
 8007e48:	3001      	adds	r0, #1
 8007e4a:	f000 80a7 	beq.w	8007f9c <_vfiprintf_r+0x1ec>
 8007e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e50:	445a      	add	r2, fp
 8007e52:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e54:	f89a 3000 	ldrb.w	r3, [sl]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 809f 	beq.w	8007f9c <_vfiprintf_r+0x1ec>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f04f 32ff 	mov.w	r2, #4294967295
 8007e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e68:	f10a 0a01 	add.w	sl, sl, #1
 8007e6c:	9304      	str	r3, [sp, #16]
 8007e6e:	9307      	str	r3, [sp, #28]
 8007e70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e74:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e76:	4654      	mov	r4, sl
 8007e78:	2205      	movs	r2, #5
 8007e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7e:	4853      	ldr	r0, [pc, #332]	@ (8007fcc <_vfiprintf_r+0x21c>)
 8007e80:	f7f8 f9be 	bl	8000200 <memchr>
 8007e84:	9a04      	ldr	r2, [sp, #16]
 8007e86:	b9d8      	cbnz	r0, 8007ec0 <_vfiprintf_r+0x110>
 8007e88:	06d1      	lsls	r1, r2, #27
 8007e8a:	bf44      	itt	mi
 8007e8c:	2320      	movmi	r3, #32
 8007e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e92:	0713      	lsls	r3, r2, #28
 8007e94:	bf44      	itt	mi
 8007e96:	232b      	movmi	r3, #43	@ 0x2b
 8007e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ea2:	d015      	beq.n	8007ed0 <_vfiprintf_r+0x120>
 8007ea4:	9a07      	ldr	r2, [sp, #28]
 8007ea6:	4654      	mov	r4, sl
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	f04f 0c0a 	mov.w	ip, #10
 8007eae:	4621      	mov	r1, r4
 8007eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eb4:	3b30      	subs	r3, #48	@ 0x30
 8007eb6:	2b09      	cmp	r3, #9
 8007eb8:	d94b      	bls.n	8007f52 <_vfiprintf_r+0x1a2>
 8007eba:	b1b0      	cbz	r0, 8007eea <_vfiprintf_r+0x13a>
 8007ebc:	9207      	str	r2, [sp, #28]
 8007ebe:	e014      	b.n	8007eea <_vfiprintf_r+0x13a>
 8007ec0:	eba0 0308 	sub.w	r3, r0, r8
 8007ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	9304      	str	r3, [sp, #16]
 8007ecc:	46a2      	mov	sl, r4
 8007ece:	e7d2      	b.n	8007e76 <_vfiprintf_r+0xc6>
 8007ed0:	9b03      	ldr	r3, [sp, #12]
 8007ed2:	1d19      	adds	r1, r3, #4
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	9103      	str	r1, [sp, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	bfbb      	ittet	lt
 8007edc:	425b      	neglt	r3, r3
 8007ede:	f042 0202 	orrlt.w	r2, r2, #2
 8007ee2:	9307      	strge	r3, [sp, #28]
 8007ee4:	9307      	strlt	r3, [sp, #28]
 8007ee6:	bfb8      	it	lt
 8007ee8:	9204      	strlt	r2, [sp, #16]
 8007eea:	7823      	ldrb	r3, [r4, #0]
 8007eec:	2b2e      	cmp	r3, #46	@ 0x2e
 8007eee:	d10a      	bne.n	8007f06 <_vfiprintf_r+0x156>
 8007ef0:	7863      	ldrb	r3, [r4, #1]
 8007ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ef4:	d132      	bne.n	8007f5c <_vfiprintf_r+0x1ac>
 8007ef6:	9b03      	ldr	r3, [sp, #12]
 8007ef8:	1d1a      	adds	r2, r3, #4
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	9203      	str	r2, [sp, #12]
 8007efe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f02:	3402      	adds	r4, #2
 8007f04:	9305      	str	r3, [sp, #20]
 8007f06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007fdc <_vfiprintf_r+0x22c>
 8007f0a:	7821      	ldrb	r1, [r4, #0]
 8007f0c:	2203      	movs	r2, #3
 8007f0e:	4650      	mov	r0, sl
 8007f10:	f7f8 f976 	bl	8000200 <memchr>
 8007f14:	b138      	cbz	r0, 8007f26 <_vfiprintf_r+0x176>
 8007f16:	9b04      	ldr	r3, [sp, #16]
 8007f18:	eba0 000a 	sub.w	r0, r0, sl
 8007f1c:	2240      	movs	r2, #64	@ 0x40
 8007f1e:	4082      	lsls	r2, r0
 8007f20:	4313      	orrs	r3, r2
 8007f22:	3401      	adds	r4, #1
 8007f24:	9304      	str	r3, [sp, #16]
 8007f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2a:	4829      	ldr	r0, [pc, #164]	@ (8007fd0 <_vfiprintf_r+0x220>)
 8007f2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f30:	2206      	movs	r2, #6
 8007f32:	f7f8 f965 	bl	8000200 <memchr>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d03f      	beq.n	8007fba <_vfiprintf_r+0x20a>
 8007f3a:	4b26      	ldr	r3, [pc, #152]	@ (8007fd4 <_vfiprintf_r+0x224>)
 8007f3c:	bb1b      	cbnz	r3, 8007f86 <_vfiprintf_r+0x1d6>
 8007f3e:	9b03      	ldr	r3, [sp, #12]
 8007f40:	3307      	adds	r3, #7
 8007f42:	f023 0307 	bic.w	r3, r3, #7
 8007f46:	3308      	adds	r3, #8
 8007f48:	9303      	str	r3, [sp, #12]
 8007f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f4c:	443b      	add	r3, r7
 8007f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f50:	e76a      	b.n	8007e28 <_vfiprintf_r+0x78>
 8007f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f56:	460c      	mov	r4, r1
 8007f58:	2001      	movs	r0, #1
 8007f5a:	e7a8      	b.n	8007eae <_vfiprintf_r+0xfe>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	3401      	adds	r4, #1
 8007f60:	9305      	str	r3, [sp, #20]
 8007f62:	4619      	mov	r1, r3
 8007f64:	f04f 0c0a 	mov.w	ip, #10
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f6e:	3a30      	subs	r2, #48	@ 0x30
 8007f70:	2a09      	cmp	r2, #9
 8007f72:	d903      	bls.n	8007f7c <_vfiprintf_r+0x1cc>
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0c6      	beq.n	8007f06 <_vfiprintf_r+0x156>
 8007f78:	9105      	str	r1, [sp, #20]
 8007f7a:	e7c4      	b.n	8007f06 <_vfiprintf_r+0x156>
 8007f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f80:	4604      	mov	r4, r0
 8007f82:	2301      	movs	r3, #1
 8007f84:	e7f0      	b.n	8007f68 <_vfiprintf_r+0x1b8>
 8007f86:	ab03      	add	r3, sp, #12
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	462a      	mov	r2, r5
 8007f8c:	4b12      	ldr	r3, [pc, #72]	@ (8007fd8 <_vfiprintf_r+0x228>)
 8007f8e:	a904      	add	r1, sp, #16
 8007f90:	4630      	mov	r0, r6
 8007f92:	f3af 8000 	nop.w
 8007f96:	4607      	mov	r7, r0
 8007f98:	1c78      	adds	r0, r7, #1
 8007f9a:	d1d6      	bne.n	8007f4a <_vfiprintf_r+0x19a>
 8007f9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f9e:	07d9      	lsls	r1, r3, #31
 8007fa0:	d405      	bmi.n	8007fae <_vfiprintf_r+0x1fe>
 8007fa2:	89ab      	ldrh	r3, [r5, #12]
 8007fa4:	059a      	lsls	r2, r3, #22
 8007fa6:	d402      	bmi.n	8007fae <_vfiprintf_r+0x1fe>
 8007fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007faa:	f7ff f9a9 	bl	8007300 <__retarget_lock_release_recursive>
 8007fae:	89ab      	ldrh	r3, [r5, #12]
 8007fb0:	065b      	lsls	r3, r3, #25
 8007fb2:	f53f af1f 	bmi.w	8007df4 <_vfiprintf_r+0x44>
 8007fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fb8:	e71e      	b.n	8007df8 <_vfiprintf_r+0x48>
 8007fba:	ab03      	add	r3, sp, #12
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	462a      	mov	r2, r5
 8007fc0:	4b05      	ldr	r3, [pc, #20]	@ (8007fd8 <_vfiprintf_r+0x228>)
 8007fc2:	a904      	add	r1, sp, #16
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f7ff fc8f 	bl	80078e8 <_printf_i>
 8007fca:	e7e4      	b.n	8007f96 <_vfiprintf_r+0x1e6>
 8007fcc:	080086e6 	.word	0x080086e6
 8007fd0:	080086f0 	.word	0x080086f0
 8007fd4:	00000000 	.word	0x00000000
 8007fd8:	08007d8d 	.word	0x08007d8d
 8007fdc:	080086ec 	.word	0x080086ec

08007fe0 <__swbuf_r>:
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe2:	460e      	mov	r6, r1
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	b118      	cbz	r0, 8007ff2 <__swbuf_r+0x12>
 8007fea:	6a03      	ldr	r3, [r0, #32]
 8007fec:	b90b      	cbnz	r3, 8007ff2 <__swbuf_r+0x12>
 8007fee:	f7fe ffb7 	bl	8006f60 <__sinit>
 8007ff2:	69a3      	ldr	r3, [r4, #24]
 8007ff4:	60a3      	str	r3, [r4, #8]
 8007ff6:	89a3      	ldrh	r3, [r4, #12]
 8007ff8:	071a      	lsls	r2, r3, #28
 8007ffa:	d501      	bpl.n	8008000 <__swbuf_r+0x20>
 8007ffc:	6923      	ldr	r3, [r4, #16]
 8007ffe:	b943      	cbnz	r3, 8008012 <__swbuf_r+0x32>
 8008000:	4621      	mov	r1, r4
 8008002:	4628      	mov	r0, r5
 8008004:	f000 f82a 	bl	800805c <__swsetup_r>
 8008008:	b118      	cbz	r0, 8008012 <__swbuf_r+0x32>
 800800a:	f04f 37ff 	mov.w	r7, #4294967295
 800800e:	4638      	mov	r0, r7
 8008010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	6922      	ldr	r2, [r4, #16]
 8008016:	1a98      	subs	r0, r3, r2
 8008018:	6963      	ldr	r3, [r4, #20]
 800801a:	b2f6      	uxtb	r6, r6
 800801c:	4283      	cmp	r3, r0
 800801e:	4637      	mov	r7, r6
 8008020:	dc05      	bgt.n	800802e <__swbuf_r+0x4e>
 8008022:	4621      	mov	r1, r4
 8008024:	4628      	mov	r0, r5
 8008026:	f7ff fe01 	bl	8007c2c <_fflush_r>
 800802a:	2800      	cmp	r0, #0
 800802c:	d1ed      	bne.n	800800a <__swbuf_r+0x2a>
 800802e:	68a3      	ldr	r3, [r4, #8]
 8008030:	3b01      	subs	r3, #1
 8008032:	60a3      	str	r3, [r4, #8]
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	6022      	str	r2, [r4, #0]
 800803a:	701e      	strb	r6, [r3, #0]
 800803c:	6962      	ldr	r2, [r4, #20]
 800803e:	1c43      	adds	r3, r0, #1
 8008040:	429a      	cmp	r2, r3
 8008042:	d004      	beq.n	800804e <__swbuf_r+0x6e>
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	07db      	lsls	r3, r3, #31
 8008048:	d5e1      	bpl.n	800800e <__swbuf_r+0x2e>
 800804a:	2e0a      	cmp	r6, #10
 800804c:	d1df      	bne.n	800800e <__swbuf_r+0x2e>
 800804e:	4621      	mov	r1, r4
 8008050:	4628      	mov	r0, r5
 8008052:	f7ff fdeb 	bl	8007c2c <_fflush_r>
 8008056:	2800      	cmp	r0, #0
 8008058:	d0d9      	beq.n	800800e <__swbuf_r+0x2e>
 800805a:	e7d6      	b.n	800800a <__swbuf_r+0x2a>

0800805c <__swsetup_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	4b29      	ldr	r3, [pc, #164]	@ (8008104 <__swsetup_r+0xa8>)
 8008060:	4605      	mov	r5, r0
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	460c      	mov	r4, r1
 8008066:	b118      	cbz	r0, 8008070 <__swsetup_r+0x14>
 8008068:	6a03      	ldr	r3, [r0, #32]
 800806a:	b90b      	cbnz	r3, 8008070 <__swsetup_r+0x14>
 800806c:	f7fe ff78 	bl	8006f60 <__sinit>
 8008070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008074:	0719      	lsls	r1, r3, #28
 8008076:	d422      	bmi.n	80080be <__swsetup_r+0x62>
 8008078:	06da      	lsls	r2, r3, #27
 800807a:	d407      	bmi.n	800808c <__swsetup_r+0x30>
 800807c:	2209      	movs	r2, #9
 800807e:	602a      	str	r2, [r5, #0]
 8008080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008084:	81a3      	strh	r3, [r4, #12]
 8008086:	f04f 30ff 	mov.w	r0, #4294967295
 800808a:	e033      	b.n	80080f4 <__swsetup_r+0x98>
 800808c:	0758      	lsls	r0, r3, #29
 800808e:	d512      	bpl.n	80080b6 <__swsetup_r+0x5a>
 8008090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008092:	b141      	cbz	r1, 80080a6 <__swsetup_r+0x4a>
 8008094:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008098:	4299      	cmp	r1, r3
 800809a:	d002      	beq.n	80080a2 <__swsetup_r+0x46>
 800809c:	4628      	mov	r0, r5
 800809e:	f7ff f95d 	bl	800735c <_free_r>
 80080a2:	2300      	movs	r3, #0
 80080a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	2300      	movs	r3, #0
 80080b0:	6063      	str	r3, [r4, #4]
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f043 0308 	orr.w	r3, r3, #8
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	6923      	ldr	r3, [r4, #16]
 80080c0:	b94b      	cbnz	r3, 80080d6 <__swsetup_r+0x7a>
 80080c2:	89a3      	ldrh	r3, [r4, #12]
 80080c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080cc:	d003      	beq.n	80080d6 <__swsetup_r+0x7a>
 80080ce:	4621      	mov	r1, r4
 80080d0:	4628      	mov	r0, r5
 80080d2:	f000 f88b 	bl	80081ec <__smakebuf_r>
 80080d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080da:	f013 0201 	ands.w	r2, r3, #1
 80080de:	d00a      	beq.n	80080f6 <__swsetup_r+0x9a>
 80080e0:	2200      	movs	r2, #0
 80080e2:	60a2      	str	r2, [r4, #8]
 80080e4:	6962      	ldr	r2, [r4, #20]
 80080e6:	4252      	negs	r2, r2
 80080e8:	61a2      	str	r2, [r4, #24]
 80080ea:	6922      	ldr	r2, [r4, #16]
 80080ec:	b942      	cbnz	r2, 8008100 <__swsetup_r+0xa4>
 80080ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80080f2:	d1c5      	bne.n	8008080 <__swsetup_r+0x24>
 80080f4:	bd38      	pop	{r3, r4, r5, pc}
 80080f6:	0799      	lsls	r1, r3, #30
 80080f8:	bf58      	it	pl
 80080fa:	6962      	ldrpl	r2, [r4, #20]
 80080fc:	60a2      	str	r2, [r4, #8]
 80080fe:	e7f4      	b.n	80080ea <__swsetup_r+0x8e>
 8008100:	2000      	movs	r0, #0
 8008102:	e7f7      	b.n	80080f4 <__swsetup_r+0x98>
 8008104:	20000040 	.word	0x20000040

08008108 <_raise_r>:
 8008108:	291f      	cmp	r1, #31
 800810a:	b538      	push	{r3, r4, r5, lr}
 800810c:	4605      	mov	r5, r0
 800810e:	460c      	mov	r4, r1
 8008110:	d904      	bls.n	800811c <_raise_r+0x14>
 8008112:	2316      	movs	r3, #22
 8008114:	6003      	str	r3, [r0, #0]
 8008116:	f04f 30ff 	mov.w	r0, #4294967295
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800811e:	b112      	cbz	r2, 8008126 <_raise_r+0x1e>
 8008120:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008124:	b94b      	cbnz	r3, 800813a <_raise_r+0x32>
 8008126:	4628      	mov	r0, r5
 8008128:	f000 f830 	bl	800818c <_getpid_r>
 800812c:	4622      	mov	r2, r4
 800812e:	4601      	mov	r1, r0
 8008130:	4628      	mov	r0, r5
 8008132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008136:	f000 b817 	b.w	8008168 <_kill_r>
 800813a:	2b01      	cmp	r3, #1
 800813c:	d00a      	beq.n	8008154 <_raise_r+0x4c>
 800813e:	1c59      	adds	r1, r3, #1
 8008140:	d103      	bne.n	800814a <_raise_r+0x42>
 8008142:	2316      	movs	r3, #22
 8008144:	6003      	str	r3, [r0, #0]
 8008146:	2001      	movs	r0, #1
 8008148:	e7e7      	b.n	800811a <_raise_r+0x12>
 800814a:	2100      	movs	r1, #0
 800814c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008150:	4620      	mov	r0, r4
 8008152:	4798      	blx	r3
 8008154:	2000      	movs	r0, #0
 8008156:	e7e0      	b.n	800811a <_raise_r+0x12>

08008158 <raise>:
 8008158:	4b02      	ldr	r3, [pc, #8]	@ (8008164 <raise+0xc>)
 800815a:	4601      	mov	r1, r0
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	f7ff bfd3 	b.w	8008108 <_raise_r>
 8008162:	bf00      	nop
 8008164:	20000040 	.word	0x20000040

08008168 <_kill_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d07      	ldr	r5, [pc, #28]	@ (8008188 <_kill_r+0x20>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	4611      	mov	r1, r2
 8008174:	602b      	str	r3, [r5, #0]
 8008176:	f7f8 fe8f 	bl	8000e98 <_kill>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	d102      	bne.n	8008184 <_kill_r+0x1c>
 800817e:	682b      	ldr	r3, [r5, #0]
 8008180:	b103      	cbz	r3, 8008184 <_kill_r+0x1c>
 8008182:	6023      	str	r3, [r4, #0]
 8008184:	bd38      	pop	{r3, r4, r5, pc}
 8008186:	bf00      	nop
 8008188:	20005684 	.word	0x20005684

0800818c <_getpid_r>:
 800818c:	f7f8 be7c 	b.w	8000e88 <_getpid>

08008190 <_malloc_usable_size_r>:
 8008190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008194:	1f18      	subs	r0, r3, #4
 8008196:	2b00      	cmp	r3, #0
 8008198:	bfbc      	itt	lt
 800819a:	580b      	ldrlt	r3, [r1, r0]
 800819c:	18c0      	addlt	r0, r0, r3
 800819e:	4770      	bx	lr

080081a0 <__swhatbuf_r>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	460c      	mov	r4, r1
 80081a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a8:	2900      	cmp	r1, #0
 80081aa:	b096      	sub	sp, #88	@ 0x58
 80081ac:	4615      	mov	r5, r2
 80081ae:	461e      	mov	r6, r3
 80081b0:	da0d      	bge.n	80081ce <__swhatbuf_r+0x2e>
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80081b8:	f04f 0100 	mov.w	r1, #0
 80081bc:	bf14      	ite	ne
 80081be:	2340      	movne	r3, #64	@ 0x40
 80081c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80081c4:	2000      	movs	r0, #0
 80081c6:	6031      	str	r1, [r6, #0]
 80081c8:	602b      	str	r3, [r5, #0]
 80081ca:	b016      	add	sp, #88	@ 0x58
 80081cc:	bd70      	pop	{r4, r5, r6, pc}
 80081ce:	466a      	mov	r2, sp
 80081d0:	f000 f848 	bl	8008264 <_fstat_r>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	dbec      	blt.n	80081b2 <__swhatbuf_r+0x12>
 80081d8:	9901      	ldr	r1, [sp, #4]
 80081da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081e2:	4259      	negs	r1, r3
 80081e4:	4159      	adcs	r1, r3
 80081e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081ea:	e7eb      	b.n	80081c4 <__swhatbuf_r+0x24>

080081ec <__smakebuf_r>:
 80081ec:	898b      	ldrh	r3, [r1, #12]
 80081ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081f0:	079d      	lsls	r5, r3, #30
 80081f2:	4606      	mov	r6, r0
 80081f4:	460c      	mov	r4, r1
 80081f6:	d507      	bpl.n	8008208 <__smakebuf_r+0x1c>
 80081f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	6123      	str	r3, [r4, #16]
 8008200:	2301      	movs	r3, #1
 8008202:	6163      	str	r3, [r4, #20]
 8008204:	b003      	add	sp, #12
 8008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008208:	ab01      	add	r3, sp, #4
 800820a:	466a      	mov	r2, sp
 800820c:	f7ff ffc8 	bl	80081a0 <__swhatbuf_r>
 8008210:	9f00      	ldr	r7, [sp, #0]
 8008212:	4605      	mov	r5, r0
 8008214:	4639      	mov	r1, r7
 8008216:	4630      	mov	r0, r6
 8008218:	f7ff f914 	bl	8007444 <_malloc_r>
 800821c:	b948      	cbnz	r0, 8008232 <__smakebuf_r+0x46>
 800821e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008222:	059a      	lsls	r2, r3, #22
 8008224:	d4ee      	bmi.n	8008204 <__smakebuf_r+0x18>
 8008226:	f023 0303 	bic.w	r3, r3, #3
 800822a:	f043 0302 	orr.w	r3, r3, #2
 800822e:	81a3      	strh	r3, [r4, #12]
 8008230:	e7e2      	b.n	80081f8 <__smakebuf_r+0xc>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	6020      	str	r0, [r4, #0]
 8008236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800823a:	81a3      	strh	r3, [r4, #12]
 800823c:	9b01      	ldr	r3, [sp, #4]
 800823e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008242:	b15b      	cbz	r3, 800825c <__smakebuf_r+0x70>
 8008244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008248:	4630      	mov	r0, r6
 800824a:	f000 f81d 	bl	8008288 <_isatty_r>
 800824e:	b128      	cbz	r0, 800825c <__smakebuf_r+0x70>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	f023 0303 	bic.w	r3, r3, #3
 8008256:	f043 0301 	orr.w	r3, r3, #1
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	431d      	orrs	r5, r3
 8008260:	81a5      	strh	r5, [r4, #12]
 8008262:	e7cf      	b.n	8008204 <__smakebuf_r+0x18>

08008264 <_fstat_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4d07      	ldr	r5, [pc, #28]	@ (8008284 <_fstat_r+0x20>)
 8008268:	2300      	movs	r3, #0
 800826a:	4604      	mov	r4, r0
 800826c:	4608      	mov	r0, r1
 800826e:	4611      	mov	r1, r2
 8008270:	602b      	str	r3, [r5, #0]
 8008272:	f7f8 fe71 	bl	8000f58 <_fstat>
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	d102      	bne.n	8008280 <_fstat_r+0x1c>
 800827a:	682b      	ldr	r3, [r5, #0]
 800827c:	b103      	cbz	r3, 8008280 <_fstat_r+0x1c>
 800827e:	6023      	str	r3, [r4, #0]
 8008280:	bd38      	pop	{r3, r4, r5, pc}
 8008282:	bf00      	nop
 8008284:	20005684 	.word	0x20005684

08008288 <_isatty_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d06      	ldr	r5, [pc, #24]	@ (80082a4 <_isatty_r+0x1c>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	f7f8 fe70 	bl	8000f78 <_isatty>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_isatty_r+0x1a>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_isatty_r+0x1a>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	20005684 	.word	0x20005684

080082a8 <_init>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	bf00      	nop
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr

080082b4 <_fini>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	bf00      	nop
 80082b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ba:	bc08      	pop	{r3}
 80082bc:	469e      	mov	lr, r3
 80082be:	4770      	bx	lr
