
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006670  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08006800  08006800  00007800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069cc  080069cc  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080069cc  080069cc  000079cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069d4  080069d4  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069d4  080069d4  000079d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069d8  080069d8  000079d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080069dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005520  20000060  08006a3c  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005580  08006a3c  00008580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183df  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000387e  00000000  00000000  0002046f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00023cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fec  00000000  00000000  00025188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029661  00000000  00000000  00026174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190fa  00000000  00000000  0004f7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb831  00000000  00000000  000688cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00164100  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d8  00000000  00000000  00164144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00169b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067e8 	.word	0x080067e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080067e8 	.word	0x080067e8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4a07      	ldr	r2, [pc, #28]	@ (80005f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <vApplicationGetIdleTaskMemory+0x30>)
 80005e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000084 	.word	0x20000084
 80005fc:	20000124 	.word	0x20000124

08000600 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b08e      	sub	sp, #56	@ 0x38
 8000604:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <MX_FREERTOS_Init+0x58>)
 8000608:	f107 041c 	add.w	r4, r7, #28
 800060c:	461d      	mov	r5, r3
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 f964 	bl	80048ee <osThreadCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <MX_FREERTOS_Init+0x5c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* definition and creation of IHM_Task */
  osThreadDef(IHM_Task, Start_IHM_Task, osPriorityIdle, 0, 1024);
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_FREERTOS_Init+0x60>)
 800062e:	463c      	mov	r4, r7
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IHM_TaskHandle = osThreadCreate(osThread(IHM_Task), NULL);
 800063e:	463b      	mov	r3, r7
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 f953 	bl	80048ee <osThreadCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a06      	ldr	r2, [pc, #24]	@ (8000664 <MX_FREERTOS_Init+0x64>)
 800064c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800064e:	bf00      	nop
 8000650:	3738      	adds	r7, #56	@ 0x38
 8000652:	46bd      	mov	sp, r7
 8000654:	bdb0      	pop	{r4, r5, r7, pc}
 8000656:	bf00      	nop
 8000658:	0800680c 	.word	0x0800680c
 800065c:	2000007c 	.word	0x2000007c
 8000660:	08006834 	.word	0x08006834
 8000664:	20000080 	.word	0x20000080

08000668 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
    HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8000670:	2201      	movs	r2, #1
 8000672:	4904      	ldr	r1, [pc, #16]	@ (8000684 <StartDefaultTask+0x1c>)
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <StartDefaultTask+0x20>)
 8000676:	f002 fe09 	bl	800328c <HAL_UART_Receive_IT>

  for(;;)
  {
    osDelay(1);
 800067a:	2001      	movs	r0, #1
 800067c:	f004 f983 	bl	8004986 <osDelay>
 8000680:	e7fb      	b.n	800067a <StartDefaultTask+0x12>
 8000682:	bf00      	nop
 8000684:	20000364 	.word	0x20000364
 8000688:	20000438 	.word	0x20000438

0800068c <Start_IHM_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_IHM_Task */
__weak void Start_IHM_Task(void const * argument)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_IHM_Task */
	char *msg = "IHM Task Running\r\n";
 8000694:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <Start_IHM_Task+0x4c>)
 8000696:	60fb      	str	r3, [r7, #12]
	    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff fda3 	bl	80001e4 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a6:	68f9      	ldr	r1, [r7, #12]
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <Start_IHM_Task+0x50>)
 80006aa:	f002 fd65 	bl	8003178 <HAL_UART_Transmit>
	    AfficherMenuPrincipal();
 80006ae:	f000 f883 	bl	80007b8 <AfficherMenuPrincipal>
	    if (rx_flag==1)
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <Start_IHM_Task+0x54>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d103      	bne.n	80006c2 <Start_IHM_Task+0x36>
	    {
	    	processMessage(rxBuffer);
 80006ba:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <Start_IHM_Task+0x58>)
 80006bc:	f000 f90a 	bl	80008d4 <processMessage>
 80006c0:	e005      	b.n	80006ce <Start_IHM_Task+0x42>
	    }
	    else {
	    	HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR\r\n", 9, 100);
 80006c2:	2364      	movs	r3, #100	@ 0x64
 80006c4:	2209      	movs	r2, #9
 80006c6:	4908      	ldr	r1, [pc, #32]	@ (80006e8 <Start_IHM_Task+0x5c>)
 80006c8:	4804      	ldr	r0, [pc, #16]	@ (80006dc <Start_IHM_Task+0x50>)
 80006ca:	f002 fd55 	bl	8003178 <HAL_UART_Transmit>
	    }
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f004 f959 	bl	8004986 <osDelay>
 80006d4:	e7fb      	b.n	80006ce <Start_IHM_Task+0x42>
 80006d6:	bf00      	nop
 80006d8:	08006850 	.word	0x08006850
 80006dc:	20000438 	.word	0x20000438
 80006e0:	20000366 	.word	0x20000366
 80006e4:	20000324 	.word	0x20000324
 80006e8:	08006864 	.word	0x08006864

080006ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070e:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	4b25      	ldr	r3, [pc, #148]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a24      	ldr	r2, [pc, #144]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a1e      	ldr	r2, [pc, #120]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a18      	ldr	r2, [pc, #96]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_GPIO_Init+0xc4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2120      	movs	r1, #32
 8000766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076a:	f000 fe87 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000774:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	480b      	ldr	r0, [pc, #44]	@ (80007b4 <MX_GPIO_Init+0xc8>)
 8000786:	f000 fccf 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078a:	2320      	movs	r3, #32
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a4:	f000 fcc0 	bl	8001128 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	@ 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	48000800 	.word	0x48000800

080007b8 <AfficherMenuPrincipal>:
uint8_t rx_flag;
char txBuffer[128];
uint8_t currentStep = 0;

// Fonction pour afficher le menu principal complet
void AfficherMenuPrincipal(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
    // Afficher tout le menu une seule fois
    snprintf(txBuffer, sizeof(txBuffer), "************ Menu Principal ************\r\n");
 80007bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000838 <AfficherMenuPrincipal+0x80>)
 80007be:	2180      	movs	r1, #128	@ 0x80
 80007c0:	481e      	ldr	r0, [pc, #120]	@ (800083c <AfficherMenuPrincipal+0x84>)
 80007c2:	f005 faff 	bl	8005dc4 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 80007c6:	481d      	ldr	r0, [pc, #116]	@ (800083c <AfficherMenuPrincipal+0x84>)
 80007c8:	f7ff fd0c 	bl	80001e4 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	2364      	movs	r3, #100	@ 0x64
 80007d2:	491a      	ldr	r1, [pc, #104]	@ (800083c <AfficherMenuPrincipal+0x84>)
 80007d4:	481a      	ldr	r0, [pc, #104]	@ (8000840 <AfficherMenuPrincipal+0x88>)
 80007d6:	f002 fccf 	bl	8003178 <HAL_UART_Transmit>

    snprintf(txBuffer, sizeof(txBuffer), "Pour modifier LORA, écrire : lora\r\n");
 80007da:	4a1a      	ldr	r2, [pc, #104]	@ (8000844 <AfficherMenuPrincipal+0x8c>)
 80007dc:	2180      	movs	r1, #128	@ 0x80
 80007de:	4817      	ldr	r0, [pc, #92]	@ (800083c <AfficherMenuPrincipal+0x84>)
 80007e0:	f005 faf0 	bl	8005dc4 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 80007e4:	4815      	ldr	r0, [pc, #84]	@ (800083c <AfficherMenuPrincipal+0x84>)
 80007e6:	f7ff fcfd 	bl	80001e4 <strlen>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	2364      	movs	r3, #100	@ 0x64
 80007f0:	4912      	ldr	r1, [pc, #72]	@ (800083c <AfficherMenuPrincipal+0x84>)
 80007f2:	4813      	ldr	r0, [pc, #76]	@ (8000840 <AfficherMenuPrincipal+0x88>)
 80007f4:	f002 fcc0 	bl	8003178 <HAL_UART_Transmit>

    snprintf(txBuffer, sizeof(txBuffer), "Pour modifier GPS, écrire : GPS\r\n");
 80007f8:	4a13      	ldr	r2, [pc, #76]	@ (8000848 <AfficherMenuPrincipal+0x90>)
 80007fa:	2180      	movs	r1, #128	@ 0x80
 80007fc:	480f      	ldr	r0, [pc, #60]	@ (800083c <AfficherMenuPrincipal+0x84>)
 80007fe:	f005 fae1 	bl	8005dc4 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8000802:	480e      	ldr	r0, [pc, #56]	@ (800083c <AfficherMenuPrincipal+0x84>)
 8000804:	f7ff fcee 	bl	80001e4 <strlen>
 8000808:	4603      	mov	r3, r0
 800080a:	b29a      	uxth	r2, r3
 800080c:	2364      	movs	r3, #100	@ 0x64
 800080e:	490b      	ldr	r1, [pc, #44]	@ (800083c <AfficherMenuPrincipal+0x84>)
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <AfficherMenuPrincipal+0x88>)
 8000812:	f002 fcb1 	bl	8003178 <HAL_UART_Transmit>

    snprintf(txBuffer, sizeof(txBuffer), "Pour quitter, écrire : exit\r\n");
 8000816:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <AfficherMenuPrincipal+0x94>)
 8000818:	2180      	movs	r1, #128	@ 0x80
 800081a:	4808      	ldr	r0, [pc, #32]	@ (800083c <AfficherMenuPrincipal+0x84>)
 800081c:	f005 fad2 	bl	8005dc4 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8000820:	4806      	ldr	r0, [pc, #24]	@ (800083c <AfficherMenuPrincipal+0x84>)
 8000822:	f7ff fcdf 	bl	80001e4 <strlen>
 8000826:	4603      	mov	r3, r0
 8000828:	b29a      	uxth	r2, r3
 800082a:	2364      	movs	r3, #100	@ 0x64
 800082c:	4903      	ldr	r1, [pc, #12]	@ (800083c <AfficherMenuPrincipal+0x84>)
 800082e:	4804      	ldr	r0, [pc, #16]	@ (8000840 <AfficherMenuPrincipal+0x88>)
 8000830:	f002 fca2 	bl	8003178 <HAL_UART_Transmit>

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	0800686c 	.word	0x0800686c
 800083c:	20000368 	.word	0x20000368
 8000840:	20000438 	.word	0x20000438
 8000844:	08006898 	.word	0x08006898
 8000848:	080068c0 	.word	0x080068c0
 800084c:	080068e4 	.word	0x080068e4

08000850 <HAL_UART_RxCpltCallback>:
        Error_Handler();  // Gérer l'erreur
    }
}*/

// Callback pour traiter les données reçues par UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t*)"Hello", 5, 100);
        if (rxByte == '\n' || rxByte == '\r') {
 8000858:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <HAL_UART_RxCpltCallback+0x70>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b0a      	cmp	r3, #10
 800085e:	d003      	beq.n	8000868 <HAL_UART_RxCpltCallback+0x18>
 8000860:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <HAL_UART_RxCpltCallback+0x70>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b0d      	cmp	r3, #13
 8000866:	d10f      	bne.n	8000888 <HAL_UART_RxCpltCallback+0x38>
            // Fin de message, ajouter un caractère de fin de chaîne
            rxBuffer[rxIndex] = '\0';  // Null-terminate the string
 8000868:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <HAL_UART_RxCpltCallback+0x74>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <HAL_UART_RxCpltCallback+0x78>)
 8000870:	2100      	movs	r1, #0
 8000872:	5499      	strb	r1, [r3, r2]

           rx_flag=1;
 8000874:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <HAL_UART_RxCpltCallback+0x7c>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
            // Traiter la commande
            processMessage(rxBuffer);
 800087a:	4813      	ldr	r0, [pc, #76]	@ (80008c8 <HAL_UART_RxCpltCallback+0x78>)
 800087c:	f000 f82a 	bl	80008d4 <processMessage>

            // Réinitialiser l'index pour la prochaine commande
            rxIndex = 0;
 8000880:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <HAL_UART_RxCpltCallback+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	e012      	b.n	80008ae <HAL_UART_RxCpltCallback+0x5e>
        } else {
            if (rxIndex < RX_BUFFER_SIZE - 1) {
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <HAL_UART_RxCpltCallback+0x74>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b3e      	cmp	r3, #62	@ 0x3e
 800088e:	d80b      	bhi.n	80008a8 <HAL_UART_RxCpltCallback+0x58>
                rxBuffer[rxIndex++] = rxByte;
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <HAL_UART_RxCpltCallback+0x74>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	b2d1      	uxtb	r1, r2
 8000898:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <HAL_UART_RxCpltCallback+0x74>)
 800089a:	7011      	strb	r1, [r2, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <HAL_UART_RxCpltCallback+0x70>)
 80008a0:	7819      	ldrb	r1, [r3, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <HAL_UART_RxCpltCallback+0x78>)
 80008a4:	5499      	strb	r1, [r3, r2]
 80008a6:	e002      	b.n	80008ae <HAL_UART_RxCpltCallback+0x5e>
            } else {
                rxIndex = 0;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_UART_RxCpltCallback+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
            }
        }

        HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 80008ae:	2201      	movs	r2, #1
 80008b0:	4903      	ldr	r1, [pc, #12]	@ (80008c0 <HAL_UART_RxCpltCallback+0x70>)
 80008b2:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <HAL_UART_RxCpltCallback+0x80>)
 80008b4:	f002 fcea 	bl	800328c <HAL_UART_Receive_IT>
    }
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000364 	.word	0x20000364
 80008c4:	20000365 	.word	0x20000365
 80008c8:	20000324 	.word	0x20000324
 80008cc:	20000366 	.word	0x20000366
 80008d0:	20000438 	.word	0x20000438

080008d4 <processMessage>:

void processMessage(uint8_t *rxBuffer) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
    if (strcmp((char*)rxBuffer, "SET") == 0) {
 80008dc:	4912      	ldr	r1, [pc, #72]	@ (8000928 <processMessage+0x54>)
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff fc76 	bl	80001d0 <strcmp>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d106      	bne.n	80008f8 <processMessage+0x24>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Success\r\n", 9, 100);
 80008ea:	2364      	movs	r3, #100	@ 0x64
 80008ec:	2209      	movs	r2, #9
 80008ee:	490f      	ldr	r1, [pc, #60]	@ (800092c <processMessage+0x58>)
 80008f0:	480f      	ldr	r0, [pc, #60]	@ (8000930 <processMessage+0x5c>)
 80008f2:	f002 fc41 	bl	8003178 <HAL_UART_Transmit>
    } else if (strcmp((char*)rxBuffer, "exit") == 0) {
        HAL_UART_Transmit(&huart2, (uint8_t*)"Exiting...\r\n", 13, 100);
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"Command not recognized\r\n", 24, 100);
    }
}
 80008f6:	e013      	b.n	8000920 <processMessage+0x4c>
    } else if (strcmp((char*)rxBuffer, "exit") == 0) {
 80008f8:	490e      	ldr	r1, [pc, #56]	@ (8000934 <processMessage+0x60>)
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff fc68 	bl	80001d0 <strcmp>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d106      	bne.n	8000914 <processMessage+0x40>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Exiting...\r\n", 13, 100);
 8000906:	2364      	movs	r3, #100	@ 0x64
 8000908:	220d      	movs	r2, #13
 800090a:	490b      	ldr	r1, [pc, #44]	@ (8000938 <processMessage+0x64>)
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <processMessage+0x5c>)
 800090e:	f002 fc33 	bl	8003178 <HAL_UART_Transmit>
}
 8000912:	e005      	b.n	8000920 <processMessage+0x4c>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Command not recognized\r\n", 24, 100);
 8000914:	2364      	movs	r3, #100	@ 0x64
 8000916:	2218      	movs	r2, #24
 8000918:	4908      	ldr	r1, [pc, #32]	@ (800093c <processMessage+0x68>)
 800091a:	4805      	ldr	r0, [pc, #20]	@ (8000930 <processMessage+0x5c>)
 800091c:	f002 fc2c 	bl	8003178 <HAL_UART_Transmit>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	08006904 	.word	0x08006904
 800092c:	08006908 	.word	0x08006908
 8000930:	20000438 	.word	0x20000438
 8000934:	08006914 	.word	0x08006914
 8000938:	0800691c 	.word	0x0800691c
 800093c:	0800692c 	.word	0x0800692c

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f000 fa4e 	bl	8000de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f80a 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f7ff fece 	bl	80006ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000950:	f000 f98a 	bl	8000c68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000954:	f7ff fe54 	bl	8000600 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000958:	f003 ffc2 	bl	80048e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <main+0x1c>

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b096      	sub	sp, #88	@ 0x58
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	2244      	movs	r2, #68	@ 0x44
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f005 fa5e 	bl	8005e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000982:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000986:	f000 fd9f 	bl	80014c8 <HAL_PWREx_ControlVoltageScaling>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000990:	f000 f84a 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000994:	2302      	movs	r3, #2
 8000996:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800099c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099e:	2310      	movs	r3, #16
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a6:	2302      	movs	r3, #2
 80009a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009ae:	230a      	movs	r3, #10
 80009b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009b2:	2307      	movs	r3, #7
 80009b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fdd6 	bl	8001574 <HAL_RCC_OscConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009ce:	f000 f82b 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	230f      	movs	r3, #15
 80009d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2303      	movs	r3, #3
 80009d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	2104      	movs	r1, #4
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 f99e 	bl	8001d2c <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009f6:	f000 f817 	bl	8000a28 <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3758      	adds	r7, #88	@ 0x58
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d101      	bne.n	8000a1a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a16:	f000 fa05 	bl	8000e24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40001000 	.word	0x40001000

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3e:	4a10      	ldr	r2, [pc, #64]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a56:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <HAL_MspInit+0x4c>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	210f      	movs	r1, #15
 8000a6e:	f06f 0001 	mvn.w	r0, #1
 8000a72:	f000 faaf 	bl	8000fd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	@ 0x38
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a92:	4b34      	ldr	r3, [pc, #208]	@ (8000b64 <HAL_InitTick+0xe0>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a96:	4a33      	ldr	r2, [pc, #204]	@ (8000b64 <HAL_InitTick+0xe0>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a9e:	4b31      	ldr	r3, [pc, #196]	@ (8000b64 <HAL_InitTick+0xe0>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aaa:	f107 0210 	add.w	r2, r7, #16
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fafd 	bl	80020b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d103      	bne.n	8000acc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ac4:	f001 faca 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 8000ac8:	6378      	str	r0, [r7, #52]	@ 0x34
 8000aca:	e004      	b.n	8000ad6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000acc:	f001 fac6 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ad8:	4a23      	ldr	r2, [pc, #140]	@ (8000b68 <HAL_InitTick+0xe4>)
 8000ada:	fba2 2303 	umull	r2, r3, r2, r3
 8000ade:	0c9b      	lsrs	r3, r3, #18
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <HAL_InitTick+0xe8>)
 8000ae6:	4a22      	ldr	r2, [pc, #136]	@ (8000b70 <HAL_InitTick+0xec>)
 8000ae8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <HAL_InitTick+0xe8>)
 8000aec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000af0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000af2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b6c <HAL_InitTick+0xe8>)
 8000af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000af6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000af8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <HAL_InitTick+0xe8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <HAL_InitTick+0xe8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b04:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <HAL_InitTick+0xe8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b0a:	4818      	ldr	r0, [pc, #96]	@ (8000b6c <HAL_InitTick+0xe8>)
 8000b0c:	f002 f820 	bl	8002b50 <HAL_TIM_Base_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d11b      	bne.n	8000b56 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b1e:	4813      	ldr	r0, [pc, #76]	@ (8000b6c <HAL_InitTick+0xe8>)
 8000b20:	f002 f878 	bl	8002c14 <HAL_TIM_Base_Start_IT>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b2a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d111      	bne.n	8000b56 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b32:	2036      	movs	r0, #54	@ 0x36
 8000b34:	f000 fa6a 	bl	800100c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	d808      	bhi.n	8000b50 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	2036      	movs	r0, #54	@ 0x36
 8000b44:	f000 fa46 	bl	8000fd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b48:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <HAL_InitTick+0xf0>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e002      	b.n	8000b56 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3738      	adds	r7, #56	@ 0x38
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000
 8000b68:	431bde83 	.word	0x431bde83
 8000b6c:	200003e8 	.word	0x200003e8
 8000b70:	40001000 	.word	0x40001000
 8000b74:	20000004 	.word	0x20000004

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <USART2_IRQHandler+0x10>)
 8000bb6:	f002 fbb5 	bl	8003324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000438 	.word	0x20000438

08000bc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <TIM6_DAC_IRQHandler+0x10>)
 8000bca:	f002 f893 	bl	8002cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200003e8 	.word	0x200003e8

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	@ (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	@ (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f005 f978 	bl	8005efc <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	@ (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20018000 	.word	0x20018000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	20000434 	.word	0x20000434
 8000c40:	20005580 	.word	0x20005580

08000c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c6e:	4a15      	ldr	r2, [pc, #84]	@ (8000cc4 <MX_USART2_UART_Init+0x5c>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_USART2_UART_Init+0x58>)
 8000cac:	f002 fa16 	bl	80030dc <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cb6:	f7ff feb7 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000438 	.word	0x20000438
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b0ac      	sub	sp, #176	@ 0xb0
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2288      	movs	r2, #136	@ 0x88
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f005 f8a1 	bl	8005e30 <memset>
  if(uartHandle->Instance==USART2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a25      	ldr	r2, [pc, #148]	@ (8000d88 <HAL_UART_MspInit+0xc0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d143      	bne.n	8000d80 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fa67 	bl	80021d8 <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d10:	f7ff fe8a 	bl	8000a28 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <HAL_UART_MspInit+0xc4>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d18:	4a1c      	ldr	r2, [pc, #112]	@ (8000d8c <HAL_UART_MspInit+0xc4>)
 8000d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <HAL_UART_MspInit+0xc4>)
 8000d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <HAL_UART_MspInit+0xc4>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d30:	4a16      	ldr	r2, [pc, #88]	@ (8000d8c <HAL_UART_MspInit+0xc4>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d38:	4b14      	ldr	r3, [pc, #80]	@ (8000d8c <HAL_UART_MspInit+0xc4>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d44:	230c      	movs	r3, #12
 8000d46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d66:	4619      	mov	r1, r3
 8000d68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6c:	f000 f9dc 	bl	8001128 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2105      	movs	r1, #5
 8000d74:	2026      	movs	r0, #38	@ 0x26
 8000d76:	f000 f92d 	bl	8000fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d7a:	2026      	movs	r0, #38	@ 0x26
 8000d7c:	f000 f946 	bl	800100c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d80:	bf00      	nop
 8000d82:	37b0      	adds	r7, #176	@ 0xb0
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40004400 	.word	0x40004400
 8000d8c:	40021000 	.word	0x40021000

08000d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d94:	f7ff ff56 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	@ (8000dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <LoopForever+0xe>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ddc <LoopForever+0x16>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f005 f8a3 	bl	8005f08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dc2:	f7ff fdbd 	bl	8000940 <main>

08000dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc6:	e7fe      	b.n	8000dc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000dd4:	080069dc 	.word	0x080069dc
  ldr r2, =_sbss
 8000dd8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ddc:	20005580 	.word	0x20005580

08000de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_2_IRQHandler>
	...

08000de4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <HAL_Init+0x3c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a0b      	ldr	r2, [pc, #44]	@ (8000e20 <HAL_Init+0x3c>)
 8000df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f000 f8df 	bl	8000fbe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e00:	200f      	movs	r0, #15
 8000e02:	f7ff fe3f 	bl	8000a84 <HAL_InitTick>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d002      	beq.n	8000e12 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	e001      	b.n	8000e16 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e12:	f7ff fe0f 	bl	8000a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40022000 	.word	0x40022000

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	200004c0 	.word	0x200004c0

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200004c0 	.word	0x200004c0

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	@ (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	@ (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff4c 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe6:	f7ff ff61 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8000fea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	68b9      	ldr	r1, [r7, #8]
 8000ff0:	6978      	ldr	r0, [r7, #20]
 8000ff2:	f7ff ffb1 	bl	8000f58 <NVIC_EncodePriority>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff80 	bl	8000f04 <__NVIC_SetPriority>
}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff54 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d008      	beq.n	8001052 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2204      	movs	r2, #4
 8001044:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e022      	b.n	8001098 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 020e 	bic.w	r2, r2, #14
 8001060:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0201 	bic.w	r2, r2, #1
 8001070:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	f003 021c 	and.w	r2, r3, #28
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001098:	4618      	mov	r0, r3
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d005      	beq.n	80010c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2204      	movs	r2, #4
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e029      	b.n	800111c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 020e 	bic.w	r2, r2, #14
 80010d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ec:	f003 021c 	and.w	r2, r3, #28
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f4:	2101      	movs	r1, #1
 80010f6:	fa01 f202 	lsl.w	r2, r1, r2
 80010fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	4798      	blx	r3
    }
  }
  return status;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	e17f      	b.n	8001438 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2101      	movs	r1, #1
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa01 f303 	lsl.w	r3, r1, r3
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8171 	beq.w	8001432 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b01      	cmp	r3, #1
 800115a:	d005      	beq.n	8001168 <HAL_GPIO_Init+0x40>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d130      	bne.n	80011ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800119e:	2201      	movs	r2, #1
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	f003 0201 	and.w	r2, r3, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d118      	bne.n	8001208 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011dc:	2201      	movs	r2, #1
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	08db      	lsrs	r3, r3, #3
 80011f2:	f003 0201 	and.w	r2, r3, #1
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b03      	cmp	r3, #3
 8001212:	d017      	beq.n	8001244 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d123      	bne.n	8001298 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	08da      	lsrs	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3208      	adds	r2, #8
 8001292:	6939      	ldr	r1, [r7, #16]
 8001294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0203 	and.w	r2, r3, #3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80ac 	beq.w	8001432 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	4b5f      	ldr	r3, [pc, #380]	@ (8001458 <HAL_GPIO_Init+0x330>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012de:	4a5e      	ldr	r2, [pc, #376]	@ (8001458 <HAL_GPIO_Init+0x330>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001458 <HAL_GPIO_Init+0x330>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f2:	4a5a      	ldr	r2, [pc, #360]	@ (800145c <HAL_GPIO_Init+0x334>)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800131c:	d025      	beq.n	800136a <HAL_GPIO_Init+0x242>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4f      	ldr	r2, [pc, #316]	@ (8001460 <HAL_GPIO_Init+0x338>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d01f      	beq.n	8001366 <HAL_GPIO_Init+0x23e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4e      	ldr	r2, [pc, #312]	@ (8001464 <HAL_GPIO_Init+0x33c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d019      	beq.n	8001362 <HAL_GPIO_Init+0x23a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4d      	ldr	r2, [pc, #308]	@ (8001468 <HAL_GPIO_Init+0x340>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0x236>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4c      	ldr	r2, [pc, #304]	@ (800146c <HAL_GPIO_Init+0x344>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00d      	beq.n	800135a <HAL_GPIO_Init+0x232>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4b      	ldr	r2, [pc, #300]	@ (8001470 <HAL_GPIO_Init+0x348>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x22e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4a      	ldr	r2, [pc, #296]	@ (8001474 <HAL_GPIO_Init+0x34c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_GPIO_Init+0x22a>
 800134e:	2306      	movs	r3, #6
 8001350:	e00c      	b.n	800136c <HAL_GPIO_Init+0x244>
 8001352:	2307      	movs	r3, #7
 8001354:	e00a      	b.n	800136c <HAL_GPIO_Init+0x244>
 8001356:	2305      	movs	r3, #5
 8001358:	e008      	b.n	800136c <HAL_GPIO_Init+0x244>
 800135a:	2304      	movs	r3, #4
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x244>
 800135e:	2303      	movs	r3, #3
 8001360:	e004      	b.n	800136c <HAL_GPIO_Init+0x244>
 8001362:	2302      	movs	r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x244>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x244>
 800136a:	2300      	movs	r3, #0
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	f002 0203 	and.w	r2, r2, #3
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	4093      	lsls	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800137c:	4937      	ldr	r1, [pc, #220]	@ (800145c <HAL_GPIO_Init+0x334>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800138a:	4b3b      	ldr	r3, [pc, #236]	@ (8001478 <HAL_GPIO_Init+0x350>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ae:	4a32      	ldr	r2, [pc, #200]	@ (8001478 <HAL_GPIO_Init+0x350>)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013b4:	4b30      	ldr	r3, [pc, #192]	@ (8001478 <HAL_GPIO_Init+0x350>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013d8:	4a27      	ldr	r2, [pc, #156]	@ (8001478 <HAL_GPIO_Init+0x350>)
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013de:	4b26      	ldr	r3, [pc, #152]	@ (8001478 <HAL_GPIO_Init+0x350>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001402:	4a1d      	ldr	r2, [pc, #116]	@ (8001478 <HAL_GPIO_Init+0x350>)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <HAL_GPIO_Init+0x350>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800142c:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <HAL_GPIO_Init+0x350>)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3301      	adds	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa22 f303 	lsr.w	r3, r2, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	f47f ae78 	bne.w	8001138 <HAL_GPIO_Init+0x10>
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	371c      	adds	r7, #28
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000
 8001460:	48000400 	.word	0x48000400
 8001464:	48000800 	.word	0x48000800
 8001468:	48000c00 	.word	0x48000c00
 800146c:	48001000 	.word	0x48001000
 8001470:	48001400 	.word	0x48001400
 8001474:	48001800 	.word	0x48001800
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40007000 	.word	0x40007000

080014c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014d6:	d130      	bne.n	800153a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d8:	4b23      	ldr	r3, [pc, #140]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014e4:	d038      	beq.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e6:	4b20      	ldr	r3, [pc, #128]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2232      	movs	r2, #50	@ 0x32
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	4a1b      	ldr	r2, [pc, #108]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0c9b      	lsrs	r3, r3, #18
 8001508:	3301      	adds	r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800150c:	e002      	b.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3b01      	subs	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001520:	d102      	bne.n	8001528 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f2      	bne.n	800150e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001528:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001534:	d110      	bne.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e00f      	b.n	800155a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001546:	d007      	beq.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001548:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001550:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001556:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40007000 	.word	0x40007000
 800156c:	20000000 	.word	0x20000000
 8001570:	431bde83 	.word	0x431bde83

08001574 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e3ca      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001586:	4b97      	ldr	r3, [pc, #604]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001590:	4b94      	ldr	r3, [pc, #592]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80e4 	beq.w	8001770 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <HAL_RCC_OscConfig+0x4a>
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	f040 808b 	bne.w	80016cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f040 8087 	bne.w	80016cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015be:	4b89      	ldr	r3, [pc, #548]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x62>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e3a2      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1a      	ldr	r2, [r3, #32]
 80015da:	4b82      	ldr	r3, [pc, #520]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <HAL_RCC_OscConfig+0x7c>
 80015e6:	4b7f      	ldr	r3, [pc, #508]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015ee:	e005      	b.n	80015fc <HAL_RCC_OscConfig+0x88>
 80015f0:	4b7c      	ldr	r3, [pc, #496]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80015f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d223      	bcs.n	8001648 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fd87 	bl	8002118 <RCC_SetFlashLatencyFromMSIRange>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e383      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001614:	4b73      	ldr	r3, [pc, #460]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a72      	ldr	r2, [pc, #456]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b70      	ldr	r3, [pc, #448]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	496d      	ldr	r1, [pc, #436]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001632:	4b6c      	ldr	r3, [pc, #432]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	4968      	ldr	r1, [pc, #416]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
 8001646:	e025      	b.n	8001694 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001648:	4b66      	ldr	r3, [pc, #408]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a65      	ldr	r2, [pc, #404]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b63      	ldr	r3, [pc, #396]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4960      	ldr	r1, [pc, #384]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001666:	4b5f      	ldr	r3, [pc, #380]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	495b      	ldr	r1, [pc, #364]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001676:	4313      	orrs	r3, r2
 8001678:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d109      	bne.n	8001694 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fd47 	bl	8002118 <RCC_SetFlashLatencyFromMSIRange>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e343      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001694:	f000 fc4a 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001698:	4602      	mov	r2, r0
 800169a:	4b52      	ldr	r3, [pc, #328]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	4950      	ldr	r1, [pc, #320]	@ (80017e8 <HAL_RCC_OscConfig+0x274>)
 80016a6:	5ccb      	ldrb	r3, [r1, r3]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
 80016b0:	4a4e      	ldr	r2, [pc, #312]	@ (80017ec <HAL_RCC_OscConfig+0x278>)
 80016b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016b4:	4b4e      	ldr	r3, [pc, #312]	@ (80017f0 <HAL_RCC_OscConfig+0x27c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f9e3 	bl	8000a84 <HAL_InitTick>
 80016be:	4603      	mov	r3, r0
 80016c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d052      	beq.n	800176e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	e327      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d032      	beq.n	800173a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016d4:	4b43      	ldr	r3, [pc, #268]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a42      	ldr	r2, [pc, #264]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fbb4 	bl	8000e4c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e8:	f7ff fbb0 	bl	8000e4c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e310      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016fa:	4b3a      	ldr	r3, [pc, #232]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001706:	4b37      	ldr	r3, [pc, #220]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a36      	ldr	r2, [pc, #216]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	4b34      	ldr	r3, [pc, #208]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4931      	ldr	r1, [pc, #196]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001724:	4b2f      	ldr	r3, [pc, #188]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	492c      	ldr	r1, [pc, #176]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e01a      	b.n	8001770 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800173a:	4b2a      	ldr	r3, [pc, #168]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a29      	ldr	r2, [pc, #164]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001746:	f7ff fb81 	bl	8000e4c <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800174e:	f7ff fb7d 	bl	8000e4c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e2dd      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001760:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x1da>
 800176c:	e000      	b.n	8001770 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800176e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d074      	beq.n	8001866 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b08      	cmp	r3, #8
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x21a>
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d10e      	bne.n	80017a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b03      	cmp	r3, #3
 800178c:	d10b      	bne.n	80017a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d064      	beq.n	8001864 <HAL_RCC_OscConfig+0x2f0>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d160      	bne.n	8001864 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e2ba      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x24a>
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0b      	ldr	r2, [pc, #44]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80017b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e026      	b.n	800180c <HAL_RCC_OscConfig+0x298>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017c6:	d115      	bne.n	80017f4 <HAL_RCC_OscConfig+0x280>
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a05      	ldr	r2, [pc, #20]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80017ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a02      	ldr	r2, [pc, #8]	@ (80017e4 <HAL_RCC_OscConfig+0x270>)
 80017da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e014      	b.n	800180c <HAL_RCC_OscConfig+0x298>
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	08006950 	.word	0x08006950
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004
 80017f4:	4ba0      	ldr	r3, [pc, #640]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a9f      	ldr	r2, [pc, #636]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80017fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b9d      	ldr	r3, [pc, #628]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a9c      	ldr	r2, [pc, #624]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d013      	beq.n	800183c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fb1a 	bl	8000e4c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fb16 	bl	8000e4c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	@ 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e276      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800182e:	4b92      	ldr	r3, [pc, #584]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x2a8>
 800183a:	e014      	b.n	8001866 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fb06 	bl	8000e4c <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fb02 	bl	8000e4c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	@ 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e262      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001856:	4b88      	ldr	r3, [pc, #544]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x2d0>
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d060      	beq.n	8001934 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b04      	cmp	r3, #4
 8001876:	d005      	beq.n	8001884 <HAL_RCC_OscConfig+0x310>
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d119      	bne.n	80018b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d116      	bne.n	80018b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001884:	4b7c      	ldr	r3, [pc, #496]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_OscConfig+0x328>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e23f      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b76      	ldr	r3, [pc, #472]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	061b      	lsls	r3, r3, #24
 80018aa:	4973      	ldr	r1, [pc, #460]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b0:	e040      	b.n	8001934 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d023      	beq.n	8001902 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6e      	ldr	r2, [pc, #440]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff fac1 	bl	8000e4c <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ce:	f7ff fabd 	bl	8000e4c <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e21d      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e0:	4b65      	ldr	r3, [pc, #404]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ec:	4b62      	ldr	r3, [pc, #392]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	495f      	ldr	r1, [pc, #380]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
 8001900:	e018      	b.n	8001934 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001902:	4b5d      	ldr	r3, [pc, #372]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a5c      	ldr	r2, [pc, #368]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800190c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff fa9d 	bl	8000e4c <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fa99 	bl	8000e4c <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e1f9      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001928:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f0      	bne.n	8001916 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d03c      	beq.n	80019ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d01c      	beq.n	8001982 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001948:	4b4b      	ldr	r3, [pc, #300]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800194e:	4a4a      	ldr	r2, [pc, #296]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff fa78 	bl	8000e4c <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff fa74 	bl	8000e4c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1d4      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001972:	4b41      	ldr	r3, [pc, #260]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ef      	beq.n	8001960 <HAL_RCC_OscConfig+0x3ec>
 8001980:	e01b      	b.n	80019ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001982:	4b3d      	ldr	r3, [pc, #244]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001988:	4a3b      	ldr	r2, [pc, #236]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001992:	f7ff fa5b 	bl	8000e4c <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199a:	f7ff fa57 	bl	8000e4c <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e1b7      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019ac:	4b32      	ldr	r3, [pc, #200]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80019ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1ef      	bne.n	800199a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80a6 	beq.w	8001b14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d10d      	bne.n	80019f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d8:	4b27      	ldr	r3, [pc, #156]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019dc:	4a26      	ldr	r2, [pc, #152]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80019de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019e4:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019f0:	2301      	movs	r3, #1
 80019f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f4:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <HAL_RCC_OscConfig+0x508>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d118      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a00:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <HAL_RCC_OscConfig+0x508>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1d      	ldr	r2, [pc, #116]	@ (8001a7c <HAL_RCC_OscConfig+0x508>)
 8001a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fa1e 	bl	8000e4c <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a14:	f7ff fa1a 	bl	8000e4c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e17a      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_RCC_OscConfig+0x508>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d108      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4d8>
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a40:	4a0d      	ldr	r2, [pc, #52]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a4a:	e029      	b.n	8001aa0 <HAL_RCC_OscConfig+0x52c>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b05      	cmp	r3, #5
 8001a52:	d115      	bne.n	8001a80 <HAL_RCC_OscConfig+0x50c>
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5a:	4a07      	ldr	r2, [pc, #28]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a64:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a6a:	4a03      	ldr	r2, [pc, #12]	@ (8001a78 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a74:	e014      	b.n	8001aa0 <HAL_RCC_OscConfig+0x52c>
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	4b9c      	ldr	r3, [pc, #624]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a86:	4a9b      	ldr	r2, [pc, #620]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a90:	4b98      	ldr	r3, [pc, #608]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a96:	4a97      	ldr	r2, [pc, #604]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d016      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f9d0 	bl	8000e4c <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f7ff f9cc 	bl	8000e4c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e12a      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac6:	4b8b      	ldr	r3, [pc, #556]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0ed      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x53c>
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad6:	f7ff f9b9 	bl	8000e4c <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff f9b5 	bl	8000e4c <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e113      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af4:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1ed      	bne.n	8001ade <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b02:	7ffb      	ldrb	r3, [r7, #31]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b08:	4b7a      	ldr	r3, [pc, #488]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0c:	4a79      	ldr	r2, [pc, #484]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b12:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80fe 	beq.w	8001d1a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	f040 80d0 	bne.w	8001cc8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b28:	4b72      	ldr	r3, [pc, #456]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d130      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	3b01      	subs	r3, #1
 8001b48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d127      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d11f      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b68:	2a07      	cmp	r2, #7
 8001b6a:	bf14      	ite	ne
 8001b6c:	2201      	movne	r2, #1
 8001b6e:	2200      	moveq	r2, #0
 8001b70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d113      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b80:	085b      	lsrs	r3, r3, #1
 8001b82:	3b01      	subs	r3, #1
 8001b84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	085b      	lsrs	r3, r3, #1
 8001b96:	3b01      	subs	r3, #1
 8001b98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d06e      	beq.n	8001c7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d069      	beq.n	8001c78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ba4:	4b53      	ldr	r3, [pc, #332]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bb0:	4b50      	ldr	r3, [pc, #320]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0ad      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001bc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bcc:	f7ff f93e 	bl	8000e4c <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff f93a 	bl	8000e4c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e09a      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be6:	4b43      	ldr	r3, [pc, #268]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf2:	4b40      	ldr	r3, [pc, #256]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	4b40      	ldr	r3, [pc, #256]	@ (8001cf8 <HAL_RCC_OscConfig+0x784>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c02:	3a01      	subs	r2, #1
 8001c04:	0112      	lsls	r2, r2, #4
 8001c06:	4311      	orrs	r1, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c0c:	0212      	lsls	r2, r2, #8
 8001c0e:	4311      	orrs	r1, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c14:	0852      	lsrs	r2, r2, #1
 8001c16:	3a01      	subs	r2, #1
 8001c18:	0552      	lsls	r2, r2, #21
 8001c1a:	4311      	orrs	r1, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c20:	0852      	lsrs	r2, r2, #1
 8001c22:	3a01      	subs	r2, #1
 8001c24:	0652      	lsls	r2, r2, #25
 8001c26:	4311      	orrs	r1, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c2c:	0912      	lsrs	r2, r2, #4
 8001c2e:	0452      	lsls	r2, r2, #17
 8001c30:	430a      	orrs	r2, r1
 8001c32:	4930      	ldr	r1, [pc, #192]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c38:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c44:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a2a      	ldr	r2, [pc, #168]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c50:	f7ff f8fc 	bl	8000e4c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff f8f8 	bl	8000e4c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e058      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c76:	e050      	b.n	8001d1a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e04f      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d148      	bne.n	8001d1a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c94:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	4a16      	ldr	r2, [pc, #88]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ca0:	f7ff f8d4 	bl	8000e4c <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff f8d0 	bl	8000e4c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e030      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cba:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x734>
 8001cc6:	e028      	b.n	8001d1a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d023      	beq.n	8001d16 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a08      	ldr	r2, [pc, #32]	@ (8001cf4 <HAL_RCC_OscConfig+0x780>)
 8001cd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cda:	f7ff f8b7 	bl	8000e4c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce0:	e00c      	b.n	8001cfc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7ff f8b3 	bl	8000e4c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d905      	bls.n	8001cfc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e013      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cfc:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <HAL_RCC_OscConfig+0x7b0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1ec      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_RCC_OscConfig+0x7b0>)
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	4905      	ldr	r1, [pc, #20]	@ (8001d24 <HAL_RCC_OscConfig+0x7b0>)
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_RCC_OscConfig+0x7b4>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	60cb      	str	r3, [r1, #12]
 8001d14:	e001      	b.n	8001d1a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3720      	adds	r7, #32
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	feeefffc 	.word	0xfeeefffc

08001d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0e7      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d40:	4b75      	ldr	r3, [pc, #468]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d910      	bls.n	8001d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4e:	4b72      	ldr	r3, [pc, #456]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 0207 	bic.w	r2, r3, #7
 8001d56:	4970      	ldr	r1, [pc, #448]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0cf      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b66      	ldr	r3, [pc, #408]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d908      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b63      	ldr	r3, [pc, #396]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4960      	ldr	r1, [pc, #384]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d04c      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d121      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0a6      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dca:	4b54      	ldr	r3, [pc, #336]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d115      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e09a      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001de2:	4b4e      	ldr	r3, [pc, #312]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e08e      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df2:	4b4a      	ldr	r3, [pc, #296]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e086      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e02:	4b46      	ldr	r3, [pc, #280]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f023 0203 	bic.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4943      	ldr	r1, [pc, #268]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e14:	f7ff f81a 	bl	8000e4c <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7ff f816 	bl	8000e4c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e06e      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	4b3a      	ldr	r3, [pc, #232]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 020c 	and.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1eb      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d010      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4b31      	ldr	r3, [pc, #196]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d208      	bcs.n	8001e72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b2e      	ldr	r3, [pc, #184]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	492b      	ldr	r1, [pc, #172]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e72:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d210      	bcs.n	8001ea2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e80:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 0207 	bic.w	r2, r3, #7
 8001e88:	4923      	ldr	r1, [pc, #140]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e90:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <HAL_RCC_ClockConfig+0x1ec>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e036      	b.n	8001f10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eae:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4918      	ldr	r1, [pc, #96]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ecc:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4910      	ldr	r1, [pc, #64]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ee0:	f000 f824 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	490b      	ldr	r1, [pc, #44]	@ (8001f20 <HAL_RCC_ClockConfig+0x1f4>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	4a09      	ldr	r2, [pc, #36]	@ (8001f24 <HAL_RCC_ClockConfig+0x1f8>)
 8001efe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f00:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <HAL_RCC_ClockConfig+0x1fc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fdbd 	bl	8000a84 <HAL_InitTick>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	08006950 	.word	0x08006950
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000004 	.word	0x20000004

08001f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f44:	4b3b      	ldr	r3, [pc, #236]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x34>
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d121      	bne.n	8001f9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d11e      	bne.n	8001f9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f60:	4b34      	ldr	r3, [pc, #208]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f6c:	4b31      	ldr	r3, [pc, #196]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e005      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f88:	4a2b      	ldr	r2, [pc, #172]	@ (8002038 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10d      	bne.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d102      	bne.n	8001faa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fa4:	4b25      	ldr	r3, [pc, #148]	@ (800203c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	e004      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fb0:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d134      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fba:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d003      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xac>
 8001fd0:	e005      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd4:	617b      	str	r3, [r7, #20]
      break;
 8001fd6:	e005      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fd8:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fda:	617b      	str	r3, [r7, #20]
      break;
 8001fdc:	e002      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	617b      	str	r3, [r7, #20]
      break;
 8001fe2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe4:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	3301      	adds	r3, #1
 8001ff0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	fb03 f202 	mul.w	r2, r3, r2
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	fbb2 f3f3 	udiv	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800200a:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x108>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	0e5b      	lsrs	r3, r3, #25
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	3301      	adds	r3, #1
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002022:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002024:	69bb      	ldr	r3, [r7, #24]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	08006968 	.word	0x08006968
 800203c:	00f42400 	.word	0x00f42400
 8002040:	007a1200 	.word	0x007a1200

08002044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <HAL_RCC_GetHCLKFreq+0x14>)
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000000 	.word	0x20000000

0800205c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002060:	f7ff fff0 	bl	8002044 <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4904      	ldr	r1, [pc, #16]	@ (8002084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	08006960 	.word	0x08006960

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800208c:	f7ff ffda 	bl	8002044 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0adb      	lsrs	r3, r3, #11
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4904      	ldr	r1, [pc, #16]	@ (80020b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08006960 	.word	0x08006960

080020b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	220f      	movs	r2, #15
 80020c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <HAL_RCC_GetClockConfig+0x5c>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0203 	and.w	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <HAL_RCC_GetClockConfig+0x5c>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <HAL_RCC_GetClockConfig+0x5c>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <HAL_RCC_GetClockConfig+0x5c>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	08db      	lsrs	r3, r3, #3
 80020ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80020f6:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <HAL_RCC_GetClockConfig+0x60>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0207 	and.w	r2, r3, #7
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	601a      	str	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	40022000 	.word	0x40022000

08002118 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002124:	4b2a      	ldr	r3, [pc, #168]	@ (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002130:	f7ff f9bc 	bl	80014ac <HAL_PWREx_GetVoltageRange>
 8002134:	6178      	str	r0, [r7, #20]
 8002136:	e014      	b.n	8002162 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213c:	4a24      	ldr	r2, [pc, #144]	@ (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002142:	6593      	str	r3, [r2, #88]	@ 0x58
 8002144:	4b22      	ldr	r3, [pc, #136]	@ (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002150:	f7ff f9ac 	bl	80014ac <HAL_PWREx_GetVoltageRange>
 8002154:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002156:	4b1e      	ldr	r3, [pc, #120]	@ (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	4a1d      	ldr	r2, [pc, #116]	@ (80021d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002160:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002168:	d10b      	bne.n	8002182 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b80      	cmp	r3, #128	@ 0x80
 800216e:	d919      	bls.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2ba0      	cmp	r3, #160	@ 0xa0
 8002174:	d902      	bls.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002176:	2302      	movs	r3, #2
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	e013      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800217c:	2301      	movs	r3, #1
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	e010      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b80      	cmp	r3, #128	@ 0x80
 8002186:	d902      	bls.n	800218e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002188:	2303      	movs	r3, #3
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	e00a      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b80      	cmp	r3, #128	@ 0x80
 8002192:	d102      	bne.n	800219a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002194:	2302      	movs	r3, #2
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	e004      	b.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b70      	cmp	r3, #112	@ 0x70
 800219e:	d101      	bne.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021a0:	2301      	movs	r3, #1
 80021a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 0207 	bic.w	r2, r3, #7
 80021ac:	4909      	ldr	r1, [pc, #36]	@ (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021b4:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d001      	beq.n	80021c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40022000 	.word	0x40022000

080021d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021e0:	2300      	movs	r3, #0
 80021e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021e4:	2300      	movs	r3, #0
 80021e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d041      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80021fc:	d02a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002202:	d824      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002204:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002208:	d008      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800220a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800220e:	d81e      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002214:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002218:	d010      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800221a:	e018      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800221c:	4b86      	ldr	r3, [pc, #536]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4a85      	ldr	r2, [pc, #532]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002226:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002228:	e015      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3304      	adds	r3, #4
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fabb 	bl	80027ac <RCCEx_PLLSAI1_Config>
 8002236:	4603      	mov	r3, r0
 8002238:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800223a:	e00c      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3320      	adds	r3, #32
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fba6 	bl	8002994 <RCCEx_PLLSAI2_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800224c:	e003      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	74fb      	strb	r3, [r7, #19]
      break;
 8002252:	e000      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10b      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800225c:	4b76      	ldr	r3, [pc, #472]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002262:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800226a:	4973      	ldr	r1, [pc, #460]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002272:	e001      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d041      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002288:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800228c:	d02a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800228e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002292:	d824      	bhi.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002294:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002298:	d008      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800229a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800229e:	d81e      	bhi.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a8:	d010      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022aa:	e018      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022ac:	4b62      	ldr	r3, [pc, #392]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a61      	ldr	r2, [pc, #388]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022b8:	e015      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3304      	adds	r3, #4
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 fa73 	bl	80027ac <RCCEx_PLLSAI1_Config>
 80022c6:	4603      	mov	r3, r0
 80022c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ca:	e00c      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3320      	adds	r3, #32
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 fb5e 	bl	8002994 <RCCEx_PLLSAI2_Config>
 80022d8:	4603      	mov	r3, r0
 80022da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022dc:	e003      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	74fb      	strb	r3, [r7, #19]
      break;
 80022e2:	e000      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022e6:	7cfb      	ldrb	r3, [r7, #19]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10b      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022ec:	4b52      	ldr	r3, [pc, #328]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022fa:	494f      	ldr	r1, [pc, #316]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002302:	e001      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80a0 	beq.w	8002456 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800231a:	4b47      	ldr	r3, [pc, #284]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800232a:	2300      	movs	r3, #0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002330:	4b41      	ldr	r3, [pc, #260]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002334:	4a40      	ldr	r2, [pc, #256]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233a:	6593      	str	r3, [r2, #88]	@ 0x58
 800233c:	4b3e      	ldr	r3, [pc, #248]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002348:	2301      	movs	r3, #1
 800234a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234c:	4b3b      	ldr	r3, [pc, #236]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3a      	ldr	r2, [pc, #232]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002356:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002358:	f7fe fd78 	bl	8000e4c <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800235e:	e009      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002360:	f7fe fd74 	bl	8000e4c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d902      	bls.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	74fb      	strb	r3, [r7, #19]
        break;
 8002372:	e005      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002374:	4b31      	ldr	r3, [pc, #196]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ef      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d15c      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002386:	4b2c      	ldr	r3, [pc, #176]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800238c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002390:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01f      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d019      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023a4:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023b0:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b6:	4a20      	ldr	r2, [pc, #128]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023d0:	4a19      	ldr	r2, [pc, #100]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d016      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7fe fd33 	bl	8000e4c <HAL_GetTick>
 80023e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e8:	e00b      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe fd2f 	bl	8000e4c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d902      	bls.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002400:	e006      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002402:	4b0d      	ldr	r3, [pc, #52]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0ec      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10c      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002416:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002426:	4904      	ldr	r1, [pc, #16]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800242e:	e009      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	74bb      	strb	r3, [r7, #18]
 8002434:	e006      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002444:	7c7b      	ldrb	r3, [r7, #17]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d105      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244a:	4b9e      	ldr	r3, [pc, #632]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	4a9d      	ldr	r2, [pc, #628]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002454:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002462:	4b98      	ldr	r3, [pc, #608]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002468:	f023 0203 	bic.w	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002470:	4994      	ldr	r1, [pc, #592]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00a      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002484:	4b8f      	ldr	r3, [pc, #572]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248a:	f023 020c 	bic.w	r2, r3, #12
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002492:	498c      	ldr	r1, [pc, #560]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024a6:	4b87      	ldr	r3, [pc, #540]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	4983      	ldr	r1, [pc, #524]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024c8:	4b7e      	ldr	r3, [pc, #504]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	497b      	ldr	r1, [pc, #492]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ea:	4b76      	ldr	r3, [pc, #472]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f8:	4972      	ldr	r1, [pc, #456]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800250c:	4b6d      	ldr	r3, [pc, #436]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002512:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	496a      	ldr	r1, [pc, #424]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800252e:	4b65      	ldr	r3, [pc, #404]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002534:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253c:	4961      	ldr	r1, [pc, #388]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002550:	4b5c      	ldr	r3, [pc, #368]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002556:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255e:	4959      	ldr	r1, [pc, #356]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002572:	4b54      	ldr	r3, [pc, #336]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002578:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002580:	4950      	ldr	r1, [pc, #320]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002594:	4b4b      	ldr	r3, [pc, #300]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a2:	4948      	ldr	r1, [pc, #288]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025b6:	4b43      	ldr	r3, [pc, #268]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c4:	493f      	ldr	r1, [pc, #252]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d028      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025d8:	4b3a      	ldr	r3, [pc, #232]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025e6:	4937      	ldr	r1, [pc, #220]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025f6:	d106      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f8:	4b32      	ldr	r3, [pc, #200]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a31      	ldr	r2, [pc, #196]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002602:	60d3      	str	r3, [r2, #12]
 8002604:	e011      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800260a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800260e:	d10c      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3304      	adds	r3, #4
 8002614:	2101      	movs	r1, #1
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f8c8 	bl	80027ac <RCCEx_PLLSAI1_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d028      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002636:	4b23      	ldr	r3, [pc, #140]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002644:	491f      	ldr	r1, [pc, #124]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002650:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002654:	d106      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002656:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	4a1a      	ldr	r2, [pc, #104]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002660:	60d3      	str	r3, [r2, #12]
 8002662:	e011      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002668:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800266c:	d10c      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3304      	adds	r3, #4
 8002672:	2101      	movs	r1, #1
 8002674:	4618      	mov	r0, r3
 8002676:	f000 f899 	bl	80027ac <RCCEx_PLLSAI1_Config>
 800267a:	4603      	mov	r3, r0
 800267c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d02b      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002694:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a2:	4908      	ldr	r1, [pc, #32]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026b2:	d109      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b4:	4b03      	ldr	r3, [pc, #12]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4a02      	ldr	r2, [pc, #8]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026be:	60d3      	str	r3, [r2, #12]
 80026c0:	e014      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026d0:	d10c      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	2101      	movs	r1, #1
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 f867 	bl	80027ac <RCCEx_PLLSAI1_Config>
 80026de:	4603      	mov	r3, r0
 80026e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d02f      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026f8:	4b2b      	ldr	r3, [pc, #172]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002706:	4928      	ldr	r1, [pc, #160]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002716:	d10d      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3304      	adds	r3, #4
 800271c:	2102      	movs	r1, #2
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f844 	bl	80027ac <RCCEx_PLLSAI1_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d014      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	74bb      	strb	r3, [r7, #18]
 8002732:	e011      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800273c:	d10c      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3320      	adds	r3, #32
 8002742:	2102      	movs	r1, #2
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f925 	bl	8002994 <RCCEx_PLLSAI2_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002764:	4b10      	ldr	r3, [pc, #64]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002772:	490d      	ldr	r1, [pc, #52]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002796:	4904      	ldr	r1, [pc, #16]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800279e:	7cbb      	ldrb	r3, [r7, #18]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000

080027ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ba:	4b75      	ldr	r3, [pc, #468]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d018      	beq.n	80027f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027c6:	4b72      	ldr	r3, [pc, #456]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0203 	and.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d10d      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
       ||
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027de:	4b6c      	ldr	r3, [pc, #432]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
       ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d047      	beq.n	8002882 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e044      	b.n	8002882 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d018      	beq.n	8002832 <RCCEx_PLLSAI1_Config+0x86>
 8002800:	2b03      	cmp	r3, #3
 8002802:	d825      	bhi.n	8002850 <RCCEx_PLLSAI1_Config+0xa4>
 8002804:	2b01      	cmp	r3, #1
 8002806:	d002      	beq.n	800280e <RCCEx_PLLSAI1_Config+0x62>
 8002808:	2b02      	cmp	r3, #2
 800280a:	d009      	beq.n	8002820 <RCCEx_PLLSAI1_Config+0x74>
 800280c:	e020      	b.n	8002850 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800280e:	4b60      	ldr	r3, [pc, #384]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11d      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281e:	e01a      	b.n	8002856 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002820:	4b5b      	ldr	r3, [pc, #364]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002828:	2b00      	cmp	r3, #0
 800282a:	d116      	bne.n	800285a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002830:	e013      	b.n	800285a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002832:	4b57      	ldr	r3, [pc, #348]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10f      	bne.n	800285e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800283e:	4b54      	ldr	r3, [pc, #336]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800284e:	e006      	b.n	800285e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
      break;
 8002854:	e004      	b.n	8002860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002856:	bf00      	nop
 8002858:	e002      	b.n	8002860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800285a:	bf00      	nop
 800285c:	e000      	b.n	8002860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800285e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10d      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002866:	4b4a      	ldr	r3, [pc, #296]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6819      	ldr	r1, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	430b      	orrs	r3, r1
 800287c:	4944      	ldr	r1, [pc, #272]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d17d      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002888:	4b41      	ldr	r3, [pc, #260]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a40      	ldr	r2, [pc, #256]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002894:	f7fe fada 	bl	8000e4c <HAL_GetTick>
 8002898:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800289a:	e009      	b.n	80028b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800289c:	f7fe fad6 	bl	8000e4c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d902      	bls.n	80028b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	73fb      	strb	r3, [r7, #15]
        break;
 80028ae:	e005      	b.n	80028bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028b0:	4b37      	ldr	r3, [pc, #220]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ef      	bne.n	800289c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d160      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d111      	bne.n	80028ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c8:	4b31      	ldr	r3, [pc, #196]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6892      	ldr	r2, [r2, #8]
 80028d8:	0211      	lsls	r1, r2, #8
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68d2      	ldr	r2, [r2, #12]
 80028de:	0912      	lsrs	r2, r2, #4
 80028e0:	0452      	lsls	r2, r2, #17
 80028e2:	430a      	orrs	r2, r1
 80028e4:	492a      	ldr	r1, [pc, #168]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	610b      	str	r3, [r1, #16]
 80028ea:	e027      	b.n	800293c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d112      	bne.n	8002918 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f2:	4b27      	ldr	r3, [pc, #156]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80028fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6892      	ldr	r2, [r2, #8]
 8002902:	0211      	lsls	r1, r2, #8
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6912      	ldr	r2, [r2, #16]
 8002908:	0852      	lsrs	r2, r2, #1
 800290a:	3a01      	subs	r2, #1
 800290c:	0552      	lsls	r2, r2, #21
 800290e:	430a      	orrs	r2, r1
 8002910:	491f      	ldr	r1, [pc, #124]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	610b      	str	r3, [r1, #16]
 8002916:	e011      	b.n	800293c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002918:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002920:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6892      	ldr	r2, [r2, #8]
 8002928:	0211      	lsls	r1, r2, #8
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6952      	ldr	r2, [r2, #20]
 800292e:	0852      	lsrs	r2, r2, #1
 8002930:	3a01      	subs	r2, #1
 8002932:	0652      	lsls	r2, r2, #25
 8002934:	430a      	orrs	r2, r1
 8002936:	4916      	ldr	r1, [pc, #88]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800293c:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a13      	ldr	r2, [pc, #76]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002942:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002946:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fa80 	bl	8000e4c <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800294e:	e009      	b.n	8002964 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002950:	f7fe fa7c 	bl	8000e4c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d902      	bls.n	8002964 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	73fb      	strb	r3, [r7, #15]
          break;
 8002962:	e005      	b.n	8002970 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002964:	4b0a      	ldr	r3, [pc, #40]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ef      	beq.n	8002950 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	4904      	ldr	r1, [pc, #16]	@ (8002990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000

08002994 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029a2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d018      	beq.n	80029e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029ae:	4b67      	ldr	r3, [pc, #412]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0203 	and.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d10d      	bne.n	80029da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
       ||
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029c6:	4b61      	ldr	r3, [pc, #388]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
       ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d047      	beq.n	8002a6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
 80029de:	e044      	b.n	8002a6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d018      	beq.n	8002a1a <RCCEx_PLLSAI2_Config+0x86>
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d825      	bhi.n	8002a38 <RCCEx_PLLSAI2_Config+0xa4>
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d002      	beq.n	80029f6 <RCCEx_PLLSAI2_Config+0x62>
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d009      	beq.n	8002a08 <RCCEx_PLLSAI2_Config+0x74>
 80029f4:	e020      	b.n	8002a38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029f6:	4b55      	ldr	r3, [pc, #340]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11d      	bne.n	8002a3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a06:	e01a      	b.n	8002a3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a08:	4b50      	ldr	r3, [pc, #320]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d116      	bne.n	8002a42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a18:	e013      	b.n	8002a42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10f      	bne.n	8002a46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a26:	4b49      	ldr	r3, [pc, #292]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a36:	e006      	b.n	8002a46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3c:	e004      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e002      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a42:	bf00      	nop
 8002a44:	e000      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10d      	bne.n	8002a6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	430b      	orrs	r3, r1
 8002a64:	4939      	ldr	r1, [pc, #228]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d167      	bne.n	8002b40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a70:	4b36      	ldr	r3, [pc, #216]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a35      	ldr	r2, [pc, #212]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a7c:	f7fe f9e6 	bl	8000e4c <HAL_GetTick>
 8002a80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a82:	e009      	b.n	8002a98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a84:	f7fe f9e2 	bl	8000e4c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d902      	bls.n	8002a98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	73fb      	strb	r3, [r7, #15]
        break;
 8002a96:	e005      	b.n	8002aa4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a98:	4b2c      	ldr	r3, [pc, #176]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ef      	bne.n	8002a84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d14a      	bne.n	8002b40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d111      	bne.n	8002ad4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ab0:	4b26      	ldr	r3, [pc, #152]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6892      	ldr	r2, [r2, #8]
 8002ac0:	0211      	lsls	r1, r2, #8
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68d2      	ldr	r2, [r2, #12]
 8002ac6:	0912      	lsrs	r2, r2, #4
 8002ac8:	0452      	lsls	r2, r2, #17
 8002aca:	430a      	orrs	r2, r1
 8002acc:	491f      	ldr	r1, [pc, #124]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	614b      	str	r3, [r1, #20]
 8002ad2:	e011      	b.n	8002af8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002adc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6892      	ldr	r2, [r2, #8]
 8002ae4:	0211      	lsls	r1, r2, #8
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6912      	ldr	r2, [r2, #16]
 8002aea:	0852      	lsrs	r2, r2, #1
 8002aec:	3a01      	subs	r2, #1
 8002aee:	0652      	lsls	r2, r2, #25
 8002af0:	430a      	orrs	r2, r1
 8002af2:	4916      	ldr	r1, [pc, #88]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002af8:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a13      	ldr	r2, [pc, #76]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7fe f9a2 	bl	8000e4c <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b0a:	e009      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b0c:	f7fe f99e 	bl	8000e4c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d902      	bls.n	8002b20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b1e:	e005      	b.n	8002b2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b20:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ef      	beq.n	8002b0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4904      	ldr	r1, [pc, #16]	@ (8002b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e049      	b.n	8002bf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f841 	bl	8002bfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f000 f9e0 	bl	8002f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d001      	beq.n	8002c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e04f      	b.n	8002ccc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a23      	ldr	r2, [pc, #140]	@ (8002cd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01d      	beq.n	8002c8a <HAL_TIM_Base_Start_IT+0x76>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c56:	d018      	beq.n	8002c8a <HAL_TIM_Base_Start_IT+0x76>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cdc <HAL_TIM_Base_Start_IT+0xc8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_TIM_Base_Start_IT+0x76>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00e      	beq.n	8002c8a <HAL_TIM_Base_Start_IT+0x76>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1c      	ldr	r2, [pc, #112]	@ (8002ce4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d009      	beq.n	8002c8a <HAL_TIM_Base_Start_IT+0x76>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_TIM_Base_Start_IT+0x76>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a19      	ldr	r2, [pc, #100]	@ (8002cec <HAL_TIM_Base_Start_IT+0xd8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d115      	bne.n	8002cb6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b06      	cmp	r3, #6
 8002c9a:	d015      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0xb4>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca2:	d011      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb4:	e008      	b.n	8002cc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0201 	orr.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e000      	b.n	8002cca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40012c00 	.word	0x40012c00
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40000800 	.word	0x40000800
 8002ce4:	40000c00 	.word	0x40000c00
 8002ce8:	40013400 	.word	0x40013400
 8002cec:	40014000 	.word	0x40014000
 8002cf0:	00010007 	.word	0x00010007

08002cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d020      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01b      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0202 	mvn.w	r2, #2
 8002d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f8e9 	bl	8002f16 <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f8db 	bl	8002f02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f8ec 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0304 	and.w	r3, r3, #4
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d020      	beq.n	8002da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01b      	beq.n	8002da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0204 	mvn.w	r2, #4
 8002d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8c3 	bl	8002f16 <HAL_TIM_IC_CaptureCallback>
 8002d90:	e005      	b.n	8002d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f8b5 	bl	8002f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f8c6 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d020      	beq.n	8002df0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01b      	beq.n	8002df0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0208 	mvn.w	r2, #8
 8002dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f89d 	bl	8002f16 <HAL_TIM_IC_CaptureCallback>
 8002ddc:	e005      	b.n	8002dea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f88f 	bl	8002f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f8a0 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d020      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01b      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0210 	mvn.w	r2, #16
 8002e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2208      	movs	r2, #8
 8002e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f877 	bl	8002f16 <HAL_TIM_IC_CaptureCallback>
 8002e28:	e005      	b.n	8002e36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f869 	bl	8002f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f87a 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00c      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0201 	mvn.w	r2, #1
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fdd2 	bl	8000a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00c      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f913 	bl	80030b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00c      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f90b 	bl	80030c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00c      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f834 	bl	8002f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00c      	beq.n	8002efa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f06f 0220 	mvn.w	r2, #32
 8002ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f8d3 	bl	80030a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a46      	ldr	r2, [pc, #280]	@ (8003080 <TIM_Base_SetConfig+0x12c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f72:	d00f      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a43      	ldr	r2, [pc, #268]	@ (8003084 <TIM_Base_SetConfig+0x130>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a42      	ldr	r2, [pc, #264]	@ (8003088 <TIM_Base_SetConfig+0x134>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a41      	ldr	r2, [pc, #260]	@ (800308c <TIM_Base_SetConfig+0x138>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a40      	ldr	r2, [pc, #256]	@ (8003090 <TIM_Base_SetConfig+0x13c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d108      	bne.n	8002fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a35      	ldr	r2, [pc, #212]	@ (8003080 <TIM_Base_SetConfig+0x12c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01f      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb4:	d01b      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a32      	ldr	r2, [pc, #200]	@ (8003084 <TIM_Base_SetConfig+0x130>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d017      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a31      	ldr	r2, [pc, #196]	@ (8003088 <TIM_Base_SetConfig+0x134>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a30      	ldr	r2, [pc, #192]	@ (800308c <TIM_Base_SetConfig+0x138>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00f      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8003090 <TIM_Base_SetConfig+0x13c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8003094 <TIM_Base_SetConfig+0x140>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8003098 <TIM_Base_SetConfig+0x144>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d003      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800309c <TIM_Base_SetConfig+0x148>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d108      	bne.n	8003000 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a16      	ldr	r2, [pc, #88]	@ (8003080 <TIM_Base_SetConfig+0x12c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00f      	beq.n	800304c <TIM_Base_SetConfig+0xf8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a18      	ldr	r2, [pc, #96]	@ (8003090 <TIM_Base_SetConfig+0x13c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00b      	beq.n	800304c <TIM_Base_SetConfig+0xf8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a17      	ldr	r2, [pc, #92]	@ (8003094 <TIM_Base_SetConfig+0x140>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_Base_SetConfig+0xf8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a16      	ldr	r2, [pc, #88]	@ (8003098 <TIM_Base_SetConfig+0x144>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0xf8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a15      	ldr	r2, [pc, #84]	@ (800309c <TIM_Base_SetConfig+0x148>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d103      	bne.n	8003054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b01      	cmp	r3, #1
 8003064:	d105      	bne.n	8003072 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f023 0201 	bic.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	611a      	str	r2, [r3, #16]
  }
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40012c00 	.word	0x40012c00
 8003084:	40000400 	.word	0x40000400
 8003088:	40000800 	.word	0x40000800
 800308c:	40000c00 	.word	0x40000c00
 8003090:	40013400 	.word	0x40013400
 8003094:	40014000 	.word	0x40014000
 8003098:	40014400 	.word	0x40014400
 800309c:	40014800 	.word	0x40014800

080030a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e040      	b.n	8003170 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd fde2 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2224      	movs	r2, #36	@ 0x24
 8003108:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fedc 	bl	8003ee0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fc21 	bl	8003970 <UART_SetConfig>
 800312e:	4603      	mov	r3, r0
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e01b      	b.n	8003170 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 ff5b 	bl	8004024 <UART_CheckIdleState>
 800316e:	4603      	mov	r3, r0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	@ 0x28
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800318c:	2b20      	cmp	r3, #32
 800318e:	d177      	bne.n	8003280 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_UART_Transmit+0x24>
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e070      	b.n	8003282 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2221      	movs	r2, #33	@ 0x21
 80031ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031ae:	f7fd fe4d 	bl	8000e4c <HAL_GetTick>
 80031b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	88fa      	ldrh	r2, [r7, #6]
 80031b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031cc:	d108      	bne.n	80031e0 <HAL_UART_Transmit+0x68>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e003      	b.n	80031e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031e8:	e02f      	b.n	800324a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2180      	movs	r1, #128	@ 0x80
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 ffbd 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d004      	beq.n	800320a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e03b      	b.n	8003282 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10b      	bne.n	8003228 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800321c:	b292      	uxth	r2, r2
 800321e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	3302      	adds	r3, #2
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	e007      	b.n	8003238 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	781a      	ldrb	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3301      	adds	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1c9      	bne.n	80031ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2200      	movs	r2, #0
 800325e:	2140      	movs	r1, #64	@ 0x40
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 ff87 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e005      	b.n	8003282 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	@ 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d137      	bne.n	8003314 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_UART_Receive_IT+0x24>
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e030      	b.n	8003316 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a18      	ldr	r2, [pc, #96]	@ (8003320 <HAL_UART_Receive_IT+0x94>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d01f      	beq.n	8003304 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d018      	beq.n	8003304 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	e853 3f00 	ldrex	r3, [r3]
 80032de:	613b      	str	r3, [r7, #16]
   return(result);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f4:	69f9      	ldr	r1, [r7, #28]
 80032f6:	6a3a      	ldr	r2, [r7, #32]
 80032f8:	e841 2300 	strex	r3, r2, [r1]
 80032fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e6      	bne.n	80032d2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	461a      	mov	r2, r3
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 ffa0 	bl	8004250 <UART_Start_Receive_IT>
 8003310:	4603      	mov	r3, r0
 8003312:	e000      	b.n	8003316 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3728      	adds	r7, #40	@ 0x28
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40008000 	.word	0x40008000

08003324 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b0ba      	sub	sp, #232	@ 0xe8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800334a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800334e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003352:	4013      	ands	r3, r2
 8003354:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d115      	bne.n	800338c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00f      	beq.n	800338c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800336c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 82ca 	beq.w	8003916 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
      }
      return;
 800338a:	e2c4      	b.n	8003916 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800338c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 8117 	beq.w	80035c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80033a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80033a6:	4b85      	ldr	r3, [pc, #532]	@ (80035bc <HAL_UART_IRQHandler+0x298>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 810a 	beq.w	80035c4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80033b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d011      	beq.n	80033e0 <HAL_UART_IRQHandler+0xbc>
 80033bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00b      	beq.n	80033e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d011      	beq.n	8003410 <HAL_UART_IRQHandler+0xec>
 80033ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2202      	movs	r2, #2
 80033fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003406:	f043 0204 	orr.w	r2, r3, #4
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d011      	beq.n	8003440 <HAL_UART_IRQHandler+0x11c>
 800341c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2204      	movs	r2, #4
 800342e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003436:	f043 0202 	orr.w	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d017      	beq.n	800347c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800344c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d105      	bne.n	8003464 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800345c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00b      	beq.n	800347c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2208      	movs	r2, #8
 800346a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003472:	f043 0208 	orr.w	r2, r3, #8
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800347c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003484:	2b00      	cmp	r3, #0
 8003486:	d012      	beq.n	80034ae <HAL_UART_IRQHandler+0x18a>
 8003488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800348c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00c      	beq.n	80034ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800349c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034a4:	f043 0220 	orr.w	r2, r3, #32
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8230 	beq.w	800391a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00d      	beq.n	80034e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f6:	2b40      	cmp	r3, #64	@ 0x40
 80034f8:	d005      	beq.n	8003506 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80034fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003502:	2b00      	cmp	r3, #0
 8003504:	d04f      	beq.n	80035a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 ff68 	bl	80043dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003516:	2b40      	cmp	r3, #64	@ 0x40
 8003518:	d141      	bne.n	800359e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3308      	adds	r3, #8
 8003520:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003524:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003538:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3308      	adds	r3, #8
 8003542:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003546:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800354a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003552:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800355e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1d9      	bne.n	800351a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800356a:	2b00      	cmp	r3, #0
 800356c:	d013      	beq.n	8003596 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003572:	4a13      	ldr	r2, [pc, #76]	@ (80035c0 <HAL_UART_IRQHandler+0x29c>)
 8003574:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fd92 	bl	80010a4 <HAL_DMA_Abort_IT>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d017      	beq.n	80035b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003590:	4610      	mov	r0, r2
 8003592:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003594:	e00f      	b.n	80035b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9d4 	bl	8003944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359c:	e00b      	b.n	80035b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f9d0 	bl	8003944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	e007      	b.n	80035b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f9cc 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80035b4:	e1b1      	b.n	800391a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b6:	bf00      	nop
    return;
 80035b8:	e1af      	b.n	800391a <HAL_UART_IRQHandler+0x5f6>
 80035ba:	bf00      	nop
 80035bc:	04000120 	.word	0x04000120
 80035c0:	080044a5 	.word	0x080044a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f040 816a 	bne.w	80038a2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8163 	beq.w	80038a2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 815c 	beq.w	80038a2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2210      	movs	r2, #16
 80035f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fc:	2b40      	cmp	r3, #64	@ 0x40
 80035fe:	f040 80d4 	bne.w	80037aa <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800360e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80ad 	beq.w	8003772 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800361e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003622:	429a      	cmp	r2, r3
 8003624:	f080 80a5 	bcs.w	8003772 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800362e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	f040 8086 	bne.w	8003750 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003658:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800365c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003660:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800366e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003672:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800367a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003686:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1da      	bne.n	8003644 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3308      	adds	r3, #8
 8003694:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800369e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3308      	adds	r3, #8
 80036ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80036ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80036c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e1      	bne.n	800368e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3308      	adds	r3, #8
 80036d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80036da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3308      	adds	r3, #8
 80036ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e3      	bne.n	80036ca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800371e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003720:	f023 0310 	bic.w	r3, r3, #16
 8003724:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003732:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003734:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003736:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003738:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1e4      	bne.n	8003710 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fc6c 	bl	8001028 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003762:	b29b      	uxth	r3, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	b29b      	uxth	r3, r3
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8f4 	bl	8003958 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003770:	e0d5      	b.n	800391e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003778:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800377c:	429a      	cmp	r2, r3
 800377e:	f040 80ce 	bne.w	800391e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b20      	cmp	r3, #32
 8003790:	f040 80c5 	bne.w	800391e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8d8 	bl	8003958 <HAL_UARTEx_RxEventCallback>
      return;
 80037a8:	e0b9      	b.n	800391e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80ab 	beq.w	8003922 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80037cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 80a6 	beq.w	8003922 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037de:	e853 3f00 	ldrex	r3, [r3]
 80037e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e4      	bne.n	80037d6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3308      	adds	r3, #8
 8003812:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	623b      	str	r3, [r7, #32]
   return(result);
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3308      	adds	r3, #8
 800382c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003830:	633a      	str	r2, [r7, #48]	@ 0x30
 8003832:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e3      	bne.n	800380c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	60fb      	str	r3, [r7, #12]
   return(result);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f023 0310 	bic.w	r3, r3, #16
 800386c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	69b9      	ldr	r1, [r7, #24]
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	617b      	str	r3, [r7, #20]
   return(result);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e4      	bne.n	8003858 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003898:	4619      	mov	r1, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f85c 	bl	8003958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038a0:	e03f      	b.n	8003922 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80038a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00e      	beq.n	80038cc <HAL_UART_IRQHandler+0x5a8>
 80038ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80038c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 ffe9 	bl	800489c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80038ca:	e02d      	b.n	8003928 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80038cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00e      	beq.n	80038f6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80038d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01c      	beq.n	8003926 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
    }
    return;
 80038f4:	e017      	b.n	8003926 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d012      	beq.n	8003928 <HAL_UART_IRQHandler+0x604>
 8003902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00c      	beq.n	8003928 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fdde 	bl	80044d0 <UART_EndTransmit_IT>
    return;
 8003914:	e008      	b.n	8003928 <HAL_UART_IRQHandler+0x604>
      return;
 8003916:	bf00      	nop
 8003918:	e006      	b.n	8003928 <HAL_UART_IRQHandler+0x604>
    return;
 800391a:	bf00      	nop
 800391c:	e004      	b.n	8003928 <HAL_UART_IRQHandler+0x604>
      return;
 800391e:	bf00      	nop
 8003920:	e002      	b.n	8003928 <HAL_UART_IRQHandler+0x604>
      return;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <HAL_UART_IRQHandler+0x604>
    return;
 8003926:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003928:	37e8      	adds	r7, #232	@ 0xe8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop

08003930 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003974:	b08a      	sub	sp, #40	@ 0x28
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	431a      	orrs	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	431a      	orrs	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	4313      	orrs	r3, r2
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4ba4      	ldr	r3, [pc, #656]	@ (8003c30 <UART_SetConfig+0x2c0>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a99      	ldr	r2, [pc, #612]	@ (8003c34 <UART_SetConfig+0x2c4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d8:	4313      	orrs	r3, r2
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ec:	430a      	orrs	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a90      	ldr	r2, [pc, #576]	@ (8003c38 <UART_SetConfig+0x2c8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d126      	bne.n	8003a48 <UART_SetConfig+0xd8>
 80039fa:	4b90      	ldr	r3, [pc, #576]	@ (8003c3c <UART_SetConfig+0x2cc>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d81b      	bhi.n	8003a40 <UART_SetConfig+0xd0>
 8003a08:	a201      	add	r2, pc, #4	@ (adr r2, 8003a10 <UART_SetConfig+0xa0>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a31 	.word	0x08003a31
 8003a18:	08003a29 	.word	0x08003a29
 8003a1c:	08003a39 	.word	0x08003a39
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a26:	e116      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a2e:	e112      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003a30:	2304      	movs	r3, #4
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a36:	e10e      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003a38:	2308      	movs	r3, #8
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a3e:	e10a      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003a40:	2310      	movs	r3, #16
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a46:	e106      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a7c      	ldr	r2, [pc, #496]	@ (8003c40 <UART_SetConfig+0x2d0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d138      	bne.n	8003ac4 <UART_SetConfig+0x154>
 8003a52:	4b7a      	ldr	r3, [pc, #488]	@ (8003c3c <UART_SetConfig+0x2cc>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	d82d      	bhi.n	8003abc <UART_SetConfig+0x14c>
 8003a60:	a201      	add	r2, pc, #4	@ (adr r2, 8003a68 <UART_SetConfig+0xf8>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003abd 	.word	0x08003abd
 8003a70:	08003abd 	.word	0x08003abd
 8003a74:	08003abd 	.word	0x08003abd
 8003a78:	08003aad 	.word	0x08003aad
 8003a7c:	08003abd 	.word	0x08003abd
 8003a80:	08003abd 	.word	0x08003abd
 8003a84:	08003abd 	.word	0x08003abd
 8003a88:	08003aa5 	.word	0x08003aa5
 8003a8c:	08003abd 	.word	0x08003abd
 8003a90:	08003abd 	.word	0x08003abd
 8003a94:	08003abd 	.word	0x08003abd
 8003a98:	08003ab5 	.word	0x08003ab5
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa2:	e0d8      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aaa:	e0d4      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003aac:	2304      	movs	r3, #4
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ab2:	e0d0      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003ab4:	2308      	movs	r3, #8
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aba:	e0cc      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003abc:	2310      	movs	r3, #16
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac2:	e0c8      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8003c44 <UART_SetConfig+0x2d4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d125      	bne.n	8003b1a <UART_SetConfig+0x1aa>
 8003ace:	4b5b      	ldr	r3, [pc, #364]	@ (8003c3c <UART_SetConfig+0x2cc>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ad8:	2b30      	cmp	r3, #48	@ 0x30
 8003ada:	d016      	beq.n	8003b0a <UART_SetConfig+0x19a>
 8003adc:	2b30      	cmp	r3, #48	@ 0x30
 8003ade:	d818      	bhi.n	8003b12 <UART_SetConfig+0x1a2>
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d00a      	beq.n	8003afa <UART_SetConfig+0x18a>
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d814      	bhi.n	8003b12 <UART_SetConfig+0x1a2>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <UART_SetConfig+0x182>
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d008      	beq.n	8003b02 <UART_SetConfig+0x192>
 8003af0:	e00f      	b.n	8003b12 <UART_SetConfig+0x1a2>
 8003af2:	2300      	movs	r3, #0
 8003af4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af8:	e0ad      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003afa:	2302      	movs	r3, #2
 8003afc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b00:	e0a9      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003b02:	2304      	movs	r3, #4
 8003b04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b08:	e0a5      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b10:	e0a1      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003b12:	2310      	movs	r3, #16
 8003b14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b18:	e09d      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003c48 <UART_SetConfig+0x2d8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d125      	bne.n	8003b70 <UART_SetConfig+0x200>
 8003b24:	4b45      	ldr	r3, [pc, #276]	@ (8003c3c <UART_SetConfig+0x2cc>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b30:	d016      	beq.n	8003b60 <UART_SetConfig+0x1f0>
 8003b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b34:	d818      	bhi.n	8003b68 <UART_SetConfig+0x1f8>
 8003b36:	2b80      	cmp	r3, #128	@ 0x80
 8003b38:	d00a      	beq.n	8003b50 <UART_SetConfig+0x1e0>
 8003b3a:	2b80      	cmp	r3, #128	@ 0x80
 8003b3c:	d814      	bhi.n	8003b68 <UART_SetConfig+0x1f8>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <UART_SetConfig+0x1d8>
 8003b42:	2b40      	cmp	r3, #64	@ 0x40
 8003b44:	d008      	beq.n	8003b58 <UART_SetConfig+0x1e8>
 8003b46:	e00f      	b.n	8003b68 <UART_SetConfig+0x1f8>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4e:	e082      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003b50:	2302      	movs	r3, #2
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b56:	e07e      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5e:	e07a      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003b60:	2308      	movs	r3, #8
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b66:	e076      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6e:	e072      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a35      	ldr	r2, [pc, #212]	@ (8003c4c <UART_SetConfig+0x2dc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d12a      	bne.n	8003bd0 <UART_SetConfig+0x260>
 8003b7a:	4b30      	ldr	r3, [pc, #192]	@ (8003c3c <UART_SetConfig+0x2cc>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b88:	d01a      	beq.n	8003bc0 <UART_SetConfig+0x250>
 8003b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b8e:	d81b      	bhi.n	8003bc8 <UART_SetConfig+0x258>
 8003b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b94:	d00c      	beq.n	8003bb0 <UART_SetConfig+0x240>
 8003b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b9a:	d815      	bhi.n	8003bc8 <UART_SetConfig+0x258>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <UART_SetConfig+0x238>
 8003ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba4:	d008      	beq.n	8003bb8 <UART_SetConfig+0x248>
 8003ba6:	e00f      	b.n	8003bc8 <UART_SetConfig+0x258>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bae:	e052      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb6:	e04e      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bbe:	e04a      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc6:	e046      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bce:	e042      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	@ (8003c34 <UART_SetConfig+0x2c4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d13a      	bne.n	8003c50 <UART_SetConfig+0x2e0>
 8003bda:	4b18      	ldr	r3, [pc, #96]	@ (8003c3c <UART_SetConfig+0x2cc>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003be4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003be8:	d01a      	beq.n	8003c20 <UART_SetConfig+0x2b0>
 8003bea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bee:	d81b      	bhi.n	8003c28 <UART_SetConfig+0x2b8>
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bf4:	d00c      	beq.n	8003c10 <UART_SetConfig+0x2a0>
 8003bf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bfa:	d815      	bhi.n	8003c28 <UART_SetConfig+0x2b8>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <UART_SetConfig+0x298>
 8003c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c04:	d008      	beq.n	8003c18 <UART_SetConfig+0x2a8>
 8003c06:	e00f      	b.n	8003c28 <UART_SetConfig+0x2b8>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0e:	e022      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003c10:	2302      	movs	r3, #2
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c16:	e01e      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003c18:	2304      	movs	r3, #4
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1e:	e01a      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003c20:	2308      	movs	r3, #8
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c26:	e016      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003c28:	2310      	movs	r3, #16
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2e:	e012      	b.n	8003c56 <UART_SetConfig+0x2e6>
 8003c30:	efff69f3 	.word	0xefff69f3
 8003c34:	40008000 	.word	0x40008000
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40004400 	.word	0x40004400
 8003c44:	40004800 	.word	0x40004800
 8003c48:	40004c00 	.word	0x40004c00
 8003c4c:	40005000 	.word	0x40005000
 8003c50:	2310      	movs	r3, #16
 8003c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a9f      	ldr	r2, [pc, #636]	@ (8003ed8 <UART_SetConfig+0x568>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d17a      	bne.n	8003d56 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d824      	bhi.n	8003cb2 <UART_SetConfig+0x342>
 8003c68:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <UART_SetConfig+0x300>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003c95 	.word	0x08003c95
 8003c74:	08003cb3 	.word	0x08003cb3
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003cb3 	.word	0x08003cb3
 8003c80:	08003ca3 	.word	0x08003ca3
 8003c84:	08003cb3 	.word	0x08003cb3
 8003c88:	08003cb3 	.word	0x08003cb3
 8003c8c:	08003cb3 	.word	0x08003cb3
 8003c90:	08003cab 	.word	0x08003cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c94:	f7fe f9e2 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 8003c98:	61f8      	str	r0, [r7, #28]
        break;
 8003c9a:	e010      	b.n	8003cbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c9c:	4b8f      	ldr	r3, [pc, #572]	@ (8003edc <UART_SetConfig+0x56c>)
 8003c9e:	61fb      	str	r3, [r7, #28]
        break;
 8003ca0:	e00d      	b.n	8003cbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca2:	f7fe f943 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8003ca6:	61f8      	str	r0, [r7, #28]
        break;
 8003ca8:	e009      	b.n	8003cbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cae:	61fb      	str	r3, [r7, #28]
        break;
 8003cb0:	e005      	b.n	8003cbe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003cbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80fb 	beq.w	8003ebc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	4413      	add	r3, r2
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d305      	bcc.n	8003ce2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d903      	bls.n	8003cea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ce8:	e0e8      	b.n	8003ebc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2200      	movs	r2, #0
 8003cee:	461c      	mov	r4, r3
 8003cf0:	4615      	mov	r5, r2
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	022b      	lsls	r3, r5, #8
 8003cfc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d00:	0222      	lsls	r2, r4, #8
 8003d02:	68f9      	ldr	r1, [r7, #12]
 8003d04:	6849      	ldr	r1, [r1, #4]
 8003d06:	0849      	lsrs	r1, r1, #1
 8003d08:	2000      	movs	r0, #0
 8003d0a:	4688      	mov	r8, r1
 8003d0c:	4681      	mov	r9, r0
 8003d0e:	eb12 0a08 	adds.w	sl, r2, r8
 8003d12:	eb43 0b09 	adc.w	fp, r3, r9
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	603b      	str	r3, [r7, #0]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d24:	4650      	mov	r0, sl
 8003d26:	4659      	mov	r1, fp
 8003d28:	f7fc faba 	bl	80002a0 <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4613      	mov	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d3a:	d308      	bcc.n	8003d4e <UART_SetConfig+0x3de>
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d42:	d204      	bcs.n	8003d4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	60da      	str	r2, [r3, #12]
 8003d4c:	e0b6      	b.n	8003ebc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d54:	e0b2      	b.n	8003ebc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d5e:	d15e      	bne.n	8003e1e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d828      	bhi.n	8003dba <UART_SetConfig+0x44a>
 8003d68:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <UART_SetConfig+0x400>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d95 	.word	0x08003d95
 8003d74:	08003d9d 	.word	0x08003d9d
 8003d78:	08003da5 	.word	0x08003da5
 8003d7c:	08003dbb 	.word	0x08003dbb
 8003d80:	08003dab 	.word	0x08003dab
 8003d84:	08003dbb 	.word	0x08003dbb
 8003d88:	08003dbb 	.word	0x08003dbb
 8003d8c:	08003dbb 	.word	0x08003dbb
 8003d90:	08003db3 	.word	0x08003db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d94:	f7fe f962 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 8003d98:	61f8      	str	r0, [r7, #28]
        break;
 8003d9a:	e014      	b.n	8003dc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d9c:	f7fe f974 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8003da0:	61f8      	str	r0, [r7, #28]
        break;
 8003da2:	e010      	b.n	8003dc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003da4:	4b4d      	ldr	r3, [pc, #308]	@ (8003edc <UART_SetConfig+0x56c>)
 8003da6:	61fb      	str	r3, [r7, #28]
        break;
 8003da8:	e00d      	b.n	8003dc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003daa:	f7fe f8bf 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8003dae:	61f8      	str	r0, [r7, #28]
        break;
 8003db0:	e009      	b.n	8003dc6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003db6:	61fb      	str	r3, [r7, #28]
        break;
 8003db8:	e005      	b.n	8003dc6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003dc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d077      	beq.n	8003ebc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	005a      	lsls	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	441a      	add	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b0f      	cmp	r3, #15
 8003de6:	d916      	bls.n	8003e16 <UART_SetConfig+0x4a6>
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dee:	d212      	bcs.n	8003e16 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f023 030f 	bic.w	r3, r3, #15
 8003df8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	8afb      	ldrh	r3, [r7, #22]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	8afa      	ldrh	r2, [r7, #22]
 8003e12:	60da      	str	r2, [r3, #12]
 8003e14:	e052      	b.n	8003ebc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e1c:	e04e      	b.n	8003ebc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d827      	bhi.n	8003e76 <UART_SetConfig+0x506>
 8003e26:	a201      	add	r2, pc, #4	@ (adr r2, 8003e2c <UART_SetConfig+0x4bc>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e59 	.word	0x08003e59
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e77 	.word	0x08003e77
 8003e3c:	08003e67 	.word	0x08003e67
 8003e40:	08003e77 	.word	0x08003e77
 8003e44:	08003e77 	.word	0x08003e77
 8003e48:	08003e77 	.word	0x08003e77
 8003e4c:	08003e6f 	.word	0x08003e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e50:	f7fe f904 	bl	800205c <HAL_RCC_GetPCLK1Freq>
 8003e54:	61f8      	str	r0, [r7, #28]
        break;
 8003e56:	e014      	b.n	8003e82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e58:	f7fe f916 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8003e5c:	61f8      	str	r0, [r7, #28]
        break;
 8003e5e:	e010      	b.n	8003e82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e60:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <UART_SetConfig+0x56c>)
 8003e62:	61fb      	str	r3, [r7, #28]
        break;
 8003e64:	e00d      	b.n	8003e82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e66:	f7fe f861 	bl	8001f2c <HAL_RCC_GetSysClockFreq>
 8003e6a:	61f8      	str	r0, [r7, #28]
        break;
 8003e6c:	e009      	b.n	8003e82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e72:	61fb      	str	r3, [r7, #28]
        break;
 8003e74:	e005      	b.n	8003e82 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e80:	bf00      	nop
    }

    if (pclk != 0U)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d019      	beq.n	8003ebc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	085a      	lsrs	r2, r3, #1
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	441a      	add	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	d909      	bls.n	8003eb6 <UART_SetConfig+0x546>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea8:	d205      	bcs.n	8003eb6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60da      	str	r2, [r3, #12]
 8003eb4:	e002      	b.n	8003ebc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ec8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3728      	adds	r7, #40	@ 0x28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40008000 	.word	0x40008000
 8003edc:	00f42400 	.word	0x00f42400

08003ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01a      	beq.n	8003ff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fde:	d10a      	bne.n	8003ff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	605a      	str	r2, [r3, #4]
  }
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b098      	sub	sp, #96	@ 0x60
 8004028:	af02      	add	r7, sp, #8
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004034:	f7fc ff0a 	bl	8000e4c <HAL_GetTick>
 8004038:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b08      	cmp	r3, #8
 8004046:	d12e      	bne.n	80040a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004048:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004050:	2200      	movs	r2, #0
 8004052:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f88c 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d021      	beq.n	80040a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004076:	653b      	str	r3, [r7, #80]	@ 0x50
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004080:	647b      	str	r3, [r7, #68]	@ 0x44
 8004082:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800408e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e6      	bne.n	8004062 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e062      	b.n	800416c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d149      	bne.n	8004148 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040bc:	2200      	movs	r2, #0
 80040be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f856 	bl	8004174 <UART_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d03c      	beq.n	8004148 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	623b      	str	r3, [r7, #32]
   return(result);
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e6      	bne.n	80040ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3308      	adds	r3, #8
 8004106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3308      	adds	r3, #8
 800411e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004120:	61fa      	str	r2, [r7, #28]
 8004122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	69b9      	ldr	r1, [r7, #24]
 8004126:	69fa      	ldr	r2, [r7, #28]
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	617b      	str	r3, [r7, #20]
   return(result);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e5      	bne.n	8004100 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e011      	b.n	800416c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3758      	adds	r7, #88	@ 0x58
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	4613      	mov	r3, r2
 8004182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004184:	e04f      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d04b      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418e:	f7fc fe5d 	bl	8000e4c <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	429a      	cmp	r2, r3
 800419c:	d302      	bcc.n	80041a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e04e      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d037      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b80      	cmp	r3, #128	@ 0x80
 80041ba:	d034      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b40      	cmp	r3, #64	@ 0x40
 80041c0:	d031      	beq.n	8004226 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d110      	bne.n	80041f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2208      	movs	r2, #8
 80041d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f8ff 	bl	80043dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2208      	movs	r2, #8
 80041e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e029      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004200:	d111      	bne.n	8004226 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800420a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f8e5 	bl	80043dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2220      	movs	r2, #32
 8004216:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e00f      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	429a      	cmp	r2, r3
 8004234:	bf0c      	ite	eq
 8004236:	2301      	moveq	r3, #1
 8004238:	2300      	movne	r3, #0
 800423a:	b2db      	uxtb	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	429a      	cmp	r2, r3
 8004242:	d0a0      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004250:	b480      	push	{r7}
 8004252:	b097      	sub	sp, #92	@ 0x5c
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	88fa      	ldrh	r2, [r7, #6]
 8004270:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004282:	d10e      	bne.n	80042a2 <UART_Start_Receive_IT+0x52>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <UART_Start_Receive_IT+0x48>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004292:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004296:	e02d      	b.n	80042f4 <UART_Start_Receive_IT+0xa4>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	22ff      	movs	r2, #255	@ 0xff
 800429c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042a0:	e028      	b.n	80042f4 <UART_Start_Receive_IT+0xa4>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10d      	bne.n	80042c6 <UART_Start_Receive_IT+0x76>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d104      	bne.n	80042bc <UART_Start_Receive_IT+0x6c>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	22ff      	movs	r2, #255	@ 0xff
 80042b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042ba:	e01b      	b.n	80042f4 <UART_Start_Receive_IT+0xa4>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	227f      	movs	r2, #127	@ 0x7f
 80042c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042c4:	e016      	b.n	80042f4 <UART_Start_Receive_IT+0xa4>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042ce:	d10d      	bne.n	80042ec <UART_Start_Receive_IT+0x9c>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d104      	bne.n	80042e2 <UART_Start_Receive_IT+0x92>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	227f      	movs	r2, #127	@ 0x7f
 80042dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042e0:	e008      	b.n	80042f4 <UART_Start_Receive_IT+0xa4>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	223f      	movs	r2, #63	@ 0x3f
 80042e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80042ea:	e003      	b.n	80042f4 <UART_Start_Receive_IT+0xa4>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2222      	movs	r2, #34	@ 0x22
 8004300:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3308      	adds	r3, #8
 800430a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	657b      	str	r3, [r7, #84]	@ 0x54
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3308      	adds	r3, #8
 8004322:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004324:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004326:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800432a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e5      	bne.n	8004304 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004340:	d107      	bne.n	8004352 <UART_Start_Receive_IT+0x102>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d103      	bne.n	8004352 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4a21      	ldr	r2, [pc, #132]	@ (80043d4 <UART_Start_Receive_IT+0x184>)
 800434e:	669a      	str	r2, [r3, #104]	@ 0x68
 8004350:	e002      	b.n	8004358 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a20      	ldr	r2, [pc, #128]	@ (80043d8 <UART_Start_Receive_IT+0x188>)
 8004356:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d019      	beq.n	8004394 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800437e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004380:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004384:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800438c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e6      	bne.n	8004360 <UART_Start_Receive_IT+0x110>
 8004392:	e018      	b.n	80043c6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	613b      	str	r3, [r7, #16]
   return(result);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f043 0320 	orr.w	r3, r3, #32
 80043a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043b2:	623b      	str	r3, [r7, #32]
 80043b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	69f9      	ldr	r1, [r7, #28]
 80043b8:	6a3a      	ldr	r2, [r7, #32]
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	61bb      	str	r3, [r7, #24]
   return(result);
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e6      	bne.n	8004394 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	375c      	adds	r7, #92	@ 0x5c
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	080046e1 	.word	0x080046e1
 80043d8:	08004525 	.word	0x08004525

080043dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b095      	sub	sp, #84	@ 0x54
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004402:	643b      	str	r3, [r7, #64]	@ 0x40
 8004404:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004408:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e6      	bne.n	80043e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3308      	adds	r3, #8
 800441c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	61fb      	str	r3, [r7, #28]
   return(result);
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3308      	adds	r3, #8
 8004434:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004436:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004438:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800443c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e5      	bne.n	8004416 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800444e:	2b01      	cmp	r3, #1
 8004450:	d118      	bne.n	8004484 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f023 0310 	bic.w	r3, r3, #16
 8004466:	647b      	str	r3, [r7, #68]	@ 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6979      	ldr	r1, [r7, #20]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	613b      	str	r3, [r7, #16]
   return(result);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e6      	bne.n	8004452 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004498:	bf00      	nop
 800449a:	3754      	adds	r7, #84	@ 0x54
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7ff fa3e 	bl	8003944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ec:	61fb      	str	r3, [r7, #28]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6979      	ldr	r1, [r7, #20]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	613b      	str	r3, [r7, #16]
   return(result);
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e6      	bne.n	80044d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff fa0a 	bl	8003930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800451c:	bf00      	nop
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b09c      	sub	sp, #112	@ 0x70
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004532:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800453c:	2b22      	cmp	r3, #34	@ 0x22
 800453e:	f040 80be 	bne.w	80046be <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004548:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800454c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004550:	b2d9      	uxtb	r1, r3
 8004552:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004556:	b2da      	uxtb	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455c:	400a      	ands	r2, r1
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	f040 80a3 	bne.w	80046d2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800459a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800459c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e6      	bne.n	800458c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3308      	adds	r3, #8
 80045c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3308      	adds	r3, #8
 80045dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80045de:	647a      	str	r2, [r7, #68]	@ 0x44
 80045e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e5      	bne.n	80045be <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a34      	ldr	r2, [pc, #208]	@ (80046dc <UART_RxISR_8BIT+0x1b8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d01f      	beq.n	8004650 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d018      	beq.n	8004650 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	623b      	str	r3, [r7, #32]
   return(result);
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004632:	663b      	str	r3, [r7, #96]	@ 0x60
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800463c:	633b      	str	r3, [r7, #48]	@ 0x30
 800463e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800464a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e6      	bne.n	800461e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004654:	2b01      	cmp	r3, #1
 8004656:	d12e      	bne.n	80046b6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	60fb      	str	r3, [r7, #12]
   return(result);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0310 	bic.w	r3, r3, #16
 8004672:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	69b9      	ldr	r1, [r7, #24]
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	617b      	str	r3, [r7, #20]
   return(result);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e6      	bne.n	800465e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b10      	cmp	r3, #16
 800469c:	d103      	bne.n	80046a6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2210      	movs	r2, #16
 80046a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff f952 	bl	8003958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046b4:	e00d      	b.n	80046d2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fc f8ca 	bl	8000850 <HAL_UART_RxCpltCallback>
}
 80046bc:	e009      	b.n	80046d2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	8b1b      	ldrh	r3, [r3, #24]
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0208 	orr.w	r2, r2, #8
 80046ce:	b292      	uxth	r2, r2
 80046d0:	831a      	strh	r2, [r3, #24]
}
 80046d2:	bf00      	nop
 80046d4:	3770      	adds	r7, #112	@ 0x70
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40008000 	.word	0x40008000

080046e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b09c      	sub	sp, #112	@ 0x70
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80046ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046f8:	2b22      	cmp	r3, #34	@ 0x22
 80046fa:	f040 80be 	bne.w	800487a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004704:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800470e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004712:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004716:	4013      	ands	r3, r2
 8004718:	b29a      	uxth	r2, r3
 800471a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800471c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004722:	1c9a      	adds	r2, r3, #2
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	f040 80a3 	bne.w	800488e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800475c:	667b      	str	r3, [r7, #100]	@ 0x64
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004766:	657b      	str	r3, [r7, #84]	@ 0x54
 8004768:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800476c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e6      	bne.n	8004748 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3308      	adds	r3, #8
 8004780:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800478a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	663b      	str	r3, [r7, #96]	@ 0x60
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3308      	adds	r3, #8
 8004798:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800479a:	643a      	str	r2, [r7, #64]	@ 0x40
 800479c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e5      	bne.n	800477a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a34      	ldr	r2, [pc, #208]	@ (8004898 <UART_RxISR_16BIT+0x1b8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d01f      	beq.n	800480c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d018      	beq.n	800480c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e6      	bne.n	80047da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004810:	2b01      	cmp	r3, #1
 8004812:	d12e      	bne.n	8004872 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	60bb      	str	r3, [r7, #8]
   return(result);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f023 0310 	bic.w	r3, r3, #16
 800482e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6979      	ldr	r1, [r7, #20]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	613b      	str	r3, [r7, #16]
   return(result);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e6      	bne.n	800481a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b10      	cmp	r3, #16
 8004858:	d103      	bne.n	8004862 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2210      	movs	r2, #16
 8004860:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004868:	4619      	mov	r1, r3
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff f874 	bl	8003958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004870:	e00d      	b.n	800488e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fb ffec 	bl	8000850 <HAL_UART_RxCpltCallback>
}
 8004878:	e009      	b.n	800488e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	8b1b      	ldrh	r3, [r3, #24]
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0208 	orr.w	r2, r2, #8
 800488a:	b292      	uxth	r2, r2
 800488c:	831a      	strh	r2, [r3, #24]
}
 800488e:	bf00      	nop
 8004890:	3770      	adds	r7, #112	@ 0x70
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40008000 	.word	0x40008000

0800489c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80048be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048c2:	2b84      	cmp	r3, #132	@ 0x84
 80048c4:	d005      	beq.n	80048d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80048c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	3303      	adds	r3, #3
 80048d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80048d2:	68fb      	ldr	r3, [r7, #12]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80048e4:	f000 fafc 	bl	8004ee0 <vTaskStartScheduler>
  
  return osOK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	bd80      	pop	{r7, pc}

080048ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80048ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f0:	b089      	sub	sp, #36	@ 0x24
 80048f2:	af04      	add	r7, sp, #16
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d020      	beq.n	8004942 <osThreadCreate+0x54>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01c      	beq.n	8004942 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685c      	ldr	r4, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691e      	ldr	r6, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff ffc8 	bl	80048b0 <makeFreeRtosPriority>
 8004920:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800492a:	9202      	str	r2, [sp, #8]
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	9100      	str	r1, [sp, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	4632      	mov	r2, r6
 8004934:	4629      	mov	r1, r5
 8004936:	4620      	mov	r0, r4
 8004938:	f000 f8ed 	bl	8004b16 <xTaskCreateStatic>
 800493c:	4603      	mov	r3, r0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e01c      	b.n	800497c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685c      	ldr	r4, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800494e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff ffaa 	bl	80048b0 <makeFreeRtosPriority>
 800495c:	4602      	mov	r2, r0
 800495e:	f107 030c 	add.w	r3, r7, #12
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	9200      	str	r2, [sp, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	4632      	mov	r2, r6
 800496a:	4629      	mov	r1, r5
 800496c:	4620      	mov	r0, r4
 800496e:	f000 f932 	bl	8004bd6 <xTaskCreate>
 8004972:	4603      	mov	r3, r0
 8004974:	2b01      	cmp	r3, #1
 8004976:	d001      	beq.n	800497c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	e000      	b.n	800497e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800497c:	68fb      	ldr	r3, [r7, #12]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004986 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <osDelay+0x16>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	e000      	b.n	800499e <osDelay+0x18>
 800499c:	2301      	movs	r3, #1
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fa68 	bl	8004e74 <vTaskDelay>
  
  return osOK;
 80049a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f103 0208 	add.w	r2, r3, #8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f04f 32ff 	mov.w	r2, #4294967295
 80049c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f103 0208 	add.w	r2, r3, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f103 0208 	add.w	r2, r3, #8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	601a      	str	r2, [r3, #0]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d103      	bne.n	8004a70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	e00c      	b.n	8004a8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3308      	adds	r3, #8
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	e002      	b.n	8004a7e <vListInsert+0x2e>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d2f6      	bcs.n	8004a78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	601a      	str	r2, [r3, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b085      	sub	sp, #20
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6892      	ldr	r2, [r2, #8]
 8004ad8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6852      	ldr	r2, [r2, #4]
 8004ae2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d103      	bne.n	8004af6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	1e5a      	subs	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b08e      	sub	sp, #56	@ 0x38
 8004b1a:	af04      	add	r7, sp, #16
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
 8004b22:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b3c:	bf00      	nop
 8004b3e:	bf00      	nop
 8004b40:	e7fd      	b.n	8004b3e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10b      	bne.n	8004b60 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	61fb      	str	r3, [r7, #28]
}
 8004b5a:	bf00      	nop
 8004b5c:	bf00      	nop
 8004b5e:	e7fd      	b.n	8004b5c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b60:	23a0      	movs	r3, #160	@ 0xa0
 8004b62:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b68:	d00b      	beq.n	8004b82 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	61bb      	str	r3, [r7, #24]
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	e7fd      	b.n	8004b7e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01e      	beq.n	8004bc8 <xTaskCreateStatic+0xb2>
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b92:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b98:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9303      	str	r3, [sp, #12]
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	9302      	str	r3, [sp, #8]
 8004baa:	f107 0314 	add.w	r3, r7, #20
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f850 	bl	8004c60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bc2:	f000 f8ed 	bl	8004da0 <prvAddNewTaskToReadyList>
 8004bc6:	e001      	b.n	8004bcc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bcc:	697b      	ldr	r3, [r7, #20]
	}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3728      	adds	r7, #40	@ 0x28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b08c      	sub	sp, #48	@ 0x30
 8004bda:	af04      	add	r7, sp, #16
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	4613      	mov	r3, r2
 8004be4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fefc 	bl	80059e8 <pvPortMalloc>
 8004bf0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00e      	beq.n	8004c16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004bf8:	20a0      	movs	r0, #160	@ 0xa0
 8004bfa:	f000 fef5 	bl	80059e8 <pvPortMalloc>
 8004bfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c0c:	e005      	b.n	8004c1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c0e:	6978      	ldr	r0, [r7, #20]
 8004c10:	f000 ffb8 	bl	8005b84 <vPortFree>
 8004c14:	e001      	b.n	8004c1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d017      	beq.n	8004c50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c28:	88fa      	ldrh	r2, [r7, #6]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	9303      	str	r3, [sp, #12]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	9302      	str	r3, [sp, #8]
 8004c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f80e 	bl	8004c60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c44:	69f8      	ldr	r0, [r7, #28]
 8004c46:	f000 f8ab 	bl	8004da0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	e002      	b.n	8004c56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c50:	f04f 33ff 	mov.w	r3, #4294967295
 8004c54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c56:	69bb      	ldr	r3, [r7, #24]
	}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	f023 0307 	bic.w	r3, r3, #7
 8004c86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00b      	beq.n	8004caa <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	617b      	str	r3, [r7, #20]
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	e7fd      	b.n	8004ca6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01f      	beq.n	8004cf0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]
 8004cb4:	e012      	b.n	8004cdc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	4413      	add	r3, r2
 8004cbc:	7819      	ldrb	r1, [r3, #0]
 8004cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3334      	adds	r3, #52	@ 0x34
 8004cc6:	460a      	mov	r2, r1
 8004cc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	4413      	add	r3, r2
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d006      	beq.n	8004ce4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	d9e9      	bls.n	8004cb6 <prvInitialiseNewTask+0x56>
 8004ce2:	e000      	b.n	8004ce6 <prvInitialiseNewTask+0x86>
			{
				break;
 8004ce4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cee:	e003      	b.n	8004cf8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfa:	2b06      	cmp	r3, #6
 8004cfc:	d901      	bls.n	8004d02 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cfe:	2306      	movs	r3, #6
 8004d00:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d06:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d0c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d10:	2200      	movs	r2, #0
 8004d12:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d16:	3304      	adds	r3, #4
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fe68 	bl	80049ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	3318      	adds	r3, #24
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fe63 	bl	80049ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	f1c3 0207 	rsb	r2, r3, #7
 8004d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d3c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d40:	2200      	movs	r2, #0
 8004d42:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	334c      	adds	r3, #76	@ 0x4c
 8004d52:	224c      	movs	r2, #76	@ 0x4c
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 f86a 	bl	8005e30 <memset>
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004d94 <prvInitialiseNewTask+0x134>)
 8004d60:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	4a0c      	ldr	r2, [pc, #48]	@ (8004d98 <prvInitialiseNewTask+0x138>)
 8004d66:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d9c <prvInitialiseNewTask+0x13c>)
 8004d6c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	68f9      	ldr	r1, [r7, #12]
 8004d72:	69b8      	ldr	r0, [r7, #24]
 8004d74:	f000 fc2a 	bl	80055cc <pxPortInitialiseStack>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d8a:	bf00      	nop
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20005438 	.word	0x20005438
 8004d98:	200054a0 	.word	0x200054a0
 8004d9c:	20005508 	.word	0x20005508

08004da0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004da8:	f000 fd3e 	bl	8005828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004dac:	4b2a      	ldr	r3, [pc, #168]	@ (8004e58 <prvAddNewTaskToReadyList+0xb8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3301      	adds	r3, #1
 8004db2:	4a29      	ldr	r2, [pc, #164]	@ (8004e58 <prvAddNewTaskToReadyList+0xb8>)
 8004db4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004db6:	4b29      	ldr	r3, [pc, #164]	@ (8004e5c <prvAddNewTaskToReadyList+0xbc>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d109      	bne.n	8004dd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dbe:	4a27      	ldr	r2, [pc, #156]	@ (8004e5c <prvAddNewTaskToReadyList+0xbc>)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004dc4:	4b24      	ldr	r3, [pc, #144]	@ (8004e58 <prvAddNewTaskToReadyList+0xb8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d110      	bne.n	8004dee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dcc:	f000 fad4 	bl	8005378 <prvInitialiseTaskLists>
 8004dd0:	e00d      	b.n	8004dee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dd2:	4b23      	ldr	r3, [pc, #140]	@ (8004e60 <prvAddNewTaskToReadyList+0xc0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dda:	4b20      	ldr	r3, [pc, #128]	@ (8004e5c <prvAddNewTaskToReadyList+0xbc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d802      	bhi.n	8004dee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004de8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e5c <prvAddNewTaskToReadyList+0xbc>)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004dee:	4b1d      	ldr	r3, [pc, #116]	@ (8004e64 <prvAddNewTaskToReadyList+0xc4>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3301      	adds	r3, #1
 8004df4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e64 <prvAddNewTaskToReadyList+0xc4>)
 8004df6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	409a      	lsls	r2, r3
 8004e00:	4b19      	ldr	r3, [pc, #100]	@ (8004e68 <prvAddNewTaskToReadyList+0xc8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	4a18      	ldr	r2, [pc, #96]	@ (8004e68 <prvAddNewTaskToReadyList+0xc8>)
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4a15      	ldr	r2, [pc, #84]	@ (8004e6c <prvAddNewTaskToReadyList+0xcc>)
 8004e18:	441a      	add	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4610      	mov	r0, r2
 8004e22:	f7ff fdf1 	bl	8004a08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e26:	f000 fd31 	bl	800588c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e60 <prvAddNewTaskToReadyList+0xc0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00e      	beq.n	8004e50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e32:	4b0a      	ldr	r3, [pc, #40]	@ (8004e5c <prvAddNewTaskToReadyList+0xbc>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d207      	bcs.n	8004e50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e40:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <prvAddNewTaskToReadyList+0xd0>)
 8004e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200005c4 	.word	0x200005c4
 8004e5c:	200004c4 	.word	0x200004c4
 8004e60:	200005d0 	.word	0x200005d0
 8004e64:	200005e0 	.word	0x200005e0
 8004e68:	200005cc 	.word	0x200005cc
 8004e6c:	200004c8 	.word	0x200004c8
 8004e70:	e000ed04 	.word	0xe000ed04

08004e74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d018      	beq.n	8004eb8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e86:	4b14      	ldr	r3, [pc, #80]	@ (8004ed8 <vTaskDelay+0x64>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <vTaskDelay+0x32>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	60bb      	str	r3, [r7, #8]
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	e7fd      	b.n	8004ea2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ea6:	f000 f885 	bl	8004fb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004eaa:	2100      	movs	r1, #0
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fb27 	bl	8005500 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004eb2:	f000 f88d 	bl	8004fd0 <xTaskResumeAll>
 8004eb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d107      	bne.n	8004ece <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ebe:	4b07      	ldr	r3, [pc, #28]	@ (8004edc <vTaskDelay+0x68>)
 8004ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	200005ec 	.word	0x200005ec
 8004edc:	e000ed04 	.word	0xe000ed04

08004ee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08a      	sub	sp, #40	@ 0x28
 8004ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004eee:	463a      	mov	r2, r7
 8004ef0:	1d39      	adds	r1, r7, #4
 8004ef2:	f107 0308 	add.w	r3, r7, #8
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fb fb68 	bl	80005cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	9202      	str	r2, [sp, #8]
 8004f04:	9301      	str	r3, [sp, #4]
 8004f06:	2300      	movs	r3, #0
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	460a      	mov	r2, r1
 8004f0e:	4921      	ldr	r1, [pc, #132]	@ (8004f94 <vTaskStartScheduler+0xb4>)
 8004f10:	4821      	ldr	r0, [pc, #132]	@ (8004f98 <vTaskStartScheduler+0xb8>)
 8004f12:	f7ff fe00 	bl	8004b16 <xTaskCreateStatic>
 8004f16:	4603      	mov	r3, r0
 8004f18:	4a20      	ldr	r2, [pc, #128]	@ (8004f9c <vTaskStartScheduler+0xbc>)
 8004f1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8004f9c <vTaskStartScheduler+0xbc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f24:	2301      	movs	r3, #1
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e001      	b.n	8004f2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d11b      	bne.n	8004f6c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	613b      	str	r3, [r7, #16]
}
 8004f46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f48:	4b15      	ldr	r3, [pc, #84]	@ (8004fa0 <vTaskStartScheduler+0xc0>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	334c      	adds	r3, #76	@ 0x4c
 8004f4e:	4a15      	ldr	r2, [pc, #84]	@ (8004fa4 <vTaskStartScheduler+0xc4>)
 8004f50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f52:	4b15      	ldr	r3, [pc, #84]	@ (8004fa8 <vTaskStartScheduler+0xc8>)
 8004f54:	f04f 32ff 	mov.w	r2, #4294967295
 8004f58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f5a:	4b14      	ldr	r3, [pc, #80]	@ (8004fac <vTaskStartScheduler+0xcc>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f60:	4b13      	ldr	r3, [pc, #76]	@ (8004fb0 <vTaskStartScheduler+0xd0>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f66:	f000 fbbb 	bl	80056e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f6a:	e00f      	b.n	8004f8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d10b      	bne.n	8004f8c <vTaskStartScheduler+0xac>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	60fb      	str	r3, [r7, #12]
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	e7fd      	b.n	8004f88 <vTaskStartScheduler+0xa8>
}
 8004f8c:	bf00      	nop
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	08006948 	.word	0x08006948
 8004f98:	08005349 	.word	0x08005349
 8004f9c:	200005e8 	.word	0x200005e8
 8004fa0:	200004c4 	.word	0x200004c4
 8004fa4:	20000010 	.word	0x20000010
 8004fa8:	200005e4 	.word	0x200005e4
 8004fac:	200005d0 	.word	0x200005d0
 8004fb0:	200005c8 	.word	0x200005c8

08004fb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fb8:	4b04      	ldr	r3, [pc, #16]	@ (8004fcc <vTaskSuspendAll+0x18>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	4a03      	ldr	r2, [pc, #12]	@ (8004fcc <vTaskSuspendAll+0x18>)
 8004fc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004fc2:	bf00      	nop
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	200005ec 	.word	0x200005ec

08004fd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fde:	4b42      	ldr	r3, [pc, #264]	@ (80050e8 <xTaskResumeAll+0x118>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10b      	bne.n	8004ffe <xTaskResumeAll+0x2e>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	603b      	str	r3, [r7, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	e7fd      	b.n	8004ffa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ffe:	f000 fc13 	bl	8005828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005002:	4b39      	ldr	r3, [pc, #228]	@ (80050e8 <xTaskResumeAll+0x118>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3b01      	subs	r3, #1
 8005008:	4a37      	ldr	r2, [pc, #220]	@ (80050e8 <xTaskResumeAll+0x118>)
 800500a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800500c:	4b36      	ldr	r3, [pc, #216]	@ (80050e8 <xTaskResumeAll+0x118>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d161      	bne.n	80050d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005014:	4b35      	ldr	r3, [pc, #212]	@ (80050ec <xTaskResumeAll+0x11c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d05d      	beq.n	80050d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800501c:	e02e      	b.n	800507c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501e:	4b34      	ldr	r3, [pc, #208]	@ (80050f0 <xTaskResumeAll+0x120>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3318      	adds	r3, #24
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff fd49 	bl	8004ac2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3304      	adds	r3, #4
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff fd44 	bl	8004ac2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503e:	2201      	movs	r2, #1
 8005040:	409a      	lsls	r2, r3
 8005042:	4b2c      	ldr	r3, [pc, #176]	@ (80050f4 <xTaskResumeAll+0x124>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4313      	orrs	r3, r2
 8005048:	4a2a      	ldr	r2, [pc, #168]	@ (80050f4 <xTaskResumeAll+0x124>)
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4a27      	ldr	r2, [pc, #156]	@ (80050f8 <xTaskResumeAll+0x128>)
 800505a:	441a      	add	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f7ff fcd0 	bl	8004a08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506c:	4b23      	ldr	r3, [pc, #140]	@ (80050fc <xTaskResumeAll+0x12c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	429a      	cmp	r2, r3
 8005074:	d302      	bcc.n	800507c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005076:	4b22      	ldr	r3, [pc, #136]	@ (8005100 <xTaskResumeAll+0x130>)
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800507c:	4b1c      	ldr	r3, [pc, #112]	@ (80050f0 <xTaskResumeAll+0x120>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1cc      	bne.n	800501e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800508a:	f000 fa19 	bl	80054c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800508e:	4b1d      	ldr	r3, [pc, #116]	@ (8005104 <xTaskResumeAll+0x134>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d010      	beq.n	80050bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800509a:	f000 f837 	bl	800510c <xTaskIncrementTick>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80050a4:	4b16      	ldr	r3, [pc, #88]	@ (8005100 <xTaskResumeAll+0x130>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f1      	bne.n	800509a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80050b6:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <xTaskResumeAll+0x134>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050bc:	4b10      	ldr	r3, [pc, #64]	@ (8005100 <xTaskResumeAll+0x130>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005108 <xTaskResumeAll+0x138>)
 80050ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050d8:	f000 fbd8 	bl	800588c <vPortExitCritical>

	return xAlreadyYielded;
 80050dc:	68bb      	ldr	r3, [r7, #8]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	200005ec 	.word	0x200005ec
 80050ec:	200005c4 	.word	0x200005c4
 80050f0:	20000584 	.word	0x20000584
 80050f4:	200005cc 	.word	0x200005cc
 80050f8:	200004c8 	.word	0x200004c8
 80050fc:	200004c4 	.word	0x200004c4
 8005100:	200005d8 	.word	0x200005d8
 8005104:	200005d4 	.word	0x200005d4
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005116:	4b4f      	ldr	r3, [pc, #316]	@ (8005254 <xTaskIncrementTick+0x148>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f040 808f 	bne.w	800523e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005120:	4b4d      	ldr	r3, [pc, #308]	@ (8005258 <xTaskIncrementTick+0x14c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005128:	4a4b      	ldr	r2, [pc, #300]	@ (8005258 <xTaskIncrementTick+0x14c>)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d121      	bne.n	8005178 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005134:	4b49      	ldr	r3, [pc, #292]	@ (800525c <xTaskIncrementTick+0x150>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <xTaskIncrementTick+0x4a>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	603b      	str	r3, [r7, #0]
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	e7fd      	b.n	8005152 <xTaskIncrementTick+0x46>
 8005156:	4b41      	ldr	r3, [pc, #260]	@ (800525c <xTaskIncrementTick+0x150>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	4b40      	ldr	r3, [pc, #256]	@ (8005260 <xTaskIncrementTick+0x154>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a3e      	ldr	r2, [pc, #248]	@ (800525c <xTaskIncrementTick+0x150>)
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	4a3e      	ldr	r2, [pc, #248]	@ (8005260 <xTaskIncrementTick+0x154>)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	4b3e      	ldr	r3, [pc, #248]	@ (8005264 <xTaskIncrementTick+0x158>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3301      	adds	r3, #1
 8005170:	4a3c      	ldr	r2, [pc, #240]	@ (8005264 <xTaskIncrementTick+0x158>)
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	f000 f9a4 	bl	80054c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005178:	4b3b      	ldr	r3, [pc, #236]	@ (8005268 <xTaskIncrementTick+0x15c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	429a      	cmp	r2, r3
 8005180:	d348      	bcc.n	8005214 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005182:	4b36      	ldr	r3, [pc, #216]	@ (800525c <xTaskIncrementTick+0x150>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800518c:	4b36      	ldr	r3, [pc, #216]	@ (8005268 <xTaskIncrementTick+0x15c>)
 800518e:	f04f 32ff 	mov.w	r2, #4294967295
 8005192:	601a      	str	r2, [r3, #0]
					break;
 8005194:	e03e      	b.n	8005214 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005196:	4b31      	ldr	r3, [pc, #196]	@ (800525c <xTaskIncrementTick+0x150>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d203      	bcs.n	80051b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005268 <xTaskIncrementTick+0x15c>)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051b4:	e02e      	b.n	8005214 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff fc81 	bl	8004ac2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	3318      	adds	r3, #24
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fc78 	bl	8004ac2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d6:	2201      	movs	r2, #1
 80051d8:	409a      	lsls	r2, r3
 80051da:	4b24      	ldr	r3, [pc, #144]	@ (800526c <xTaskIncrementTick+0x160>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4313      	orrs	r3, r2
 80051e0:	4a22      	ldr	r2, [pc, #136]	@ (800526c <xTaskIncrementTick+0x160>)
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005270 <xTaskIncrementTick+0x164>)
 80051f2:	441a      	add	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	3304      	adds	r3, #4
 80051f8:	4619      	mov	r1, r3
 80051fa:	4610      	mov	r0, r2
 80051fc:	f7ff fc04 	bl	8004a08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005204:	4b1b      	ldr	r3, [pc, #108]	@ (8005274 <xTaskIncrementTick+0x168>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	429a      	cmp	r2, r3
 800520c:	d3b9      	bcc.n	8005182 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800520e:	2301      	movs	r3, #1
 8005210:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005212:	e7b6      	b.n	8005182 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005214:	4b17      	ldr	r3, [pc, #92]	@ (8005274 <xTaskIncrementTick+0x168>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521a:	4915      	ldr	r1, [pc, #84]	@ (8005270 <xTaskIncrementTick+0x164>)
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d901      	bls.n	8005230 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800522c:	2301      	movs	r3, #1
 800522e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005230:	4b11      	ldr	r3, [pc, #68]	@ (8005278 <xTaskIncrementTick+0x16c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005238:	2301      	movs	r3, #1
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e004      	b.n	8005248 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800523e:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <xTaskIncrementTick+0x170>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3301      	adds	r3, #1
 8005244:	4a0d      	ldr	r2, [pc, #52]	@ (800527c <xTaskIncrementTick+0x170>)
 8005246:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005248:	697b      	ldr	r3, [r7, #20]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	200005ec 	.word	0x200005ec
 8005258:	200005c8 	.word	0x200005c8
 800525c:	2000057c 	.word	0x2000057c
 8005260:	20000580 	.word	0x20000580
 8005264:	200005dc 	.word	0x200005dc
 8005268:	200005e4 	.word	0x200005e4
 800526c:	200005cc 	.word	0x200005cc
 8005270:	200004c8 	.word	0x200004c8
 8005274:	200004c4 	.word	0x200004c4
 8005278:	200005d8 	.word	0x200005d8
 800527c:	200005d4 	.word	0x200005d4

08005280 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005286:	4b2a      	ldr	r3, [pc, #168]	@ (8005330 <vTaskSwitchContext+0xb0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800528e:	4b29      	ldr	r3, [pc, #164]	@ (8005334 <vTaskSwitchContext+0xb4>)
 8005290:	2201      	movs	r2, #1
 8005292:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005294:	e045      	b.n	8005322 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005296:	4b27      	ldr	r3, [pc, #156]	@ (8005334 <vTaskSwitchContext+0xb4>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800529c:	4b26      	ldr	r3, [pc, #152]	@ (8005338 <vTaskSwitchContext+0xb8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	fab3 f383 	clz	r3, r3
 80052a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80052aa:	7afb      	ldrb	r3, [r7, #11]
 80052ac:	f1c3 031f 	rsb	r3, r3, #31
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	4922      	ldr	r1, [pc, #136]	@ (800533c <vTaskSwitchContext+0xbc>)
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <vTaskSwitchContext+0x5e>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	607b      	str	r3, [r7, #4]
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	e7fd      	b.n	80052da <vTaskSwitchContext+0x5a>
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4a14      	ldr	r2, [pc, #80]	@ (800533c <vTaskSwitchContext+0xbc>)
 80052ea:	4413      	add	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	605a      	str	r2, [r3, #4]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	3308      	adds	r3, #8
 8005300:	429a      	cmp	r2, r3
 8005302:	d104      	bne.n	800530e <vTaskSwitchContext+0x8e>
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4a0a      	ldr	r2, [pc, #40]	@ (8005340 <vTaskSwitchContext+0xc0>)
 8005316:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005318:	4b09      	ldr	r3, [pc, #36]	@ (8005340 <vTaskSwitchContext+0xc0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	334c      	adds	r3, #76	@ 0x4c
 800531e:	4a09      	ldr	r2, [pc, #36]	@ (8005344 <vTaskSwitchContext+0xc4>)
 8005320:	6013      	str	r3, [r2, #0]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	200005ec 	.word	0x200005ec
 8005334:	200005d8 	.word	0x200005d8
 8005338:	200005cc 	.word	0x200005cc
 800533c:	200004c8 	.word	0x200004c8
 8005340:	200004c4 	.word	0x200004c4
 8005344:	20000010 	.word	0x20000010

08005348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005350:	f000 f852 	bl	80053f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005354:	4b06      	ldr	r3, [pc, #24]	@ (8005370 <prvIdleTask+0x28>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d9f9      	bls.n	8005350 <prvIdleTask+0x8>
			{
				taskYIELD();
 800535c:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <prvIdleTask+0x2c>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800536c:	e7f0      	b.n	8005350 <prvIdleTask+0x8>
 800536e:	bf00      	nop
 8005370:	200004c8 	.word	0x200004c8
 8005374:	e000ed04 	.word	0xe000ed04

08005378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800537e:	2300      	movs	r3, #0
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	e00c      	b.n	800539e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4a12      	ldr	r2, [pc, #72]	@ (80053d8 <prvInitialiseTaskLists+0x60>)
 8005390:	4413      	add	r3, r2
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fb0b 	bl	80049ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3301      	adds	r3, #1
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b06      	cmp	r3, #6
 80053a2:	d9ef      	bls.n	8005384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053a4:	480d      	ldr	r0, [pc, #52]	@ (80053dc <prvInitialiseTaskLists+0x64>)
 80053a6:	f7ff fb02 	bl	80049ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053aa:	480d      	ldr	r0, [pc, #52]	@ (80053e0 <prvInitialiseTaskLists+0x68>)
 80053ac:	f7ff faff 	bl	80049ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053b0:	480c      	ldr	r0, [pc, #48]	@ (80053e4 <prvInitialiseTaskLists+0x6c>)
 80053b2:	f7ff fafc 	bl	80049ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053b6:	480c      	ldr	r0, [pc, #48]	@ (80053e8 <prvInitialiseTaskLists+0x70>)
 80053b8:	f7ff faf9 	bl	80049ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053bc:	480b      	ldr	r0, [pc, #44]	@ (80053ec <prvInitialiseTaskLists+0x74>)
 80053be:	f7ff faf6 	bl	80049ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053c2:	4b0b      	ldr	r3, [pc, #44]	@ (80053f0 <prvInitialiseTaskLists+0x78>)
 80053c4:	4a05      	ldr	r2, [pc, #20]	@ (80053dc <prvInitialiseTaskLists+0x64>)
 80053c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80053c8:	4b0a      	ldr	r3, [pc, #40]	@ (80053f4 <prvInitialiseTaskLists+0x7c>)
 80053ca:	4a05      	ldr	r2, [pc, #20]	@ (80053e0 <prvInitialiseTaskLists+0x68>)
 80053cc:	601a      	str	r2, [r3, #0]
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200004c8 	.word	0x200004c8
 80053dc:	20000554 	.word	0x20000554
 80053e0:	20000568 	.word	0x20000568
 80053e4:	20000584 	.word	0x20000584
 80053e8:	20000598 	.word	0x20000598
 80053ec:	200005b0 	.word	0x200005b0
 80053f0:	2000057c 	.word	0x2000057c
 80053f4:	20000580 	.word	0x20000580

080053f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053fe:	e019      	b.n	8005434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005400:	f000 fa12 	bl	8005828 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005404:	4b10      	ldr	r3, [pc, #64]	@ (8005448 <prvCheckTasksWaitingTermination+0x50>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fb56 	bl	8004ac2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005416:	4b0d      	ldr	r3, [pc, #52]	@ (800544c <prvCheckTasksWaitingTermination+0x54>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3b01      	subs	r3, #1
 800541c:	4a0b      	ldr	r2, [pc, #44]	@ (800544c <prvCheckTasksWaitingTermination+0x54>)
 800541e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005420:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <prvCheckTasksWaitingTermination+0x58>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3b01      	subs	r3, #1
 8005426:	4a0a      	ldr	r2, [pc, #40]	@ (8005450 <prvCheckTasksWaitingTermination+0x58>)
 8005428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800542a:	f000 fa2f 	bl	800588c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f810 	bl	8005454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005434:	4b06      	ldr	r3, [pc, #24]	@ (8005450 <prvCheckTasksWaitingTermination+0x58>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e1      	bne.n	8005400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000598 	.word	0x20000598
 800544c:	200005c4 	.word	0x200005c4
 8005450:	200005ac 	.word	0x200005ac

08005454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	334c      	adds	r3, #76	@ 0x4c
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fced 	bl	8005e40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800546c:	2b00      	cmp	r3, #0
 800546e:	d108      	bne.n	8005482 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fb85 	bl	8005b84 <vPortFree>
				vPortFree( pxTCB );
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fb82 	bl	8005b84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005480:	e019      	b.n	80054b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005488:	2b01      	cmp	r3, #1
 800548a:	d103      	bne.n	8005494 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fb79 	bl	8005b84 <vPortFree>
	}
 8005492:	e010      	b.n	80054b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800549a:	2b02      	cmp	r3, #2
 800549c:	d00b      	beq.n	80054b6 <prvDeleteTCB+0x62>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	60fb      	str	r3, [r7, #12]
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	e7fd      	b.n	80054b2 <prvDeleteTCB+0x5e>
	}
 80054b6:	bf00      	nop
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054c6:	4b0c      	ldr	r3, [pc, #48]	@ (80054f8 <prvResetNextTaskUnblockTime+0x38>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d104      	bne.n	80054da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054d0:	4b0a      	ldr	r3, [pc, #40]	@ (80054fc <prvResetNextTaskUnblockTime+0x3c>)
 80054d2:	f04f 32ff 	mov.w	r2, #4294967295
 80054d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054d8:	e008      	b.n	80054ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054da:	4b07      	ldr	r3, [pc, #28]	@ (80054f8 <prvResetNextTaskUnblockTime+0x38>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	4a04      	ldr	r2, [pc, #16]	@ (80054fc <prvResetNextTaskUnblockTime+0x3c>)
 80054ea:	6013      	str	r3, [r2, #0]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	2000057c 	.word	0x2000057c
 80054fc:	200005e4 	.word	0x200005e4

08005500 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800550a:	4b29      	ldr	r3, [pc, #164]	@ (80055b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005510:	4b28      	ldr	r3, [pc, #160]	@ (80055b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3304      	adds	r3, #4
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fad3 	bl	8004ac2 <uxListRemove>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005522:	4b24      	ldr	r3, [pc, #144]	@ (80055b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	2201      	movs	r2, #1
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43da      	mvns	r2, r3
 8005530:	4b21      	ldr	r3, [pc, #132]	@ (80055b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4013      	ands	r3, r2
 8005536:	4a20      	ldr	r2, [pc, #128]	@ (80055b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005538:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005540:	d10a      	bne.n	8005558 <prvAddCurrentTaskToDelayedList+0x58>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d007      	beq.n	8005558 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005548:	4b1a      	ldr	r3, [pc, #104]	@ (80055b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3304      	adds	r3, #4
 800554e:	4619      	mov	r1, r3
 8005550:	481a      	ldr	r0, [pc, #104]	@ (80055bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005552:	f7ff fa59 	bl	8004a08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005556:	e026      	b.n	80055a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005560:	4b14      	ldr	r3, [pc, #80]	@ (80055b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	429a      	cmp	r2, r3
 800556e:	d209      	bcs.n	8005584 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005570:	4b13      	ldr	r3, [pc, #76]	@ (80055c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4b0f      	ldr	r3, [pc, #60]	@ (80055b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3304      	adds	r3, #4
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f7ff fa67 	bl	8004a50 <vListInsert>
}
 8005582:	e010      	b.n	80055a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005584:	4b0f      	ldr	r3, [pc, #60]	@ (80055c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3304      	adds	r3, #4
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f7ff fa5d 	bl	8004a50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005596:	4b0c      	ldr	r3, [pc, #48]	@ (80055c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	429a      	cmp	r2, r3
 800559e:	d202      	bcs.n	80055a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80055a0:	4a09      	ldr	r2, [pc, #36]	@ (80055c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	6013      	str	r3, [r2, #0]
}
 80055a6:	bf00      	nop
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	200005c8 	.word	0x200005c8
 80055b4:	200004c4 	.word	0x200004c4
 80055b8:	200005cc 	.word	0x200005cc
 80055bc:	200005b0 	.word	0x200005b0
 80055c0:	20000580 	.word	0x20000580
 80055c4:	2000057c 	.word	0x2000057c
 80055c8:	200005e4 	.word	0x200005e4

080055cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3b04      	subs	r3, #4
 80055dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80055e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3b04      	subs	r3, #4
 80055ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f023 0201 	bic.w	r2, r3, #1
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3b04      	subs	r3, #4
 80055fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005630 <pxPortInitialiseStack+0x64>)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3b14      	subs	r3, #20
 8005606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3b04      	subs	r3, #4
 8005612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f06f 0202 	mvn.w	r2, #2
 800561a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3b20      	subs	r3, #32
 8005620:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005622:	68fb      	ldr	r3, [r7, #12]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	08005635 	.word	0x08005635

08005634 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800563e:	4b13      	ldr	r3, [pc, #76]	@ (800568c <prvTaskExitError+0x58>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d00b      	beq.n	8005660 <prvTaskExitError+0x2c>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	60fb      	str	r3, [r7, #12]
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	e7fd      	b.n	800565c <prvTaskExitError+0x28>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	60bb      	str	r3, [r7, #8]
}
 8005672:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005674:	bf00      	nop
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0fc      	beq.n	8005676 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800567c:	bf00      	nop
 800567e:	bf00      	nop
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	2000000c 	.word	0x2000000c

08005690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005690:	4b07      	ldr	r3, [pc, #28]	@ (80056b0 <pxCurrentTCBConst2>)
 8005692:	6819      	ldr	r1, [r3, #0]
 8005694:	6808      	ldr	r0, [r1, #0]
 8005696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569a:	f380 8809 	msr	PSP, r0
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f380 8811 	msr	BASEPRI, r0
 80056aa:	4770      	bx	lr
 80056ac:	f3af 8000 	nop.w

080056b0 <pxCurrentTCBConst2>:
 80056b0:	200004c4 	.word	0x200004c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop

080056b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056b8:	4808      	ldr	r0, [pc, #32]	@ (80056dc <prvPortStartFirstTask+0x24>)
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	6800      	ldr	r0, [r0, #0]
 80056be:	f380 8808 	msr	MSP, r0
 80056c2:	f04f 0000 	mov.w	r0, #0
 80056c6:	f380 8814 	msr	CONTROL, r0
 80056ca:	b662      	cpsie	i
 80056cc:	b661      	cpsie	f
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	df00      	svc	0
 80056d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056da:	bf00      	nop
 80056dc:	e000ed08 	.word	0xe000ed08

080056e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056e6:	4b47      	ldr	r3, [pc, #284]	@ (8005804 <xPortStartScheduler+0x124>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a47      	ldr	r2, [pc, #284]	@ (8005808 <xPortStartScheduler+0x128>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d10b      	bne.n	8005708 <xPortStartScheduler+0x28>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60fb      	str	r3, [r7, #12]
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005708:	4b3e      	ldr	r3, [pc, #248]	@ (8005804 <xPortStartScheduler+0x124>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a3f      	ldr	r2, [pc, #252]	@ (800580c <xPortStartScheduler+0x12c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d10b      	bne.n	800572a <xPortStartScheduler+0x4a>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	613b      	str	r3, [r7, #16]
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	e7fd      	b.n	8005726 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800572a:	4b39      	ldr	r3, [pc, #228]	@ (8005810 <xPortStartScheduler+0x130>)
 800572c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	22ff      	movs	r2, #255	@ 0xff
 800573a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800574c:	b2da      	uxtb	r2, r3
 800574e:	4b31      	ldr	r3, [pc, #196]	@ (8005814 <xPortStartScheduler+0x134>)
 8005750:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005752:	4b31      	ldr	r3, [pc, #196]	@ (8005818 <xPortStartScheduler+0x138>)
 8005754:	2207      	movs	r2, #7
 8005756:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005758:	e009      	b.n	800576e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800575a:	4b2f      	ldr	r3, [pc, #188]	@ (8005818 <xPortStartScheduler+0x138>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3b01      	subs	r3, #1
 8005760:	4a2d      	ldr	r2, [pc, #180]	@ (8005818 <xPortStartScheduler+0x138>)
 8005762:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	b2db      	uxtb	r3, r3
 800576c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005776:	2b80      	cmp	r3, #128	@ 0x80
 8005778:	d0ef      	beq.n	800575a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800577a:	4b27      	ldr	r3, [pc, #156]	@ (8005818 <xPortStartScheduler+0x138>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f1c3 0307 	rsb	r3, r3, #7
 8005782:	2b04      	cmp	r3, #4
 8005784:	d00b      	beq.n	800579e <xPortStartScheduler+0xbe>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	60bb      	str	r3, [r7, #8]
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	e7fd      	b.n	800579a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800579e:	4b1e      	ldr	r3, [pc, #120]	@ (8005818 <xPortStartScheduler+0x138>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	021b      	lsls	r3, r3, #8
 80057a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005818 <xPortStartScheduler+0x138>)
 80057a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005818 <xPortStartScheduler+0x138>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057b0:	4a19      	ldr	r2, [pc, #100]	@ (8005818 <xPortStartScheduler+0x138>)
 80057b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057bc:	4b17      	ldr	r3, [pc, #92]	@ (800581c <xPortStartScheduler+0x13c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a16      	ldr	r2, [pc, #88]	@ (800581c <xPortStartScheduler+0x13c>)
 80057c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80057c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057c8:	4b14      	ldr	r3, [pc, #80]	@ (800581c <xPortStartScheduler+0x13c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a13      	ldr	r2, [pc, #76]	@ (800581c <xPortStartScheduler+0x13c>)
 80057ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80057d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057d4:	f000 f8da 	bl	800598c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057d8:	4b11      	ldr	r3, [pc, #68]	@ (8005820 <xPortStartScheduler+0x140>)
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057de:	f000 f8f9 	bl	80059d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057e2:	4b10      	ldr	r3, [pc, #64]	@ (8005824 <xPortStartScheduler+0x144>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005824 <xPortStartScheduler+0x144>)
 80057e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80057ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057ee:	f7ff ff63 	bl	80056b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057f2:	f7ff fd45 	bl	8005280 <vTaskSwitchContext>
	prvTaskExitError();
 80057f6:	f7ff ff1d 	bl	8005634 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	e000ed00 	.word	0xe000ed00
 8005808:	410fc271 	.word	0x410fc271
 800580c:	410fc270 	.word	0x410fc270
 8005810:	e000e400 	.word	0xe000e400
 8005814:	200005f0 	.word	0x200005f0
 8005818:	200005f4 	.word	0x200005f4
 800581c:	e000ed20 	.word	0xe000ed20
 8005820:	2000000c 	.word	0x2000000c
 8005824:	e000ef34 	.word	0xe000ef34

08005828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	607b      	str	r3, [r7, #4]
}
 8005840:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005842:	4b10      	ldr	r3, [pc, #64]	@ (8005884 <vPortEnterCritical+0x5c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3301      	adds	r3, #1
 8005848:	4a0e      	ldr	r2, [pc, #56]	@ (8005884 <vPortEnterCritical+0x5c>)
 800584a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800584c:	4b0d      	ldr	r3, [pc, #52]	@ (8005884 <vPortEnterCritical+0x5c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d110      	bne.n	8005876 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005854:	4b0c      	ldr	r3, [pc, #48]	@ (8005888 <vPortEnterCritical+0x60>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00b      	beq.n	8005876 <vPortEnterCritical+0x4e>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	603b      	str	r3, [r7, #0]
}
 8005870:	bf00      	nop
 8005872:	bf00      	nop
 8005874:	e7fd      	b.n	8005872 <vPortEnterCritical+0x4a>
	}
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	2000000c 	.word	0x2000000c
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005892:	4b12      	ldr	r3, [pc, #72]	@ (80058dc <vPortExitCritical+0x50>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10b      	bne.n	80058b2 <vPortExitCritical+0x26>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	607b      	str	r3, [r7, #4]
}
 80058ac:	bf00      	nop
 80058ae:	bf00      	nop
 80058b0:	e7fd      	b.n	80058ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058b2:	4b0a      	ldr	r3, [pc, #40]	@ (80058dc <vPortExitCritical+0x50>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	4a08      	ldr	r2, [pc, #32]	@ (80058dc <vPortExitCritical+0x50>)
 80058ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058bc:	4b07      	ldr	r3, [pc, #28]	@ (80058dc <vPortExitCritical+0x50>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d105      	bne.n	80058d0 <vPortExitCritical+0x44>
 80058c4:	2300      	movs	r3, #0
 80058c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	2000000c 	.word	0x2000000c

080058e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058e0:	f3ef 8009 	mrs	r0, PSP
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	4b15      	ldr	r3, [pc, #84]	@ (8005940 <pxCurrentTCBConst>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	f01e 0f10 	tst.w	lr, #16
 80058f0:	bf08      	it	eq
 80058f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fa:	6010      	str	r0, [r2, #0]
 80058fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005904:	f380 8811 	msr	BASEPRI, r0
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f7ff fcb6 	bl	8005280 <vTaskSwitchContext>
 8005914:	f04f 0000 	mov.w	r0, #0
 8005918:	f380 8811 	msr	BASEPRI, r0
 800591c:	bc09      	pop	{r0, r3}
 800591e:	6819      	ldr	r1, [r3, #0]
 8005920:	6808      	ldr	r0, [r1, #0]
 8005922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005926:	f01e 0f10 	tst.w	lr, #16
 800592a:	bf08      	it	eq
 800592c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005930:	f380 8809 	msr	PSP, r0
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	f3af 8000 	nop.w

08005940 <pxCurrentTCBConst>:
 8005940:	200004c4 	.word	0x200004c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop

08005948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	607b      	str	r3, [r7, #4]
}
 8005960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005962:	f7ff fbd3 	bl	800510c <xTaskIncrementTick>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800596c:	4b06      	ldr	r3, [pc, #24]	@ (8005988 <SysTick_Handler+0x40>)
 800596e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	2300      	movs	r3, #0
 8005976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	f383 8811 	msr	BASEPRI, r3
}
 800597e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005990:	4b0b      	ldr	r3, [pc, #44]	@ (80059c0 <vPortSetupTimerInterrupt+0x34>)
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005996:	4b0b      	ldr	r3, [pc, #44]	@ (80059c4 <vPortSetupTimerInterrupt+0x38>)
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800599c:	4b0a      	ldr	r3, [pc, #40]	@ (80059c8 <vPortSetupTimerInterrupt+0x3c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a0a      	ldr	r2, [pc, #40]	@ (80059cc <vPortSetupTimerInterrupt+0x40>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	099b      	lsrs	r3, r3, #6
 80059a8:	4a09      	ldr	r2, [pc, #36]	@ (80059d0 <vPortSetupTimerInterrupt+0x44>)
 80059aa:	3b01      	subs	r3, #1
 80059ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059ae:	4b04      	ldr	r3, [pc, #16]	@ (80059c0 <vPortSetupTimerInterrupt+0x34>)
 80059b0:	2207      	movs	r2, #7
 80059b2:	601a      	str	r2, [r3, #0]
}
 80059b4:	bf00      	nop
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	e000e010 	.word	0xe000e010
 80059c4:	e000e018 	.word	0xe000e018
 80059c8:	20000000 	.word	0x20000000
 80059cc:	10624dd3 	.word	0x10624dd3
 80059d0:	e000e014 	.word	0xe000e014

080059d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80059e4 <vPortEnableVFP+0x10>
 80059d8:	6801      	ldr	r1, [r0, #0]
 80059da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80059de:	6001      	str	r1, [r0, #0]
 80059e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059e2:	bf00      	nop
 80059e4:	e000ed88 	.word	0xe000ed88

080059e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	@ 0x28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059f4:	f7ff fade 	bl	8004fb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059f8:	4b5c      	ldr	r3, [pc, #368]	@ (8005b6c <pvPortMalloc+0x184>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a00:	f000 f924 	bl	8005c4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a04:	4b5a      	ldr	r3, [pc, #360]	@ (8005b70 <pvPortMalloc+0x188>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f040 8095 	bne.w	8005b3c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d01e      	beq.n	8005a56 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005a18:	2208      	movs	r2, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d015      	beq.n	8005a56 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f023 0307 	bic.w	r3, r3, #7
 8005a30:	3308      	adds	r3, #8
 8005a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <pvPortMalloc+0x6e>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	617b      	str	r3, [r7, #20]
}
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
 8005a54:	e7fd      	b.n	8005a52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d06f      	beq.n	8005b3c <pvPortMalloc+0x154>
 8005a5c:	4b45      	ldr	r3, [pc, #276]	@ (8005b74 <pvPortMalloc+0x18c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d86a      	bhi.n	8005b3c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a66:	4b44      	ldr	r3, [pc, #272]	@ (8005b78 <pvPortMalloc+0x190>)
 8005a68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a6a:	4b43      	ldr	r3, [pc, #268]	@ (8005b78 <pvPortMalloc+0x190>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a70:	e004      	b.n	8005a7c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d903      	bls.n	8005a8e <pvPortMalloc+0xa6>
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f1      	bne.n	8005a72 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a8e:	4b37      	ldr	r3, [pc, #220]	@ (8005b6c <pvPortMalloc+0x184>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d051      	beq.n	8005b3c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	4413      	add	r3, r2
 8005aa0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	1ad2      	subs	r2, r2, r3
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d920      	bls.n	8005afc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4413      	add	r3, r2
 8005ac0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <pvPortMalloc+0xfc>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	613b      	str	r3, [r7, #16]
}
 8005ade:	bf00      	nop
 8005ae0:	bf00      	nop
 8005ae2:	e7fd      	b.n	8005ae0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	1ad2      	subs	r2, r2, r3
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005af6:	69b8      	ldr	r0, [r7, #24]
 8005af8:	f000 f90a 	bl	8005d10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005afc:	4b1d      	ldr	r3, [pc, #116]	@ (8005b74 <pvPortMalloc+0x18c>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	4a1b      	ldr	r2, [pc, #108]	@ (8005b74 <pvPortMalloc+0x18c>)
 8005b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005b74 <pvPortMalloc+0x18c>)
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005b7c <pvPortMalloc+0x194>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d203      	bcs.n	8005b1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b16:	4b17      	ldr	r3, [pc, #92]	@ (8005b74 <pvPortMalloc+0x18c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a18      	ldr	r2, [pc, #96]	@ (8005b7c <pvPortMalloc+0x194>)
 8005b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	4b13      	ldr	r3, [pc, #76]	@ (8005b70 <pvPortMalloc+0x188>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b32:	4b13      	ldr	r3, [pc, #76]	@ (8005b80 <pvPortMalloc+0x198>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	4a11      	ldr	r2, [pc, #68]	@ (8005b80 <pvPortMalloc+0x198>)
 8005b3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b3c:	f7ff fa48 	bl	8004fd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00b      	beq.n	8005b62 <pvPortMalloc+0x17a>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	60fb      	str	r3, [r7, #12]
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	e7fd      	b.n	8005b5e <pvPortMalloc+0x176>
	return pvReturn;
 8005b62:	69fb      	ldr	r3, [r7, #28]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3728      	adds	r7, #40	@ 0x28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20005420 	.word	0x20005420
 8005b70:	20005434 	.word	0x20005434
 8005b74:	20005424 	.word	0x20005424
 8005b78:	20005418 	.word	0x20005418
 8005b7c:	20005428 	.word	0x20005428
 8005b80:	2000542c 	.word	0x2000542c

08005b84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d04f      	beq.n	8005c36 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b96:	2308      	movs	r3, #8
 8005b98:	425b      	negs	r3, r3
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	4b25      	ldr	r3, [pc, #148]	@ (8005c40 <vPortFree+0xbc>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10b      	bne.n	8005bca <vPortFree+0x46>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	60fb      	str	r3, [r7, #12]
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	e7fd      	b.n	8005bc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <vPortFree+0x66>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	60bb      	str	r3, [r7, #8]
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	e7fd      	b.n	8005be6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	4b14      	ldr	r3, [pc, #80]	@ (8005c40 <vPortFree+0xbc>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01e      	beq.n	8005c36 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d11a      	bne.n	8005c36 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	4b0e      	ldr	r3, [pc, #56]	@ (8005c40 <vPortFree+0xbc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	401a      	ands	r2, r3
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c10:	f7ff f9d0 	bl	8004fb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	4b0a      	ldr	r3, [pc, #40]	@ (8005c44 <vPortFree+0xc0>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	4a09      	ldr	r2, [pc, #36]	@ (8005c44 <vPortFree+0xc0>)
 8005c20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c22:	6938      	ldr	r0, [r7, #16]
 8005c24:	f000 f874 	bl	8005d10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c28:	4b07      	ldr	r3, [pc, #28]	@ (8005c48 <vPortFree+0xc4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	4a06      	ldr	r2, [pc, #24]	@ (8005c48 <vPortFree+0xc4>)
 8005c30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c32:	f7ff f9cd 	bl	8004fd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c36:	bf00      	nop
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20005434 	.word	0x20005434
 8005c44:	20005424 	.word	0x20005424
 8005c48:	20005430 	.word	0x20005430

08005c4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c52:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8005c56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c58:	4b27      	ldr	r3, [pc, #156]	@ (8005cf8 <prvHeapInit+0xac>)
 8005c5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00c      	beq.n	8005c80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3307      	adds	r3, #7
 8005c6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0307 	bic.w	r3, r3, #7
 8005c72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf8 <prvHeapInit+0xac>)
 8005c7c:	4413      	add	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c84:	4a1d      	ldr	r2, [pc, #116]	@ (8005cfc <prvHeapInit+0xb0>)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8005cfc <prvHeapInit+0xb0>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	4413      	add	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c98:	2208      	movs	r2, #8
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1a9b      	subs	r3, r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0307 	bic.w	r3, r3, #7
 8005ca6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4a15      	ldr	r2, [pc, #84]	@ (8005d00 <prvHeapInit+0xb4>)
 8005cac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cae:	4b14      	ldr	r3, [pc, #80]	@ (8005d00 <prvHeapInit+0xb4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cb6:	4b12      	ldr	r3, [pc, #72]	@ (8005d00 <prvHeapInit+0xb4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	1ad2      	subs	r2, r2, r3
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <prvHeapInit+0xb4>)
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8005d04 <prvHeapInit+0xb8>)
 8005cda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	4a09      	ldr	r2, [pc, #36]	@ (8005d08 <prvHeapInit+0xbc>)
 8005ce2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ce4:	4b09      	ldr	r3, [pc, #36]	@ (8005d0c <prvHeapInit+0xc0>)
 8005ce6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005cea:	601a      	str	r2, [r3, #0]
}
 8005cec:	bf00      	nop
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	200005f8 	.word	0x200005f8
 8005cfc:	20005418 	.word	0x20005418
 8005d00:	20005420 	.word	0x20005420
 8005d04:	20005428 	.word	0x20005428
 8005d08:	20005424 	.word	0x20005424
 8005d0c:	20005434 	.word	0x20005434

08005d10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d18:	4b28      	ldr	r3, [pc, #160]	@ (8005dbc <prvInsertBlockIntoFreeList+0xac>)
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e002      	b.n	8005d24 <prvInsertBlockIntoFreeList+0x14>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d8f7      	bhi.n	8005d1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	4413      	add	r3, r2
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d108      	bne.n	8005d52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	441a      	add	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	441a      	add	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d118      	bne.n	8005d98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d00d      	beq.n	8005d8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	441a      	add	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	e008      	b.n	8005da0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e003      	b.n	8005da0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d002      	beq.n	8005dae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20005418 	.word	0x20005418
 8005dc0:	20005420 	.word	0x20005420

08005dc4 <sniprintf>:
 8005dc4:	b40c      	push	{r2, r3}
 8005dc6:	b530      	push	{r4, r5, lr}
 8005dc8:	4b18      	ldr	r3, [pc, #96]	@ (8005e2c <sniprintf+0x68>)
 8005dca:	1e0c      	subs	r4, r1, #0
 8005dcc:	681d      	ldr	r5, [r3, #0]
 8005dce:	b09d      	sub	sp, #116	@ 0x74
 8005dd0:	da08      	bge.n	8005de4 <sniprintf+0x20>
 8005dd2:	238b      	movs	r3, #139	@ 0x8b
 8005dd4:	602b      	str	r3, [r5, #0]
 8005dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dda:	b01d      	add	sp, #116	@ 0x74
 8005ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005de0:	b002      	add	sp, #8
 8005de2:	4770      	bx	lr
 8005de4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005de8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005df2:	bf14      	ite	ne
 8005df4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005df8:	4623      	moveq	r3, r4
 8005dfa:	9304      	str	r3, [sp, #16]
 8005dfc:	9307      	str	r3, [sp, #28]
 8005dfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e02:	9002      	str	r0, [sp, #8]
 8005e04:	9006      	str	r0, [sp, #24]
 8005e06:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005e0c:	ab21      	add	r3, sp, #132	@ 0x84
 8005e0e:	a902      	add	r1, sp, #8
 8005e10:	4628      	mov	r0, r5
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	f000 fa00 	bl	8006218 <_svfiprintf_r>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	bfbc      	itt	lt
 8005e1c:	238b      	movlt	r3, #139	@ 0x8b
 8005e1e:	602b      	strlt	r3, [r5, #0]
 8005e20:	2c00      	cmp	r4, #0
 8005e22:	d0da      	beq.n	8005dda <sniprintf+0x16>
 8005e24:	9b02      	ldr	r3, [sp, #8]
 8005e26:	2200      	movs	r2, #0
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	e7d6      	b.n	8005dda <sniprintf+0x16>
 8005e2c:	20000010 	.word	0x20000010

08005e30 <memset>:
 8005e30:	4402      	add	r2, r0
 8005e32:	4603      	mov	r3, r0
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d100      	bne.n	8005e3a <memset+0xa>
 8005e38:	4770      	bx	lr
 8005e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e3e:	e7f9      	b.n	8005e34 <memset+0x4>

08005e40 <_reclaim_reent>:
 8005e40:	4b2d      	ldr	r3, [pc, #180]	@ (8005ef8 <_reclaim_reent+0xb8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4283      	cmp	r3, r0
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	4604      	mov	r4, r0
 8005e4a:	d053      	beq.n	8005ef4 <_reclaim_reent+0xb4>
 8005e4c:	69c3      	ldr	r3, [r0, #28]
 8005e4e:	b31b      	cbz	r3, 8005e98 <_reclaim_reent+0x58>
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	b163      	cbz	r3, 8005e6e <_reclaim_reent+0x2e>
 8005e54:	2500      	movs	r5, #0
 8005e56:	69e3      	ldr	r3, [r4, #28]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	5959      	ldr	r1, [r3, r5]
 8005e5c:	b9b1      	cbnz	r1, 8005e8c <_reclaim_reent+0x4c>
 8005e5e:	3504      	adds	r5, #4
 8005e60:	2d80      	cmp	r5, #128	@ 0x80
 8005e62:	d1f8      	bne.n	8005e56 <_reclaim_reent+0x16>
 8005e64:	69e3      	ldr	r3, [r4, #28]
 8005e66:	4620      	mov	r0, r4
 8005e68:	68d9      	ldr	r1, [r3, #12]
 8005e6a:	f000 f881 	bl	8005f70 <_free_r>
 8005e6e:	69e3      	ldr	r3, [r4, #28]
 8005e70:	6819      	ldr	r1, [r3, #0]
 8005e72:	b111      	cbz	r1, 8005e7a <_reclaim_reent+0x3a>
 8005e74:	4620      	mov	r0, r4
 8005e76:	f000 f87b 	bl	8005f70 <_free_r>
 8005e7a:	69e3      	ldr	r3, [r4, #28]
 8005e7c:	689d      	ldr	r5, [r3, #8]
 8005e7e:	b15d      	cbz	r5, 8005e98 <_reclaim_reent+0x58>
 8005e80:	4629      	mov	r1, r5
 8005e82:	4620      	mov	r0, r4
 8005e84:	682d      	ldr	r5, [r5, #0]
 8005e86:	f000 f873 	bl	8005f70 <_free_r>
 8005e8a:	e7f8      	b.n	8005e7e <_reclaim_reent+0x3e>
 8005e8c:	680e      	ldr	r6, [r1, #0]
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f000 f86e 	bl	8005f70 <_free_r>
 8005e94:	4631      	mov	r1, r6
 8005e96:	e7e1      	b.n	8005e5c <_reclaim_reent+0x1c>
 8005e98:	6961      	ldr	r1, [r4, #20]
 8005e9a:	b111      	cbz	r1, 8005ea2 <_reclaim_reent+0x62>
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f000 f867 	bl	8005f70 <_free_r>
 8005ea2:	69e1      	ldr	r1, [r4, #28]
 8005ea4:	b111      	cbz	r1, 8005eac <_reclaim_reent+0x6c>
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f000 f862 	bl	8005f70 <_free_r>
 8005eac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005eae:	b111      	cbz	r1, 8005eb6 <_reclaim_reent+0x76>
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 f85d 	bl	8005f70 <_free_r>
 8005eb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005eb8:	b111      	cbz	r1, 8005ec0 <_reclaim_reent+0x80>
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f000 f858 	bl	8005f70 <_free_r>
 8005ec0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005ec2:	b111      	cbz	r1, 8005eca <_reclaim_reent+0x8a>
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f000 f853 	bl	8005f70 <_free_r>
 8005eca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005ecc:	b111      	cbz	r1, 8005ed4 <_reclaim_reent+0x94>
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f000 f84e 	bl	8005f70 <_free_r>
 8005ed4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005ed6:	b111      	cbz	r1, 8005ede <_reclaim_reent+0x9e>
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f000 f849 	bl	8005f70 <_free_r>
 8005ede:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ee0:	b111      	cbz	r1, 8005ee8 <_reclaim_reent+0xa8>
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 f844 	bl	8005f70 <_free_r>
 8005ee8:	6a23      	ldr	r3, [r4, #32]
 8005eea:	b11b      	cbz	r3, 8005ef4 <_reclaim_reent+0xb4>
 8005eec:	4620      	mov	r0, r4
 8005eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ef2:	4718      	bx	r3
 8005ef4:	bd70      	pop	{r4, r5, r6, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000010 	.word	0x20000010

08005efc <__errno>:
 8005efc:	4b01      	ldr	r3, [pc, #4]	@ (8005f04 <__errno+0x8>)
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20000010 	.word	0x20000010

08005f08 <__libc_init_array>:
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005f40 <__libc_init_array+0x38>)
 8005f0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005f44 <__libc_init_array+0x3c>)
 8005f0e:	1b64      	subs	r4, r4, r5
 8005f10:	10a4      	asrs	r4, r4, #2
 8005f12:	2600      	movs	r6, #0
 8005f14:	42a6      	cmp	r6, r4
 8005f16:	d109      	bne.n	8005f2c <__libc_init_array+0x24>
 8005f18:	4d0b      	ldr	r5, [pc, #44]	@ (8005f48 <__libc_init_array+0x40>)
 8005f1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005f4c <__libc_init_array+0x44>)
 8005f1c:	f000 fc64 	bl	80067e8 <_init>
 8005f20:	1b64      	subs	r4, r4, r5
 8005f22:	10a4      	asrs	r4, r4, #2
 8005f24:	2600      	movs	r6, #0
 8005f26:	42a6      	cmp	r6, r4
 8005f28:	d105      	bne.n	8005f36 <__libc_init_array+0x2e>
 8005f2a:	bd70      	pop	{r4, r5, r6, pc}
 8005f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f30:	4798      	blx	r3
 8005f32:	3601      	adds	r6, #1
 8005f34:	e7ee      	b.n	8005f14 <__libc_init_array+0xc>
 8005f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3a:	4798      	blx	r3
 8005f3c:	3601      	adds	r6, #1
 8005f3e:	e7f2      	b.n	8005f26 <__libc_init_array+0x1e>
 8005f40:	080069d4 	.word	0x080069d4
 8005f44:	080069d4 	.word	0x080069d4
 8005f48:	080069d4 	.word	0x080069d4
 8005f4c:	080069d8 	.word	0x080069d8

08005f50 <__retarget_lock_acquire_recursive>:
 8005f50:	4770      	bx	lr

08005f52 <__retarget_lock_release_recursive>:
 8005f52:	4770      	bx	lr

08005f54 <memcpy>:
 8005f54:	440a      	add	r2, r1
 8005f56:	4291      	cmp	r1, r2
 8005f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f5c:	d100      	bne.n	8005f60 <memcpy+0xc>
 8005f5e:	4770      	bx	lr
 8005f60:	b510      	push	{r4, lr}
 8005f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f6a:	4291      	cmp	r1, r2
 8005f6c:	d1f9      	bne.n	8005f62 <memcpy+0xe>
 8005f6e:	bd10      	pop	{r4, pc}

08005f70 <_free_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4605      	mov	r5, r0
 8005f74:	2900      	cmp	r1, #0
 8005f76:	d041      	beq.n	8005ffc <_free_r+0x8c>
 8005f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f7c:	1f0c      	subs	r4, r1, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfb8      	it	lt
 8005f82:	18e4      	addlt	r4, r4, r3
 8005f84:	f000 f8e0 	bl	8006148 <__malloc_lock>
 8005f88:	4a1d      	ldr	r2, [pc, #116]	@ (8006000 <_free_r+0x90>)
 8005f8a:	6813      	ldr	r3, [r2, #0]
 8005f8c:	b933      	cbnz	r3, 8005f9c <_free_r+0x2c>
 8005f8e:	6063      	str	r3, [r4, #4]
 8005f90:	6014      	str	r4, [r2, #0]
 8005f92:	4628      	mov	r0, r5
 8005f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f98:	f000 b8dc 	b.w	8006154 <__malloc_unlock>
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	d908      	bls.n	8005fb2 <_free_r+0x42>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	1821      	adds	r1, r4, r0
 8005fa4:	428b      	cmp	r3, r1
 8005fa6:	bf01      	itttt	eq
 8005fa8:	6819      	ldreq	r1, [r3, #0]
 8005faa:	685b      	ldreq	r3, [r3, #4]
 8005fac:	1809      	addeq	r1, r1, r0
 8005fae:	6021      	streq	r1, [r4, #0]
 8005fb0:	e7ed      	b.n	8005f8e <_free_r+0x1e>
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	b10b      	cbz	r3, 8005fbc <_free_r+0x4c>
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	d9fa      	bls.n	8005fb2 <_free_r+0x42>
 8005fbc:	6811      	ldr	r1, [r2, #0]
 8005fbe:	1850      	adds	r0, r2, r1
 8005fc0:	42a0      	cmp	r0, r4
 8005fc2:	d10b      	bne.n	8005fdc <_free_r+0x6c>
 8005fc4:	6820      	ldr	r0, [r4, #0]
 8005fc6:	4401      	add	r1, r0
 8005fc8:	1850      	adds	r0, r2, r1
 8005fca:	4283      	cmp	r3, r0
 8005fcc:	6011      	str	r1, [r2, #0]
 8005fce:	d1e0      	bne.n	8005f92 <_free_r+0x22>
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	6053      	str	r3, [r2, #4]
 8005fd6:	4408      	add	r0, r1
 8005fd8:	6010      	str	r0, [r2, #0]
 8005fda:	e7da      	b.n	8005f92 <_free_r+0x22>
 8005fdc:	d902      	bls.n	8005fe4 <_free_r+0x74>
 8005fde:	230c      	movs	r3, #12
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	e7d6      	b.n	8005f92 <_free_r+0x22>
 8005fe4:	6820      	ldr	r0, [r4, #0]
 8005fe6:	1821      	adds	r1, r4, r0
 8005fe8:	428b      	cmp	r3, r1
 8005fea:	bf04      	itt	eq
 8005fec:	6819      	ldreq	r1, [r3, #0]
 8005fee:	685b      	ldreq	r3, [r3, #4]
 8005ff0:	6063      	str	r3, [r4, #4]
 8005ff2:	bf04      	itt	eq
 8005ff4:	1809      	addeq	r1, r1, r0
 8005ff6:	6021      	streq	r1, [r4, #0]
 8005ff8:	6054      	str	r4, [r2, #4]
 8005ffa:	e7ca      	b.n	8005f92 <_free_r+0x22>
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
 8005ffe:	bf00      	nop
 8006000:	2000557c 	.word	0x2000557c

08006004 <sbrk_aligned>:
 8006004:	b570      	push	{r4, r5, r6, lr}
 8006006:	4e0f      	ldr	r6, [pc, #60]	@ (8006044 <sbrk_aligned+0x40>)
 8006008:	460c      	mov	r4, r1
 800600a:	6831      	ldr	r1, [r6, #0]
 800600c:	4605      	mov	r5, r0
 800600e:	b911      	cbnz	r1, 8006016 <sbrk_aligned+0x12>
 8006010:	f000 fba4 	bl	800675c <_sbrk_r>
 8006014:	6030      	str	r0, [r6, #0]
 8006016:	4621      	mov	r1, r4
 8006018:	4628      	mov	r0, r5
 800601a:	f000 fb9f 	bl	800675c <_sbrk_r>
 800601e:	1c43      	adds	r3, r0, #1
 8006020:	d103      	bne.n	800602a <sbrk_aligned+0x26>
 8006022:	f04f 34ff 	mov.w	r4, #4294967295
 8006026:	4620      	mov	r0, r4
 8006028:	bd70      	pop	{r4, r5, r6, pc}
 800602a:	1cc4      	adds	r4, r0, #3
 800602c:	f024 0403 	bic.w	r4, r4, #3
 8006030:	42a0      	cmp	r0, r4
 8006032:	d0f8      	beq.n	8006026 <sbrk_aligned+0x22>
 8006034:	1a21      	subs	r1, r4, r0
 8006036:	4628      	mov	r0, r5
 8006038:	f000 fb90 	bl	800675c <_sbrk_r>
 800603c:	3001      	adds	r0, #1
 800603e:	d1f2      	bne.n	8006026 <sbrk_aligned+0x22>
 8006040:	e7ef      	b.n	8006022 <sbrk_aligned+0x1e>
 8006042:	bf00      	nop
 8006044:	20005578 	.word	0x20005578

08006048 <_malloc_r>:
 8006048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800604c:	1ccd      	adds	r5, r1, #3
 800604e:	f025 0503 	bic.w	r5, r5, #3
 8006052:	3508      	adds	r5, #8
 8006054:	2d0c      	cmp	r5, #12
 8006056:	bf38      	it	cc
 8006058:	250c      	movcc	r5, #12
 800605a:	2d00      	cmp	r5, #0
 800605c:	4606      	mov	r6, r0
 800605e:	db01      	blt.n	8006064 <_malloc_r+0x1c>
 8006060:	42a9      	cmp	r1, r5
 8006062:	d904      	bls.n	800606e <_malloc_r+0x26>
 8006064:	230c      	movs	r3, #12
 8006066:	6033      	str	r3, [r6, #0]
 8006068:	2000      	movs	r0, #0
 800606a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800606e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006144 <_malloc_r+0xfc>
 8006072:	f000 f869 	bl	8006148 <__malloc_lock>
 8006076:	f8d8 3000 	ldr.w	r3, [r8]
 800607a:	461c      	mov	r4, r3
 800607c:	bb44      	cbnz	r4, 80060d0 <_malloc_r+0x88>
 800607e:	4629      	mov	r1, r5
 8006080:	4630      	mov	r0, r6
 8006082:	f7ff ffbf 	bl	8006004 <sbrk_aligned>
 8006086:	1c43      	adds	r3, r0, #1
 8006088:	4604      	mov	r4, r0
 800608a:	d158      	bne.n	800613e <_malloc_r+0xf6>
 800608c:	f8d8 4000 	ldr.w	r4, [r8]
 8006090:	4627      	mov	r7, r4
 8006092:	2f00      	cmp	r7, #0
 8006094:	d143      	bne.n	800611e <_malloc_r+0xd6>
 8006096:	2c00      	cmp	r4, #0
 8006098:	d04b      	beq.n	8006132 <_malloc_r+0xea>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	4639      	mov	r1, r7
 800609e:	4630      	mov	r0, r6
 80060a0:	eb04 0903 	add.w	r9, r4, r3
 80060a4:	f000 fb5a 	bl	800675c <_sbrk_r>
 80060a8:	4581      	cmp	r9, r0
 80060aa:	d142      	bne.n	8006132 <_malloc_r+0xea>
 80060ac:	6821      	ldr	r1, [r4, #0]
 80060ae:	1a6d      	subs	r5, r5, r1
 80060b0:	4629      	mov	r1, r5
 80060b2:	4630      	mov	r0, r6
 80060b4:	f7ff ffa6 	bl	8006004 <sbrk_aligned>
 80060b8:	3001      	adds	r0, #1
 80060ba:	d03a      	beq.n	8006132 <_malloc_r+0xea>
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	442b      	add	r3, r5
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	f8d8 3000 	ldr.w	r3, [r8]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	bb62      	cbnz	r2, 8006124 <_malloc_r+0xdc>
 80060ca:	f8c8 7000 	str.w	r7, [r8]
 80060ce:	e00f      	b.n	80060f0 <_malloc_r+0xa8>
 80060d0:	6822      	ldr	r2, [r4, #0]
 80060d2:	1b52      	subs	r2, r2, r5
 80060d4:	d420      	bmi.n	8006118 <_malloc_r+0xd0>
 80060d6:	2a0b      	cmp	r2, #11
 80060d8:	d917      	bls.n	800610a <_malloc_r+0xc2>
 80060da:	1961      	adds	r1, r4, r5
 80060dc:	42a3      	cmp	r3, r4
 80060de:	6025      	str	r5, [r4, #0]
 80060e0:	bf18      	it	ne
 80060e2:	6059      	strne	r1, [r3, #4]
 80060e4:	6863      	ldr	r3, [r4, #4]
 80060e6:	bf08      	it	eq
 80060e8:	f8c8 1000 	streq.w	r1, [r8]
 80060ec:	5162      	str	r2, [r4, r5]
 80060ee:	604b      	str	r3, [r1, #4]
 80060f0:	4630      	mov	r0, r6
 80060f2:	f000 f82f 	bl	8006154 <__malloc_unlock>
 80060f6:	f104 000b 	add.w	r0, r4, #11
 80060fa:	1d23      	adds	r3, r4, #4
 80060fc:	f020 0007 	bic.w	r0, r0, #7
 8006100:	1ac2      	subs	r2, r0, r3
 8006102:	bf1c      	itt	ne
 8006104:	1a1b      	subne	r3, r3, r0
 8006106:	50a3      	strne	r3, [r4, r2]
 8006108:	e7af      	b.n	800606a <_malloc_r+0x22>
 800610a:	6862      	ldr	r2, [r4, #4]
 800610c:	42a3      	cmp	r3, r4
 800610e:	bf0c      	ite	eq
 8006110:	f8c8 2000 	streq.w	r2, [r8]
 8006114:	605a      	strne	r2, [r3, #4]
 8006116:	e7eb      	b.n	80060f0 <_malloc_r+0xa8>
 8006118:	4623      	mov	r3, r4
 800611a:	6864      	ldr	r4, [r4, #4]
 800611c:	e7ae      	b.n	800607c <_malloc_r+0x34>
 800611e:	463c      	mov	r4, r7
 8006120:	687f      	ldr	r7, [r7, #4]
 8006122:	e7b6      	b.n	8006092 <_malloc_r+0x4a>
 8006124:	461a      	mov	r2, r3
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	42a3      	cmp	r3, r4
 800612a:	d1fb      	bne.n	8006124 <_malloc_r+0xdc>
 800612c:	2300      	movs	r3, #0
 800612e:	6053      	str	r3, [r2, #4]
 8006130:	e7de      	b.n	80060f0 <_malloc_r+0xa8>
 8006132:	230c      	movs	r3, #12
 8006134:	6033      	str	r3, [r6, #0]
 8006136:	4630      	mov	r0, r6
 8006138:	f000 f80c 	bl	8006154 <__malloc_unlock>
 800613c:	e794      	b.n	8006068 <_malloc_r+0x20>
 800613e:	6005      	str	r5, [r0, #0]
 8006140:	e7d6      	b.n	80060f0 <_malloc_r+0xa8>
 8006142:	bf00      	nop
 8006144:	2000557c 	.word	0x2000557c

08006148 <__malloc_lock>:
 8006148:	4801      	ldr	r0, [pc, #4]	@ (8006150 <__malloc_lock+0x8>)
 800614a:	f7ff bf01 	b.w	8005f50 <__retarget_lock_acquire_recursive>
 800614e:	bf00      	nop
 8006150:	20005574 	.word	0x20005574

08006154 <__malloc_unlock>:
 8006154:	4801      	ldr	r0, [pc, #4]	@ (800615c <__malloc_unlock+0x8>)
 8006156:	f7ff befc 	b.w	8005f52 <__retarget_lock_release_recursive>
 800615a:	bf00      	nop
 800615c:	20005574 	.word	0x20005574

08006160 <__ssputs_r>:
 8006160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006164:	688e      	ldr	r6, [r1, #8]
 8006166:	461f      	mov	r7, r3
 8006168:	42be      	cmp	r6, r7
 800616a:	680b      	ldr	r3, [r1, #0]
 800616c:	4682      	mov	sl, r0
 800616e:	460c      	mov	r4, r1
 8006170:	4690      	mov	r8, r2
 8006172:	d82d      	bhi.n	80061d0 <__ssputs_r+0x70>
 8006174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006178:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800617c:	d026      	beq.n	80061cc <__ssputs_r+0x6c>
 800617e:	6965      	ldr	r5, [r4, #20]
 8006180:	6909      	ldr	r1, [r1, #16]
 8006182:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006186:	eba3 0901 	sub.w	r9, r3, r1
 800618a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800618e:	1c7b      	adds	r3, r7, #1
 8006190:	444b      	add	r3, r9
 8006192:	106d      	asrs	r5, r5, #1
 8006194:	429d      	cmp	r5, r3
 8006196:	bf38      	it	cc
 8006198:	461d      	movcc	r5, r3
 800619a:	0553      	lsls	r3, r2, #21
 800619c:	d527      	bpl.n	80061ee <__ssputs_r+0x8e>
 800619e:	4629      	mov	r1, r5
 80061a0:	f7ff ff52 	bl	8006048 <_malloc_r>
 80061a4:	4606      	mov	r6, r0
 80061a6:	b360      	cbz	r0, 8006202 <__ssputs_r+0xa2>
 80061a8:	6921      	ldr	r1, [r4, #16]
 80061aa:	464a      	mov	r2, r9
 80061ac:	f7ff fed2 	bl	8005f54 <memcpy>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	6126      	str	r6, [r4, #16]
 80061be:	6165      	str	r5, [r4, #20]
 80061c0:	444e      	add	r6, r9
 80061c2:	eba5 0509 	sub.w	r5, r5, r9
 80061c6:	6026      	str	r6, [r4, #0]
 80061c8:	60a5      	str	r5, [r4, #8]
 80061ca:	463e      	mov	r6, r7
 80061cc:	42be      	cmp	r6, r7
 80061ce:	d900      	bls.n	80061d2 <__ssputs_r+0x72>
 80061d0:	463e      	mov	r6, r7
 80061d2:	6820      	ldr	r0, [r4, #0]
 80061d4:	4632      	mov	r2, r6
 80061d6:	4641      	mov	r1, r8
 80061d8:	f000 faa6 	bl	8006728 <memmove>
 80061dc:	68a3      	ldr	r3, [r4, #8]
 80061de:	1b9b      	subs	r3, r3, r6
 80061e0:	60a3      	str	r3, [r4, #8]
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	4433      	add	r3, r6
 80061e6:	6023      	str	r3, [r4, #0]
 80061e8:	2000      	movs	r0, #0
 80061ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ee:	462a      	mov	r2, r5
 80061f0:	f000 fac4 	bl	800677c <_realloc_r>
 80061f4:	4606      	mov	r6, r0
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d1e0      	bne.n	80061bc <__ssputs_r+0x5c>
 80061fa:	6921      	ldr	r1, [r4, #16]
 80061fc:	4650      	mov	r0, sl
 80061fe:	f7ff feb7 	bl	8005f70 <_free_r>
 8006202:	230c      	movs	r3, #12
 8006204:	f8ca 3000 	str.w	r3, [sl]
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800620e:	81a3      	strh	r3, [r4, #12]
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	e7e9      	b.n	80061ea <__ssputs_r+0x8a>
	...

08006218 <_svfiprintf_r>:
 8006218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	4698      	mov	r8, r3
 800621e:	898b      	ldrh	r3, [r1, #12]
 8006220:	061b      	lsls	r3, r3, #24
 8006222:	b09d      	sub	sp, #116	@ 0x74
 8006224:	4607      	mov	r7, r0
 8006226:	460d      	mov	r5, r1
 8006228:	4614      	mov	r4, r2
 800622a:	d510      	bpl.n	800624e <_svfiprintf_r+0x36>
 800622c:	690b      	ldr	r3, [r1, #16]
 800622e:	b973      	cbnz	r3, 800624e <_svfiprintf_r+0x36>
 8006230:	2140      	movs	r1, #64	@ 0x40
 8006232:	f7ff ff09 	bl	8006048 <_malloc_r>
 8006236:	6028      	str	r0, [r5, #0]
 8006238:	6128      	str	r0, [r5, #16]
 800623a:	b930      	cbnz	r0, 800624a <_svfiprintf_r+0x32>
 800623c:	230c      	movs	r3, #12
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	b01d      	add	sp, #116	@ 0x74
 8006246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624a:	2340      	movs	r3, #64	@ 0x40
 800624c:	616b      	str	r3, [r5, #20]
 800624e:	2300      	movs	r3, #0
 8006250:	9309      	str	r3, [sp, #36]	@ 0x24
 8006252:	2320      	movs	r3, #32
 8006254:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006258:	f8cd 800c 	str.w	r8, [sp, #12]
 800625c:	2330      	movs	r3, #48	@ 0x30
 800625e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80063fc <_svfiprintf_r+0x1e4>
 8006262:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006266:	f04f 0901 	mov.w	r9, #1
 800626a:	4623      	mov	r3, r4
 800626c:	469a      	mov	sl, r3
 800626e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006272:	b10a      	cbz	r2, 8006278 <_svfiprintf_r+0x60>
 8006274:	2a25      	cmp	r2, #37	@ 0x25
 8006276:	d1f9      	bne.n	800626c <_svfiprintf_r+0x54>
 8006278:	ebba 0b04 	subs.w	fp, sl, r4
 800627c:	d00b      	beq.n	8006296 <_svfiprintf_r+0x7e>
 800627e:	465b      	mov	r3, fp
 8006280:	4622      	mov	r2, r4
 8006282:	4629      	mov	r1, r5
 8006284:	4638      	mov	r0, r7
 8006286:	f7ff ff6b 	bl	8006160 <__ssputs_r>
 800628a:	3001      	adds	r0, #1
 800628c:	f000 80a7 	beq.w	80063de <_svfiprintf_r+0x1c6>
 8006290:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006292:	445a      	add	r2, fp
 8006294:	9209      	str	r2, [sp, #36]	@ 0x24
 8006296:	f89a 3000 	ldrb.w	r3, [sl]
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 809f 	beq.w	80063de <_svfiprintf_r+0x1c6>
 80062a0:	2300      	movs	r3, #0
 80062a2:	f04f 32ff 	mov.w	r2, #4294967295
 80062a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062aa:	f10a 0a01 	add.w	sl, sl, #1
 80062ae:	9304      	str	r3, [sp, #16]
 80062b0:	9307      	str	r3, [sp, #28]
 80062b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80062b8:	4654      	mov	r4, sl
 80062ba:	2205      	movs	r2, #5
 80062bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c0:	484e      	ldr	r0, [pc, #312]	@ (80063fc <_svfiprintf_r+0x1e4>)
 80062c2:	f7f9 ff9d 	bl	8000200 <memchr>
 80062c6:	9a04      	ldr	r2, [sp, #16]
 80062c8:	b9d8      	cbnz	r0, 8006302 <_svfiprintf_r+0xea>
 80062ca:	06d0      	lsls	r0, r2, #27
 80062cc:	bf44      	itt	mi
 80062ce:	2320      	movmi	r3, #32
 80062d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062d4:	0711      	lsls	r1, r2, #28
 80062d6:	bf44      	itt	mi
 80062d8:	232b      	movmi	r3, #43	@ 0x2b
 80062da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062de:	f89a 3000 	ldrb.w	r3, [sl]
 80062e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80062e4:	d015      	beq.n	8006312 <_svfiprintf_r+0xfa>
 80062e6:	9a07      	ldr	r2, [sp, #28]
 80062e8:	4654      	mov	r4, sl
 80062ea:	2000      	movs	r0, #0
 80062ec:	f04f 0c0a 	mov.w	ip, #10
 80062f0:	4621      	mov	r1, r4
 80062f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062f6:	3b30      	subs	r3, #48	@ 0x30
 80062f8:	2b09      	cmp	r3, #9
 80062fa:	d94b      	bls.n	8006394 <_svfiprintf_r+0x17c>
 80062fc:	b1b0      	cbz	r0, 800632c <_svfiprintf_r+0x114>
 80062fe:	9207      	str	r2, [sp, #28]
 8006300:	e014      	b.n	800632c <_svfiprintf_r+0x114>
 8006302:	eba0 0308 	sub.w	r3, r0, r8
 8006306:	fa09 f303 	lsl.w	r3, r9, r3
 800630a:	4313      	orrs	r3, r2
 800630c:	9304      	str	r3, [sp, #16]
 800630e:	46a2      	mov	sl, r4
 8006310:	e7d2      	b.n	80062b8 <_svfiprintf_r+0xa0>
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	1d19      	adds	r1, r3, #4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	9103      	str	r1, [sp, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	bfbb      	ittet	lt
 800631e:	425b      	neglt	r3, r3
 8006320:	f042 0202 	orrlt.w	r2, r2, #2
 8006324:	9307      	strge	r3, [sp, #28]
 8006326:	9307      	strlt	r3, [sp, #28]
 8006328:	bfb8      	it	lt
 800632a:	9204      	strlt	r2, [sp, #16]
 800632c:	7823      	ldrb	r3, [r4, #0]
 800632e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006330:	d10a      	bne.n	8006348 <_svfiprintf_r+0x130>
 8006332:	7863      	ldrb	r3, [r4, #1]
 8006334:	2b2a      	cmp	r3, #42	@ 0x2a
 8006336:	d132      	bne.n	800639e <_svfiprintf_r+0x186>
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	1d1a      	adds	r2, r3, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	9203      	str	r2, [sp, #12]
 8006340:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006344:	3402      	adds	r4, #2
 8006346:	9305      	str	r3, [sp, #20]
 8006348:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800640c <_svfiprintf_r+0x1f4>
 800634c:	7821      	ldrb	r1, [r4, #0]
 800634e:	2203      	movs	r2, #3
 8006350:	4650      	mov	r0, sl
 8006352:	f7f9 ff55 	bl	8000200 <memchr>
 8006356:	b138      	cbz	r0, 8006368 <_svfiprintf_r+0x150>
 8006358:	9b04      	ldr	r3, [sp, #16]
 800635a:	eba0 000a 	sub.w	r0, r0, sl
 800635e:	2240      	movs	r2, #64	@ 0x40
 8006360:	4082      	lsls	r2, r0
 8006362:	4313      	orrs	r3, r2
 8006364:	3401      	adds	r4, #1
 8006366:	9304      	str	r3, [sp, #16]
 8006368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800636c:	4824      	ldr	r0, [pc, #144]	@ (8006400 <_svfiprintf_r+0x1e8>)
 800636e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006372:	2206      	movs	r2, #6
 8006374:	f7f9 ff44 	bl	8000200 <memchr>
 8006378:	2800      	cmp	r0, #0
 800637a:	d036      	beq.n	80063ea <_svfiprintf_r+0x1d2>
 800637c:	4b21      	ldr	r3, [pc, #132]	@ (8006404 <_svfiprintf_r+0x1ec>)
 800637e:	bb1b      	cbnz	r3, 80063c8 <_svfiprintf_r+0x1b0>
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	3307      	adds	r3, #7
 8006384:	f023 0307 	bic.w	r3, r3, #7
 8006388:	3308      	adds	r3, #8
 800638a:	9303      	str	r3, [sp, #12]
 800638c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638e:	4433      	add	r3, r6
 8006390:	9309      	str	r3, [sp, #36]	@ 0x24
 8006392:	e76a      	b.n	800626a <_svfiprintf_r+0x52>
 8006394:	fb0c 3202 	mla	r2, ip, r2, r3
 8006398:	460c      	mov	r4, r1
 800639a:	2001      	movs	r0, #1
 800639c:	e7a8      	b.n	80062f0 <_svfiprintf_r+0xd8>
 800639e:	2300      	movs	r3, #0
 80063a0:	3401      	adds	r4, #1
 80063a2:	9305      	str	r3, [sp, #20]
 80063a4:	4619      	mov	r1, r3
 80063a6:	f04f 0c0a 	mov.w	ip, #10
 80063aa:	4620      	mov	r0, r4
 80063ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063b0:	3a30      	subs	r2, #48	@ 0x30
 80063b2:	2a09      	cmp	r2, #9
 80063b4:	d903      	bls.n	80063be <_svfiprintf_r+0x1a6>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0c6      	beq.n	8006348 <_svfiprintf_r+0x130>
 80063ba:	9105      	str	r1, [sp, #20]
 80063bc:	e7c4      	b.n	8006348 <_svfiprintf_r+0x130>
 80063be:	fb0c 2101 	mla	r1, ip, r1, r2
 80063c2:	4604      	mov	r4, r0
 80063c4:	2301      	movs	r3, #1
 80063c6:	e7f0      	b.n	80063aa <_svfiprintf_r+0x192>
 80063c8:	ab03      	add	r3, sp, #12
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	462a      	mov	r2, r5
 80063ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006408 <_svfiprintf_r+0x1f0>)
 80063d0:	a904      	add	r1, sp, #16
 80063d2:	4638      	mov	r0, r7
 80063d4:	f3af 8000 	nop.w
 80063d8:	1c42      	adds	r2, r0, #1
 80063da:	4606      	mov	r6, r0
 80063dc:	d1d6      	bne.n	800638c <_svfiprintf_r+0x174>
 80063de:	89ab      	ldrh	r3, [r5, #12]
 80063e0:	065b      	lsls	r3, r3, #25
 80063e2:	f53f af2d 	bmi.w	8006240 <_svfiprintf_r+0x28>
 80063e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063e8:	e72c      	b.n	8006244 <_svfiprintf_r+0x2c>
 80063ea:	ab03      	add	r3, sp, #12
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	462a      	mov	r2, r5
 80063f0:	4b05      	ldr	r3, [pc, #20]	@ (8006408 <_svfiprintf_r+0x1f0>)
 80063f2:	a904      	add	r1, sp, #16
 80063f4:	4638      	mov	r0, r7
 80063f6:	f000 f879 	bl	80064ec <_printf_i>
 80063fa:	e7ed      	b.n	80063d8 <_svfiprintf_r+0x1c0>
 80063fc:	08006998 	.word	0x08006998
 8006400:	080069a2 	.word	0x080069a2
 8006404:	00000000 	.word	0x00000000
 8006408:	08006161 	.word	0x08006161
 800640c:	0800699e 	.word	0x0800699e

08006410 <_printf_common>:
 8006410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006414:	4616      	mov	r6, r2
 8006416:	4698      	mov	r8, r3
 8006418:	688a      	ldr	r2, [r1, #8]
 800641a:	690b      	ldr	r3, [r1, #16]
 800641c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006420:	4293      	cmp	r3, r2
 8006422:	bfb8      	it	lt
 8006424:	4613      	movlt	r3, r2
 8006426:	6033      	str	r3, [r6, #0]
 8006428:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800642c:	4607      	mov	r7, r0
 800642e:	460c      	mov	r4, r1
 8006430:	b10a      	cbz	r2, 8006436 <_printf_common+0x26>
 8006432:	3301      	adds	r3, #1
 8006434:	6033      	str	r3, [r6, #0]
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	0699      	lsls	r1, r3, #26
 800643a:	bf42      	ittt	mi
 800643c:	6833      	ldrmi	r3, [r6, #0]
 800643e:	3302      	addmi	r3, #2
 8006440:	6033      	strmi	r3, [r6, #0]
 8006442:	6825      	ldr	r5, [r4, #0]
 8006444:	f015 0506 	ands.w	r5, r5, #6
 8006448:	d106      	bne.n	8006458 <_printf_common+0x48>
 800644a:	f104 0a19 	add.w	sl, r4, #25
 800644e:	68e3      	ldr	r3, [r4, #12]
 8006450:	6832      	ldr	r2, [r6, #0]
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	42ab      	cmp	r3, r5
 8006456:	dc26      	bgt.n	80064a6 <_printf_common+0x96>
 8006458:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800645c:	6822      	ldr	r2, [r4, #0]
 800645e:	3b00      	subs	r3, #0
 8006460:	bf18      	it	ne
 8006462:	2301      	movne	r3, #1
 8006464:	0692      	lsls	r2, r2, #26
 8006466:	d42b      	bmi.n	80064c0 <_printf_common+0xb0>
 8006468:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800646c:	4641      	mov	r1, r8
 800646e:	4638      	mov	r0, r7
 8006470:	47c8      	blx	r9
 8006472:	3001      	adds	r0, #1
 8006474:	d01e      	beq.n	80064b4 <_printf_common+0xa4>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	6922      	ldr	r2, [r4, #16]
 800647a:	f003 0306 	and.w	r3, r3, #6
 800647e:	2b04      	cmp	r3, #4
 8006480:	bf02      	ittt	eq
 8006482:	68e5      	ldreq	r5, [r4, #12]
 8006484:	6833      	ldreq	r3, [r6, #0]
 8006486:	1aed      	subeq	r5, r5, r3
 8006488:	68a3      	ldr	r3, [r4, #8]
 800648a:	bf0c      	ite	eq
 800648c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006490:	2500      	movne	r5, #0
 8006492:	4293      	cmp	r3, r2
 8006494:	bfc4      	itt	gt
 8006496:	1a9b      	subgt	r3, r3, r2
 8006498:	18ed      	addgt	r5, r5, r3
 800649a:	2600      	movs	r6, #0
 800649c:	341a      	adds	r4, #26
 800649e:	42b5      	cmp	r5, r6
 80064a0:	d11a      	bne.n	80064d8 <_printf_common+0xc8>
 80064a2:	2000      	movs	r0, #0
 80064a4:	e008      	b.n	80064b8 <_printf_common+0xa8>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4652      	mov	r2, sl
 80064aa:	4641      	mov	r1, r8
 80064ac:	4638      	mov	r0, r7
 80064ae:	47c8      	blx	r9
 80064b0:	3001      	adds	r0, #1
 80064b2:	d103      	bne.n	80064bc <_printf_common+0xac>
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064bc:	3501      	adds	r5, #1
 80064be:	e7c6      	b.n	800644e <_printf_common+0x3e>
 80064c0:	18e1      	adds	r1, r4, r3
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	2030      	movs	r0, #48	@ 0x30
 80064c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064ca:	4422      	add	r2, r4
 80064cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80064d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80064d4:	3302      	adds	r3, #2
 80064d6:	e7c7      	b.n	8006468 <_printf_common+0x58>
 80064d8:	2301      	movs	r3, #1
 80064da:	4622      	mov	r2, r4
 80064dc:	4641      	mov	r1, r8
 80064de:	4638      	mov	r0, r7
 80064e0:	47c8      	blx	r9
 80064e2:	3001      	adds	r0, #1
 80064e4:	d0e6      	beq.n	80064b4 <_printf_common+0xa4>
 80064e6:	3601      	adds	r6, #1
 80064e8:	e7d9      	b.n	800649e <_printf_common+0x8e>
	...

080064ec <_printf_i>:
 80064ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064f0:	7e0f      	ldrb	r7, [r1, #24]
 80064f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064f4:	2f78      	cmp	r7, #120	@ 0x78
 80064f6:	4691      	mov	r9, r2
 80064f8:	4680      	mov	r8, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	469a      	mov	sl, r3
 80064fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006502:	d807      	bhi.n	8006514 <_printf_i+0x28>
 8006504:	2f62      	cmp	r7, #98	@ 0x62
 8006506:	d80a      	bhi.n	800651e <_printf_i+0x32>
 8006508:	2f00      	cmp	r7, #0
 800650a:	f000 80d1 	beq.w	80066b0 <_printf_i+0x1c4>
 800650e:	2f58      	cmp	r7, #88	@ 0x58
 8006510:	f000 80b8 	beq.w	8006684 <_printf_i+0x198>
 8006514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006518:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800651c:	e03a      	b.n	8006594 <_printf_i+0xa8>
 800651e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006522:	2b15      	cmp	r3, #21
 8006524:	d8f6      	bhi.n	8006514 <_printf_i+0x28>
 8006526:	a101      	add	r1, pc, #4	@ (adr r1, 800652c <_printf_i+0x40>)
 8006528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800652c:	08006585 	.word	0x08006585
 8006530:	08006599 	.word	0x08006599
 8006534:	08006515 	.word	0x08006515
 8006538:	08006515 	.word	0x08006515
 800653c:	08006515 	.word	0x08006515
 8006540:	08006515 	.word	0x08006515
 8006544:	08006599 	.word	0x08006599
 8006548:	08006515 	.word	0x08006515
 800654c:	08006515 	.word	0x08006515
 8006550:	08006515 	.word	0x08006515
 8006554:	08006515 	.word	0x08006515
 8006558:	08006697 	.word	0x08006697
 800655c:	080065c3 	.word	0x080065c3
 8006560:	08006651 	.word	0x08006651
 8006564:	08006515 	.word	0x08006515
 8006568:	08006515 	.word	0x08006515
 800656c:	080066b9 	.word	0x080066b9
 8006570:	08006515 	.word	0x08006515
 8006574:	080065c3 	.word	0x080065c3
 8006578:	08006515 	.word	0x08006515
 800657c:	08006515 	.word	0x08006515
 8006580:	08006659 	.word	0x08006659
 8006584:	6833      	ldr	r3, [r6, #0]
 8006586:	1d1a      	adds	r2, r3, #4
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6032      	str	r2, [r6, #0]
 800658c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006590:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006594:	2301      	movs	r3, #1
 8006596:	e09c      	b.n	80066d2 <_printf_i+0x1e6>
 8006598:	6833      	ldr	r3, [r6, #0]
 800659a:	6820      	ldr	r0, [r4, #0]
 800659c:	1d19      	adds	r1, r3, #4
 800659e:	6031      	str	r1, [r6, #0]
 80065a0:	0606      	lsls	r6, r0, #24
 80065a2:	d501      	bpl.n	80065a8 <_printf_i+0xbc>
 80065a4:	681d      	ldr	r5, [r3, #0]
 80065a6:	e003      	b.n	80065b0 <_printf_i+0xc4>
 80065a8:	0645      	lsls	r5, r0, #25
 80065aa:	d5fb      	bpl.n	80065a4 <_printf_i+0xb8>
 80065ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	da03      	bge.n	80065bc <_printf_i+0xd0>
 80065b4:	232d      	movs	r3, #45	@ 0x2d
 80065b6:	426d      	negs	r5, r5
 80065b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065bc:	4858      	ldr	r0, [pc, #352]	@ (8006720 <_printf_i+0x234>)
 80065be:	230a      	movs	r3, #10
 80065c0:	e011      	b.n	80065e6 <_printf_i+0xfa>
 80065c2:	6821      	ldr	r1, [r4, #0]
 80065c4:	6833      	ldr	r3, [r6, #0]
 80065c6:	0608      	lsls	r0, r1, #24
 80065c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80065cc:	d402      	bmi.n	80065d4 <_printf_i+0xe8>
 80065ce:	0649      	lsls	r1, r1, #25
 80065d0:	bf48      	it	mi
 80065d2:	b2ad      	uxthmi	r5, r5
 80065d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80065d6:	4852      	ldr	r0, [pc, #328]	@ (8006720 <_printf_i+0x234>)
 80065d8:	6033      	str	r3, [r6, #0]
 80065da:	bf14      	ite	ne
 80065dc:	230a      	movne	r3, #10
 80065de:	2308      	moveq	r3, #8
 80065e0:	2100      	movs	r1, #0
 80065e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065e6:	6866      	ldr	r6, [r4, #4]
 80065e8:	60a6      	str	r6, [r4, #8]
 80065ea:	2e00      	cmp	r6, #0
 80065ec:	db05      	blt.n	80065fa <_printf_i+0x10e>
 80065ee:	6821      	ldr	r1, [r4, #0]
 80065f0:	432e      	orrs	r6, r5
 80065f2:	f021 0104 	bic.w	r1, r1, #4
 80065f6:	6021      	str	r1, [r4, #0]
 80065f8:	d04b      	beq.n	8006692 <_printf_i+0x1a6>
 80065fa:	4616      	mov	r6, r2
 80065fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006600:	fb03 5711 	mls	r7, r3, r1, r5
 8006604:	5dc7      	ldrb	r7, [r0, r7]
 8006606:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800660a:	462f      	mov	r7, r5
 800660c:	42bb      	cmp	r3, r7
 800660e:	460d      	mov	r5, r1
 8006610:	d9f4      	bls.n	80065fc <_printf_i+0x110>
 8006612:	2b08      	cmp	r3, #8
 8006614:	d10b      	bne.n	800662e <_printf_i+0x142>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	07df      	lsls	r7, r3, #31
 800661a:	d508      	bpl.n	800662e <_printf_i+0x142>
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	6861      	ldr	r1, [r4, #4]
 8006620:	4299      	cmp	r1, r3
 8006622:	bfde      	ittt	le
 8006624:	2330      	movle	r3, #48	@ 0x30
 8006626:	f806 3c01 	strble.w	r3, [r6, #-1]
 800662a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800662e:	1b92      	subs	r2, r2, r6
 8006630:	6122      	str	r2, [r4, #16]
 8006632:	f8cd a000 	str.w	sl, [sp]
 8006636:	464b      	mov	r3, r9
 8006638:	aa03      	add	r2, sp, #12
 800663a:	4621      	mov	r1, r4
 800663c:	4640      	mov	r0, r8
 800663e:	f7ff fee7 	bl	8006410 <_printf_common>
 8006642:	3001      	adds	r0, #1
 8006644:	d14a      	bne.n	80066dc <_printf_i+0x1f0>
 8006646:	f04f 30ff 	mov.w	r0, #4294967295
 800664a:	b004      	add	sp, #16
 800664c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	f043 0320 	orr.w	r3, r3, #32
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	4832      	ldr	r0, [pc, #200]	@ (8006724 <_printf_i+0x238>)
 800665a:	2778      	movs	r7, #120	@ 0x78
 800665c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	6831      	ldr	r1, [r6, #0]
 8006664:	061f      	lsls	r7, r3, #24
 8006666:	f851 5b04 	ldr.w	r5, [r1], #4
 800666a:	d402      	bmi.n	8006672 <_printf_i+0x186>
 800666c:	065f      	lsls	r7, r3, #25
 800666e:	bf48      	it	mi
 8006670:	b2ad      	uxthmi	r5, r5
 8006672:	6031      	str	r1, [r6, #0]
 8006674:	07d9      	lsls	r1, r3, #31
 8006676:	bf44      	itt	mi
 8006678:	f043 0320 	orrmi.w	r3, r3, #32
 800667c:	6023      	strmi	r3, [r4, #0]
 800667e:	b11d      	cbz	r5, 8006688 <_printf_i+0x19c>
 8006680:	2310      	movs	r3, #16
 8006682:	e7ad      	b.n	80065e0 <_printf_i+0xf4>
 8006684:	4826      	ldr	r0, [pc, #152]	@ (8006720 <_printf_i+0x234>)
 8006686:	e7e9      	b.n	800665c <_printf_i+0x170>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	f023 0320 	bic.w	r3, r3, #32
 800668e:	6023      	str	r3, [r4, #0]
 8006690:	e7f6      	b.n	8006680 <_printf_i+0x194>
 8006692:	4616      	mov	r6, r2
 8006694:	e7bd      	b.n	8006612 <_printf_i+0x126>
 8006696:	6833      	ldr	r3, [r6, #0]
 8006698:	6825      	ldr	r5, [r4, #0]
 800669a:	6961      	ldr	r1, [r4, #20]
 800669c:	1d18      	adds	r0, r3, #4
 800669e:	6030      	str	r0, [r6, #0]
 80066a0:	062e      	lsls	r6, r5, #24
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	d501      	bpl.n	80066aa <_printf_i+0x1be>
 80066a6:	6019      	str	r1, [r3, #0]
 80066a8:	e002      	b.n	80066b0 <_printf_i+0x1c4>
 80066aa:	0668      	lsls	r0, r5, #25
 80066ac:	d5fb      	bpl.n	80066a6 <_printf_i+0x1ba>
 80066ae:	8019      	strh	r1, [r3, #0]
 80066b0:	2300      	movs	r3, #0
 80066b2:	6123      	str	r3, [r4, #16]
 80066b4:	4616      	mov	r6, r2
 80066b6:	e7bc      	b.n	8006632 <_printf_i+0x146>
 80066b8:	6833      	ldr	r3, [r6, #0]
 80066ba:	1d1a      	adds	r2, r3, #4
 80066bc:	6032      	str	r2, [r6, #0]
 80066be:	681e      	ldr	r6, [r3, #0]
 80066c0:	6862      	ldr	r2, [r4, #4]
 80066c2:	2100      	movs	r1, #0
 80066c4:	4630      	mov	r0, r6
 80066c6:	f7f9 fd9b 	bl	8000200 <memchr>
 80066ca:	b108      	cbz	r0, 80066d0 <_printf_i+0x1e4>
 80066cc:	1b80      	subs	r0, r0, r6
 80066ce:	6060      	str	r0, [r4, #4]
 80066d0:	6863      	ldr	r3, [r4, #4]
 80066d2:	6123      	str	r3, [r4, #16]
 80066d4:	2300      	movs	r3, #0
 80066d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066da:	e7aa      	b.n	8006632 <_printf_i+0x146>
 80066dc:	6923      	ldr	r3, [r4, #16]
 80066de:	4632      	mov	r2, r6
 80066e0:	4649      	mov	r1, r9
 80066e2:	4640      	mov	r0, r8
 80066e4:	47d0      	blx	sl
 80066e6:	3001      	adds	r0, #1
 80066e8:	d0ad      	beq.n	8006646 <_printf_i+0x15a>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	079b      	lsls	r3, r3, #30
 80066ee:	d413      	bmi.n	8006718 <_printf_i+0x22c>
 80066f0:	68e0      	ldr	r0, [r4, #12]
 80066f2:	9b03      	ldr	r3, [sp, #12]
 80066f4:	4298      	cmp	r0, r3
 80066f6:	bfb8      	it	lt
 80066f8:	4618      	movlt	r0, r3
 80066fa:	e7a6      	b.n	800664a <_printf_i+0x15e>
 80066fc:	2301      	movs	r3, #1
 80066fe:	4632      	mov	r2, r6
 8006700:	4649      	mov	r1, r9
 8006702:	4640      	mov	r0, r8
 8006704:	47d0      	blx	sl
 8006706:	3001      	adds	r0, #1
 8006708:	d09d      	beq.n	8006646 <_printf_i+0x15a>
 800670a:	3501      	adds	r5, #1
 800670c:	68e3      	ldr	r3, [r4, #12]
 800670e:	9903      	ldr	r1, [sp, #12]
 8006710:	1a5b      	subs	r3, r3, r1
 8006712:	42ab      	cmp	r3, r5
 8006714:	dcf2      	bgt.n	80066fc <_printf_i+0x210>
 8006716:	e7eb      	b.n	80066f0 <_printf_i+0x204>
 8006718:	2500      	movs	r5, #0
 800671a:	f104 0619 	add.w	r6, r4, #25
 800671e:	e7f5      	b.n	800670c <_printf_i+0x220>
 8006720:	080069a9 	.word	0x080069a9
 8006724:	080069ba 	.word	0x080069ba

08006728 <memmove>:
 8006728:	4288      	cmp	r0, r1
 800672a:	b510      	push	{r4, lr}
 800672c:	eb01 0402 	add.w	r4, r1, r2
 8006730:	d902      	bls.n	8006738 <memmove+0x10>
 8006732:	4284      	cmp	r4, r0
 8006734:	4623      	mov	r3, r4
 8006736:	d807      	bhi.n	8006748 <memmove+0x20>
 8006738:	1e43      	subs	r3, r0, #1
 800673a:	42a1      	cmp	r1, r4
 800673c:	d008      	beq.n	8006750 <memmove+0x28>
 800673e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006746:	e7f8      	b.n	800673a <memmove+0x12>
 8006748:	4402      	add	r2, r0
 800674a:	4601      	mov	r1, r0
 800674c:	428a      	cmp	r2, r1
 800674e:	d100      	bne.n	8006752 <memmove+0x2a>
 8006750:	bd10      	pop	{r4, pc}
 8006752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800675a:	e7f7      	b.n	800674c <memmove+0x24>

0800675c <_sbrk_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4d06      	ldr	r5, [pc, #24]	@ (8006778 <_sbrk_r+0x1c>)
 8006760:	2300      	movs	r3, #0
 8006762:	4604      	mov	r4, r0
 8006764:	4608      	mov	r0, r1
 8006766:	602b      	str	r3, [r5, #0]
 8006768:	f7fa fa36 	bl	8000bd8 <_sbrk>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_sbrk_r+0x1a>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_sbrk_r+0x1a>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20005570 	.word	0x20005570

0800677c <_realloc_r>:
 800677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006780:	4607      	mov	r7, r0
 8006782:	4614      	mov	r4, r2
 8006784:	460d      	mov	r5, r1
 8006786:	b921      	cbnz	r1, 8006792 <_realloc_r+0x16>
 8006788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800678c:	4611      	mov	r1, r2
 800678e:	f7ff bc5b 	b.w	8006048 <_malloc_r>
 8006792:	b92a      	cbnz	r2, 80067a0 <_realloc_r+0x24>
 8006794:	f7ff fbec 	bl	8005f70 <_free_r>
 8006798:	4625      	mov	r5, r4
 800679a:	4628      	mov	r0, r5
 800679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a0:	f000 f81a 	bl	80067d8 <_malloc_usable_size_r>
 80067a4:	4284      	cmp	r4, r0
 80067a6:	4606      	mov	r6, r0
 80067a8:	d802      	bhi.n	80067b0 <_realloc_r+0x34>
 80067aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80067ae:	d8f4      	bhi.n	800679a <_realloc_r+0x1e>
 80067b0:	4621      	mov	r1, r4
 80067b2:	4638      	mov	r0, r7
 80067b4:	f7ff fc48 	bl	8006048 <_malloc_r>
 80067b8:	4680      	mov	r8, r0
 80067ba:	b908      	cbnz	r0, 80067c0 <_realloc_r+0x44>
 80067bc:	4645      	mov	r5, r8
 80067be:	e7ec      	b.n	800679a <_realloc_r+0x1e>
 80067c0:	42b4      	cmp	r4, r6
 80067c2:	4622      	mov	r2, r4
 80067c4:	4629      	mov	r1, r5
 80067c6:	bf28      	it	cs
 80067c8:	4632      	movcs	r2, r6
 80067ca:	f7ff fbc3 	bl	8005f54 <memcpy>
 80067ce:	4629      	mov	r1, r5
 80067d0:	4638      	mov	r0, r7
 80067d2:	f7ff fbcd 	bl	8005f70 <_free_r>
 80067d6:	e7f1      	b.n	80067bc <_realloc_r+0x40>

080067d8 <_malloc_usable_size_r>:
 80067d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067dc:	1f18      	subs	r0, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bfbc      	itt	lt
 80067e2:	580b      	ldrlt	r3, [r1, r0]
 80067e4:	18c0      	addlt	r0, r0, r3
 80067e6:	4770      	bx	lr

080067e8 <_init>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr

080067f4 <_fini>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr
