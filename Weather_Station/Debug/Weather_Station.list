
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca8  0800c678  0800c678  0000d678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d320  0800d320  0000f42c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d320  0800d320  0000e320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d328  0800d328  0000f42c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d328  0800d328  0000e328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d32c  0800d32c  0000e32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000042c  20000000  0800d330  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005650  2000042c  0800d75c  0000f42c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005a7c  0800d75c  0000fa7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f42c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a1f5  00000000  00000000  0000f45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e3a  00000000  00000000  00029651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  0002d490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001207  00000000  00000000  0002ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a72b  00000000  00000000  0002fddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b224  00000000  00000000  0005a50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff5aa  00000000  00000000  0007572e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00174cd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000764c  00000000  00000000  00174d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0017c368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000042c 	.word	0x2000042c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c660 	.word	0x0800c660

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000430 	.word	0x20000430
 80001cc:	0800c660 	.word	0x0800c660

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a07      	ldr	r2, [pc, #28]	@ (800106c <vApplicationGetIdleTaskMemory+0x2c>)
 8001050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4a06      	ldr	r2, [pc, #24]	@ (8001070 <vApplicationGetIdleTaskMemory+0x30>)
 8001056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000450 	.word	0x20000450
 8001070:	200004f0 	.word	0x200004f0

08001074 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b08e      	sub	sp, #56	@ 0x38
 8001078:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <MX_FREERTOS_Init+0x58>)
 800107c:	f107 041c 	add.w	r4, r7, #28
 8001080:	461d      	mov	r5, r3
 8001082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001086:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800108a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f005 f874 	bl	8006182 <osThreadCreate>
 800109a:	4603      	mov	r3, r0
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <MX_FREERTOS_Init+0x5c>)
 800109e:	6013      	str	r3, [r2, #0]

  /* definition and creation of IHM_Task */
  osThreadDef(IHM_Task, Start_IHM_Task, osPriorityIdle, 0, 1024);
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_FREERTOS_Init+0x60>)
 80010a2:	463c      	mov	r4, r7
 80010a4:	461d      	mov	r5, r3
 80010a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IHM_TaskHandle = osThreadCreate(osThread(IHM_Task), NULL);
 80010b2:	463b      	mov	r3, r7
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f005 f863 	bl	8006182 <osThreadCreate>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <MX_FREERTOS_Init+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010c2:	bf00      	nop
 80010c4:	3738      	adds	r7, #56	@ 0x38
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	0800c684 	.word	0x0800c684
 80010d0:	20000448 	.word	0x20000448
 80010d4:	0800c6ac 	.word	0x0800c6ac
 80010d8:	2000044c 	.word	0x2000044c

080010dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f005 f898 	bl	800621a <osDelay>
 80010ea:	e7fb      	b.n	80010e4 <StartDefaultTask+0x8>

080010ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	4a2a      	ldr	r2, [pc, #168]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110e:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a24      	ldr	r2, [pc, #144]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2120      	movs	r1, #32
 8001166:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116a:	f001 fdd1 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800116e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001174:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480b      	ldr	r0, [pc, #44]	@ (80011b4 <MX_GPIO_Init+0xc8>)
 8001186:	f001 fc19 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800118a:	2320      	movs	r3, #32
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a4:	f001 fc0a 	bl	80029bc <HAL_GPIO_Init>

}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	@ 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000800 	.word	0x48000800

080011b8 <UpperCase>:
	Sensors_Menu
}Menu;
Menu currentMenu=Main_Menu;

//Useful functions for the code
void UpperCase(char *str){
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	while (*str)
 80011c0:	e015      	b.n	80011ee <UpperCase+0x36>
	{
		*str=toupper(*str);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <UpperCase+0x4c>)
 80011ce:	4413      	add	r3, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d102      	bne.n	80011e0 <UpperCase+0x28>
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	3b20      	subs	r3, #32
 80011de:	e000      	b.n	80011e2 <UpperCase+0x2a>
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	701a      	strb	r2, [r3, #0]
		str++;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3301      	adds	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
	while (*str)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1e5      	bne.n	80011c2 <UpperCase+0xa>
	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	0800d120 	.word	0x0800d120

08001208 <Start_IHM_Task>:

void Start_IHM_Task(void const * argument)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_IHM_Task */
	MainMenu();
 8001210:	f000 f83c 	bl	800128c <MainMenu>
	MessageBufferHandle = xMessageBufferCreate(xMessageBufferSizeBytes);
 8001214:	2364      	movs	r3, #100	@ 0x64
 8001216:	2201      	movs	r2, #1
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f005 f8c5 	bl	80063aa <xStreamBufferGenericCreate>
 8001220:	4603      	mov	r3, r0
 8001222:	4a15      	ldr	r2, [pc, #84]	@ (8001278 <Start_IHM_Task+0x70>)
 8001224:	6013      	str	r3, [r2, #0]
	if( MessageBufferHandle != NULL )
 8001226:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <Start_IHM_Task+0x70>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d105      	bne.n	800123a <Start_IHM_Task+0x32>
	{
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 800122e:	2364      	movs	r3, #100	@ 0x64
 8001230:	2222      	movs	r2, #34	@ 0x22
 8001232:	4912      	ldr	r1, [pc, #72]	@ (800127c <Start_IHM_Task+0x74>)
 8001234:	4812      	ldr	r0, [pc, #72]	@ (8001280 <Start_IHM_Task+0x78>)
 8001236:	f003 fbe9 	bl	8004a0c <HAL_UART_Transmit>
	}

	/* Infinite loop */
	for(;;)
	{
		xMessageBufferReceive( MessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <Start_IHM_Task+0x70>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	2240      	movs	r2, #64	@ 0x40
 8001244:	490f      	ldr	r1, [pc, #60]	@ (8001284 <Start_IHM_Task+0x7c>)
 8001246:	f005 f9f2 	bl	800662e <xStreamBufferReceive>
		memset(new_buff,0,sizeof(new_buff));
 800124a:	2240      	movs	r2, #64	@ 0x40
 800124c:	2100      	movs	r1, #0
 800124e:	480e      	ldr	r0, [pc, #56]	@ (8001288 <Start_IHM_Task+0x80>)
 8001250:	f008 fbf3 	bl	8009a3a <memset>
		UpperCase((char*)received_data);
 8001254:	480b      	ldr	r0, [pc, #44]	@ (8001284 <Start_IHM_Task+0x7c>)
 8001256:	f7ff ffaf 	bl	80011b8 <UpperCase>
		tokenization((char*)received_data);
 800125a:	480a      	ldr	r0, [pc, #40]	@ (8001284 <Start_IHM_Task+0x7c>)
 800125c:	f000 f930 	bl	80014c0 <tokenization>
		ParseCommand();
 8001260:	f000 f95c 	bl	800151c <ParseCommand>
		memset(received_data,0,sizeof(received_data));
 8001264:	2240      	movs	r2, #64	@ 0x40
 8001266:	2100      	movs	r1, #0
 8001268:	4806      	ldr	r0, [pc, #24]	@ (8001284 <Start_IHM_Task+0x7c>)
 800126a:	f008 fbe6 	bl	8009a3a <memset>
		osDelay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f004 ffd3 	bl	800621a <osDelay>
		xMessageBufferReceive( MessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 8001274:	bf00      	nop
 8001276:	e7e0      	b.n	800123a <Start_IHM_Task+0x32>
 8001278:	20000838 	.word	0x20000838
 800127c:	0800c6c8 	.word	0x0800c6c8
 8001280:	20000930 	.word	0x20000930
 8001284:	200007f8 	.word	0x200007f8
 8001288:	20000730 	.word	0x20000730

0800128c <MainMenu>:
	}
	/* USER CODE END Start_IHM_Task */
}

// Fonction pour afficher le menu principal complet
void MainMenu(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	// Afficher tout le menu une seule fois
	currentMenu=Main_Menu;
 8001290:	4b2e      	ldr	r3, [pc, #184]	@ (800134c <MainMenu+0xc0>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;30;107m----------------Main Menu---------------\033[0m\n \r\n");
 8001296:	492e      	ldr	r1, [pc, #184]	@ (8001350 <MainMenu+0xc4>)
 8001298:	482e      	ldr	r0, [pc, #184]	@ (8001354 <MainMenu+0xc8>)
 800129a:	f008 fb69 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 800129e:	482d      	ldr	r0, [pc, #180]	@ (8001354 <MainMenu+0xc8>)
 80012a0:	f7fe fff6 	bl	8000290 <strlen>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	2364      	movs	r3, #100	@ 0x64
 80012aa:	492a      	ldr	r1, [pc, #168]	@ (8001354 <MainMenu+0xc8>)
 80012ac:	482a      	ldr	r0, [pc, #168]	@ (8001358 <MainMenu+0xcc>)
 80012ae:	f003 fbad 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO ACCESS SENSORS DATA WRITE : SENSORS \r\n");
 80012b2:	492a      	ldr	r1, [pc, #168]	@ (800135c <MainMenu+0xd0>)
 80012b4:	4827      	ldr	r0, [pc, #156]	@ (8001354 <MainMenu+0xc8>)
 80012b6:	f008 fb5b 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80012ba:	4826      	ldr	r0, [pc, #152]	@ (8001354 <MainMenu+0xc8>)
 80012bc:	f7fe ffe8 	bl	8000290 <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	2364      	movs	r3, #100	@ 0x64
 80012c6:	4923      	ldr	r1, [pc, #140]	@ (8001354 <MainMenu+0xc8>)
 80012c8:	4823      	ldr	r0, [pc, #140]	@ (8001358 <MainMenu+0xcc>)
 80012ca:	f003 fb9f 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO ACCESS SATELLITE PREDICTION MENU WRITE : SATELLITE\r\n");
 80012ce:	4924      	ldr	r1, [pc, #144]	@ (8001360 <MainMenu+0xd4>)
 80012d0:	4820      	ldr	r0, [pc, #128]	@ (8001354 <MainMenu+0xc8>)
 80012d2:	f008 fb4d 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 80012d6:	481f      	ldr	r0, [pc, #124]	@ (8001354 <MainMenu+0xc8>)
 80012d8:	f7fe ffda 	bl	8000290 <strlen>
 80012dc:	4603      	mov	r3, r0
 80012de:	b29a      	uxth	r2, r3
 80012e0:	2364      	movs	r3, #100	@ 0x64
 80012e2:	491c      	ldr	r1, [pc, #112]	@ (8001354 <MainMenu+0xc8>)
 80012e4:	481c      	ldr	r0, [pc, #112]	@ (8001358 <MainMenu+0xcc>)
 80012e6:	f003 fb91 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO ACCESS GPS MENU WRITE : GPS\r\n");
 80012ea:	491e      	ldr	r1, [pc, #120]	@ (8001364 <MainMenu+0xd8>)
 80012ec:	4819      	ldr	r0, [pc, #100]	@ (8001354 <MainMenu+0xc8>)
 80012ee:	f008 fb3f 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 80012f2:	4818      	ldr	r0, [pc, #96]	@ (8001354 <MainMenu+0xc8>)
 80012f4:	f7fe ffcc 	bl	8000290 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	2364      	movs	r3, #100	@ 0x64
 80012fe:	4915      	ldr	r1, [pc, #84]	@ (8001354 <MainMenu+0xc8>)
 8001300:	4815      	ldr	r0, [pc, #84]	@ (8001358 <MainMenu+0xcc>)
 8001302:	f003 fb83 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO ACCESS LORA MENU, WRITE : LORA\r\n");
 8001306:	4918      	ldr	r1, [pc, #96]	@ (8001368 <MainMenu+0xdc>)
 8001308:	4812      	ldr	r0, [pc, #72]	@ (8001354 <MainMenu+0xc8>)
 800130a:	f008 fb31 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 800130e:	4811      	ldr	r0, [pc, #68]	@ (8001354 <MainMenu+0xc8>)
 8001310:	f7fe ffbe 	bl	8000290 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	b29a      	uxth	r2, r3
 8001318:	2364      	movs	r3, #100	@ 0x64
 800131a:	490e      	ldr	r1, [pc, #56]	@ (8001354 <MainMenu+0xc8>)
 800131c:	480e      	ldr	r0, [pc, #56]	@ (8001358 <MainMenu+0xcc>)
 800131e:	f003 fb75 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO SAVE CHANGES WRITE : SAVE\r\n");
 8001322:	4912      	ldr	r1, [pc, #72]	@ (800136c <MainMenu+0xe0>)
 8001324:	480b      	ldr	r0, [pc, #44]	@ (8001354 <MainMenu+0xc8>)
 8001326:	f008 fb23 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 800132a:	480a      	ldr	r0, [pc, #40]	@ (8001354 <MainMenu+0xc8>)
 800132c:	f7fe ffb0 	bl	8000290 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	b29a      	uxth	r2, r3
 8001334:	2364      	movs	r3, #100	@ 0x64
 8001336:	4907      	ldr	r1, [pc, #28]	@ (8001354 <MainMenu+0xc8>)
 8001338:	4807      	ldr	r0, [pc, #28]	@ (8001358 <MainMenu+0xcc>)
 800133a:	f003 fb67 	bl	8004a0c <HAL_UART_Transmit>


	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800133e:	2201      	movs	r2, #1
 8001340:	490b      	ldr	r1, [pc, #44]	@ (8001370 <MainMenu+0xe4>)
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MainMenu+0xcc>)
 8001344:	f003 fbec 	bl	8004b20 <HAL_UART_Receive_IT>

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200008dc 	.word	0x200008dc
 8001350:	0800c6ec 	.word	0x0800c6ec
 8001354:	20000774 	.word	0x20000774
 8001358:	20000930 	.word	0x20000930
 800135c:	0800c728 	.word	0x0800c728
 8001360:	0800c754 	.word	0x0800c754
 8001364:	0800c78c 	.word	0x0800c78c
 8001368:	0800c7b0 	.word	0x0800c7b0
 800136c:	0800c7d4 	.word	0x0800c7d4
 8001370:	20000770 	.word	0x20000770

08001374 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	if (!processing)
 800137c:	4b44      	ldr	r3, [pc, #272]	@ (8001490 <HAL_UART_RxCpltCallback+0x11c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d17b      	bne.n	800147c <HAL_UART_RxCpltCallback+0x108>
	{ if ((rxByte == '\r')||(rxByte=='\n'))
 8001384:	4b43      	ldr	r3, [pc, #268]	@ (8001494 <HAL_UART_RxCpltCallback+0x120>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b0d      	cmp	r3, #13
 800138a:	d003      	beq.n	8001394 <HAL_UART_RxCpltCallback+0x20>
 800138c:	4b41      	ldr	r3, [pc, #260]	@ (8001494 <HAL_UART_RxCpltCallback+0x120>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b0a      	cmp	r3, #10
 8001392:	d13a      	bne.n	800140a <HAL_UART_RxCpltCallback+0x96>
	{   if (rxIndex!=0)
 8001394:	4b40      	ldr	r3, [pc, #256]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d06f      	beq.n	800147c <HAL_UART_RxCpltCallback+0x108>
	{
		processing=1;
 800139c:	4b3c      	ldr	r3, [pc, #240]	@ (8001490 <HAL_UART_RxCpltCallback+0x11c>)
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
		rxBuffer[rxIndex] = '\0';
 80013a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b3c      	ldr	r3, [pc, #240]	@ (800149c <HAL_UART_RxCpltCallback+0x128>)
 80013aa:	2100      	movs	r1, #0
 80013ac:	5499      	strb	r1, [r3, r2]
		memcpy(new_buff,rxBuffer,rxIndex);
 80013ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4939      	ldr	r1, [pc, #228]	@ (800149c <HAL_UART_RxCpltCallback+0x128>)
 80013b6:	483a      	ldr	r0, [pc, #232]	@ (80014a0 <HAL_UART_RxCpltCallback+0x12c>)
 80013b8:	f008 fc93 	bl	8009ce2 <memcpy>
		xBytesSent=xMessageBufferSendFromISR(MessageBufferHandle,new_buff,strlen((char*)new_buff),&xHigherPriorityTaskWoken);
 80013bc:	4b39      	ldr	r3, [pc, #228]	@ (80014a4 <HAL_UART_RxCpltCallback+0x130>)
 80013be:	681c      	ldr	r4, [r3, #0]
 80013c0:	4837      	ldr	r0, [pc, #220]	@ (80014a0 <HAL_UART_RxCpltCallback+0x12c>)
 80013c2:	f7fe ff65 	bl	8000290 <strlen>
 80013c6:	4602      	mov	r2, r0
 80013c8:	4b37      	ldr	r3, [pc, #220]	@ (80014a8 <HAL_UART_RxCpltCallback+0x134>)
 80013ca:	4935      	ldr	r1, [pc, #212]	@ (80014a0 <HAL_UART_RxCpltCallback+0x12c>)
 80013cc:	4620      	mov	r0, r4
 80013ce:	f005 f87e 	bl	80064ce <xStreamBufferSendFromISR>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b35      	ldr	r3, [pc, #212]	@ (80014ac <HAL_UART_RxCpltCallback+0x138>)
 80013d8:	701a      	strb	r2, [r3, #0]
		//The number of bytes actually written to the message buffer.  If the
		// * message buffer didn't have enough free space for the message to be stored
		// * then 0 is returned, otherwise xDataLengthBytes is returned.
		if( xBytesSent != strlen((char*)new_buff))
 80013da:	4b34      	ldr	r3, [pc, #208]	@ (80014ac <HAL_UART_RxCpltCallback+0x138>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461c      	mov	r4, r3
 80013e0:	482f      	ldr	r0, [pc, #188]	@ (80014a0 <HAL_UART_RxCpltCallback+0x12c>)
 80013e2:	f7fe ff55 	bl	8000290 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	429c      	cmp	r4, r3
 80013ea:	d005      	beq.n	80013f8 <HAL_UART_RxCpltCallback+0x84>
		{
			HAL_UART_Transmit(&huart2, (const uint8_t *)"Message sent !=buffer data\r\n",26,100);
 80013ec:	2364      	movs	r3, #100	@ 0x64
 80013ee:	221a      	movs	r2, #26
 80013f0:	492f      	ldr	r1, [pc, #188]	@ (80014b0 <HAL_UART_RxCpltCallback+0x13c>)
 80013f2:	4830      	ldr	r0, [pc, #192]	@ (80014b4 <HAL_UART_RxCpltCallback+0x140>)
 80013f4:	f003 fb0a 	bl	8004a0c <HAL_UART_Transmit>
		}
		memset(rxBuffer,0,sizeof(rxBuffer));
 80013f8:	2240      	movs	r2, #64	@ 0x40
 80013fa:	2100      	movs	r1, #0
 80013fc:	4827      	ldr	r0, [pc, #156]	@ (800149c <HAL_UART_RxCpltCallback+0x128>)
 80013fe:	f008 fb1c 	bl	8009a3a <memset>
		rxIndex = 0;}
 8001402:	4b25      	ldr	r3, [pc, #148]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
	{   if (rxIndex!=0)
 8001408:	e038      	b.n	800147c <HAL_UART_RxCpltCallback+0x108>
	}

	else { if (rxIndex > 0){
 800140a:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d021      	beq.n	8001456 <HAL_UART_RxCpltCallback+0xe2>

		if (rxByte == '\b') {
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <HAL_UART_RxCpltCallback+0x120>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b08      	cmp	r3, #8
 8001418:	d11d      	bne.n	8001456 <HAL_UART_RxCpltCallback+0xe2>
			rxBuffer[rxIndex]=' ';
 800141a:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <HAL_UART_RxCpltCallback+0x128>)
 8001422:	2120      	movs	r1, #32
 8001424:	5499      	strb	r1, [r3, r2]
			rxIndex=rxIndex-1;
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 8001430:	701a      	strb	r2, [r3, #0]
			rxBuffer[rxIndex]=' ';
 8001432:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	4b18      	ldr	r3, [pc, #96]	@ (800149c <HAL_UART_RxCpltCallback+0x128>)
 800143a:	2120      	movs	r1, #32
 800143c:	5499      	strb	r1, [r3, r2]
			retour=rxIndex-1;
 800143e:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	3b01      	subs	r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <HAL_UART_RxCpltCallback+0x144>)
 8001448:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, (uint8_t *)" \b", 2, 100);
 800144a:	2364      	movs	r3, #100	@ 0x64
 800144c:	2202      	movs	r2, #2
 800144e:	491b      	ldr	r1, [pc, #108]	@ (80014bc <HAL_UART_RxCpltCallback+0x148>)
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f003 fadb 	bl	8004a0c <HAL_UART_Transmit>
			//{rxBuffer[i]=rxBuffer[retour++];
			//if (i==retour)
			//rxBuffer[i]='\0';}
		}
	}
	if (rxIndex < RX_BUFFER_SIZE-1) {
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b3e      	cmp	r3, #62	@ 0x3e
 800145c:	d80b      	bhi.n	8001476 <HAL_UART_RxCpltCallback+0x102>

		rxBuffer[rxIndex++] = rxByte;
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	b2d1      	uxtb	r1, r2
 8001466:	4a0c      	ldr	r2, [pc, #48]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 8001468:	7011      	strb	r1, [r2, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <HAL_UART_RxCpltCallback+0x120>)
 800146e:	7819      	ldrb	r1, [r3, #0]
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_UART_RxCpltCallback+0x128>)
 8001472:	5499      	strb	r1, [r3, r2]
 8001474:	e002      	b.n	800147c <HAL_UART_RxCpltCallback+0x108>
	}
	else {
		rxIndex=0;
 8001476:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <HAL_UART_RxCpltCallback+0x124>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
	}
	}
	}
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	4905      	ldr	r1, [pc, #20]	@ (8001494 <HAL_UART_RxCpltCallback+0x120>)
 8001480:	480c      	ldr	r0, [pc, #48]	@ (80014b4 <HAL_UART_RxCpltCallback+0x140>)
 8001482:	f003 fb4d 	bl	8004b20 <HAL_UART_Receive_IT>
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	bf00      	nop
 8001490:	20000840 	.word	0x20000840
 8001494:	20000770 	.word	0x20000770
 8001498:	20000771 	.word	0x20000771
 800149c:	200006f0 	.word	0x200006f0
 80014a0:	20000730 	.word	0x20000730
 80014a4:	20000838 	.word	0x20000838
 80014a8:	2000083c 	.word	0x2000083c
 80014ac:	200007f4 	.word	0x200007f4
 80014b0:	0800c7f4 	.word	0x0800c7f4
 80014b4:	20000930 	.word	0x20000930
 80014b8:	20000841 	.word	0x20000841
 80014bc:	0800c814 	.word	0x0800c814

080014c0 <tokenization>:
		{"SETUTC",(char*)0,SetTimeGPS_f,GPS_Menu},
		{"GETUTC",(char*)0,GetTimeGPS_f,GPS_Menu},

};
void tokenization(char *str) //function to tokenize input string
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	tokens[0]=strtok(str," ");
 80014c8:	4912      	ldr	r1, [pc, #72]	@ (8001514 <tokenization+0x54>)
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f008 fad0 	bl	8009a70 <strtok>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a11      	ldr	r2, [pc, #68]	@ (8001518 <tokenization+0x58>)
 80014d4:	6013      	str	r3, [r2, #0]
	for (uint8_t i=1; i<10;i++)
 80014d6:	2301      	movs	r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	e011      	b.n	8001500 <tokenization+0x40>
	{   tokens[i]=strtok(NULL," ");
 80014dc:	7bfc      	ldrb	r4, [r7, #15]
 80014de:	490d      	ldr	r1, [pc, #52]	@ (8001514 <tokenization+0x54>)
 80014e0:	2000      	movs	r0, #0
 80014e2:	f008 fac5 	bl	8009a70 <strtok>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001518 <tokenization+0x58>)
 80014ea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (tokens[i]==NULL)
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	4a09      	ldr	r2, [pc, #36]	@ (8001518 <tokenization+0x58>)
 80014f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <tokenization+0x48>
	for (uint8_t i=1; i<10;i++)
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	3301      	adds	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b09      	cmp	r3, #9
 8001504:	d9ea      	bls.n	80014dc <tokenization+0x1c>
		break;
	}
}
 8001506:	e000      	b.n	800150a <tokenization+0x4a>
		break;
 8001508:	bf00      	nop
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}
 8001512:	bf00      	nop
 8001514:	0800c93c 	.word	0x0800c93c
 8001518:	20000844 	.word	0x20000844

0800151c <ParseCommand>:
uint8_t cl_elements=sizeof(cmd_list)/sizeof(cmd_list[0]);
void ParseCommand() {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
	uint8_t c=0;
 8001522:	2300      	movs	r3, #0
 8001524:	71fb      	strb	r3, [r7, #7]
	uint8_t correspond=0;
 8001526:	2300      	movs	r3, #0
 8001528:	71bb      	strb	r3, [r7, #6]
	uint8_t true=0;
 800152a:	2300      	movs	r3, #0
 800152c:	717b      	strb	r3, [r7, #5]
	uint8_t goback=0;
 800152e:	2300      	movs	r3, #0
 8001530:	713b      	strb	r3, [r7, #4]
	if (strcmp(tokens[0],"..")==0)
 8001532:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <ParseCommand+0xcc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	492d      	ldr	r1, [pc, #180]	@ (80015ec <ParseCommand+0xd0>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe49 	bl	80001d0 <strcmp>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d135      	bne.n	80015b0 <ParseCommand+0x94>
	{MainMenu();
 8001544:	f7ff fea2 	bl	800128c <MainMenu>
	goback=1;}
 8001548:	2301      	movs	r3, #1
 800154a:	713b      	strb	r3, [r7, #4]
	while (c<cl_elements)
 800154c:	e030      	b.n	80015b0 <ParseCommand+0x94>
	{if (strcmp(tokens[0], cmd_list[c].Name)== 0)
 800154e:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <ParseCommand+0xcc>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	4926      	ldr	r1, [pc, #152]	@ (80015f0 <ParseCommand+0xd4>)
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	440b      	add	r3, r1
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	4610      	mov	r0, r2
 8001560:	f7fe fe36 	bl	80001d0 <strcmp>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d11f      	bne.n	80015aa <ParseCommand+0x8e>
	{ true=1;
 800156a:	2301      	movs	r3, #1
 800156c:	717b      	strb	r3, [r7, #5]
	if (currentMenu==cmd_list[c].MenuIndex)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4a1f      	ldr	r2, [pc, #124]	@ (80015f0 <ParseCommand+0xd4>)
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	4413      	add	r3, r2
 8001576:	330c      	adds	r3, #12
 8001578:	781a      	ldrb	r2, [r3, #0]
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <ParseCommand+0xd8>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d10c      	bne.n	800159c <ParseCommand+0x80>
	{cmd_list[c].handler(tokens[1]);
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	4a1a      	ldr	r2, [pc, #104]	@ (80015f0 <ParseCommand+0xd4>)
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	4413      	add	r3, r2
 800158a:	3308      	adds	r3, #8
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a16      	ldr	r2, [pc, #88]	@ (80015e8 <ParseCommand+0xcc>)
 8001590:	6852      	ldr	r2, [r2, #4]
 8001592:	4610      	mov	r0, r2
 8001594:	4798      	blx	r3
	correspond=1;}
 8001596:	2301      	movs	r3, #1
 8001598:	71bb      	strb	r3, [r7, #6]
	else HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong Menu\r\n",strlen("Wrong Menu\r\n"),100);
	break;
 800159a:	e00e      	b.n	80015ba <ParseCommand+0x9e>
	else HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong Menu\r\n",strlen("Wrong Menu\r\n"),100);
 800159c:	2364      	movs	r3, #100	@ 0x64
 800159e:	220c      	movs	r2, #12
 80015a0:	4915      	ldr	r1, [pc, #84]	@ (80015f8 <ParseCommand+0xdc>)
 80015a2:	4816      	ldr	r0, [pc, #88]	@ (80015fc <ParseCommand+0xe0>)
 80015a4:	f003 fa32 	bl	8004a0c <HAL_UART_Transmit>
	break;
 80015a8:	e007      	b.n	80015ba <ParseCommand+0x9e>
	}
	c++;
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	3301      	adds	r3, #1
 80015ae:	71fb      	strb	r3, [r7, #7]
	while (c<cl_elements)
 80015b0:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <ParseCommand+0xe4>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	79fa      	ldrb	r2, [r7, #7]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d3c9      	bcc.n	800154e <ParseCommand+0x32>
	}
	if (true==0 && correspond==0 && goback==0)
 80015ba:	797b      	ldrb	r3, [r7, #5]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10b      	bne.n	80015d8 <ParseCommand+0xbc>
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d108      	bne.n	80015d8 <ParseCommand+0xbc>
 80015c6:	793b      	ldrb	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <ParseCommand+0xbc>
		HAL_UART_Transmit(&huart2, (uint8_t*)"COMMAND ERROR\r\n",16,100);
 80015cc:	2364      	movs	r3, #100	@ 0x64
 80015ce:	2210      	movs	r2, #16
 80015d0:	490c      	ldr	r1, [pc, #48]	@ (8001604 <ParseCommand+0xe8>)
 80015d2:	480a      	ldr	r0, [pc, #40]	@ (80015fc <ParseCommand+0xe0>)
 80015d4:	f003 fa1a 	bl	8004a0c <HAL_UART_Transmit>

	processing=0;
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <ParseCommand+0xec>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000844 	.word	0x20000844
 80015ec:	0800c940 	.word	0x0800c940
 80015f0:	20000000 	.word	0x20000000
 80015f4:	200008dc 	.word	0x200008dc
 80015f8:	0800c944 	.word	0x0800c944
 80015fc:	20000930 	.word	0x20000930
 8001600:	20000250 	.word	0x20000250
 8001604:	0800c954 	.word	0x0800c954
 8001608:	20000840 	.word	0x20000840

0800160c <LoraMenu>:

//Lora Menu Code
void LoraMenu(char* arg){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	currentMenu=Lora_Menu;
 8001614:	4b3b      	ldr	r3, [pc, #236]	@ (8001704 <LoraMenu+0xf8>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;38;2;25;25;112;107m--------------- LORA Menu ---------------\033[0m\n \r\n");
 800161a:	493b      	ldr	r1, [pc, #236]	@ (8001708 <LoraMenu+0xfc>)
 800161c:	483b      	ldr	r0, [pc, #236]	@ (800170c <LoraMenu+0x100>)
 800161e:	f008 f9a7 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001622:	483a      	ldr	r0, [pc, #232]	@ (800170c <LoraMenu+0x100>)
 8001624:	f7fe fe34 	bl	8000290 <strlen>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	2364      	movs	r3, #100	@ 0x64
 800162e:	4937      	ldr	r1, [pc, #220]	@ (800170c <LoraMenu+0x100>)
 8001630:	4837      	ldr	r0, [pc, #220]	@ (8001710 <LoraMenu+0x104>)
 8001632:	f003 f9eb 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO SET VALUE WRITE : SETSF 5 \r\n");
 8001636:	4937      	ldr	r1, [pc, #220]	@ (8001714 <LoraMenu+0x108>)
 8001638:	4834      	ldr	r0, [pc, #208]	@ (800170c <LoraMenu+0x100>)
 800163a:	f008 f999 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 800163e:	4833      	ldr	r0, [pc, #204]	@ (800170c <LoraMenu+0x100>)
 8001640:	f7fe fe26 	bl	8000290 <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	b29a      	uxth	r2, r3
 8001648:	2364      	movs	r3, #100	@ 0x64
 800164a:	4930      	ldr	r1, [pc, #192]	@ (800170c <LoraMenu+0x100>)
 800164c:	4830      	ldr	r0, [pc, #192]	@ (8001710 <LoraMenu+0x104>)
 800164e:	f003 f9dd 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO GET SF VALUE WRITE : GETSF\r\n");
 8001652:	4931      	ldr	r1, [pc, #196]	@ (8001718 <LoraMenu+0x10c>)
 8001654:	482d      	ldr	r0, [pc, #180]	@ (800170c <LoraMenu+0x100>)
 8001656:	f008 f98b 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 800165a:	482c      	ldr	r0, [pc, #176]	@ (800170c <LoraMenu+0x100>)
 800165c:	f7fe fe18 	bl	8000290 <strlen>
 8001660:	4603      	mov	r3, r0
 8001662:	b29a      	uxth	r2, r3
 8001664:	2364      	movs	r3, #100	@ 0x64
 8001666:	4929      	ldr	r1, [pc, #164]	@ (800170c <LoraMenu+0x100>)
 8001668:	4829      	ldr	r0, [pc, #164]	@ (8001710 <LoraMenu+0x104>)
 800166a:	f003 f9cf 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO SET CR VALUE WRITE : SETCR 4/5 \r\n");
 800166e:	492b      	ldr	r1, [pc, #172]	@ (800171c <LoraMenu+0x110>)
 8001670:	4826      	ldr	r0, [pc, #152]	@ (800170c <LoraMenu+0x100>)
 8001672:	f008 f97d 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001676:	4825      	ldr	r0, [pc, #148]	@ (800170c <LoraMenu+0x100>)
 8001678:	f7fe fe0a 	bl	8000290 <strlen>
 800167c:	4603      	mov	r3, r0
 800167e:	b29a      	uxth	r2, r3
 8001680:	2364      	movs	r3, #100	@ 0x64
 8001682:	4922      	ldr	r1, [pc, #136]	@ (800170c <LoraMenu+0x100>)
 8001684:	4822      	ldr	r0, [pc, #136]	@ (8001710 <LoraMenu+0x104>)
 8001686:	f003 f9c1 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO GET CR VALUE WRITE : GETCR\r\n");
 800168a:	4925      	ldr	r1, [pc, #148]	@ (8001720 <LoraMenu+0x114>)
 800168c:	481f      	ldr	r0, [pc, #124]	@ (800170c <LoraMenu+0x100>)
 800168e:	f008 f96f 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001692:	481e      	ldr	r0, [pc, #120]	@ (800170c <LoraMenu+0x100>)
 8001694:	f7fe fdfc 	bl	8000290 <strlen>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	2364      	movs	r3, #100	@ 0x64
 800169e:	491b      	ldr	r1, [pc, #108]	@ (800170c <LoraMenu+0x100>)
 80016a0:	481b      	ldr	r0, [pc, #108]	@ (8001710 <LoraMenu+0x104>)
 80016a2:	f003 f9b3 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO RESET TO THE PREVIOUS VALUE WRITE : RESET\r\n");
 80016a6:	491f      	ldr	r1, [pc, #124]	@ (8001724 <LoraMenu+0x118>)
 80016a8:	4818      	ldr	r0, [pc, #96]	@ (800170c <LoraMenu+0x100>)
 80016aa:	f008 f961 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 80016ae:	4817      	ldr	r0, [pc, #92]	@ (800170c <LoraMenu+0x100>)
 80016b0:	f7fe fdee 	bl	8000290 <strlen>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	2364      	movs	r3, #100	@ 0x64
 80016ba:	4914      	ldr	r1, [pc, #80]	@ (800170c <LoraMenu+0x100>)
 80016bc:	4814      	ldr	r0, [pc, #80]	@ (8001710 <LoraMenu+0x104>)
 80016be:	f003 f9a5 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO SAVE CHANGES WRITE : SAVE\r\n");
 80016c2:	4919      	ldr	r1, [pc, #100]	@ (8001728 <LoraMenu+0x11c>)
 80016c4:	4811      	ldr	r0, [pc, #68]	@ (800170c <LoraMenu+0x100>)
 80016c6:	f008 f953 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 80016ca:	4810      	ldr	r0, [pc, #64]	@ (800170c <LoraMenu+0x100>)
 80016cc:	f7fe fde0 	bl	8000290 <strlen>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	2364      	movs	r3, #100	@ 0x64
 80016d6:	490d      	ldr	r1, [pc, #52]	@ (800170c <LoraMenu+0x100>)
 80016d8:	480d      	ldr	r0, [pc, #52]	@ (8001710 <LoraMenu+0x104>)
 80016da:	f003 f997 	bl	8004a0c <HAL_UART_Transmit>
	sprintf((char*)txBuffer, "TO GO BACK TO THE PREVIOUS MENU WRITE : .. \r\n");
 80016de:	4913      	ldr	r1, [pc, #76]	@ (800172c <LoraMenu+0x120>)
 80016e0:	480a      	ldr	r0, [pc, #40]	@ (800170c <LoraMenu+0x100>)
 80016e2:	f008 f945 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 80016e6:	4809      	ldr	r0, [pc, #36]	@ (800170c <LoraMenu+0x100>)
 80016e8:	f7fe fdd2 	bl	8000290 <strlen>
 80016ec:	4603      	mov	r3, r0
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	2364      	movs	r3, #100	@ 0x64
 80016f2:	4906      	ldr	r1, [pc, #24]	@ (800170c <LoraMenu+0x100>)
 80016f4:	4806      	ldr	r0, [pc, #24]	@ (8001710 <LoraMenu+0x104>)
 80016f6:	f003 f989 	bl	8004a0c <HAL_UART_Transmit>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200008dc 	.word	0x200008dc
 8001708:	0800c964 	.word	0x0800c964
 800170c:	20000774 	.word	0x20000774
 8001710:	20000930 	.word	0x20000930
 8001714:	0800c9b0 	.word	0x0800c9b0
 8001718:	0800c9d0 	.word	0x0800c9d0
 800171c:	0800c9f0 	.word	0x0800c9f0
 8001720:	0800ca18 	.word	0x0800ca18
 8001724:	0800ca38 	.word	0x0800ca38
 8001728:	0800c7d4 	.word	0x0800c7d4
 800172c:	0800ca68 	.word	0x0800ca68

08001730 <SetSF_f>:
void SetSF_f(char* arg){
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	uint8_t MAX_TH_SF=12;
 8001738:	230c      	movs	r3, #12
 800173a:	73bb      	strb	r3, [r7, #14]
	uint8_t MIN_TH_SF=6;
 800173c:	2306      	movs	r3, #6
 800173e:	737b      	strb	r3, [r7, #13]
	uint8_t success = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]

	if (tokens[1] != NULL && strlen(tokens[1]) < 3) {
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <SetSF_f+0x90>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d026      	beq.n	800179a <SetSF_f+0x6a>
 800174c:	4b1c      	ldr	r3, [pc, #112]	@ (80017c0 <SetSF_f+0x90>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fd9d 	bl	8000290 <strlen>
 8001756:	4603      	mov	r3, r0
 8001758:	2b02      	cmp	r3, #2
 800175a:	d81e      	bhi.n	800179a <SetSF_f+0x6a>
		int sf_new_value = atoi(tokens[1]);
 800175c:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <SetSF_f+0x90>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	f006 fd54 	bl	800820e <atoi>
 8001766:	60b8      	str	r0, [r7, #8]

		if (sf_new_value >= MIN_TH_SF && sf_new_value <= MAX_TH_SF) {
 8001768:	7b7b      	ldrb	r3, [r7, #13]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	429a      	cmp	r2, r3
 800176e:	db14      	blt.n	800179a <SetSF_f+0x6a>
 8001770:	7bbb      	ldrb	r3, [r7, #14]
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	429a      	cmp	r2, r3
 8001776:	dc10      	bgt.n	800179a <SetSF_f+0x6a>
			sprintf((char*)cmd_buff, "SF VALUE SET TO %d SUCCESSFULLY\r\n", sf_new_value);
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	4912      	ldr	r1, [pc, #72]	@ (80017c4 <SetSF_f+0x94>)
 800177c:	4812      	ldr	r0, [pc, #72]	@ (80017c8 <SetSF_f+0x98>)
 800177e:	f008 f8f7 	bl	8009970 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001782:	4811      	ldr	r0, [pc, #68]	@ (80017c8 <SetSF_f+0x98>)
 8001784:	f7fe fd84 	bl	8000290 <strlen>
 8001788:	4603      	mov	r3, r0
 800178a:	b29a      	uxth	r2, r3
 800178c:	2364      	movs	r3, #100	@ 0x64
 800178e:	490e      	ldr	r1, [pc, #56]	@ (80017c8 <SetSF_f+0x98>)
 8001790:	480e      	ldr	r0, [pc, #56]	@ (80017cc <SetSF_f+0x9c>)
 8001792:	f003 f93b 	bl	8004a0c <HAL_UART_Transmit>
			success = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (success==0) {
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <SetSF_f+0x7c>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 80017a0:	2364      	movs	r3, #100	@ 0x64
 80017a2:	2210      	movs	r2, #16
 80017a4:	490a      	ldr	r1, [pc, #40]	@ (80017d0 <SetSF_f+0xa0>)
 80017a6:	4809      	ldr	r0, [pc, #36]	@ (80017cc <SetSF_f+0x9c>)
 80017a8:	f003 f930 	bl	8004a0c <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));  // always clear at the end
 80017ac:	223c      	movs	r2, #60	@ 0x3c
 80017ae:	2100      	movs	r1, #0
 80017b0:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <SetSF_f+0x98>)
 80017b2:	f008 f942 	bl	8009a3a <memset>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000844 	.word	0x20000844
 80017c4:	0800ca98 	.word	0x0800ca98
 80017c8:	20000870 	.word	0x20000870
 80017cc:	20000930 	.word	0x20000930
 80017d0:	0800cabc 	.word	0x0800cabc

080017d4 <SaveSF_f>:
void SaveSF_f(char* arg){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	SF_Value=sf_new_value;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <SaveSF_f+0x44>)
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <SaveSF_f+0x48>)
 80017e2:	701a      	strb	r2, [r3, #0]
	sprintf((char*)cmd_buff, "CR VALUE SAVED PERMANENTLY TO %d SUCCESSFULLY\r\n", SF_Value);
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <SaveSF_f+0x48>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	490d      	ldr	r1, [pc, #52]	@ (8001820 <SaveSF_f+0x4c>)
 80017ec:	480d      	ldr	r0, [pc, #52]	@ (8001824 <SaveSF_f+0x50>)
 80017ee:	f008 f8bf 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80017f2:	480c      	ldr	r0, [pc, #48]	@ (8001824 <SaveSF_f+0x50>)
 80017f4:	f7fe fd4c 	bl	8000290 <strlen>
 80017f8:	4603      	mov	r3, r0
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	2364      	movs	r3, #100	@ 0x64
 80017fe:	4909      	ldr	r1, [pc, #36]	@ (8001824 <SaveSF_f+0x50>)
 8001800:	4809      	ldr	r0, [pc, #36]	@ (8001828 <SaveSF_f+0x54>)
 8001802:	f003 f903 	bl	8004a0c <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001806:	223c      	movs	r2, #60	@ 0x3c
 8001808:	2100      	movs	r1, #0
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <SaveSF_f+0x50>)
 800180c:	f008 f915 	bl	8009a3a <memset>


}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2000086d 	.word	0x2000086d
 800181c:	2000086c 	.word	0x2000086c
 8001820:	0800cacc 	.word	0x0800cacc
 8001824:	20000870 	.word	0x20000870
 8001828:	20000930 	.word	0x20000930

0800182c <GetSF_f>:
void GetSF_f(char* arg)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"SF VALUE IS %d \r\n",SF_Value);
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <GetSF_f+0x3c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	490c      	ldr	r1, [pc, #48]	@ (800186c <GetSF_f+0x40>)
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <GetSF_f+0x44>)
 800183e:	f008 f897 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001842:	480b      	ldr	r0, [pc, #44]	@ (8001870 <GetSF_f+0x44>)
 8001844:	f7fe fd24 	bl	8000290 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	2364      	movs	r3, #100	@ 0x64
 800184e:	4908      	ldr	r1, [pc, #32]	@ (8001870 <GetSF_f+0x44>)
 8001850:	4808      	ldr	r0, [pc, #32]	@ (8001874 <GetSF_f+0x48>)
 8001852:	f003 f8db 	bl	8004a0c <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001856:	223c      	movs	r2, #60	@ 0x3c
 8001858:	2100      	movs	r1, #0
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <GetSF_f+0x44>)
 800185c:	f008 f8ed 	bl	8009a3a <memset>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2000086c 	.word	0x2000086c
 800186c:	0800cafc 	.word	0x0800cafc
 8001870:	20000870 	.word	0x20000870
 8001874:	20000930 	.word	0x20000930

08001878 <SetCR_f>:
void SetCR_f(char* arg)
{   uint8_t cr_flag=0;
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	2300      	movs	r3, #0
 8001882:	77fb      	strb	r3, [r7, #31]
char* CR_Values[]={"4/5","4/6","4/7","4/8"};
 8001884:	4b25      	ldr	r3, [pc, #148]	@ (800191c <SetCR_f+0xa4>)
 8001886:	f107 040c 	add.w	r4, r7, #12
 800188a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800188c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
for (uint8_t cr=0 ; cr<sizeof(CR_Values) / sizeof(CR_Values[0]);cr++)
 8001890:	2300      	movs	r3, #0
 8001892:	77bb      	strb	r3, [r7, #30]
 8001894:	e032      	b.n	80018fc <SetCR_f+0x84>
{if (tokens[1]!=NULL &&
 8001896:	4b22      	ldr	r3, [pc, #136]	@ (8001920 <SetCR_f+0xa8>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d02b      	beq.n	80018f6 <SetCR_f+0x7e>
		strcmp(tokens[1],CR_Values[cr])==0)
 800189e:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <SetCR_f+0xa8>)
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	7fbb      	ldrb	r3, [r7, #30]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	3320      	adds	r3, #32
 80018a8:	443b      	add	r3, r7
 80018aa:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f7fe fc8d 	bl	80001d0 <strcmp>
 80018b6:	4603      	mov	r3, r0
{if (tokens[1]!=NULL &&
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d11c      	bne.n	80018f6 <SetCR_f+0x7e>
{strcpy(Cr_new_value,tokens[1]);
 80018bc:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <SetCR_f+0xa8>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4619      	mov	r1, r3
 80018c2:	4818      	ldr	r0, [pc, #96]	@ (8001924 <SetCR_f+0xac>)
 80018c4:	f008 fa05 	bl	8009cd2 <strcpy>
cr_flag=1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	77fb      	strb	r3, [r7, #31]
sprintf((char*)cmd_buff, "CR VALUE SET TO %s SUCCESSFULLY\r\n", Cr_new_value);
 80018cc:	4a15      	ldr	r2, [pc, #84]	@ (8001924 <SetCR_f+0xac>)
 80018ce:	4916      	ldr	r1, [pc, #88]	@ (8001928 <SetCR_f+0xb0>)
 80018d0:	4816      	ldr	r0, [pc, #88]	@ (800192c <SetCR_f+0xb4>)
 80018d2:	f008 f84d 	bl	8009970 <siprintf>
HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80018d6:	4815      	ldr	r0, [pc, #84]	@ (800192c <SetCR_f+0xb4>)
 80018d8:	f7fe fcda 	bl	8000290 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	2364      	movs	r3, #100	@ 0x64
 80018e2:	4912      	ldr	r1, [pc, #72]	@ (800192c <SetCR_f+0xb4>)
 80018e4:	4812      	ldr	r0, [pc, #72]	@ (8001930 <SetCR_f+0xb8>)
 80018e6:	f003 f891 	bl	8004a0c <HAL_UART_Transmit>
memset(cmd_buff,0,sizeof(cmd_buff));
 80018ea:	223c      	movs	r2, #60	@ 0x3c
 80018ec:	2100      	movs	r1, #0
 80018ee:	480f      	ldr	r0, [pc, #60]	@ (800192c <SetCR_f+0xb4>)
 80018f0:	f008 f8a3 	bl	8009a3a <memset>
break;
 80018f4:	e005      	b.n	8001902 <SetCR_f+0x8a>
for (uint8_t cr=0 ; cr<sizeof(CR_Values) / sizeof(CR_Values[0]);cr++)
 80018f6:	7fbb      	ldrb	r3, [r7, #30]
 80018f8:	3301      	adds	r3, #1
 80018fa:	77bb      	strb	r3, [r7, #30]
 80018fc:	7fbb      	ldrb	r3, [r7, #30]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d9c9      	bls.n	8001896 <SetCR_f+0x1e>
}
}

if (cr_flag==0)
 8001902:	7ffb      	ldrb	r3, [r7, #31]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <SetCR_f+0x9c>
	HAL_UART_Transmit(&huart2,(const uint8_t*)"WRONG CR VALUE\r\n",strlen("WRONG CR VALUE\r\n"), 100);
 8001908:	2364      	movs	r3, #100	@ 0x64
 800190a:	2210      	movs	r2, #16
 800190c:	4909      	ldr	r1, [pc, #36]	@ (8001934 <SetCR_f+0xbc>)
 800190e:	4808      	ldr	r0, [pc, #32]	@ (8001930 <SetCR_f+0xb8>)
 8001910:	f003 f87c 	bl	8004a0c <HAL_UART_Transmit>
}
 8001914:	bf00      	nop
 8001916:	3724      	adds	r7, #36	@ 0x24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	0800cb58 	.word	0x0800cb58
 8001920:	20000844 	.word	0x20000844
 8001924:	200008ac 	.word	0x200008ac
 8001928:	0800cb10 	.word	0x0800cb10
 800192c:	20000870 	.word	0x20000870
 8001930:	20000930 	.word	0x20000930
 8001934:	0800cb34 	.word	0x0800cb34

08001938 <SaveCR_f>:
void SaveCR_f(char* arg)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	strcpy(Cr_Value,Cr_new_value);
 8001940:	490d      	ldr	r1, [pc, #52]	@ (8001978 <SaveCR_f+0x40>)
 8001942:	480e      	ldr	r0, [pc, #56]	@ (800197c <SaveCR_f+0x44>)
 8001944:	f008 f9c5 	bl	8009cd2 <strcpy>
	sprintf((char*)cmd_buff, "CR VALUE SAVED PERMANENTLY TO %s SUCCESSFULLY\r\n", Cr_Value);
 8001948:	4a0c      	ldr	r2, [pc, #48]	@ (800197c <SaveCR_f+0x44>)
 800194a:	490d      	ldr	r1, [pc, #52]	@ (8001980 <SaveCR_f+0x48>)
 800194c:	480d      	ldr	r0, [pc, #52]	@ (8001984 <SaveCR_f+0x4c>)
 800194e:	f008 f80f 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001952:	480c      	ldr	r0, [pc, #48]	@ (8001984 <SaveCR_f+0x4c>)
 8001954:	f7fe fc9c 	bl	8000290 <strlen>
 8001958:	4603      	mov	r3, r0
 800195a:	b29a      	uxth	r2, r3
 800195c:	2364      	movs	r3, #100	@ 0x64
 800195e:	4909      	ldr	r1, [pc, #36]	@ (8001984 <SaveCR_f+0x4c>)
 8001960:	4809      	ldr	r0, [pc, #36]	@ (8001988 <SaveCR_f+0x50>)
 8001962:	f003 f853 	bl	8004a0c <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001966:	223c      	movs	r2, #60	@ 0x3c
 8001968:	2100      	movs	r1, #0
 800196a:	4806      	ldr	r0, [pc, #24]	@ (8001984 <SaveCR_f+0x4c>)
 800196c:	f008 f865 	bl	8009a3a <memset>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200008ac 	.word	0x200008ac
 800197c:	200008b4 	.word	0x200008b4
 8001980:	0800cb68 	.word	0x0800cb68
 8001984:	20000870 	.word	0x20000870
 8001988:	20000930 	.word	0x20000930

0800198c <GetCR_f>:
void GetCR_f(char* arg)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	strcpy(Cr_Value,Cr_new_value);
 8001994:	490d      	ldr	r1, [pc, #52]	@ (80019cc <GetCR_f+0x40>)
 8001996:	480e      	ldr	r0, [pc, #56]	@ (80019d0 <GetCR_f+0x44>)
 8001998:	f008 f99b 	bl	8009cd2 <strcpy>
	sprintf((char*)cmd_buff,"CR VALUE IS %s \r\n",Cr_Value);
 800199c:	4a0c      	ldr	r2, [pc, #48]	@ (80019d0 <GetCR_f+0x44>)
 800199e:	490d      	ldr	r1, [pc, #52]	@ (80019d4 <GetCR_f+0x48>)
 80019a0:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <GetCR_f+0x4c>)
 80019a2:	f007 ffe5 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 80019a6:	480c      	ldr	r0, [pc, #48]	@ (80019d8 <GetCR_f+0x4c>)
 80019a8:	f7fe fc72 	bl	8000290 <strlen>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	2364      	movs	r3, #100	@ 0x64
 80019b2:	4909      	ldr	r1, [pc, #36]	@ (80019d8 <GetCR_f+0x4c>)
 80019b4:	4809      	ldr	r0, [pc, #36]	@ (80019dc <GetCR_f+0x50>)
 80019b6:	f003 f829 	bl	8004a0c <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80019ba:	223c      	movs	r2, #60	@ 0x3c
 80019bc:	2100      	movs	r1, #0
 80019be:	4806      	ldr	r0, [pc, #24]	@ (80019d8 <GetCR_f+0x4c>)
 80019c0:	f008 f83b 	bl	8009a3a <memset>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200008ac 	.word	0x200008ac
 80019d0:	200008b4 	.word	0x200008b4
 80019d4:	0800cb98 	.word	0x0800cb98
 80019d8:	20000870 	.word	0x20000870
 80019dc:	20000930 	.word	0x20000930

080019e0 <SetBW_f>:
void SetBW_f(char* arg)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	uint8_t bw_flag=0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	75fb      	strb	r3, [r7, #23]
	char* BW_Values[]={"125","250","500"};
 80019ec:	4a25      	ldr	r2, [pc, #148]	@ (8001a84 <SetBW_f+0xa4>)
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint8_t bw=0 ; bw<sizeof(BW_Values) / sizeof(BW_Values[0]);bw++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	75bb      	strb	r3, [r7, #22]
 80019fc:	e032      	b.n	8001a64 <SetBW_f+0x84>
	{if (tokens[1]!=NULL &&
 80019fe:	4b22      	ldr	r3, [pc, #136]	@ (8001a88 <SetBW_f+0xa8>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d02b      	beq.n	8001a5e <SetBW_f+0x7e>
			strcmp(tokens[1],BW_Values[bw])==0)
 8001a06:	4b20      	ldr	r3, [pc, #128]	@ (8001a88 <SetBW_f+0xa8>)
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	7dbb      	ldrb	r3, [r7, #22]
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	3318      	adds	r3, #24
 8001a10:	443b      	add	r3, r7
 8001a12:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001a16:	4619      	mov	r1, r3
 8001a18:	4610      	mov	r0, r2
 8001a1a:	f7fe fbd9 	bl	80001d0 <strcmp>
 8001a1e:	4603      	mov	r3, r0
	{if (tokens[1]!=NULL &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d11c      	bne.n	8001a5e <SetBW_f+0x7e>
	{strcpy(bw_new_value,tokens[1]);
 8001a24:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <SetBW_f+0xa8>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4818      	ldr	r0, [pc, #96]	@ (8001a8c <SetBW_f+0xac>)
 8001a2c:	f008 f951 	bl	8009cd2 <strcpy>
	bw_flag=1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	75fb      	strb	r3, [r7, #23]
	sprintf((char*)cmd_buff, "BW VALUE SET TO %s SUCCESSFULLY\r\n", bw_new_value);
 8001a34:	4a15      	ldr	r2, [pc, #84]	@ (8001a8c <SetBW_f+0xac>)
 8001a36:	4916      	ldr	r1, [pc, #88]	@ (8001a90 <SetBW_f+0xb0>)
 8001a38:	4816      	ldr	r0, [pc, #88]	@ (8001a94 <SetBW_f+0xb4>)
 8001a3a:	f007 ff99 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001a3e:	4815      	ldr	r0, [pc, #84]	@ (8001a94 <SetBW_f+0xb4>)
 8001a40:	f7fe fc26 	bl	8000290 <strlen>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	2364      	movs	r3, #100	@ 0x64
 8001a4a:	4912      	ldr	r1, [pc, #72]	@ (8001a94 <SetBW_f+0xb4>)
 8001a4c:	4812      	ldr	r0, [pc, #72]	@ (8001a98 <SetBW_f+0xb8>)
 8001a4e:	f002 ffdd 	bl	8004a0c <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001a52:	223c      	movs	r2, #60	@ 0x3c
 8001a54:	2100      	movs	r1, #0
 8001a56:	480f      	ldr	r0, [pc, #60]	@ (8001a94 <SetBW_f+0xb4>)
 8001a58:	f007 ffef 	bl	8009a3a <memset>
	break;
 8001a5c:	e005      	b.n	8001a6a <SetBW_f+0x8a>
	for (uint8_t bw=0 ; bw<sizeof(BW_Values) / sizeof(BW_Values[0]);bw++)
 8001a5e:	7dbb      	ldrb	r3, [r7, #22]
 8001a60:	3301      	adds	r3, #1
 8001a62:	75bb      	strb	r3, [r7, #22]
 8001a64:	7dbb      	ldrb	r3, [r7, #22]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d9c9      	bls.n	80019fe <SetBW_f+0x1e>
	}
	}

	if (bw_flag==0)
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <SetBW_f+0x9c>
		HAL_UART_Transmit(&huart2,(const uint8_t*)"WRONG BW VALUE\r\n",strlen("WRONG CR VALUE\r\n"), 100);
 8001a70:	2364      	movs	r3, #100	@ 0x64
 8001a72:	2210      	movs	r2, #16
 8001a74:	4909      	ldr	r1, [pc, #36]	@ (8001a9c <SetBW_f+0xbc>)
 8001a76:	4808      	ldr	r0, [pc, #32]	@ (8001a98 <SetBW_f+0xb8>)
 8001a78:	f002 ffc8 	bl	8004a0c <HAL_UART_Transmit>
}
 8001a7c:	bf00      	nop
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	0800cbf0 	.word	0x0800cbf0
 8001a88:	20000844 	.word	0x20000844
 8001a8c:	200008bc 	.word	0x200008bc
 8001a90:	0800cbac 	.word	0x0800cbac
 8001a94:	20000870 	.word	0x20000870
 8001a98:	20000930 	.word	0x20000930
 8001a9c:	0800cbd0 	.word	0x0800cbd0

08001aa0 <GetBW_f>:
void GetBW_f(char* arg)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	strcpy(Bandwidth_Value,bw_new_value);
 8001aa8:	490d      	ldr	r1, [pc, #52]	@ (8001ae0 <GetBW_f+0x40>)
 8001aaa:	480e      	ldr	r0, [pc, #56]	@ (8001ae4 <GetBW_f+0x44>)
 8001aac:	f008 f911 	bl	8009cd2 <strcpy>
	sprintf((char*)cmd_buff,"BW VALUE IS %s \r\n",Bandwidth_Value);
 8001ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae4 <GetBW_f+0x44>)
 8001ab2:	490d      	ldr	r1, [pc, #52]	@ (8001ae8 <GetBW_f+0x48>)
 8001ab4:	480d      	ldr	r0, [pc, #52]	@ (8001aec <GetBW_f+0x4c>)
 8001ab6:	f007 ff5b 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001aba:	480c      	ldr	r0, [pc, #48]	@ (8001aec <GetBW_f+0x4c>)
 8001abc:	f7fe fbe8 	bl	8000290 <strlen>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	2364      	movs	r3, #100	@ 0x64
 8001ac6:	4909      	ldr	r1, [pc, #36]	@ (8001aec <GetBW_f+0x4c>)
 8001ac8:	4809      	ldr	r0, [pc, #36]	@ (8001af0 <GetBW_f+0x50>)
 8001aca:	f002 ff9f 	bl	8004a0c <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001ace:	223c      	movs	r2, #60	@ 0x3c
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4806      	ldr	r0, [pc, #24]	@ (8001aec <GetBW_f+0x4c>)
 8001ad4:	f007 ffb1 	bl	8009a3a <memset>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200008bc 	.word	0x200008bc
 8001ae4:	200008c8 	.word	0x200008c8
 8001ae8:	0800cbfc 	.word	0x0800cbfc
 8001aec:	20000870 	.word	0x20000870
 8001af0:	20000930 	.word	0x20000930

08001af4 <GPSMenu>:
//GPS Menu
void GPSMenu(char* arg){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	currentMenu=GPS_Menu;
 8001afc:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb4 <GPSMenu+0xc0>)
 8001afe:	2202      	movs	r2, #2
 8001b00:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"------------------ GPS MENU -----------------\r\n");
 8001b02:	492d      	ldr	r1, [pc, #180]	@ (8001bb8 <GPSMenu+0xc4>)
 8001b04:	482d      	ldr	r0, [pc, #180]	@ (8001bbc <GPSMenu+0xc8>)
 8001b06:	f007 ff33 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001b0a:	482c      	ldr	r0, [pc, #176]	@ (8001bbc <GPSMenu+0xc8>)
 8001b0c:	f7fe fbc0 	bl	8000290 <strlen>
 8001b10:	4603      	mov	r3, r0
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	2364      	movs	r3, #100	@ 0x64
 8001b16:	4929      	ldr	r1, [pc, #164]	@ (8001bbc <GPSMenu+0xc8>)
 8001b18:	4829      	ldr	r0, [pc, #164]	@ (8001bc0 <GPSMenu+0xcc>)
 8001b1a:	f002 ff77 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO SET VALUE WRITE : SETSF 5 \r\n");
 8001b1e:	4929      	ldr	r1, [pc, #164]	@ (8001bc4 <GPSMenu+0xd0>)
 8001b20:	4826      	ldr	r0, [pc, #152]	@ (8001bbc <GPSMenu+0xc8>)
 8001b22:	f007 ff25 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001b26:	4825      	ldr	r0, [pc, #148]	@ (8001bbc <GPSMenu+0xc8>)
 8001b28:	f7fe fbb2 	bl	8000290 <strlen>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	2364      	movs	r3, #100	@ 0x64
 8001b32:	4922      	ldr	r1, [pc, #136]	@ (8001bbc <GPSMenu+0xc8>)
 8001b34:	4822      	ldr	r0, [pc, #136]	@ (8001bc0 <GPSMenu+0xcc>)
 8001b36:	f002 ff69 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO GET SF VALUE WRITE : GETSF\r\n");
 8001b3a:	4923      	ldr	r1, [pc, #140]	@ (8001bc8 <GPSMenu+0xd4>)
 8001b3c:	481f      	ldr	r0, [pc, #124]	@ (8001bbc <GPSMenu+0xc8>)
 8001b3e:	f007 ff17 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001b42:	481e      	ldr	r0, [pc, #120]	@ (8001bbc <GPSMenu+0xc8>)
 8001b44:	f7fe fba4 	bl	8000290 <strlen>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	2364      	movs	r3, #100	@ 0x64
 8001b4e:	491b      	ldr	r1, [pc, #108]	@ (8001bbc <GPSMenu+0xc8>)
 8001b50:	481b      	ldr	r0, [pc, #108]	@ (8001bc0 <GPSMenu+0xcc>)
 8001b52:	f002 ff5b 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO SET CR VALUE WRITE : SETCR 4/5 \r\n");
 8001b56:	491d      	ldr	r1, [pc, #116]	@ (8001bcc <GPSMenu+0xd8>)
 8001b58:	4818      	ldr	r0, [pc, #96]	@ (8001bbc <GPSMenu+0xc8>)
 8001b5a:	f007 ff09 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001b5e:	4817      	ldr	r0, [pc, #92]	@ (8001bbc <GPSMenu+0xc8>)
 8001b60:	f7fe fb96 	bl	8000290 <strlen>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	2364      	movs	r3, #100	@ 0x64
 8001b6a:	4914      	ldr	r1, [pc, #80]	@ (8001bbc <GPSMenu+0xc8>)
 8001b6c:	4814      	ldr	r0, [pc, #80]	@ (8001bc0 <GPSMenu+0xcc>)
 8001b6e:	f002 ff4d 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO GET CR VALUE WRITE : GETCR\r\n");
 8001b72:	4917      	ldr	r1, [pc, #92]	@ (8001bd0 <GPSMenu+0xdc>)
 8001b74:	4811      	ldr	r0, [pc, #68]	@ (8001bbc <GPSMenu+0xc8>)
 8001b76:	f007 fefb 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001b7a:	4810      	ldr	r0, [pc, #64]	@ (8001bbc <GPSMenu+0xc8>)
 8001b7c:	f7fe fb88 	bl	8000290 <strlen>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	2364      	movs	r3, #100	@ 0x64
 8001b86:	490d      	ldr	r1, [pc, #52]	@ (8001bbc <GPSMenu+0xc8>)
 8001b88:	480d      	ldr	r0, [pc, #52]	@ (8001bc0 <GPSMenu+0xcc>)
 8001b8a:	f002 ff3f 	bl	8004a0c <HAL_UART_Transmit>
	sprintf((char*)txBuffer, "TO GO BACK TO THE PREVIOUS MENU WRITE : .. \r\n");
 8001b8e:	4911      	ldr	r1, [pc, #68]	@ (8001bd4 <GPSMenu+0xe0>)
 8001b90:	480a      	ldr	r0, [pc, #40]	@ (8001bbc <GPSMenu+0xc8>)
 8001b92:	f007 feed 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001b96:	4809      	ldr	r0, [pc, #36]	@ (8001bbc <GPSMenu+0xc8>)
 8001b98:	f7fe fb7a 	bl	8000290 <strlen>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	2364      	movs	r3, #100	@ 0x64
 8001ba2:	4906      	ldr	r1, [pc, #24]	@ (8001bbc <GPSMenu+0xc8>)
 8001ba4:	4806      	ldr	r0, [pc, #24]	@ (8001bc0 <GPSMenu+0xcc>)
 8001ba6:	f002 ff31 	bl	8004a0c <HAL_UART_Transmit>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200008dc 	.word	0x200008dc
 8001bb8:	0800cc10 	.word	0x0800cc10
 8001bbc:	20000774 	.word	0x20000774
 8001bc0:	20000930 	.word	0x20000930
 8001bc4:	0800c9b0 	.word	0x0800c9b0
 8001bc8:	0800c9d0 	.word	0x0800c9d0
 8001bcc:	0800c9f0 	.word	0x0800c9f0
 8001bd0:	0800ca18 	.word	0x0800ca18
 8001bd4:	0800ca68 	.word	0x0800ca68

08001bd8 <SetAltGPS_f>:
void SetAltGPS_f(char* arg){
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	;
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <GetAltGPS_f>:
void GetAltGPS_f(char* arg){
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	;
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <SetLatGPS_f>:
void SetLatGPS_f(char* arg){
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	;
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <GetLatGPS_f>:
void GetLatGPS_f(char* arg){
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	;
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <SetTimeGPS_f>:
void SetTimeGPS_f(char* arg){
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	;
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <GetTimeGPS_f>:
void GetTimeGPS_f(char* arg){
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	;
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SensorsMenu>:

void SensorsMenu(char* arg){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	currentMenu=Sensors_Menu;
 8001c58:	4b49      	ldr	r3, [pc, #292]	@ (8001d80 <SensorsMenu+0x130>)
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"------------------ SENSORS MENU -----------------\r\n");
 8001c5e:	4949      	ldr	r1, [pc, #292]	@ (8001d84 <SensorsMenu+0x134>)
 8001c60:	4849      	ldr	r0, [pc, #292]	@ (8001d88 <SensorsMenu+0x138>)
 8001c62:	f007 fe85 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001c66:	4848      	ldr	r0, [pc, #288]	@ (8001d88 <SensorsMenu+0x138>)
 8001c68:	f7fe fb12 	bl	8000290 <strlen>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	2364      	movs	r3, #100	@ 0x64
 8001c72:	4945      	ldr	r1, [pc, #276]	@ (8001d88 <SensorsMenu+0x138>)
 8001c74:	4845      	ldr	r0, [pc, #276]	@ (8001d8c <SensorsMenu+0x13c>)
 8001c76:	f002 fec9 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO SET SOIL TEMPERATURE VALUE WRITE : SETST 26 \r\n");
 8001c7a:	4945      	ldr	r1, [pc, #276]	@ (8001d90 <SensorsMenu+0x140>)
 8001c7c:	4842      	ldr	r0, [pc, #264]	@ (8001d88 <SensorsMenu+0x138>)
 8001c7e:	f007 fe77 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001c82:	4841      	ldr	r0, [pc, #260]	@ (8001d88 <SensorsMenu+0x138>)
 8001c84:	f7fe fb04 	bl	8000290 <strlen>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	2364      	movs	r3, #100	@ 0x64
 8001c8e:	493e      	ldr	r1, [pc, #248]	@ (8001d88 <SensorsMenu+0x138>)
 8001c90:	483e      	ldr	r0, [pc, #248]	@ (8001d8c <SensorsMenu+0x13c>)
 8001c92:	f002 febb 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO GET SOIL TEMPERATURE VALUE WRITE : GETST \r\n");
 8001c96:	493f      	ldr	r1, [pc, #252]	@ (8001d94 <SensorsMenu+0x144>)
 8001c98:	483b      	ldr	r0, [pc, #236]	@ (8001d88 <SensorsMenu+0x138>)
 8001c9a:	f007 fe69 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001c9e:	483a      	ldr	r0, [pc, #232]	@ (8001d88 <SensorsMenu+0x138>)
 8001ca0:	f7fe faf6 	bl	8000290 <strlen>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	2364      	movs	r3, #100	@ 0x64
 8001caa:	4937      	ldr	r1, [pc, #220]	@ (8001d88 <SensorsMenu+0x138>)
 8001cac:	4837      	ldr	r0, [pc, #220]	@ (8001d8c <SensorsMenu+0x13c>)
 8001cae:	f002 fead 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO SET AIR TEMPERATURE VALUE WRITE : SETAT 27.5 \r\n");
 8001cb2:	4939      	ldr	r1, [pc, #228]	@ (8001d98 <SensorsMenu+0x148>)
 8001cb4:	4834      	ldr	r0, [pc, #208]	@ (8001d88 <SensorsMenu+0x138>)
 8001cb6:	f007 fe5b 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001cba:	4833      	ldr	r0, [pc, #204]	@ (8001d88 <SensorsMenu+0x138>)
 8001cbc:	f7fe fae8 	bl	8000290 <strlen>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	2364      	movs	r3, #100	@ 0x64
 8001cc6:	4930      	ldr	r1, [pc, #192]	@ (8001d88 <SensorsMenu+0x138>)
 8001cc8:	4830      	ldr	r0, [pc, #192]	@ (8001d8c <SensorsMenu+0x13c>)
 8001cca:	f002 fe9f 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO GET AIR TEMPERATURE VALUE WRITE : GETAT \r\n");
 8001cce:	4933      	ldr	r1, [pc, #204]	@ (8001d9c <SensorsMenu+0x14c>)
 8001cd0:	482d      	ldr	r0, [pc, #180]	@ (8001d88 <SensorsMenu+0x138>)
 8001cd2:	f007 fe4d 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001cd6:	482c      	ldr	r0, [pc, #176]	@ (8001d88 <SensorsMenu+0x138>)
 8001cd8:	f7fe fada 	bl	8000290 <strlen>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	2364      	movs	r3, #100	@ 0x64
 8001ce2:	4929      	ldr	r1, [pc, #164]	@ (8001d88 <SensorsMenu+0x138>)
 8001ce4:	4829      	ldr	r0, [pc, #164]	@ (8001d8c <SensorsMenu+0x13c>)
 8001ce6:	f002 fe91 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO SET RELATIVE HUMIDITY VALUE WRITE : SETRH 100\r\n");
 8001cea:	492d      	ldr	r1, [pc, #180]	@ (8001da0 <SensorsMenu+0x150>)
 8001cec:	4826      	ldr	r0, [pc, #152]	@ (8001d88 <SensorsMenu+0x138>)
 8001cee:	f007 fe3f 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001cf2:	4825      	ldr	r0, [pc, #148]	@ (8001d88 <SensorsMenu+0x138>)
 8001cf4:	f7fe facc 	bl	8000290 <strlen>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	2364      	movs	r3, #100	@ 0x64
 8001cfe:	4922      	ldr	r1, [pc, #136]	@ (8001d88 <SensorsMenu+0x138>)
 8001d00:	4822      	ldr	r0, [pc, #136]	@ (8001d8c <SensorsMenu+0x13c>)
 8001d02:	f002 fe83 	bl	8004a0c <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "TO GET RELATIVE HUMIDITY VALUE WRITE : GETRH \r\n");
 8001d06:	4927      	ldr	r1, [pc, #156]	@ (8001da4 <SensorsMenu+0x154>)
 8001d08:	481f      	ldr	r0, [pc, #124]	@ (8001d88 <SensorsMenu+0x138>)
 8001d0a:	f007 fe31 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001d0e:	481e      	ldr	r0, [pc, #120]	@ (8001d88 <SensorsMenu+0x138>)
 8001d10:	f7fe fabe 	bl	8000290 <strlen>
 8001d14:	4603      	mov	r3, r0
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	2364      	movs	r3, #100	@ 0x64
 8001d1a:	491b      	ldr	r1, [pc, #108]	@ (8001d88 <SensorsMenu+0x138>)
 8001d1c:	481b      	ldr	r0, [pc, #108]	@ (8001d8c <SensorsMenu+0x13c>)
 8001d1e:	f002 fe75 	bl	8004a0c <HAL_UART_Transmit>
	sprintf((char*)txBuffer, "TO SET SOIL HUMIDITY VALUE WRITE : SETSH 100\r\n");
 8001d22:	4921      	ldr	r1, [pc, #132]	@ (8001da8 <SensorsMenu+0x158>)
 8001d24:	4818      	ldr	r0, [pc, #96]	@ (8001d88 <SensorsMenu+0x138>)
 8001d26:	f007 fe23 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001d2a:	4817      	ldr	r0, [pc, #92]	@ (8001d88 <SensorsMenu+0x138>)
 8001d2c:	f7fe fab0 	bl	8000290 <strlen>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	2364      	movs	r3, #100	@ 0x64
 8001d36:	4914      	ldr	r1, [pc, #80]	@ (8001d88 <SensorsMenu+0x138>)
 8001d38:	4814      	ldr	r0, [pc, #80]	@ (8001d8c <SensorsMenu+0x13c>)
 8001d3a:	f002 fe67 	bl	8004a0c <HAL_UART_Transmit>
	sprintf((char*)txBuffer, "TO GET SOIL HUMIDITY VALUE WRITE : GETSH \r\n");
 8001d3e:	491b      	ldr	r1, [pc, #108]	@ (8001dac <SensorsMenu+0x15c>)
 8001d40:	4811      	ldr	r0, [pc, #68]	@ (8001d88 <SensorsMenu+0x138>)
 8001d42:	f007 fe15 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001d46:	4810      	ldr	r0, [pc, #64]	@ (8001d88 <SensorsMenu+0x138>)
 8001d48:	f7fe faa2 	bl	8000290 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	2364      	movs	r3, #100	@ 0x64
 8001d52:	490d      	ldr	r1, [pc, #52]	@ (8001d88 <SensorsMenu+0x138>)
 8001d54:	480d      	ldr	r0, [pc, #52]	@ (8001d8c <SensorsMenu+0x13c>)
 8001d56:	f002 fe59 	bl	8004a0c <HAL_UART_Transmit>
	sprintf((char*)txBuffer, "TO GO BACK TO THE PREVIOUS MENU WRITE : .. \r\n");
 8001d5a:	4915      	ldr	r1, [pc, #84]	@ (8001db0 <SensorsMenu+0x160>)
 8001d5c:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <SensorsMenu+0x138>)
 8001d5e:	f007 fe07 	bl	8009970 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8001d62:	4809      	ldr	r0, [pc, #36]	@ (8001d88 <SensorsMenu+0x138>)
 8001d64:	f7fe fa94 	bl	8000290 <strlen>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	2364      	movs	r3, #100	@ 0x64
 8001d6e:	4906      	ldr	r1, [pc, #24]	@ (8001d88 <SensorsMenu+0x138>)
 8001d70:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <SensorsMenu+0x13c>)
 8001d72:	f002 fe4b 	bl	8004a0c <HAL_UART_Transmit>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200008dc 	.word	0x200008dc
 8001d84:	0800cc40 	.word	0x0800cc40
 8001d88:	20000774 	.word	0x20000774
 8001d8c:	20000930 	.word	0x20000930
 8001d90:	0800cc74 	.word	0x0800cc74
 8001d94:	0800cca8 	.word	0x0800cca8
 8001d98:	0800ccd8 	.word	0x0800ccd8
 8001d9c:	0800cd0c 	.word	0x0800cd0c
 8001da0:	0800cd3c 	.word	0x0800cd3c
 8001da4:	0800cd70 	.word	0x0800cd70
 8001da8:	0800cda0 	.word	0x0800cda0
 8001dac:	0800cdd0 	.word	0x0800cdd0
 8001db0:	0800ca68 	.word	0x0800ca68

08001db4 <SetSoilTemp_f>:

void SetSoilTemp_f(char* arg){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	uint8_t soiltemp = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8001dc0:	4b28      	ldr	r3, [pc, #160]	@ (8001e64 <SetSoilTemp_f+0xb0>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d03a      	beq.n	8001e3e <SetSoilTemp_f+0x8a>
 8001dc8:	4b26      	ldr	r3, [pc, #152]	@ (8001e64 <SetSoilTemp_f+0xb0>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fa5f 	bl	8000290 <strlen>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d832      	bhi.n	8001e3e <SetSoilTemp_f+0x8a>
		SoilTemp_New_Value = atof(tokens[1]);
 8001dd8:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <SetSoilTemp_f+0xb0>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f006 fa13 	bl	8008208 <atof>
 8001de2:	ec53 2b10 	vmov	r2, r3, d0
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f7fe ff0d 	bl	8000c08 <__aeabi_d2f>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e68 <SetSoilTemp_f+0xb4>)
 8001df2:	6013      	str	r3, [r2, #0]

		if (SoilTemp_New_Value >= MIN_SOIL_TEMP && sf_new_value <= MAX_SOIL_TEMP) {
 8001df4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <SetSoilTemp_f+0xb4>)
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8001dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	db1a      	blt.n	8001e3e <SetSoilTemp_f+0x8a>
 8001e08:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <SetSoilTemp_f+0xb8>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b50      	cmp	r3, #80	@ 0x50
 8001e0e:	d816      	bhi.n	8001e3e <SetSoilTemp_f+0x8a>
			sprintf((char*)cmd_buff, "SF VALUE SET TO %f SUCCESSFULLY\r\n", SoilTemp_New_Value);
 8001e10:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <SetSoilTemp_f+0xb4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fba7 	bl	8000568 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4914      	ldr	r1, [pc, #80]	@ (8001e70 <SetSoilTemp_f+0xbc>)
 8001e20:	4814      	ldr	r0, [pc, #80]	@ (8001e74 <SetSoilTemp_f+0xc0>)
 8001e22:	f007 fda5 	bl	8009970 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001e26:	4813      	ldr	r0, [pc, #76]	@ (8001e74 <SetSoilTemp_f+0xc0>)
 8001e28:	f7fe fa32 	bl	8000290 <strlen>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	2364      	movs	r3, #100	@ 0x64
 8001e32:	4910      	ldr	r1, [pc, #64]	@ (8001e74 <SetSoilTemp_f+0xc0>)
 8001e34:	4810      	ldr	r0, [pc, #64]	@ (8001e78 <SetSoilTemp_f+0xc4>)
 8001e36:	f002 fde9 	bl	8004a0c <HAL_UART_Transmit>
			soiltemp = 1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (soiltemp==0) {
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d105      	bne.n	8001e50 <SetSoilTemp_f+0x9c>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8001e44:	2364      	movs	r3, #100	@ 0x64
 8001e46:	2210      	movs	r2, #16
 8001e48:	490c      	ldr	r1, [pc, #48]	@ (8001e7c <SetSoilTemp_f+0xc8>)
 8001e4a:	480b      	ldr	r0, [pc, #44]	@ (8001e78 <SetSoilTemp_f+0xc4>)
 8001e4c:	f002 fdde 	bl	8004a0c <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));  // always clear at the end
 8001e50:	223c      	movs	r2, #60	@ 0x3c
 8001e52:	2100      	movs	r1, #0
 8001e54:	4807      	ldr	r0, [pc, #28]	@ (8001e74 <SetSoilTemp_f+0xc0>)
 8001e56:	f007 fdf0 	bl	8009a3a <memset>
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000844 	.word	0x20000844
 8001e68:	200008d4 	.word	0x200008d4
 8001e6c:	2000086d 	.word	0x2000086d
 8001e70:	0800cdfc 	.word	0x0800cdfc
 8001e74:	20000870 	.word	0x20000870
 8001e78:	20000930 	.word	0x20000930
 8001e7c:	0800cabc 	.word	0x0800cabc

08001e80 <GetSoilTemp_f>:

void GetSoilTemp_f(char* arg){
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	;
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <SetAirTemp_f>:
void SetAirTemp_f(char* arg) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	uint8_t airtemp = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8001ea0:	4b28      	ldr	r3, [pc, #160]	@ (8001f44 <SetAirTemp_f+0xb0>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d03a      	beq.n	8001f1e <SetAirTemp_f+0x8a>
 8001ea8:	4b26      	ldr	r3, [pc, #152]	@ (8001f44 <SetAirTemp_f+0xb0>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe f9ef 	bl	8000290 <strlen>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d832      	bhi.n	8001f1e <SetAirTemp_f+0x8a>
		AirTemp_New_Value = atof(tokens[1]);
 8001eb8:	4b22      	ldr	r3, [pc, #136]	@ (8001f44 <SetAirTemp_f+0xb0>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f006 f9a3 	bl	8008208 <atof>
 8001ec2:	ec53 2b10 	vmov	r2, r3, d0
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe fe9d 	bl	8000c08 <__aeabi_d2f>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f48 <SetAirTemp_f+0xb4>)
 8001ed2:	6013      	str	r3, [r2, #0]

		if (AirTemp_New_Value >= MIN_SOIL_TEMP && sf_new_value <= MAX_SOIL_TEMP) {
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f48 <SetAirTemp_f+0xb4>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8001ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	db1a      	blt.n	8001f1e <SetAirTemp_f+0x8a>
 8001ee8:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <SetAirTemp_f+0xb8>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b50      	cmp	r3, #80	@ 0x50
 8001eee:	d816      	bhi.n	8001f1e <SetAirTemp_f+0x8a>
			sprintf((char*)cmd_buff, "AIR TEMPERATURE VALUE SET TO %f SUCCESSFULLY\r\n", AirTemp_New_Value);
 8001ef0:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <SetAirTemp_f+0xb4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb37 	bl	8000568 <__aeabi_f2d>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4914      	ldr	r1, [pc, #80]	@ (8001f50 <SetAirTemp_f+0xbc>)
 8001f00:	4814      	ldr	r0, [pc, #80]	@ (8001f54 <SetAirTemp_f+0xc0>)
 8001f02:	f007 fd35 	bl	8009970 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001f06:	4813      	ldr	r0, [pc, #76]	@ (8001f54 <SetAirTemp_f+0xc0>)
 8001f08:	f7fe f9c2 	bl	8000290 <strlen>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	2364      	movs	r3, #100	@ 0x64
 8001f12:	4910      	ldr	r1, [pc, #64]	@ (8001f54 <SetAirTemp_f+0xc0>)
 8001f14:	4810      	ldr	r0, [pc, #64]	@ (8001f58 <SetAirTemp_f+0xc4>)
 8001f16:	f002 fd79 	bl	8004a0c <HAL_UART_Transmit>
			airtemp = 1;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (airtemp==0) {
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d105      	bne.n	8001f30 <SetAirTemp_f+0x9c>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8001f24:	2364      	movs	r3, #100	@ 0x64
 8001f26:	2210      	movs	r2, #16
 8001f28:	490c      	ldr	r1, [pc, #48]	@ (8001f5c <SetAirTemp_f+0xc8>)
 8001f2a:	480b      	ldr	r0, [pc, #44]	@ (8001f58 <SetAirTemp_f+0xc4>)
 8001f2c:	f002 fd6e 	bl	8004a0c <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 8001f30:	223c      	movs	r2, #60	@ 0x3c
 8001f32:	2100      	movs	r1, #0
 8001f34:	4807      	ldr	r0, [pc, #28]	@ (8001f54 <SetAirTemp_f+0xc0>)
 8001f36:	f007 fd80 	bl	8009a3a <memset>
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000844 	.word	0x20000844
 8001f48:	200008d8 	.word	0x200008d8
 8001f4c:	2000086d 	.word	0x2000086d
 8001f50:	0800ce20 	.word	0x0800ce20
 8001f54:	20000870 	.word	0x20000870
 8001f58:	20000930 	.word	0x20000930
 8001f5c:	0800cabc 	.word	0x0800cabc

08001f60 <GetAirTemp_f>:
void GetAirTemp_f(char* arg){
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	;
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <SetRelativeHumidity_f>:
void SetRelativeHumidity_f(char* arg){
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	;
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <GetRelativeHumidity_f>:
void GetRelativeHumidity_f(char* arg){
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	;
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <SetSoilHumidity_f>:
void SetSoilHumidity_f(char* arg){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	;
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <GetSoilHumidity_f>:
void GetSoilHumidity_f(char* arg){
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	;
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <SetWindSpeed_f>:
void SetWindSpeed_f(char* arg){
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	;
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <GetWindSpeed_f>:
void GetWindSpeed_f(char* arg){
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	;
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <SetRadiation_f>:
void SetRadiation_f(char* arg){
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	;
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <GetRadiation_f>:
void GetRadiation_f(char* arg){
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	;
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <SetKc_f>:
void SetKc_f(char* arg){
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	;
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <GetKc_f>:
void GetKc_f(char* arg){
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	;
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <SetKp_f>:
void SetKp_f(char* arg){
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	;
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <GetKp_f>:
void GetKp_f(char* arg){
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	;
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <GetET0_f>:
void GetET0_f(char* arg){
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	;
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <SetET0_f>:
void SetET0_f(char* arg){
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	;
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <SetAirPressure_f>:
void SetAirPressure_f(char* arg){
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	;

}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <GetAirPressure_f>:
void GetAirPressure_f(char* arg){
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	;

}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020b8:	f000 fade 	bl	8002678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020bc:	f000 f80a 	bl	80020d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c0:	f7ff f814 	bl	80010ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020c4:	f000 fa1a 	bl	80024fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80020c8:	f7fe ffd4 	bl	8001074 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80020cc:	f004 f852 	bl	8006174 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <main+0x1c>

080020d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b096      	sub	sp, #88	@ 0x58
 80020d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	2244      	movs	r2, #68	@ 0x44
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f007 fca9 	bl	8009a3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e8:	463b      	mov	r3, r7
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020fa:	f000 fe2f 	bl	8002d5c <HAL_PWREx_ControlVoltageScaling>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002104:	f000 f84a 	bl	800219c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002108:	2302      	movs	r3, #2
 800210a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800210c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002110:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002112:	2310      	movs	r3, #16
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002116:	2302      	movs	r3, #2
 8002118:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800211a:	2302      	movs	r3, #2
 800211c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002122:	230a      	movs	r3, #10
 8002124:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002126:	2307      	movs	r3, #7
 8002128:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800212a:	2302      	movs	r3, #2
 800212c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800212e:	2302      	movs	r3, #2
 8002130:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fe66 	bl	8002e08 <HAL_RCC_OscConfig>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002142:	f000 f82b 	bl	800219c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002146:	230f      	movs	r3, #15
 8002148:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800214a:	2303      	movs	r3, #3
 800214c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800215a:	463b      	mov	r3, r7
 800215c:	2104      	movs	r1, #4
 800215e:	4618      	mov	r0, r3
 8002160:	f001 fa2e 	bl	80035c0 <HAL_RCC_ClockConfig>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800216a:	f000 f817 	bl	800219c <Error_Handler>
  }
}
 800216e:	bf00      	nop
 8002170:	3758      	adds	r7, #88	@ 0x58
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800218a:	f000 fa95 	bl	80026b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40001000 	.word	0x40001000

0800219c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a0:	b672      	cpsid	i
}
 80021a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <Error_Handler+0x8>

080021a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <HAL_MspInit+0x4c>)
 80021b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b2:	4a10      	ldr	r2, [pc, #64]	@ (80021f4 <HAL_MspInit+0x4c>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80021ba:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <HAL_MspInit+0x4c>)
 80021bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <HAL_MspInit+0x4c>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ca:	4a0a      	ldr	r2, [pc, #40]	@ (80021f4 <HAL_MspInit+0x4c>)
 80021cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021d2:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <HAL_MspInit+0x4c>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	210f      	movs	r1, #15
 80021e2:	f06f 0001 	mvn.w	r0, #1
 80021e6:	f000 fb3f 	bl	8002868 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000

080021f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08e      	sub	sp, #56	@ 0x38
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002206:	4b34      	ldr	r3, [pc, #208]	@ (80022d8 <HAL_InitTick+0xe0>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	4a33      	ldr	r2, [pc, #204]	@ (80022d8 <HAL_InitTick+0xe0>)
 800220c:	f043 0310 	orr.w	r3, r3, #16
 8002210:	6593      	str	r3, [r2, #88]	@ 0x58
 8002212:	4b31      	ldr	r3, [pc, #196]	@ (80022d8 <HAL_InitTick+0xe0>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800221e:	f107 0210 	add.w	r2, r7, #16
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f001 fb8d 	bl	8003948 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d103      	bne.n	8002240 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002238:	f001 fb5a 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 800223c:	6378      	str	r0, [r7, #52]	@ 0x34
 800223e:	e004      	b.n	800224a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002240:	f001 fb56 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 8002244:	4603      	mov	r3, r0
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800224a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800224c:	4a23      	ldr	r2, [pc, #140]	@ (80022dc <HAL_InitTick+0xe4>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	0c9b      	lsrs	r3, r3, #18
 8002254:	3b01      	subs	r3, #1
 8002256:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002258:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <HAL_InitTick+0xe8>)
 800225a:	4a22      	ldr	r2, [pc, #136]	@ (80022e4 <HAL_InitTick+0xec>)
 800225c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800225e:	4b20      	ldr	r3, [pc, #128]	@ (80022e0 <HAL_InitTick+0xe8>)
 8002260:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002264:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002266:	4a1e      	ldr	r2, [pc, #120]	@ (80022e0 <HAL_InitTick+0xe8>)
 8002268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800226c:	4b1c      	ldr	r3, [pc, #112]	@ (80022e0 <HAL_InitTick+0xe8>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <HAL_InitTick+0xe8>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002278:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <HAL_InitTick+0xe8>)
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800227e:	4818      	ldr	r0, [pc, #96]	@ (80022e0 <HAL_InitTick+0xe8>)
 8002280:	f002 f8b0 	bl	80043e4 <HAL_TIM_Base_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800228a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11b      	bne.n	80022ca <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002292:	4813      	ldr	r0, [pc, #76]	@ (80022e0 <HAL_InitTick+0xe8>)
 8002294:	f002 f908 	bl	80044a8 <HAL_TIM_Base_Start_IT>
 8002298:	4603      	mov	r3, r0
 800229a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800229e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d111      	bne.n	80022ca <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022a6:	2036      	movs	r0, #54	@ 0x36
 80022a8:	f000 fafa 	bl	80028a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	d808      	bhi.n	80022c4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022b2:	2200      	movs	r2, #0
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	2036      	movs	r0, #54	@ 0x36
 80022b8:	f000 fad6 	bl	8002868 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022bc:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <HAL_InitTick+0xf0>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e002      	b.n	80022ca <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3738      	adds	r7, #56	@ 0x38
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	200008e0 	.word	0x200008e0
 80022e4:	40001000 	.word	0x40001000
 80022e8:	20000258 	.word	0x20000258

080022ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <NMI_Handler+0x4>

080022f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <HardFault_Handler+0x4>

080022fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <MemManage_Handler+0x4>

08002304 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <BusFault_Handler+0x4>

0800230c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <UsageFault_Handler+0x4>

08002314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002328:	4802      	ldr	r0, [pc, #8]	@ (8002334 <USART2_IRQHandler+0x10>)
 800232a:	f002 fc45 	bl	8004bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000930 	.word	0x20000930

08002338 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <TIM6_DAC_IRQHandler+0x10>)
 800233e:	f002 f923 	bl	8004588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200008e0 	.word	0x200008e0

0800234c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return 1;
 8002350:	2301      	movs	r3, #1
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_kill>:

int _kill(int pid, int sig)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002366:	f007 fc87 	bl	8009c78 <__errno>
 800236a:	4603      	mov	r3, r0
 800236c:	2216      	movs	r2, #22
 800236e:	601a      	str	r2, [r3, #0]
  return -1;
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <_exit>:

void _exit (int status)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ffe7 	bl	800235c <_kill>
  while (1) {}    /* Make sure we hang here */
 800238e:	bf00      	nop
 8002390:	e7fd      	b.n	800238e <_exit+0x12>

08002392 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e00a      	b.n	80023ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023a4:	f3af 8000 	nop.w
 80023a8:	4601      	mov	r1, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	60ba      	str	r2, [r7, #8]
 80023b0:	b2ca      	uxtb	r2, r1
 80023b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3301      	adds	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	dbf0      	blt.n	80023a4 <_read+0x12>
  }

  return len;
 80023c2:	687b      	ldr	r3, [r7, #4]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e009      	b.n	80023f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	60ba      	str	r2, [r7, #8]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3301      	adds	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	dbf1      	blt.n	80023de <_write+0x12>
  }
  return len;
 80023fa:	687b      	ldr	r3, [r7, #4]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_close>:

int _close(int file)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800240c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800242c:	605a      	str	r2, [r3, #4]
  return 0;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_isatty>:

int _isatty(int file)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002444:	2301      	movs	r3, #1
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002474:	4a14      	ldr	r2, [pc, #80]	@ (80024c8 <_sbrk+0x5c>)
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <_sbrk+0x60>)
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002488:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <_sbrk+0x64>)
 800248a:	4a12      	ldr	r2, [pc, #72]	@ (80024d4 <_sbrk+0x68>)
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	429a      	cmp	r2, r3
 800249a:	d207      	bcs.n	80024ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800249c:	f007 fbec 	bl	8009c78 <__errno>
 80024a0:	4603      	mov	r3, r0
 80024a2:	220c      	movs	r2, #12
 80024a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a6:	f04f 33ff 	mov.w	r3, #4294967295
 80024aa:	e009      	b.n	80024c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <_sbrk+0x64>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024b2:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <_sbrk+0x64>)
 80024bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20018000 	.word	0x20018000
 80024cc:	00000400 	.word	0x00000400
 80024d0:	2000092c 	.word	0x2000092c
 80024d4:	20005a80 	.word	0x20005a80

080024d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024dc:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <SystemInit+0x20>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e2:	4a05      	ldr	r2, [pc, #20]	@ (80024f8 <SystemInit+0x20>)
 80024e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002500:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <MX_USART2_UART_Init+0x58>)
 8002502:	4a15      	ldr	r2, [pc, #84]	@ (8002558 <MX_USART2_UART_Init+0x5c>)
 8002504:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002506:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <MX_USART2_UART_Init+0x58>)
 8002508:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800250c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800250e:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <MX_USART2_UART_Init+0x58>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002514:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <MX_USART2_UART_Init+0x58>)
 8002516:	2200      	movs	r2, #0
 8002518:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800251a:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <MX_USART2_UART_Init+0x58>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <MX_USART2_UART_Init+0x58>)
 8002522:	220c      	movs	r2, #12
 8002524:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002526:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <MX_USART2_UART_Init+0x58>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <MX_USART2_UART_Init+0x58>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002532:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <MX_USART2_UART_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <MX_USART2_UART_Init+0x58>)
 800253a:	2200      	movs	r2, #0
 800253c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	@ (8002554 <MX_USART2_UART_Init+0x58>)
 8002540:	f002 fa16 	bl	8004970 <HAL_UART_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800254a:	f7ff fe27 	bl	800219c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000930 	.word	0x20000930
 8002558:	40004400 	.word	0x40004400

0800255c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b0ac      	sub	sp, #176	@ 0xb0
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	2288      	movs	r2, #136	@ 0x88
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f007 fa5c 	bl	8009a3a <memset>
  if(uartHandle->Instance==USART2)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a25      	ldr	r2, [pc, #148]	@ (800261c <HAL_UART_MspInit+0xc0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d143      	bne.n	8002614 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800258c:	2302      	movs	r3, #2
 800258e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002590:	2300      	movs	r3, #0
 8002592:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4618      	mov	r0, r3
 800259a:	f001 fa67 	bl	8003a6c <HAL_RCCEx_PeriphCLKConfig>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025a4:	f7ff fdfa 	bl	800219c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <HAL_UART_MspInit+0xc4>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002620 <HAL_UART_MspInit+0xc4>)
 80025ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <HAL_UART_MspInit+0xc4>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c0:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <HAL_UART_MspInit+0xc4>)
 80025c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c4:	4a16      	ldr	r2, [pc, #88]	@ (8002620 <HAL_UART_MspInit+0xc4>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025cc:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <HAL_UART_MspInit+0xc4>)
 80025ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025d8:	230c      	movs	r3, #12
 80025da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025f0:	2307      	movs	r3, #7
 80025f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025fa:	4619      	mov	r1, r3
 80025fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002600:	f000 f9dc 	bl	80029bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002604:	2200      	movs	r2, #0
 8002606:	2105      	movs	r1, #5
 8002608:	2026      	movs	r0, #38	@ 0x26
 800260a:	f000 f92d 	bl	8002868 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800260e:	2026      	movs	r0, #38	@ 0x26
 8002610:	f000 f946 	bl	80028a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002614:	bf00      	nop
 8002616:	37b0      	adds	r7, #176	@ 0xb0
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40004400 	.word	0x40004400
 8002620:	40021000 	.word	0x40021000

08002624 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002624:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800265c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002628:	f7ff ff56 	bl	80024d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800262c:	480c      	ldr	r0, [pc, #48]	@ (8002660 <LoopForever+0x6>)
  ldr r1, =_edata
 800262e:	490d      	ldr	r1, [pc, #52]	@ (8002664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002630:	4a0d      	ldr	r2, [pc, #52]	@ (8002668 <LoopForever+0xe>)
  movs r3, #0
 8002632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002634:	e002      	b.n	800263c <LoopCopyDataInit>

08002636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263a:	3304      	adds	r3, #4

0800263c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800263c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002640:	d3f9      	bcc.n	8002636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002642:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002644:	4c0a      	ldr	r4, [pc, #40]	@ (8002670 <LoopForever+0x16>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002648:	e001      	b.n	800264e <LoopFillZerobss>

0800264a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800264c:	3204      	adds	r2, #4

0800264e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002650:	d3fb      	bcc.n	800264a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002652:	f007 fb17 	bl	8009c84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002656:	f7ff fd2d 	bl	80020b4 <main>

0800265a <LoopForever>:

LoopForever:
    b LoopForever
 800265a:	e7fe      	b.n	800265a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800265c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002664:	2000042c 	.word	0x2000042c
  ldr r2, =_sidata
 8002668:	0800d330 	.word	0x0800d330
  ldr r2, =_sbss
 800266c:	2000042c 	.word	0x2000042c
  ldr r4, =_ebss
 8002670:	20005a7c 	.word	0x20005a7c

08002674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002674:	e7fe      	b.n	8002674 <ADC1_2_IRQHandler>
	...

08002678 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002682:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <HAL_Init+0x3c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a0b      	ldr	r2, [pc, #44]	@ (80026b4 <HAL_Init+0x3c>)
 8002688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800268c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800268e:	2003      	movs	r0, #3
 8002690:	f000 f8df 	bl	8002852 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002694:	200f      	movs	r0, #15
 8002696:	f7ff fdaf 	bl	80021f8 <HAL_InitTick>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	71fb      	strb	r3, [r7, #7]
 80026a4:	e001      	b.n	80026aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026a6:	f7ff fd7f 	bl	80021a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026aa:	79fb      	ldrb	r3, [r7, #7]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40022000 	.word	0x40022000

080026b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026bc:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <HAL_IncTick+0x20>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <HAL_IncTick+0x24>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	4a04      	ldr	r2, [pc, #16]	@ (80026dc <HAL_IncTick+0x24>)
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	2000025c 	.word	0x2000025c
 80026dc:	200009b8 	.word	0x200009b8

080026e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return uwTick;
 80026e4:	4b03      	ldr	r3, [pc, #12]	@ (80026f4 <HAL_GetTick+0x14>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	200009b8 	.word	0x200009b8

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272a:	4a04      	ldr	r2, [pc, #16]	@ (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	60d3      	str	r3, [r2, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	2b00      	cmp	r3, #0
 800276c:	db0b      	blt.n	8002786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	4907      	ldr	r1, [pc, #28]	@ (8002794 <__NVIC_EnableIRQ+0x38>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2001      	movs	r0, #1
 800277e:	fa00 f202 	lsl.w	r2, r0, r2
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000e100 	.word	0xe000e100

08002798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	db0a      	blt.n	80027c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	490c      	ldr	r1, [pc, #48]	@ (80027e4 <__NVIC_SetPriority+0x4c>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	0112      	lsls	r2, r2, #4
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	440b      	add	r3, r1
 80027bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c0:	e00a      	b.n	80027d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4908      	ldr	r1, [pc, #32]	@ (80027e8 <__NVIC_SetPriority+0x50>)
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3b04      	subs	r3, #4
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	440b      	add	r3, r1
 80027d6:	761a      	strb	r2, [r3, #24]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000e100 	.word	0xe000e100
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	@ 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f1c3 0307 	rsb	r3, r3, #7
 8002806:	2b04      	cmp	r3, #4
 8002808:	bf28      	it	cs
 800280a:	2304      	movcs	r3, #4
 800280c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3304      	adds	r3, #4
 8002812:	2b06      	cmp	r3, #6
 8002814:	d902      	bls.n	800281c <NVIC_EncodePriority+0x30>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3b03      	subs	r3, #3
 800281a:	e000      	b.n	800281e <NVIC_EncodePriority+0x32>
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 32ff 	mov.w	r2, #4294967295
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	401a      	ands	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43d9      	mvns	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	4313      	orrs	r3, r2
         );
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	@ 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ff4c 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800287a:	f7ff ff61 	bl	8002740 <__NVIC_GetPriorityGrouping>
 800287e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	6978      	ldr	r0, [r7, #20]
 8002886:	f7ff ffb1 	bl	80027ec <NVIC_EncodePriority>
 800288a:	4602      	mov	r2, r0
 800288c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff80 	bl	8002798 <__NVIC_SetPriority>
}
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff54 	bl	800275c <__NVIC_EnableIRQ>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d008      	beq.n	80028e6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2204      	movs	r2, #4
 80028d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e022      	b.n	800292c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 020e 	bic.w	r2, r2, #14
 80028f4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0201 	bic.w	r2, r2, #1
 8002904:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	f003 021c 	and.w	r2, r3, #28
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	2101      	movs	r1, #1
 8002914:	fa01 f202 	lsl.w	r2, r1, r2
 8002918:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d005      	beq.n	800295c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2204      	movs	r2, #4
 8002954:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	e029      	b.n	80029b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 020e 	bic.w	r2, r2, #14
 800296a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002980:	f003 021c 	and.w	r2, r3, #28
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f202 	lsl.w	r2, r1, r2
 800298e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
    }
  }
  return status;
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ca:	e17f      	b.n	8002ccc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2101      	movs	r1, #1
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8171 	beq.w	8002cc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d005      	beq.n	80029fc <HAL_GPIO_Init+0x40>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d130      	bne.n	8002a5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a32:	2201      	movs	r2, #1
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f003 0201 	and.w	r2, r3, #1
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d118      	bne.n	8002a9c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a70:	2201      	movs	r2, #1
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	08db      	lsrs	r3, r3, #3
 8002a86:	f003 0201 	and.w	r2, r3, #1
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d017      	beq.n	8002ad8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d123      	bne.n	8002b2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	08da      	lsrs	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	220f      	movs	r2, #15
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	08da      	lsrs	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3208      	adds	r2, #8
 8002b26:	6939      	ldr	r1, [r7, #16]
 8002b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0203 	and.w	r2, r3, #3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80ac 	beq.w	8002cc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8002cec <HAL_GPIO_Init+0x330>)
 8002b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b72:	4a5e      	ldr	r2, [pc, #376]	@ (8002cec <HAL_GPIO_Init+0x330>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002cec <HAL_GPIO_Init+0x330>)
 8002b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b86:	4a5a      	ldr	r2, [pc, #360]	@ (8002cf0 <HAL_GPIO_Init+0x334>)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bb0:	d025      	beq.n	8002bfe <HAL_GPIO_Init+0x242>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4f      	ldr	r2, [pc, #316]	@ (8002cf4 <HAL_GPIO_Init+0x338>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01f      	beq.n	8002bfa <HAL_GPIO_Init+0x23e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4e      	ldr	r2, [pc, #312]	@ (8002cf8 <HAL_GPIO_Init+0x33c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d019      	beq.n	8002bf6 <HAL_GPIO_Init+0x23a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4d      	ldr	r2, [pc, #308]	@ (8002cfc <HAL_GPIO_Init+0x340>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_Init+0x236>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4c      	ldr	r2, [pc, #304]	@ (8002d00 <HAL_GPIO_Init+0x344>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00d      	beq.n	8002bee <HAL_GPIO_Init+0x232>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d04 <HAL_GPIO_Init+0x348>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <HAL_GPIO_Init+0x22e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8002d08 <HAL_GPIO_Init+0x34c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_GPIO_Init+0x22a>
 8002be2:	2306      	movs	r3, #6
 8002be4:	e00c      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002be6:	2307      	movs	r3, #7
 8002be8:	e00a      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bea:	2305      	movs	r3, #5
 8002bec:	e008      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e006      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e004      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_GPIO_Init+0x244>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	f002 0203 	and.w	r2, r2, #3
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4093      	lsls	r3, r2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c10:	4937      	ldr	r1, [pc, #220]	@ (8002cf0 <HAL_GPIO_Init+0x334>)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	089b      	lsrs	r3, r3, #2
 8002c16:	3302      	adds	r3, #2
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d0c <HAL_GPIO_Init+0x350>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c42:	4a32      	ldr	r2, [pc, #200]	@ (8002d0c <HAL_GPIO_Init+0x350>)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c48:	4b30      	ldr	r3, [pc, #192]	@ (8002d0c <HAL_GPIO_Init+0x350>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c6c:	4a27      	ldr	r2, [pc, #156]	@ (8002d0c <HAL_GPIO_Init+0x350>)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c72:	4b26      	ldr	r3, [pc, #152]	@ (8002d0c <HAL_GPIO_Init+0x350>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c96:	4a1d      	ldr	r2, [pc, #116]	@ (8002d0c <HAL_GPIO_Init+0x350>)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <HAL_GPIO_Init+0x350>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cc0:	4a12      	ldr	r2, [pc, #72]	@ (8002d0c <HAL_GPIO_Init+0x350>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f47f ae78 	bne.w	80029cc <HAL_GPIO_Init+0x10>
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	48000400 	.word	0x48000400
 8002cf8:	48000800 	.word	0x48000800
 8002cfc:	48000c00 	.word	0x48000c00
 8002d00:	48001000 	.word	0x48001000
 8002d04:	48001400 	.word	0x48001400
 8002d08:	48001800 	.word	0x48001800
 8002d0c:	40010400 	.word	0x40010400

08002d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d20:	787b      	ldrb	r3, [r7, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d2c:	e002      	b.n	8002d34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d44:	4b04      	ldr	r3, [pc, #16]	@ (8002d58 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40007000 	.word	0x40007000

08002d5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d6a:	d130      	bne.n	8002dce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d6c:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d78:	d038      	beq.n	8002dec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d7a:	4b20      	ldr	r3, [pc, #128]	@ (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d82:	4a1e      	ldr	r2, [pc, #120]	@ (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2232      	movs	r2, #50	@ 0x32
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	4a1b      	ldr	r2, [pc, #108]	@ (8002e04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0c9b      	lsrs	r3, r3, #18
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da0:	e002      	b.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da8:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002db4:	d102      	bne.n	8002dbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f2      	bne.n	8002da2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc8:	d110      	bne.n	8002dec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e00f      	b.n	8002dee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dce:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dda:	d007      	beq.n	8002dec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ddc:	4b07      	ldr	r3, [pc, #28]	@ (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002de4:	4a05      	ldr	r2, [pc, #20]	@ (8002dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	20000254 	.word	0x20000254
 8002e04:	431bde83 	.word	0x431bde83

08002e08 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e3ca      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e1a:	4b97      	ldr	r3, [pc, #604]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e24:	4b94      	ldr	r3, [pc, #592]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80e4 	beq.w	8003004 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <HAL_RCC_OscConfig+0x4a>
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	f040 808b 	bne.w	8002f60 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	f040 8087 	bne.w	8002f60 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e52:	4b89      	ldr	r3, [pc, #548]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_RCC_OscConfig+0x62>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e3a2      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1a      	ldr	r2, [r3, #32]
 8002e6e:	4b82      	ldr	r3, [pc, #520]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <HAL_RCC_OscConfig+0x7c>
 8002e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e82:	e005      	b.n	8002e90 <HAL_RCC_OscConfig+0x88>
 8002e84:	4b7c      	ldr	r3, [pc, #496]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d223      	bcs.n	8002edc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fd87 	bl	80039ac <RCC_SetFlashLatencyFromMSIRange>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e383      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea8:	4b73      	ldr	r3, [pc, #460]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a72      	ldr	r2, [pc, #456]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002eae:	f043 0308 	orr.w	r3, r3, #8
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b70      	ldr	r3, [pc, #448]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	496d      	ldr	r1, [pc, #436]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec6:	4b6c      	ldr	r3, [pc, #432]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	4968      	ldr	r1, [pc, #416]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
 8002eda:	e025      	b.n	8002f28 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002edc:	4b66      	ldr	r3, [pc, #408]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a65      	ldr	r2, [pc, #404]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	f043 0308 	orr.w	r3, r3, #8
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b63      	ldr	r3, [pc, #396]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4960      	ldr	r1, [pc, #384]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002efa:	4b5f      	ldr	r3, [pc, #380]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	495b      	ldr	r1, [pc, #364]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fd47 	bl	80039ac <RCC_SetFlashLatencyFromMSIRange>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e343      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f28:	f000 fc4a 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b52      	ldr	r3, [pc, #328]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	4950      	ldr	r1, [pc, #320]	@ (800307c <HAL_RCC_OscConfig+0x274>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	4a4e      	ldr	r2, [pc, #312]	@ (8003080 <HAL_RCC_OscConfig+0x278>)
 8002f46:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f48:	4b4e      	ldr	r3, [pc, #312]	@ (8003084 <HAL_RCC_OscConfig+0x27c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff f953 	bl	80021f8 <HAL_InitTick>
 8002f52:	4603      	mov	r3, r0
 8002f54:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d052      	beq.n	8003002 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	e327      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d032      	beq.n	8002fce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f68:	4b43      	ldr	r3, [pc, #268]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a42      	ldr	r2, [pc, #264]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f74:	f7ff fbb4 	bl	80026e0 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7c:	f7ff fbb0 	bl	80026e0 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e310      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f9a:	4b37      	ldr	r3, [pc, #220]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a36      	ldr	r2, [pc, #216]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	f043 0308 	orr.w	r3, r3, #8
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	4b34      	ldr	r3, [pc, #208]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4931      	ldr	r1, [pc, #196]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	021b      	lsls	r3, r3, #8
 8002fc6:	492c      	ldr	r1, [pc, #176]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
 8002fcc:	e01a      	b.n	8003004 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fce:	4b2a      	ldr	r3, [pc, #168]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a29      	ldr	r2, [pc, #164]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fda:	f7ff fb81 	bl	80026e0 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe2:	f7ff fb7d 	bl	80026e0 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e2dd      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ff4:	4b20      	ldr	r3, [pc, #128]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f0      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x1da>
 8003000:	e000      	b.n	8003004 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003002:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d074      	beq.n	80030fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b08      	cmp	r3, #8
 8003014:	d005      	beq.n	8003022 <HAL_RCC_OscConfig+0x21a>
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	d10e      	bne.n	800303a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d10b      	bne.n	800303a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003022:	4b15      	ldr	r3, [pc, #84]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d064      	beq.n	80030f8 <HAL_RCC_OscConfig+0x2f0>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d160      	bne.n	80030f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e2ba      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x24a>
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0b      	ldr	r2, [pc, #44]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e026      	b.n	80030a0 <HAL_RCC_OscConfig+0x298>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800305a:	d115      	bne.n	8003088 <HAL_RCC_OscConfig+0x280>
 800305c:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a05      	ldr	r2, [pc, #20]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 8003062:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b03      	ldr	r3, [pc, #12]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a02      	ldr	r2, [pc, #8]	@ (8003078 <HAL_RCC_OscConfig+0x270>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e014      	b.n	80030a0 <HAL_RCC_OscConfig+0x298>
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	0800ce58 	.word	0x0800ce58
 8003080:	20000254 	.word	0x20000254
 8003084:	20000258 	.word	0x20000258
 8003088:	4ba0      	ldr	r3, [pc, #640]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a9f      	ldr	r2, [pc, #636]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 800308e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b9d      	ldr	r3, [pc, #628]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a9c      	ldr	r2, [pc, #624]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800309e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7ff fb1a 	bl	80026e0 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b0:	f7ff fb16 	bl	80026e0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	@ 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e276      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030c2:	4b92      	ldr	r3, [pc, #584]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x2a8>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7ff fb06 	bl	80026e0 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7ff fb02 	bl	80026e0 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e262      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ea:	4b88      	ldr	r3, [pc, #544]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x2d0>
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d060      	beq.n	80031c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b04      	cmp	r3, #4
 800310a:	d005      	beq.n	8003118 <HAL_RCC_OscConfig+0x310>
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b0c      	cmp	r3, #12
 8003110:	d119      	bne.n	8003146 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d116      	bne.n	8003146 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003118:	4b7c      	ldr	r3, [pc, #496]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_OscConfig+0x328>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e23f      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003130:	4b76      	ldr	r3, [pc, #472]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	4973      	ldr	r1, [pc, #460]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003144:	e040      	b.n	80031c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d023      	beq.n	8003196 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314e:	4b6f      	ldr	r3, [pc, #444]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6e      	ldr	r2, [pc, #440]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7ff fac1 	bl	80026e0 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003162:	f7ff fabd 	bl	80026e0 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e21d      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003174:	4b65      	ldr	r3, [pc, #404]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003180:	4b62      	ldr	r3, [pc, #392]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	061b      	lsls	r3, r3, #24
 800318e:	495f      	ldr	r1, [pc, #380]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
 8003194:	e018      	b.n	80031c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003196:	4b5d      	ldr	r3, [pc, #372]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a5c      	ldr	r2, [pc, #368]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 800319c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a2:	f7ff fa9d 	bl	80026e0 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031aa:	f7ff fa99 	bl	80026e0 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e1f9      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031bc:	4b53      	ldr	r3, [pc, #332]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d03c      	beq.n	800324e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01c      	beq.n	8003216 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031dc:	4b4b      	ldr	r3, [pc, #300]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 80031de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031e2:	4a4a      	ldr	r2, [pc, #296]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7ff fa78 	bl	80026e0 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7ff fa74 	bl	80026e0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1d4      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003206:	4b41      	ldr	r3, [pc, #260]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ef      	beq.n	80031f4 <HAL_RCC_OscConfig+0x3ec>
 8003214:	e01b      	b.n	800324e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003216:	4b3d      	ldr	r3, [pc, #244]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800321c:	4a3b      	ldr	r2, [pc, #236]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003226:	f7ff fa5b 	bl	80026e0 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322e:	f7ff fa57 	bl	80026e0 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e1b7      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003240:	4b32      	ldr	r3, [pc, #200]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003242:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1ef      	bne.n	800322e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80a6 	beq.w	80033a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325c:	2300      	movs	r3, #0
 800325e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003260:	4b2a      	ldr	r3, [pc, #168]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10d      	bne.n	8003288 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326c:	4b27      	ldr	r3, [pc, #156]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003270:	4a26      	ldr	r2, [pc, #152]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003276:	6593      	str	r3, [r2, #88]	@ 0x58
 8003278:	4b24      	ldr	r3, [pc, #144]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003284:	2301      	movs	r3, #1
 8003286:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003288:	4b21      	ldr	r3, [pc, #132]	@ (8003310 <HAL_RCC_OscConfig+0x508>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d118      	bne.n	80032c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003294:	4b1e      	ldr	r3, [pc, #120]	@ (8003310 <HAL_RCC_OscConfig+0x508>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1d      	ldr	r2, [pc, #116]	@ (8003310 <HAL_RCC_OscConfig+0x508>)
 800329a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800329e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a0:	f7ff fa1e 	bl	80026e0 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a8:	f7ff fa1a 	bl	80026e0 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e17a      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ba:	4b15      	ldr	r3, [pc, #84]	@ (8003310 <HAL_RCC_OscConfig+0x508>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d108      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4d8>
 80032ce:	4b0f      	ldr	r3, [pc, #60]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d4:	4a0d      	ldr	r2, [pc, #52]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032de:	e029      	b.n	8003334 <HAL_RCC_OscConfig+0x52c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d115      	bne.n	8003314 <HAL_RCC_OscConfig+0x50c>
 80032e8:	4b08      	ldr	r3, [pc, #32]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ee:	4a07      	ldr	r2, [pc, #28]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032f8:	4b04      	ldr	r3, [pc, #16]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fe:	4a03      	ldr	r2, [pc, #12]	@ (800330c <HAL_RCC_OscConfig+0x504>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003308:	e014      	b.n	8003334 <HAL_RCC_OscConfig+0x52c>
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	40007000 	.word	0x40007000
 8003314:	4b9c      	ldr	r3, [pc, #624]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331a:	4a9b      	ldr	r2, [pc, #620]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003324:	4b98      	ldr	r3, [pc, #608]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332a:	4a97      	ldr	r2, [pc, #604]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d016      	beq.n	800336a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7ff f9d0 	bl	80026e0 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003342:	e00a      	b.n	800335a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003344:	f7ff f9cc 	bl	80026e0 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e12a      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335a:	4b8b      	ldr	r3, [pc, #556]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ed      	beq.n	8003344 <HAL_RCC_OscConfig+0x53c>
 8003368:	e015      	b.n	8003396 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7ff f9b9 	bl	80026e0 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7ff f9b5 	bl	80026e0 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e113      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003388:	4b7f      	ldr	r3, [pc, #508]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1ed      	bne.n	8003372 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003396:	7ffb      	ldrb	r3, [r7, #31]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d105      	bne.n	80033a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339c:	4b7a      	ldr	r3, [pc, #488]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 800339e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a0:	4a79      	ldr	r2, [pc, #484]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 80033a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80fe 	beq.w	80035ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	f040 80d0 	bne.w	800355c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033bc:	4b72      	ldr	r3, [pc, #456]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f003 0203 	and.w	r2, r3, #3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d130      	bne.n	8003432 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	3b01      	subs	r3, #1
 80033dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d127      	bne.n	8003432 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d11f      	bne.n	8003432 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033fc:	2a07      	cmp	r2, #7
 80033fe:	bf14      	ite	ne
 8003400:	2201      	movne	r2, #1
 8003402:	2200      	moveq	r2, #0
 8003404:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003406:	4293      	cmp	r3, r2
 8003408:	d113      	bne.n	8003432 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	3b01      	subs	r3, #1
 8003418:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d109      	bne.n	8003432 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	085b      	lsrs	r3, r3, #1
 800342a:	3b01      	subs	r3, #1
 800342c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d06e      	beq.n	8003510 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b0c      	cmp	r3, #12
 8003436:	d069      	beq.n	800350c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003438:	4b53      	ldr	r3, [pc, #332]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003444:	4b50      	ldr	r3, [pc, #320]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0ad      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003454:	4b4c      	ldr	r3, [pc, #304]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a4b      	ldr	r2, [pc, #300]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 800345a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800345e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003460:	f7ff f93e 	bl	80026e0 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003468:	f7ff f93a 	bl	80026e0 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e09a      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347a:	4b43      	ldr	r3, [pc, #268]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003486:	4b40      	ldr	r3, [pc, #256]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	4b40      	ldr	r3, [pc, #256]	@ (800358c <HAL_RCC_OscConfig+0x784>)
 800348c:	4013      	ands	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003496:	3a01      	subs	r2, #1
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	4311      	orrs	r1, r2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034a0:	0212      	lsls	r2, r2, #8
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034a8:	0852      	lsrs	r2, r2, #1
 80034aa:	3a01      	subs	r2, #1
 80034ac:	0552      	lsls	r2, r2, #21
 80034ae:	4311      	orrs	r1, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80034b4:	0852      	lsrs	r2, r2, #1
 80034b6:	3a01      	subs	r2, #1
 80034b8:	0652      	lsls	r2, r2, #25
 80034ba:	4311      	orrs	r1, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034c0:	0912      	lsrs	r2, r2, #4
 80034c2:	0452      	lsls	r2, r2, #17
 80034c4:	430a      	orrs	r2, r1
 80034c6:	4930      	ldr	r1, [pc, #192]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 80034d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 80034de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e4:	f7ff f8fc 	bl	80026e0 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7ff f8f8 	bl	80026e0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e058      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fe:	4b22      	ldr	r3, [pc, #136]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800350a:	e050      	b.n	80035ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e04f      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003510:	4b1d      	ldr	r3, [pc, #116]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d148      	bne.n	80035ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800351c:	4b1a      	ldr	r3, [pc, #104]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a19      	ldr	r2, [pc, #100]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003526:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003528:	4b17      	ldr	r3, [pc, #92]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a16      	ldr	r2, [pc, #88]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 800352e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003532:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003534:	f7ff f8d4 	bl	80026e0 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353c:	f7ff f8d0 	bl	80026e0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e030      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354e:	4b0e      	ldr	r3, [pc, #56]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x734>
 800355a:	e028      	b.n	80035ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d023      	beq.n	80035aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b09      	ldr	r3, [pc, #36]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a08      	ldr	r2, [pc, #32]	@ (8003588 <HAL_RCC_OscConfig+0x780>)
 8003568:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800356c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7ff f8b7 	bl	80026e0 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003574:	e00c      	b.n	8003590 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7ff f8b3 	bl	80026e0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d905      	bls.n	8003590 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e013      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
 8003588:	40021000 	.word	0x40021000
 800358c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003590:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <HAL_RCC_OscConfig+0x7b0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ec      	bne.n	8003576 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800359c:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <HAL_RCC_OscConfig+0x7b0>)
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	4905      	ldr	r1, [pc, #20]	@ (80035b8 <HAL_RCC_OscConfig+0x7b0>)
 80035a2:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <HAL_RCC_OscConfig+0x7b4>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
 80035a8:	e001      	b.n	80035ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3720      	adds	r7, #32
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	feeefffc 	.word	0xfeeefffc

080035c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0e7      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	4b75      	ldr	r3, [pc, #468]	@ (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d910      	bls.n	8003604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b72      	ldr	r3, [pc, #456]	@ (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 0207 	bic.w	r2, r3, #7
 80035ea:	4970      	ldr	r1, [pc, #448]	@ (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b6e      	ldr	r3, [pc, #440]	@ (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0cf      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d010      	beq.n	8003632 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	4b66      	ldr	r3, [pc, #408]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800361c:	429a      	cmp	r2, r3
 800361e:	d908      	bls.n	8003632 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b63      	ldr	r3, [pc, #396]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4960      	ldr	r1, [pc, #384]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d04c      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003646:	4b5a      	ldr	r3, [pc, #360]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d121      	bne.n	8003696 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0a6      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365e:	4b54      	ldr	r3, [pc, #336]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d115      	bne.n	8003696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e09a      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003676:	4b4e      	ldr	r3, [pc, #312]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e08e      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003686:	4b4a      	ldr	r3, [pc, #296]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e086      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003696:	4b46      	ldr	r3, [pc, #280]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f023 0203 	bic.w	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4943      	ldr	r1, [pc, #268]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a8:	f7ff f81a 	bl	80026e0 <HAL_GetTick>
 80036ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b0:	f7ff f816 	bl	80026e0 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e06e      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	4b3a      	ldr	r3, [pc, #232]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 020c 	and.w	r2, r3, #12
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d1eb      	bne.n	80036b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d010      	beq.n	8003706 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	4b31      	ldr	r3, [pc, #196]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d208      	bcs.n	8003706 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f4:	4b2e      	ldr	r3, [pc, #184]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	492b      	ldr	r1, [pc, #172]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003706:	4b29      	ldr	r3, [pc, #164]	@ (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d210      	bcs.n	8003736 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003714:	4b25      	ldr	r3, [pc, #148]	@ (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f023 0207 	bic.w	r2, r3, #7
 800371c:	4923      	ldr	r1, [pc, #140]	@ (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	4313      	orrs	r3, r2
 8003722:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003724:	4b21      	ldr	r3, [pc, #132]	@ (80037ac <HAL_RCC_ClockConfig+0x1ec>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d001      	beq.n	8003736 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e036      	b.n	80037a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003742:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	4918      	ldr	r1, [pc, #96]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003750:	4313      	orrs	r3, r2
 8003752:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003760:	4b13      	ldr	r3, [pc, #76]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4910      	ldr	r1, [pc, #64]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003774:	f000 f824 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b0d      	ldr	r3, [pc, #52]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f0>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	490b      	ldr	r1, [pc, #44]	@ (80037b4 <HAL_RCC_ClockConfig+0x1f4>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
 8003790:	4a09      	ldr	r2, [pc, #36]	@ (80037b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003792:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003794:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <HAL_RCC_ClockConfig+0x1fc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe fd2d 	bl	80021f8 <HAL_InitTick>
 800379e:	4603      	mov	r3, r0
 80037a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80037a2:	7afb      	ldrb	r3, [r7, #11]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40022000 	.word	0x40022000
 80037b0:	40021000 	.word	0x40021000
 80037b4:	0800ce58 	.word	0x0800ce58
 80037b8:	20000254 	.word	0x20000254
 80037bc:	20000258 	.word	0x20000258

080037c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	@ 0x24
 80037c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ce:	4b3e      	ldr	r3, [pc, #248]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d8:	4b3b      	ldr	r3, [pc, #236]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0x34>
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b0c      	cmp	r3, #12
 80037ec:	d121      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d11e      	bne.n	8003832 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037f4:	4b34      	ldr	r3, [pc, #208]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d107      	bne.n	8003810 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003800:	4b31      	ldr	r3, [pc, #196]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	e005      	b.n	800381c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003810:	4b2d      	ldr	r3, [pc, #180]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800381c:	4a2b      	ldr	r2, [pc, #172]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003824:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10d      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d102      	bne.n	800383e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003838:	4b25      	ldr	r3, [pc, #148]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	e004      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d101      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003844:	4b23      	ldr	r3, [pc, #140]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003846:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b0c      	cmp	r3, #12
 800384c:	d134      	bne.n	80038b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800384e:	4b1e      	ldr	r3, [pc, #120]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d003      	beq.n	8003866 <HAL_RCC_GetSysClockFreq+0xa6>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d003      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0xac>
 8003864:	e005      	b.n	8003872 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003866:	4b1a      	ldr	r3, [pc, #104]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003868:	617b      	str	r3, [r7, #20]
      break;
 800386a:	e005      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800386c:	4b19      	ldr	r3, [pc, #100]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800386e:	617b      	str	r3, [r7, #20]
      break;
 8003870:	e002      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	617b      	str	r3, [r7, #20]
      break;
 8003876:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003878:	4b13      	ldr	r3, [pc, #76]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	3301      	adds	r3, #1
 8003884:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003886:	4b10      	ldr	r3, [pc, #64]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	fb03 f202 	mul.w	r2, r3, r2
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800389e:	4b0a      	ldr	r3, [pc, #40]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	0e5b      	lsrs	r3, r3, #25
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	3301      	adds	r3, #1
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038b8:	69bb      	ldr	r3, [r7, #24]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3724      	adds	r7, #36	@ 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	0800ce70 	.word	0x0800ce70
 80038d0:	00f42400 	.word	0x00f42400
 80038d4:	007a1200 	.word	0x007a1200

080038d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038dc:	4b03      	ldr	r3, [pc, #12]	@ (80038ec <HAL_RCC_GetHCLKFreq+0x14>)
 80038de:	681b      	ldr	r3, [r3, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000254 	.word	0x20000254

080038f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038f4:	f7ff fff0 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b06      	ldr	r3, [pc, #24]	@ (8003914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4904      	ldr	r1, [pc, #16]	@ (8003918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40021000 	.word	0x40021000
 8003918:	0800ce68 	.word	0x0800ce68

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003920:	f7ff ffda 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0adb      	lsrs	r3, r3, #11
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4904      	ldr	r1, [pc, #16]	@ (8003944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	f003 031f 	and.w	r3, r3, #31
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	0800ce68 	.word	0x0800ce68

08003948 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	220f      	movs	r2, #15
 8003956:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003958:	4b12      	ldr	r3, [pc, #72]	@ (80039a4 <HAL_RCC_GetClockConfig+0x5c>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0203 	and.w	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003964:	4b0f      	ldr	r3, [pc, #60]	@ (80039a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003970:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800397c:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <HAL_RCC_GetClockConfig+0x5c>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	08db      	lsrs	r3, r3, #3
 8003982:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800398a:	4b07      	ldr	r3, [pc, #28]	@ (80039a8 <HAL_RCC_GetClockConfig+0x60>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0207 	and.w	r2, r3, #7
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	601a      	str	r2, [r3, #0]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40022000 	.word	0x40022000

080039ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039c4:	f7ff f9bc 	bl	8002d40 <HAL_PWREx_GetVoltageRange>
 80039c8:	6178      	str	r0, [r7, #20]
 80039ca:	e014      	b.n	80039f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039cc:	4b25      	ldr	r3, [pc, #148]	@ (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d0:	4a24      	ldr	r2, [pc, #144]	@ (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d8:	4b22      	ldr	r3, [pc, #136]	@ (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039e4:	f7ff f9ac 	bl	8002d40 <HAL_PWREx_GetVoltageRange>
 80039e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039fc:	d10b      	bne.n	8003a16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b80      	cmp	r3, #128	@ 0x80
 8003a02:	d919      	bls.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a08:	d902      	bls.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e013      	b.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a10:	2301      	movs	r3, #1
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	e010      	b.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b80      	cmp	r3, #128	@ 0x80
 8003a1a:	d902      	bls.n	8003a22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	e00a      	b.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b80      	cmp	r3, #128	@ 0x80
 8003a26:	d102      	bne.n	8003a2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a28:	2302      	movs	r3, #2
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	e004      	b.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b70      	cmp	r3, #112	@ 0x70
 8003a32:	d101      	bne.n	8003a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a34:	2301      	movs	r3, #1
 8003a36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a38:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 0207 	bic.w	r2, r3, #7
 8003a40:	4909      	ldr	r1, [pc, #36]	@ (8003a68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a48:	4b07      	ldr	r3, [pc, #28]	@ (8003a68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d001      	beq.n	8003a5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40022000 	.word	0x40022000

08003a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a74:	2300      	movs	r3, #0
 8003a76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a78:	2300      	movs	r3, #0
 8003a7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d041      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a90:	d02a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a96:	d824      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a9c:	d008      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003aa2:	d81e      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00a      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003aa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aac:	d010      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003aae:	e018      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ab0:	4b86      	ldr	r3, [pc, #536]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a85      	ldr	r2, [pc, #532]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003abc:	e015      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fabb 	bl	8004040 <RCCEx_PLLSAI1_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ace:	e00c      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3320      	adds	r3, #32
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fba6 	bl	8004228 <RCCEx_PLLSAI2_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ae0:	e003      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ae6:	e000      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003af0:	4b76      	ldr	r3, [pc, #472]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003afe:	4973      	ldr	r1, [pc, #460]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b06:	e001      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d041      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b20:	d02a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b26:	d824      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b2c:	d008      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b32:	d81e      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b3c:	d010      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b3e:	e018      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b40:	4b62      	ldr	r3, [pc, #392]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a61      	ldr	r2, [pc, #388]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b4c:	e015      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3304      	adds	r3, #4
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fa73 	bl	8004040 <RCCEx_PLLSAI1_Config>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b5e:	e00c      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3320      	adds	r3, #32
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fb5e 	bl	8004228 <RCCEx_PLLSAI2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b70:	e003      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	74fb      	strb	r3, [r7, #19]
      break;
 8003b76:	e000      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b80:	4b52      	ldr	r3, [pc, #328]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b8e:	494f      	ldr	r1, [pc, #316]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b96:	e001      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80a0 	beq.w	8003cea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003baa:	2300      	movs	r3, #0
 8003bac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bae:	4b47      	ldr	r3, [pc, #284]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc4:	4b41      	ldr	r3, [pc, #260]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc8:	4a40      	ldr	r2, [pc, #256]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be0:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3a      	ldr	r2, [pc, #232]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bec:	f7fe fd78 	bl	80026e0 <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bf2:	e009      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf4:	f7fe fd74 	bl	80026e0 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d902      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	74fb      	strb	r3, [r7, #19]
        break;
 8003c06:	e005      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c08:	4b31      	ldr	r3, [pc, #196]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ef      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d15c      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01f      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d019      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c38:	4b24      	ldr	r3, [pc, #144]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c44:	4b21      	ldr	r3, [pc, #132]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4a:	4a20      	ldr	r2, [pc, #128]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c54:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c64:	4a19      	ldr	r2, [pc, #100]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c76:	f7fe fd33 	bl	80026e0 <HAL_GetTick>
 8003c7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c7c:	e00b      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fe fd2f 	bl	80026e0 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d902      	bls.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	74fb      	strb	r3, [r7, #19]
            break;
 8003c94:	e006      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ec      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003caa:	4b08      	ldr	r3, [pc, #32]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cba:	4904      	ldr	r1, [pc, #16]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cc2:	e009      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cc4:	7cfb      	ldrb	r3, [r7, #19]
 8003cc6:	74bb      	strb	r3, [r7, #18]
 8003cc8:	e006      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd8:	7c7b      	ldrb	r3, [r7, #17]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d105      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cde:	4b9e      	ldr	r3, [pc, #632]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	4a9d      	ldr	r2, [pc, #628]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ce8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf6:	4b98      	ldr	r3, [pc, #608]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfc:	f023 0203 	bic.w	r2, r3, #3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d04:	4994      	ldr	r1, [pc, #592]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d18:	4b8f      	ldr	r3, [pc, #572]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1e:	f023 020c 	bic.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d26:	498c      	ldr	r1, [pc, #560]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d3a:	4b87      	ldr	r3, [pc, #540]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	4983      	ldr	r1, [pc, #524]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	497b      	ldr	r1, [pc, #492]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d7e:	4b76      	ldr	r3, [pc, #472]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d8c:	4972      	ldr	r1, [pc, #456]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003da0:	4b6d      	ldr	r3, [pc, #436]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dae:	496a      	ldr	r1, [pc, #424]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dc2:	4b65      	ldr	r3, [pc, #404]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	4961      	ldr	r1, [pc, #388]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003de4:	4b5c      	ldr	r3, [pc, #368]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df2:	4959      	ldr	r1, [pc, #356]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e06:	4b54      	ldr	r3, [pc, #336]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e14:	4950      	ldr	r1, [pc, #320]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e28:	4b4b      	ldr	r3, [pc, #300]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e36:	4948      	ldr	r1, [pc, #288]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e4a:	4b43      	ldr	r3, [pc, #268]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e58:	493f      	ldr	r1, [pc, #252]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d028      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e7a:	4937      	ldr	r1, [pc, #220]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8c:	4b32      	ldr	r3, [pc, #200]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4a31      	ldr	r2, [pc, #196]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e96:	60d3      	str	r3, [r2, #12]
 8003e98:	e011      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ea2:	d10c      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 f8c8 	bl	8004040 <RCCEx_PLLSAI1_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003eba:	7cfb      	ldrb	r3, [r7, #19]
 8003ebc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d028      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003eca:	4b23      	ldr	r3, [pc, #140]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed8:	491f      	ldr	r1, [pc, #124]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ee8:	d106      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003eea:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	4a1a      	ldr	r2, [pc, #104]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ef4:	60d3      	str	r3, [r2, #12]
 8003ef6:	e011      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3304      	adds	r3, #4
 8003f06:	2101      	movs	r1, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 f899 	bl	8004040 <RCCEx_PLLSAI1_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d02b      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f28:	4b0b      	ldr	r3, [pc, #44]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f36:	4908      	ldr	r1, [pc, #32]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f46:	d109      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f48:	4b03      	ldr	r3, [pc, #12]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4a02      	ldr	r2, [pc, #8]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f52:	60d3      	str	r3, [r2, #12]
 8003f54:	e014      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 f867 	bl	8004040 <RCCEx_PLLSAI1_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d02f      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f9a:	4928      	ldr	r1, [pc, #160]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003faa:	d10d      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f844 	bl	8004040 <RCCEx_PLLSAI1_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d014      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fc2:	7cfb      	ldrb	r3, [r7, #19]
 8003fc4:	74bb      	strb	r3, [r7, #18]
 8003fc6:	e011      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3320      	adds	r3, #32
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f925 	bl	8004228 <RCCEx_PLLSAI2_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ff8:	4b10      	ldr	r3, [pc, #64]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004006:	490d      	ldr	r1, [pc, #52]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00b      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800401a:	4b08      	ldr	r3, [pc, #32]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004020:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800402a:	4904      	ldr	r1, [pc, #16]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004032:	7cbb      	ldrb	r3, [r7, #18]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40021000 	.word	0x40021000

08004040 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800404e:	4b75      	ldr	r3, [pc, #468]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d018      	beq.n	800408c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800405a:	4b72      	ldr	r3, [pc, #456]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0203 	and.w	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d10d      	bne.n	8004086 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
       ||
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004072:	4b6c      	ldr	r3, [pc, #432]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
       ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d047      	beq.n	8004116 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
 800408a:	e044      	b.n	8004116 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d018      	beq.n	80040c6 <RCCEx_PLLSAI1_Config+0x86>
 8004094:	2b03      	cmp	r3, #3
 8004096:	d825      	bhi.n	80040e4 <RCCEx_PLLSAI1_Config+0xa4>
 8004098:	2b01      	cmp	r3, #1
 800409a:	d002      	beq.n	80040a2 <RCCEx_PLLSAI1_Config+0x62>
 800409c:	2b02      	cmp	r3, #2
 800409e:	d009      	beq.n	80040b4 <RCCEx_PLLSAI1_Config+0x74>
 80040a0:	e020      	b.n	80040e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040a2:	4b60      	ldr	r3, [pc, #384]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d11d      	bne.n	80040ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b2:	e01a      	b.n	80040ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d116      	bne.n	80040ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c4:	e013      	b.n	80040ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040c6:	4b57      	ldr	r3, [pc, #348]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10f      	bne.n	80040f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040d2:	4b54      	ldr	r3, [pc, #336]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040e2:	e006      	b.n	80040f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      break;
 80040e8:	e004      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ea:	bf00      	nop
 80040ec:	e002      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10d      	bne.n	8004116 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6819      	ldr	r1, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	3b01      	subs	r3, #1
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	430b      	orrs	r3, r1
 8004110:	4944      	ldr	r1, [pc, #272]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004112:	4313      	orrs	r3, r2
 8004114:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d17d      	bne.n	8004218 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800411c:	4b41      	ldr	r3, [pc, #260]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a40      	ldr	r2, [pc, #256]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004122:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004128:	f7fe fada 	bl	80026e0 <HAL_GetTick>
 800412c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800412e:	e009      	b.n	8004144 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004130:	f7fe fad6 	bl	80026e0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d902      	bls.n	8004144 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	73fb      	strb	r3, [r7, #15]
        break;
 8004142:	e005      	b.n	8004150 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004144:	4b37      	ldr	r3, [pc, #220]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1ef      	bne.n	8004130 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d160      	bne.n	8004218 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d111      	bne.n	8004180 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800415c:	4b31      	ldr	r3, [pc, #196]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6892      	ldr	r2, [r2, #8]
 800416c:	0211      	lsls	r1, r2, #8
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68d2      	ldr	r2, [r2, #12]
 8004172:	0912      	lsrs	r2, r2, #4
 8004174:	0452      	lsls	r2, r2, #17
 8004176:	430a      	orrs	r2, r1
 8004178:	492a      	ldr	r1, [pc, #168]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	610b      	str	r3, [r1, #16]
 800417e:	e027      	b.n	80041d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d112      	bne.n	80041ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004186:	4b27      	ldr	r3, [pc, #156]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800418e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6892      	ldr	r2, [r2, #8]
 8004196:	0211      	lsls	r1, r2, #8
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6912      	ldr	r2, [r2, #16]
 800419c:	0852      	lsrs	r2, r2, #1
 800419e:	3a01      	subs	r2, #1
 80041a0:	0552      	lsls	r2, r2, #21
 80041a2:	430a      	orrs	r2, r1
 80041a4:	491f      	ldr	r1, [pc, #124]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	610b      	str	r3, [r1, #16]
 80041aa:	e011      	b.n	80041d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041b4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6892      	ldr	r2, [r2, #8]
 80041bc:	0211      	lsls	r1, r2, #8
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6952      	ldr	r2, [r2, #20]
 80041c2:	0852      	lsrs	r2, r2, #1
 80041c4:	3a01      	subs	r2, #1
 80041c6:	0652      	lsls	r2, r2, #25
 80041c8:	430a      	orrs	r2, r1
 80041ca:	4916      	ldr	r1, [pc, #88]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041d0:	4b14      	ldr	r3, [pc, #80]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a13      	ldr	r2, [pc, #76]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fe fa80 	bl	80026e0 <HAL_GetTick>
 80041e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041e2:	e009      	b.n	80041f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041e4:	f7fe fa7c 	bl	80026e0 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d902      	bls.n	80041f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	73fb      	strb	r3, [r7, #15]
          break;
 80041f6:	e005      	b.n	8004204 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0ef      	beq.n	80041e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800420a:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	4904      	ldr	r1, [pc, #16]	@ (8004224 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004214:	4313      	orrs	r3, r2
 8004216:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000

08004228 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004236:	4b6a      	ldr	r3, [pc, #424]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d018      	beq.n	8004274 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004242:	4b67      	ldr	r3, [pc, #412]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0203 	and.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d10d      	bne.n	800426e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
       ||
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800425a:	4b61      	ldr	r3, [pc, #388]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
       ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d047      	beq.n	80042fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
 8004272:	e044      	b.n	80042fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b03      	cmp	r3, #3
 800427a:	d018      	beq.n	80042ae <RCCEx_PLLSAI2_Config+0x86>
 800427c:	2b03      	cmp	r3, #3
 800427e:	d825      	bhi.n	80042cc <RCCEx_PLLSAI2_Config+0xa4>
 8004280:	2b01      	cmp	r3, #1
 8004282:	d002      	beq.n	800428a <RCCEx_PLLSAI2_Config+0x62>
 8004284:	2b02      	cmp	r3, #2
 8004286:	d009      	beq.n	800429c <RCCEx_PLLSAI2_Config+0x74>
 8004288:	e020      	b.n	80042cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800428a:	4b55      	ldr	r3, [pc, #340]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d11d      	bne.n	80042d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800429a:	e01a      	b.n	80042d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800429c:	4b50      	ldr	r3, [pc, #320]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d116      	bne.n	80042d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ac:	e013      	b.n	80042d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042ae:	4b4c      	ldr	r3, [pc, #304]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ba:	4b49      	ldr	r3, [pc, #292]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042ca:	e006      	b.n	80042da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
      break;
 80042d0:	e004      	b.n	80042dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042da:	bf00      	nop
    }

    if(status == HAL_OK)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10d      	bne.n	80042fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042e2:	4b3f      	ldr	r3, [pc, #252]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6819      	ldr	r1, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	430b      	orrs	r3, r1
 80042f8:	4939      	ldr	r1, [pc, #228]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d167      	bne.n	80043d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004304:	4b36      	ldr	r3, [pc, #216]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a35      	ldr	r2, [pc, #212]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800430e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004310:	f7fe f9e6 	bl	80026e0 <HAL_GetTick>
 8004314:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004316:	e009      	b.n	800432c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004318:	f7fe f9e2 	bl	80026e0 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d902      	bls.n	800432c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	73fb      	strb	r3, [r7, #15]
        break;
 800432a:	e005      	b.n	8004338 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800432c:	4b2c      	ldr	r3, [pc, #176]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1ef      	bne.n	8004318 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d14a      	bne.n	80043d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d111      	bne.n	8004368 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004344:	4b26      	ldr	r3, [pc, #152]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800434c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6892      	ldr	r2, [r2, #8]
 8004354:	0211      	lsls	r1, r2, #8
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68d2      	ldr	r2, [r2, #12]
 800435a:	0912      	lsrs	r2, r2, #4
 800435c:	0452      	lsls	r2, r2, #17
 800435e:	430a      	orrs	r2, r1
 8004360:	491f      	ldr	r1, [pc, #124]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	614b      	str	r3, [r1, #20]
 8004366:	e011      	b.n	800438c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004368:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004370:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6892      	ldr	r2, [r2, #8]
 8004378:	0211      	lsls	r1, r2, #8
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6912      	ldr	r2, [r2, #16]
 800437e:	0852      	lsrs	r2, r2, #1
 8004380:	3a01      	subs	r2, #1
 8004382:	0652      	lsls	r2, r2, #25
 8004384:	430a      	orrs	r2, r1
 8004386:	4916      	ldr	r1, [pc, #88]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004388:	4313      	orrs	r3, r2
 800438a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800438c:	4b14      	ldr	r3, [pc, #80]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a13      	ldr	r2, [pc, #76]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004396:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fe f9a2 	bl	80026e0 <HAL_GetTick>
 800439c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800439e:	e009      	b.n	80043b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043a0:	f7fe f99e 	bl	80026e0 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d902      	bls.n	80043b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	73fb      	strb	r3, [r7, #15]
          break;
 80043b2:	e005      	b.n	80043c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043b4:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0ef      	beq.n	80043a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043c6:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	4904      	ldr	r1, [pc, #16]	@ (80043e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000

080043e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e049      	b.n	800448a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f841 	bl	8004492 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f000 f9e0 	bl	80047e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d001      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e04f      	b.n	8004560 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a23      	ldr	r2, [pc, #140]	@ (800456c <HAL_TIM_Base_Start_IT+0xc4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01d      	beq.n	800451e <HAL_TIM_Base_Start_IT+0x76>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ea:	d018      	beq.n	800451e <HAL_TIM_Base_Start_IT+0x76>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004570 <HAL_TIM_Base_Start_IT+0xc8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_TIM_Base_Start_IT+0x76>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004574 <HAL_TIM_Base_Start_IT+0xcc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00e      	beq.n	800451e <HAL_TIM_Base_Start_IT+0x76>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1c      	ldr	r2, [pc, #112]	@ (8004578 <HAL_TIM_Base_Start_IT+0xd0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d009      	beq.n	800451e <HAL_TIM_Base_Start_IT+0x76>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <HAL_TIM_Base_Start_IT+0xd4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_TIM_Base_Start_IT+0x76>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a19      	ldr	r2, [pc, #100]	@ (8004580 <HAL_TIM_Base_Start_IT+0xd8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d115      	bne.n	800454a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	4b17      	ldr	r3, [pc, #92]	@ (8004584 <HAL_TIM_Base_Start_IT+0xdc>)
 8004526:	4013      	ands	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b06      	cmp	r3, #6
 800452e:	d015      	beq.n	800455c <HAL_TIM_Base_Start_IT+0xb4>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004536:	d011      	beq.n	800455c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004548:	e008      	b.n	800455c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0201 	orr.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e000      	b.n	800455e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40000400 	.word	0x40000400
 8004574:	40000800 	.word	0x40000800
 8004578:	40000c00 	.word	0x40000c00
 800457c:	40013400 	.word	0x40013400
 8004580:	40014000 	.word	0x40014000
 8004584:	00010007 	.word	0x00010007

08004588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d020      	beq.n	80045ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0202 	mvn.w	r2, #2
 80045bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f8e9 	bl	80047aa <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f8db 	bl	8004796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f8ec 	bl	80047be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d020      	beq.n	8004638 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01b      	beq.n	8004638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0204 	mvn.w	r2, #4
 8004608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8c3 	bl	80047aa <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f8b5 	bl	8004796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8c6 	bl	80047be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d020      	beq.n	8004684 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01b      	beq.n	8004684 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0208 	mvn.w	r2, #8
 8004654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2204      	movs	r2, #4
 800465a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f89d 	bl	80047aa <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f88f 	bl	8004796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f8a0 	bl	80047be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b00      	cmp	r3, #0
 800468c:	d020      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01b      	beq.n	80046d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0210 	mvn.w	r2, #16
 80046a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2208      	movs	r2, #8
 80046a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f877 	bl	80047aa <HAL_TIM_IC_CaptureCallback>
 80046bc:	e005      	b.n	80046ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f869 	bl	8004796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f87a 	bl	80047be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00c      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0201 	mvn.w	r2, #1
 80046ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd fd42 	bl	8002178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00c      	beq.n	8004722 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800471a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f913 	bl	8004948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00c      	beq.n	8004746 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800473e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f90b 	bl	800495c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00c      	beq.n	800476a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f834 	bl	80047d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00c      	beq.n	800478e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f06f 0220 	mvn.w	r2, #32
 8004786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f8d3 	bl	8004934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
	...

080047e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a46      	ldr	r2, [pc, #280]	@ (8004914 <TIM_Base_SetConfig+0x12c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d013      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004806:	d00f      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a43      	ldr	r2, [pc, #268]	@ (8004918 <TIM_Base_SetConfig+0x130>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00b      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a42      	ldr	r2, [pc, #264]	@ (800491c <TIM_Base_SetConfig+0x134>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d007      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a41      	ldr	r2, [pc, #260]	@ (8004920 <TIM_Base_SetConfig+0x138>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d003      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a40      	ldr	r2, [pc, #256]	@ (8004924 <TIM_Base_SetConfig+0x13c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d108      	bne.n	800483a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800482e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a35      	ldr	r2, [pc, #212]	@ (8004914 <TIM_Base_SetConfig+0x12c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01f      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004848:	d01b      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a32      	ldr	r2, [pc, #200]	@ (8004918 <TIM_Base_SetConfig+0x130>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d017      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a31      	ldr	r2, [pc, #196]	@ (800491c <TIM_Base_SetConfig+0x134>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a30      	ldr	r2, [pc, #192]	@ (8004920 <TIM_Base_SetConfig+0x138>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00f      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2f      	ldr	r2, [pc, #188]	@ (8004924 <TIM_Base_SetConfig+0x13c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00b      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2e      	ldr	r2, [pc, #184]	@ (8004928 <TIM_Base_SetConfig+0x140>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d007      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a2d      	ldr	r2, [pc, #180]	@ (800492c <TIM_Base_SetConfig+0x144>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d003      	beq.n	8004882 <TIM_Base_SetConfig+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2c      	ldr	r2, [pc, #176]	@ (8004930 <TIM_Base_SetConfig+0x148>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d108      	bne.n	8004894 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a16      	ldr	r2, [pc, #88]	@ (8004914 <TIM_Base_SetConfig+0x12c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00f      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a18      	ldr	r2, [pc, #96]	@ (8004924 <TIM_Base_SetConfig+0x13c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a17      	ldr	r2, [pc, #92]	@ (8004928 <TIM_Base_SetConfig+0x140>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d007      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a16      	ldr	r2, [pc, #88]	@ (800492c <TIM_Base_SetConfig+0x144>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <TIM_Base_SetConfig+0x148>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d105      	bne.n	8004906 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f023 0201 	bic.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	611a      	str	r2, [r3, #16]
  }
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40013400 	.word	0x40013400
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800

08004934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e040      	b.n	8004a04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fd fde2 	bl	800255c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2224      	movs	r2, #36	@ 0x24
 800499c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fedc 	bl	8005774 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fc21 	bl	8005204 <UART_SetConfig>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e01b      	b.n	8004a04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 ff5b 	bl	80058b8 <UART_CheckIdleState>
 8004a02:	4603      	mov	r3, r0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	@ 0x28
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	d177      	bne.n	8004b14 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_UART_Transmit+0x24>
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e070      	b.n	8004b16 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2221      	movs	r2, #33	@ 0x21
 8004a40:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a42:	f7fd fe4d 	bl	80026e0 <HAL_GetTick>
 8004a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	88fa      	ldrh	r2, [r7, #6]
 8004a4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	88fa      	ldrh	r2, [r7, #6]
 8004a54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a60:	d108      	bne.n	8004a74 <HAL_UART_Transmit+0x68>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	61bb      	str	r3, [r7, #24]
 8004a72:	e003      	b.n	8004a7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a7c:	e02f      	b.n	8004ade <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2200      	movs	r2, #0
 8004a86:	2180      	movs	r1, #128	@ 0x80
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 ffbd 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d004      	beq.n	8004a9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e03b      	b.n	8004b16 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10b      	bne.n	8004abc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	881a      	ldrh	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab0:	b292      	uxth	r2, r2
 8004ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	61bb      	str	r3, [r7, #24]
 8004aba:	e007      	b.n	8004acc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	781a      	ldrb	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1c9      	bne.n	8004a7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2200      	movs	r2, #0
 8004af2:	2140      	movs	r1, #64	@ 0x40
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 ff87 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d004      	beq.n	8004b0a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e005      	b.n	8004b16 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e000      	b.n	8004b16 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
  }
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	@ 0x28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d137      	bne.n	8004ba8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_UART_Receive_IT+0x24>
 8004b3e:	88fb      	ldrh	r3, [r7, #6]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e030      	b.n	8004baa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a18      	ldr	r2, [pc, #96]	@ (8004bb4 <HAL_UART_Receive_IT+0x94>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d01f      	beq.n	8004b98 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d018      	beq.n	8004b98 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	613b      	str	r3, [r7, #16]
   return(result);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	623b      	str	r3, [r7, #32]
 8004b86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	69f9      	ldr	r1, [r7, #28]
 8004b8a:	6a3a      	ldr	r2, [r7, #32]
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e6      	bne.n	8004b66 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b98:	88fb      	ldrh	r3, [r7, #6]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 ffa0 	bl	8005ae4 <UART_Start_Receive_IT>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	e000      	b.n	8004baa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ba8:	2302      	movs	r3, #2
  }
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3728      	adds	r7, #40	@ 0x28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40008000 	.word	0x40008000

08004bb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b0ba      	sub	sp, #232	@ 0xe8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004be2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004be6:	4013      	ands	r3, r2
 8004be8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d115      	bne.n	8004c20 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00f      	beq.n	8004c20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d009      	beq.n	8004c20 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 82ca 	beq.w	80051aa <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
      }
      return;
 8004c1e:	e2c4      	b.n	80051aa <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8117 	beq.w	8004e58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004c36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004c3a:	4b85      	ldr	r3, [pc, #532]	@ (8004e50 <HAL_UART_IRQHandler+0x298>)
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 810a 	beq.w	8004e58 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d011      	beq.n	8004c74 <HAL_UART_IRQHandler+0xbc>
 8004c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2201      	movs	r2, #1
 8004c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c6a:	f043 0201 	orr.w	r2, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d011      	beq.n	8004ca4 <HAL_UART_IRQHandler+0xec>
 8004c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00b      	beq.n	8004ca4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2202      	movs	r2, #2
 8004c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c9a:	f043 0204 	orr.w	r2, r3, #4
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d011      	beq.n	8004cd4 <HAL_UART_IRQHandler+0x11c>
 8004cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00b      	beq.n	8004cd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cca:	f043 0202 	orr.w	r2, r3, #2
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d017      	beq.n	8004d10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d105      	bne.n	8004cf8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00b      	beq.n	8004d10 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d06:	f043 0208 	orr.w	r2, r3, #8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d012      	beq.n	8004d42 <HAL_UART_IRQHandler+0x18a>
 8004d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00c      	beq.n	8004d42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d38:	f043 0220 	orr.w	r2, r3, #32
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8230 	beq.w	80051ae <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00d      	beq.n	8004d76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8a:	2b40      	cmp	r3, #64	@ 0x40
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d04f      	beq.n	8004e3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 ff68 	bl	8005c70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004daa:	2b40      	cmp	r3, #64	@ 0x40
 8004dac:	d141      	bne.n	8004e32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3308      	adds	r3, #8
 8004db4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1d9      	bne.n	8004dae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d013      	beq.n	8004e2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e06:	4a13      	ldr	r2, [pc, #76]	@ (8004e54 <HAL_UART_IRQHandler+0x29c>)
 8004e08:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fd fd92 	bl	8002938 <HAL_DMA_Abort_IT>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d017      	beq.n	8004e4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e24:	4610      	mov	r0, r2
 8004e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e28:	e00f      	b.n	8004e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f9d4 	bl	80051d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e30:	e00b      	b.n	8004e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f9d0 	bl	80051d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e38:	e007      	b.n	8004e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f9cc 	bl	80051d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004e48:	e1b1      	b.n	80051ae <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4a:	bf00      	nop
    return;
 8004e4c:	e1af      	b.n	80051ae <HAL_UART_IRQHandler+0x5f6>
 8004e4e:	bf00      	nop
 8004e50:	04000120 	.word	0x04000120
 8004e54:	08005d39 	.word	0x08005d39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	f040 816a 	bne.w	8005136 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 8163 	beq.w	8005136 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 815c 	beq.w	8005136 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2210      	movs	r2, #16
 8004e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e90:	2b40      	cmp	r3, #64	@ 0x40
 8004e92:	f040 80d4 	bne.w	800503e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ea2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 80ad 	beq.w	8005006 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	f080 80a5 	bcs.w	8005006 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f040 8086 	bne.w	8004fe4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f06:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1da      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3308      	adds	r3, #8
 8004f28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3308      	adds	r3, #8
 8004f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e1      	bne.n	8004f22 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3308      	adds	r3, #8
 8004f64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e3      	bne.n	8004f5e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fb4:	f023 0310 	bic.w	r3, r3, #16
 8004fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fc8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e4      	bne.n	8004fa4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fd fc6c 	bl	80028bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f8f4 	bl	80051ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005004:	e0d5      	b.n	80051b2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800500c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005010:	429a      	cmp	r2, r3
 8005012:	f040 80ce 	bne.w	80051b2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b20      	cmp	r3, #32
 8005024:	f040 80c5 	bne.w	80051b2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f8d8 	bl	80051ec <HAL_UARTEx_RxEventCallback>
      return;
 800503c:	e0b9      	b.n	80051b2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800504a:	b29b      	uxth	r3, r3
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 80ab 	beq.w	80051b6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80a6 	beq.w	80051b6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800507e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800508c:	647b      	str	r3, [r7, #68]	@ 0x44
 800508e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800509a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e4      	bne.n	800506a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3308      	adds	r3, #8
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	623b      	str	r3, [r7, #32]
   return(result);
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	f023 0301 	bic.w	r3, r3, #1
 80050b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80050c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e3      	bne.n	80050a0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f023 0310 	bic.w	r3, r3, #16
 8005100:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	69b9      	ldr	r1, [r7, #24]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	617b      	str	r3, [r7, #20]
   return(result);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e4      	bne.n	80050ec <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800512c:	4619      	mov	r1, r3
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f85c 	bl	80051ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005134:	e03f      	b.n	80051b6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800513a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00e      	beq.n	8005160 <HAL_UART_IRQHandler+0x5a8>
 8005142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d008      	beq.n	8005160 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005156:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 ffe9 	bl	8006130 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800515e:	e02d      	b.n	80051bc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00e      	beq.n	800518a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800516c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005174:	2b00      	cmp	r3, #0
 8005176:	d008      	beq.n	800518a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01c      	beq.n	80051ba <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	4798      	blx	r3
    }
    return;
 8005188:	e017      	b.n	80051ba <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800518a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800518e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005192:	2b00      	cmp	r3, #0
 8005194:	d012      	beq.n	80051bc <HAL_UART_IRQHandler+0x604>
 8005196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800519a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00c      	beq.n	80051bc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fdde 	bl	8005d64 <UART_EndTransmit_IT>
    return;
 80051a8:	e008      	b.n	80051bc <HAL_UART_IRQHandler+0x604>
      return;
 80051aa:	bf00      	nop
 80051ac:	e006      	b.n	80051bc <HAL_UART_IRQHandler+0x604>
    return;
 80051ae:	bf00      	nop
 80051b0:	e004      	b.n	80051bc <HAL_UART_IRQHandler+0x604>
      return;
 80051b2:	bf00      	nop
 80051b4:	e002      	b.n	80051bc <HAL_UART_IRQHandler+0x604>
      return;
 80051b6:	bf00      	nop
 80051b8:	e000      	b.n	80051bc <HAL_UART_IRQHandler+0x604>
    return;
 80051ba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80051bc:	37e8      	adds	r7, #232	@ 0xe8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop

080051c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005208:	b08a      	sub	sp, #40	@ 0x28
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	431a      	orrs	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	431a      	orrs	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	4313      	orrs	r3, r2
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4ba4      	ldr	r3, [pc, #656]	@ (80054c4 <UART_SetConfig+0x2c0>)
 8005234:	4013      	ands	r3, r2
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800523c:	430b      	orrs	r3, r1
 800523e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a99      	ldr	r2, [pc, #612]	@ (80054c8 <UART_SetConfig+0x2c4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800526c:	4313      	orrs	r3, r2
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005280:	430a      	orrs	r2, r1
 8005282:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a90      	ldr	r2, [pc, #576]	@ (80054cc <UART_SetConfig+0x2c8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d126      	bne.n	80052dc <UART_SetConfig+0xd8>
 800528e:	4b90      	ldr	r3, [pc, #576]	@ (80054d0 <UART_SetConfig+0x2cc>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	2b03      	cmp	r3, #3
 800529a:	d81b      	bhi.n	80052d4 <UART_SetConfig+0xd0>
 800529c:	a201      	add	r2, pc, #4	@ (adr r2, 80052a4 <UART_SetConfig+0xa0>)
 800529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a2:	bf00      	nop
 80052a4:	080052b5 	.word	0x080052b5
 80052a8:	080052c5 	.word	0x080052c5
 80052ac:	080052bd 	.word	0x080052bd
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ba:	e116      	b.n	80054ea <UART_SetConfig+0x2e6>
 80052bc:	2302      	movs	r3, #2
 80052be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052c2:	e112      	b.n	80054ea <UART_SetConfig+0x2e6>
 80052c4:	2304      	movs	r3, #4
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ca:	e10e      	b.n	80054ea <UART_SetConfig+0x2e6>
 80052cc:	2308      	movs	r3, #8
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052d2:	e10a      	b.n	80054ea <UART_SetConfig+0x2e6>
 80052d4:	2310      	movs	r3, #16
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052da:	e106      	b.n	80054ea <UART_SetConfig+0x2e6>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a7c      	ldr	r2, [pc, #496]	@ (80054d4 <UART_SetConfig+0x2d0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d138      	bne.n	8005358 <UART_SetConfig+0x154>
 80052e6:	4b7a      	ldr	r3, [pc, #488]	@ (80054d0 <UART_SetConfig+0x2cc>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ec:	f003 030c 	and.w	r3, r3, #12
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	d82d      	bhi.n	8005350 <UART_SetConfig+0x14c>
 80052f4:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <UART_SetConfig+0xf8>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	08005331 	.word	0x08005331
 8005300:	08005351 	.word	0x08005351
 8005304:	08005351 	.word	0x08005351
 8005308:	08005351 	.word	0x08005351
 800530c:	08005341 	.word	0x08005341
 8005310:	08005351 	.word	0x08005351
 8005314:	08005351 	.word	0x08005351
 8005318:	08005351 	.word	0x08005351
 800531c:	08005339 	.word	0x08005339
 8005320:	08005351 	.word	0x08005351
 8005324:	08005351 	.word	0x08005351
 8005328:	08005351 	.word	0x08005351
 800532c:	08005349 	.word	0x08005349
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005336:	e0d8      	b.n	80054ea <UART_SetConfig+0x2e6>
 8005338:	2302      	movs	r3, #2
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800533e:	e0d4      	b.n	80054ea <UART_SetConfig+0x2e6>
 8005340:	2304      	movs	r3, #4
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005346:	e0d0      	b.n	80054ea <UART_SetConfig+0x2e6>
 8005348:	2308      	movs	r3, #8
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800534e:	e0cc      	b.n	80054ea <UART_SetConfig+0x2e6>
 8005350:	2310      	movs	r3, #16
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005356:	e0c8      	b.n	80054ea <UART_SetConfig+0x2e6>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a5e      	ldr	r2, [pc, #376]	@ (80054d8 <UART_SetConfig+0x2d4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d125      	bne.n	80053ae <UART_SetConfig+0x1aa>
 8005362:	4b5b      	ldr	r3, [pc, #364]	@ (80054d0 <UART_SetConfig+0x2cc>)
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005368:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800536c:	2b30      	cmp	r3, #48	@ 0x30
 800536e:	d016      	beq.n	800539e <UART_SetConfig+0x19a>
 8005370:	2b30      	cmp	r3, #48	@ 0x30
 8005372:	d818      	bhi.n	80053a6 <UART_SetConfig+0x1a2>
 8005374:	2b20      	cmp	r3, #32
 8005376:	d00a      	beq.n	800538e <UART_SetConfig+0x18a>
 8005378:	2b20      	cmp	r3, #32
 800537a:	d814      	bhi.n	80053a6 <UART_SetConfig+0x1a2>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <UART_SetConfig+0x182>
 8005380:	2b10      	cmp	r3, #16
 8005382:	d008      	beq.n	8005396 <UART_SetConfig+0x192>
 8005384:	e00f      	b.n	80053a6 <UART_SetConfig+0x1a2>
 8005386:	2300      	movs	r3, #0
 8005388:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800538c:	e0ad      	b.n	80054ea <UART_SetConfig+0x2e6>
 800538e:	2302      	movs	r3, #2
 8005390:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005394:	e0a9      	b.n	80054ea <UART_SetConfig+0x2e6>
 8005396:	2304      	movs	r3, #4
 8005398:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800539c:	e0a5      	b.n	80054ea <UART_SetConfig+0x2e6>
 800539e:	2308      	movs	r3, #8
 80053a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053a4:	e0a1      	b.n	80054ea <UART_SetConfig+0x2e6>
 80053a6:	2310      	movs	r3, #16
 80053a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ac:	e09d      	b.n	80054ea <UART_SetConfig+0x2e6>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a4a      	ldr	r2, [pc, #296]	@ (80054dc <UART_SetConfig+0x2d8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d125      	bne.n	8005404 <UART_SetConfig+0x200>
 80053b8:	4b45      	ldr	r3, [pc, #276]	@ (80054d0 <UART_SetConfig+0x2cc>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80053c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80053c4:	d016      	beq.n	80053f4 <UART_SetConfig+0x1f0>
 80053c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80053c8:	d818      	bhi.n	80053fc <UART_SetConfig+0x1f8>
 80053ca:	2b80      	cmp	r3, #128	@ 0x80
 80053cc:	d00a      	beq.n	80053e4 <UART_SetConfig+0x1e0>
 80053ce:	2b80      	cmp	r3, #128	@ 0x80
 80053d0:	d814      	bhi.n	80053fc <UART_SetConfig+0x1f8>
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <UART_SetConfig+0x1d8>
 80053d6:	2b40      	cmp	r3, #64	@ 0x40
 80053d8:	d008      	beq.n	80053ec <UART_SetConfig+0x1e8>
 80053da:	e00f      	b.n	80053fc <UART_SetConfig+0x1f8>
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053e2:	e082      	b.n	80054ea <UART_SetConfig+0x2e6>
 80053e4:	2302      	movs	r3, #2
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ea:	e07e      	b.n	80054ea <UART_SetConfig+0x2e6>
 80053ec:	2304      	movs	r3, #4
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053f2:	e07a      	b.n	80054ea <UART_SetConfig+0x2e6>
 80053f4:	2308      	movs	r3, #8
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053fa:	e076      	b.n	80054ea <UART_SetConfig+0x2e6>
 80053fc:	2310      	movs	r3, #16
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005402:	e072      	b.n	80054ea <UART_SetConfig+0x2e6>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a35      	ldr	r2, [pc, #212]	@ (80054e0 <UART_SetConfig+0x2dc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d12a      	bne.n	8005464 <UART_SetConfig+0x260>
 800540e:	4b30      	ldr	r3, [pc, #192]	@ (80054d0 <UART_SetConfig+0x2cc>)
 8005410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005418:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800541c:	d01a      	beq.n	8005454 <UART_SetConfig+0x250>
 800541e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005422:	d81b      	bhi.n	800545c <UART_SetConfig+0x258>
 8005424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005428:	d00c      	beq.n	8005444 <UART_SetConfig+0x240>
 800542a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800542e:	d815      	bhi.n	800545c <UART_SetConfig+0x258>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <UART_SetConfig+0x238>
 8005434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005438:	d008      	beq.n	800544c <UART_SetConfig+0x248>
 800543a:	e00f      	b.n	800545c <UART_SetConfig+0x258>
 800543c:	2300      	movs	r3, #0
 800543e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005442:	e052      	b.n	80054ea <UART_SetConfig+0x2e6>
 8005444:	2302      	movs	r3, #2
 8005446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800544a:	e04e      	b.n	80054ea <UART_SetConfig+0x2e6>
 800544c:	2304      	movs	r3, #4
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005452:	e04a      	b.n	80054ea <UART_SetConfig+0x2e6>
 8005454:	2308      	movs	r3, #8
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800545a:	e046      	b.n	80054ea <UART_SetConfig+0x2e6>
 800545c:	2310      	movs	r3, #16
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005462:	e042      	b.n	80054ea <UART_SetConfig+0x2e6>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a17      	ldr	r2, [pc, #92]	@ (80054c8 <UART_SetConfig+0x2c4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d13a      	bne.n	80054e4 <UART_SetConfig+0x2e0>
 800546e:	4b18      	ldr	r3, [pc, #96]	@ (80054d0 <UART_SetConfig+0x2cc>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005474:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005478:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800547c:	d01a      	beq.n	80054b4 <UART_SetConfig+0x2b0>
 800547e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005482:	d81b      	bhi.n	80054bc <UART_SetConfig+0x2b8>
 8005484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005488:	d00c      	beq.n	80054a4 <UART_SetConfig+0x2a0>
 800548a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800548e:	d815      	bhi.n	80054bc <UART_SetConfig+0x2b8>
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <UART_SetConfig+0x298>
 8005494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005498:	d008      	beq.n	80054ac <UART_SetConfig+0x2a8>
 800549a:	e00f      	b.n	80054bc <UART_SetConfig+0x2b8>
 800549c:	2300      	movs	r3, #0
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054a2:	e022      	b.n	80054ea <UART_SetConfig+0x2e6>
 80054a4:	2302      	movs	r3, #2
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054aa:	e01e      	b.n	80054ea <UART_SetConfig+0x2e6>
 80054ac:	2304      	movs	r3, #4
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054b2:	e01a      	b.n	80054ea <UART_SetConfig+0x2e6>
 80054b4:	2308      	movs	r3, #8
 80054b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ba:	e016      	b.n	80054ea <UART_SetConfig+0x2e6>
 80054bc:	2310      	movs	r3, #16
 80054be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054c2:	e012      	b.n	80054ea <UART_SetConfig+0x2e6>
 80054c4:	efff69f3 	.word	0xefff69f3
 80054c8:	40008000 	.word	0x40008000
 80054cc:	40013800 	.word	0x40013800
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40004400 	.word	0x40004400
 80054d8:	40004800 	.word	0x40004800
 80054dc:	40004c00 	.word	0x40004c00
 80054e0:	40005000 	.word	0x40005000
 80054e4:	2310      	movs	r3, #16
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a9f      	ldr	r2, [pc, #636]	@ (800576c <UART_SetConfig+0x568>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d17a      	bne.n	80055ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d824      	bhi.n	8005546 <UART_SetConfig+0x342>
 80054fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005504 <UART_SetConfig+0x300>)
 80054fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005502:	bf00      	nop
 8005504:	08005529 	.word	0x08005529
 8005508:	08005547 	.word	0x08005547
 800550c:	08005531 	.word	0x08005531
 8005510:	08005547 	.word	0x08005547
 8005514:	08005537 	.word	0x08005537
 8005518:	08005547 	.word	0x08005547
 800551c:	08005547 	.word	0x08005547
 8005520:	08005547 	.word	0x08005547
 8005524:	0800553f 	.word	0x0800553f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005528:	f7fe f9e2 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 800552c:	61f8      	str	r0, [r7, #28]
        break;
 800552e:	e010      	b.n	8005552 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005530:	4b8f      	ldr	r3, [pc, #572]	@ (8005770 <UART_SetConfig+0x56c>)
 8005532:	61fb      	str	r3, [r7, #28]
        break;
 8005534:	e00d      	b.n	8005552 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005536:	f7fe f943 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 800553a:	61f8      	str	r0, [r7, #28]
        break;
 800553c:	e009      	b.n	8005552 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005542:	61fb      	str	r3, [r7, #28]
        break;
 8005544:	e005      	b.n	8005552 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005550:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 80fb 	beq.w	8005750 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	429a      	cmp	r2, r3
 8005568:	d305      	bcc.n	8005576 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	429a      	cmp	r2, r3
 8005574:	d903      	bls.n	800557e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800557c:	e0e8      	b.n	8005750 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	2200      	movs	r2, #0
 8005582:	461c      	mov	r4, r3
 8005584:	4615      	mov	r5, r2
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	022b      	lsls	r3, r5, #8
 8005590:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005594:	0222      	lsls	r2, r4, #8
 8005596:	68f9      	ldr	r1, [r7, #12]
 8005598:	6849      	ldr	r1, [r1, #4]
 800559a:	0849      	lsrs	r1, r1, #1
 800559c:	2000      	movs	r0, #0
 800559e:	4688      	mov	r8, r1
 80055a0:	4681      	mov	r9, r0
 80055a2:	eb12 0a08 	adds.w	sl, r2, r8
 80055a6:	eb43 0b09 	adc.w	fp, r3, r9
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	603b      	str	r3, [r7, #0]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b8:	4650      	mov	r0, sl
 80055ba:	4659      	mov	r1, fp
 80055bc:	f7fb fb74 	bl	8000ca8 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4613      	mov	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ce:	d308      	bcc.n	80055e2 <UART_SetConfig+0x3de>
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055d6:	d204      	bcs.n	80055e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	60da      	str	r2, [r3, #12]
 80055e0:	e0b6      	b.n	8005750 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055e8:	e0b2      	b.n	8005750 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055f2:	d15e      	bne.n	80056b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d828      	bhi.n	800564e <UART_SetConfig+0x44a>
 80055fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005604 <UART_SetConfig+0x400>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005629 	.word	0x08005629
 8005608:	08005631 	.word	0x08005631
 800560c:	08005639 	.word	0x08005639
 8005610:	0800564f 	.word	0x0800564f
 8005614:	0800563f 	.word	0x0800563f
 8005618:	0800564f 	.word	0x0800564f
 800561c:	0800564f 	.word	0x0800564f
 8005620:	0800564f 	.word	0x0800564f
 8005624:	08005647 	.word	0x08005647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005628:	f7fe f962 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 800562c:	61f8      	str	r0, [r7, #28]
        break;
 800562e:	e014      	b.n	800565a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005630:	f7fe f974 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8005634:	61f8      	str	r0, [r7, #28]
        break;
 8005636:	e010      	b.n	800565a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005638:	4b4d      	ldr	r3, [pc, #308]	@ (8005770 <UART_SetConfig+0x56c>)
 800563a:	61fb      	str	r3, [r7, #28]
        break;
 800563c:	e00d      	b.n	800565a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800563e:	f7fe f8bf 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 8005642:	61f8      	str	r0, [r7, #28]
        break;
 8005644:	e009      	b.n	800565a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800564a:	61fb      	str	r3, [r7, #28]
        break;
 800564c:	e005      	b.n	800565a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005658:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d077      	beq.n	8005750 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	005a      	lsls	r2, r3, #1
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	085b      	lsrs	r3, r3, #1
 800566a:	441a      	add	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b0f      	cmp	r3, #15
 800567a:	d916      	bls.n	80056aa <UART_SetConfig+0x4a6>
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005682:	d212      	bcs.n	80056aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	b29b      	uxth	r3, r3
 8005688:	f023 030f 	bic.w	r3, r3, #15
 800568c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	085b      	lsrs	r3, r3, #1
 8005692:	b29b      	uxth	r3, r3
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	b29a      	uxth	r2, r3
 800569a:	8afb      	ldrh	r3, [r7, #22]
 800569c:	4313      	orrs	r3, r2
 800569e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	8afa      	ldrh	r2, [r7, #22]
 80056a6:	60da      	str	r2, [r3, #12]
 80056a8:	e052      	b.n	8005750 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80056b0:	e04e      	b.n	8005750 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d827      	bhi.n	800570a <UART_SetConfig+0x506>
 80056ba:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <UART_SetConfig+0x4bc>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056e5 	.word	0x080056e5
 80056c4:	080056ed 	.word	0x080056ed
 80056c8:	080056f5 	.word	0x080056f5
 80056cc:	0800570b 	.word	0x0800570b
 80056d0:	080056fb 	.word	0x080056fb
 80056d4:	0800570b 	.word	0x0800570b
 80056d8:	0800570b 	.word	0x0800570b
 80056dc:	0800570b 	.word	0x0800570b
 80056e0:	08005703 	.word	0x08005703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e4:	f7fe f904 	bl	80038f0 <HAL_RCC_GetPCLK1Freq>
 80056e8:	61f8      	str	r0, [r7, #28]
        break;
 80056ea:	e014      	b.n	8005716 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ec:	f7fe f916 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 80056f0:	61f8      	str	r0, [r7, #28]
        break;
 80056f2:	e010      	b.n	8005716 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005770 <UART_SetConfig+0x56c>)
 80056f6:	61fb      	str	r3, [r7, #28]
        break;
 80056f8:	e00d      	b.n	8005716 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fa:	f7fe f861 	bl	80037c0 <HAL_RCC_GetSysClockFreq>
 80056fe:	61f8      	str	r0, [r7, #28]
        break;
 8005700:	e009      	b.n	8005716 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005706:	61fb      	str	r3, [r7, #28]
        break;
 8005708:	e005      	b.n	8005716 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005714:	bf00      	nop
    }

    if (pclk != 0U)
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d019      	beq.n	8005750 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	085a      	lsrs	r2, r3, #1
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	441a      	add	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	fbb2 f3f3 	udiv	r3, r2, r3
 800572e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b0f      	cmp	r3, #15
 8005734:	d909      	bls.n	800574a <UART_SetConfig+0x546>
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800573c:	d205      	bcs.n	800574a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60da      	str	r2, [r3, #12]
 8005748:	e002      	b.n	8005750 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800575c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005760:	4618      	mov	r0, r3
 8005762:	3728      	adds	r7, #40	@ 0x28
 8005764:	46bd      	mov	sp, r7
 8005766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800576a:	bf00      	nop
 800576c:	40008000 	.word	0x40008000
 8005770:	00f42400 	.word	0x00f42400

08005774 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	f003 0310 	and.w	r3, r3, #16
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01a      	beq.n	800588a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005872:	d10a      	bne.n	800588a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]
  }
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b098      	sub	sp, #96	@ 0x60
 80058bc:	af02      	add	r7, sp, #8
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058c8:	f7fc ff0a 	bl	80026e0 <HAL_GetTick>
 80058cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d12e      	bne.n	800593a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058e4:	2200      	movs	r2, #0
 80058e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f88c 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d021      	beq.n	800593a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800590a:	653b      	str	r3, [r7, #80]	@ 0x50
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005914:	647b      	str	r3, [r7, #68]	@ 0x44
 8005916:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800591a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e6      	bne.n	80058f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e062      	b.n	8005a00 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b04      	cmp	r3, #4
 8005946:	d149      	bne.n	80059dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005948:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005950:	2200      	movs	r2, #0
 8005952:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f856 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d03c      	beq.n	80059dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	623b      	str	r3, [r7, #32]
   return(result);
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005980:	633b      	str	r3, [r7, #48]	@ 0x30
 8005982:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800598e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e6      	bne.n	8005962 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3308      	adds	r3, #8
 80059b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059b4:	61fa      	str	r2, [r7, #28]
 80059b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	69b9      	ldr	r1, [r7, #24]
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	617b      	str	r3, [r7, #20]
   return(result);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e5      	bne.n	8005994 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e011      	b.n	8005a00 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3758      	adds	r7, #88	@ 0x58
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a18:	e04f      	b.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d04b      	beq.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fc fe5d 	bl	80026e0 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e04e      	b.n	8005ada <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d037      	beq.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b80      	cmp	r3, #128	@ 0x80
 8005a4e:	d034      	beq.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b40      	cmp	r3, #64	@ 0x40
 8005a54:	d031      	beq.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d110      	bne.n	8005a86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2208      	movs	r2, #8
 8005a6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f8ff 	bl	8005c70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2208      	movs	r2, #8
 8005a76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e029      	b.n	8005ada <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a94:	d111      	bne.n	8005aba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f8e5 	bl	8005c70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e00f      	b.n	8005ada <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	bf0c      	ite	eq
 8005aca:	2301      	moveq	r3, #1
 8005acc:	2300      	movne	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d0a0      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b097      	sub	sp, #92	@ 0x5c
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b16:	d10e      	bne.n	8005b36 <UART_Start_Receive_IT+0x52>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d105      	bne.n	8005b2c <UART_Start_Receive_IT+0x48>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005b26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b2a:	e02d      	b.n	8005b88 <UART_Start_Receive_IT+0xa4>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	22ff      	movs	r2, #255	@ 0xff
 8005b30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b34:	e028      	b.n	8005b88 <UART_Start_Receive_IT+0xa4>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10d      	bne.n	8005b5a <UART_Start_Receive_IT+0x76>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d104      	bne.n	8005b50 <UART_Start_Receive_IT+0x6c>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	22ff      	movs	r2, #255	@ 0xff
 8005b4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b4e:	e01b      	b.n	8005b88 <UART_Start_Receive_IT+0xa4>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	227f      	movs	r2, #127	@ 0x7f
 8005b54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b58:	e016      	b.n	8005b88 <UART_Start_Receive_IT+0xa4>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b62:	d10d      	bne.n	8005b80 <UART_Start_Receive_IT+0x9c>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <UART_Start_Receive_IT+0x92>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	227f      	movs	r2, #127	@ 0x7f
 8005b70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b74:	e008      	b.n	8005b88 <UART_Start_Receive_IT+0xa4>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	223f      	movs	r2, #63	@ 0x3f
 8005b7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b7e:	e003      	b.n	8005b88 <UART_Start_Receive_IT+0xa4>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2222      	movs	r2, #34	@ 0x22
 8005b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bb8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005bba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e5      	bne.n	8005b98 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bd4:	d107      	bne.n	8005be6 <UART_Start_Receive_IT+0x102>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4a21      	ldr	r2, [pc, #132]	@ (8005c68 <UART_Start_Receive_IT+0x184>)
 8005be2:	669a      	str	r2, [r3, #104]	@ 0x68
 8005be4:	e002      	b.n	8005bec <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a20      	ldr	r2, [pc, #128]	@ (8005c6c <UART_Start_Receive_IT+0x188>)
 8005bea:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d019      	beq.n	8005c28 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005c08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c14:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e6      	bne.n	8005bf4 <UART_Start_Receive_IT+0x110>
 8005c26:	e018      	b.n	8005c5a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	613b      	str	r3, [r7, #16]
   return(result);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f043 0320 	orr.w	r3, r3, #32
 8005c3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c46:	623b      	str	r3, [r7, #32]
 8005c48:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	69f9      	ldr	r1, [r7, #28]
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e6      	bne.n	8005c28 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	375c      	adds	r7, #92	@ 0x5c
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	08005f75 	.word	0x08005f75
 8005c6c:	08005db9 	.word	0x08005db9

08005c70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b095      	sub	sp, #84	@ 0x54
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c96:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e6      	bne.n	8005c78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3308      	adds	r3, #8
 8005cb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e5      	bne.n	8005caa <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d118      	bne.n	8005d18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f023 0310 	bic.w	r3, r3, #16
 8005cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6979      	ldr	r1, [r7, #20]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	613b      	str	r3, [r7, #16]
   return(result);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e6      	bne.n	8005ce6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d2c:	bf00      	nop
 8005d2e:	3754      	adds	r7, #84	@ 0x54
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff fa3e 	bl	80051d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6979      	ldr	r1, [r7, #20]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	613b      	str	r3, [r7, #16]
   return(result);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e6      	bne.n	8005d6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fa0a 	bl	80051c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005db0:	bf00      	nop
 8005db2:	3720      	adds	r7, #32
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b09c      	sub	sp, #112	@ 0x70
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005dc6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dd0:	2b22      	cmp	r3, #34	@ 0x22
 8005dd2:	f040 80be 	bne.w	8005f52 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005ddc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005de0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005de4:	b2d9      	uxtb	r1, r3
 8005de6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df0:	400a      	ands	r2, r1
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f040 80a3 	bne.w	8005f66 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e6      	bne.n	8005e20 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3308      	adds	r3, #8
 8005e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005e72:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e5      	bne.n	8005e52 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a34      	ldr	r2, [pc, #208]	@ (8005f70 <UART_RxISR_8BIT+0x1b8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d01f      	beq.n	8005ee4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d018      	beq.n	8005ee4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ec6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e6      	bne.n	8005eb2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d12e      	bne.n	8005f4a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0310 	bic.w	r3, r3, #16
 8005f06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f10:	61fb      	str	r3, [r7, #28]
 8005f12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f14:	69b9      	ldr	r1, [r7, #24]
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	e841 2300 	strex	r3, r2, [r1]
 8005f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e6      	bne.n	8005ef2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f003 0310 	and.w	r3, r3, #16
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d103      	bne.n	8005f3a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2210      	movs	r2, #16
 8005f38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff f952 	bl	80051ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f48:	e00d      	b.n	8005f66 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fb fa12 	bl	8001374 <HAL_UART_RxCpltCallback>
}
 8005f50:	e009      	b.n	8005f66 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	8b1b      	ldrh	r3, [r3, #24]
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0208 	orr.w	r2, r2, #8
 8005f62:	b292      	uxth	r2, r2
 8005f64:	831a      	strh	r2, [r3, #24]
}
 8005f66:	bf00      	nop
 8005f68:	3770      	adds	r7, #112	@ 0x70
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	40008000 	.word	0x40008000

08005f74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b09c      	sub	sp, #112	@ 0x70
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f8c:	2b22      	cmp	r3, #34	@ 0x22
 8005f8e:	f040 80be 	bne.w	800610e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005f98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005fa2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005fa6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005faa:	4013      	ands	r3, r2
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fb0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb6:	1c9a      	adds	r2, r3, #2
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f040 80a3 	bne.w	8006122 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ff0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ffa:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ffc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006000:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e6      	bne.n	8005fdc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3308      	adds	r3, #8
 8006014:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800601e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	663b      	str	r3, [r7, #96]	@ 0x60
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3308      	adds	r3, #8
 800602c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800602e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006032:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006034:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006036:	e841 2300 	strex	r3, r2, [r1]
 800603a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800603c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1e5      	bne.n	800600e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a34      	ldr	r2, [pc, #208]	@ (800612c <UART_RxISR_16BIT+0x1b8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d01f      	beq.n	80060a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d018      	beq.n	80060a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	61fb      	str	r3, [r7, #28]
   return(result);
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006082:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800608c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800608e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e6      	bne.n	800606e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d12e      	bne.n	8006106 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f023 0310 	bic.w	r3, r3, #16
 80060c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060cc:	61bb      	str	r3, [r7, #24]
 80060ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	6979      	ldr	r1, [r7, #20]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	613b      	str	r3, [r7, #16]
   return(result);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e6      	bne.n	80060ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f003 0310 	and.w	r3, r3, #16
 80060ea:	2b10      	cmp	r3, #16
 80060ec:	d103      	bne.n	80060f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2210      	movs	r2, #16
 80060f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff f874 	bl	80051ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006104:	e00d      	b.n	8006122 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fb f934 	bl	8001374 <HAL_UART_RxCpltCallback>
}
 800610c:	e009      	b.n	8006122 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	8b1b      	ldrh	r3, [r3, #24]
 8006114:	b29a      	uxth	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0208 	orr.w	r2, r2, #8
 800611e:	b292      	uxth	r2, r2
 8006120:	831a      	strh	r2, [r3, #24]
}
 8006122:	bf00      	nop
 8006124:	3770      	adds	r7, #112	@ 0x70
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40008000 	.word	0x40008000

08006130 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	4603      	mov	r3, r0
 800614c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006156:	2b84      	cmp	r3, #132	@ 0x84
 8006158:	d005      	beq.n	8006166 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800615a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	3303      	adds	r3, #3
 8006164:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006166:	68fb      	ldr	r3, [r7, #12]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006178:	f000 fe4e 	bl	8006e18 <vTaskStartScheduler>
  
  return osOK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	bd80      	pop	{r7, pc}

08006182 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006184:	b089      	sub	sp, #36	@ 0x24
 8006186:	af04      	add	r7, sp, #16
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d020      	beq.n	80061d6 <osThreadCreate+0x54>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01c      	beq.n	80061d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685c      	ldr	r4, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691e      	ldr	r6, [r3, #16]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff ffc8 	bl	8006144 <makeFreeRtosPriority>
 80061b4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061be:	9202      	str	r2, [sp, #8]
 80061c0:	9301      	str	r3, [sp, #4]
 80061c2:	9100      	str	r1, [sp, #0]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	4632      	mov	r2, r6
 80061c8:	4629      	mov	r1, r5
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 fc3f 	bl	8006a4e <xTaskCreateStatic>
 80061d0:	4603      	mov	r3, r0
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	e01c      	b.n	8006210 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685c      	ldr	r4, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061e2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff ffaa 	bl	8006144 <makeFreeRtosPriority>
 80061f0:	4602      	mov	r2, r0
 80061f2:	f107 030c 	add.w	r3, r7, #12
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	9200      	str	r2, [sp, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	4632      	mov	r2, r6
 80061fe:	4629      	mov	r1, r5
 8006200:	4620      	mov	r0, r4
 8006202:	f000 fc84 	bl	8006b0e <xTaskCreate>
 8006206:	4603      	mov	r3, r0
 8006208:	2b01      	cmp	r3, #1
 800620a:	d001      	beq.n	8006210 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800620c:	2300      	movs	r3, #0
 800620e:	e000      	b.n	8006212 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006210:	68fb      	ldr	r3, [r7, #12]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800621a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <osDelay+0x16>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	e000      	b.n	8006232 <osDelay+0x18>
 8006230:	2301      	movs	r3, #1
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fdba 	bl	8006dac <vTaskDelay>
  
  return osOK;
 8006238:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f103 0208 	add.w	r2, r3, #8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f04f 32ff 	mov.w	r2, #4294967295
 800625a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f103 0208 	add.w	r2, r3, #8
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f103 0208 	add.w	r2, r3, #8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	601a      	str	r2, [r3, #0]
}
 80062d8:	bf00      	nop
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fa:	d103      	bne.n	8006304 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	e00c      	b.n	800631e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3308      	adds	r3, #8
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	e002      	b.n	8006312 <vListInsert+0x2e>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	429a      	cmp	r2, r3
 800631c:	d2f6      	bcs.n	800630c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	601a      	str	r2, [r3, #0]
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6892      	ldr	r2, [r2, #8]
 800636c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6852      	ldr	r2, [r2, #4]
 8006376:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	429a      	cmp	r2, r3
 8006380:	d103      	bne.n	800638a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	1e5a      	subs	r2, r3, #1
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b08c      	sub	sp, #48	@ 0x30
 80063ae:	af02      	add	r7, sp, #8
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d111      	bne.n	80063e0 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d81d      	bhi.n	8006404 <xStreamBufferGenericCreate+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063da:	bf00      	nop
 80063dc:	bf00      	nop
 80063de:	e7fd      	b.n	80063dc <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10b      	bne.n	8006404 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	61bb      	str	r3, [r7, #24]
}
 80063fe:	bf00      	nop
 8006400:	bf00      	nop
 8006402:	e7fd      	b.n	8006400 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	429a      	cmp	r2, r3
 800640a:	d90b      	bls.n	8006424 <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	617b      	str	r3, [r7, #20]
}
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	e7fd      	b.n	8006420 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800642a:	2301      	movs	r3, #1
 800642c:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3320      	adds	r3, #32
 8006438:	4618      	mov	r0, r3
 800643a:	f001 fcf7 	bl	8007e2c <pvPortMalloc>
 800643e:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	f103 0120 	add.w	r1, r3, #32
 800644c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	6a38      	ldr	r0, [r7, #32]
 8006458:	f000 fac5 	bl	80069e6 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800645c:	6a3b      	ldr	r3, [r7, #32]
	}
 800645e:	4618      	mov	r0, r3
 8006460:	3728      	adds	r7, #40	@ 0x28
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8006466:	b480      	push	{r7}
 8006468:	b087      	sub	sp, #28
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10b      	bne.n	8006490 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	60fb      	str	r3, [r7, #12]
}
 800648a:	bf00      	nop
 800648c:	bf00      	nop
 800648e:	e7fd      	b.n	800648c <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4413      	add	r3, r2
 800649a:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d304      	bcc.n	80064c0 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80064c0:	697b      	ldr	r3, [r7, #20]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b090      	sub	sp, #64	@ 0x40
 80064d2:	af02      	add	r7, sp, #8
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
 80064da:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <xStreamBufferSendFromISR+0x34>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	623b      	str	r3, [r7, #32]
}
 80064fc:	bf00      	nop
 80064fe:	bf00      	nop
 8006500:	e7fd      	b.n	80064fe <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8006502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10b      	bne.n	8006520 <xStreamBufferSendFromISR+0x52>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	61fb      	str	r3, [r7, #28]
}
 800651a:	bf00      	nop
 800651c:	bf00      	nop
 800651e:	e7fd      	b.n	800651c <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8006520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006522:	7f1b      	ldrb	r3, [r3, #28]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800652c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652e:	3304      	adds	r3, #4
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8006532:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006534:	f7ff ff97 	bl	8006466 <xStreamBufferSpacesAvailable>
 8006538:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800653a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006546:	f000 f835 	bl	80065b4 <prvWriteMessageToBuffer>
 800654a:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 800654c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654e:	2b00      	cmp	r3, #0
 8006550:	d02b      	beq.n	80065aa <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8006552:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006554:	f000 fa27 	bl	80069a6 <prvBytesInBuffer>
 8006558:	4602      	mov	r2, r0
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	429a      	cmp	r2, r3
 8006560:	d323      	bcc.n	80065aa <xStreamBufferSendFromISR+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006562:	f3ef 8211 	mrs	r2, BASEPRI
 8006566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	61ba      	str	r2, [r7, #24]
 8006578:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800657a:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800657c:	627b      	str	r3, [r7, #36]	@ 0x24
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00b      	beq.n	800659e <xStreamBufferSendFromISR+0xd0>
 8006586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006588:	6918      	ldr	r0, [r3, #16]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	2300      	movs	r3, #0
 8006590:	2200      	movs	r2, #0
 8006592:	2100      	movs	r1, #0
 8006594:	f001 f882 	bl	800769c <xTaskGenericNotifyFromISR>
 8006598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659a:	2200      	movs	r2, #0
 800659c:	611a      	str	r2, [r3, #16]
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065a8:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80065aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3738      	adds	r7, #56	@ 0x38
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	e01d      	b.n	800660a <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	7f1b      	ldrb	r3, [r3, #28]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d108      	bne.n	80065ec <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80065da:	2301      	movs	r3, #1
 80065dc:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	4293      	cmp	r3, r2
 80065e4:	bf28      	it	cs
 80065e6:	4613      	movcs	r3, r2
 80065e8:	607b      	str	r3, [r7, #4]
 80065ea:	e00e      	b.n	800660a <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d308      	bcc.n	8006606 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80065f8:	1d3b      	adds	r3, r7, #4
 80065fa:	2204      	movs	r2, #4
 80065fc:	4619      	mov	r1, r3
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 f8df 	bl	80067c2 <prvWriteBytesToBuffer>
 8006604:	e001      	b.n	800660a <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	461a      	mov	r2, r3
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f8d3 	bl	80067c2 <prvWriteBytesToBuffer>
 800661c:	6138      	str	r0, [r7, #16]
 800661e:	e001      	b.n	8006624 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8006624:	693b      	ldr	r3, [r7, #16]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b08e      	sub	sp, #56	@ 0x38
 8006632:	af02      	add	r7, sp, #8
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
 800663a:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8006640:	2300      	movs	r3, #0
 8006642:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <xStreamBufferReceive+0x34>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	61fb      	str	r3, [r7, #28]
}
 800665c:	bf00      	nop
 800665e:	bf00      	nop
 8006660:	e7fd      	b.n	800665e <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <xStreamBufferReceive+0x52>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	61bb      	str	r3, [r7, #24]
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	7f1b      	ldrb	r3, [r3, #28]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800668c:	2304      	movs	r3, #4
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006690:	e001      	b.n	8006696 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d035      	beq.n	8006708 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800669c:	f001 faa4 	bl	8007be8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80066a0:	6a38      	ldr	r0, [r7, #32]
 80066a2:	f000 f980 	bl	80069a6 <prvBytesInBuffer>
 80066a6:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80066a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d817      	bhi.n	80066e0 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80066b0:	2000      	movs	r0, #0
 80066b2:	f001 f8d9 	bl	8007868 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <xStreamBufferReceive+0xa8>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	617b      	str	r3, [r7, #20]
}
 80066d0:	bf00      	nop
 80066d2:	bf00      	nop
 80066d4:	e7fd      	b.n	80066d2 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80066d6:	f000 feaf 	bl	8007438 <xTaskGetCurrentTaskHandle>
 80066da:	4602      	mov	r2, r0
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80066e0:	f001 fab4 	bl	8007c4c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80066e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d811      	bhi.n	8006710 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2200      	movs	r2, #0
 80066f0:	2100      	movs	r1, #0
 80066f2:	2000      	movs	r0, #0
 80066f4:	f000 feb0 	bl	8007458 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	2200      	movs	r2, #0
 80066fc:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80066fe:	6a38      	ldr	r0, [r7, #32]
 8006700:	f000 f951 	bl	80069a6 <prvBytesInBuffer>
 8006704:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006706:	e003      	b.n	8006710 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8006708:	6a38      	ldr	r0, [r7, #32]
 800670a:	f000 f94c 	bl	80069a6 <prvBytesInBuffer>
 800670e:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8006710:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	429a      	cmp	r2, r3
 8006716:	d91d      	bls.n	8006754 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	6a38      	ldr	r0, [r7, #32]
 8006724:	f000 f81b 	bl	800675e <prvReadMessageFromBuffer>
 8006728:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800672a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672c:	2b00      	cmp	r3, #0
 800672e:	d011      	beq.n	8006754 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8006730:	f000 fbdc 	bl	8006eec <vTaskSuspendAll>
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d009      	beq.n	8006750 <xStreamBufferReceive+0x122>
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	6958      	ldr	r0, [r3, #20]
 8006740:	2300      	movs	r3, #0
 8006742:	2200      	movs	r2, #0
 8006744:	2100      	movs	r1, #0
 8006746:	f000 fee7 	bl	8007518 <xTaskGenericNotify>
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	2200      	movs	r2, #0
 800674e:	615a      	str	r2, [r3, #20]
 8006750:	f000 fbda 	bl	8006f08 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8006754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006756:	4618      	mov	r0, r3
 8006758:	3730      	adds	r7, #48	@ 0x30
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b088      	sub	sp, #32
 8006762:	af00      	add	r7, sp, #0
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
 800676a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800676c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676e:	2b00      	cmp	r3, #0
 8006770:	d019      	beq.n	80067a6 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8006778:	f107 0110 	add.w	r1, r7, #16
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 f893 	bl	80068ac <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	429a      	cmp	r2, r3
 8006798:	d907      	bls.n	80067aa <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61fb      	str	r3, [r7, #28]
 80067a4:	e001      	b.n	80067aa <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 f87b 	bl	80068ac <prvReadBytesFromBuffer>
 80067b6:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80067b8:	697b      	ldr	r3, [r7, #20]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3720      	adds	r7, #32
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b08a      	sub	sp, #40	@ 0x28
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	61fb      	str	r3, [r7, #28]
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	e7fd      	b.n	80067e8 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	4293      	cmp	r3, r2
 80067fe:	bf28      	it	cs
 8006800:	4613      	movcs	r3, r2
 8006802:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8006804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	441a      	add	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	429a      	cmp	r2, r3
 8006810:	d90b      	bls.n	800682a <prvWriteBytesToBuffer+0x68>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	61bb      	str	r3, [r7, #24]
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	e7fd      	b.n	8006826 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	4413      	add	r3, r2
 8006832:	6a3a      	ldr	r2, [r7, #32]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	4618      	mov	r0, r3
 8006838:	f003 fa53 	bl	8009ce2 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	429a      	cmp	r2, r3
 8006842:	d91d      	bls.n	8006880 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	1ad2      	subs	r2, r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	429a      	cmp	r2, r3
 8006850:	d90b      	bls.n	800686a <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	617b      	str	r3, [r7, #20]
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
 8006868:	e7fd      	b.n	8006866 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6998      	ldr	r0, [r3, #24]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	18d1      	adds	r1, r2, r3
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	461a      	mov	r2, r3
 800687c:	f003 fa31 	bl	8009ce2 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8006880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4413      	add	r3, r2
 8006886:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800688e:	429a      	cmp	r2, r3
 8006890:	d304      	bcc.n	800689c <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068a0:	605a      	str	r2, [r3, #4]

	return xCount;
 80068a2:	687b      	ldr	r3, [r7, #4]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3728      	adds	r7, #40	@ 0x28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08a      	sub	sp, #40	@ 0x28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	4293      	cmp	r3, r2
 80068c0:	bf28      	it	cs
 80068c2:	4613      	movcs	r3, r2
 80068c4:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d067      	beq.n	800699c <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689a      	ldr	r2, [r3, #8]
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	6a3a      	ldr	r2, [r7, #32]
 80068dc:	4293      	cmp	r3, r2
 80068de:	bf28      	it	cs
 80068e0:	4613      	movcs	r3, r2
 80068e2:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d90b      	bls.n	8006904 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	61bb      	str	r3, [r7, #24]
}
 80068fe:	bf00      	nop
 8006900:	bf00      	nop
 8006902:	e7fd      	b.n	8006900 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8006904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	441a      	add	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	429a      	cmp	r2, r3
 8006910:	d90b      	bls.n	800692a <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	617b      	str	r3, [r7, #20]
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	e7fd      	b.n	8006926 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	699a      	ldr	r2, [r3, #24]
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006930:	4413      	add	r3, r2
 8006932:	69fa      	ldr	r2, [r7, #28]
 8006934:	4619      	mov	r1, r3
 8006936:	68b8      	ldr	r0, [r7, #8]
 8006938:	f003 f9d3 	bl	8009ce2 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800693c:	6a3a      	ldr	r2, [r7, #32]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	429a      	cmp	r2, r3
 8006942:	d91a      	bls.n	800697a <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8006944:	6a3a      	ldr	r2, [r7, #32]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	d90b      	bls.n	8006964 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	613b      	str	r3, [r7, #16]
}
 800695e:	bf00      	nop
 8006960:	bf00      	nop
 8006962:	e7fd      	b.n	8006960 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	18d0      	adds	r0, r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6999      	ldr	r1, [r3, #24]
 800696e:	6a3a      	ldr	r2, [r7, #32]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	461a      	mov	r2, r3
 8006976:	f003 f9b4 	bl	8009ce2 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800697a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	4413      	add	r3, r2
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006988:	429a      	cmp	r2, r3
 800698a:	d304      	bcc.n	8006996 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800699a:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800699c:	6a3b      	ldr	r3, [r7, #32]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3728      	adds	r7, #40	@ 0x28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	4413      	add	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d304      	bcc.n	80069d8 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80069d8:	68fb      	ldr	r3, [r7, #12]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b086      	sub	sp, #24
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80069f4:	2355      	movs	r3, #85	@ 0x55
 80069f6:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6979      	ldr	r1, [r7, #20]
 80069fc:	68b8      	ldr	r0, [r7, #8]
 80069fe:	f003 f81c 	bl	8009a3a <memset>
 8006a02:	4602      	mov	r2, r0
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d00b      	beq.n	8006a22 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	613b      	str	r3, [r7, #16]
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	e7fd      	b.n	8006a1e <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8006a22:	2220      	movs	r2, #32
 8006a24:	2100      	movs	r1, #0
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f003 f807 	bl	8009a3a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006a44:	771a      	strb	r2, [r3, #28]
}
 8006a46:	bf00      	nop
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b08e      	sub	sp, #56	@ 0x38
 8006a52:	af04      	add	r7, sp, #16
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	607a      	str	r2, [r7, #4]
 8006a5a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10b      	bne.n	8006a7a <xTaskCreateStatic+0x2c>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	623b      	str	r3, [r7, #32]
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	e7fd      	b.n	8006a76 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10b      	bne.n	8006a98 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	61fb      	str	r3, [r7, #28]
}
 8006a92:	bf00      	nop
 8006a94:	bf00      	nop
 8006a96:	e7fd      	b.n	8006a94 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a98:	23a0      	movs	r3, #160	@ 0xa0
 8006a9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006aa0:	d00b      	beq.n	8006aba <xTaskCreateStatic+0x6c>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	61bb      	str	r3, [r7, #24]
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	e7fd      	b.n	8006ab6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006aba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d01e      	beq.n	8006b00 <xTaskCreateStatic+0xb2>
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01b      	beq.n	8006b00 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ad0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ada:	2300      	movs	r3, #0
 8006adc:	9303      	str	r3, [sp, #12]
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	9302      	str	r3, [sp, #8]
 8006ae2:	f107 0314 	add.w	r3, r7, #20
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f850 	bl	8006b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006af8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006afa:	f000 f8ed 	bl	8006cd8 <prvAddNewTaskToReadyList>
 8006afe:	e001      	b.n	8006b04 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b04:	697b      	ldr	r3, [r7, #20]
	}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3728      	adds	r7, #40	@ 0x28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b08c      	sub	sp, #48	@ 0x30
 8006b12:	af04      	add	r7, sp, #16
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	603b      	str	r3, [r7, #0]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b1e:	88fb      	ldrh	r3, [r7, #6]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 f982 	bl	8007e2c <pvPortMalloc>
 8006b28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00e      	beq.n	8006b4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b30:	20a0      	movs	r0, #160	@ 0xa0
 8006b32:	f001 f97b 	bl	8007e2c <pvPortMalloc>
 8006b36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b44:	e005      	b.n	8006b52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b46:	6978      	ldr	r0, [r7, #20]
 8006b48:	f001 fa3e 	bl	8007fc8 <vPortFree>
 8006b4c:	e001      	b.n	8006b52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d017      	beq.n	8006b88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b60:	88fa      	ldrh	r2, [r7, #6]
 8006b62:	2300      	movs	r3, #0
 8006b64:	9303      	str	r3, [sp, #12]
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	9302      	str	r3, [sp, #8]
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 f80e 	bl	8006b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b7c:	69f8      	ldr	r0, [r7, #28]
 8006b7e:	f000 f8ab 	bl	8006cd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b82:	2301      	movs	r3, #1
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	e002      	b.n	8006b8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b88:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b8e:	69bb      	ldr	r3, [r7, #24]
	}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
 8006ba4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f023 0307 	bic.w	r3, r3, #7
 8006bbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00b      	beq.n	8006be2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	617b      	str	r3, [r7, #20]
}
 8006bdc:	bf00      	nop
 8006bde:	bf00      	nop
 8006be0:	e7fd      	b.n	8006bde <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01f      	beq.n	8006c28 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	e012      	b.n	8006c14 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	7819      	ldrb	r1, [r3, #0]
 8006bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3334      	adds	r3, #52	@ 0x34
 8006bfe:	460a      	mov	r2, r1
 8006c00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	4413      	add	r3, r2
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d006      	beq.n	8006c1c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	3301      	adds	r3, #1
 8006c12:	61fb      	str	r3, [r7, #28]
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	2b0f      	cmp	r3, #15
 8006c18:	d9e9      	bls.n	8006bee <prvInitialiseNewTask+0x56>
 8006c1a:	e000      	b.n	8006c1e <prvInitialiseNewTask+0x86>
			{
				break;
 8006c1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c26:	e003      	b.n	8006c30 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c32:	2b06      	cmp	r3, #6
 8006c34:	d901      	bls.n	8006c3a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c36:	2306      	movs	r3, #6
 8006c38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c44:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	2200      	movs	r2, #0
 8006c4a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4e:	3304      	adds	r3, #4
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fb16 	bl	8006282 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	3318      	adds	r3, #24
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff fb11 	bl	8006282 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	f1c3 0207 	rsb	r2, r3, #7
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	334c      	adds	r3, #76	@ 0x4c
 8006c8a:	224c      	movs	r2, #76	@ 0x4c
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f002 fed3 	bl	8009a3a <memset>
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	4a0d      	ldr	r2, [pc, #52]	@ (8006ccc <prvInitialiseNewTask+0x134>)
 8006c98:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd0 <prvInitialiseNewTask+0x138>)
 8006c9e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd4 <prvInitialiseNewTask+0x13c>)
 8006ca4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	68f9      	ldr	r1, [r7, #12]
 8006caa:	69b8      	ldr	r0, [r7, #24]
 8006cac:	f000 fe68 	bl	8007980 <pxPortInitialiseStack>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cc2:	bf00      	nop
 8006cc4:	3720      	adds	r7, #32
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20005930 	.word	0x20005930
 8006cd0:	20005998 	.word	0x20005998
 8006cd4:	20005a00 	.word	0x20005a00

08006cd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ce0:	f000 ff82 	bl	8007be8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8006d90 <prvAddNewTaskToReadyList+0xb8>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	4a29      	ldr	r2, [pc, #164]	@ (8006d90 <prvAddNewTaskToReadyList+0xb8>)
 8006cec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cee:	4b29      	ldr	r3, [pc, #164]	@ (8006d94 <prvAddNewTaskToReadyList+0xbc>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d109      	bne.n	8006d0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cf6:	4a27      	ldr	r2, [pc, #156]	@ (8006d94 <prvAddNewTaskToReadyList+0xbc>)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cfc:	4b24      	ldr	r3, [pc, #144]	@ (8006d90 <prvAddNewTaskToReadyList+0xb8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d110      	bne.n	8006d26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d04:	f000 fad4 	bl	80072b0 <prvInitialiseTaskLists>
 8006d08:	e00d      	b.n	8006d26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d0a:	4b23      	ldr	r3, [pc, #140]	@ (8006d98 <prvAddNewTaskToReadyList+0xc0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d109      	bne.n	8006d26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d12:	4b20      	ldr	r3, [pc, #128]	@ (8006d94 <prvAddNewTaskToReadyList+0xbc>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d802      	bhi.n	8006d26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d20:	4a1c      	ldr	r2, [pc, #112]	@ (8006d94 <prvAddNewTaskToReadyList+0xbc>)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d26:	4b1d      	ldr	r3, [pc, #116]	@ (8006d9c <prvAddNewTaskToReadyList+0xc4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006d9c <prvAddNewTaskToReadyList+0xc4>)
 8006d2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	2201      	movs	r2, #1
 8006d36:	409a      	lsls	r2, r3
 8006d38:	4b19      	ldr	r3, [pc, #100]	@ (8006da0 <prvAddNewTaskToReadyList+0xc8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	4a18      	ldr	r2, [pc, #96]	@ (8006da0 <prvAddNewTaskToReadyList+0xc8>)
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4a15      	ldr	r2, [pc, #84]	@ (8006da4 <prvAddNewTaskToReadyList+0xcc>)
 8006d50:	441a      	add	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3304      	adds	r3, #4
 8006d56:	4619      	mov	r1, r3
 8006d58:	4610      	mov	r0, r2
 8006d5a:	f7ff fa9f 	bl	800629c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d5e:	f000 ff75 	bl	8007c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d62:	4b0d      	ldr	r3, [pc, #52]	@ (8006d98 <prvAddNewTaskToReadyList+0xc0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00e      	beq.n	8006d88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d94 <prvAddNewTaskToReadyList+0xbc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d207      	bcs.n	8006d88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d78:	4b0b      	ldr	r3, [pc, #44]	@ (8006da8 <prvAddNewTaskToReadyList+0xd0>)
 8006d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d88:	bf00      	nop
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20000abc 	.word	0x20000abc
 8006d94:	200009bc 	.word	0x200009bc
 8006d98:	20000ac8 	.word	0x20000ac8
 8006d9c:	20000ad8 	.word	0x20000ad8
 8006da0:	20000ac4 	.word	0x20000ac4
 8006da4:	200009c0 	.word	0x200009c0
 8006da8:	e000ed04 	.word	0xe000ed04

08006dac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d018      	beq.n	8006df0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dbe:	4b14      	ldr	r3, [pc, #80]	@ (8006e10 <vTaskDelay+0x64>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00b      	beq.n	8006dde <vTaskDelay+0x32>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60bb      	str	r3, [r7, #8]
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	e7fd      	b.n	8006dda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006dde:	f000 f885 	bl	8006eec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006de2:	2100      	movs	r1, #0
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fd65 	bl	80078b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dea:	f000 f88d 	bl	8006f08 <xTaskResumeAll>
 8006dee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d107      	bne.n	8006e06 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006df6:	4b07      	ldr	r3, [pc, #28]	@ (8006e14 <vTaskDelay+0x68>)
 8006df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e06:	bf00      	nop
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000ae4 	.word	0x20000ae4
 8006e14:	e000ed04 	.word	0xe000ed04

08006e18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	@ 0x28
 8006e1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e26:	463a      	mov	r2, r7
 8006e28:	1d39      	adds	r1, r7, #4
 8006e2a:	f107 0308 	add.w	r3, r7, #8
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fa f906 	bl	8001040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	9202      	str	r2, [sp, #8]
 8006e3c:	9301      	str	r3, [sp, #4]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	2300      	movs	r3, #0
 8006e44:	460a      	mov	r2, r1
 8006e46:	4921      	ldr	r1, [pc, #132]	@ (8006ecc <vTaskStartScheduler+0xb4>)
 8006e48:	4821      	ldr	r0, [pc, #132]	@ (8006ed0 <vTaskStartScheduler+0xb8>)
 8006e4a:	f7ff fe00 	bl	8006a4e <xTaskCreateStatic>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	4a20      	ldr	r2, [pc, #128]	@ (8006ed4 <vTaskStartScheduler+0xbc>)
 8006e52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e54:	4b1f      	ldr	r3, [pc, #124]	@ (8006ed4 <vTaskStartScheduler+0xbc>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	e001      	b.n	8006e66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d11b      	bne.n	8006ea4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	613b      	str	r3, [r7, #16]
}
 8006e7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e80:	4b15      	ldr	r3, [pc, #84]	@ (8006ed8 <vTaskStartScheduler+0xc0>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	334c      	adds	r3, #76	@ 0x4c
 8006e86:	4a15      	ldr	r2, [pc, #84]	@ (8006edc <vTaskStartScheduler+0xc4>)
 8006e88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e8a:	4b15      	ldr	r3, [pc, #84]	@ (8006ee0 <vTaskStartScheduler+0xc8>)
 8006e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e92:	4b14      	ldr	r3, [pc, #80]	@ (8006ee4 <vTaskStartScheduler+0xcc>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e98:	4b13      	ldr	r3, [pc, #76]	@ (8006ee8 <vTaskStartScheduler+0xd0>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e9e:	f000 fdff 	bl	8007aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ea2:	e00f      	b.n	8006ec4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eaa:	d10b      	bne.n	8006ec4 <vTaskStartScheduler+0xac>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	60fb      	str	r3, [r7, #12]
}
 8006ebe:	bf00      	nop
 8006ec0:	bf00      	nop
 8006ec2:	e7fd      	b.n	8006ec0 <vTaskStartScheduler+0xa8>
}
 8006ec4:	bf00      	nop
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	0800ce50 	.word	0x0800ce50
 8006ed0:	08007281 	.word	0x08007281
 8006ed4:	20000ae0 	.word	0x20000ae0
 8006ed8:	200009bc 	.word	0x200009bc
 8006edc:	200003dc 	.word	0x200003dc
 8006ee0:	20000adc 	.word	0x20000adc
 8006ee4:	20000ac8 	.word	0x20000ac8
 8006ee8:	20000ac0 	.word	0x20000ac0

08006eec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ef0:	4b04      	ldr	r3, [pc, #16]	@ (8006f04 <vTaskSuspendAll+0x18>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	4a03      	ldr	r2, [pc, #12]	@ (8006f04 <vTaskSuspendAll+0x18>)
 8006ef8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006efa:	bf00      	nop
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	20000ae4 	.word	0x20000ae4

08006f08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f12:	2300      	movs	r3, #0
 8006f14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f16:	4b42      	ldr	r3, [pc, #264]	@ (8007020 <xTaskResumeAll+0x118>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10b      	bne.n	8006f36 <xTaskResumeAll+0x2e>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	603b      	str	r3, [r7, #0]
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	e7fd      	b.n	8006f32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f36:	f000 fe57 	bl	8007be8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f3a:	4b39      	ldr	r3, [pc, #228]	@ (8007020 <xTaskResumeAll+0x118>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	4a37      	ldr	r2, [pc, #220]	@ (8007020 <xTaskResumeAll+0x118>)
 8006f42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f44:	4b36      	ldr	r3, [pc, #216]	@ (8007020 <xTaskResumeAll+0x118>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d161      	bne.n	8007010 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f4c:	4b35      	ldr	r3, [pc, #212]	@ (8007024 <xTaskResumeAll+0x11c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d05d      	beq.n	8007010 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f54:	e02e      	b.n	8006fb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f56:	4b34      	ldr	r3, [pc, #208]	@ (8007028 <xTaskResumeAll+0x120>)
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3318      	adds	r3, #24
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff f9f7 	bl	8006356 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7ff f9f2 	bl	8006356 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f76:	2201      	movs	r2, #1
 8006f78:	409a      	lsls	r2, r3
 8006f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800702c <xTaskResumeAll+0x124>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	4a2a      	ldr	r2, [pc, #168]	@ (800702c <xTaskResumeAll+0x124>)
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4a27      	ldr	r2, [pc, #156]	@ (8007030 <xTaskResumeAll+0x128>)
 8006f92:	441a      	add	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	f7ff f97e 	bl	800629c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa4:	4b23      	ldr	r3, [pc, #140]	@ (8007034 <xTaskResumeAll+0x12c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d302      	bcc.n	8006fb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006fae:	4b22      	ldr	r3, [pc, #136]	@ (8007038 <xTaskResumeAll+0x130>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8007028 <xTaskResumeAll+0x120>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1cc      	bne.n	8006f56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fc2:	f000 fa19 	bl	80073f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800703c <xTaskResumeAll+0x134>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d010      	beq.n	8006ff4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fd2:	f000 f837 	bl	8007044 <xTaskIncrementTick>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006fdc:	4b16      	ldr	r3, [pc, #88]	@ (8007038 <xTaskResumeAll+0x130>)
 8006fde:	2201      	movs	r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f1      	bne.n	8006fd2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006fee:	4b13      	ldr	r3, [pc, #76]	@ (800703c <xTaskResumeAll+0x134>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ff4:	4b10      	ldr	r3, [pc, #64]	@ (8007038 <xTaskResumeAll+0x130>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d009      	beq.n	8007010 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007000:	4b0f      	ldr	r3, [pc, #60]	@ (8007040 <xTaskResumeAll+0x138>)
 8007002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007010:	f000 fe1c 	bl	8007c4c <vPortExitCritical>

	return xAlreadyYielded;
 8007014:	68bb      	ldr	r3, [r7, #8]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000ae4 	.word	0x20000ae4
 8007024:	20000abc 	.word	0x20000abc
 8007028:	20000a7c 	.word	0x20000a7c
 800702c:	20000ac4 	.word	0x20000ac4
 8007030:	200009c0 	.word	0x200009c0
 8007034:	200009bc 	.word	0x200009bc
 8007038:	20000ad0 	.word	0x20000ad0
 800703c:	20000acc 	.word	0x20000acc
 8007040:	e000ed04 	.word	0xe000ed04

08007044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800704a:	2300      	movs	r3, #0
 800704c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800704e:	4b4f      	ldr	r3, [pc, #316]	@ (800718c <xTaskIncrementTick+0x148>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 808f 	bne.w	8007176 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007058:	4b4d      	ldr	r3, [pc, #308]	@ (8007190 <xTaskIncrementTick+0x14c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3301      	adds	r3, #1
 800705e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007060:	4a4b      	ldr	r2, [pc, #300]	@ (8007190 <xTaskIncrementTick+0x14c>)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d121      	bne.n	80070b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800706c:	4b49      	ldr	r3, [pc, #292]	@ (8007194 <xTaskIncrementTick+0x150>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	603b      	str	r3, [r7, #0]
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	e7fd      	b.n	800708a <xTaskIncrementTick+0x46>
 800708e:	4b41      	ldr	r3, [pc, #260]	@ (8007194 <xTaskIncrementTick+0x150>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	4b40      	ldr	r3, [pc, #256]	@ (8007198 <xTaskIncrementTick+0x154>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a3e      	ldr	r2, [pc, #248]	@ (8007194 <xTaskIncrementTick+0x150>)
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	4a3e      	ldr	r2, [pc, #248]	@ (8007198 <xTaskIncrementTick+0x154>)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	4b3e      	ldr	r3, [pc, #248]	@ (800719c <xTaskIncrementTick+0x158>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3301      	adds	r3, #1
 80070a8:	4a3c      	ldr	r2, [pc, #240]	@ (800719c <xTaskIncrementTick+0x158>)
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	f000 f9a4 	bl	80073f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070b0:	4b3b      	ldr	r3, [pc, #236]	@ (80071a0 <xTaskIncrementTick+0x15c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d348      	bcc.n	800714c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ba:	4b36      	ldr	r3, [pc, #216]	@ (8007194 <xTaskIncrementTick+0x150>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c4:	4b36      	ldr	r3, [pc, #216]	@ (80071a0 <xTaskIncrementTick+0x15c>)
 80070c6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ca:	601a      	str	r2, [r3, #0]
					break;
 80070cc:	e03e      	b.n	800714c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ce:	4b31      	ldr	r3, [pc, #196]	@ (8007194 <xTaskIncrementTick+0x150>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d203      	bcs.n	80070ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070e6:	4a2e      	ldr	r2, [pc, #184]	@ (80071a0 <xTaskIncrementTick+0x15c>)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070ec:	e02e      	b.n	800714c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff f92f 	bl	8006356 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	3318      	adds	r3, #24
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff f926 	bl	8006356 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710e:	2201      	movs	r2, #1
 8007110:	409a      	lsls	r2, r3
 8007112:	4b24      	ldr	r3, [pc, #144]	@ (80071a4 <xTaskIncrementTick+0x160>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4313      	orrs	r3, r2
 8007118:	4a22      	ldr	r2, [pc, #136]	@ (80071a4 <xTaskIncrementTick+0x160>)
 800711a:	6013      	str	r3, [r2, #0]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4a1f      	ldr	r2, [pc, #124]	@ (80071a8 <xTaskIncrementTick+0x164>)
 800712a:	441a      	add	r2, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	3304      	adds	r3, #4
 8007130:	4619      	mov	r1, r3
 8007132:	4610      	mov	r0, r2
 8007134:	f7ff f8b2 	bl	800629c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713c:	4b1b      	ldr	r3, [pc, #108]	@ (80071ac <xTaskIncrementTick+0x168>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007142:	429a      	cmp	r2, r3
 8007144:	d3b9      	bcc.n	80070ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007146:	2301      	movs	r3, #1
 8007148:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800714a:	e7b6      	b.n	80070ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800714c:	4b17      	ldr	r3, [pc, #92]	@ (80071ac <xTaskIncrementTick+0x168>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007152:	4915      	ldr	r1, [pc, #84]	@ (80071a8 <xTaskIncrementTick+0x164>)
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	440b      	add	r3, r1
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d901      	bls.n	8007168 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007164:	2301      	movs	r3, #1
 8007166:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007168:	4b11      	ldr	r3, [pc, #68]	@ (80071b0 <xTaskIncrementTick+0x16c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007170:	2301      	movs	r3, #1
 8007172:	617b      	str	r3, [r7, #20]
 8007174:	e004      	b.n	8007180 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007176:	4b0f      	ldr	r3, [pc, #60]	@ (80071b4 <xTaskIncrementTick+0x170>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3301      	adds	r3, #1
 800717c:	4a0d      	ldr	r2, [pc, #52]	@ (80071b4 <xTaskIncrementTick+0x170>)
 800717e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007180:	697b      	ldr	r3, [r7, #20]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000ae4 	.word	0x20000ae4
 8007190:	20000ac0 	.word	0x20000ac0
 8007194:	20000a74 	.word	0x20000a74
 8007198:	20000a78 	.word	0x20000a78
 800719c:	20000ad4 	.word	0x20000ad4
 80071a0:	20000adc 	.word	0x20000adc
 80071a4:	20000ac4 	.word	0x20000ac4
 80071a8:	200009c0 	.word	0x200009c0
 80071ac:	200009bc 	.word	0x200009bc
 80071b0:	20000ad0 	.word	0x20000ad0
 80071b4:	20000acc 	.word	0x20000acc

080071b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071be:	4b2a      	ldr	r3, [pc, #168]	@ (8007268 <vTaskSwitchContext+0xb0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071c6:	4b29      	ldr	r3, [pc, #164]	@ (800726c <vTaskSwitchContext+0xb4>)
 80071c8:	2201      	movs	r2, #1
 80071ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071cc:	e045      	b.n	800725a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80071ce:	4b27      	ldr	r3, [pc, #156]	@ (800726c <vTaskSwitchContext+0xb4>)
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d4:	4b26      	ldr	r3, [pc, #152]	@ (8007270 <vTaskSwitchContext+0xb8>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	fab3 f383 	clz	r3, r3
 80071e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	f1c3 031f 	rsb	r3, r3, #31
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	4922      	ldr	r1, [pc, #136]	@ (8007274 <vTaskSwitchContext+0xbc>)
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	440b      	add	r3, r1
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10b      	bne.n	8007216 <vTaskSwitchContext+0x5e>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	607b      	str	r3, [r7, #4]
}
 8007210:	bf00      	nop
 8007212:	bf00      	nop
 8007214:	e7fd      	b.n	8007212 <vTaskSwitchContext+0x5a>
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4a14      	ldr	r2, [pc, #80]	@ (8007274 <vTaskSwitchContext+0xbc>)
 8007222:	4413      	add	r3, r2
 8007224:	613b      	str	r3, [r7, #16]
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	605a      	str	r2, [r3, #4]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	3308      	adds	r3, #8
 8007238:	429a      	cmp	r2, r3
 800723a:	d104      	bne.n	8007246 <vTaskSwitchContext+0x8e>
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	605a      	str	r2, [r3, #4]
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	4a0a      	ldr	r2, [pc, #40]	@ (8007278 <vTaskSwitchContext+0xc0>)
 800724e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007250:	4b09      	ldr	r3, [pc, #36]	@ (8007278 <vTaskSwitchContext+0xc0>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	334c      	adds	r3, #76	@ 0x4c
 8007256:	4a09      	ldr	r2, [pc, #36]	@ (800727c <vTaskSwitchContext+0xc4>)
 8007258:	6013      	str	r3, [r2, #0]
}
 800725a:	bf00      	nop
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	20000ae4 	.word	0x20000ae4
 800726c:	20000ad0 	.word	0x20000ad0
 8007270:	20000ac4 	.word	0x20000ac4
 8007274:	200009c0 	.word	0x200009c0
 8007278:	200009bc 	.word	0x200009bc
 800727c:	200003dc 	.word	0x200003dc

08007280 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007288:	f000 f852 	bl	8007330 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800728c:	4b06      	ldr	r3, [pc, #24]	@ (80072a8 <prvIdleTask+0x28>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d9f9      	bls.n	8007288 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007294:	4b05      	ldr	r3, [pc, #20]	@ (80072ac <prvIdleTask+0x2c>)
 8007296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072a4:	e7f0      	b.n	8007288 <prvIdleTask+0x8>
 80072a6:	bf00      	nop
 80072a8:	200009c0 	.word	0x200009c0
 80072ac:	e000ed04 	.word	0xe000ed04

080072b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072b6:	2300      	movs	r3, #0
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	e00c      	b.n	80072d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	4613      	mov	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4a12      	ldr	r2, [pc, #72]	@ (8007310 <prvInitialiseTaskLists+0x60>)
 80072c8:	4413      	add	r3, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe ffb9 	bl	8006242 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3301      	adds	r3, #1
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b06      	cmp	r3, #6
 80072da:	d9ef      	bls.n	80072bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072dc:	480d      	ldr	r0, [pc, #52]	@ (8007314 <prvInitialiseTaskLists+0x64>)
 80072de:	f7fe ffb0 	bl	8006242 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072e2:	480d      	ldr	r0, [pc, #52]	@ (8007318 <prvInitialiseTaskLists+0x68>)
 80072e4:	f7fe ffad 	bl	8006242 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072e8:	480c      	ldr	r0, [pc, #48]	@ (800731c <prvInitialiseTaskLists+0x6c>)
 80072ea:	f7fe ffaa 	bl	8006242 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072ee:	480c      	ldr	r0, [pc, #48]	@ (8007320 <prvInitialiseTaskLists+0x70>)
 80072f0:	f7fe ffa7 	bl	8006242 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072f4:	480b      	ldr	r0, [pc, #44]	@ (8007324 <prvInitialiseTaskLists+0x74>)
 80072f6:	f7fe ffa4 	bl	8006242 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007328 <prvInitialiseTaskLists+0x78>)
 80072fc:	4a05      	ldr	r2, [pc, #20]	@ (8007314 <prvInitialiseTaskLists+0x64>)
 80072fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007300:	4b0a      	ldr	r3, [pc, #40]	@ (800732c <prvInitialiseTaskLists+0x7c>)
 8007302:	4a05      	ldr	r2, [pc, #20]	@ (8007318 <prvInitialiseTaskLists+0x68>)
 8007304:	601a      	str	r2, [r3, #0]
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	200009c0 	.word	0x200009c0
 8007314:	20000a4c 	.word	0x20000a4c
 8007318:	20000a60 	.word	0x20000a60
 800731c:	20000a7c 	.word	0x20000a7c
 8007320:	20000a90 	.word	0x20000a90
 8007324:	20000aa8 	.word	0x20000aa8
 8007328:	20000a74 	.word	0x20000a74
 800732c:	20000a78 	.word	0x20000a78

08007330 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007336:	e019      	b.n	800736c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007338:	f000 fc56 	bl	8007be8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800733c:	4b10      	ldr	r3, [pc, #64]	@ (8007380 <prvCheckTasksWaitingTermination+0x50>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3304      	adds	r3, #4
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff f804 	bl	8006356 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800734e:	4b0d      	ldr	r3, [pc, #52]	@ (8007384 <prvCheckTasksWaitingTermination+0x54>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3b01      	subs	r3, #1
 8007354:	4a0b      	ldr	r2, [pc, #44]	@ (8007384 <prvCheckTasksWaitingTermination+0x54>)
 8007356:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007358:	4b0b      	ldr	r3, [pc, #44]	@ (8007388 <prvCheckTasksWaitingTermination+0x58>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3b01      	subs	r3, #1
 800735e:	4a0a      	ldr	r2, [pc, #40]	@ (8007388 <prvCheckTasksWaitingTermination+0x58>)
 8007360:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007362:	f000 fc73 	bl	8007c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f810 	bl	800738c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800736c:	4b06      	ldr	r3, [pc, #24]	@ (8007388 <prvCheckTasksWaitingTermination+0x58>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e1      	bne.n	8007338 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000a90 	.word	0x20000a90
 8007384:	20000abc 	.word	0x20000abc
 8007388:	20000aa4 	.word	0x20000aa4

0800738c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	334c      	adds	r3, #76	@ 0x4c
 8007398:	4618      	mov	r0, r3
 800739a:	f002 fbd9 	bl	8009b50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d108      	bne.n	80073ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fe0b 	bl	8007fc8 <vPortFree>
				vPortFree( pxTCB );
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fe08 	bl	8007fc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073b8:	e019      	b.n	80073ee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d103      	bne.n	80073cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fdff 	bl	8007fc8 <vPortFree>
	}
 80073ca:	e010      	b.n	80073ee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d00b      	beq.n	80073ee <prvDeleteTCB+0x62>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	60fb      	str	r3, [r7, #12]
}
 80073e8:	bf00      	nop
 80073ea:	bf00      	nop
 80073ec:	e7fd      	b.n	80073ea <prvDeleteTCB+0x5e>
	}
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073fe:	4b0c      	ldr	r3, [pc, #48]	@ (8007430 <prvResetNextTaskUnblockTime+0x38>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007408:	4b0a      	ldr	r3, [pc, #40]	@ (8007434 <prvResetNextTaskUnblockTime+0x3c>)
 800740a:	f04f 32ff 	mov.w	r2, #4294967295
 800740e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007410:	e008      	b.n	8007424 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007412:	4b07      	ldr	r3, [pc, #28]	@ (8007430 <prvResetNextTaskUnblockTime+0x38>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	4a04      	ldr	r2, [pc, #16]	@ (8007434 <prvResetNextTaskUnblockTime+0x3c>)
 8007422:	6013      	str	r3, [r2, #0]
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	20000a74 	.word	0x20000a74
 8007434:	20000adc 	.word	0x20000adc

08007438 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800743e:	4b05      	ldr	r3, [pc, #20]	@ (8007454 <xTaskGetCurrentTaskHandle+0x1c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007444:	687b      	ldr	r3, [r7, #4]
	}
 8007446:	4618      	mov	r0, r3
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	200009bc 	.word	0x200009bc

08007458 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007466:	f000 fbbf 	bl	8007be8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800746a:	4b29      	ldr	r3, [pc, #164]	@ (8007510 <xTaskNotifyWait+0xb8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b02      	cmp	r3, #2
 8007476:	d01c      	beq.n	80074b2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007478:	4b25      	ldr	r3, [pc, #148]	@ (8007510 <xTaskNotifyWait+0xb8>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	43d2      	mvns	r2, r2
 8007484:	400a      	ands	r2, r1
 8007486:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800748a:	4b21      	ldr	r3, [pc, #132]	@ (8007510 <xTaskNotifyWait+0xb8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800749a:	2101      	movs	r1, #1
 800749c:	6838      	ldr	r0, [r7, #0]
 800749e:	f000 fa09 	bl	80078b4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80074a2:	4b1c      	ldr	r3, [pc, #112]	@ (8007514 <xTaskNotifyWait+0xbc>)
 80074a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80074b2:	f000 fbcb 	bl	8007c4c <vPortExitCritical>

		taskENTER_CRITICAL();
 80074b6:	f000 fb97 	bl	8007be8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d005      	beq.n	80074cc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80074c0:	4b13      	ldr	r3, [pc, #76]	@ (8007510 <xTaskNotifyWait+0xb8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80074cc:	4b10      	ldr	r3, [pc, #64]	@ (8007510 <xTaskNotifyWait+0xb8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d002      	beq.n	80074e0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80074da:	2300      	movs	r3, #0
 80074dc:	617b      	str	r3, [r7, #20]
 80074de:	e00a      	b.n	80074f6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80074e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007510 <xTaskNotifyWait+0xb8>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	43d2      	mvns	r2, r2
 80074ec:	400a      	ands	r2, r1
 80074ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 80074f2:	2301      	movs	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074f6:	4b06      	ldr	r3, [pc, #24]	@ (8007510 <xTaskNotifyWait+0xb8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8007500:	f000 fba4 	bl	8007c4c <vPortExitCritical>

		return xReturn;
 8007504:	697b      	ldr	r3, [r7, #20]
	}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	200009bc 	.word	0x200009bc
 8007514:	e000ed04 	.word	0xe000ed04

08007518 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007518:	b580      	push	{r7, lr}
 800751a:	b08a      	sub	sp, #40	@ 0x28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	603b      	str	r3, [r7, #0]
 8007524:	4613      	mov	r3, r2
 8007526:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007528:	2301      	movs	r3, #1
 800752a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10b      	bne.n	800754a <xTaskGenericNotify+0x32>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	61bb      	str	r3, [r7, #24]
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	e7fd      	b.n	8007546 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800754e:	f000 fb4b 	bl	8007be8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d004      	beq.n	8007562 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007568:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	2202      	movs	r2, #2
 800756e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	2b04      	cmp	r3, #4
 8007576:	d82e      	bhi.n	80075d6 <xTaskGenericNotify+0xbe>
 8007578:	a201      	add	r2, pc, #4	@ (adr r2, 8007580 <xTaskGenericNotify+0x68>)
 800757a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757e:	bf00      	nop
 8007580:	080075fb 	.word	0x080075fb
 8007584:	08007595 	.word	0x08007595
 8007588:	080075a7 	.word	0x080075a7
 800758c:	080075b7 	.word	0x080075b7
 8007590:	080075c1 	.word	0x080075c1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	431a      	orrs	r2, r3
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80075a4:	e02c      	b.n	8007600 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80075b4:	e024      	b.n	8007600 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80075be:	e01f      	b.n	8007600 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80075c0:	7ffb      	ldrb	r3, [r7, #31]
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d004      	beq.n	80075d0 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80075ce:	e017      	b.n	8007600 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80075d4:	e014      	b.n	8007600 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e0:	d00d      	beq.n	80075fe <xTaskGenericNotify+0xe6>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	617b      	str	r3, [r7, #20]
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	e7fd      	b.n	80075f6 <xTaskGenericNotify+0xde>
					break;
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <xTaskGenericNotify+0xe8>

					break;
 80075fe:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007600:	7ffb      	ldrb	r3, [r7, #31]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d13a      	bne.n	800767c <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	3304      	adds	r3, #4
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fea3 	bl	8006356 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	2201      	movs	r2, #1
 8007616:	409a      	lsls	r2, r3
 8007618:	4b1c      	ldr	r3, [pc, #112]	@ (800768c <xTaskGenericNotify+0x174>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4313      	orrs	r3, r2
 800761e:	4a1b      	ldr	r2, [pc, #108]	@ (800768c <xTaskGenericNotify+0x174>)
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4a18      	ldr	r2, [pc, #96]	@ (8007690 <xTaskGenericNotify+0x178>)
 8007630:	441a      	add	r2, r3
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	3304      	adds	r3, #4
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f7fe fe2f 	bl	800629c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00b      	beq.n	800765e <xTaskGenericNotify+0x146>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	613b      	str	r3, [r7, #16]
}
 8007658:	bf00      	nop
 800765a:	bf00      	nop
 800765c:	e7fd      	b.n	800765a <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007662:	4b0c      	ldr	r3, [pc, #48]	@ (8007694 <xTaskGenericNotify+0x17c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007668:	429a      	cmp	r2, r3
 800766a:	d907      	bls.n	800767c <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800766c:	4b0a      	ldr	r3, [pc, #40]	@ (8007698 <xTaskGenericNotify+0x180>)
 800766e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800767c:	f000 fae6 	bl	8007c4c <vPortExitCritical>

		return xReturn;
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007682:	4618      	mov	r0, r3
 8007684:	3728      	adds	r7, #40	@ 0x28
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20000ac4 	.word	0x20000ac4
 8007690:	200009c0 	.word	0x200009c0
 8007694:	200009bc 	.word	0x200009bc
 8007698:	e000ed04 	.word	0xe000ed04

0800769c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08e      	sub	sp, #56	@ 0x38
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	603b      	str	r3, [r7, #0]
 80076a8:	4613      	mov	r3, r2
 80076aa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80076ac:	2301      	movs	r3, #1
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10b      	bne.n	80076ce <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	e7fd      	b.n	80076ca <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076ce:	f000 fb6b 	bl	8007da8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80076d6:	f3ef 8211 	mrs	r2, BASEPRI
 80076da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	623a      	str	r2, [r7, #32]
 80076ec:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80076ee:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d004      	beq.n	8007702 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007704:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800770c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770e:	2202      	movs	r2, #2
 8007710:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	2b04      	cmp	r3, #4
 8007718:	d82e      	bhi.n	8007778 <xTaskGenericNotifyFromISR+0xdc>
 800771a:	a201      	add	r2, pc, #4	@ (adr r2, 8007720 <xTaskGenericNotifyFromISR+0x84>)
 800771c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007720:	0800779d 	.word	0x0800779d
 8007724:	08007735 	.word	0x08007735
 8007728:	08007747 	.word	0x08007747
 800772c:	08007757 	.word	0x08007757
 8007730:	08007761 	.word	0x08007761
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	431a      	orrs	r2, r3
 800773e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007740:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8007744:	e02d      	b.n	80077a2 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007748:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800774c:	1c5a      	adds	r2, r3, #1
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8007754:	e025      	b.n	80077a2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800775e:	e020      	b.n	80077a2 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007760:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007764:	2b02      	cmp	r3, #2
 8007766:	d004      	beq.n	8007772 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007770:	e017      	b.n	80077a2 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8007772:	2300      	movs	r3, #0
 8007774:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007776:	e014      	b.n	80077a2 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007782:	d00d      	beq.n	80077a0 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	61bb      	str	r3, [r7, #24]
}
 8007796:	bf00      	nop
 8007798:	bf00      	nop
 800779a:	e7fd      	b.n	8007798 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800779c:	bf00      	nop
 800779e:	e000      	b.n	80077a2 <xTaskGenericNotifyFromISR+0x106>
					break;
 80077a0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80077a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d146      	bne.n	8007838 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80077aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00b      	beq.n	80077ca <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	617b      	str	r3, [r7, #20]
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	e7fd      	b.n	80077c6 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ca:	4b21      	ldr	r3, [pc, #132]	@ (8007850 <xTaskGenericNotifyFromISR+0x1b4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d11c      	bne.n	800780c <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	3304      	adds	r3, #4
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fdbd 	bl	8006356 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e0:	2201      	movs	r2, #1
 80077e2:	409a      	lsls	r2, r3
 80077e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007854 <xTaskGenericNotifyFromISR+0x1b8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007854 <xTaskGenericNotifyFromISR+0x1b8>)
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4a17      	ldr	r2, [pc, #92]	@ (8007858 <xTaskGenericNotifyFromISR+0x1bc>)
 80077fc:	441a      	add	r2, r3
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	3304      	adds	r3, #4
 8007802:	4619      	mov	r1, r3
 8007804:	4610      	mov	r0, r2
 8007806:	f7fe fd49 	bl	800629c <vListInsertEnd>
 800780a:	e005      	b.n	8007818 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	3318      	adds	r3, #24
 8007810:	4619      	mov	r1, r3
 8007812:	4812      	ldr	r0, [pc, #72]	@ (800785c <xTaskGenericNotifyFromISR+0x1c0>)
 8007814:	f7fe fd42 	bl	800629c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800781c:	4b10      	ldr	r3, [pc, #64]	@ (8007860 <xTaskGenericNotifyFromISR+0x1c4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007822:	429a      	cmp	r2, r3
 8007824:	d908      	bls.n	8007838 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800782c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800782e:	2201      	movs	r2, #1
 8007830:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007832:	4b0c      	ldr	r3, [pc, #48]	@ (8007864 <xTaskGenericNotifyFromISR+0x1c8>)
 8007834:	2201      	movs	r2, #1
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f383 8811 	msr	BASEPRI, r3
}
 8007842:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007846:	4618      	mov	r0, r3
 8007848:	3738      	adds	r7, #56	@ 0x38
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20000ae4 	.word	0x20000ae4
 8007854:	20000ac4 	.word	0x20000ac4
 8007858:	200009c0 	.word	0x200009c0
 800785c:	20000a7c 	.word	0x20000a7c
 8007860:	200009bc 	.word	0x200009bc
 8007864:	20000ad0 	.word	0x20000ad0

08007868 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <xTaskNotifyStateClear+0x14>
 8007876:	4b0e      	ldr	r3, [pc, #56]	@ (80078b0 <xTaskNotifyStateClear+0x48>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	e000      	b.n	800787e <xTaskNotifyStateClear+0x16>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8007880:	f000 f9b2 	bl	8007be8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d106      	bne.n	800789e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				xReturn = pdPASS;
 8007898:	2301      	movs	r3, #1
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	e001      	b.n	80078a2 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80078a2:	f000 f9d3 	bl	8007c4c <vPortExitCritical>

		return xReturn;
 80078a6:	68fb      	ldr	r3, [r7, #12]
	}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	200009bc 	.word	0x200009bc

080078b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078be:	4b29      	ldr	r3, [pc, #164]	@ (8007964 <prvAddCurrentTaskToDelayedList+0xb0>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078c4:	4b28      	ldr	r3, [pc, #160]	@ (8007968 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3304      	adds	r3, #4
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fd43 	bl	8006356 <uxListRemove>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10b      	bne.n	80078ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80078d6:	4b24      	ldr	r3, [pc, #144]	@ (8007968 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078dc:	2201      	movs	r2, #1
 80078de:	fa02 f303 	lsl.w	r3, r2, r3
 80078e2:	43da      	mvns	r2, r3
 80078e4:	4b21      	ldr	r3, [pc, #132]	@ (800796c <prvAddCurrentTaskToDelayedList+0xb8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4013      	ands	r3, r2
 80078ea:	4a20      	ldr	r2, [pc, #128]	@ (800796c <prvAddCurrentTaskToDelayedList+0xb8>)
 80078ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f4:	d10a      	bne.n	800790c <prvAddCurrentTaskToDelayedList+0x58>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007968 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3304      	adds	r3, #4
 8007902:	4619      	mov	r1, r3
 8007904:	481a      	ldr	r0, [pc, #104]	@ (8007970 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007906:	f7fe fcc9 	bl	800629c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800790a:	e026      	b.n	800795a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4413      	add	r3, r2
 8007912:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007914:	4b14      	ldr	r3, [pc, #80]	@ (8007968 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	429a      	cmp	r2, r3
 8007922:	d209      	bcs.n	8007938 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007924:	4b13      	ldr	r3, [pc, #76]	@ (8007974 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	4b0f      	ldr	r3, [pc, #60]	@ (8007968 <prvAddCurrentTaskToDelayedList+0xb4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3304      	adds	r3, #4
 800792e:	4619      	mov	r1, r3
 8007930:	4610      	mov	r0, r2
 8007932:	f7fe fcd7 	bl	80062e4 <vListInsert>
}
 8007936:	e010      	b.n	800795a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007938:	4b0f      	ldr	r3, [pc, #60]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xc4>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	4b0a      	ldr	r3, [pc, #40]	@ (8007968 <prvAddCurrentTaskToDelayedList+0xb4>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3304      	adds	r3, #4
 8007942:	4619      	mov	r1, r3
 8007944:	4610      	mov	r0, r2
 8007946:	f7fe fccd 	bl	80062e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800794a:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <prvAddCurrentTaskToDelayedList+0xc8>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	429a      	cmp	r2, r3
 8007952:	d202      	bcs.n	800795a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007954:	4a09      	ldr	r2, [pc, #36]	@ (800797c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	6013      	str	r3, [r2, #0]
}
 800795a:	bf00      	nop
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000ac0 	.word	0x20000ac0
 8007968:	200009bc 	.word	0x200009bc
 800796c:	20000ac4 	.word	0x20000ac4
 8007970:	20000aa8 	.word	0x20000aa8
 8007974:	20000a78 	.word	0x20000a78
 8007978:	20000a74 	.word	0x20000a74
 800797c:	20000adc 	.word	0x20000adc

08007980 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3b04      	subs	r3, #4
 8007990:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3b04      	subs	r3, #4
 800799e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f023 0201 	bic.w	r2, r3, #1
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3b04      	subs	r3, #4
 80079ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079b0:	4a0c      	ldr	r2, [pc, #48]	@ (80079e4 <pxPortInitialiseStack+0x64>)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3b14      	subs	r3, #20
 80079ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3b04      	subs	r3, #4
 80079c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f06f 0202 	mvn.w	r2, #2
 80079ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3b20      	subs	r3, #32
 80079d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079d6:	68fb      	ldr	r3, [r7, #12]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	080079e9 	.word	0x080079e9

080079e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079f2:	4b13      	ldr	r3, [pc, #76]	@ (8007a40 <prvTaskExitError+0x58>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d00b      	beq.n	8007a14 <prvTaskExitError+0x2c>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	60fb      	str	r3, [r7, #12]
}
 8007a0e:	bf00      	nop
 8007a10:	bf00      	nop
 8007a12:	e7fd      	b.n	8007a10 <prvTaskExitError+0x28>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	60bb      	str	r3, [r7, #8]
}
 8007a26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a28:	bf00      	nop
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0fc      	beq.n	8007a2a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	20000260 	.word	0x20000260
	...

08007a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a50:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <pxCurrentTCBConst2>)
 8007a52:	6819      	ldr	r1, [r3, #0]
 8007a54:	6808      	ldr	r0, [r1, #0]
 8007a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5a:	f380 8809 	msr	PSP, r0
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f04f 0000 	mov.w	r0, #0
 8007a66:	f380 8811 	msr	BASEPRI, r0
 8007a6a:	4770      	bx	lr
 8007a6c:	f3af 8000 	nop.w

08007a70 <pxCurrentTCBConst2>:
 8007a70:	200009bc 	.word	0x200009bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop

08007a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a78:	4808      	ldr	r0, [pc, #32]	@ (8007a9c <prvPortStartFirstTask+0x24>)
 8007a7a:	6800      	ldr	r0, [r0, #0]
 8007a7c:	6800      	ldr	r0, [r0, #0]
 8007a7e:	f380 8808 	msr	MSP, r0
 8007a82:	f04f 0000 	mov.w	r0, #0
 8007a86:	f380 8814 	msr	CONTROL, r0
 8007a8a:	b662      	cpsie	i
 8007a8c:	b661      	cpsie	f
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	df00      	svc	0
 8007a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a9a:	bf00      	nop
 8007a9c:	e000ed08 	.word	0xe000ed08

08007aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007aa6:	4b47      	ldr	r3, [pc, #284]	@ (8007bc4 <xPortStartScheduler+0x124>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a47      	ldr	r2, [pc, #284]	@ (8007bc8 <xPortStartScheduler+0x128>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d10b      	bne.n	8007ac8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	60fb      	str	r3, [r7, #12]
}
 8007ac2:	bf00      	nop
 8007ac4:	bf00      	nop
 8007ac6:	e7fd      	b.n	8007ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8007bc4 <xPortStartScheduler+0x124>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a3f      	ldr	r2, [pc, #252]	@ (8007bcc <xPortStartScheduler+0x12c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d10b      	bne.n	8007aea <xPortStartScheduler+0x4a>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	613b      	str	r3, [r7, #16]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007aea:	4b39      	ldr	r3, [pc, #228]	@ (8007bd0 <xPortStartScheduler+0x130>)
 8007aec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	22ff      	movs	r2, #255	@ 0xff
 8007afa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b04:	78fb      	ldrb	r3, [r7, #3]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	4b31      	ldr	r3, [pc, #196]	@ (8007bd4 <xPortStartScheduler+0x134>)
 8007b10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b12:	4b31      	ldr	r3, [pc, #196]	@ (8007bd8 <xPortStartScheduler+0x138>)
 8007b14:	2207      	movs	r2, #7
 8007b16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b18:	e009      	b.n	8007b2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8007bd8 <xPortStartScheduler+0x138>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	4a2d      	ldr	r2, [pc, #180]	@ (8007bd8 <xPortStartScheduler+0x138>)
 8007b22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b2e:	78fb      	ldrb	r3, [r7, #3]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b36:	2b80      	cmp	r3, #128	@ 0x80
 8007b38:	d0ef      	beq.n	8007b1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b3a:	4b27      	ldr	r3, [pc, #156]	@ (8007bd8 <xPortStartScheduler+0x138>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f1c3 0307 	rsb	r3, r3, #7
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d00b      	beq.n	8007b5e <xPortStartScheduler+0xbe>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	60bb      	str	r3, [r7, #8]
}
 8007b58:	bf00      	nop
 8007b5a:	bf00      	nop
 8007b5c:	e7fd      	b.n	8007b5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8007bd8 <xPortStartScheduler+0x138>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	4a1c      	ldr	r2, [pc, #112]	@ (8007bd8 <xPortStartScheduler+0x138>)
 8007b66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b68:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd8 <xPortStartScheduler+0x138>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b70:	4a19      	ldr	r2, [pc, #100]	@ (8007bd8 <xPortStartScheduler+0x138>)
 8007b72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b7c:	4b17      	ldr	r3, [pc, #92]	@ (8007bdc <xPortStartScheduler+0x13c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a16      	ldr	r2, [pc, #88]	@ (8007bdc <xPortStartScheduler+0x13c>)
 8007b82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b88:	4b14      	ldr	r3, [pc, #80]	@ (8007bdc <xPortStartScheduler+0x13c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a13      	ldr	r2, [pc, #76]	@ (8007bdc <xPortStartScheduler+0x13c>)
 8007b8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b94:	f000 f8da 	bl	8007d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b98:	4b11      	ldr	r3, [pc, #68]	@ (8007be0 <xPortStartScheduler+0x140>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b9e:	f000 f8f9 	bl	8007d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ba2:	4b10      	ldr	r3, [pc, #64]	@ (8007be4 <xPortStartScheduler+0x144>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8007be4 <xPortStartScheduler+0x144>)
 8007ba8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007bac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bae:	f7ff ff63 	bl	8007a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bb2:	f7ff fb01 	bl	80071b8 <vTaskSwitchContext>
	prvTaskExitError();
 8007bb6:	f7ff ff17 	bl	80079e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	e000ed00 	.word	0xe000ed00
 8007bc8:	410fc271 	.word	0x410fc271
 8007bcc:	410fc270 	.word	0x410fc270
 8007bd0:	e000e400 	.word	0xe000e400
 8007bd4:	20000ae8 	.word	0x20000ae8
 8007bd8:	20000aec 	.word	0x20000aec
 8007bdc:	e000ed20 	.word	0xe000ed20
 8007be0:	20000260 	.word	0x20000260
 8007be4:	e000ef34 	.word	0xe000ef34

08007be8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	607b      	str	r3, [r7, #4]
}
 8007c00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c02:	4b10      	ldr	r3, [pc, #64]	@ (8007c44 <vPortEnterCritical+0x5c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3301      	adds	r3, #1
 8007c08:	4a0e      	ldr	r2, [pc, #56]	@ (8007c44 <vPortEnterCritical+0x5c>)
 8007c0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c44 <vPortEnterCritical+0x5c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d110      	bne.n	8007c36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c14:	4b0c      	ldr	r3, [pc, #48]	@ (8007c48 <vPortEnterCritical+0x60>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00b      	beq.n	8007c36 <vPortEnterCritical+0x4e>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	603b      	str	r3, [r7, #0]
}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
 8007c34:	e7fd      	b.n	8007c32 <vPortEnterCritical+0x4a>
	}
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20000260 	.word	0x20000260
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c52:	4b12      	ldr	r3, [pc, #72]	@ (8007c9c <vPortExitCritical+0x50>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10b      	bne.n	8007c72 <vPortExitCritical+0x26>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	607b      	str	r3, [r7, #4]
}
 8007c6c:	bf00      	nop
 8007c6e:	bf00      	nop
 8007c70:	e7fd      	b.n	8007c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c72:	4b0a      	ldr	r3, [pc, #40]	@ (8007c9c <vPortExitCritical+0x50>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	4a08      	ldr	r2, [pc, #32]	@ (8007c9c <vPortExitCritical+0x50>)
 8007c7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c7c:	4b07      	ldr	r3, [pc, #28]	@ (8007c9c <vPortExitCritical+0x50>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d105      	bne.n	8007c90 <vPortExitCritical+0x44>
 8007c84:	2300      	movs	r3, #0
 8007c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	f383 8811 	msr	BASEPRI, r3
}
 8007c8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	20000260 	.word	0x20000260

08007ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ca0:	f3ef 8009 	mrs	r0, PSP
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	4b15      	ldr	r3, [pc, #84]	@ (8007d00 <pxCurrentTCBConst>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	f01e 0f10 	tst.w	lr, #16
 8007cb0:	bf08      	it	eq
 8007cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cba:	6010      	str	r0, [r2, #0]
 8007cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007cc4:	f380 8811 	msr	BASEPRI, r0
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f7ff fa72 	bl	80071b8 <vTaskSwitchContext>
 8007cd4:	f04f 0000 	mov.w	r0, #0
 8007cd8:	f380 8811 	msr	BASEPRI, r0
 8007cdc:	bc09      	pop	{r0, r3}
 8007cde:	6819      	ldr	r1, [r3, #0]
 8007ce0:	6808      	ldr	r0, [r1, #0]
 8007ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce6:	f01e 0f10 	tst.w	lr, #16
 8007cea:	bf08      	it	eq
 8007cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cf0:	f380 8809 	msr	PSP, r0
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	f3af 8000 	nop.w

08007d00 <pxCurrentTCBConst>:
 8007d00:	200009bc 	.word	0x200009bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop

08007d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	607b      	str	r3, [r7, #4]
}
 8007d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d22:	f7ff f98f 	bl	8007044 <xTaskIncrementTick>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d2c:	4b06      	ldr	r3, [pc, #24]	@ (8007d48 <SysTick_Handler+0x40>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	2300      	movs	r3, #0
 8007d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	f383 8811 	msr	BASEPRI, r3
}
 8007d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	e000ed04 	.word	0xe000ed04

08007d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d50:	4b0b      	ldr	r3, [pc, #44]	@ (8007d80 <vPortSetupTimerInterrupt+0x34>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d56:	4b0b      	ldr	r3, [pc, #44]	@ (8007d84 <vPortSetupTimerInterrupt+0x38>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d88 <vPortSetupTimerInterrupt+0x3c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a0a      	ldr	r2, [pc, #40]	@ (8007d8c <vPortSetupTimerInterrupt+0x40>)
 8007d62:	fba2 2303 	umull	r2, r3, r2, r3
 8007d66:	099b      	lsrs	r3, r3, #6
 8007d68:	4a09      	ldr	r2, [pc, #36]	@ (8007d90 <vPortSetupTimerInterrupt+0x44>)
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d6e:	4b04      	ldr	r3, [pc, #16]	@ (8007d80 <vPortSetupTimerInterrupt+0x34>)
 8007d70:	2207      	movs	r2, #7
 8007d72:	601a      	str	r2, [r3, #0]
}
 8007d74:	bf00      	nop
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	e000e010 	.word	0xe000e010
 8007d84:	e000e018 	.word	0xe000e018
 8007d88:	20000254 	.word	0x20000254
 8007d8c:	10624dd3 	.word	0x10624dd3
 8007d90:	e000e014 	.word	0xe000e014

08007d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007da4 <vPortEnableVFP+0x10>
 8007d98:	6801      	ldr	r1, [r0, #0]
 8007d9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d9e:	6001      	str	r1, [r0, #0]
 8007da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007da2:	bf00      	nop
 8007da4:	e000ed88 	.word	0xe000ed88

08007da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dae:	f3ef 8305 	mrs	r3, IPSR
 8007db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b0f      	cmp	r3, #15
 8007db8:	d915      	bls.n	8007de6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dba:	4a18      	ldr	r2, [pc, #96]	@ (8007e1c <vPortValidateInterruptPriority+0x74>)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007dc4:	4b16      	ldr	r3, [pc, #88]	@ (8007e20 <vPortValidateInterruptPriority+0x78>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	7afa      	ldrb	r2, [r7, #11]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d20b      	bcs.n	8007de6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	607b      	str	r3, [r7, #4]
}
 8007de0:	bf00      	nop
 8007de2:	bf00      	nop
 8007de4:	e7fd      	b.n	8007de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007de6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e24 <vPortValidateInterruptPriority+0x7c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007dee:	4b0e      	ldr	r3, [pc, #56]	@ (8007e28 <vPortValidateInterruptPriority+0x80>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d90b      	bls.n	8007e0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	603b      	str	r3, [r7, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	bf00      	nop
 8007e0c:	e7fd      	b.n	8007e0a <vPortValidateInterruptPriority+0x62>
	}
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	e000e3f0 	.word	0xe000e3f0
 8007e20:	20000ae8 	.word	0x20000ae8
 8007e24:	e000ed0c 	.word	0xe000ed0c
 8007e28:	20000aec 	.word	0x20000aec

08007e2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	@ 0x28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e38:	f7ff f858 	bl	8006eec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8007fb0 <pvPortMalloc+0x184>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e44:	f000 f924 	bl	8008090 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e48:	4b5a      	ldr	r3, [pc, #360]	@ (8007fb4 <pvPortMalloc+0x188>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f040 8095 	bne.w	8007f80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01e      	beq.n	8007e9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e5c:	2208      	movs	r2, #8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4413      	add	r3, r2
 8007e62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d015      	beq.n	8007e9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f023 0307 	bic.w	r3, r3, #7
 8007e74:	3308      	adds	r3, #8
 8007e76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00b      	beq.n	8007e9a <pvPortMalloc+0x6e>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	617b      	str	r3, [r7, #20]
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop
 8007e98:	e7fd      	b.n	8007e96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d06f      	beq.n	8007f80 <pvPortMalloc+0x154>
 8007ea0:	4b45      	ldr	r3, [pc, #276]	@ (8007fb8 <pvPortMalloc+0x18c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d86a      	bhi.n	8007f80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007eaa:	4b44      	ldr	r3, [pc, #272]	@ (8007fbc <pvPortMalloc+0x190>)
 8007eac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007eae:	4b43      	ldr	r3, [pc, #268]	@ (8007fbc <pvPortMalloc+0x190>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eb4:	e004      	b.n	8007ec0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d903      	bls.n	8007ed2 <pvPortMalloc+0xa6>
 8007eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1f1      	bne.n	8007eb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ed2:	4b37      	ldr	r3, [pc, #220]	@ (8007fb0 <pvPortMalloc+0x184>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d051      	beq.n	8007f80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	4413      	add	r3, r2
 8007ee4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	1ad2      	subs	r2, r2, r3
 8007ef6:	2308      	movs	r3, #8
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d920      	bls.n	8007f40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4413      	add	r3, r2
 8007f04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	f003 0307 	and.w	r3, r3, #7
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <pvPortMalloc+0xfc>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	613b      	str	r3, [r7, #16]
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	1ad2      	subs	r2, r2, r3
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f3a:	69b8      	ldr	r0, [r7, #24]
 8007f3c:	f000 f90a 	bl	8008154 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f40:	4b1d      	ldr	r3, [pc, #116]	@ (8007fb8 <pvPortMalloc+0x18c>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007fb8 <pvPortMalloc+0x18c>)
 8007f4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8007fb8 <pvPortMalloc+0x18c>)
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	4b1b      	ldr	r3, [pc, #108]	@ (8007fc0 <pvPortMalloc+0x194>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d203      	bcs.n	8007f62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f5a:	4b17      	ldr	r3, [pc, #92]	@ (8007fb8 <pvPortMalloc+0x18c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a18      	ldr	r2, [pc, #96]	@ (8007fc0 <pvPortMalloc+0x194>)
 8007f60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	4b13      	ldr	r3, [pc, #76]	@ (8007fb4 <pvPortMalloc+0x188>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	2200      	movs	r2, #0
 8007f74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f76:	4b13      	ldr	r3, [pc, #76]	@ (8007fc4 <pvPortMalloc+0x198>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	4a11      	ldr	r2, [pc, #68]	@ (8007fc4 <pvPortMalloc+0x198>)
 8007f7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f80:	f7fe ffc2 	bl	8006f08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00b      	beq.n	8007fa6 <pvPortMalloc+0x17a>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	60fb      	str	r3, [r7, #12]
}
 8007fa0:	bf00      	nop
 8007fa2:	bf00      	nop
 8007fa4:	e7fd      	b.n	8007fa2 <pvPortMalloc+0x176>
	return pvReturn;
 8007fa6:	69fb      	ldr	r3, [r7, #28]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3728      	adds	r7, #40	@ 0x28
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	20005918 	.word	0x20005918
 8007fb4:	2000592c 	.word	0x2000592c
 8007fb8:	2000591c 	.word	0x2000591c
 8007fbc:	20005910 	.word	0x20005910
 8007fc0:	20005920 	.word	0x20005920
 8007fc4:	20005924 	.word	0x20005924

08007fc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d04f      	beq.n	800807a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fda:	2308      	movs	r3, #8
 8007fdc:	425b      	negs	r3, r3
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	4b25      	ldr	r3, [pc, #148]	@ (8008084 <vPortFree+0xbc>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10b      	bne.n	800800e <vPortFree+0x46>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	60fb      	str	r3, [r7, #12]
}
 8008008:	bf00      	nop
 800800a:	bf00      	nop
 800800c:	e7fd      	b.n	800800a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00b      	beq.n	800802e <vPortFree+0x66>
	__asm volatile
 8008016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	60bb      	str	r3, [r7, #8]
}
 8008028:	bf00      	nop
 800802a:	bf00      	nop
 800802c:	e7fd      	b.n	800802a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	4b14      	ldr	r3, [pc, #80]	@ (8008084 <vPortFree+0xbc>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4013      	ands	r3, r2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01e      	beq.n	800807a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d11a      	bne.n	800807a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	4b0e      	ldr	r3, [pc, #56]	@ (8008084 <vPortFree+0xbc>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	43db      	mvns	r3, r3
 800804e:	401a      	ands	r2, r3
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008054:	f7fe ff4a 	bl	8006eec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	4b0a      	ldr	r3, [pc, #40]	@ (8008088 <vPortFree+0xc0>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4413      	add	r3, r2
 8008062:	4a09      	ldr	r2, [pc, #36]	@ (8008088 <vPortFree+0xc0>)
 8008064:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008066:	6938      	ldr	r0, [r7, #16]
 8008068:	f000 f874 	bl	8008154 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800806c:	4b07      	ldr	r3, [pc, #28]	@ (800808c <vPortFree+0xc4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3301      	adds	r3, #1
 8008072:	4a06      	ldr	r2, [pc, #24]	@ (800808c <vPortFree+0xc4>)
 8008074:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008076:	f7fe ff47 	bl	8006f08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800807a:	bf00      	nop
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	2000592c 	.word	0x2000592c
 8008088:	2000591c 	.word	0x2000591c
 800808c:	20005928 	.word	0x20005928

08008090 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008096:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800809a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800809c:	4b27      	ldr	r3, [pc, #156]	@ (800813c <prvHeapInit+0xac>)
 800809e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f003 0307 	and.w	r3, r3, #7
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00c      	beq.n	80080c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3307      	adds	r3, #7
 80080ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f023 0307 	bic.w	r3, r3, #7
 80080b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	4a1f      	ldr	r2, [pc, #124]	@ (800813c <prvHeapInit+0xac>)
 80080c0:	4413      	add	r3, r2
 80080c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008140 <prvHeapInit+0xb0>)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008140 <prvHeapInit+0xb0>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	4413      	add	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080dc:	2208      	movs	r2, #8
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	1a9b      	subs	r3, r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0307 	bic.w	r3, r3, #7
 80080ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4a15      	ldr	r2, [pc, #84]	@ (8008144 <prvHeapInit+0xb4>)
 80080f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080f2:	4b14      	ldr	r3, [pc, #80]	@ (8008144 <prvHeapInit+0xb4>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2200      	movs	r2, #0
 80080f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080fa:	4b12      	ldr	r3, [pc, #72]	@ (8008144 <prvHeapInit+0xb4>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	1ad2      	subs	r2, r2, r3
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008110:	4b0c      	ldr	r3, [pc, #48]	@ (8008144 <prvHeapInit+0xb4>)
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4a0a      	ldr	r2, [pc, #40]	@ (8008148 <prvHeapInit+0xb8>)
 800811e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	4a09      	ldr	r2, [pc, #36]	@ (800814c <prvHeapInit+0xbc>)
 8008126:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008128:	4b09      	ldr	r3, [pc, #36]	@ (8008150 <prvHeapInit+0xc0>)
 800812a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800812e:	601a      	str	r2, [r3, #0]
}
 8008130:	bf00      	nop
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	20000af0 	.word	0x20000af0
 8008140:	20005910 	.word	0x20005910
 8008144:	20005918 	.word	0x20005918
 8008148:	20005920 	.word	0x20005920
 800814c:	2000591c 	.word	0x2000591c
 8008150:	2000592c 	.word	0x2000592c

08008154 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800815c:	4b28      	ldr	r3, [pc, #160]	@ (8008200 <prvInsertBlockIntoFreeList+0xac>)
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	e002      	b.n	8008168 <prvInsertBlockIntoFreeList+0x14>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	429a      	cmp	r2, r3
 8008170:	d8f7      	bhi.n	8008162 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	4413      	add	r3, r2
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	429a      	cmp	r2, r3
 8008182:	d108      	bne.n	8008196 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	441a      	add	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	441a      	add	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d118      	bne.n	80081dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	4b15      	ldr	r3, [pc, #84]	@ (8008204 <prvInsertBlockIntoFreeList+0xb0>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d00d      	beq.n	80081d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	441a      	add	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e008      	b.n	80081e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008204 <prvInsertBlockIntoFreeList+0xb0>)
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	e003      	b.n	80081e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d002      	beq.n	80081f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081f2:	bf00      	nop
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	20005910 	.word	0x20005910
 8008204:	20005918 	.word	0x20005918

08008208 <atof>:
 8008208:	2100      	movs	r1, #0
 800820a:	f000 be09 	b.w	8008e20 <strtod>

0800820e <atoi>:
 800820e:	220a      	movs	r2, #10
 8008210:	2100      	movs	r1, #0
 8008212:	f000 be8b 	b.w	8008f2c <strtol>

08008216 <sulp>:
 8008216:	b570      	push	{r4, r5, r6, lr}
 8008218:	4604      	mov	r4, r0
 800821a:	460d      	mov	r5, r1
 800821c:	ec45 4b10 	vmov	d0, r4, r5
 8008220:	4616      	mov	r6, r2
 8008222:	f003 fba5 	bl	800b970 <__ulp>
 8008226:	ec51 0b10 	vmov	r0, r1, d0
 800822a:	b17e      	cbz	r6, 800824c <sulp+0x36>
 800822c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008230:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008234:	2b00      	cmp	r3, #0
 8008236:	dd09      	ble.n	800824c <sulp+0x36>
 8008238:	051b      	lsls	r3, r3, #20
 800823a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800823e:	2400      	movs	r4, #0
 8008240:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008244:	4622      	mov	r2, r4
 8008246:	462b      	mov	r3, r5
 8008248:	f7f8 f9e6 	bl	8000618 <__aeabi_dmul>
 800824c:	ec41 0b10 	vmov	d0, r0, r1
 8008250:	bd70      	pop	{r4, r5, r6, pc}
 8008252:	0000      	movs	r0, r0
 8008254:	0000      	movs	r0, r0
	...

08008258 <_strtod_l>:
 8008258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825c:	b09f      	sub	sp, #124	@ 0x7c
 800825e:	460c      	mov	r4, r1
 8008260:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008262:	2200      	movs	r2, #0
 8008264:	921a      	str	r2, [sp, #104]	@ 0x68
 8008266:	9005      	str	r0, [sp, #20]
 8008268:	f04f 0a00 	mov.w	sl, #0
 800826c:	f04f 0b00 	mov.w	fp, #0
 8008270:	460a      	mov	r2, r1
 8008272:	9219      	str	r2, [sp, #100]	@ 0x64
 8008274:	7811      	ldrb	r1, [r2, #0]
 8008276:	292b      	cmp	r1, #43	@ 0x2b
 8008278:	d04a      	beq.n	8008310 <_strtod_l+0xb8>
 800827a:	d838      	bhi.n	80082ee <_strtod_l+0x96>
 800827c:	290d      	cmp	r1, #13
 800827e:	d832      	bhi.n	80082e6 <_strtod_l+0x8e>
 8008280:	2908      	cmp	r1, #8
 8008282:	d832      	bhi.n	80082ea <_strtod_l+0x92>
 8008284:	2900      	cmp	r1, #0
 8008286:	d03b      	beq.n	8008300 <_strtod_l+0xa8>
 8008288:	2200      	movs	r2, #0
 800828a:	920e      	str	r2, [sp, #56]	@ 0x38
 800828c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800828e:	782a      	ldrb	r2, [r5, #0]
 8008290:	2a30      	cmp	r2, #48	@ 0x30
 8008292:	f040 80b2 	bne.w	80083fa <_strtod_l+0x1a2>
 8008296:	786a      	ldrb	r2, [r5, #1]
 8008298:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800829c:	2a58      	cmp	r2, #88	@ 0x58
 800829e:	d16e      	bne.n	800837e <_strtod_l+0x126>
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	4a8f      	ldr	r2, [pc, #572]	@ (80084e8 <_strtod_l+0x290>)
 80082ac:	9805      	ldr	r0, [sp, #20]
 80082ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80082b0:	a919      	add	r1, sp, #100	@ 0x64
 80082b2:	f002 fc57 	bl	800ab64 <__gethex>
 80082b6:	f010 060f 	ands.w	r6, r0, #15
 80082ba:	4604      	mov	r4, r0
 80082bc:	d005      	beq.n	80082ca <_strtod_l+0x72>
 80082be:	2e06      	cmp	r6, #6
 80082c0:	d128      	bne.n	8008314 <_strtod_l+0xbc>
 80082c2:	3501      	adds	r5, #1
 80082c4:	2300      	movs	r3, #0
 80082c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80082c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80082ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 858e 	bne.w	8008dee <_strtod_l+0xb96>
 80082d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082d4:	b1cb      	cbz	r3, 800830a <_strtod_l+0xb2>
 80082d6:	4652      	mov	r2, sl
 80082d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80082dc:	ec43 2b10 	vmov	d0, r2, r3
 80082e0:	b01f      	add	sp, #124	@ 0x7c
 80082e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e6:	2920      	cmp	r1, #32
 80082e8:	d1ce      	bne.n	8008288 <_strtod_l+0x30>
 80082ea:	3201      	adds	r2, #1
 80082ec:	e7c1      	b.n	8008272 <_strtod_l+0x1a>
 80082ee:	292d      	cmp	r1, #45	@ 0x2d
 80082f0:	d1ca      	bne.n	8008288 <_strtod_l+0x30>
 80082f2:	2101      	movs	r1, #1
 80082f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80082f6:	1c51      	adds	r1, r2, #1
 80082f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80082fa:	7852      	ldrb	r2, [r2, #1]
 80082fc:	2a00      	cmp	r2, #0
 80082fe:	d1c5      	bne.n	800828c <_strtod_l+0x34>
 8008300:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008302:	9419      	str	r4, [sp, #100]	@ 0x64
 8008304:	2b00      	cmp	r3, #0
 8008306:	f040 8570 	bne.w	8008dea <_strtod_l+0xb92>
 800830a:	4652      	mov	r2, sl
 800830c:	465b      	mov	r3, fp
 800830e:	e7e5      	b.n	80082dc <_strtod_l+0x84>
 8008310:	2100      	movs	r1, #0
 8008312:	e7ef      	b.n	80082f4 <_strtod_l+0x9c>
 8008314:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008316:	b13a      	cbz	r2, 8008328 <_strtod_l+0xd0>
 8008318:	2135      	movs	r1, #53	@ 0x35
 800831a:	a81c      	add	r0, sp, #112	@ 0x70
 800831c:	f003 fc22 	bl	800bb64 <__copybits>
 8008320:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008322:	9805      	ldr	r0, [sp, #20]
 8008324:	f002 fff8 	bl	800b318 <_Bfree>
 8008328:	3e01      	subs	r6, #1
 800832a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800832c:	2e04      	cmp	r6, #4
 800832e:	d806      	bhi.n	800833e <_strtod_l+0xe6>
 8008330:	e8df f006 	tbb	[pc, r6]
 8008334:	201d0314 	.word	0x201d0314
 8008338:	14          	.byte	0x14
 8008339:	00          	.byte	0x00
 800833a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800833e:	05e1      	lsls	r1, r4, #23
 8008340:	bf48      	it	mi
 8008342:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008346:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800834a:	0d1b      	lsrs	r3, r3, #20
 800834c:	051b      	lsls	r3, r3, #20
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1bb      	bne.n	80082ca <_strtod_l+0x72>
 8008352:	f001 fc91 	bl	8009c78 <__errno>
 8008356:	2322      	movs	r3, #34	@ 0x22
 8008358:	6003      	str	r3, [r0, #0]
 800835a:	e7b6      	b.n	80082ca <_strtod_l+0x72>
 800835c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008360:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008364:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008368:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800836c:	e7e7      	b.n	800833e <_strtod_l+0xe6>
 800836e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80084f0 <_strtod_l+0x298>
 8008372:	e7e4      	b.n	800833e <_strtod_l+0xe6>
 8008374:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008378:	f04f 3aff 	mov.w	sl, #4294967295
 800837c:	e7df      	b.n	800833e <_strtod_l+0xe6>
 800837e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	9219      	str	r2, [sp, #100]	@ 0x64
 8008384:	785b      	ldrb	r3, [r3, #1]
 8008386:	2b30      	cmp	r3, #48	@ 0x30
 8008388:	d0f9      	beq.n	800837e <_strtod_l+0x126>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d09d      	beq.n	80082ca <_strtod_l+0x72>
 800838e:	2301      	movs	r3, #1
 8008390:	2700      	movs	r7, #0
 8008392:	9308      	str	r3, [sp, #32]
 8008394:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008396:	930c      	str	r3, [sp, #48]	@ 0x30
 8008398:	970b      	str	r7, [sp, #44]	@ 0x2c
 800839a:	46b9      	mov	r9, r7
 800839c:	220a      	movs	r2, #10
 800839e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80083a0:	7805      	ldrb	r5, [r0, #0]
 80083a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80083a6:	b2d9      	uxtb	r1, r3
 80083a8:	2909      	cmp	r1, #9
 80083aa:	d928      	bls.n	80083fe <_strtod_l+0x1a6>
 80083ac:	494f      	ldr	r1, [pc, #316]	@ (80084ec <_strtod_l+0x294>)
 80083ae:	2201      	movs	r2, #1
 80083b0:	f001 fb4b 	bl	8009a4a <strncmp>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d032      	beq.n	800841e <_strtod_l+0x1c6>
 80083b8:	2000      	movs	r0, #0
 80083ba:	462a      	mov	r2, r5
 80083bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80083be:	464d      	mov	r5, r9
 80083c0:	4603      	mov	r3, r0
 80083c2:	2a65      	cmp	r2, #101	@ 0x65
 80083c4:	d001      	beq.n	80083ca <_strtod_l+0x172>
 80083c6:	2a45      	cmp	r2, #69	@ 0x45
 80083c8:	d114      	bne.n	80083f4 <_strtod_l+0x19c>
 80083ca:	b91d      	cbnz	r5, 80083d4 <_strtod_l+0x17c>
 80083cc:	9a08      	ldr	r2, [sp, #32]
 80083ce:	4302      	orrs	r2, r0
 80083d0:	d096      	beq.n	8008300 <_strtod_l+0xa8>
 80083d2:	2500      	movs	r5, #0
 80083d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80083d6:	1c62      	adds	r2, r4, #1
 80083d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80083da:	7862      	ldrb	r2, [r4, #1]
 80083dc:	2a2b      	cmp	r2, #43	@ 0x2b
 80083de:	d07a      	beq.n	80084d6 <_strtod_l+0x27e>
 80083e0:	2a2d      	cmp	r2, #45	@ 0x2d
 80083e2:	d07e      	beq.n	80084e2 <_strtod_l+0x28a>
 80083e4:	f04f 0c00 	mov.w	ip, #0
 80083e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80083ec:	2909      	cmp	r1, #9
 80083ee:	f240 8085 	bls.w	80084fc <_strtod_l+0x2a4>
 80083f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80083f4:	f04f 0800 	mov.w	r8, #0
 80083f8:	e0a5      	b.n	8008546 <_strtod_l+0x2ee>
 80083fa:	2300      	movs	r3, #0
 80083fc:	e7c8      	b.n	8008390 <_strtod_l+0x138>
 80083fe:	f1b9 0f08 	cmp.w	r9, #8
 8008402:	bfd8      	it	le
 8008404:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008406:	f100 0001 	add.w	r0, r0, #1
 800840a:	bfda      	itte	le
 800840c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008410:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008412:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008416:	f109 0901 	add.w	r9, r9, #1
 800841a:	9019      	str	r0, [sp, #100]	@ 0x64
 800841c:	e7bf      	b.n	800839e <_strtod_l+0x146>
 800841e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008420:	1c5a      	adds	r2, r3, #1
 8008422:	9219      	str	r2, [sp, #100]	@ 0x64
 8008424:	785a      	ldrb	r2, [r3, #1]
 8008426:	f1b9 0f00 	cmp.w	r9, #0
 800842a:	d03b      	beq.n	80084a4 <_strtod_l+0x24c>
 800842c:	900a      	str	r0, [sp, #40]	@ 0x28
 800842e:	464d      	mov	r5, r9
 8008430:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008434:	2b09      	cmp	r3, #9
 8008436:	d912      	bls.n	800845e <_strtod_l+0x206>
 8008438:	2301      	movs	r3, #1
 800843a:	e7c2      	b.n	80083c2 <_strtod_l+0x16a>
 800843c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	9219      	str	r2, [sp, #100]	@ 0x64
 8008442:	785a      	ldrb	r2, [r3, #1]
 8008444:	3001      	adds	r0, #1
 8008446:	2a30      	cmp	r2, #48	@ 0x30
 8008448:	d0f8      	beq.n	800843c <_strtod_l+0x1e4>
 800844a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800844e:	2b08      	cmp	r3, #8
 8008450:	f200 84d2 	bhi.w	8008df8 <_strtod_l+0xba0>
 8008454:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008456:	900a      	str	r0, [sp, #40]	@ 0x28
 8008458:	2000      	movs	r0, #0
 800845a:	930c      	str	r3, [sp, #48]	@ 0x30
 800845c:	4605      	mov	r5, r0
 800845e:	3a30      	subs	r2, #48	@ 0x30
 8008460:	f100 0301 	add.w	r3, r0, #1
 8008464:	d018      	beq.n	8008498 <_strtod_l+0x240>
 8008466:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008468:	4419      	add	r1, r3
 800846a:	910a      	str	r1, [sp, #40]	@ 0x28
 800846c:	462e      	mov	r6, r5
 800846e:	f04f 0e0a 	mov.w	lr, #10
 8008472:	1c71      	adds	r1, r6, #1
 8008474:	eba1 0c05 	sub.w	ip, r1, r5
 8008478:	4563      	cmp	r3, ip
 800847a:	dc15      	bgt.n	80084a8 <_strtod_l+0x250>
 800847c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008480:	182b      	adds	r3, r5, r0
 8008482:	2b08      	cmp	r3, #8
 8008484:	f105 0501 	add.w	r5, r5, #1
 8008488:	4405      	add	r5, r0
 800848a:	dc1a      	bgt.n	80084c2 <_strtod_l+0x26a>
 800848c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800848e:	230a      	movs	r3, #10
 8008490:	fb03 2301 	mla	r3, r3, r1, r2
 8008494:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008496:	2300      	movs	r3, #0
 8008498:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800849a:	1c51      	adds	r1, r2, #1
 800849c:	9119      	str	r1, [sp, #100]	@ 0x64
 800849e:	7852      	ldrb	r2, [r2, #1]
 80084a0:	4618      	mov	r0, r3
 80084a2:	e7c5      	b.n	8008430 <_strtod_l+0x1d8>
 80084a4:	4648      	mov	r0, r9
 80084a6:	e7ce      	b.n	8008446 <_strtod_l+0x1ee>
 80084a8:	2e08      	cmp	r6, #8
 80084aa:	dc05      	bgt.n	80084b8 <_strtod_l+0x260>
 80084ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80084ae:	fb0e f606 	mul.w	r6, lr, r6
 80084b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80084b4:	460e      	mov	r6, r1
 80084b6:	e7dc      	b.n	8008472 <_strtod_l+0x21a>
 80084b8:	2910      	cmp	r1, #16
 80084ba:	bfd8      	it	le
 80084bc:	fb0e f707 	mulle.w	r7, lr, r7
 80084c0:	e7f8      	b.n	80084b4 <_strtod_l+0x25c>
 80084c2:	2b0f      	cmp	r3, #15
 80084c4:	bfdc      	itt	le
 80084c6:	230a      	movle	r3, #10
 80084c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80084cc:	e7e3      	b.n	8008496 <_strtod_l+0x23e>
 80084ce:	2300      	movs	r3, #0
 80084d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80084d2:	2301      	movs	r3, #1
 80084d4:	e77a      	b.n	80083cc <_strtod_l+0x174>
 80084d6:	f04f 0c00 	mov.w	ip, #0
 80084da:	1ca2      	adds	r2, r4, #2
 80084dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80084de:	78a2      	ldrb	r2, [r4, #2]
 80084e0:	e782      	b.n	80083e8 <_strtod_l+0x190>
 80084e2:	f04f 0c01 	mov.w	ip, #1
 80084e6:	e7f8      	b.n	80084da <_strtod_l+0x282>
 80084e8:	0800d0e0 	.word	0x0800d0e0
 80084ec:	0800cea0 	.word	0x0800cea0
 80084f0:	7ff00000 	.word	0x7ff00000
 80084f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084f6:	1c51      	adds	r1, r2, #1
 80084f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80084fa:	7852      	ldrb	r2, [r2, #1]
 80084fc:	2a30      	cmp	r2, #48	@ 0x30
 80084fe:	d0f9      	beq.n	80084f4 <_strtod_l+0x29c>
 8008500:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008504:	2908      	cmp	r1, #8
 8008506:	f63f af75 	bhi.w	80083f4 <_strtod_l+0x19c>
 800850a:	3a30      	subs	r2, #48	@ 0x30
 800850c:	9209      	str	r2, [sp, #36]	@ 0x24
 800850e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008510:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008512:	f04f 080a 	mov.w	r8, #10
 8008516:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008518:	1c56      	adds	r6, r2, #1
 800851a:	9619      	str	r6, [sp, #100]	@ 0x64
 800851c:	7852      	ldrb	r2, [r2, #1]
 800851e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008522:	f1be 0f09 	cmp.w	lr, #9
 8008526:	d939      	bls.n	800859c <_strtod_l+0x344>
 8008528:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800852a:	1a76      	subs	r6, r6, r1
 800852c:	2e08      	cmp	r6, #8
 800852e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008532:	dc03      	bgt.n	800853c <_strtod_l+0x2e4>
 8008534:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008536:	4588      	cmp	r8, r1
 8008538:	bfa8      	it	ge
 800853a:	4688      	movge	r8, r1
 800853c:	f1bc 0f00 	cmp.w	ip, #0
 8008540:	d001      	beq.n	8008546 <_strtod_l+0x2ee>
 8008542:	f1c8 0800 	rsb	r8, r8, #0
 8008546:	2d00      	cmp	r5, #0
 8008548:	d14e      	bne.n	80085e8 <_strtod_l+0x390>
 800854a:	9908      	ldr	r1, [sp, #32]
 800854c:	4308      	orrs	r0, r1
 800854e:	f47f aebc 	bne.w	80082ca <_strtod_l+0x72>
 8008552:	2b00      	cmp	r3, #0
 8008554:	f47f aed4 	bne.w	8008300 <_strtod_l+0xa8>
 8008558:	2a69      	cmp	r2, #105	@ 0x69
 800855a:	d028      	beq.n	80085ae <_strtod_l+0x356>
 800855c:	dc25      	bgt.n	80085aa <_strtod_l+0x352>
 800855e:	2a49      	cmp	r2, #73	@ 0x49
 8008560:	d025      	beq.n	80085ae <_strtod_l+0x356>
 8008562:	2a4e      	cmp	r2, #78	@ 0x4e
 8008564:	f47f aecc 	bne.w	8008300 <_strtod_l+0xa8>
 8008568:	499a      	ldr	r1, [pc, #616]	@ (80087d4 <_strtod_l+0x57c>)
 800856a:	a819      	add	r0, sp, #100	@ 0x64
 800856c:	f002 fd1c 	bl	800afa8 <__match>
 8008570:	2800      	cmp	r0, #0
 8008572:	f43f aec5 	beq.w	8008300 <_strtod_l+0xa8>
 8008576:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	2b28      	cmp	r3, #40	@ 0x28
 800857c:	d12e      	bne.n	80085dc <_strtod_l+0x384>
 800857e:	4996      	ldr	r1, [pc, #600]	@ (80087d8 <_strtod_l+0x580>)
 8008580:	aa1c      	add	r2, sp, #112	@ 0x70
 8008582:	a819      	add	r0, sp, #100	@ 0x64
 8008584:	f002 fd24 	bl	800afd0 <__hexnan>
 8008588:	2805      	cmp	r0, #5
 800858a:	d127      	bne.n	80085dc <_strtod_l+0x384>
 800858c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800858e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008592:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008596:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800859a:	e696      	b.n	80082ca <_strtod_l+0x72>
 800859c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800859e:	fb08 2101 	mla	r1, r8, r1, r2
 80085a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80085a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80085a8:	e7b5      	b.n	8008516 <_strtod_l+0x2be>
 80085aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80085ac:	e7da      	b.n	8008564 <_strtod_l+0x30c>
 80085ae:	498b      	ldr	r1, [pc, #556]	@ (80087dc <_strtod_l+0x584>)
 80085b0:	a819      	add	r0, sp, #100	@ 0x64
 80085b2:	f002 fcf9 	bl	800afa8 <__match>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	f43f aea2 	beq.w	8008300 <_strtod_l+0xa8>
 80085bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085be:	4988      	ldr	r1, [pc, #544]	@ (80087e0 <_strtod_l+0x588>)
 80085c0:	3b01      	subs	r3, #1
 80085c2:	a819      	add	r0, sp, #100	@ 0x64
 80085c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80085c6:	f002 fcef 	bl	800afa8 <__match>
 80085ca:	b910      	cbnz	r0, 80085d2 <_strtod_l+0x37a>
 80085cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085ce:	3301      	adds	r3, #1
 80085d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80085d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80087f0 <_strtod_l+0x598>
 80085d6:	f04f 0a00 	mov.w	sl, #0
 80085da:	e676      	b.n	80082ca <_strtod_l+0x72>
 80085dc:	4881      	ldr	r0, [pc, #516]	@ (80087e4 <_strtod_l+0x58c>)
 80085de:	f001 fb8f 	bl	8009d00 <nan>
 80085e2:	ec5b ab10 	vmov	sl, fp, d0
 80085e6:	e670      	b.n	80082ca <_strtod_l+0x72>
 80085e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80085ec:	eba8 0303 	sub.w	r3, r8, r3
 80085f0:	f1b9 0f00 	cmp.w	r9, #0
 80085f4:	bf08      	it	eq
 80085f6:	46a9      	moveq	r9, r5
 80085f8:	2d10      	cmp	r5, #16
 80085fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80085fc:	462c      	mov	r4, r5
 80085fe:	bfa8      	it	ge
 8008600:	2410      	movge	r4, #16
 8008602:	f7f7 ff8f 	bl	8000524 <__aeabi_ui2d>
 8008606:	2d09      	cmp	r5, #9
 8008608:	4682      	mov	sl, r0
 800860a:	468b      	mov	fp, r1
 800860c:	dc13      	bgt.n	8008636 <_strtod_l+0x3de>
 800860e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008610:	2b00      	cmp	r3, #0
 8008612:	f43f ae5a 	beq.w	80082ca <_strtod_l+0x72>
 8008616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008618:	dd78      	ble.n	800870c <_strtod_l+0x4b4>
 800861a:	2b16      	cmp	r3, #22
 800861c:	dc5f      	bgt.n	80086de <_strtod_l+0x486>
 800861e:	4972      	ldr	r1, [pc, #456]	@ (80087e8 <_strtod_l+0x590>)
 8008620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008628:	4652      	mov	r2, sl
 800862a:	465b      	mov	r3, fp
 800862c:	f7f7 fff4 	bl	8000618 <__aeabi_dmul>
 8008630:	4682      	mov	sl, r0
 8008632:	468b      	mov	fp, r1
 8008634:	e649      	b.n	80082ca <_strtod_l+0x72>
 8008636:	4b6c      	ldr	r3, [pc, #432]	@ (80087e8 <_strtod_l+0x590>)
 8008638:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800863c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008640:	f7f7 ffea 	bl	8000618 <__aeabi_dmul>
 8008644:	4682      	mov	sl, r0
 8008646:	4638      	mov	r0, r7
 8008648:	468b      	mov	fp, r1
 800864a:	f7f7 ff6b 	bl	8000524 <__aeabi_ui2d>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	4650      	mov	r0, sl
 8008654:	4659      	mov	r1, fp
 8008656:	f7f7 fe29 	bl	80002ac <__adddf3>
 800865a:	2d0f      	cmp	r5, #15
 800865c:	4682      	mov	sl, r0
 800865e:	468b      	mov	fp, r1
 8008660:	ddd5      	ble.n	800860e <_strtod_l+0x3b6>
 8008662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008664:	1b2c      	subs	r4, r5, r4
 8008666:	441c      	add	r4, r3
 8008668:	2c00      	cmp	r4, #0
 800866a:	f340 8093 	ble.w	8008794 <_strtod_l+0x53c>
 800866e:	f014 030f 	ands.w	r3, r4, #15
 8008672:	d00a      	beq.n	800868a <_strtod_l+0x432>
 8008674:	495c      	ldr	r1, [pc, #368]	@ (80087e8 <_strtod_l+0x590>)
 8008676:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800867a:	4652      	mov	r2, sl
 800867c:	465b      	mov	r3, fp
 800867e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008682:	f7f7 ffc9 	bl	8000618 <__aeabi_dmul>
 8008686:	4682      	mov	sl, r0
 8008688:	468b      	mov	fp, r1
 800868a:	f034 040f 	bics.w	r4, r4, #15
 800868e:	d073      	beq.n	8008778 <_strtod_l+0x520>
 8008690:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008694:	dd49      	ble.n	800872a <_strtod_l+0x4d2>
 8008696:	2400      	movs	r4, #0
 8008698:	46a0      	mov	r8, r4
 800869a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800869c:	46a1      	mov	r9, r4
 800869e:	9a05      	ldr	r2, [sp, #20]
 80086a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80087f0 <_strtod_l+0x598>
 80086a4:	2322      	movs	r3, #34	@ 0x22
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	f04f 0a00 	mov.w	sl, #0
 80086ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f43f ae0b 	beq.w	80082ca <_strtod_l+0x72>
 80086b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086b6:	9805      	ldr	r0, [sp, #20]
 80086b8:	f002 fe2e 	bl	800b318 <_Bfree>
 80086bc:	9805      	ldr	r0, [sp, #20]
 80086be:	4649      	mov	r1, r9
 80086c0:	f002 fe2a 	bl	800b318 <_Bfree>
 80086c4:	9805      	ldr	r0, [sp, #20]
 80086c6:	4641      	mov	r1, r8
 80086c8:	f002 fe26 	bl	800b318 <_Bfree>
 80086cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086ce:	9805      	ldr	r0, [sp, #20]
 80086d0:	f002 fe22 	bl	800b318 <_Bfree>
 80086d4:	9805      	ldr	r0, [sp, #20]
 80086d6:	4621      	mov	r1, r4
 80086d8:	f002 fe1e 	bl	800b318 <_Bfree>
 80086dc:	e5f5      	b.n	80082ca <_strtod_l+0x72>
 80086de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80086e4:	4293      	cmp	r3, r2
 80086e6:	dbbc      	blt.n	8008662 <_strtod_l+0x40a>
 80086e8:	4c3f      	ldr	r4, [pc, #252]	@ (80087e8 <_strtod_l+0x590>)
 80086ea:	f1c5 050f 	rsb	r5, r5, #15
 80086ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80086f2:	4652      	mov	r2, sl
 80086f4:	465b      	mov	r3, fp
 80086f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086fa:	f7f7 ff8d 	bl	8000618 <__aeabi_dmul>
 80086fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008700:	1b5d      	subs	r5, r3, r5
 8008702:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008706:	e9d4 2300 	ldrd	r2, r3, [r4]
 800870a:	e78f      	b.n	800862c <_strtod_l+0x3d4>
 800870c:	3316      	adds	r3, #22
 800870e:	dba8      	blt.n	8008662 <_strtod_l+0x40a>
 8008710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008712:	eba3 0808 	sub.w	r8, r3, r8
 8008716:	4b34      	ldr	r3, [pc, #208]	@ (80087e8 <_strtod_l+0x590>)
 8008718:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800871c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008720:	4650      	mov	r0, sl
 8008722:	4659      	mov	r1, fp
 8008724:	f7f8 f8a2 	bl	800086c <__aeabi_ddiv>
 8008728:	e782      	b.n	8008630 <_strtod_l+0x3d8>
 800872a:	2300      	movs	r3, #0
 800872c:	4f2f      	ldr	r7, [pc, #188]	@ (80087ec <_strtod_l+0x594>)
 800872e:	1124      	asrs	r4, r4, #4
 8008730:	4650      	mov	r0, sl
 8008732:	4659      	mov	r1, fp
 8008734:	461e      	mov	r6, r3
 8008736:	2c01      	cmp	r4, #1
 8008738:	dc21      	bgt.n	800877e <_strtod_l+0x526>
 800873a:	b10b      	cbz	r3, 8008740 <_strtod_l+0x4e8>
 800873c:	4682      	mov	sl, r0
 800873e:	468b      	mov	fp, r1
 8008740:	492a      	ldr	r1, [pc, #168]	@ (80087ec <_strtod_l+0x594>)
 8008742:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008746:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800874a:	4652      	mov	r2, sl
 800874c:	465b      	mov	r3, fp
 800874e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008752:	f7f7 ff61 	bl	8000618 <__aeabi_dmul>
 8008756:	4b26      	ldr	r3, [pc, #152]	@ (80087f0 <_strtod_l+0x598>)
 8008758:	460a      	mov	r2, r1
 800875a:	400b      	ands	r3, r1
 800875c:	4925      	ldr	r1, [pc, #148]	@ (80087f4 <_strtod_l+0x59c>)
 800875e:	428b      	cmp	r3, r1
 8008760:	4682      	mov	sl, r0
 8008762:	d898      	bhi.n	8008696 <_strtod_l+0x43e>
 8008764:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008768:	428b      	cmp	r3, r1
 800876a:	bf86      	itte	hi
 800876c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80087f8 <_strtod_l+0x5a0>
 8008770:	f04f 3aff 	movhi.w	sl, #4294967295
 8008774:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008778:	2300      	movs	r3, #0
 800877a:	9308      	str	r3, [sp, #32]
 800877c:	e076      	b.n	800886c <_strtod_l+0x614>
 800877e:	07e2      	lsls	r2, r4, #31
 8008780:	d504      	bpl.n	800878c <_strtod_l+0x534>
 8008782:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008786:	f7f7 ff47 	bl	8000618 <__aeabi_dmul>
 800878a:	2301      	movs	r3, #1
 800878c:	3601      	adds	r6, #1
 800878e:	1064      	asrs	r4, r4, #1
 8008790:	3708      	adds	r7, #8
 8008792:	e7d0      	b.n	8008736 <_strtod_l+0x4de>
 8008794:	d0f0      	beq.n	8008778 <_strtod_l+0x520>
 8008796:	4264      	negs	r4, r4
 8008798:	f014 020f 	ands.w	r2, r4, #15
 800879c:	d00a      	beq.n	80087b4 <_strtod_l+0x55c>
 800879e:	4b12      	ldr	r3, [pc, #72]	@ (80087e8 <_strtod_l+0x590>)
 80087a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087a4:	4650      	mov	r0, sl
 80087a6:	4659      	mov	r1, fp
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	f7f8 f85e 	bl	800086c <__aeabi_ddiv>
 80087b0:	4682      	mov	sl, r0
 80087b2:	468b      	mov	fp, r1
 80087b4:	1124      	asrs	r4, r4, #4
 80087b6:	d0df      	beq.n	8008778 <_strtod_l+0x520>
 80087b8:	2c1f      	cmp	r4, #31
 80087ba:	dd1f      	ble.n	80087fc <_strtod_l+0x5a4>
 80087bc:	2400      	movs	r4, #0
 80087be:	46a0      	mov	r8, r4
 80087c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80087c2:	46a1      	mov	r9, r4
 80087c4:	9a05      	ldr	r2, [sp, #20]
 80087c6:	2322      	movs	r3, #34	@ 0x22
 80087c8:	f04f 0a00 	mov.w	sl, #0
 80087cc:	f04f 0b00 	mov.w	fp, #0
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	e76b      	b.n	80086ac <_strtod_l+0x454>
 80087d4:	0800ceaf 	.word	0x0800ceaf
 80087d8:	0800d0cc 	.word	0x0800d0cc
 80087dc:	0800cea7 	.word	0x0800cea7
 80087e0:	0800cf8e 	.word	0x0800cf8e
 80087e4:	0800cf8a 	.word	0x0800cf8a
 80087e8:	0800d258 	.word	0x0800d258
 80087ec:	0800d230 	.word	0x0800d230
 80087f0:	7ff00000 	.word	0x7ff00000
 80087f4:	7ca00000 	.word	0x7ca00000
 80087f8:	7fefffff 	.word	0x7fefffff
 80087fc:	f014 0310 	ands.w	r3, r4, #16
 8008800:	bf18      	it	ne
 8008802:	236a      	movne	r3, #106	@ 0x6a
 8008804:	4ea9      	ldr	r6, [pc, #676]	@ (8008aac <_strtod_l+0x854>)
 8008806:	9308      	str	r3, [sp, #32]
 8008808:	4650      	mov	r0, sl
 800880a:	4659      	mov	r1, fp
 800880c:	2300      	movs	r3, #0
 800880e:	07e7      	lsls	r7, r4, #31
 8008810:	d504      	bpl.n	800881c <_strtod_l+0x5c4>
 8008812:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008816:	f7f7 feff 	bl	8000618 <__aeabi_dmul>
 800881a:	2301      	movs	r3, #1
 800881c:	1064      	asrs	r4, r4, #1
 800881e:	f106 0608 	add.w	r6, r6, #8
 8008822:	d1f4      	bne.n	800880e <_strtod_l+0x5b6>
 8008824:	b10b      	cbz	r3, 800882a <_strtod_l+0x5d2>
 8008826:	4682      	mov	sl, r0
 8008828:	468b      	mov	fp, r1
 800882a:	9b08      	ldr	r3, [sp, #32]
 800882c:	b1b3      	cbz	r3, 800885c <_strtod_l+0x604>
 800882e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008832:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008836:	2b00      	cmp	r3, #0
 8008838:	4659      	mov	r1, fp
 800883a:	dd0f      	ble.n	800885c <_strtod_l+0x604>
 800883c:	2b1f      	cmp	r3, #31
 800883e:	dd56      	ble.n	80088ee <_strtod_l+0x696>
 8008840:	2b34      	cmp	r3, #52	@ 0x34
 8008842:	bfde      	ittt	le
 8008844:	f04f 33ff 	movle.w	r3, #4294967295
 8008848:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800884c:	4093      	lslle	r3, r2
 800884e:	f04f 0a00 	mov.w	sl, #0
 8008852:	bfcc      	ite	gt
 8008854:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008858:	ea03 0b01 	andle.w	fp, r3, r1
 800885c:	2200      	movs	r2, #0
 800885e:	2300      	movs	r3, #0
 8008860:	4650      	mov	r0, sl
 8008862:	4659      	mov	r1, fp
 8008864:	f7f8 f940 	bl	8000ae8 <__aeabi_dcmpeq>
 8008868:	2800      	cmp	r0, #0
 800886a:	d1a7      	bne.n	80087bc <_strtod_l+0x564>
 800886c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008872:	9805      	ldr	r0, [sp, #20]
 8008874:	462b      	mov	r3, r5
 8008876:	464a      	mov	r2, r9
 8008878:	f002 fdb6 	bl	800b3e8 <__s2b>
 800887c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800887e:	2800      	cmp	r0, #0
 8008880:	f43f af09 	beq.w	8008696 <_strtod_l+0x43e>
 8008884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008886:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008888:	2a00      	cmp	r2, #0
 800888a:	eba3 0308 	sub.w	r3, r3, r8
 800888e:	bfa8      	it	ge
 8008890:	2300      	movge	r3, #0
 8008892:	9312      	str	r3, [sp, #72]	@ 0x48
 8008894:	2400      	movs	r4, #0
 8008896:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800889a:	9316      	str	r3, [sp, #88]	@ 0x58
 800889c:	46a0      	mov	r8, r4
 800889e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088a0:	9805      	ldr	r0, [sp, #20]
 80088a2:	6859      	ldr	r1, [r3, #4]
 80088a4:	f002 fcf8 	bl	800b298 <_Balloc>
 80088a8:	4681      	mov	r9, r0
 80088aa:	2800      	cmp	r0, #0
 80088ac:	f43f aef7 	beq.w	800869e <_strtod_l+0x446>
 80088b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088b2:	691a      	ldr	r2, [r3, #16]
 80088b4:	3202      	adds	r2, #2
 80088b6:	f103 010c 	add.w	r1, r3, #12
 80088ba:	0092      	lsls	r2, r2, #2
 80088bc:	300c      	adds	r0, #12
 80088be:	f001 fa10 	bl	8009ce2 <memcpy>
 80088c2:	ec4b ab10 	vmov	d0, sl, fp
 80088c6:	9805      	ldr	r0, [sp, #20]
 80088c8:	aa1c      	add	r2, sp, #112	@ 0x70
 80088ca:	a91b      	add	r1, sp, #108	@ 0x6c
 80088cc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80088d0:	f003 f8be 	bl	800ba50 <__d2b>
 80088d4:	901a      	str	r0, [sp, #104]	@ 0x68
 80088d6:	2800      	cmp	r0, #0
 80088d8:	f43f aee1 	beq.w	800869e <_strtod_l+0x446>
 80088dc:	9805      	ldr	r0, [sp, #20]
 80088de:	2101      	movs	r1, #1
 80088e0:	f002 fe18 	bl	800b514 <__i2b>
 80088e4:	4680      	mov	r8, r0
 80088e6:	b948      	cbnz	r0, 80088fc <_strtod_l+0x6a4>
 80088e8:	f04f 0800 	mov.w	r8, #0
 80088ec:	e6d7      	b.n	800869e <_strtod_l+0x446>
 80088ee:	f04f 32ff 	mov.w	r2, #4294967295
 80088f2:	fa02 f303 	lsl.w	r3, r2, r3
 80088f6:	ea03 0a0a 	and.w	sl, r3, sl
 80088fa:	e7af      	b.n	800885c <_strtod_l+0x604>
 80088fc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80088fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008900:	2d00      	cmp	r5, #0
 8008902:	bfab      	itete	ge
 8008904:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008906:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008908:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800890a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800890c:	bfac      	ite	ge
 800890e:	18ef      	addge	r7, r5, r3
 8008910:	1b5e      	sublt	r6, r3, r5
 8008912:	9b08      	ldr	r3, [sp, #32]
 8008914:	1aed      	subs	r5, r5, r3
 8008916:	4415      	add	r5, r2
 8008918:	4b65      	ldr	r3, [pc, #404]	@ (8008ab0 <_strtod_l+0x858>)
 800891a:	3d01      	subs	r5, #1
 800891c:	429d      	cmp	r5, r3
 800891e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008922:	da50      	bge.n	80089c6 <_strtod_l+0x76e>
 8008924:	1b5b      	subs	r3, r3, r5
 8008926:	2b1f      	cmp	r3, #31
 8008928:	eba2 0203 	sub.w	r2, r2, r3
 800892c:	f04f 0101 	mov.w	r1, #1
 8008930:	dc3d      	bgt.n	80089ae <_strtod_l+0x756>
 8008932:	fa01 f303 	lsl.w	r3, r1, r3
 8008936:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008938:	2300      	movs	r3, #0
 800893a:	9310      	str	r3, [sp, #64]	@ 0x40
 800893c:	18bd      	adds	r5, r7, r2
 800893e:	9b08      	ldr	r3, [sp, #32]
 8008940:	42af      	cmp	r7, r5
 8008942:	4416      	add	r6, r2
 8008944:	441e      	add	r6, r3
 8008946:	463b      	mov	r3, r7
 8008948:	bfa8      	it	ge
 800894a:	462b      	movge	r3, r5
 800894c:	42b3      	cmp	r3, r6
 800894e:	bfa8      	it	ge
 8008950:	4633      	movge	r3, r6
 8008952:	2b00      	cmp	r3, #0
 8008954:	bfc2      	ittt	gt
 8008956:	1aed      	subgt	r5, r5, r3
 8008958:	1af6      	subgt	r6, r6, r3
 800895a:	1aff      	subgt	r7, r7, r3
 800895c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800895e:	2b00      	cmp	r3, #0
 8008960:	dd16      	ble.n	8008990 <_strtod_l+0x738>
 8008962:	4641      	mov	r1, r8
 8008964:	9805      	ldr	r0, [sp, #20]
 8008966:	461a      	mov	r2, r3
 8008968:	f002 fe8c 	bl	800b684 <__pow5mult>
 800896c:	4680      	mov	r8, r0
 800896e:	2800      	cmp	r0, #0
 8008970:	d0ba      	beq.n	80088e8 <_strtod_l+0x690>
 8008972:	4601      	mov	r1, r0
 8008974:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008976:	9805      	ldr	r0, [sp, #20]
 8008978:	f002 fde2 	bl	800b540 <__multiply>
 800897c:	900a      	str	r0, [sp, #40]	@ 0x28
 800897e:	2800      	cmp	r0, #0
 8008980:	f43f ae8d 	beq.w	800869e <_strtod_l+0x446>
 8008984:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008986:	9805      	ldr	r0, [sp, #20]
 8008988:	f002 fcc6 	bl	800b318 <_Bfree>
 800898c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800898e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008990:	2d00      	cmp	r5, #0
 8008992:	dc1d      	bgt.n	80089d0 <_strtod_l+0x778>
 8008994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008996:	2b00      	cmp	r3, #0
 8008998:	dd23      	ble.n	80089e2 <_strtod_l+0x78a>
 800899a:	4649      	mov	r1, r9
 800899c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800899e:	9805      	ldr	r0, [sp, #20]
 80089a0:	f002 fe70 	bl	800b684 <__pow5mult>
 80089a4:	4681      	mov	r9, r0
 80089a6:	b9e0      	cbnz	r0, 80089e2 <_strtod_l+0x78a>
 80089a8:	f04f 0900 	mov.w	r9, #0
 80089ac:	e677      	b.n	800869e <_strtod_l+0x446>
 80089ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80089b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80089b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80089ba:	35e2      	adds	r5, #226	@ 0xe2
 80089bc:	fa01 f305 	lsl.w	r3, r1, r5
 80089c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80089c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80089c4:	e7ba      	b.n	800893c <_strtod_l+0x6e4>
 80089c6:	2300      	movs	r3, #0
 80089c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80089ca:	2301      	movs	r3, #1
 80089cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089ce:	e7b5      	b.n	800893c <_strtod_l+0x6e4>
 80089d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089d2:	9805      	ldr	r0, [sp, #20]
 80089d4:	462a      	mov	r2, r5
 80089d6:	f002 feaf 	bl	800b738 <__lshift>
 80089da:	901a      	str	r0, [sp, #104]	@ 0x68
 80089dc:	2800      	cmp	r0, #0
 80089de:	d1d9      	bne.n	8008994 <_strtod_l+0x73c>
 80089e0:	e65d      	b.n	800869e <_strtod_l+0x446>
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	dd07      	ble.n	80089f6 <_strtod_l+0x79e>
 80089e6:	4649      	mov	r1, r9
 80089e8:	9805      	ldr	r0, [sp, #20]
 80089ea:	4632      	mov	r2, r6
 80089ec:	f002 fea4 	bl	800b738 <__lshift>
 80089f0:	4681      	mov	r9, r0
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d0d8      	beq.n	80089a8 <_strtod_l+0x750>
 80089f6:	2f00      	cmp	r7, #0
 80089f8:	dd08      	ble.n	8008a0c <_strtod_l+0x7b4>
 80089fa:	4641      	mov	r1, r8
 80089fc:	9805      	ldr	r0, [sp, #20]
 80089fe:	463a      	mov	r2, r7
 8008a00:	f002 fe9a 	bl	800b738 <__lshift>
 8008a04:	4680      	mov	r8, r0
 8008a06:	2800      	cmp	r0, #0
 8008a08:	f43f ae49 	beq.w	800869e <_strtod_l+0x446>
 8008a0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a0e:	9805      	ldr	r0, [sp, #20]
 8008a10:	464a      	mov	r2, r9
 8008a12:	f002 ff19 	bl	800b848 <__mdiff>
 8008a16:	4604      	mov	r4, r0
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	f43f ae40 	beq.w	800869e <_strtod_l+0x446>
 8008a1e:	68c3      	ldr	r3, [r0, #12]
 8008a20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a22:	2300      	movs	r3, #0
 8008a24:	60c3      	str	r3, [r0, #12]
 8008a26:	4641      	mov	r1, r8
 8008a28:	f002 fef2 	bl	800b810 <__mcmp>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	da45      	bge.n	8008abc <_strtod_l+0x864>
 8008a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a32:	ea53 030a 	orrs.w	r3, r3, sl
 8008a36:	d16b      	bne.n	8008b10 <_strtod_l+0x8b8>
 8008a38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d167      	bne.n	8008b10 <_strtod_l+0x8b8>
 8008a40:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a44:	0d1b      	lsrs	r3, r3, #20
 8008a46:	051b      	lsls	r3, r3, #20
 8008a48:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a4c:	d960      	bls.n	8008b10 <_strtod_l+0x8b8>
 8008a4e:	6963      	ldr	r3, [r4, #20]
 8008a50:	b913      	cbnz	r3, 8008a58 <_strtod_l+0x800>
 8008a52:	6923      	ldr	r3, [r4, #16]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	dd5b      	ble.n	8008b10 <_strtod_l+0x8b8>
 8008a58:	4621      	mov	r1, r4
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	9805      	ldr	r0, [sp, #20]
 8008a5e:	f002 fe6b 	bl	800b738 <__lshift>
 8008a62:	4641      	mov	r1, r8
 8008a64:	4604      	mov	r4, r0
 8008a66:	f002 fed3 	bl	800b810 <__mcmp>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	dd50      	ble.n	8008b10 <_strtod_l+0x8b8>
 8008a6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a72:	9a08      	ldr	r2, [sp, #32]
 8008a74:	0d1b      	lsrs	r3, r3, #20
 8008a76:	051b      	lsls	r3, r3, #20
 8008a78:	2a00      	cmp	r2, #0
 8008a7a:	d06a      	beq.n	8008b52 <_strtod_l+0x8fa>
 8008a7c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a80:	d867      	bhi.n	8008b52 <_strtod_l+0x8fa>
 8008a82:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008a86:	f67f ae9d 	bls.w	80087c4 <_strtod_l+0x56c>
 8008a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab4 <_strtod_l+0x85c>)
 8008a8c:	4650      	mov	r0, sl
 8008a8e:	4659      	mov	r1, fp
 8008a90:	2200      	movs	r2, #0
 8008a92:	f7f7 fdc1 	bl	8000618 <__aeabi_dmul>
 8008a96:	4b08      	ldr	r3, [pc, #32]	@ (8008ab8 <_strtod_l+0x860>)
 8008a98:	400b      	ands	r3, r1
 8008a9a:	4682      	mov	sl, r0
 8008a9c:	468b      	mov	fp, r1
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f47f ae08 	bne.w	80086b4 <_strtod_l+0x45c>
 8008aa4:	9a05      	ldr	r2, [sp, #20]
 8008aa6:	2322      	movs	r3, #34	@ 0x22
 8008aa8:	6013      	str	r3, [r2, #0]
 8008aaa:	e603      	b.n	80086b4 <_strtod_l+0x45c>
 8008aac:	0800d0f8 	.word	0x0800d0f8
 8008ab0:	fffffc02 	.word	0xfffffc02
 8008ab4:	39500000 	.word	0x39500000
 8008ab8:	7ff00000 	.word	0x7ff00000
 8008abc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008ac0:	d165      	bne.n	8008b8e <_strtod_l+0x936>
 8008ac2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ac8:	b35a      	cbz	r2, 8008b22 <_strtod_l+0x8ca>
 8008aca:	4a9f      	ldr	r2, [pc, #636]	@ (8008d48 <_strtod_l+0xaf0>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d12b      	bne.n	8008b28 <_strtod_l+0x8d0>
 8008ad0:	9b08      	ldr	r3, [sp, #32]
 8008ad2:	4651      	mov	r1, sl
 8008ad4:	b303      	cbz	r3, 8008b18 <_strtod_l+0x8c0>
 8008ad6:	4b9d      	ldr	r3, [pc, #628]	@ (8008d4c <_strtod_l+0xaf4>)
 8008ad8:	465a      	mov	r2, fp
 8008ada:	4013      	ands	r3, r2
 8008adc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae4:	d81b      	bhi.n	8008b1e <_strtod_l+0x8c6>
 8008ae6:	0d1b      	lsrs	r3, r3, #20
 8008ae8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008aec:	fa02 f303 	lsl.w	r3, r2, r3
 8008af0:	4299      	cmp	r1, r3
 8008af2:	d119      	bne.n	8008b28 <_strtod_l+0x8d0>
 8008af4:	4b96      	ldr	r3, [pc, #600]	@ (8008d50 <_strtod_l+0xaf8>)
 8008af6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d102      	bne.n	8008b02 <_strtod_l+0x8aa>
 8008afc:	3101      	adds	r1, #1
 8008afe:	f43f adce 	beq.w	800869e <_strtod_l+0x446>
 8008b02:	4b92      	ldr	r3, [pc, #584]	@ (8008d4c <_strtod_l+0xaf4>)
 8008b04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b06:	401a      	ands	r2, r3
 8008b08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008b0c:	f04f 0a00 	mov.w	sl, #0
 8008b10:	9b08      	ldr	r3, [sp, #32]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1b9      	bne.n	8008a8a <_strtod_l+0x832>
 8008b16:	e5cd      	b.n	80086b4 <_strtod_l+0x45c>
 8008b18:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1c:	e7e8      	b.n	8008af0 <_strtod_l+0x898>
 8008b1e:	4613      	mov	r3, r2
 8008b20:	e7e6      	b.n	8008af0 <_strtod_l+0x898>
 8008b22:	ea53 030a 	orrs.w	r3, r3, sl
 8008b26:	d0a2      	beq.n	8008a6e <_strtod_l+0x816>
 8008b28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b2a:	b1db      	cbz	r3, 8008b64 <_strtod_l+0x90c>
 8008b2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b2e:	4213      	tst	r3, r2
 8008b30:	d0ee      	beq.n	8008b10 <_strtod_l+0x8b8>
 8008b32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b34:	9a08      	ldr	r2, [sp, #32]
 8008b36:	4650      	mov	r0, sl
 8008b38:	4659      	mov	r1, fp
 8008b3a:	b1bb      	cbz	r3, 8008b6c <_strtod_l+0x914>
 8008b3c:	f7ff fb6b 	bl	8008216 <sulp>
 8008b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b44:	ec53 2b10 	vmov	r2, r3, d0
 8008b48:	f7f7 fbb0 	bl	80002ac <__adddf3>
 8008b4c:	4682      	mov	sl, r0
 8008b4e:	468b      	mov	fp, r1
 8008b50:	e7de      	b.n	8008b10 <_strtod_l+0x8b8>
 8008b52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008b56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b5e:	f04f 3aff 	mov.w	sl, #4294967295
 8008b62:	e7d5      	b.n	8008b10 <_strtod_l+0x8b8>
 8008b64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b66:	ea13 0f0a 	tst.w	r3, sl
 8008b6a:	e7e1      	b.n	8008b30 <_strtod_l+0x8d8>
 8008b6c:	f7ff fb53 	bl	8008216 <sulp>
 8008b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b74:	ec53 2b10 	vmov	r2, r3, d0
 8008b78:	f7f7 fb96 	bl	80002a8 <__aeabi_dsub>
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2300      	movs	r3, #0
 8008b80:	4682      	mov	sl, r0
 8008b82:	468b      	mov	fp, r1
 8008b84:	f7f7 ffb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d0c1      	beq.n	8008b10 <_strtod_l+0x8b8>
 8008b8c:	e61a      	b.n	80087c4 <_strtod_l+0x56c>
 8008b8e:	4641      	mov	r1, r8
 8008b90:	4620      	mov	r0, r4
 8008b92:	f002 ffb5 	bl	800bb00 <__ratio>
 8008b96:	ec57 6b10 	vmov	r6, r7, d0
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	f7f7 ffb4 	bl	8000b10 <__aeabi_dcmple>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d06f      	beq.n	8008c8c <_strtod_l+0xa34>
 8008bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d17a      	bne.n	8008ca8 <_strtod_l+0xa50>
 8008bb2:	f1ba 0f00 	cmp.w	sl, #0
 8008bb6:	d158      	bne.n	8008c6a <_strtod_l+0xa12>
 8008bb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d15a      	bne.n	8008c78 <_strtod_l+0xa20>
 8008bc2:	4b64      	ldr	r3, [pc, #400]	@ (8008d54 <_strtod_l+0xafc>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	4639      	mov	r1, r7
 8008bca:	f7f7 ff97 	bl	8000afc <__aeabi_dcmplt>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d159      	bne.n	8008c86 <_strtod_l+0xa2e>
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	4b60      	ldr	r3, [pc, #384]	@ (8008d58 <_strtod_l+0xb00>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f7f7 fd1d 	bl	8000618 <__aeabi_dmul>
 8008bde:	4606      	mov	r6, r0
 8008be0:	460f      	mov	r7, r1
 8008be2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008be6:	9606      	str	r6, [sp, #24]
 8008be8:	9307      	str	r3, [sp, #28]
 8008bea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bee:	4d57      	ldr	r5, [pc, #348]	@ (8008d4c <_strtod_l+0xaf4>)
 8008bf0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bf6:	401d      	ands	r5, r3
 8008bf8:	4b58      	ldr	r3, [pc, #352]	@ (8008d5c <_strtod_l+0xb04>)
 8008bfa:	429d      	cmp	r5, r3
 8008bfc:	f040 80b2 	bne.w	8008d64 <_strtod_l+0xb0c>
 8008c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008c06:	ec4b ab10 	vmov	d0, sl, fp
 8008c0a:	f002 feb1 	bl	800b970 <__ulp>
 8008c0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c12:	ec51 0b10 	vmov	r0, r1, d0
 8008c16:	f7f7 fcff 	bl	8000618 <__aeabi_dmul>
 8008c1a:	4652      	mov	r2, sl
 8008c1c:	465b      	mov	r3, fp
 8008c1e:	f7f7 fb45 	bl	80002ac <__adddf3>
 8008c22:	460b      	mov	r3, r1
 8008c24:	4949      	ldr	r1, [pc, #292]	@ (8008d4c <_strtod_l+0xaf4>)
 8008c26:	4a4e      	ldr	r2, [pc, #312]	@ (8008d60 <_strtod_l+0xb08>)
 8008c28:	4019      	ands	r1, r3
 8008c2a:	4291      	cmp	r1, r2
 8008c2c:	4682      	mov	sl, r0
 8008c2e:	d942      	bls.n	8008cb6 <_strtod_l+0xa5e>
 8008c30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008c32:	4b47      	ldr	r3, [pc, #284]	@ (8008d50 <_strtod_l+0xaf8>)
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d103      	bne.n	8008c40 <_strtod_l+0x9e8>
 8008c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	f43f ad2f 	beq.w	800869e <_strtod_l+0x446>
 8008c40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008d50 <_strtod_l+0xaf8>
 8008c44:	f04f 3aff 	mov.w	sl, #4294967295
 8008c48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c4a:	9805      	ldr	r0, [sp, #20]
 8008c4c:	f002 fb64 	bl	800b318 <_Bfree>
 8008c50:	9805      	ldr	r0, [sp, #20]
 8008c52:	4649      	mov	r1, r9
 8008c54:	f002 fb60 	bl	800b318 <_Bfree>
 8008c58:	9805      	ldr	r0, [sp, #20]
 8008c5a:	4641      	mov	r1, r8
 8008c5c:	f002 fb5c 	bl	800b318 <_Bfree>
 8008c60:	9805      	ldr	r0, [sp, #20]
 8008c62:	4621      	mov	r1, r4
 8008c64:	f002 fb58 	bl	800b318 <_Bfree>
 8008c68:	e619      	b.n	800889e <_strtod_l+0x646>
 8008c6a:	f1ba 0f01 	cmp.w	sl, #1
 8008c6e:	d103      	bne.n	8008c78 <_strtod_l+0xa20>
 8008c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f43f ada6 	beq.w	80087c4 <_strtod_l+0x56c>
 8008c78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008d28 <_strtod_l+0xad0>
 8008c7c:	4f35      	ldr	r7, [pc, #212]	@ (8008d54 <_strtod_l+0xafc>)
 8008c7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c82:	2600      	movs	r6, #0
 8008c84:	e7b1      	b.n	8008bea <_strtod_l+0x992>
 8008c86:	4f34      	ldr	r7, [pc, #208]	@ (8008d58 <_strtod_l+0xb00>)
 8008c88:	2600      	movs	r6, #0
 8008c8a:	e7aa      	b.n	8008be2 <_strtod_l+0x98a>
 8008c8c:	4b32      	ldr	r3, [pc, #200]	@ (8008d58 <_strtod_l+0xb00>)
 8008c8e:	4630      	mov	r0, r6
 8008c90:	4639      	mov	r1, r7
 8008c92:	2200      	movs	r2, #0
 8008c94:	f7f7 fcc0 	bl	8000618 <__aeabi_dmul>
 8008c98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c9a:	4606      	mov	r6, r0
 8008c9c:	460f      	mov	r7, r1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d09f      	beq.n	8008be2 <_strtod_l+0x98a>
 8008ca2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008ca6:	e7a0      	b.n	8008bea <_strtod_l+0x992>
 8008ca8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008d30 <_strtod_l+0xad8>
 8008cac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008cb0:	ec57 6b17 	vmov	r6, r7, d7
 8008cb4:	e799      	b.n	8008bea <_strtod_l+0x992>
 8008cb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008cba:	9b08      	ldr	r3, [sp, #32]
 8008cbc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1c1      	bne.n	8008c48 <_strtod_l+0x9f0>
 8008cc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008cc8:	0d1b      	lsrs	r3, r3, #20
 8008cca:	051b      	lsls	r3, r3, #20
 8008ccc:	429d      	cmp	r5, r3
 8008cce:	d1bb      	bne.n	8008c48 <_strtod_l+0x9f0>
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	f7f8 f800 	bl	8000cd8 <__aeabi_d2lz>
 8008cd8:	f7f7 fc70 	bl	80005bc <__aeabi_l2d>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	4639      	mov	r1, r7
 8008ce4:	f7f7 fae0 	bl	80002a8 <__aeabi_dsub>
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4602      	mov	r2, r0
 8008cec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008cf0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cf6:	ea46 060a 	orr.w	r6, r6, sl
 8008cfa:	431e      	orrs	r6, r3
 8008cfc:	d06f      	beq.n	8008dde <_strtod_l+0xb86>
 8008cfe:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d38 <_strtod_l+0xae0>)
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	f7f7 fefa 	bl	8000afc <__aeabi_dcmplt>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	f47f acd3 	bne.w	80086b4 <_strtod_l+0x45c>
 8008d0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008d40 <_strtod_l+0xae8>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d18:	f7f7 ff0e 	bl	8000b38 <__aeabi_dcmpgt>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d093      	beq.n	8008c48 <_strtod_l+0x9f0>
 8008d20:	e4c8      	b.n	80086b4 <_strtod_l+0x45c>
 8008d22:	bf00      	nop
 8008d24:	f3af 8000 	nop.w
 8008d28:	00000000 	.word	0x00000000
 8008d2c:	bff00000 	.word	0xbff00000
 8008d30:	00000000 	.word	0x00000000
 8008d34:	3ff00000 	.word	0x3ff00000
 8008d38:	94a03595 	.word	0x94a03595
 8008d3c:	3fdfffff 	.word	0x3fdfffff
 8008d40:	35afe535 	.word	0x35afe535
 8008d44:	3fe00000 	.word	0x3fe00000
 8008d48:	000fffff 	.word	0x000fffff
 8008d4c:	7ff00000 	.word	0x7ff00000
 8008d50:	7fefffff 	.word	0x7fefffff
 8008d54:	3ff00000 	.word	0x3ff00000
 8008d58:	3fe00000 	.word	0x3fe00000
 8008d5c:	7fe00000 	.word	0x7fe00000
 8008d60:	7c9fffff 	.word	0x7c9fffff
 8008d64:	9b08      	ldr	r3, [sp, #32]
 8008d66:	b323      	cbz	r3, 8008db2 <_strtod_l+0xb5a>
 8008d68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008d6c:	d821      	bhi.n	8008db2 <_strtod_l+0xb5a>
 8008d6e:	a328      	add	r3, pc, #160	@ (adr r3, 8008e10 <_strtod_l+0xbb8>)
 8008d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d74:	4630      	mov	r0, r6
 8008d76:	4639      	mov	r1, r7
 8008d78:	f7f7 feca 	bl	8000b10 <__aeabi_dcmple>
 8008d7c:	b1a0      	cbz	r0, 8008da8 <_strtod_l+0xb50>
 8008d7e:	4639      	mov	r1, r7
 8008d80:	4630      	mov	r0, r6
 8008d82:	f7f7 ff21 	bl	8000bc8 <__aeabi_d2uiz>
 8008d86:	2801      	cmp	r0, #1
 8008d88:	bf38      	it	cc
 8008d8a:	2001      	movcc	r0, #1
 8008d8c:	f7f7 fbca 	bl	8000524 <__aeabi_ui2d>
 8008d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d92:	4606      	mov	r6, r0
 8008d94:	460f      	mov	r7, r1
 8008d96:	b9fb      	cbnz	r3, 8008dd8 <_strtod_l+0xb80>
 8008d98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d9c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008d9e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008da0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008da4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008da8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008daa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008dae:	1b5b      	subs	r3, r3, r5
 8008db0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008db2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008db6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008dba:	f002 fdd9 	bl	800b970 <__ulp>
 8008dbe:	4650      	mov	r0, sl
 8008dc0:	ec53 2b10 	vmov	r2, r3, d0
 8008dc4:	4659      	mov	r1, fp
 8008dc6:	f7f7 fc27 	bl	8000618 <__aeabi_dmul>
 8008dca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008dce:	f7f7 fa6d 	bl	80002ac <__adddf3>
 8008dd2:	4682      	mov	sl, r0
 8008dd4:	468b      	mov	fp, r1
 8008dd6:	e770      	b.n	8008cba <_strtod_l+0xa62>
 8008dd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008ddc:	e7e0      	b.n	8008da0 <_strtod_l+0xb48>
 8008dde:	a30e      	add	r3, pc, #56	@ (adr r3, 8008e18 <_strtod_l+0xbc0>)
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	f7f7 fe8a 	bl	8000afc <__aeabi_dcmplt>
 8008de8:	e798      	b.n	8008d1c <_strtod_l+0xac4>
 8008dea:	2300      	movs	r3, #0
 8008dec:	930e      	str	r3, [sp, #56]	@ 0x38
 8008dee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008df0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	f7ff ba6d 	b.w	80082d2 <_strtod_l+0x7a>
 8008df8:	2a65      	cmp	r2, #101	@ 0x65
 8008dfa:	f43f ab68 	beq.w	80084ce <_strtod_l+0x276>
 8008dfe:	2a45      	cmp	r2, #69	@ 0x45
 8008e00:	f43f ab65 	beq.w	80084ce <_strtod_l+0x276>
 8008e04:	2301      	movs	r3, #1
 8008e06:	f7ff bba0 	b.w	800854a <_strtod_l+0x2f2>
 8008e0a:	bf00      	nop
 8008e0c:	f3af 8000 	nop.w
 8008e10:	ffc00000 	.word	0xffc00000
 8008e14:	41dfffff 	.word	0x41dfffff
 8008e18:	94a03595 	.word	0x94a03595
 8008e1c:	3fcfffff 	.word	0x3fcfffff

08008e20 <strtod>:
 8008e20:	460a      	mov	r2, r1
 8008e22:	4601      	mov	r1, r0
 8008e24:	4802      	ldr	r0, [pc, #8]	@ (8008e30 <strtod+0x10>)
 8008e26:	4b03      	ldr	r3, [pc, #12]	@ (8008e34 <strtod+0x14>)
 8008e28:	6800      	ldr	r0, [r0, #0]
 8008e2a:	f7ff ba15 	b.w	8008258 <_strtod_l>
 8008e2e:	bf00      	nop
 8008e30:	200003dc 	.word	0x200003dc
 8008e34:	20000270 	.word	0x20000270

08008e38 <_strtol_l.isra.0>:
 8008e38:	2b24      	cmp	r3, #36	@ 0x24
 8008e3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e3e:	4686      	mov	lr, r0
 8008e40:	4690      	mov	r8, r2
 8008e42:	d801      	bhi.n	8008e48 <_strtol_l.isra.0+0x10>
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d106      	bne.n	8008e56 <_strtol_l.isra.0+0x1e>
 8008e48:	f000 ff16 	bl	8009c78 <__errno>
 8008e4c:	2316      	movs	r3, #22
 8008e4e:	6003      	str	r3, [r0, #0]
 8008e50:	2000      	movs	r0, #0
 8008e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e56:	4834      	ldr	r0, [pc, #208]	@ (8008f28 <_strtol_l.isra.0+0xf0>)
 8008e58:	460d      	mov	r5, r1
 8008e5a:	462a      	mov	r2, r5
 8008e5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e60:	5d06      	ldrb	r6, [r0, r4]
 8008e62:	f016 0608 	ands.w	r6, r6, #8
 8008e66:	d1f8      	bne.n	8008e5a <_strtol_l.isra.0+0x22>
 8008e68:	2c2d      	cmp	r4, #45	@ 0x2d
 8008e6a:	d110      	bne.n	8008e8e <_strtol_l.isra.0+0x56>
 8008e6c:	782c      	ldrb	r4, [r5, #0]
 8008e6e:	2601      	movs	r6, #1
 8008e70:	1c95      	adds	r5, r2, #2
 8008e72:	f033 0210 	bics.w	r2, r3, #16
 8008e76:	d115      	bne.n	8008ea4 <_strtol_l.isra.0+0x6c>
 8008e78:	2c30      	cmp	r4, #48	@ 0x30
 8008e7a:	d10d      	bne.n	8008e98 <_strtol_l.isra.0+0x60>
 8008e7c:	782a      	ldrb	r2, [r5, #0]
 8008e7e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e82:	2a58      	cmp	r2, #88	@ 0x58
 8008e84:	d108      	bne.n	8008e98 <_strtol_l.isra.0+0x60>
 8008e86:	786c      	ldrb	r4, [r5, #1]
 8008e88:	3502      	adds	r5, #2
 8008e8a:	2310      	movs	r3, #16
 8008e8c:	e00a      	b.n	8008ea4 <_strtol_l.isra.0+0x6c>
 8008e8e:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e90:	bf04      	itt	eq
 8008e92:	782c      	ldrbeq	r4, [r5, #0]
 8008e94:	1c95      	addeq	r5, r2, #2
 8008e96:	e7ec      	b.n	8008e72 <_strtol_l.isra.0+0x3a>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1f6      	bne.n	8008e8a <_strtol_l.isra.0+0x52>
 8008e9c:	2c30      	cmp	r4, #48	@ 0x30
 8008e9e:	bf14      	ite	ne
 8008ea0:	230a      	movne	r3, #10
 8008ea2:	2308      	moveq	r3, #8
 8008ea4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ea8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008eac:	2200      	movs	r2, #0
 8008eae:	fbbc f9f3 	udiv	r9, ip, r3
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	fb03 ca19 	mls	sl, r3, r9, ip
 8008eb8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ebc:	2f09      	cmp	r7, #9
 8008ebe:	d80f      	bhi.n	8008ee0 <_strtol_l.isra.0+0xa8>
 8008ec0:	463c      	mov	r4, r7
 8008ec2:	42a3      	cmp	r3, r4
 8008ec4:	dd1b      	ble.n	8008efe <_strtol_l.isra.0+0xc6>
 8008ec6:	1c57      	adds	r7, r2, #1
 8008ec8:	d007      	beq.n	8008eda <_strtol_l.isra.0+0xa2>
 8008eca:	4581      	cmp	r9, r0
 8008ecc:	d314      	bcc.n	8008ef8 <_strtol_l.isra.0+0xc0>
 8008ece:	d101      	bne.n	8008ed4 <_strtol_l.isra.0+0x9c>
 8008ed0:	45a2      	cmp	sl, r4
 8008ed2:	db11      	blt.n	8008ef8 <_strtol_l.isra.0+0xc0>
 8008ed4:	fb00 4003 	mla	r0, r0, r3, r4
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ede:	e7eb      	b.n	8008eb8 <_strtol_l.isra.0+0x80>
 8008ee0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008ee4:	2f19      	cmp	r7, #25
 8008ee6:	d801      	bhi.n	8008eec <_strtol_l.isra.0+0xb4>
 8008ee8:	3c37      	subs	r4, #55	@ 0x37
 8008eea:	e7ea      	b.n	8008ec2 <_strtol_l.isra.0+0x8a>
 8008eec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008ef0:	2f19      	cmp	r7, #25
 8008ef2:	d804      	bhi.n	8008efe <_strtol_l.isra.0+0xc6>
 8008ef4:	3c57      	subs	r4, #87	@ 0x57
 8008ef6:	e7e4      	b.n	8008ec2 <_strtol_l.isra.0+0x8a>
 8008ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8008efc:	e7ed      	b.n	8008eda <_strtol_l.isra.0+0xa2>
 8008efe:	1c53      	adds	r3, r2, #1
 8008f00:	d108      	bne.n	8008f14 <_strtol_l.isra.0+0xdc>
 8008f02:	2322      	movs	r3, #34	@ 0x22
 8008f04:	f8ce 3000 	str.w	r3, [lr]
 8008f08:	4660      	mov	r0, ip
 8008f0a:	f1b8 0f00 	cmp.w	r8, #0
 8008f0e:	d0a0      	beq.n	8008e52 <_strtol_l.isra.0+0x1a>
 8008f10:	1e69      	subs	r1, r5, #1
 8008f12:	e006      	b.n	8008f22 <_strtol_l.isra.0+0xea>
 8008f14:	b106      	cbz	r6, 8008f18 <_strtol_l.isra.0+0xe0>
 8008f16:	4240      	negs	r0, r0
 8008f18:	f1b8 0f00 	cmp.w	r8, #0
 8008f1c:	d099      	beq.n	8008e52 <_strtol_l.isra.0+0x1a>
 8008f1e:	2a00      	cmp	r2, #0
 8008f20:	d1f6      	bne.n	8008f10 <_strtol_l.isra.0+0xd8>
 8008f22:	f8c8 1000 	str.w	r1, [r8]
 8008f26:	e794      	b.n	8008e52 <_strtol_l.isra.0+0x1a>
 8008f28:	0800d121 	.word	0x0800d121

08008f2c <strtol>:
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	460a      	mov	r2, r1
 8008f30:	4601      	mov	r1, r0
 8008f32:	4802      	ldr	r0, [pc, #8]	@ (8008f3c <strtol+0x10>)
 8008f34:	6800      	ldr	r0, [r0, #0]
 8008f36:	f7ff bf7f 	b.w	8008e38 <_strtol_l.isra.0>
 8008f3a:	bf00      	nop
 8008f3c:	200003dc 	.word	0x200003dc

08008f40 <__cvt>:
 8008f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f44:	ec57 6b10 	vmov	r6, r7, d0
 8008f48:	2f00      	cmp	r7, #0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	463b      	mov	r3, r7
 8008f50:	bfbb      	ittet	lt
 8008f52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f56:	461f      	movlt	r7, r3
 8008f58:	2300      	movge	r3, #0
 8008f5a:	232d      	movlt	r3, #45	@ 0x2d
 8008f5c:	700b      	strb	r3, [r1, #0]
 8008f5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f64:	4691      	mov	r9, r2
 8008f66:	f023 0820 	bic.w	r8, r3, #32
 8008f6a:	bfbc      	itt	lt
 8008f6c:	4632      	movlt	r2, r6
 8008f6e:	4616      	movlt	r6, r2
 8008f70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f74:	d005      	beq.n	8008f82 <__cvt+0x42>
 8008f76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f7a:	d100      	bne.n	8008f7e <__cvt+0x3e>
 8008f7c:	3401      	adds	r4, #1
 8008f7e:	2102      	movs	r1, #2
 8008f80:	e000      	b.n	8008f84 <__cvt+0x44>
 8008f82:	2103      	movs	r1, #3
 8008f84:	ab03      	add	r3, sp, #12
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	ab02      	add	r3, sp, #8
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	ec47 6b10 	vmov	d0, r6, r7
 8008f90:	4653      	mov	r3, sl
 8008f92:	4622      	mov	r2, r4
 8008f94:	f000 ff64 	bl	8009e60 <_dtoa_r>
 8008f98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	d119      	bne.n	8008fd4 <__cvt+0x94>
 8008fa0:	f019 0f01 	tst.w	r9, #1
 8008fa4:	d00e      	beq.n	8008fc4 <__cvt+0x84>
 8008fa6:	eb00 0904 	add.w	r9, r0, r4
 8008faa:	2200      	movs	r2, #0
 8008fac:	2300      	movs	r3, #0
 8008fae:	4630      	mov	r0, r6
 8008fb0:	4639      	mov	r1, r7
 8008fb2:	f7f7 fd99 	bl	8000ae8 <__aeabi_dcmpeq>
 8008fb6:	b108      	cbz	r0, 8008fbc <__cvt+0x7c>
 8008fb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fbc:	2230      	movs	r2, #48	@ 0x30
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	454b      	cmp	r3, r9
 8008fc2:	d31e      	bcc.n	8009002 <__cvt+0xc2>
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fc8:	1b5b      	subs	r3, r3, r5
 8008fca:	4628      	mov	r0, r5
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	b004      	add	sp, #16
 8008fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008fd8:	eb00 0904 	add.w	r9, r0, r4
 8008fdc:	d1e5      	bne.n	8008faa <__cvt+0x6a>
 8008fde:	7803      	ldrb	r3, [r0, #0]
 8008fe0:	2b30      	cmp	r3, #48	@ 0x30
 8008fe2:	d10a      	bne.n	8008ffa <__cvt+0xba>
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4630      	mov	r0, r6
 8008fea:	4639      	mov	r1, r7
 8008fec:	f7f7 fd7c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ff0:	b918      	cbnz	r0, 8008ffa <__cvt+0xba>
 8008ff2:	f1c4 0401 	rsb	r4, r4, #1
 8008ff6:	f8ca 4000 	str.w	r4, [sl]
 8008ffa:	f8da 3000 	ldr.w	r3, [sl]
 8008ffe:	4499      	add	r9, r3
 8009000:	e7d3      	b.n	8008faa <__cvt+0x6a>
 8009002:	1c59      	adds	r1, r3, #1
 8009004:	9103      	str	r1, [sp, #12]
 8009006:	701a      	strb	r2, [r3, #0]
 8009008:	e7d9      	b.n	8008fbe <__cvt+0x7e>

0800900a <__exponent>:
 800900a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800900c:	2900      	cmp	r1, #0
 800900e:	bfba      	itte	lt
 8009010:	4249      	neglt	r1, r1
 8009012:	232d      	movlt	r3, #45	@ 0x2d
 8009014:	232b      	movge	r3, #43	@ 0x2b
 8009016:	2909      	cmp	r1, #9
 8009018:	7002      	strb	r2, [r0, #0]
 800901a:	7043      	strb	r3, [r0, #1]
 800901c:	dd29      	ble.n	8009072 <__exponent+0x68>
 800901e:	f10d 0307 	add.w	r3, sp, #7
 8009022:	461d      	mov	r5, r3
 8009024:	270a      	movs	r7, #10
 8009026:	461a      	mov	r2, r3
 8009028:	fbb1 f6f7 	udiv	r6, r1, r7
 800902c:	fb07 1416 	mls	r4, r7, r6, r1
 8009030:	3430      	adds	r4, #48	@ 0x30
 8009032:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009036:	460c      	mov	r4, r1
 8009038:	2c63      	cmp	r4, #99	@ 0x63
 800903a:	f103 33ff 	add.w	r3, r3, #4294967295
 800903e:	4631      	mov	r1, r6
 8009040:	dcf1      	bgt.n	8009026 <__exponent+0x1c>
 8009042:	3130      	adds	r1, #48	@ 0x30
 8009044:	1e94      	subs	r4, r2, #2
 8009046:	f803 1c01 	strb.w	r1, [r3, #-1]
 800904a:	1c41      	adds	r1, r0, #1
 800904c:	4623      	mov	r3, r4
 800904e:	42ab      	cmp	r3, r5
 8009050:	d30a      	bcc.n	8009068 <__exponent+0x5e>
 8009052:	f10d 0309 	add.w	r3, sp, #9
 8009056:	1a9b      	subs	r3, r3, r2
 8009058:	42ac      	cmp	r4, r5
 800905a:	bf88      	it	hi
 800905c:	2300      	movhi	r3, #0
 800905e:	3302      	adds	r3, #2
 8009060:	4403      	add	r3, r0
 8009062:	1a18      	subs	r0, r3, r0
 8009064:	b003      	add	sp, #12
 8009066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009068:	f813 6b01 	ldrb.w	r6, [r3], #1
 800906c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009070:	e7ed      	b.n	800904e <__exponent+0x44>
 8009072:	2330      	movs	r3, #48	@ 0x30
 8009074:	3130      	adds	r1, #48	@ 0x30
 8009076:	7083      	strb	r3, [r0, #2]
 8009078:	70c1      	strb	r1, [r0, #3]
 800907a:	1d03      	adds	r3, r0, #4
 800907c:	e7f1      	b.n	8009062 <__exponent+0x58>
	...

08009080 <_printf_float>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	b08d      	sub	sp, #52	@ 0x34
 8009086:	460c      	mov	r4, r1
 8009088:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800908c:	4616      	mov	r6, r2
 800908e:	461f      	mov	r7, r3
 8009090:	4605      	mov	r5, r0
 8009092:	f000 fd49 	bl	8009b28 <_localeconv_r>
 8009096:	6803      	ldr	r3, [r0, #0]
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	4618      	mov	r0, r3
 800909c:	f7f7 f8f8 	bl	8000290 <strlen>
 80090a0:	2300      	movs	r3, #0
 80090a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80090a4:	f8d8 3000 	ldr.w	r3, [r8]
 80090a8:	9005      	str	r0, [sp, #20]
 80090aa:	3307      	adds	r3, #7
 80090ac:	f023 0307 	bic.w	r3, r3, #7
 80090b0:	f103 0208 	add.w	r2, r3, #8
 80090b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80090b8:	f8d4 b000 	ldr.w	fp, [r4]
 80090bc:	f8c8 2000 	str.w	r2, [r8]
 80090c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80090c8:	9307      	str	r3, [sp, #28]
 80090ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80090ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80090d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090d6:	4b9c      	ldr	r3, [pc, #624]	@ (8009348 <_printf_float+0x2c8>)
 80090d8:	f04f 32ff 	mov.w	r2, #4294967295
 80090dc:	f7f7 fd36 	bl	8000b4c <__aeabi_dcmpun>
 80090e0:	bb70      	cbnz	r0, 8009140 <_printf_float+0xc0>
 80090e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090e6:	4b98      	ldr	r3, [pc, #608]	@ (8009348 <_printf_float+0x2c8>)
 80090e8:	f04f 32ff 	mov.w	r2, #4294967295
 80090ec:	f7f7 fd10 	bl	8000b10 <__aeabi_dcmple>
 80090f0:	bb30      	cbnz	r0, 8009140 <_printf_float+0xc0>
 80090f2:	2200      	movs	r2, #0
 80090f4:	2300      	movs	r3, #0
 80090f6:	4640      	mov	r0, r8
 80090f8:	4649      	mov	r1, r9
 80090fa:	f7f7 fcff 	bl	8000afc <__aeabi_dcmplt>
 80090fe:	b110      	cbz	r0, 8009106 <_printf_float+0x86>
 8009100:	232d      	movs	r3, #45	@ 0x2d
 8009102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009106:	4a91      	ldr	r2, [pc, #580]	@ (800934c <_printf_float+0x2cc>)
 8009108:	4b91      	ldr	r3, [pc, #580]	@ (8009350 <_printf_float+0x2d0>)
 800910a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800910e:	bf8c      	ite	hi
 8009110:	4690      	movhi	r8, r2
 8009112:	4698      	movls	r8, r3
 8009114:	2303      	movs	r3, #3
 8009116:	6123      	str	r3, [r4, #16]
 8009118:	f02b 0304 	bic.w	r3, fp, #4
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	f04f 0900 	mov.w	r9, #0
 8009122:	9700      	str	r7, [sp, #0]
 8009124:	4633      	mov	r3, r6
 8009126:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009128:	4621      	mov	r1, r4
 800912a:	4628      	mov	r0, r5
 800912c:	f000 f9d2 	bl	80094d4 <_printf_common>
 8009130:	3001      	adds	r0, #1
 8009132:	f040 808d 	bne.w	8009250 <_printf_float+0x1d0>
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	b00d      	add	sp, #52	@ 0x34
 800913c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009140:	4642      	mov	r2, r8
 8009142:	464b      	mov	r3, r9
 8009144:	4640      	mov	r0, r8
 8009146:	4649      	mov	r1, r9
 8009148:	f7f7 fd00 	bl	8000b4c <__aeabi_dcmpun>
 800914c:	b140      	cbz	r0, 8009160 <_printf_float+0xe0>
 800914e:	464b      	mov	r3, r9
 8009150:	2b00      	cmp	r3, #0
 8009152:	bfbc      	itt	lt
 8009154:	232d      	movlt	r3, #45	@ 0x2d
 8009156:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800915a:	4a7e      	ldr	r2, [pc, #504]	@ (8009354 <_printf_float+0x2d4>)
 800915c:	4b7e      	ldr	r3, [pc, #504]	@ (8009358 <_printf_float+0x2d8>)
 800915e:	e7d4      	b.n	800910a <_printf_float+0x8a>
 8009160:	6863      	ldr	r3, [r4, #4]
 8009162:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009166:	9206      	str	r2, [sp, #24]
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	d13b      	bne.n	80091e4 <_printf_float+0x164>
 800916c:	2306      	movs	r3, #6
 800916e:	6063      	str	r3, [r4, #4]
 8009170:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009174:	2300      	movs	r3, #0
 8009176:	6022      	str	r2, [r4, #0]
 8009178:	9303      	str	r3, [sp, #12]
 800917a:	ab0a      	add	r3, sp, #40	@ 0x28
 800917c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009180:	ab09      	add	r3, sp, #36	@ 0x24
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	6861      	ldr	r1, [r4, #4]
 8009186:	ec49 8b10 	vmov	d0, r8, r9
 800918a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800918e:	4628      	mov	r0, r5
 8009190:	f7ff fed6 	bl	8008f40 <__cvt>
 8009194:	9b06      	ldr	r3, [sp, #24]
 8009196:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009198:	2b47      	cmp	r3, #71	@ 0x47
 800919a:	4680      	mov	r8, r0
 800919c:	d129      	bne.n	80091f2 <_printf_float+0x172>
 800919e:	1cc8      	adds	r0, r1, #3
 80091a0:	db02      	blt.n	80091a8 <_printf_float+0x128>
 80091a2:	6863      	ldr	r3, [r4, #4]
 80091a4:	4299      	cmp	r1, r3
 80091a6:	dd41      	ble.n	800922c <_printf_float+0x1ac>
 80091a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80091ac:	fa5f fa8a 	uxtb.w	sl, sl
 80091b0:	3901      	subs	r1, #1
 80091b2:	4652      	mov	r2, sl
 80091b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80091ba:	f7ff ff26 	bl	800900a <__exponent>
 80091be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091c0:	1813      	adds	r3, r2, r0
 80091c2:	2a01      	cmp	r2, #1
 80091c4:	4681      	mov	r9, r0
 80091c6:	6123      	str	r3, [r4, #16]
 80091c8:	dc02      	bgt.n	80091d0 <_printf_float+0x150>
 80091ca:	6822      	ldr	r2, [r4, #0]
 80091cc:	07d2      	lsls	r2, r2, #31
 80091ce:	d501      	bpl.n	80091d4 <_printf_float+0x154>
 80091d0:	3301      	adds	r3, #1
 80091d2:	6123      	str	r3, [r4, #16]
 80091d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d0a2      	beq.n	8009122 <_printf_float+0xa2>
 80091dc:	232d      	movs	r3, #45	@ 0x2d
 80091de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091e2:	e79e      	b.n	8009122 <_printf_float+0xa2>
 80091e4:	9a06      	ldr	r2, [sp, #24]
 80091e6:	2a47      	cmp	r2, #71	@ 0x47
 80091e8:	d1c2      	bne.n	8009170 <_printf_float+0xf0>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1c0      	bne.n	8009170 <_printf_float+0xf0>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e7bd      	b.n	800916e <_printf_float+0xee>
 80091f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80091f6:	d9db      	bls.n	80091b0 <_printf_float+0x130>
 80091f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80091fc:	d118      	bne.n	8009230 <_printf_float+0x1b0>
 80091fe:	2900      	cmp	r1, #0
 8009200:	6863      	ldr	r3, [r4, #4]
 8009202:	dd0b      	ble.n	800921c <_printf_float+0x19c>
 8009204:	6121      	str	r1, [r4, #16]
 8009206:	b913      	cbnz	r3, 800920e <_printf_float+0x18e>
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	07d0      	lsls	r0, r2, #31
 800920c:	d502      	bpl.n	8009214 <_printf_float+0x194>
 800920e:	3301      	adds	r3, #1
 8009210:	440b      	add	r3, r1
 8009212:	6123      	str	r3, [r4, #16]
 8009214:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009216:	f04f 0900 	mov.w	r9, #0
 800921a:	e7db      	b.n	80091d4 <_printf_float+0x154>
 800921c:	b913      	cbnz	r3, 8009224 <_printf_float+0x1a4>
 800921e:	6822      	ldr	r2, [r4, #0]
 8009220:	07d2      	lsls	r2, r2, #31
 8009222:	d501      	bpl.n	8009228 <_printf_float+0x1a8>
 8009224:	3302      	adds	r3, #2
 8009226:	e7f4      	b.n	8009212 <_printf_float+0x192>
 8009228:	2301      	movs	r3, #1
 800922a:	e7f2      	b.n	8009212 <_printf_float+0x192>
 800922c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009232:	4299      	cmp	r1, r3
 8009234:	db05      	blt.n	8009242 <_printf_float+0x1c2>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	6121      	str	r1, [r4, #16]
 800923a:	07d8      	lsls	r0, r3, #31
 800923c:	d5ea      	bpl.n	8009214 <_printf_float+0x194>
 800923e:	1c4b      	adds	r3, r1, #1
 8009240:	e7e7      	b.n	8009212 <_printf_float+0x192>
 8009242:	2900      	cmp	r1, #0
 8009244:	bfd4      	ite	le
 8009246:	f1c1 0202 	rsble	r2, r1, #2
 800924a:	2201      	movgt	r2, #1
 800924c:	4413      	add	r3, r2
 800924e:	e7e0      	b.n	8009212 <_printf_float+0x192>
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	055a      	lsls	r2, r3, #21
 8009254:	d407      	bmi.n	8009266 <_printf_float+0x1e6>
 8009256:	6923      	ldr	r3, [r4, #16]
 8009258:	4642      	mov	r2, r8
 800925a:	4631      	mov	r1, r6
 800925c:	4628      	mov	r0, r5
 800925e:	47b8      	blx	r7
 8009260:	3001      	adds	r0, #1
 8009262:	d12b      	bne.n	80092bc <_printf_float+0x23c>
 8009264:	e767      	b.n	8009136 <_printf_float+0xb6>
 8009266:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800926a:	f240 80dd 	bls.w	8009428 <_printf_float+0x3a8>
 800926e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009272:	2200      	movs	r2, #0
 8009274:	2300      	movs	r3, #0
 8009276:	f7f7 fc37 	bl	8000ae8 <__aeabi_dcmpeq>
 800927a:	2800      	cmp	r0, #0
 800927c:	d033      	beq.n	80092e6 <_printf_float+0x266>
 800927e:	4a37      	ldr	r2, [pc, #220]	@ (800935c <_printf_float+0x2dc>)
 8009280:	2301      	movs	r3, #1
 8009282:	4631      	mov	r1, r6
 8009284:	4628      	mov	r0, r5
 8009286:	47b8      	blx	r7
 8009288:	3001      	adds	r0, #1
 800928a:	f43f af54 	beq.w	8009136 <_printf_float+0xb6>
 800928e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009292:	4543      	cmp	r3, r8
 8009294:	db02      	blt.n	800929c <_printf_float+0x21c>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	07d8      	lsls	r0, r3, #31
 800929a:	d50f      	bpl.n	80092bc <_printf_float+0x23c>
 800929c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092a0:	4631      	mov	r1, r6
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b8      	blx	r7
 80092a6:	3001      	adds	r0, #1
 80092a8:	f43f af45 	beq.w	8009136 <_printf_float+0xb6>
 80092ac:	f04f 0900 	mov.w	r9, #0
 80092b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80092b4:	f104 0a1a 	add.w	sl, r4, #26
 80092b8:	45c8      	cmp	r8, r9
 80092ba:	dc09      	bgt.n	80092d0 <_printf_float+0x250>
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	079b      	lsls	r3, r3, #30
 80092c0:	f100 8103 	bmi.w	80094ca <_printf_float+0x44a>
 80092c4:	68e0      	ldr	r0, [r4, #12]
 80092c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092c8:	4298      	cmp	r0, r3
 80092ca:	bfb8      	it	lt
 80092cc:	4618      	movlt	r0, r3
 80092ce:	e734      	b.n	800913a <_printf_float+0xba>
 80092d0:	2301      	movs	r3, #1
 80092d2:	4652      	mov	r2, sl
 80092d4:	4631      	mov	r1, r6
 80092d6:	4628      	mov	r0, r5
 80092d8:	47b8      	blx	r7
 80092da:	3001      	adds	r0, #1
 80092dc:	f43f af2b 	beq.w	8009136 <_printf_float+0xb6>
 80092e0:	f109 0901 	add.w	r9, r9, #1
 80092e4:	e7e8      	b.n	80092b8 <_printf_float+0x238>
 80092e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	dc39      	bgt.n	8009360 <_printf_float+0x2e0>
 80092ec:	4a1b      	ldr	r2, [pc, #108]	@ (800935c <_printf_float+0x2dc>)
 80092ee:	2301      	movs	r3, #1
 80092f0:	4631      	mov	r1, r6
 80092f2:	4628      	mov	r0, r5
 80092f4:	47b8      	blx	r7
 80092f6:	3001      	adds	r0, #1
 80092f8:	f43f af1d 	beq.w	8009136 <_printf_float+0xb6>
 80092fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009300:	ea59 0303 	orrs.w	r3, r9, r3
 8009304:	d102      	bne.n	800930c <_printf_float+0x28c>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	07d9      	lsls	r1, r3, #31
 800930a:	d5d7      	bpl.n	80092bc <_printf_float+0x23c>
 800930c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	47b8      	blx	r7
 8009316:	3001      	adds	r0, #1
 8009318:	f43f af0d 	beq.w	8009136 <_printf_float+0xb6>
 800931c:	f04f 0a00 	mov.w	sl, #0
 8009320:	f104 0b1a 	add.w	fp, r4, #26
 8009324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009326:	425b      	negs	r3, r3
 8009328:	4553      	cmp	r3, sl
 800932a:	dc01      	bgt.n	8009330 <_printf_float+0x2b0>
 800932c:	464b      	mov	r3, r9
 800932e:	e793      	b.n	8009258 <_printf_float+0x1d8>
 8009330:	2301      	movs	r3, #1
 8009332:	465a      	mov	r2, fp
 8009334:	4631      	mov	r1, r6
 8009336:	4628      	mov	r0, r5
 8009338:	47b8      	blx	r7
 800933a:	3001      	adds	r0, #1
 800933c:	f43f aefb 	beq.w	8009136 <_printf_float+0xb6>
 8009340:	f10a 0a01 	add.w	sl, sl, #1
 8009344:	e7ee      	b.n	8009324 <_printf_float+0x2a4>
 8009346:	bf00      	nop
 8009348:	7fefffff 	.word	0x7fefffff
 800934c:	0800cea6 	.word	0x0800cea6
 8009350:	0800cea2 	.word	0x0800cea2
 8009354:	0800ceae 	.word	0x0800ceae
 8009358:	0800ceaa 	.word	0x0800ceaa
 800935c:	0800ceb2 	.word	0x0800ceb2
 8009360:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009362:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009366:	4553      	cmp	r3, sl
 8009368:	bfa8      	it	ge
 800936a:	4653      	movge	r3, sl
 800936c:	2b00      	cmp	r3, #0
 800936e:	4699      	mov	r9, r3
 8009370:	dc36      	bgt.n	80093e0 <_printf_float+0x360>
 8009372:	f04f 0b00 	mov.w	fp, #0
 8009376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800937a:	f104 021a 	add.w	r2, r4, #26
 800937e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009380:	9306      	str	r3, [sp, #24]
 8009382:	eba3 0309 	sub.w	r3, r3, r9
 8009386:	455b      	cmp	r3, fp
 8009388:	dc31      	bgt.n	80093ee <_printf_float+0x36e>
 800938a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800938c:	459a      	cmp	sl, r3
 800938e:	dc3a      	bgt.n	8009406 <_printf_float+0x386>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	07da      	lsls	r2, r3, #31
 8009394:	d437      	bmi.n	8009406 <_printf_float+0x386>
 8009396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009398:	ebaa 0903 	sub.w	r9, sl, r3
 800939c:	9b06      	ldr	r3, [sp, #24]
 800939e:	ebaa 0303 	sub.w	r3, sl, r3
 80093a2:	4599      	cmp	r9, r3
 80093a4:	bfa8      	it	ge
 80093a6:	4699      	movge	r9, r3
 80093a8:	f1b9 0f00 	cmp.w	r9, #0
 80093ac:	dc33      	bgt.n	8009416 <_printf_float+0x396>
 80093ae:	f04f 0800 	mov.w	r8, #0
 80093b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093b6:	f104 0b1a 	add.w	fp, r4, #26
 80093ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093bc:	ebaa 0303 	sub.w	r3, sl, r3
 80093c0:	eba3 0309 	sub.w	r3, r3, r9
 80093c4:	4543      	cmp	r3, r8
 80093c6:	f77f af79 	ble.w	80092bc <_printf_float+0x23c>
 80093ca:	2301      	movs	r3, #1
 80093cc:	465a      	mov	r2, fp
 80093ce:	4631      	mov	r1, r6
 80093d0:	4628      	mov	r0, r5
 80093d2:	47b8      	blx	r7
 80093d4:	3001      	adds	r0, #1
 80093d6:	f43f aeae 	beq.w	8009136 <_printf_float+0xb6>
 80093da:	f108 0801 	add.w	r8, r8, #1
 80093de:	e7ec      	b.n	80093ba <_printf_float+0x33a>
 80093e0:	4642      	mov	r2, r8
 80093e2:	4631      	mov	r1, r6
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b8      	blx	r7
 80093e8:	3001      	adds	r0, #1
 80093ea:	d1c2      	bne.n	8009372 <_printf_float+0x2f2>
 80093ec:	e6a3      	b.n	8009136 <_printf_float+0xb6>
 80093ee:	2301      	movs	r3, #1
 80093f0:	4631      	mov	r1, r6
 80093f2:	4628      	mov	r0, r5
 80093f4:	9206      	str	r2, [sp, #24]
 80093f6:	47b8      	blx	r7
 80093f8:	3001      	adds	r0, #1
 80093fa:	f43f ae9c 	beq.w	8009136 <_printf_float+0xb6>
 80093fe:	9a06      	ldr	r2, [sp, #24]
 8009400:	f10b 0b01 	add.w	fp, fp, #1
 8009404:	e7bb      	b.n	800937e <_printf_float+0x2fe>
 8009406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800940a:	4631      	mov	r1, r6
 800940c:	4628      	mov	r0, r5
 800940e:	47b8      	blx	r7
 8009410:	3001      	adds	r0, #1
 8009412:	d1c0      	bne.n	8009396 <_printf_float+0x316>
 8009414:	e68f      	b.n	8009136 <_printf_float+0xb6>
 8009416:	9a06      	ldr	r2, [sp, #24]
 8009418:	464b      	mov	r3, r9
 800941a:	4442      	add	r2, r8
 800941c:	4631      	mov	r1, r6
 800941e:	4628      	mov	r0, r5
 8009420:	47b8      	blx	r7
 8009422:	3001      	adds	r0, #1
 8009424:	d1c3      	bne.n	80093ae <_printf_float+0x32e>
 8009426:	e686      	b.n	8009136 <_printf_float+0xb6>
 8009428:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800942c:	f1ba 0f01 	cmp.w	sl, #1
 8009430:	dc01      	bgt.n	8009436 <_printf_float+0x3b6>
 8009432:	07db      	lsls	r3, r3, #31
 8009434:	d536      	bpl.n	80094a4 <_printf_float+0x424>
 8009436:	2301      	movs	r3, #1
 8009438:	4642      	mov	r2, r8
 800943a:	4631      	mov	r1, r6
 800943c:	4628      	mov	r0, r5
 800943e:	47b8      	blx	r7
 8009440:	3001      	adds	r0, #1
 8009442:	f43f ae78 	beq.w	8009136 <_printf_float+0xb6>
 8009446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800944a:	4631      	mov	r1, r6
 800944c:	4628      	mov	r0, r5
 800944e:	47b8      	blx	r7
 8009450:	3001      	adds	r0, #1
 8009452:	f43f ae70 	beq.w	8009136 <_printf_float+0xb6>
 8009456:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800945a:	2200      	movs	r2, #0
 800945c:	2300      	movs	r3, #0
 800945e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009462:	f7f7 fb41 	bl	8000ae8 <__aeabi_dcmpeq>
 8009466:	b9c0      	cbnz	r0, 800949a <_printf_float+0x41a>
 8009468:	4653      	mov	r3, sl
 800946a:	f108 0201 	add.w	r2, r8, #1
 800946e:	4631      	mov	r1, r6
 8009470:	4628      	mov	r0, r5
 8009472:	47b8      	blx	r7
 8009474:	3001      	adds	r0, #1
 8009476:	d10c      	bne.n	8009492 <_printf_float+0x412>
 8009478:	e65d      	b.n	8009136 <_printf_float+0xb6>
 800947a:	2301      	movs	r3, #1
 800947c:	465a      	mov	r2, fp
 800947e:	4631      	mov	r1, r6
 8009480:	4628      	mov	r0, r5
 8009482:	47b8      	blx	r7
 8009484:	3001      	adds	r0, #1
 8009486:	f43f ae56 	beq.w	8009136 <_printf_float+0xb6>
 800948a:	f108 0801 	add.w	r8, r8, #1
 800948e:	45d0      	cmp	r8, sl
 8009490:	dbf3      	blt.n	800947a <_printf_float+0x3fa>
 8009492:	464b      	mov	r3, r9
 8009494:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009498:	e6df      	b.n	800925a <_printf_float+0x1da>
 800949a:	f04f 0800 	mov.w	r8, #0
 800949e:	f104 0b1a 	add.w	fp, r4, #26
 80094a2:	e7f4      	b.n	800948e <_printf_float+0x40e>
 80094a4:	2301      	movs	r3, #1
 80094a6:	4642      	mov	r2, r8
 80094a8:	e7e1      	b.n	800946e <_printf_float+0x3ee>
 80094aa:	2301      	movs	r3, #1
 80094ac:	464a      	mov	r2, r9
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	f43f ae3e 	beq.w	8009136 <_printf_float+0xb6>
 80094ba:	f108 0801 	add.w	r8, r8, #1
 80094be:	68e3      	ldr	r3, [r4, #12]
 80094c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094c2:	1a5b      	subs	r3, r3, r1
 80094c4:	4543      	cmp	r3, r8
 80094c6:	dcf0      	bgt.n	80094aa <_printf_float+0x42a>
 80094c8:	e6fc      	b.n	80092c4 <_printf_float+0x244>
 80094ca:	f04f 0800 	mov.w	r8, #0
 80094ce:	f104 0919 	add.w	r9, r4, #25
 80094d2:	e7f4      	b.n	80094be <_printf_float+0x43e>

080094d4 <_printf_common>:
 80094d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	4616      	mov	r6, r2
 80094da:	4698      	mov	r8, r3
 80094dc:	688a      	ldr	r2, [r1, #8]
 80094de:	690b      	ldr	r3, [r1, #16]
 80094e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094e4:	4293      	cmp	r3, r2
 80094e6:	bfb8      	it	lt
 80094e8:	4613      	movlt	r3, r2
 80094ea:	6033      	str	r3, [r6, #0]
 80094ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094f0:	4607      	mov	r7, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	b10a      	cbz	r2, 80094fa <_printf_common+0x26>
 80094f6:	3301      	adds	r3, #1
 80094f8:	6033      	str	r3, [r6, #0]
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	0699      	lsls	r1, r3, #26
 80094fe:	bf42      	ittt	mi
 8009500:	6833      	ldrmi	r3, [r6, #0]
 8009502:	3302      	addmi	r3, #2
 8009504:	6033      	strmi	r3, [r6, #0]
 8009506:	6825      	ldr	r5, [r4, #0]
 8009508:	f015 0506 	ands.w	r5, r5, #6
 800950c:	d106      	bne.n	800951c <_printf_common+0x48>
 800950e:	f104 0a19 	add.w	sl, r4, #25
 8009512:	68e3      	ldr	r3, [r4, #12]
 8009514:	6832      	ldr	r2, [r6, #0]
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	42ab      	cmp	r3, r5
 800951a:	dc26      	bgt.n	800956a <_printf_common+0x96>
 800951c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009520:	6822      	ldr	r2, [r4, #0]
 8009522:	3b00      	subs	r3, #0
 8009524:	bf18      	it	ne
 8009526:	2301      	movne	r3, #1
 8009528:	0692      	lsls	r2, r2, #26
 800952a:	d42b      	bmi.n	8009584 <_printf_common+0xb0>
 800952c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009530:	4641      	mov	r1, r8
 8009532:	4638      	mov	r0, r7
 8009534:	47c8      	blx	r9
 8009536:	3001      	adds	r0, #1
 8009538:	d01e      	beq.n	8009578 <_printf_common+0xa4>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	6922      	ldr	r2, [r4, #16]
 800953e:	f003 0306 	and.w	r3, r3, #6
 8009542:	2b04      	cmp	r3, #4
 8009544:	bf02      	ittt	eq
 8009546:	68e5      	ldreq	r5, [r4, #12]
 8009548:	6833      	ldreq	r3, [r6, #0]
 800954a:	1aed      	subeq	r5, r5, r3
 800954c:	68a3      	ldr	r3, [r4, #8]
 800954e:	bf0c      	ite	eq
 8009550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009554:	2500      	movne	r5, #0
 8009556:	4293      	cmp	r3, r2
 8009558:	bfc4      	itt	gt
 800955a:	1a9b      	subgt	r3, r3, r2
 800955c:	18ed      	addgt	r5, r5, r3
 800955e:	2600      	movs	r6, #0
 8009560:	341a      	adds	r4, #26
 8009562:	42b5      	cmp	r5, r6
 8009564:	d11a      	bne.n	800959c <_printf_common+0xc8>
 8009566:	2000      	movs	r0, #0
 8009568:	e008      	b.n	800957c <_printf_common+0xa8>
 800956a:	2301      	movs	r3, #1
 800956c:	4652      	mov	r2, sl
 800956e:	4641      	mov	r1, r8
 8009570:	4638      	mov	r0, r7
 8009572:	47c8      	blx	r9
 8009574:	3001      	adds	r0, #1
 8009576:	d103      	bne.n	8009580 <_printf_common+0xac>
 8009578:	f04f 30ff 	mov.w	r0, #4294967295
 800957c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009580:	3501      	adds	r5, #1
 8009582:	e7c6      	b.n	8009512 <_printf_common+0x3e>
 8009584:	18e1      	adds	r1, r4, r3
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	2030      	movs	r0, #48	@ 0x30
 800958a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800958e:	4422      	add	r2, r4
 8009590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009594:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009598:	3302      	adds	r3, #2
 800959a:	e7c7      	b.n	800952c <_printf_common+0x58>
 800959c:	2301      	movs	r3, #1
 800959e:	4622      	mov	r2, r4
 80095a0:	4641      	mov	r1, r8
 80095a2:	4638      	mov	r0, r7
 80095a4:	47c8      	blx	r9
 80095a6:	3001      	adds	r0, #1
 80095a8:	d0e6      	beq.n	8009578 <_printf_common+0xa4>
 80095aa:	3601      	adds	r6, #1
 80095ac:	e7d9      	b.n	8009562 <_printf_common+0x8e>
	...

080095b0 <_printf_i>:
 80095b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095b4:	7e0f      	ldrb	r7, [r1, #24]
 80095b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095b8:	2f78      	cmp	r7, #120	@ 0x78
 80095ba:	4691      	mov	r9, r2
 80095bc:	4680      	mov	r8, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	469a      	mov	sl, r3
 80095c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095c6:	d807      	bhi.n	80095d8 <_printf_i+0x28>
 80095c8:	2f62      	cmp	r7, #98	@ 0x62
 80095ca:	d80a      	bhi.n	80095e2 <_printf_i+0x32>
 80095cc:	2f00      	cmp	r7, #0
 80095ce:	f000 80d1 	beq.w	8009774 <_printf_i+0x1c4>
 80095d2:	2f58      	cmp	r7, #88	@ 0x58
 80095d4:	f000 80b8 	beq.w	8009748 <_printf_i+0x198>
 80095d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095e0:	e03a      	b.n	8009658 <_printf_i+0xa8>
 80095e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095e6:	2b15      	cmp	r3, #21
 80095e8:	d8f6      	bhi.n	80095d8 <_printf_i+0x28>
 80095ea:	a101      	add	r1, pc, #4	@ (adr r1, 80095f0 <_printf_i+0x40>)
 80095ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095f0:	08009649 	.word	0x08009649
 80095f4:	0800965d 	.word	0x0800965d
 80095f8:	080095d9 	.word	0x080095d9
 80095fc:	080095d9 	.word	0x080095d9
 8009600:	080095d9 	.word	0x080095d9
 8009604:	080095d9 	.word	0x080095d9
 8009608:	0800965d 	.word	0x0800965d
 800960c:	080095d9 	.word	0x080095d9
 8009610:	080095d9 	.word	0x080095d9
 8009614:	080095d9 	.word	0x080095d9
 8009618:	080095d9 	.word	0x080095d9
 800961c:	0800975b 	.word	0x0800975b
 8009620:	08009687 	.word	0x08009687
 8009624:	08009715 	.word	0x08009715
 8009628:	080095d9 	.word	0x080095d9
 800962c:	080095d9 	.word	0x080095d9
 8009630:	0800977d 	.word	0x0800977d
 8009634:	080095d9 	.word	0x080095d9
 8009638:	08009687 	.word	0x08009687
 800963c:	080095d9 	.word	0x080095d9
 8009640:	080095d9 	.word	0x080095d9
 8009644:	0800971d 	.word	0x0800971d
 8009648:	6833      	ldr	r3, [r6, #0]
 800964a:	1d1a      	adds	r2, r3, #4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6032      	str	r2, [r6, #0]
 8009650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009658:	2301      	movs	r3, #1
 800965a:	e09c      	b.n	8009796 <_printf_i+0x1e6>
 800965c:	6833      	ldr	r3, [r6, #0]
 800965e:	6820      	ldr	r0, [r4, #0]
 8009660:	1d19      	adds	r1, r3, #4
 8009662:	6031      	str	r1, [r6, #0]
 8009664:	0606      	lsls	r6, r0, #24
 8009666:	d501      	bpl.n	800966c <_printf_i+0xbc>
 8009668:	681d      	ldr	r5, [r3, #0]
 800966a:	e003      	b.n	8009674 <_printf_i+0xc4>
 800966c:	0645      	lsls	r5, r0, #25
 800966e:	d5fb      	bpl.n	8009668 <_printf_i+0xb8>
 8009670:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009674:	2d00      	cmp	r5, #0
 8009676:	da03      	bge.n	8009680 <_printf_i+0xd0>
 8009678:	232d      	movs	r3, #45	@ 0x2d
 800967a:	426d      	negs	r5, r5
 800967c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009680:	4858      	ldr	r0, [pc, #352]	@ (80097e4 <_printf_i+0x234>)
 8009682:	230a      	movs	r3, #10
 8009684:	e011      	b.n	80096aa <_printf_i+0xfa>
 8009686:	6821      	ldr	r1, [r4, #0]
 8009688:	6833      	ldr	r3, [r6, #0]
 800968a:	0608      	lsls	r0, r1, #24
 800968c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009690:	d402      	bmi.n	8009698 <_printf_i+0xe8>
 8009692:	0649      	lsls	r1, r1, #25
 8009694:	bf48      	it	mi
 8009696:	b2ad      	uxthmi	r5, r5
 8009698:	2f6f      	cmp	r7, #111	@ 0x6f
 800969a:	4852      	ldr	r0, [pc, #328]	@ (80097e4 <_printf_i+0x234>)
 800969c:	6033      	str	r3, [r6, #0]
 800969e:	bf14      	ite	ne
 80096a0:	230a      	movne	r3, #10
 80096a2:	2308      	moveq	r3, #8
 80096a4:	2100      	movs	r1, #0
 80096a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096aa:	6866      	ldr	r6, [r4, #4]
 80096ac:	60a6      	str	r6, [r4, #8]
 80096ae:	2e00      	cmp	r6, #0
 80096b0:	db05      	blt.n	80096be <_printf_i+0x10e>
 80096b2:	6821      	ldr	r1, [r4, #0]
 80096b4:	432e      	orrs	r6, r5
 80096b6:	f021 0104 	bic.w	r1, r1, #4
 80096ba:	6021      	str	r1, [r4, #0]
 80096bc:	d04b      	beq.n	8009756 <_printf_i+0x1a6>
 80096be:	4616      	mov	r6, r2
 80096c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80096c4:	fb03 5711 	mls	r7, r3, r1, r5
 80096c8:	5dc7      	ldrb	r7, [r0, r7]
 80096ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096ce:	462f      	mov	r7, r5
 80096d0:	42bb      	cmp	r3, r7
 80096d2:	460d      	mov	r5, r1
 80096d4:	d9f4      	bls.n	80096c0 <_printf_i+0x110>
 80096d6:	2b08      	cmp	r3, #8
 80096d8:	d10b      	bne.n	80096f2 <_printf_i+0x142>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	07df      	lsls	r7, r3, #31
 80096de:	d508      	bpl.n	80096f2 <_printf_i+0x142>
 80096e0:	6923      	ldr	r3, [r4, #16]
 80096e2:	6861      	ldr	r1, [r4, #4]
 80096e4:	4299      	cmp	r1, r3
 80096e6:	bfde      	ittt	le
 80096e8:	2330      	movle	r3, #48	@ 0x30
 80096ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096f2:	1b92      	subs	r2, r2, r6
 80096f4:	6122      	str	r2, [r4, #16]
 80096f6:	f8cd a000 	str.w	sl, [sp]
 80096fa:	464b      	mov	r3, r9
 80096fc:	aa03      	add	r2, sp, #12
 80096fe:	4621      	mov	r1, r4
 8009700:	4640      	mov	r0, r8
 8009702:	f7ff fee7 	bl	80094d4 <_printf_common>
 8009706:	3001      	adds	r0, #1
 8009708:	d14a      	bne.n	80097a0 <_printf_i+0x1f0>
 800970a:	f04f 30ff 	mov.w	r0, #4294967295
 800970e:	b004      	add	sp, #16
 8009710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	f043 0320 	orr.w	r3, r3, #32
 800971a:	6023      	str	r3, [r4, #0]
 800971c:	4832      	ldr	r0, [pc, #200]	@ (80097e8 <_printf_i+0x238>)
 800971e:	2778      	movs	r7, #120	@ 0x78
 8009720:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	6831      	ldr	r1, [r6, #0]
 8009728:	061f      	lsls	r7, r3, #24
 800972a:	f851 5b04 	ldr.w	r5, [r1], #4
 800972e:	d402      	bmi.n	8009736 <_printf_i+0x186>
 8009730:	065f      	lsls	r7, r3, #25
 8009732:	bf48      	it	mi
 8009734:	b2ad      	uxthmi	r5, r5
 8009736:	6031      	str	r1, [r6, #0]
 8009738:	07d9      	lsls	r1, r3, #31
 800973a:	bf44      	itt	mi
 800973c:	f043 0320 	orrmi.w	r3, r3, #32
 8009740:	6023      	strmi	r3, [r4, #0]
 8009742:	b11d      	cbz	r5, 800974c <_printf_i+0x19c>
 8009744:	2310      	movs	r3, #16
 8009746:	e7ad      	b.n	80096a4 <_printf_i+0xf4>
 8009748:	4826      	ldr	r0, [pc, #152]	@ (80097e4 <_printf_i+0x234>)
 800974a:	e7e9      	b.n	8009720 <_printf_i+0x170>
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	f023 0320 	bic.w	r3, r3, #32
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	e7f6      	b.n	8009744 <_printf_i+0x194>
 8009756:	4616      	mov	r6, r2
 8009758:	e7bd      	b.n	80096d6 <_printf_i+0x126>
 800975a:	6833      	ldr	r3, [r6, #0]
 800975c:	6825      	ldr	r5, [r4, #0]
 800975e:	6961      	ldr	r1, [r4, #20]
 8009760:	1d18      	adds	r0, r3, #4
 8009762:	6030      	str	r0, [r6, #0]
 8009764:	062e      	lsls	r6, r5, #24
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	d501      	bpl.n	800976e <_printf_i+0x1be>
 800976a:	6019      	str	r1, [r3, #0]
 800976c:	e002      	b.n	8009774 <_printf_i+0x1c4>
 800976e:	0668      	lsls	r0, r5, #25
 8009770:	d5fb      	bpl.n	800976a <_printf_i+0x1ba>
 8009772:	8019      	strh	r1, [r3, #0]
 8009774:	2300      	movs	r3, #0
 8009776:	6123      	str	r3, [r4, #16]
 8009778:	4616      	mov	r6, r2
 800977a:	e7bc      	b.n	80096f6 <_printf_i+0x146>
 800977c:	6833      	ldr	r3, [r6, #0]
 800977e:	1d1a      	adds	r2, r3, #4
 8009780:	6032      	str	r2, [r6, #0]
 8009782:	681e      	ldr	r6, [r3, #0]
 8009784:	6862      	ldr	r2, [r4, #4]
 8009786:	2100      	movs	r1, #0
 8009788:	4630      	mov	r0, r6
 800978a:	f7f6 fd31 	bl	80001f0 <memchr>
 800978e:	b108      	cbz	r0, 8009794 <_printf_i+0x1e4>
 8009790:	1b80      	subs	r0, r0, r6
 8009792:	6060      	str	r0, [r4, #4]
 8009794:	6863      	ldr	r3, [r4, #4]
 8009796:	6123      	str	r3, [r4, #16]
 8009798:	2300      	movs	r3, #0
 800979a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800979e:	e7aa      	b.n	80096f6 <_printf_i+0x146>
 80097a0:	6923      	ldr	r3, [r4, #16]
 80097a2:	4632      	mov	r2, r6
 80097a4:	4649      	mov	r1, r9
 80097a6:	4640      	mov	r0, r8
 80097a8:	47d0      	blx	sl
 80097aa:	3001      	adds	r0, #1
 80097ac:	d0ad      	beq.n	800970a <_printf_i+0x15a>
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	079b      	lsls	r3, r3, #30
 80097b2:	d413      	bmi.n	80097dc <_printf_i+0x22c>
 80097b4:	68e0      	ldr	r0, [r4, #12]
 80097b6:	9b03      	ldr	r3, [sp, #12]
 80097b8:	4298      	cmp	r0, r3
 80097ba:	bfb8      	it	lt
 80097bc:	4618      	movlt	r0, r3
 80097be:	e7a6      	b.n	800970e <_printf_i+0x15e>
 80097c0:	2301      	movs	r3, #1
 80097c2:	4632      	mov	r2, r6
 80097c4:	4649      	mov	r1, r9
 80097c6:	4640      	mov	r0, r8
 80097c8:	47d0      	blx	sl
 80097ca:	3001      	adds	r0, #1
 80097cc:	d09d      	beq.n	800970a <_printf_i+0x15a>
 80097ce:	3501      	adds	r5, #1
 80097d0:	68e3      	ldr	r3, [r4, #12]
 80097d2:	9903      	ldr	r1, [sp, #12]
 80097d4:	1a5b      	subs	r3, r3, r1
 80097d6:	42ab      	cmp	r3, r5
 80097d8:	dcf2      	bgt.n	80097c0 <_printf_i+0x210>
 80097da:	e7eb      	b.n	80097b4 <_printf_i+0x204>
 80097dc:	2500      	movs	r5, #0
 80097de:	f104 0619 	add.w	r6, r4, #25
 80097e2:	e7f5      	b.n	80097d0 <_printf_i+0x220>
 80097e4:	0800ceb4 	.word	0x0800ceb4
 80097e8:	0800cec5 	.word	0x0800cec5

080097ec <std>:
 80097ec:	2300      	movs	r3, #0
 80097ee:	b510      	push	{r4, lr}
 80097f0:	4604      	mov	r4, r0
 80097f2:	e9c0 3300 	strd	r3, r3, [r0]
 80097f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097fa:	6083      	str	r3, [r0, #8]
 80097fc:	8181      	strh	r1, [r0, #12]
 80097fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009800:	81c2      	strh	r2, [r0, #14]
 8009802:	6183      	str	r3, [r0, #24]
 8009804:	4619      	mov	r1, r3
 8009806:	2208      	movs	r2, #8
 8009808:	305c      	adds	r0, #92	@ 0x5c
 800980a:	f000 f916 	bl	8009a3a <memset>
 800980e:	4b0d      	ldr	r3, [pc, #52]	@ (8009844 <std+0x58>)
 8009810:	6263      	str	r3, [r4, #36]	@ 0x24
 8009812:	4b0d      	ldr	r3, [pc, #52]	@ (8009848 <std+0x5c>)
 8009814:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009816:	4b0d      	ldr	r3, [pc, #52]	@ (800984c <std+0x60>)
 8009818:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800981a:	4b0d      	ldr	r3, [pc, #52]	@ (8009850 <std+0x64>)
 800981c:	6323      	str	r3, [r4, #48]	@ 0x30
 800981e:	4b0d      	ldr	r3, [pc, #52]	@ (8009854 <std+0x68>)
 8009820:	6224      	str	r4, [r4, #32]
 8009822:	429c      	cmp	r4, r3
 8009824:	d006      	beq.n	8009834 <std+0x48>
 8009826:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800982a:	4294      	cmp	r4, r2
 800982c:	d002      	beq.n	8009834 <std+0x48>
 800982e:	33d0      	adds	r3, #208	@ 0xd0
 8009830:	429c      	cmp	r4, r3
 8009832:	d105      	bne.n	8009840 <std+0x54>
 8009834:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800983c:	f000 ba46 	b.w	8009ccc <__retarget_lock_init_recursive>
 8009840:	bd10      	pop	{r4, pc}
 8009842:	bf00      	nop
 8009844:	080099b5 	.word	0x080099b5
 8009848:	080099d7 	.word	0x080099d7
 800984c:	08009a0f 	.word	0x08009a0f
 8009850:	08009a33 	.word	0x08009a33
 8009854:	20005930 	.word	0x20005930

08009858 <stdio_exit_handler>:
 8009858:	4a02      	ldr	r2, [pc, #8]	@ (8009864 <stdio_exit_handler+0xc>)
 800985a:	4903      	ldr	r1, [pc, #12]	@ (8009868 <stdio_exit_handler+0x10>)
 800985c:	4803      	ldr	r0, [pc, #12]	@ (800986c <stdio_exit_handler+0x14>)
 800985e:	f000 b869 	b.w	8009934 <_fwalk_sglue>
 8009862:	bf00      	nop
 8009864:	20000264 	.word	0x20000264
 8009868:	0800bfbd 	.word	0x0800bfbd
 800986c:	200003e0 	.word	0x200003e0

08009870 <cleanup_stdio>:
 8009870:	6841      	ldr	r1, [r0, #4]
 8009872:	4b0c      	ldr	r3, [pc, #48]	@ (80098a4 <cleanup_stdio+0x34>)
 8009874:	4299      	cmp	r1, r3
 8009876:	b510      	push	{r4, lr}
 8009878:	4604      	mov	r4, r0
 800987a:	d001      	beq.n	8009880 <cleanup_stdio+0x10>
 800987c:	f002 fb9e 	bl	800bfbc <_fflush_r>
 8009880:	68a1      	ldr	r1, [r4, #8]
 8009882:	4b09      	ldr	r3, [pc, #36]	@ (80098a8 <cleanup_stdio+0x38>)
 8009884:	4299      	cmp	r1, r3
 8009886:	d002      	beq.n	800988e <cleanup_stdio+0x1e>
 8009888:	4620      	mov	r0, r4
 800988a:	f002 fb97 	bl	800bfbc <_fflush_r>
 800988e:	68e1      	ldr	r1, [r4, #12]
 8009890:	4b06      	ldr	r3, [pc, #24]	@ (80098ac <cleanup_stdio+0x3c>)
 8009892:	4299      	cmp	r1, r3
 8009894:	d004      	beq.n	80098a0 <cleanup_stdio+0x30>
 8009896:	4620      	mov	r0, r4
 8009898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800989c:	f002 bb8e 	b.w	800bfbc <_fflush_r>
 80098a0:	bd10      	pop	{r4, pc}
 80098a2:	bf00      	nop
 80098a4:	20005930 	.word	0x20005930
 80098a8:	20005998 	.word	0x20005998
 80098ac:	20005a00 	.word	0x20005a00

080098b0 <global_stdio_init.part.0>:
 80098b0:	b510      	push	{r4, lr}
 80098b2:	4b0b      	ldr	r3, [pc, #44]	@ (80098e0 <global_stdio_init.part.0+0x30>)
 80098b4:	4c0b      	ldr	r4, [pc, #44]	@ (80098e4 <global_stdio_init.part.0+0x34>)
 80098b6:	4a0c      	ldr	r2, [pc, #48]	@ (80098e8 <global_stdio_init.part.0+0x38>)
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	4620      	mov	r0, r4
 80098bc:	2200      	movs	r2, #0
 80098be:	2104      	movs	r1, #4
 80098c0:	f7ff ff94 	bl	80097ec <std>
 80098c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80098c8:	2201      	movs	r2, #1
 80098ca:	2109      	movs	r1, #9
 80098cc:	f7ff ff8e 	bl	80097ec <std>
 80098d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80098d4:	2202      	movs	r2, #2
 80098d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098da:	2112      	movs	r1, #18
 80098dc:	f7ff bf86 	b.w	80097ec <std>
 80098e0:	20005a68 	.word	0x20005a68
 80098e4:	20005930 	.word	0x20005930
 80098e8:	08009859 	.word	0x08009859

080098ec <__sfp_lock_acquire>:
 80098ec:	4801      	ldr	r0, [pc, #4]	@ (80098f4 <__sfp_lock_acquire+0x8>)
 80098ee:	f000 b9ee 	b.w	8009cce <__retarget_lock_acquire_recursive>
 80098f2:	bf00      	nop
 80098f4:	20005a71 	.word	0x20005a71

080098f8 <__sfp_lock_release>:
 80098f8:	4801      	ldr	r0, [pc, #4]	@ (8009900 <__sfp_lock_release+0x8>)
 80098fa:	f000 b9e9 	b.w	8009cd0 <__retarget_lock_release_recursive>
 80098fe:	bf00      	nop
 8009900:	20005a71 	.word	0x20005a71

08009904 <__sinit>:
 8009904:	b510      	push	{r4, lr}
 8009906:	4604      	mov	r4, r0
 8009908:	f7ff fff0 	bl	80098ec <__sfp_lock_acquire>
 800990c:	6a23      	ldr	r3, [r4, #32]
 800990e:	b11b      	cbz	r3, 8009918 <__sinit+0x14>
 8009910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009914:	f7ff bff0 	b.w	80098f8 <__sfp_lock_release>
 8009918:	4b04      	ldr	r3, [pc, #16]	@ (800992c <__sinit+0x28>)
 800991a:	6223      	str	r3, [r4, #32]
 800991c:	4b04      	ldr	r3, [pc, #16]	@ (8009930 <__sinit+0x2c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1f5      	bne.n	8009910 <__sinit+0xc>
 8009924:	f7ff ffc4 	bl	80098b0 <global_stdio_init.part.0>
 8009928:	e7f2      	b.n	8009910 <__sinit+0xc>
 800992a:	bf00      	nop
 800992c:	08009871 	.word	0x08009871
 8009930:	20005a68 	.word	0x20005a68

08009934 <_fwalk_sglue>:
 8009934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009938:	4607      	mov	r7, r0
 800993a:	4688      	mov	r8, r1
 800993c:	4614      	mov	r4, r2
 800993e:	2600      	movs	r6, #0
 8009940:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009944:	f1b9 0901 	subs.w	r9, r9, #1
 8009948:	d505      	bpl.n	8009956 <_fwalk_sglue+0x22>
 800994a:	6824      	ldr	r4, [r4, #0]
 800994c:	2c00      	cmp	r4, #0
 800994e:	d1f7      	bne.n	8009940 <_fwalk_sglue+0xc>
 8009950:	4630      	mov	r0, r6
 8009952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009956:	89ab      	ldrh	r3, [r5, #12]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d907      	bls.n	800996c <_fwalk_sglue+0x38>
 800995c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009960:	3301      	adds	r3, #1
 8009962:	d003      	beq.n	800996c <_fwalk_sglue+0x38>
 8009964:	4629      	mov	r1, r5
 8009966:	4638      	mov	r0, r7
 8009968:	47c0      	blx	r8
 800996a:	4306      	orrs	r6, r0
 800996c:	3568      	adds	r5, #104	@ 0x68
 800996e:	e7e9      	b.n	8009944 <_fwalk_sglue+0x10>

08009970 <siprintf>:
 8009970:	b40e      	push	{r1, r2, r3}
 8009972:	b510      	push	{r4, lr}
 8009974:	b09d      	sub	sp, #116	@ 0x74
 8009976:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009978:	9002      	str	r0, [sp, #8]
 800997a:	9006      	str	r0, [sp, #24]
 800997c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009980:	480a      	ldr	r0, [pc, #40]	@ (80099ac <siprintf+0x3c>)
 8009982:	9107      	str	r1, [sp, #28]
 8009984:	9104      	str	r1, [sp, #16]
 8009986:	490a      	ldr	r1, [pc, #40]	@ (80099b0 <siprintf+0x40>)
 8009988:	f853 2b04 	ldr.w	r2, [r3], #4
 800998c:	9105      	str	r1, [sp, #20]
 800998e:	2400      	movs	r4, #0
 8009990:	a902      	add	r1, sp, #8
 8009992:	6800      	ldr	r0, [r0, #0]
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009998:	f002 f990 	bl	800bcbc <_svfiprintf_r>
 800999c:	9b02      	ldr	r3, [sp, #8]
 800999e:	701c      	strb	r4, [r3, #0]
 80099a0:	b01d      	add	sp, #116	@ 0x74
 80099a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a6:	b003      	add	sp, #12
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	200003dc 	.word	0x200003dc
 80099b0:	ffff0208 	.word	0xffff0208

080099b4 <__sread>:
 80099b4:	b510      	push	{r4, lr}
 80099b6:	460c      	mov	r4, r1
 80099b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099bc:	f000 f938 	bl	8009c30 <_read_r>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	bfab      	itete	ge
 80099c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80099c6:	89a3      	ldrhlt	r3, [r4, #12]
 80099c8:	181b      	addge	r3, r3, r0
 80099ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80099ce:	bfac      	ite	ge
 80099d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80099d2:	81a3      	strhlt	r3, [r4, #12]
 80099d4:	bd10      	pop	{r4, pc}

080099d6 <__swrite>:
 80099d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099da:	461f      	mov	r7, r3
 80099dc:	898b      	ldrh	r3, [r1, #12]
 80099de:	05db      	lsls	r3, r3, #23
 80099e0:	4605      	mov	r5, r0
 80099e2:	460c      	mov	r4, r1
 80099e4:	4616      	mov	r6, r2
 80099e6:	d505      	bpl.n	80099f4 <__swrite+0x1e>
 80099e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ec:	2302      	movs	r3, #2
 80099ee:	2200      	movs	r2, #0
 80099f0:	f000 f90c 	bl	8009c0c <_lseek_r>
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	4632      	mov	r2, r6
 8009a02:	463b      	mov	r3, r7
 8009a04:	4628      	mov	r0, r5
 8009a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a0a:	f000 b923 	b.w	8009c54 <_write_r>

08009a0e <__sseek>:
 8009a0e:	b510      	push	{r4, lr}
 8009a10:	460c      	mov	r4, r1
 8009a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a16:	f000 f8f9 	bl	8009c0c <_lseek_r>
 8009a1a:	1c43      	adds	r3, r0, #1
 8009a1c:	89a3      	ldrh	r3, [r4, #12]
 8009a1e:	bf15      	itete	ne
 8009a20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a2a:	81a3      	strheq	r3, [r4, #12]
 8009a2c:	bf18      	it	ne
 8009a2e:	81a3      	strhne	r3, [r4, #12]
 8009a30:	bd10      	pop	{r4, pc}

08009a32 <__sclose>:
 8009a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a36:	f000 b87b 	b.w	8009b30 <_close_r>

08009a3a <memset>:
 8009a3a:	4402      	add	r2, r0
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d100      	bne.n	8009a44 <memset+0xa>
 8009a42:	4770      	bx	lr
 8009a44:	f803 1b01 	strb.w	r1, [r3], #1
 8009a48:	e7f9      	b.n	8009a3e <memset+0x4>

08009a4a <strncmp>:
 8009a4a:	b510      	push	{r4, lr}
 8009a4c:	b16a      	cbz	r2, 8009a6a <strncmp+0x20>
 8009a4e:	3901      	subs	r1, #1
 8009a50:	1884      	adds	r4, r0, r2
 8009a52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a56:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d103      	bne.n	8009a66 <strncmp+0x1c>
 8009a5e:	42a0      	cmp	r0, r4
 8009a60:	d001      	beq.n	8009a66 <strncmp+0x1c>
 8009a62:	2a00      	cmp	r2, #0
 8009a64:	d1f5      	bne.n	8009a52 <strncmp+0x8>
 8009a66:	1ad0      	subs	r0, r2, r3
 8009a68:	bd10      	pop	{r4, pc}
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	e7fc      	b.n	8009a68 <strncmp+0x1e>
	...

08009a70 <strtok>:
 8009a70:	4b16      	ldr	r3, [pc, #88]	@ (8009acc <strtok+0x5c>)
 8009a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a76:	681f      	ldr	r7, [r3, #0]
 8009a78:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	460e      	mov	r6, r1
 8009a7e:	b9ec      	cbnz	r4, 8009abc <strtok+0x4c>
 8009a80:	2050      	movs	r0, #80	@ 0x50
 8009a82:	f001 fb41 	bl	800b108 <malloc>
 8009a86:	4602      	mov	r2, r0
 8009a88:	6478      	str	r0, [r7, #68]	@ 0x44
 8009a8a:	b920      	cbnz	r0, 8009a96 <strtok+0x26>
 8009a8c:	4b10      	ldr	r3, [pc, #64]	@ (8009ad0 <strtok+0x60>)
 8009a8e:	4811      	ldr	r0, [pc, #68]	@ (8009ad4 <strtok+0x64>)
 8009a90:	215b      	movs	r1, #91	@ 0x5b
 8009a92:	f000 f93d 	bl	8009d10 <__assert_func>
 8009a96:	e9c0 4400 	strd	r4, r4, [r0]
 8009a9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009a9e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009aa2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009aa6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009aaa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009aae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009ab2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009ab6:	6184      	str	r4, [r0, #24]
 8009ab8:	7704      	strb	r4, [r0, #28]
 8009aba:	6244      	str	r4, [r0, #36]	@ 0x24
 8009abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009abe:	4631      	mov	r1, r6
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac8:	f000 b806 	b.w	8009ad8 <__strtok_r>
 8009acc:	200003dc 	.word	0x200003dc
 8009ad0:	0800ced6 	.word	0x0800ced6
 8009ad4:	0800ceed 	.word	0x0800ceed

08009ad8 <__strtok_r>:
 8009ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ada:	4604      	mov	r4, r0
 8009adc:	b908      	cbnz	r0, 8009ae2 <__strtok_r+0xa>
 8009ade:	6814      	ldr	r4, [r2, #0]
 8009ae0:	b144      	cbz	r4, 8009af4 <__strtok_r+0x1c>
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009ae8:	460f      	mov	r7, r1
 8009aea:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009aee:	b91e      	cbnz	r6, 8009af8 <__strtok_r+0x20>
 8009af0:	b965      	cbnz	r5, 8009b0c <__strtok_r+0x34>
 8009af2:	6015      	str	r5, [r2, #0]
 8009af4:	2000      	movs	r0, #0
 8009af6:	e005      	b.n	8009b04 <__strtok_r+0x2c>
 8009af8:	42b5      	cmp	r5, r6
 8009afa:	d1f6      	bne.n	8009aea <__strtok_r+0x12>
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1f0      	bne.n	8009ae2 <__strtok_r+0xa>
 8009b00:	6014      	str	r4, [r2, #0]
 8009b02:	7003      	strb	r3, [r0, #0]
 8009b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b06:	461c      	mov	r4, r3
 8009b08:	e00c      	b.n	8009b24 <__strtok_r+0x4c>
 8009b0a:	b91d      	cbnz	r5, 8009b14 <__strtok_r+0x3c>
 8009b0c:	4627      	mov	r7, r4
 8009b0e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b12:	460e      	mov	r6, r1
 8009b14:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009b18:	42ab      	cmp	r3, r5
 8009b1a:	d1f6      	bne.n	8009b0a <__strtok_r+0x32>
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d0f2      	beq.n	8009b06 <__strtok_r+0x2e>
 8009b20:	2300      	movs	r3, #0
 8009b22:	703b      	strb	r3, [r7, #0]
 8009b24:	6014      	str	r4, [r2, #0]
 8009b26:	e7ed      	b.n	8009b04 <__strtok_r+0x2c>

08009b28 <_localeconv_r>:
 8009b28:	4800      	ldr	r0, [pc, #0]	@ (8009b2c <_localeconv_r+0x4>)
 8009b2a:	4770      	bx	lr
 8009b2c:	20000360 	.word	0x20000360

08009b30 <_close_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d06      	ldr	r5, [pc, #24]	@ (8009b4c <_close_r+0x1c>)
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	f7f8 fc62 	bl	8002404 <_close>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_close_r+0x1a>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_close_r+0x1a>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20005a6c 	.word	0x20005a6c

08009b50 <_reclaim_reent>:
 8009b50:	4b2d      	ldr	r3, [pc, #180]	@ (8009c08 <_reclaim_reent+0xb8>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4283      	cmp	r3, r0
 8009b56:	b570      	push	{r4, r5, r6, lr}
 8009b58:	4604      	mov	r4, r0
 8009b5a:	d053      	beq.n	8009c04 <_reclaim_reent+0xb4>
 8009b5c:	69c3      	ldr	r3, [r0, #28]
 8009b5e:	b31b      	cbz	r3, 8009ba8 <_reclaim_reent+0x58>
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	b163      	cbz	r3, 8009b7e <_reclaim_reent+0x2e>
 8009b64:	2500      	movs	r5, #0
 8009b66:	69e3      	ldr	r3, [r4, #28]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	5959      	ldr	r1, [r3, r5]
 8009b6c:	b9b1      	cbnz	r1, 8009b9c <_reclaim_reent+0x4c>
 8009b6e:	3504      	adds	r5, #4
 8009b70:	2d80      	cmp	r5, #128	@ 0x80
 8009b72:	d1f8      	bne.n	8009b66 <_reclaim_reent+0x16>
 8009b74:	69e3      	ldr	r3, [r4, #28]
 8009b76:	4620      	mov	r0, r4
 8009b78:	68d9      	ldr	r1, [r3, #12]
 8009b7a:	f000 ff41 	bl	800aa00 <_free_r>
 8009b7e:	69e3      	ldr	r3, [r4, #28]
 8009b80:	6819      	ldr	r1, [r3, #0]
 8009b82:	b111      	cbz	r1, 8009b8a <_reclaim_reent+0x3a>
 8009b84:	4620      	mov	r0, r4
 8009b86:	f000 ff3b 	bl	800aa00 <_free_r>
 8009b8a:	69e3      	ldr	r3, [r4, #28]
 8009b8c:	689d      	ldr	r5, [r3, #8]
 8009b8e:	b15d      	cbz	r5, 8009ba8 <_reclaim_reent+0x58>
 8009b90:	4629      	mov	r1, r5
 8009b92:	4620      	mov	r0, r4
 8009b94:	682d      	ldr	r5, [r5, #0]
 8009b96:	f000 ff33 	bl	800aa00 <_free_r>
 8009b9a:	e7f8      	b.n	8009b8e <_reclaim_reent+0x3e>
 8009b9c:	680e      	ldr	r6, [r1, #0]
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f000 ff2e 	bl	800aa00 <_free_r>
 8009ba4:	4631      	mov	r1, r6
 8009ba6:	e7e1      	b.n	8009b6c <_reclaim_reent+0x1c>
 8009ba8:	6961      	ldr	r1, [r4, #20]
 8009baa:	b111      	cbz	r1, 8009bb2 <_reclaim_reent+0x62>
 8009bac:	4620      	mov	r0, r4
 8009bae:	f000 ff27 	bl	800aa00 <_free_r>
 8009bb2:	69e1      	ldr	r1, [r4, #28]
 8009bb4:	b111      	cbz	r1, 8009bbc <_reclaim_reent+0x6c>
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f000 ff22 	bl	800aa00 <_free_r>
 8009bbc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009bbe:	b111      	cbz	r1, 8009bc6 <_reclaim_reent+0x76>
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f000 ff1d 	bl	800aa00 <_free_r>
 8009bc6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bc8:	b111      	cbz	r1, 8009bd0 <_reclaim_reent+0x80>
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f000 ff18 	bl	800aa00 <_free_r>
 8009bd0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009bd2:	b111      	cbz	r1, 8009bda <_reclaim_reent+0x8a>
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f000 ff13 	bl	800aa00 <_free_r>
 8009bda:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009bdc:	b111      	cbz	r1, 8009be4 <_reclaim_reent+0x94>
 8009bde:	4620      	mov	r0, r4
 8009be0:	f000 ff0e 	bl	800aa00 <_free_r>
 8009be4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009be6:	b111      	cbz	r1, 8009bee <_reclaim_reent+0x9e>
 8009be8:	4620      	mov	r0, r4
 8009bea:	f000 ff09 	bl	800aa00 <_free_r>
 8009bee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009bf0:	b111      	cbz	r1, 8009bf8 <_reclaim_reent+0xa8>
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 ff04 	bl	800aa00 <_free_r>
 8009bf8:	6a23      	ldr	r3, [r4, #32]
 8009bfa:	b11b      	cbz	r3, 8009c04 <_reclaim_reent+0xb4>
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c02:	4718      	bx	r3
 8009c04:	bd70      	pop	{r4, r5, r6, pc}
 8009c06:	bf00      	nop
 8009c08:	200003dc 	.word	0x200003dc

08009c0c <_lseek_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d07      	ldr	r5, [pc, #28]	@ (8009c2c <_lseek_r+0x20>)
 8009c10:	4604      	mov	r4, r0
 8009c12:	4608      	mov	r0, r1
 8009c14:	4611      	mov	r1, r2
 8009c16:	2200      	movs	r2, #0
 8009c18:	602a      	str	r2, [r5, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f7f8 fc19 	bl	8002452 <_lseek>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_lseek_r+0x1e>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_lseek_r+0x1e>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	20005a6c 	.word	0x20005a6c

08009c30 <_read_r>:
 8009c30:	b538      	push	{r3, r4, r5, lr}
 8009c32:	4d07      	ldr	r5, [pc, #28]	@ (8009c50 <_read_r+0x20>)
 8009c34:	4604      	mov	r4, r0
 8009c36:	4608      	mov	r0, r1
 8009c38:	4611      	mov	r1, r2
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	602a      	str	r2, [r5, #0]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f7f8 fba7 	bl	8002392 <_read>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d102      	bne.n	8009c4e <_read_r+0x1e>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	b103      	cbz	r3, 8009c4e <_read_r+0x1e>
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	20005a6c 	.word	0x20005a6c

08009c54 <_write_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	4d07      	ldr	r5, [pc, #28]	@ (8009c74 <_write_r+0x20>)
 8009c58:	4604      	mov	r4, r0
 8009c5a:	4608      	mov	r0, r1
 8009c5c:	4611      	mov	r1, r2
 8009c5e:	2200      	movs	r2, #0
 8009c60:	602a      	str	r2, [r5, #0]
 8009c62:	461a      	mov	r2, r3
 8009c64:	f7f8 fbb2 	bl	80023cc <_write>
 8009c68:	1c43      	adds	r3, r0, #1
 8009c6a:	d102      	bne.n	8009c72 <_write_r+0x1e>
 8009c6c:	682b      	ldr	r3, [r5, #0]
 8009c6e:	b103      	cbz	r3, 8009c72 <_write_r+0x1e>
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	bd38      	pop	{r3, r4, r5, pc}
 8009c74:	20005a6c 	.word	0x20005a6c

08009c78 <__errno>:
 8009c78:	4b01      	ldr	r3, [pc, #4]	@ (8009c80 <__errno+0x8>)
 8009c7a:	6818      	ldr	r0, [r3, #0]
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	200003dc 	.word	0x200003dc

08009c84 <__libc_init_array>:
 8009c84:	b570      	push	{r4, r5, r6, lr}
 8009c86:	4d0d      	ldr	r5, [pc, #52]	@ (8009cbc <__libc_init_array+0x38>)
 8009c88:	4c0d      	ldr	r4, [pc, #52]	@ (8009cc0 <__libc_init_array+0x3c>)
 8009c8a:	1b64      	subs	r4, r4, r5
 8009c8c:	10a4      	asrs	r4, r4, #2
 8009c8e:	2600      	movs	r6, #0
 8009c90:	42a6      	cmp	r6, r4
 8009c92:	d109      	bne.n	8009ca8 <__libc_init_array+0x24>
 8009c94:	4d0b      	ldr	r5, [pc, #44]	@ (8009cc4 <__libc_init_array+0x40>)
 8009c96:	4c0c      	ldr	r4, [pc, #48]	@ (8009cc8 <__libc_init_array+0x44>)
 8009c98:	f002 fce2 	bl	800c660 <_init>
 8009c9c:	1b64      	subs	r4, r4, r5
 8009c9e:	10a4      	asrs	r4, r4, #2
 8009ca0:	2600      	movs	r6, #0
 8009ca2:	42a6      	cmp	r6, r4
 8009ca4:	d105      	bne.n	8009cb2 <__libc_init_array+0x2e>
 8009ca6:	bd70      	pop	{r4, r5, r6, pc}
 8009ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cac:	4798      	blx	r3
 8009cae:	3601      	adds	r6, #1
 8009cb0:	e7ee      	b.n	8009c90 <__libc_init_array+0xc>
 8009cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb6:	4798      	blx	r3
 8009cb8:	3601      	adds	r6, #1
 8009cba:	e7f2      	b.n	8009ca2 <__libc_init_array+0x1e>
 8009cbc:	0800d328 	.word	0x0800d328
 8009cc0:	0800d328 	.word	0x0800d328
 8009cc4:	0800d328 	.word	0x0800d328
 8009cc8:	0800d32c 	.word	0x0800d32c

08009ccc <__retarget_lock_init_recursive>:
 8009ccc:	4770      	bx	lr

08009cce <__retarget_lock_acquire_recursive>:
 8009cce:	4770      	bx	lr

08009cd0 <__retarget_lock_release_recursive>:
 8009cd0:	4770      	bx	lr

08009cd2 <strcpy>:
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cd8:	f803 2b01 	strb.w	r2, [r3], #1
 8009cdc:	2a00      	cmp	r2, #0
 8009cde:	d1f9      	bne.n	8009cd4 <strcpy+0x2>
 8009ce0:	4770      	bx	lr

08009ce2 <memcpy>:
 8009ce2:	440a      	add	r2, r1
 8009ce4:	4291      	cmp	r1, r2
 8009ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cea:	d100      	bne.n	8009cee <memcpy+0xc>
 8009cec:	4770      	bx	lr
 8009cee:	b510      	push	{r4, lr}
 8009cf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cf8:	4291      	cmp	r1, r2
 8009cfa:	d1f9      	bne.n	8009cf0 <memcpy+0xe>
 8009cfc:	bd10      	pop	{r4, pc}
	...

08009d00 <nan>:
 8009d00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009d08 <nan+0x8>
 8009d04:	4770      	bx	lr
 8009d06:	bf00      	nop
 8009d08:	00000000 	.word	0x00000000
 8009d0c:	7ff80000 	.word	0x7ff80000

08009d10 <__assert_func>:
 8009d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d12:	4614      	mov	r4, r2
 8009d14:	461a      	mov	r2, r3
 8009d16:	4b09      	ldr	r3, [pc, #36]	@ (8009d3c <__assert_func+0x2c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	68d8      	ldr	r0, [r3, #12]
 8009d1e:	b14c      	cbz	r4, 8009d34 <__assert_func+0x24>
 8009d20:	4b07      	ldr	r3, [pc, #28]	@ (8009d40 <__assert_func+0x30>)
 8009d22:	9100      	str	r1, [sp, #0]
 8009d24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d28:	4906      	ldr	r1, [pc, #24]	@ (8009d44 <__assert_func+0x34>)
 8009d2a:	462b      	mov	r3, r5
 8009d2c:	f002 f96e 	bl	800c00c <fiprintf>
 8009d30:	f002 f9a8 	bl	800c084 <abort>
 8009d34:	4b04      	ldr	r3, [pc, #16]	@ (8009d48 <__assert_func+0x38>)
 8009d36:	461c      	mov	r4, r3
 8009d38:	e7f3      	b.n	8009d22 <__assert_func+0x12>
 8009d3a:	bf00      	nop
 8009d3c:	200003dc 	.word	0x200003dc
 8009d40:	0800cf4f 	.word	0x0800cf4f
 8009d44:	0800cf5c 	.word	0x0800cf5c
 8009d48:	0800cf8a 	.word	0x0800cf8a

08009d4c <quorem>:
 8009d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d50:	6903      	ldr	r3, [r0, #16]
 8009d52:	690c      	ldr	r4, [r1, #16]
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	4607      	mov	r7, r0
 8009d58:	db7e      	blt.n	8009e58 <quorem+0x10c>
 8009d5a:	3c01      	subs	r4, #1
 8009d5c:	f101 0814 	add.w	r8, r1, #20
 8009d60:	00a3      	lsls	r3, r4, #2
 8009d62:	f100 0514 	add.w	r5, r0, #20
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d6c:	9301      	str	r3, [sp, #4]
 8009d6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d76:	3301      	adds	r3, #1
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d82:	d32e      	bcc.n	8009de2 <quorem+0x96>
 8009d84:	f04f 0a00 	mov.w	sl, #0
 8009d88:	46c4      	mov	ip, r8
 8009d8a:	46ae      	mov	lr, r5
 8009d8c:	46d3      	mov	fp, sl
 8009d8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d92:	b298      	uxth	r0, r3
 8009d94:	fb06 a000 	mla	r0, r6, r0, sl
 8009d98:	0c02      	lsrs	r2, r0, #16
 8009d9a:	0c1b      	lsrs	r3, r3, #16
 8009d9c:	fb06 2303 	mla	r3, r6, r3, r2
 8009da0:	f8de 2000 	ldr.w	r2, [lr]
 8009da4:	b280      	uxth	r0, r0
 8009da6:	b292      	uxth	r2, r2
 8009da8:	1a12      	subs	r2, r2, r0
 8009daa:	445a      	add	r2, fp
 8009dac:	f8de 0000 	ldr.w	r0, [lr]
 8009db0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009dba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009dbe:	b292      	uxth	r2, r2
 8009dc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009dc4:	45e1      	cmp	r9, ip
 8009dc6:	f84e 2b04 	str.w	r2, [lr], #4
 8009dca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009dce:	d2de      	bcs.n	8009d8e <quorem+0x42>
 8009dd0:	9b00      	ldr	r3, [sp, #0]
 8009dd2:	58eb      	ldr	r3, [r5, r3]
 8009dd4:	b92b      	cbnz	r3, 8009de2 <quorem+0x96>
 8009dd6:	9b01      	ldr	r3, [sp, #4]
 8009dd8:	3b04      	subs	r3, #4
 8009dda:	429d      	cmp	r5, r3
 8009ddc:	461a      	mov	r2, r3
 8009dde:	d32f      	bcc.n	8009e40 <quorem+0xf4>
 8009de0:	613c      	str	r4, [r7, #16]
 8009de2:	4638      	mov	r0, r7
 8009de4:	f001 fd14 	bl	800b810 <__mcmp>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	db25      	blt.n	8009e38 <quorem+0xec>
 8009dec:	4629      	mov	r1, r5
 8009dee:	2000      	movs	r0, #0
 8009df0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009df4:	f8d1 c000 	ldr.w	ip, [r1]
 8009df8:	fa1f fe82 	uxth.w	lr, r2
 8009dfc:	fa1f f38c 	uxth.w	r3, ip
 8009e00:	eba3 030e 	sub.w	r3, r3, lr
 8009e04:	4403      	add	r3, r0
 8009e06:	0c12      	lsrs	r2, r2, #16
 8009e08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009e0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e16:	45c1      	cmp	r9, r8
 8009e18:	f841 3b04 	str.w	r3, [r1], #4
 8009e1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e20:	d2e6      	bcs.n	8009df0 <quorem+0xa4>
 8009e22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e2a:	b922      	cbnz	r2, 8009e36 <quorem+0xea>
 8009e2c:	3b04      	subs	r3, #4
 8009e2e:	429d      	cmp	r5, r3
 8009e30:	461a      	mov	r2, r3
 8009e32:	d30b      	bcc.n	8009e4c <quorem+0x100>
 8009e34:	613c      	str	r4, [r7, #16]
 8009e36:	3601      	adds	r6, #1
 8009e38:	4630      	mov	r0, r6
 8009e3a:	b003      	add	sp, #12
 8009e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e40:	6812      	ldr	r2, [r2, #0]
 8009e42:	3b04      	subs	r3, #4
 8009e44:	2a00      	cmp	r2, #0
 8009e46:	d1cb      	bne.n	8009de0 <quorem+0x94>
 8009e48:	3c01      	subs	r4, #1
 8009e4a:	e7c6      	b.n	8009dda <quorem+0x8e>
 8009e4c:	6812      	ldr	r2, [r2, #0]
 8009e4e:	3b04      	subs	r3, #4
 8009e50:	2a00      	cmp	r2, #0
 8009e52:	d1ef      	bne.n	8009e34 <quorem+0xe8>
 8009e54:	3c01      	subs	r4, #1
 8009e56:	e7ea      	b.n	8009e2e <quorem+0xe2>
 8009e58:	2000      	movs	r0, #0
 8009e5a:	e7ee      	b.n	8009e3a <quorem+0xee>
 8009e5c:	0000      	movs	r0, r0
	...

08009e60 <_dtoa_r>:
 8009e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e64:	69c7      	ldr	r7, [r0, #28]
 8009e66:	b097      	sub	sp, #92	@ 0x5c
 8009e68:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009e6c:	ec55 4b10 	vmov	r4, r5, d0
 8009e70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009e72:	9107      	str	r1, [sp, #28]
 8009e74:	4681      	mov	r9, r0
 8009e76:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e78:	9311      	str	r3, [sp, #68]	@ 0x44
 8009e7a:	b97f      	cbnz	r7, 8009e9c <_dtoa_r+0x3c>
 8009e7c:	2010      	movs	r0, #16
 8009e7e:	f001 f943 	bl	800b108 <malloc>
 8009e82:	4602      	mov	r2, r0
 8009e84:	f8c9 001c 	str.w	r0, [r9, #28]
 8009e88:	b920      	cbnz	r0, 8009e94 <_dtoa_r+0x34>
 8009e8a:	4ba9      	ldr	r3, [pc, #676]	@ (800a130 <_dtoa_r+0x2d0>)
 8009e8c:	21ef      	movs	r1, #239	@ 0xef
 8009e8e:	48a9      	ldr	r0, [pc, #676]	@ (800a134 <_dtoa_r+0x2d4>)
 8009e90:	f7ff ff3e 	bl	8009d10 <__assert_func>
 8009e94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e98:	6007      	str	r7, [r0, #0]
 8009e9a:	60c7      	str	r7, [r0, #12]
 8009e9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ea0:	6819      	ldr	r1, [r3, #0]
 8009ea2:	b159      	cbz	r1, 8009ebc <_dtoa_r+0x5c>
 8009ea4:	685a      	ldr	r2, [r3, #4]
 8009ea6:	604a      	str	r2, [r1, #4]
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	4093      	lsls	r3, r2
 8009eac:	608b      	str	r3, [r1, #8]
 8009eae:	4648      	mov	r0, r9
 8009eb0:	f001 fa32 	bl	800b318 <_Bfree>
 8009eb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	1e2b      	subs	r3, r5, #0
 8009ebe:	bfb9      	ittee	lt
 8009ec0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009ec4:	9305      	strlt	r3, [sp, #20]
 8009ec6:	2300      	movge	r3, #0
 8009ec8:	6033      	strge	r3, [r6, #0]
 8009eca:	9f05      	ldr	r7, [sp, #20]
 8009ecc:	4b9a      	ldr	r3, [pc, #616]	@ (800a138 <_dtoa_r+0x2d8>)
 8009ece:	bfbc      	itt	lt
 8009ed0:	2201      	movlt	r2, #1
 8009ed2:	6032      	strlt	r2, [r6, #0]
 8009ed4:	43bb      	bics	r3, r7
 8009ed6:	d112      	bne.n	8009efe <_dtoa_r+0x9e>
 8009ed8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009eda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009ede:	6013      	str	r3, [r2, #0]
 8009ee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ee4:	4323      	orrs	r3, r4
 8009ee6:	f000 855a 	beq.w	800a99e <_dtoa_r+0xb3e>
 8009eea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009eec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a14c <_dtoa_r+0x2ec>
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 855c 	beq.w	800a9ae <_dtoa_r+0xb4e>
 8009ef6:	f10a 0303 	add.w	r3, sl, #3
 8009efa:	f000 bd56 	b.w	800a9aa <_dtoa_r+0xb4a>
 8009efe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009f02:	2200      	movs	r2, #0
 8009f04:	ec51 0b17 	vmov	r0, r1, d7
 8009f08:	2300      	movs	r3, #0
 8009f0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009f0e:	f7f6 fdeb 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f12:	4680      	mov	r8, r0
 8009f14:	b158      	cbz	r0, 8009f2e <_dtoa_r+0xce>
 8009f16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009f18:	2301      	movs	r3, #1
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f1e:	b113      	cbz	r3, 8009f26 <_dtoa_r+0xc6>
 8009f20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009f22:	4b86      	ldr	r3, [pc, #536]	@ (800a13c <_dtoa_r+0x2dc>)
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a150 <_dtoa_r+0x2f0>
 8009f2a:	f000 bd40 	b.w	800a9ae <_dtoa_r+0xb4e>
 8009f2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009f32:	aa14      	add	r2, sp, #80	@ 0x50
 8009f34:	a915      	add	r1, sp, #84	@ 0x54
 8009f36:	4648      	mov	r0, r9
 8009f38:	f001 fd8a 	bl	800ba50 <__d2b>
 8009f3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009f40:	9002      	str	r0, [sp, #8]
 8009f42:	2e00      	cmp	r6, #0
 8009f44:	d078      	beq.n	800a038 <_dtoa_r+0x1d8>
 8009f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009f54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009f5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f60:	4619      	mov	r1, r3
 8009f62:	2200      	movs	r2, #0
 8009f64:	4b76      	ldr	r3, [pc, #472]	@ (800a140 <_dtoa_r+0x2e0>)
 8009f66:	f7f6 f99f 	bl	80002a8 <__aeabi_dsub>
 8009f6a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a118 <_dtoa_r+0x2b8>)
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f7f6 fb52 	bl	8000618 <__aeabi_dmul>
 8009f74:	a36a      	add	r3, pc, #424	@ (adr r3, 800a120 <_dtoa_r+0x2c0>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 f997 	bl	80002ac <__adddf3>
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4630      	mov	r0, r6
 8009f82:	460d      	mov	r5, r1
 8009f84:	f7f6 fade 	bl	8000544 <__aeabi_i2d>
 8009f88:	a367      	add	r3, pc, #412	@ (adr r3, 800a128 <_dtoa_r+0x2c8>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f7f6 fb43 	bl	8000618 <__aeabi_dmul>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4620      	mov	r0, r4
 8009f98:	4629      	mov	r1, r5
 8009f9a:	f7f6 f987 	bl	80002ac <__adddf3>
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	460d      	mov	r5, r1
 8009fa2:	f7f6 fde9 	bl	8000b78 <__aeabi_d2iz>
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	4607      	mov	r7, r0
 8009faa:	2300      	movs	r3, #0
 8009fac:	4620      	mov	r0, r4
 8009fae:	4629      	mov	r1, r5
 8009fb0:	f7f6 fda4 	bl	8000afc <__aeabi_dcmplt>
 8009fb4:	b140      	cbz	r0, 8009fc8 <_dtoa_r+0x168>
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	f7f6 fac4 	bl	8000544 <__aeabi_i2d>
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	462b      	mov	r3, r5
 8009fc0:	f7f6 fd92 	bl	8000ae8 <__aeabi_dcmpeq>
 8009fc4:	b900      	cbnz	r0, 8009fc8 <_dtoa_r+0x168>
 8009fc6:	3f01      	subs	r7, #1
 8009fc8:	2f16      	cmp	r7, #22
 8009fca:	d852      	bhi.n	800a072 <_dtoa_r+0x212>
 8009fcc:	4b5d      	ldr	r3, [pc, #372]	@ (800a144 <_dtoa_r+0x2e4>)
 8009fce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009fda:	f7f6 fd8f 	bl	8000afc <__aeabi_dcmplt>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d049      	beq.n	800a076 <_dtoa_r+0x216>
 8009fe2:	3f01      	subs	r7, #1
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009fe8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009fea:	1b9b      	subs	r3, r3, r6
 8009fec:	1e5a      	subs	r2, r3, #1
 8009fee:	bf45      	ittet	mi
 8009ff0:	f1c3 0301 	rsbmi	r3, r3, #1
 8009ff4:	9300      	strmi	r3, [sp, #0]
 8009ff6:	2300      	movpl	r3, #0
 8009ff8:	2300      	movmi	r3, #0
 8009ffa:	9206      	str	r2, [sp, #24]
 8009ffc:	bf54      	ite	pl
 8009ffe:	9300      	strpl	r3, [sp, #0]
 800a000:	9306      	strmi	r3, [sp, #24]
 800a002:	2f00      	cmp	r7, #0
 800a004:	db39      	blt.n	800a07a <_dtoa_r+0x21a>
 800a006:	9b06      	ldr	r3, [sp, #24]
 800a008:	970d      	str	r7, [sp, #52]	@ 0x34
 800a00a:	443b      	add	r3, r7
 800a00c:	9306      	str	r3, [sp, #24]
 800a00e:	2300      	movs	r3, #0
 800a010:	9308      	str	r3, [sp, #32]
 800a012:	9b07      	ldr	r3, [sp, #28]
 800a014:	2b09      	cmp	r3, #9
 800a016:	d863      	bhi.n	800a0e0 <_dtoa_r+0x280>
 800a018:	2b05      	cmp	r3, #5
 800a01a:	bfc4      	itt	gt
 800a01c:	3b04      	subgt	r3, #4
 800a01e:	9307      	strgt	r3, [sp, #28]
 800a020:	9b07      	ldr	r3, [sp, #28]
 800a022:	f1a3 0302 	sub.w	r3, r3, #2
 800a026:	bfcc      	ite	gt
 800a028:	2400      	movgt	r4, #0
 800a02a:	2401      	movle	r4, #1
 800a02c:	2b03      	cmp	r3, #3
 800a02e:	d863      	bhi.n	800a0f8 <_dtoa_r+0x298>
 800a030:	e8df f003 	tbb	[pc, r3]
 800a034:	2b375452 	.word	0x2b375452
 800a038:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a03c:	441e      	add	r6, r3
 800a03e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a042:	2b20      	cmp	r3, #32
 800a044:	bfc1      	itttt	gt
 800a046:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a04a:	409f      	lslgt	r7, r3
 800a04c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a050:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a054:	bfd6      	itet	le
 800a056:	f1c3 0320 	rsble	r3, r3, #32
 800a05a:	ea47 0003 	orrgt.w	r0, r7, r3
 800a05e:	fa04 f003 	lslle.w	r0, r4, r3
 800a062:	f7f6 fa5f 	bl	8000524 <__aeabi_ui2d>
 800a066:	2201      	movs	r2, #1
 800a068:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a06c:	3e01      	subs	r6, #1
 800a06e:	9212      	str	r2, [sp, #72]	@ 0x48
 800a070:	e776      	b.n	8009f60 <_dtoa_r+0x100>
 800a072:	2301      	movs	r3, #1
 800a074:	e7b7      	b.n	8009fe6 <_dtoa_r+0x186>
 800a076:	9010      	str	r0, [sp, #64]	@ 0x40
 800a078:	e7b6      	b.n	8009fe8 <_dtoa_r+0x188>
 800a07a:	9b00      	ldr	r3, [sp, #0]
 800a07c:	1bdb      	subs	r3, r3, r7
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	427b      	negs	r3, r7
 800a082:	9308      	str	r3, [sp, #32]
 800a084:	2300      	movs	r3, #0
 800a086:	930d      	str	r3, [sp, #52]	@ 0x34
 800a088:	e7c3      	b.n	800a012 <_dtoa_r+0x1b2>
 800a08a:	2301      	movs	r3, #1
 800a08c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a08e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a090:	eb07 0b03 	add.w	fp, r7, r3
 800a094:	f10b 0301 	add.w	r3, fp, #1
 800a098:	2b01      	cmp	r3, #1
 800a09a:	9303      	str	r3, [sp, #12]
 800a09c:	bfb8      	it	lt
 800a09e:	2301      	movlt	r3, #1
 800a0a0:	e006      	b.n	800a0b0 <_dtoa_r+0x250>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	dd28      	ble.n	800a0fe <_dtoa_r+0x29e>
 800a0ac:	469b      	mov	fp, r3
 800a0ae:	9303      	str	r3, [sp, #12]
 800a0b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	f102 0514 	add.w	r5, r2, #20
 800a0bc:	429d      	cmp	r5, r3
 800a0be:	d926      	bls.n	800a10e <_dtoa_r+0x2ae>
 800a0c0:	6041      	str	r1, [r0, #4]
 800a0c2:	4648      	mov	r0, r9
 800a0c4:	f001 f8e8 	bl	800b298 <_Balloc>
 800a0c8:	4682      	mov	sl, r0
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d142      	bne.n	800a154 <_dtoa_r+0x2f4>
 800a0ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a148 <_dtoa_r+0x2e8>)
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	f240 11af 	movw	r1, #431	@ 0x1af
 800a0d6:	e6da      	b.n	8009e8e <_dtoa_r+0x2e>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	e7e3      	b.n	800a0a4 <_dtoa_r+0x244>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	e7d5      	b.n	800a08c <_dtoa_r+0x22c>
 800a0e0:	2401      	movs	r4, #1
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	9307      	str	r3, [sp, #28]
 800a0e6:	9409      	str	r4, [sp, #36]	@ 0x24
 800a0e8:	f04f 3bff 	mov.w	fp, #4294967295
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f8cd b00c 	str.w	fp, [sp, #12]
 800a0f2:	2312      	movs	r3, #18
 800a0f4:	920c      	str	r2, [sp, #48]	@ 0x30
 800a0f6:	e7db      	b.n	800a0b0 <_dtoa_r+0x250>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0fc:	e7f4      	b.n	800a0e8 <_dtoa_r+0x288>
 800a0fe:	f04f 0b01 	mov.w	fp, #1
 800a102:	f8cd b00c 	str.w	fp, [sp, #12]
 800a106:	465b      	mov	r3, fp
 800a108:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a10c:	e7d0      	b.n	800a0b0 <_dtoa_r+0x250>
 800a10e:	3101      	adds	r1, #1
 800a110:	0052      	lsls	r2, r2, #1
 800a112:	e7d1      	b.n	800a0b8 <_dtoa_r+0x258>
 800a114:	f3af 8000 	nop.w
 800a118:	636f4361 	.word	0x636f4361
 800a11c:	3fd287a7 	.word	0x3fd287a7
 800a120:	8b60c8b3 	.word	0x8b60c8b3
 800a124:	3fc68a28 	.word	0x3fc68a28
 800a128:	509f79fb 	.word	0x509f79fb
 800a12c:	3fd34413 	.word	0x3fd34413
 800a130:	0800ced6 	.word	0x0800ced6
 800a134:	0800cf98 	.word	0x0800cf98
 800a138:	7ff00000 	.word	0x7ff00000
 800a13c:	0800ceb3 	.word	0x0800ceb3
 800a140:	3ff80000 	.word	0x3ff80000
 800a144:	0800d258 	.word	0x0800d258
 800a148:	0800cff0 	.word	0x0800cff0
 800a14c:	0800cf94 	.word	0x0800cf94
 800a150:	0800ceb2 	.word	0x0800ceb2
 800a154:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a158:	6018      	str	r0, [r3, #0]
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	2b0e      	cmp	r3, #14
 800a15e:	f200 80a1 	bhi.w	800a2a4 <_dtoa_r+0x444>
 800a162:	2c00      	cmp	r4, #0
 800a164:	f000 809e 	beq.w	800a2a4 <_dtoa_r+0x444>
 800a168:	2f00      	cmp	r7, #0
 800a16a:	dd33      	ble.n	800a1d4 <_dtoa_r+0x374>
 800a16c:	4b9c      	ldr	r3, [pc, #624]	@ (800a3e0 <_dtoa_r+0x580>)
 800a16e:	f007 020f 	and.w	r2, r7, #15
 800a172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a176:	ed93 7b00 	vldr	d7, [r3]
 800a17a:	05f8      	lsls	r0, r7, #23
 800a17c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a180:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a184:	d516      	bpl.n	800a1b4 <_dtoa_r+0x354>
 800a186:	4b97      	ldr	r3, [pc, #604]	@ (800a3e4 <_dtoa_r+0x584>)
 800a188:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a18c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a190:	f7f6 fb6c 	bl	800086c <__aeabi_ddiv>
 800a194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a198:	f004 040f 	and.w	r4, r4, #15
 800a19c:	2603      	movs	r6, #3
 800a19e:	4d91      	ldr	r5, [pc, #580]	@ (800a3e4 <_dtoa_r+0x584>)
 800a1a0:	b954      	cbnz	r4, 800a1b8 <_dtoa_r+0x358>
 800a1a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a1a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1aa:	f7f6 fb5f 	bl	800086c <__aeabi_ddiv>
 800a1ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1b2:	e028      	b.n	800a206 <_dtoa_r+0x3a6>
 800a1b4:	2602      	movs	r6, #2
 800a1b6:	e7f2      	b.n	800a19e <_dtoa_r+0x33e>
 800a1b8:	07e1      	lsls	r1, r4, #31
 800a1ba:	d508      	bpl.n	800a1ce <_dtoa_r+0x36e>
 800a1bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a1c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1c4:	f7f6 fa28 	bl	8000618 <__aeabi_dmul>
 800a1c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a1cc:	3601      	adds	r6, #1
 800a1ce:	1064      	asrs	r4, r4, #1
 800a1d0:	3508      	adds	r5, #8
 800a1d2:	e7e5      	b.n	800a1a0 <_dtoa_r+0x340>
 800a1d4:	f000 80af 	beq.w	800a336 <_dtoa_r+0x4d6>
 800a1d8:	427c      	negs	r4, r7
 800a1da:	4b81      	ldr	r3, [pc, #516]	@ (800a3e0 <_dtoa_r+0x580>)
 800a1dc:	4d81      	ldr	r5, [pc, #516]	@ (800a3e4 <_dtoa_r+0x584>)
 800a1de:	f004 020f 	and.w	r2, r4, #15
 800a1e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a1ee:	f7f6 fa13 	bl	8000618 <__aeabi_dmul>
 800a1f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1f6:	1124      	asrs	r4, r4, #4
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	2602      	movs	r6, #2
 800a1fc:	2c00      	cmp	r4, #0
 800a1fe:	f040 808f 	bne.w	800a320 <_dtoa_r+0x4c0>
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1d3      	bne.n	800a1ae <_dtoa_r+0x34e>
 800a206:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a208:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f000 8094 	beq.w	800a33a <_dtoa_r+0x4da>
 800a212:	4b75      	ldr	r3, [pc, #468]	@ (800a3e8 <_dtoa_r+0x588>)
 800a214:	2200      	movs	r2, #0
 800a216:	4620      	mov	r0, r4
 800a218:	4629      	mov	r1, r5
 800a21a:	f7f6 fc6f 	bl	8000afc <__aeabi_dcmplt>
 800a21e:	2800      	cmp	r0, #0
 800a220:	f000 808b 	beq.w	800a33a <_dtoa_r+0x4da>
 800a224:	9b03      	ldr	r3, [sp, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 8087 	beq.w	800a33a <_dtoa_r+0x4da>
 800a22c:	f1bb 0f00 	cmp.w	fp, #0
 800a230:	dd34      	ble.n	800a29c <_dtoa_r+0x43c>
 800a232:	4620      	mov	r0, r4
 800a234:	4b6d      	ldr	r3, [pc, #436]	@ (800a3ec <_dtoa_r+0x58c>)
 800a236:	2200      	movs	r2, #0
 800a238:	4629      	mov	r1, r5
 800a23a:	f7f6 f9ed 	bl	8000618 <__aeabi_dmul>
 800a23e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a242:	f107 38ff 	add.w	r8, r7, #4294967295
 800a246:	3601      	adds	r6, #1
 800a248:	465c      	mov	r4, fp
 800a24a:	4630      	mov	r0, r6
 800a24c:	f7f6 f97a 	bl	8000544 <__aeabi_i2d>
 800a250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a254:	f7f6 f9e0 	bl	8000618 <__aeabi_dmul>
 800a258:	4b65      	ldr	r3, [pc, #404]	@ (800a3f0 <_dtoa_r+0x590>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	f7f6 f826 	bl	80002ac <__adddf3>
 800a260:	4605      	mov	r5, r0
 800a262:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a266:	2c00      	cmp	r4, #0
 800a268:	d16a      	bne.n	800a340 <_dtoa_r+0x4e0>
 800a26a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a26e:	4b61      	ldr	r3, [pc, #388]	@ (800a3f4 <_dtoa_r+0x594>)
 800a270:	2200      	movs	r2, #0
 800a272:	f7f6 f819 	bl	80002a8 <__aeabi_dsub>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a27e:	462a      	mov	r2, r5
 800a280:	4633      	mov	r3, r6
 800a282:	f7f6 fc59 	bl	8000b38 <__aeabi_dcmpgt>
 800a286:	2800      	cmp	r0, #0
 800a288:	f040 8298 	bne.w	800a7bc <_dtoa_r+0x95c>
 800a28c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a290:	462a      	mov	r2, r5
 800a292:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a296:	f7f6 fc31 	bl	8000afc <__aeabi_dcmplt>
 800a29a:	bb38      	cbnz	r0, 800a2ec <_dtoa_r+0x48c>
 800a29c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a2a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a2a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f2c0 8157 	blt.w	800a55a <_dtoa_r+0x6fa>
 800a2ac:	2f0e      	cmp	r7, #14
 800a2ae:	f300 8154 	bgt.w	800a55a <_dtoa_r+0x6fa>
 800a2b2:	4b4b      	ldr	r3, [pc, #300]	@ (800a3e0 <_dtoa_r+0x580>)
 800a2b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2b8:	ed93 7b00 	vldr	d7, [r3]
 800a2bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	ed8d 7b00 	vstr	d7, [sp]
 800a2c4:	f280 80e5 	bge.w	800a492 <_dtoa_r+0x632>
 800a2c8:	9b03      	ldr	r3, [sp, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f300 80e1 	bgt.w	800a492 <_dtoa_r+0x632>
 800a2d0:	d10c      	bne.n	800a2ec <_dtoa_r+0x48c>
 800a2d2:	4b48      	ldr	r3, [pc, #288]	@ (800a3f4 <_dtoa_r+0x594>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	ec51 0b17 	vmov	r0, r1, d7
 800a2da:	f7f6 f99d 	bl	8000618 <__aeabi_dmul>
 800a2de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2e2:	f7f6 fc1f 	bl	8000b24 <__aeabi_dcmpge>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	f000 8266 	beq.w	800a7b8 <_dtoa_r+0x958>
 800a2ec:	2400      	movs	r4, #0
 800a2ee:	4625      	mov	r5, r4
 800a2f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2f2:	4656      	mov	r6, sl
 800a2f4:	ea6f 0803 	mvn.w	r8, r3
 800a2f8:	2700      	movs	r7, #0
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	4648      	mov	r0, r9
 800a2fe:	f001 f80b 	bl	800b318 <_Bfree>
 800a302:	2d00      	cmp	r5, #0
 800a304:	f000 80bd 	beq.w	800a482 <_dtoa_r+0x622>
 800a308:	b12f      	cbz	r7, 800a316 <_dtoa_r+0x4b6>
 800a30a:	42af      	cmp	r7, r5
 800a30c:	d003      	beq.n	800a316 <_dtoa_r+0x4b6>
 800a30e:	4639      	mov	r1, r7
 800a310:	4648      	mov	r0, r9
 800a312:	f001 f801 	bl	800b318 <_Bfree>
 800a316:	4629      	mov	r1, r5
 800a318:	4648      	mov	r0, r9
 800a31a:	f000 fffd 	bl	800b318 <_Bfree>
 800a31e:	e0b0      	b.n	800a482 <_dtoa_r+0x622>
 800a320:	07e2      	lsls	r2, r4, #31
 800a322:	d505      	bpl.n	800a330 <_dtoa_r+0x4d0>
 800a324:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a328:	f7f6 f976 	bl	8000618 <__aeabi_dmul>
 800a32c:	3601      	adds	r6, #1
 800a32e:	2301      	movs	r3, #1
 800a330:	1064      	asrs	r4, r4, #1
 800a332:	3508      	adds	r5, #8
 800a334:	e762      	b.n	800a1fc <_dtoa_r+0x39c>
 800a336:	2602      	movs	r6, #2
 800a338:	e765      	b.n	800a206 <_dtoa_r+0x3a6>
 800a33a:	9c03      	ldr	r4, [sp, #12]
 800a33c:	46b8      	mov	r8, r7
 800a33e:	e784      	b.n	800a24a <_dtoa_r+0x3ea>
 800a340:	4b27      	ldr	r3, [pc, #156]	@ (800a3e0 <_dtoa_r+0x580>)
 800a342:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a344:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a348:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a34c:	4454      	add	r4, sl
 800a34e:	2900      	cmp	r1, #0
 800a350:	d054      	beq.n	800a3fc <_dtoa_r+0x59c>
 800a352:	4929      	ldr	r1, [pc, #164]	@ (800a3f8 <_dtoa_r+0x598>)
 800a354:	2000      	movs	r0, #0
 800a356:	f7f6 fa89 	bl	800086c <__aeabi_ddiv>
 800a35a:	4633      	mov	r3, r6
 800a35c:	462a      	mov	r2, r5
 800a35e:	f7f5 ffa3 	bl	80002a8 <__aeabi_dsub>
 800a362:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a366:	4656      	mov	r6, sl
 800a368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a36c:	f7f6 fc04 	bl	8000b78 <__aeabi_d2iz>
 800a370:	4605      	mov	r5, r0
 800a372:	f7f6 f8e7 	bl	8000544 <__aeabi_i2d>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a37e:	f7f5 ff93 	bl	80002a8 <__aeabi_dsub>
 800a382:	3530      	adds	r5, #48	@ 0x30
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a38c:	f806 5b01 	strb.w	r5, [r6], #1
 800a390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a394:	f7f6 fbb2 	bl	8000afc <__aeabi_dcmplt>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d172      	bne.n	800a482 <_dtoa_r+0x622>
 800a39c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3a0:	4911      	ldr	r1, [pc, #68]	@ (800a3e8 <_dtoa_r+0x588>)
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	f7f5 ff80 	bl	80002a8 <__aeabi_dsub>
 800a3a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a3ac:	f7f6 fba6 	bl	8000afc <__aeabi_dcmplt>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	f040 80b4 	bne.w	800a51e <_dtoa_r+0x6be>
 800a3b6:	42a6      	cmp	r6, r4
 800a3b8:	f43f af70 	beq.w	800a29c <_dtoa_r+0x43c>
 800a3bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a3ec <_dtoa_r+0x58c>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f7f6 f928 	bl	8000618 <__aeabi_dmul>
 800a3c8:	4b08      	ldr	r3, [pc, #32]	@ (800a3ec <_dtoa_r+0x58c>)
 800a3ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3d4:	f7f6 f920 	bl	8000618 <__aeabi_dmul>
 800a3d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3dc:	e7c4      	b.n	800a368 <_dtoa_r+0x508>
 800a3de:	bf00      	nop
 800a3e0:	0800d258 	.word	0x0800d258
 800a3e4:	0800d230 	.word	0x0800d230
 800a3e8:	3ff00000 	.word	0x3ff00000
 800a3ec:	40240000 	.word	0x40240000
 800a3f0:	401c0000 	.word	0x401c0000
 800a3f4:	40140000 	.word	0x40140000
 800a3f8:	3fe00000 	.word	0x3fe00000
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4628      	mov	r0, r5
 800a400:	f7f6 f90a 	bl	8000618 <__aeabi_dmul>
 800a404:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a408:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a40a:	4656      	mov	r6, sl
 800a40c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a410:	f7f6 fbb2 	bl	8000b78 <__aeabi_d2iz>
 800a414:	4605      	mov	r5, r0
 800a416:	f7f6 f895 	bl	8000544 <__aeabi_i2d>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a422:	f7f5 ff41 	bl	80002a8 <__aeabi_dsub>
 800a426:	3530      	adds	r5, #48	@ 0x30
 800a428:	f806 5b01 	strb.w	r5, [r6], #1
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	42a6      	cmp	r6, r4
 800a432:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a436:	f04f 0200 	mov.w	r2, #0
 800a43a:	d124      	bne.n	800a486 <_dtoa_r+0x626>
 800a43c:	4baf      	ldr	r3, [pc, #700]	@ (800a6fc <_dtoa_r+0x89c>)
 800a43e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a442:	f7f5 ff33 	bl	80002ac <__adddf3>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a44e:	f7f6 fb73 	bl	8000b38 <__aeabi_dcmpgt>
 800a452:	2800      	cmp	r0, #0
 800a454:	d163      	bne.n	800a51e <_dtoa_r+0x6be>
 800a456:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a45a:	49a8      	ldr	r1, [pc, #672]	@ (800a6fc <_dtoa_r+0x89c>)
 800a45c:	2000      	movs	r0, #0
 800a45e:	f7f5 ff23 	bl	80002a8 <__aeabi_dsub>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a46a:	f7f6 fb47 	bl	8000afc <__aeabi_dcmplt>
 800a46e:	2800      	cmp	r0, #0
 800a470:	f43f af14 	beq.w	800a29c <_dtoa_r+0x43c>
 800a474:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a476:	1e73      	subs	r3, r6, #1
 800a478:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a47a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a47e:	2b30      	cmp	r3, #48	@ 0x30
 800a480:	d0f8      	beq.n	800a474 <_dtoa_r+0x614>
 800a482:	4647      	mov	r7, r8
 800a484:	e03b      	b.n	800a4fe <_dtoa_r+0x69e>
 800a486:	4b9e      	ldr	r3, [pc, #632]	@ (800a700 <_dtoa_r+0x8a0>)
 800a488:	f7f6 f8c6 	bl	8000618 <__aeabi_dmul>
 800a48c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a490:	e7bc      	b.n	800a40c <_dtoa_r+0x5ac>
 800a492:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a496:	4656      	mov	r6, sl
 800a498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a49c:	4620      	mov	r0, r4
 800a49e:	4629      	mov	r1, r5
 800a4a0:	f7f6 f9e4 	bl	800086c <__aeabi_ddiv>
 800a4a4:	f7f6 fb68 	bl	8000b78 <__aeabi_d2iz>
 800a4a8:	4680      	mov	r8, r0
 800a4aa:	f7f6 f84b 	bl	8000544 <__aeabi_i2d>
 800a4ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4b2:	f7f6 f8b1 	bl	8000618 <__aeabi_dmul>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	4629      	mov	r1, r5
 800a4be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a4c2:	f7f5 fef1 	bl	80002a8 <__aeabi_dsub>
 800a4c6:	f806 4b01 	strb.w	r4, [r6], #1
 800a4ca:	9d03      	ldr	r5, [sp, #12]
 800a4cc:	eba6 040a 	sub.w	r4, r6, sl
 800a4d0:	42a5      	cmp	r5, r4
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	d133      	bne.n	800a540 <_dtoa_r+0x6e0>
 800a4d8:	f7f5 fee8 	bl	80002ac <__adddf3>
 800a4dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	460d      	mov	r5, r1
 800a4e4:	f7f6 fb28 	bl	8000b38 <__aeabi_dcmpgt>
 800a4e8:	b9c0      	cbnz	r0, 800a51c <_dtoa_r+0x6bc>
 800a4ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	f7f6 faf9 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4f6:	b110      	cbz	r0, 800a4fe <_dtoa_r+0x69e>
 800a4f8:	f018 0f01 	tst.w	r8, #1
 800a4fc:	d10e      	bne.n	800a51c <_dtoa_r+0x6bc>
 800a4fe:	9902      	ldr	r1, [sp, #8]
 800a500:	4648      	mov	r0, r9
 800a502:	f000 ff09 	bl	800b318 <_Bfree>
 800a506:	2300      	movs	r3, #0
 800a508:	7033      	strb	r3, [r6, #0]
 800a50a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a50c:	3701      	adds	r7, #1
 800a50e:	601f      	str	r7, [r3, #0]
 800a510:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 824b 	beq.w	800a9ae <_dtoa_r+0xb4e>
 800a518:	601e      	str	r6, [r3, #0]
 800a51a:	e248      	b.n	800a9ae <_dtoa_r+0xb4e>
 800a51c:	46b8      	mov	r8, r7
 800a51e:	4633      	mov	r3, r6
 800a520:	461e      	mov	r6, r3
 800a522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a526:	2a39      	cmp	r2, #57	@ 0x39
 800a528:	d106      	bne.n	800a538 <_dtoa_r+0x6d8>
 800a52a:	459a      	cmp	sl, r3
 800a52c:	d1f8      	bne.n	800a520 <_dtoa_r+0x6c0>
 800a52e:	2230      	movs	r2, #48	@ 0x30
 800a530:	f108 0801 	add.w	r8, r8, #1
 800a534:	f88a 2000 	strb.w	r2, [sl]
 800a538:	781a      	ldrb	r2, [r3, #0]
 800a53a:	3201      	adds	r2, #1
 800a53c:	701a      	strb	r2, [r3, #0]
 800a53e:	e7a0      	b.n	800a482 <_dtoa_r+0x622>
 800a540:	4b6f      	ldr	r3, [pc, #444]	@ (800a700 <_dtoa_r+0x8a0>)
 800a542:	2200      	movs	r2, #0
 800a544:	f7f6 f868 	bl	8000618 <__aeabi_dmul>
 800a548:	2200      	movs	r2, #0
 800a54a:	2300      	movs	r3, #0
 800a54c:	4604      	mov	r4, r0
 800a54e:	460d      	mov	r5, r1
 800a550:	f7f6 faca 	bl	8000ae8 <__aeabi_dcmpeq>
 800a554:	2800      	cmp	r0, #0
 800a556:	d09f      	beq.n	800a498 <_dtoa_r+0x638>
 800a558:	e7d1      	b.n	800a4fe <_dtoa_r+0x69e>
 800a55a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a55c:	2a00      	cmp	r2, #0
 800a55e:	f000 80ea 	beq.w	800a736 <_dtoa_r+0x8d6>
 800a562:	9a07      	ldr	r2, [sp, #28]
 800a564:	2a01      	cmp	r2, #1
 800a566:	f300 80cd 	bgt.w	800a704 <_dtoa_r+0x8a4>
 800a56a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a56c:	2a00      	cmp	r2, #0
 800a56e:	f000 80c1 	beq.w	800a6f4 <_dtoa_r+0x894>
 800a572:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a576:	9c08      	ldr	r4, [sp, #32]
 800a578:	9e00      	ldr	r6, [sp, #0]
 800a57a:	9a00      	ldr	r2, [sp, #0]
 800a57c:	441a      	add	r2, r3
 800a57e:	9200      	str	r2, [sp, #0]
 800a580:	9a06      	ldr	r2, [sp, #24]
 800a582:	2101      	movs	r1, #1
 800a584:	441a      	add	r2, r3
 800a586:	4648      	mov	r0, r9
 800a588:	9206      	str	r2, [sp, #24]
 800a58a:	f000 ffc3 	bl	800b514 <__i2b>
 800a58e:	4605      	mov	r5, r0
 800a590:	b166      	cbz	r6, 800a5ac <_dtoa_r+0x74c>
 800a592:	9b06      	ldr	r3, [sp, #24]
 800a594:	2b00      	cmp	r3, #0
 800a596:	dd09      	ble.n	800a5ac <_dtoa_r+0x74c>
 800a598:	42b3      	cmp	r3, r6
 800a59a:	9a00      	ldr	r2, [sp, #0]
 800a59c:	bfa8      	it	ge
 800a59e:	4633      	movge	r3, r6
 800a5a0:	1ad2      	subs	r2, r2, r3
 800a5a2:	9200      	str	r2, [sp, #0]
 800a5a4:	9a06      	ldr	r2, [sp, #24]
 800a5a6:	1af6      	subs	r6, r6, r3
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	9306      	str	r3, [sp, #24]
 800a5ac:	9b08      	ldr	r3, [sp, #32]
 800a5ae:	b30b      	cbz	r3, 800a5f4 <_dtoa_r+0x794>
 800a5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 80c6 	beq.w	800a744 <_dtoa_r+0x8e4>
 800a5b8:	2c00      	cmp	r4, #0
 800a5ba:	f000 80c0 	beq.w	800a73e <_dtoa_r+0x8de>
 800a5be:	4629      	mov	r1, r5
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	4648      	mov	r0, r9
 800a5c4:	f001 f85e 	bl	800b684 <__pow5mult>
 800a5c8:	9a02      	ldr	r2, [sp, #8]
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	4605      	mov	r5, r0
 800a5ce:	4648      	mov	r0, r9
 800a5d0:	f000 ffb6 	bl	800b540 <__multiply>
 800a5d4:	9902      	ldr	r1, [sp, #8]
 800a5d6:	4680      	mov	r8, r0
 800a5d8:	4648      	mov	r0, r9
 800a5da:	f000 fe9d 	bl	800b318 <_Bfree>
 800a5de:	9b08      	ldr	r3, [sp, #32]
 800a5e0:	1b1b      	subs	r3, r3, r4
 800a5e2:	9308      	str	r3, [sp, #32]
 800a5e4:	f000 80b1 	beq.w	800a74a <_dtoa_r+0x8ea>
 800a5e8:	9a08      	ldr	r2, [sp, #32]
 800a5ea:	4641      	mov	r1, r8
 800a5ec:	4648      	mov	r0, r9
 800a5ee:	f001 f849 	bl	800b684 <__pow5mult>
 800a5f2:	9002      	str	r0, [sp, #8]
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	4648      	mov	r0, r9
 800a5f8:	f000 ff8c 	bl	800b514 <__i2b>
 800a5fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5fe:	4604      	mov	r4, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 81d8 	beq.w	800a9b6 <_dtoa_r+0xb56>
 800a606:	461a      	mov	r2, r3
 800a608:	4601      	mov	r1, r0
 800a60a:	4648      	mov	r0, r9
 800a60c:	f001 f83a 	bl	800b684 <__pow5mult>
 800a610:	9b07      	ldr	r3, [sp, #28]
 800a612:	2b01      	cmp	r3, #1
 800a614:	4604      	mov	r4, r0
 800a616:	f300 809f 	bgt.w	800a758 <_dtoa_r+0x8f8>
 800a61a:	9b04      	ldr	r3, [sp, #16]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f040 8097 	bne.w	800a750 <_dtoa_r+0x8f0>
 800a622:	9b05      	ldr	r3, [sp, #20]
 800a624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f040 8093 	bne.w	800a754 <_dtoa_r+0x8f4>
 800a62e:	9b05      	ldr	r3, [sp, #20]
 800a630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a634:	0d1b      	lsrs	r3, r3, #20
 800a636:	051b      	lsls	r3, r3, #20
 800a638:	b133      	cbz	r3, 800a648 <_dtoa_r+0x7e8>
 800a63a:	9b00      	ldr	r3, [sp, #0]
 800a63c:	3301      	adds	r3, #1
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	9b06      	ldr	r3, [sp, #24]
 800a642:	3301      	adds	r3, #1
 800a644:	9306      	str	r3, [sp, #24]
 800a646:	2301      	movs	r3, #1
 800a648:	9308      	str	r3, [sp, #32]
 800a64a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 81b8 	beq.w	800a9c2 <_dtoa_r+0xb62>
 800a652:	6923      	ldr	r3, [r4, #16]
 800a654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a658:	6918      	ldr	r0, [r3, #16]
 800a65a:	f000 ff0f 	bl	800b47c <__hi0bits>
 800a65e:	f1c0 0020 	rsb	r0, r0, #32
 800a662:	9b06      	ldr	r3, [sp, #24]
 800a664:	4418      	add	r0, r3
 800a666:	f010 001f 	ands.w	r0, r0, #31
 800a66a:	f000 8082 	beq.w	800a772 <_dtoa_r+0x912>
 800a66e:	f1c0 0320 	rsb	r3, r0, #32
 800a672:	2b04      	cmp	r3, #4
 800a674:	dd73      	ble.n	800a75e <_dtoa_r+0x8fe>
 800a676:	9b00      	ldr	r3, [sp, #0]
 800a678:	f1c0 001c 	rsb	r0, r0, #28
 800a67c:	4403      	add	r3, r0
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	9b06      	ldr	r3, [sp, #24]
 800a682:	4403      	add	r3, r0
 800a684:	4406      	add	r6, r0
 800a686:	9306      	str	r3, [sp, #24]
 800a688:	9b00      	ldr	r3, [sp, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	dd05      	ble.n	800a69a <_dtoa_r+0x83a>
 800a68e:	9902      	ldr	r1, [sp, #8]
 800a690:	461a      	mov	r2, r3
 800a692:	4648      	mov	r0, r9
 800a694:	f001 f850 	bl	800b738 <__lshift>
 800a698:	9002      	str	r0, [sp, #8]
 800a69a:	9b06      	ldr	r3, [sp, #24]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	dd05      	ble.n	800a6ac <_dtoa_r+0x84c>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	4648      	mov	r0, r9
 800a6a6:	f001 f847 	bl	800b738 <__lshift>
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d061      	beq.n	800a776 <_dtoa_r+0x916>
 800a6b2:	9802      	ldr	r0, [sp, #8]
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	f001 f8ab 	bl	800b810 <__mcmp>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	da5b      	bge.n	800a776 <_dtoa_r+0x916>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	9902      	ldr	r1, [sp, #8]
 800a6c2:	220a      	movs	r2, #10
 800a6c4:	4648      	mov	r0, r9
 800a6c6:	f000 fe49 	bl	800b35c <__multadd>
 800a6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6cc:	9002      	str	r0, [sp, #8]
 800a6ce:	f107 38ff 	add.w	r8, r7, #4294967295
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 8177 	beq.w	800a9c6 <_dtoa_r+0xb66>
 800a6d8:	4629      	mov	r1, r5
 800a6da:	2300      	movs	r3, #0
 800a6dc:	220a      	movs	r2, #10
 800a6de:	4648      	mov	r0, r9
 800a6e0:	f000 fe3c 	bl	800b35c <__multadd>
 800a6e4:	f1bb 0f00 	cmp.w	fp, #0
 800a6e8:	4605      	mov	r5, r0
 800a6ea:	dc6f      	bgt.n	800a7cc <_dtoa_r+0x96c>
 800a6ec:	9b07      	ldr	r3, [sp, #28]
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	dc49      	bgt.n	800a786 <_dtoa_r+0x926>
 800a6f2:	e06b      	b.n	800a7cc <_dtoa_r+0x96c>
 800a6f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a6f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a6fa:	e73c      	b.n	800a576 <_dtoa_r+0x716>
 800a6fc:	3fe00000 	.word	0x3fe00000
 800a700:	40240000 	.word	0x40240000
 800a704:	9b03      	ldr	r3, [sp, #12]
 800a706:	1e5c      	subs	r4, r3, #1
 800a708:	9b08      	ldr	r3, [sp, #32]
 800a70a:	42a3      	cmp	r3, r4
 800a70c:	db09      	blt.n	800a722 <_dtoa_r+0x8c2>
 800a70e:	1b1c      	subs	r4, r3, r4
 800a710:	9b03      	ldr	r3, [sp, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	f6bf af30 	bge.w	800a578 <_dtoa_r+0x718>
 800a718:	9b00      	ldr	r3, [sp, #0]
 800a71a:	9a03      	ldr	r2, [sp, #12]
 800a71c:	1a9e      	subs	r6, r3, r2
 800a71e:	2300      	movs	r3, #0
 800a720:	e72b      	b.n	800a57a <_dtoa_r+0x71a>
 800a722:	9b08      	ldr	r3, [sp, #32]
 800a724:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a726:	9408      	str	r4, [sp, #32]
 800a728:	1ae3      	subs	r3, r4, r3
 800a72a:	441a      	add	r2, r3
 800a72c:	9e00      	ldr	r6, [sp, #0]
 800a72e:	9b03      	ldr	r3, [sp, #12]
 800a730:	920d      	str	r2, [sp, #52]	@ 0x34
 800a732:	2400      	movs	r4, #0
 800a734:	e721      	b.n	800a57a <_dtoa_r+0x71a>
 800a736:	9c08      	ldr	r4, [sp, #32]
 800a738:	9e00      	ldr	r6, [sp, #0]
 800a73a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a73c:	e728      	b.n	800a590 <_dtoa_r+0x730>
 800a73e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a742:	e751      	b.n	800a5e8 <_dtoa_r+0x788>
 800a744:	9a08      	ldr	r2, [sp, #32]
 800a746:	9902      	ldr	r1, [sp, #8]
 800a748:	e750      	b.n	800a5ec <_dtoa_r+0x78c>
 800a74a:	f8cd 8008 	str.w	r8, [sp, #8]
 800a74e:	e751      	b.n	800a5f4 <_dtoa_r+0x794>
 800a750:	2300      	movs	r3, #0
 800a752:	e779      	b.n	800a648 <_dtoa_r+0x7e8>
 800a754:	9b04      	ldr	r3, [sp, #16]
 800a756:	e777      	b.n	800a648 <_dtoa_r+0x7e8>
 800a758:	2300      	movs	r3, #0
 800a75a:	9308      	str	r3, [sp, #32]
 800a75c:	e779      	b.n	800a652 <_dtoa_r+0x7f2>
 800a75e:	d093      	beq.n	800a688 <_dtoa_r+0x828>
 800a760:	9a00      	ldr	r2, [sp, #0]
 800a762:	331c      	adds	r3, #28
 800a764:	441a      	add	r2, r3
 800a766:	9200      	str	r2, [sp, #0]
 800a768:	9a06      	ldr	r2, [sp, #24]
 800a76a:	441a      	add	r2, r3
 800a76c:	441e      	add	r6, r3
 800a76e:	9206      	str	r2, [sp, #24]
 800a770:	e78a      	b.n	800a688 <_dtoa_r+0x828>
 800a772:	4603      	mov	r3, r0
 800a774:	e7f4      	b.n	800a760 <_dtoa_r+0x900>
 800a776:	9b03      	ldr	r3, [sp, #12]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	46b8      	mov	r8, r7
 800a77c:	dc20      	bgt.n	800a7c0 <_dtoa_r+0x960>
 800a77e:	469b      	mov	fp, r3
 800a780:	9b07      	ldr	r3, [sp, #28]
 800a782:	2b02      	cmp	r3, #2
 800a784:	dd1e      	ble.n	800a7c4 <_dtoa_r+0x964>
 800a786:	f1bb 0f00 	cmp.w	fp, #0
 800a78a:	f47f adb1 	bne.w	800a2f0 <_dtoa_r+0x490>
 800a78e:	4621      	mov	r1, r4
 800a790:	465b      	mov	r3, fp
 800a792:	2205      	movs	r2, #5
 800a794:	4648      	mov	r0, r9
 800a796:	f000 fde1 	bl	800b35c <__multadd>
 800a79a:	4601      	mov	r1, r0
 800a79c:	4604      	mov	r4, r0
 800a79e:	9802      	ldr	r0, [sp, #8]
 800a7a0:	f001 f836 	bl	800b810 <__mcmp>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	f77f ada3 	ble.w	800a2f0 <_dtoa_r+0x490>
 800a7aa:	4656      	mov	r6, sl
 800a7ac:	2331      	movs	r3, #49	@ 0x31
 800a7ae:	f806 3b01 	strb.w	r3, [r6], #1
 800a7b2:	f108 0801 	add.w	r8, r8, #1
 800a7b6:	e59f      	b.n	800a2f8 <_dtoa_r+0x498>
 800a7b8:	9c03      	ldr	r4, [sp, #12]
 800a7ba:	46b8      	mov	r8, r7
 800a7bc:	4625      	mov	r5, r4
 800a7be:	e7f4      	b.n	800a7aa <_dtoa_r+0x94a>
 800a7c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 8101 	beq.w	800a9ce <_dtoa_r+0xb6e>
 800a7cc:	2e00      	cmp	r6, #0
 800a7ce:	dd05      	ble.n	800a7dc <_dtoa_r+0x97c>
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4632      	mov	r2, r6
 800a7d4:	4648      	mov	r0, r9
 800a7d6:	f000 ffaf 	bl	800b738 <__lshift>
 800a7da:	4605      	mov	r5, r0
 800a7dc:	9b08      	ldr	r3, [sp, #32]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d05c      	beq.n	800a89c <_dtoa_r+0xa3c>
 800a7e2:	6869      	ldr	r1, [r5, #4]
 800a7e4:	4648      	mov	r0, r9
 800a7e6:	f000 fd57 	bl	800b298 <_Balloc>
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	b928      	cbnz	r0, 800a7fa <_dtoa_r+0x99a>
 800a7ee:	4b82      	ldr	r3, [pc, #520]	@ (800a9f8 <_dtoa_r+0xb98>)
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a7f6:	f7ff bb4a 	b.w	8009e8e <_dtoa_r+0x2e>
 800a7fa:	692a      	ldr	r2, [r5, #16]
 800a7fc:	3202      	adds	r2, #2
 800a7fe:	0092      	lsls	r2, r2, #2
 800a800:	f105 010c 	add.w	r1, r5, #12
 800a804:	300c      	adds	r0, #12
 800a806:	f7ff fa6c 	bl	8009ce2 <memcpy>
 800a80a:	2201      	movs	r2, #1
 800a80c:	4631      	mov	r1, r6
 800a80e:	4648      	mov	r0, r9
 800a810:	f000 ff92 	bl	800b738 <__lshift>
 800a814:	f10a 0301 	add.w	r3, sl, #1
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	eb0a 030b 	add.w	r3, sl, fp
 800a81e:	9308      	str	r3, [sp, #32]
 800a820:	9b04      	ldr	r3, [sp, #16]
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	462f      	mov	r7, r5
 800a828:	9306      	str	r3, [sp, #24]
 800a82a:	4605      	mov	r5, r0
 800a82c:	9b00      	ldr	r3, [sp, #0]
 800a82e:	9802      	ldr	r0, [sp, #8]
 800a830:	4621      	mov	r1, r4
 800a832:	f103 3bff 	add.w	fp, r3, #4294967295
 800a836:	f7ff fa89 	bl	8009d4c <quorem>
 800a83a:	4603      	mov	r3, r0
 800a83c:	3330      	adds	r3, #48	@ 0x30
 800a83e:	9003      	str	r0, [sp, #12]
 800a840:	4639      	mov	r1, r7
 800a842:	9802      	ldr	r0, [sp, #8]
 800a844:	9309      	str	r3, [sp, #36]	@ 0x24
 800a846:	f000 ffe3 	bl	800b810 <__mcmp>
 800a84a:	462a      	mov	r2, r5
 800a84c:	9004      	str	r0, [sp, #16]
 800a84e:	4621      	mov	r1, r4
 800a850:	4648      	mov	r0, r9
 800a852:	f000 fff9 	bl	800b848 <__mdiff>
 800a856:	68c2      	ldr	r2, [r0, #12]
 800a858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a85a:	4606      	mov	r6, r0
 800a85c:	bb02      	cbnz	r2, 800a8a0 <_dtoa_r+0xa40>
 800a85e:	4601      	mov	r1, r0
 800a860:	9802      	ldr	r0, [sp, #8]
 800a862:	f000 ffd5 	bl	800b810 <__mcmp>
 800a866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a868:	4602      	mov	r2, r0
 800a86a:	4631      	mov	r1, r6
 800a86c:	4648      	mov	r0, r9
 800a86e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a870:	9309      	str	r3, [sp, #36]	@ 0x24
 800a872:	f000 fd51 	bl	800b318 <_Bfree>
 800a876:	9b07      	ldr	r3, [sp, #28]
 800a878:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a87a:	9e00      	ldr	r6, [sp, #0]
 800a87c:	ea42 0103 	orr.w	r1, r2, r3
 800a880:	9b06      	ldr	r3, [sp, #24]
 800a882:	4319      	orrs	r1, r3
 800a884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a886:	d10d      	bne.n	800a8a4 <_dtoa_r+0xa44>
 800a888:	2b39      	cmp	r3, #57	@ 0x39
 800a88a:	d027      	beq.n	800a8dc <_dtoa_r+0xa7c>
 800a88c:	9a04      	ldr	r2, [sp, #16]
 800a88e:	2a00      	cmp	r2, #0
 800a890:	dd01      	ble.n	800a896 <_dtoa_r+0xa36>
 800a892:	9b03      	ldr	r3, [sp, #12]
 800a894:	3331      	adds	r3, #49	@ 0x31
 800a896:	f88b 3000 	strb.w	r3, [fp]
 800a89a:	e52e      	b.n	800a2fa <_dtoa_r+0x49a>
 800a89c:	4628      	mov	r0, r5
 800a89e:	e7b9      	b.n	800a814 <_dtoa_r+0x9b4>
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	e7e2      	b.n	800a86a <_dtoa_r+0xa0a>
 800a8a4:	9904      	ldr	r1, [sp, #16]
 800a8a6:	2900      	cmp	r1, #0
 800a8a8:	db04      	blt.n	800a8b4 <_dtoa_r+0xa54>
 800a8aa:	9807      	ldr	r0, [sp, #28]
 800a8ac:	4301      	orrs	r1, r0
 800a8ae:	9806      	ldr	r0, [sp, #24]
 800a8b0:	4301      	orrs	r1, r0
 800a8b2:	d120      	bne.n	800a8f6 <_dtoa_r+0xa96>
 800a8b4:	2a00      	cmp	r2, #0
 800a8b6:	ddee      	ble.n	800a896 <_dtoa_r+0xa36>
 800a8b8:	9902      	ldr	r1, [sp, #8]
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	4648      	mov	r0, r9
 800a8c0:	f000 ff3a 	bl	800b738 <__lshift>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	9002      	str	r0, [sp, #8]
 800a8c8:	f000 ffa2 	bl	800b810 <__mcmp>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	9b00      	ldr	r3, [sp, #0]
 800a8d0:	dc02      	bgt.n	800a8d8 <_dtoa_r+0xa78>
 800a8d2:	d1e0      	bne.n	800a896 <_dtoa_r+0xa36>
 800a8d4:	07da      	lsls	r2, r3, #31
 800a8d6:	d5de      	bpl.n	800a896 <_dtoa_r+0xa36>
 800a8d8:	2b39      	cmp	r3, #57	@ 0x39
 800a8da:	d1da      	bne.n	800a892 <_dtoa_r+0xa32>
 800a8dc:	2339      	movs	r3, #57	@ 0x39
 800a8de:	f88b 3000 	strb.w	r3, [fp]
 800a8e2:	4633      	mov	r3, r6
 800a8e4:	461e      	mov	r6, r3
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a8ec:	2a39      	cmp	r2, #57	@ 0x39
 800a8ee:	d04e      	beq.n	800a98e <_dtoa_r+0xb2e>
 800a8f0:	3201      	adds	r2, #1
 800a8f2:	701a      	strb	r2, [r3, #0]
 800a8f4:	e501      	b.n	800a2fa <_dtoa_r+0x49a>
 800a8f6:	2a00      	cmp	r2, #0
 800a8f8:	dd03      	ble.n	800a902 <_dtoa_r+0xaa2>
 800a8fa:	2b39      	cmp	r3, #57	@ 0x39
 800a8fc:	d0ee      	beq.n	800a8dc <_dtoa_r+0xa7c>
 800a8fe:	3301      	adds	r3, #1
 800a900:	e7c9      	b.n	800a896 <_dtoa_r+0xa36>
 800a902:	9a00      	ldr	r2, [sp, #0]
 800a904:	9908      	ldr	r1, [sp, #32]
 800a906:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a90a:	428a      	cmp	r2, r1
 800a90c:	d028      	beq.n	800a960 <_dtoa_r+0xb00>
 800a90e:	9902      	ldr	r1, [sp, #8]
 800a910:	2300      	movs	r3, #0
 800a912:	220a      	movs	r2, #10
 800a914:	4648      	mov	r0, r9
 800a916:	f000 fd21 	bl	800b35c <__multadd>
 800a91a:	42af      	cmp	r7, r5
 800a91c:	9002      	str	r0, [sp, #8]
 800a91e:	f04f 0300 	mov.w	r3, #0
 800a922:	f04f 020a 	mov.w	r2, #10
 800a926:	4639      	mov	r1, r7
 800a928:	4648      	mov	r0, r9
 800a92a:	d107      	bne.n	800a93c <_dtoa_r+0xadc>
 800a92c:	f000 fd16 	bl	800b35c <__multadd>
 800a930:	4607      	mov	r7, r0
 800a932:	4605      	mov	r5, r0
 800a934:	9b00      	ldr	r3, [sp, #0]
 800a936:	3301      	adds	r3, #1
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	e777      	b.n	800a82c <_dtoa_r+0x9cc>
 800a93c:	f000 fd0e 	bl	800b35c <__multadd>
 800a940:	4629      	mov	r1, r5
 800a942:	4607      	mov	r7, r0
 800a944:	2300      	movs	r3, #0
 800a946:	220a      	movs	r2, #10
 800a948:	4648      	mov	r0, r9
 800a94a:	f000 fd07 	bl	800b35c <__multadd>
 800a94e:	4605      	mov	r5, r0
 800a950:	e7f0      	b.n	800a934 <_dtoa_r+0xad4>
 800a952:	f1bb 0f00 	cmp.w	fp, #0
 800a956:	bfcc      	ite	gt
 800a958:	465e      	movgt	r6, fp
 800a95a:	2601      	movle	r6, #1
 800a95c:	4456      	add	r6, sl
 800a95e:	2700      	movs	r7, #0
 800a960:	9902      	ldr	r1, [sp, #8]
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	2201      	movs	r2, #1
 800a966:	4648      	mov	r0, r9
 800a968:	f000 fee6 	bl	800b738 <__lshift>
 800a96c:	4621      	mov	r1, r4
 800a96e:	9002      	str	r0, [sp, #8]
 800a970:	f000 ff4e 	bl	800b810 <__mcmp>
 800a974:	2800      	cmp	r0, #0
 800a976:	dcb4      	bgt.n	800a8e2 <_dtoa_r+0xa82>
 800a978:	d102      	bne.n	800a980 <_dtoa_r+0xb20>
 800a97a:	9b00      	ldr	r3, [sp, #0]
 800a97c:	07db      	lsls	r3, r3, #31
 800a97e:	d4b0      	bmi.n	800a8e2 <_dtoa_r+0xa82>
 800a980:	4633      	mov	r3, r6
 800a982:	461e      	mov	r6, r3
 800a984:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a988:	2a30      	cmp	r2, #48	@ 0x30
 800a98a:	d0fa      	beq.n	800a982 <_dtoa_r+0xb22>
 800a98c:	e4b5      	b.n	800a2fa <_dtoa_r+0x49a>
 800a98e:	459a      	cmp	sl, r3
 800a990:	d1a8      	bne.n	800a8e4 <_dtoa_r+0xa84>
 800a992:	2331      	movs	r3, #49	@ 0x31
 800a994:	f108 0801 	add.w	r8, r8, #1
 800a998:	f88a 3000 	strb.w	r3, [sl]
 800a99c:	e4ad      	b.n	800a2fa <_dtoa_r+0x49a>
 800a99e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a9a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a9fc <_dtoa_r+0xb9c>
 800a9a4:	b11b      	cbz	r3, 800a9ae <_dtoa_r+0xb4e>
 800a9a6:	f10a 0308 	add.w	r3, sl, #8
 800a9aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a9ac:	6013      	str	r3, [r2, #0]
 800a9ae:	4650      	mov	r0, sl
 800a9b0:	b017      	add	sp, #92	@ 0x5c
 800a9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b6:	9b07      	ldr	r3, [sp, #28]
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	f77f ae2e 	ble.w	800a61a <_dtoa_r+0x7ba>
 800a9be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9c0:	9308      	str	r3, [sp, #32]
 800a9c2:	2001      	movs	r0, #1
 800a9c4:	e64d      	b.n	800a662 <_dtoa_r+0x802>
 800a9c6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ca:	f77f aed9 	ble.w	800a780 <_dtoa_r+0x920>
 800a9ce:	4656      	mov	r6, sl
 800a9d0:	9802      	ldr	r0, [sp, #8]
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	f7ff f9ba 	bl	8009d4c <quorem>
 800a9d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a9dc:	f806 3b01 	strb.w	r3, [r6], #1
 800a9e0:	eba6 020a 	sub.w	r2, r6, sl
 800a9e4:	4593      	cmp	fp, r2
 800a9e6:	ddb4      	ble.n	800a952 <_dtoa_r+0xaf2>
 800a9e8:	9902      	ldr	r1, [sp, #8]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	220a      	movs	r2, #10
 800a9ee:	4648      	mov	r0, r9
 800a9f0:	f000 fcb4 	bl	800b35c <__multadd>
 800a9f4:	9002      	str	r0, [sp, #8]
 800a9f6:	e7eb      	b.n	800a9d0 <_dtoa_r+0xb70>
 800a9f8:	0800cff0 	.word	0x0800cff0
 800a9fc:	0800cf8b 	.word	0x0800cf8b

0800aa00 <_free_r>:
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	4605      	mov	r5, r0
 800aa04:	2900      	cmp	r1, #0
 800aa06:	d041      	beq.n	800aa8c <_free_r+0x8c>
 800aa08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa0c:	1f0c      	subs	r4, r1, #4
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	bfb8      	it	lt
 800aa12:	18e4      	addlt	r4, r4, r3
 800aa14:	f000 fc34 	bl	800b280 <__malloc_lock>
 800aa18:	4a1d      	ldr	r2, [pc, #116]	@ (800aa90 <_free_r+0x90>)
 800aa1a:	6813      	ldr	r3, [r2, #0]
 800aa1c:	b933      	cbnz	r3, 800aa2c <_free_r+0x2c>
 800aa1e:	6063      	str	r3, [r4, #4]
 800aa20:	6014      	str	r4, [r2, #0]
 800aa22:	4628      	mov	r0, r5
 800aa24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa28:	f000 bc30 	b.w	800b28c <__malloc_unlock>
 800aa2c:	42a3      	cmp	r3, r4
 800aa2e:	d908      	bls.n	800aa42 <_free_r+0x42>
 800aa30:	6820      	ldr	r0, [r4, #0]
 800aa32:	1821      	adds	r1, r4, r0
 800aa34:	428b      	cmp	r3, r1
 800aa36:	bf01      	itttt	eq
 800aa38:	6819      	ldreq	r1, [r3, #0]
 800aa3a:	685b      	ldreq	r3, [r3, #4]
 800aa3c:	1809      	addeq	r1, r1, r0
 800aa3e:	6021      	streq	r1, [r4, #0]
 800aa40:	e7ed      	b.n	800aa1e <_free_r+0x1e>
 800aa42:	461a      	mov	r2, r3
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	b10b      	cbz	r3, 800aa4c <_free_r+0x4c>
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	d9fa      	bls.n	800aa42 <_free_r+0x42>
 800aa4c:	6811      	ldr	r1, [r2, #0]
 800aa4e:	1850      	adds	r0, r2, r1
 800aa50:	42a0      	cmp	r0, r4
 800aa52:	d10b      	bne.n	800aa6c <_free_r+0x6c>
 800aa54:	6820      	ldr	r0, [r4, #0]
 800aa56:	4401      	add	r1, r0
 800aa58:	1850      	adds	r0, r2, r1
 800aa5a:	4283      	cmp	r3, r0
 800aa5c:	6011      	str	r1, [r2, #0]
 800aa5e:	d1e0      	bne.n	800aa22 <_free_r+0x22>
 800aa60:	6818      	ldr	r0, [r3, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	6053      	str	r3, [r2, #4]
 800aa66:	4408      	add	r0, r1
 800aa68:	6010      	str	r0, [r2, #0]
 800aa6a:	e7da      	b.n	800aa22 <_free_r+0x22>
 800aa6c:	d902      	bls.n	800aa74 <_free_r+0x74>
 800aa6e:	230c      	movs	r3, #12
 800aa70:	602b      	str	r3, [r5, #0]
 800aa72:	e7d6      	b.n	800aa22 <_free_r+0x22>
 800aa74:	6820      	ldr	r0, [r4, #0]
 800aa76:	1821      	adds	r1, r4, r0
 800aa78:	428b      	cmp	r3, r1
 800aa7a:	bf04      	itt	eq
 800aa7c:	6819      	ldreq	r1, [r3, #0]
 800aa7e:	685b      	ldreq	r3, [r3, #4]
 800aa80:	6063      	str	r3, [r4, #4]
 800aa82:	bf04      	itt	eq
 800aa84:	1809      	addeq	r1, r1, r0
 800aa86:	6021      	streq	r1, [r4, #0]
 800aa88:	6054      	str	r4, [r2, #4]
 800aa8a:	e7ca      	b.n	800aa22 <_free_r+0x22>
 800aa8c:	bd38      	pop	{r3, r4, r5, pc}
 800aa8e:	bf00      	nop
 800aa90:	20005a78 	.word	0x20005a78

0800aa94 <rshift>:
 800aa94:	6903      	ldr	r3, [r0, #16]
 800aa96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aaa2:	f100 0414 	add.w	r4, r0, #20
 800aaa6:	dd45      	ble.n	800ab34 <rshift+0xa0>
 800aaa8:	f011 011f 	ands.w	r1, r1, #31
 800aaac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aab0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aab4:	d10c      	bne.n	800aad0 <rshift+0x3c>
 800aab6:	f100 0710 	add.w	r7, r0, #16
 800aaba:	4629      	mov	r1, r5
 800aabc:	42b1      	cmp	r1, r6
 800aabe:	d334      	bcc.n	800ab2a <rshift+0x96>
 800aac0:	1a9b      	subs	r3, r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	1eea      	subs	r2, r5, #3
 800aac6:	4296      	cmp	r6, r2
 800aac8:	bf38      	it	cc
 800aaca:	2300      	movcc	r3, #0
 800aacc:	4423      	add	r3, r4
 800aace:	e015      	b.n	800aafc <rshift+0x68>
 800aad0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aad4:	f1c1 0820 	rsb	r8, r1, #32
 800aad8:	40cf      	lsrs	r7, r1
 800aada:	f105 0e04 	add.w	lr, r5, #4
 800aade:	46a1      	mov	r9, r4
 800aae0:	4576      	cmp	r6, lr
 800aae2:	46f4      	mov	ip, lr
 800aae4:	d815      	bhi.n	800ab12 <rshift+0x7e>
 800aae6:	1a9a      	subs	r2, r3, r2
 800aae8:	0092      	lsls	r2, r2, #2
 800aaea:	3a04      	subs	r2, #4
 800aaec:	3501      	adds	r5, #1
 800aaee:	42ae      	cmp	r6, r5
 800aaf0:	bf38      	it	cc
 800aaf2:	2200      	movcc	r2, #0
 800aaf4:	18a3      	adds	r3, r4, r2
 800aaf6:	50a7      	str	r7, [r4, r2]
 800aaf8:	b107      	cbz	r7, 800aafc <rshift+0x68>
 800aafa:	3304      	adds	r3, #4
 800aafc:	1b1a      	subs	r2, r3, r4
 800aafe:	42a3      	cmp	r3, r4
 800ab00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab04:	bf08      	it	eq
 800ab06:	2300      	moveq	r3, #0
 800ab08:	6102      	str	r2, [r0, #16]
 800ab0a:	bf08      	it	eq
 800ab0c:	6143      	streq	r3, [r0, #20]
 800ab0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab12:	f8dc c000 	ldr.w	ip, [ip]
 800ab16:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab1a:	ea4c 0707 	orr.w	r7, ip, r7
 800ab1e:	f849 7b04 	str.w	r7, [r9], #4
 800ab22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab26:	40cf      	lsrs	r7, r1
 800ab28:	e7da      	b.n	800aae0 <rshift+0x4c>
 800ab2a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab2e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab32:	e7c3      	b.n	800aabc <rshift+0x28>
 800ab34:	4623      	mov	r3, r4
 800ab36:	e7e1      	b.n	800aafc <rshift+0x68>

0800ab38 <__hexdig_fun>:
 800ab38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ab3c:	2b09      	cmp	r3, #9
 800ab3e:	d802      	bhi.n	800ab46 <__hexdig_fun+0xe>
 800ab40:	3820      	subs	r0, #32
 800ab42:	b2c0      	uxtb	r0, r0
 800ab44:	4770      	bx	lr
 800ab46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ab4a:	2b05      	cmp	r3, #5
 800ab4c:	d801      	bhi.n	800ab52 <__hexdig_fun+0x1a>
 800ab4e:	3847      	subs	r0, #71	@ 0x47
 800ab50:	e7f7      	b.n	800ab42 <__hexdig_fun+0xa>
 800ab52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ab56:	2b05      	cmp	r3, #5
 800ab58:	d801      	bhi.n	800ab5e <__hexdig_fun+0x26>
 800ab5a:	3827      	subs	r0, #39	@ 0x27
 800ab5c:	e7f1      	b.n	800ab42 <__hexdig_fun+0xa>
 800ab5e:	2000      	movs	r0, #0
 800ab60:	4770      	bx	lr
	...

0800ab64 <__gethex>:
 800ab64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab68:	b085      	sub	sp, #20
 800ab6a:	468a      	mov	sl, r1
 800ab6c:	9302      	str	r3, [sp, #8]
 800ab6e:	680b      	ldr	r3, [r1, #0]
 800ab70:	9001      	str	r0, [sp, #4]
 800ab72:	4690      	mov	r8, r2
 800ab74:	1c9c      	adds	r4, r3, #2
 800ab76:	46a1      	mov	r9, r4
 800ab78:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ab7c:	2830      	cmp	r0, #48	@ 0x30
 800ab7e:	d0fa      	beq.n	800ab76 <__gethex+0x12>
 800ab80:	eba9 0303 	sub.w	r3, r9, r3
 800ab84:	f1a3 0b02 	sub.w	fp, r3, #2
 800ab88:	f7ff ffd6 	bl	800ab38 <__hexdig_fun>
 800ab8c:	4605      	mov	r5, r0
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d168      	bne.n	800ac64 <__gethex+0x100>
 800ab92:	49a0      	ldr	r1, [pc, #640]	@ (800ae14 <__gethex+0x2b0>)
 800ab94:	2201      	movs	r2, #1
 800ab96:	4648      	mov	r0, r9
 800ab98:	f7fe ff57 	bl	8009a4a <strncmp>
 800ab9c:	4607      	mov	r7, r0
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d167      	bne.n	800ac72 <__gethex+0x10e>
 800aba2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aba6:	4626      	mov	r6, r4
 800aba8:	f7ff ffc6 	bl	800ab38 <__hexdig_fun>
 800abac:	2800      	cmp	r0, #0
 800abae:	d062      	beq.n	800ac76 <__gethex+0x112>
 800abb0:	4623      	mov	r3, r4
 800abb2:	7818      	ldrb	r0, [r3, #0]
 800abb4:	2830      	cmp	r0, #48	@ 0x30
 800abb6:	4699      	mov	r9, r3
 800abb8:	f103 0301 	add.w	r3, r3, #1
 800abbc:	d0f9      	beq.n	800abb2 <__gethex+0x4e>
 800abbe:	f7ff ffbb 	bl	800ab38 <__hexdig_fun>
 800abc2:	fab0 f580 	clz	r5, r0
 800abc6:	096d      	lsrs	r5, r5, #5
 800abc8:	f04f 0b01 	mov.w	fp, #1
 800abcc:	464a      	mov	r2, r9
 800abce:	4616      	mov	r6, r2
 800abd0:	3201      	adds	r2, #1
 800abd2:	7830      	ldrb	r0, [r6, #0]
 800abd4:	f7ff ffb0 	bl	800ab38 <__hexdig_fun>
 800abd8:	2800      	cmp	r0, #0
 800abda:	d1f8      	bne.n	800abce <__gethex+0x6a>
 800abdc:	498d      	ldr	r1, [pc, #564]	@ (800ae14 <__gethex+0x2b0>)
 800abde:	2201      	movs	r2, #1
 800abe0:	4630      	mov	r0, r6
 800abe2:	f7fe ff32 	bl	8009a4a <strncmp>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d13f      	bne.n	800ac6a <__gethex+0x106>
 800abea:	b944      	cbnz	r4, 800abfe <__gethex+0x9a>
 800abec:	1c74      	adds	r4, r6, #1
 800abee:	4622      	mov	r2, r4
 800abf0:	4616      	mov	r6, r2
 800abf2:	3201      	adds	r2, #1
 800abf4:	7830      	ldrb	r0, [r6, #0]
 800abf6:	f7ff ff9f 	bl	800ab38 <__hexdig_fun>
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d1f8      	bne.n	800abf0 <__gethex+0x8c>
 800abfe:	1ba4      	subs	r4, r4, r6
 800ac00:	00a7      	lsls	r7, r4, #2
 800ac02:	7833      	ldrb	r3, [r6, #0]
 800ac04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ac08:	2b50      	cmp	r3, #80	@ 0x50
 800ac0a:	d13e      	bne.n	800ac8a <__gethex+0x126>
 800ac0c:	7873      	ldrb	r3, [r6, #1]
 800ac0e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ac10:	d033      	beq.n	800ac7a <__gethex+0x116>
 800ac12:	2b2d      	cmp	r3, #45	@ 0x2d
 800ac14:	d034      	beq.n	800ac80 <__gethex+0x11c>
 800ac16:	1c71      	adds	r1, r6, #1
 800ac18:	2400      	movs	r4, #0
 800ac1a:	7808      	ldrb	r0, [r1, #0]
 800ac1c:	f7ff ff8c 	bl	800ab38 <__hexdig_fun>
 800ac20:	1e43      	subs	r3, r0, #1
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b18      	cmp	r3, #24
 800ac26:	d830      	bhi.n	800ac8a <__gethex+0x126>
 800ac28:	f1a0 0210 	sub.w	r2, r0, #16
 800ac2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac30:	f7ff ff82 	bl	800ab38 <__hexdig_fun>
 800ac34:	f100 3cff 	add.w	ip, r0, #4294967295
 800ac38:	fa5f fc8c 	uxtb.w	ip, ip
 800ac3c:	f1bc 0f18 	cmp.w	ip, #24
 800ac40:	f04f 030a 	mov.w	r3, #10
 800ac44:	d91e      	bls.n	800ac84 <__gethex+0x120>
 800ac46:	b104      	cbz	r4, 800ac4a <__gethex+0xe6>
 800ac48:	4252      	negs	r2, r2
 800ac4a:	4417      	add	r7, r2
 800ac4c:	f8ca 1000 	str.w	r1, [sl]
 800ac50:	b1ed      	cbz	r5, 800ac8e <__gethex+0x12a>
 800ac52:	f1bb 0f00 	cmp.w	fp, #0
 800ac56:	bf0c      	ite	eq
 800ac58:	2506      	moveq	r5, #6
 800ac5a:	2500      	movne	r5, #0
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	b005      	add	sp, #20
 800ac60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac64:	2500      	movs	r5, #0
 800ac66:	462c      	mov	r4, r5
 800ac68:	e7b0      	b.n	800abcc <__gethex+0x68>
 800ac6a:	2c00      	cmp	r4, #0
 800ac6c:	d1c7      	bne.n	800abfe <__gethex+0x9a>
 800ac6e:	4627      	mov	r7, r4
 800ac70:	e7c7      	b.n	800ac02 <__gethex+0x9e>
 800ac72:	464e      	mov	r6, r9
 800ac74:	462f      	mov	r7, r5
 800ac76:	2501      	movs	r5, #1
 800ac78:	e7c3      	b.n	800ac02 <__gethex+0x9e>
 800ac7a:	2400      	movs	r4, #0
 800ac7c:	1cb1      	adds	r1, r6, #2
 800ac7e:	e7cc      	b.n	800ac1a <__gethex+0xb6>
 800ac80:	2401      	movs	r4, #1
 800ac82:	e7fb      	b.n	800ac7c <__gethex+0x118>
 800ac84:	fb03 0002 	mla	r0, r3, r2, r0
 800ac88:	e7ce      	b.n	800ac28 <__gethex+0xc4>
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	e7de      	b.n	800ac4c <__gethex+0xe8>
 800ac8e:	eba6 0309 	sub.w	r3, r6, r9
 800ac92:	3b01      	subs	r3, #1
 800ac94:	4629      	mov	r1, r5
 800ac96:	2b07      	cmp	r3, #7
 800ac98:	dc0a      	bgt.n	800acb0 <__gethex+0x14c>
 800ac9a:	9801      	ldr	r0, [sp, #4]
 800ac9c:	f000 fafc 	bl	800b298 <_Balloc>
 800aca0:	4604      	mov	r4, r0
 800aca2:	b940      	cbnz	r0, 800acb6 <__gethex+0x152>
 800aca4:	4b5c      	ldr	r3, [pc, #368]	@ (800ae18 <__gethex+0x2b4>)
 800aca6:	4602      	mov	r2, r0
 800aca8:	21e4      	movs	r1, #228	@ 0xe4
 800acaa:	485c      	ldr	r0, [pc, #368]	@ (800ae1c <__gethex+0x2b8>)
 800acac:	f7ff f830 	bl	8009d10 <__assert_func>
 800acb0:	3101      	adds	r1, #1
 800acb2:	105b      	asrs	r3, r3, #1
 800acb4:	e7ef      	b.n	800ac96 <__gethex+0x132>
 800acb6:	f100 0a14 	add.w	sl, r0, #20
 800acba:	2300      	movs	r3, #0
 800acbc:	4655      	mov	r5, sl
 800acbe:	469b      	mov	fp, r3
 800acc0:	45b1      	cmp	r9, r6
 800acc2:	d337      	bcc.n	800ad34 <__gethex+0x1d0>
 800acc4:	f845 bb04 	str.w	fp, [r5], #4
 800acc8:	eba5 050a 	sub.w	r5, r5, sl
 800accc:	10ad      	asrs	r5, r5, #2
 800acce:	6125      	str	r5, [r4, #16]
 800acd0:	4658      	mov	r0, fp
 800acd2:	f000 fbd3 	bl	800b47c <__hi0bits>
 800acd6:	016d      	lsls	r5, r5, #5
 800acd8:	f8d8 6000 	ldr.w	r6, [r8]
 800acdc:	1a2d      	subs	r5, r5, r0
 800acde:	42b5      	cmp	r5, r6
 800ace0:	dd54      	ble.n	800ad8c <__gethex+0x228>
 800ace2:	1bad      	subs	r5, r5, r6
 800ace4:	4629      	mov	r1, r5
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 ff5f 	bl	800bbaa <__any_on>
 800acec:	4681      	mov	r9, r0
 800acee:	b178      	cbz	r0, 800ad10 <__gethex+0x1ac>
 800acf0:	1e6b      	subs	r3, r5, #1
 800acf2:	1159      	asrs	r1, r3, #5
 800acf4:	f003 021f 	and.w	r2, r3, #31
 800acf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800acfc:	f04f 0901 	mov.w	r9, #1
 800ad00:	fa09 f202 	lsl.w	r2, r9, r2
 800ad04:	420a      	tst	r2, r1
 800ad06:	d003      	beq.n	800ad10 <__gethex+0x1ac>
 800ad08:	454b      	cmp	r3, r9
 800ad0a:	dc36      	bgt.n	800ad7a <__gethex+0x216>
 800ad0c:	f04f 0902 	mov.w	r9, #2
 800ad10:	4629      	mov	r1, r5
 800ad12:	4620      	mov	r0, r4
 800ad14:	f7ff febe 	bl	800aa94 <rshift>
 800ad18:	442f      	add	r7, r5
 800ad1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad1e:	42bb      	cmp	r3, r7
 800ad20:	da42      	bge.n	800ada8 <__gethex+0x244>
 800ad22:	9801      	ldr	r0, [sp, #4]
 800ad24:	4621      	mov	r1, r4
 800ad26:	f000 faf7 	bl	800b318 <_Bfree>
 800ad2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	25a3      	movs	r5, #163	@ 0xa3
 800ad32:	e793      	b.n	800ac5c <__gethex+0xf8>
 800ad34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ad38:	2a2e      	cmp	r2, #46	@ 0x2e
 800ad3a:	d012      	beq.n	800ad62 <__gethex+0x1fe>
 800ad3c:	2b20      	cmp	r3, #32
 800ad3e:	d104      	bne.n	800ad4a <__gethex+0x1e6>
 800ad40:	f845 bb04 	str.w	fp, [r5], #4
 800ad44:	f04f 0b00 	mov.w	fp, #0
 800ad48:	465b      	mov	r3, fp
 800ad4a:	7830      	ldrb	r0, [r6, #0]
 800ad4c:	9303      	str	r3, [sp, #12]
 800ad4e:	f7ff fef3 	bl	800ab38 <__hexdig_fun>
 800ad52:	9b03      	ldr	r3, [sp, #12]
 800ad54:	f000 000f 	and.w	r0, r0, #15
 800ad58:	4098      	lsls	r0, r3
 800ad5a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ad5e:	3304      	adds	r3, #4
 800ad60:	e7ae      	b.n	800acc0 <__gethex+0x15c>
 800ad62:	45b1      	cmp	r9, r6
 800ad64:	d8ea      	bhi.n	800ad3c <__gethex+0x1d8>
 800ad66:	492b      	ldr	r1, [pc, #172]	@ (800ae14 <__gethex+0x2b0>)
 800ad68:	9303      	str	r3, [sp, #12]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	f7fe fe6c 	bl	8009a4a <strncmp>
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d1e1      	bne.n	800ad3c <__gethex+0x1d8>
 800ad78:	e7a2      	b.n	800acc0 <__gethex+0x15c>
 800ad7a:	1ea9      	subs	r1, r5, #2
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 ff14 	bl	800bbaa <__any_on>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d0c2      	beq.n	800ad0c <__gethex+0x1a8>
 800ad86:	f04f 0903 	mov.w	r9, #3
 800ad8a:	e7c1      	b.n	800ad10 <__gethex+0x1ac>
 800ad8c:	da09      	bge.n	800ada2 <__gethex+0x23e>
 800ad8e:	1b75      	subs	r5, r6, r5
 800ad90:	4621      	mov	r1, r4
 800ad92:	9801      	ldr	r0, [sp, #4]
 800ad94:	462a      	mov	r2, r5
 800ad96:	f000 fccf 	bl	800b738 <__lshift>
 800ad9a:	1b7f      	subs	r7, r7, r5
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	f100 0a14 	add.w	sl, r0, #20
 800ada2:	f04f 0900 	mov.w	r9, #0
 800ada6:	e7b8      	b.n	800ad1a <__gethex+0x1b6>
 800ada8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800adac:	42bd      	cmp	r5, r7
 800adae:	dd6f      	ble.n	800ae90 <__gethex+0x32c>
 800adb0:	1bed      	subs	r5, r5, r7
 800adb2:	42ae      	cmp	r6, r5
 800adb4:	dc34      	bgt.n	800ae20 <__gethex+0x2bc>
 800adb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d022      	beq.n	800ae04 <__gethex+0x2a0>
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	d024      	beq.n	800ae0c <__gethex+0x2a8>
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d115      	bne.n	800adf2 <__gethex+0x28e>
 800adc6:	42ae      	cmp	r6, r5
 800adc8:	d113      	bne.n	800adf2 <__gethex+0x28e>
 800adca:	2e01      	cmp	r6, #1
 800adcc:	d10b      	bne.n	800ade6 <__gethex+0x282>
 800adce:	9a02      	ldr	r2, [sp, #8]
 800add0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	2301      	movs	r3, #1
 800add8:	6123      	str	r3, [r4, #16]
 800adda:	f8ca 3000 	str.w	r3, [sl]
 800adde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ade0:	2562      	movs	r5, #98	@ 0x62
 800ade2:	601c      	str	r4, [r3, #0]
 800ade4:	e73a      	b.n	800ac5c <__gethex+0xf8>
 800ade6:	1e71      	subs	r1, r6, #1
 800ade8:	4620      	mov	r0, r4
 800adea:	f000 fede 	bl	800bbaa <__any_on>
 800adee:	2800      	cmp	r0, #0
 800adf0:	d1ed      	bne.n	800adce <__gethex+0x26a>
 800adf2:	9801      	ldr	r0, [sp, #4]
 800adf4:	4621      	mov	r1, r4
 800adf6:	f000 fa8f 	bl	800b318 <_Bfree>
 800adfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adfc:	2300      	movs	r3, #0
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	2550      	movs	r5, #80	@ 0x50
 800ae02:	e72b      	b.n	800ac5c <__gethex+0xf8>
 800ae04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1f3      	bne.n	800adf2 <__gethex+0x28e>
 800ae0a:	e7e0      	b.n	800adce <__gethex+0x26a>
 800ae0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1dd      	bne.n	800adce <__gethex+0x26a>
 800ae12:	e7ee      	b.n	800adf2 <__gethex+0x28e>
 800ae14:	0800cea0 	.word	0x0800cea0
 800ae18:	0800cff0 	.word	0x0800cff0
 800ae1c:	0800d001 	.word	0x0800d001
 800ae20:	1e6f      	subs	r7, r5, #1
 800ae22:	f1b9 0f00 	cmp.w	r9, #0
 800ae26:	d130      	bne.n	800ae8a <__gethex+0x326>
 800ae28:	b127      	cbz	r7, 800ae34 <__gethex+0x2d0>
 800ae2a:	4639      	mov	r1, r7
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f000 febc 	bl	800bbaa <__any_on>
 800ae32:	4681      	mov	r9, r0
 800ae34:	117a      	asrs	r2, r7, #5
 800ae36:	2301      	movs	r3, #1
 800ae38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ae3c:	f007 071f 	and.w	r7, r7, #31
 800ae40:	40bb      	lsls	r3, r7
 800ae42:	4213      	tst	r3, r2
 800ae44:	4629      	mov	r1, r5
 800ae46:	4620      	mov	r0, r4
 800ae48:	bf18      	it	ne
 800ae4a:	f049 0902 	orrne.w	r9, r9, #2
 800ae4e:	f7ff fe21 	bl	800aa94 <rshift>
 800ae52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ae56:	1b76      	subs	r6, r6, r5
 800ae58:	2502      	movs	r5, #2
 800ae5a:	f1b9 0f00 	cmp.w	r9, #0
 800ae5e:	d047      	beq.n	800aef0 <__gethex+0x38c>
 800ae60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d015      	beq.n	800ae94 <__gethex+0x330>
 800ae68:	2b03      	cmp	r3, #3
 800ae6a:	d017      	beq.n	800ae9c <__gethex+0x338>
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d109      	bne.n	800ae84 <__gethex+0x320>
 800ae70:	f019 0f02 	tst.w	r9, #2
 800ae74:	d006      	beq.n	800ae84 <__gethex+0x320>
 800ae76:	f8da 3000 	ldr.w	r3, [sl]
 800ae7a:	ea49 0903 	orr.w	r9, r9, r3
 800ae7e:	f019 0f01 	tst.w	r9, #1
 800ae82:	d10e      	bne.n	800aea2 <__gethex+0x33e>
 800ae84:	f045 0510 	orr.w	r5, r5, #16
 800ae88:	e032      	b.n	800aef0 <__gethex+0x38c>
 800ae8a:	f04f 0901 	mov.w	r9, #1
 800ae8e:	e7d1      	b.n	800ae34 <__gethex+0x2d0>
 800ae90:	2501      	movs	r5, #1
 800ae92:	e7e2      	b.n	800ae5a <__gethex+0x2f6>
 800ae94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae96:	f1c3 0301 	rsb	r3, r3, #1
 800ae9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d0f0      	beq.n	800ae84 <__gethex+0x320>
 800aea2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aea6:	f104 0314 	add.w	r3, r4, #20
 800aeaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aeae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aeb2:	f04f 0c00 	mov.w	ip, #0
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aebc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aec0:	d01b      	beq.n	800aefa <__gethex+0x396>
 800aec2:	3201      	adds	r2, #1
 800aec4:	6002      	str	r2, [r0, #0]
 800aec6:	2d02      	cmp	r5, #2
 800aec8:	f104 0314 	add.w	r3, r4, #20
 800aecc:	d13c      	bne.n	800af48 <__gethex+0x3e4>
 800aece:	f8d8 2000 	ldr.w	r2, [r8]
 800aed2:	3a01      	subs	r2, #1
 800aed4:	42b2      	cmp	r2, r6
 800aed6:	d109      	bne.n	800aeec <__gethex+0x388>
 800aed8:	1171      	asrs	r1, r6, #5
 800aeda:	2201      	movs	r2, #1
 800aedc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aee0:	f006 061f 	and.w	r6, r6, #31
 800aee4:	fa02 f606 	lsl.w	r6, r2, r6
 800aee8:	421e      	tst	r6, r3
 800aeea:	d13a      	bne.n	800af62 <__gethex+0x3fe>
 800aeec:	f045 0520 	orr.w	r5, r5, #32
 800aef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aef2:	601c      	str	r4, [r3, #0]
 800aef4:	9b02      	ldr	r3, [sp, #8]
 800aef6:	601f      	str	r7, [r3, #0]
 800aef8:	e6b0      	b.n	800ac5c <__gethex+0xf8>
 800aefa:	4299      	cmp	r1, r3
 800aefc:	f843 cc04 	str.w	ip, [r3, #-4]
 800af00:	d8d9      	bhi.n	800aeb6 <__gethex+0x352>
 800af02:	68a3      	ldr	r3, [r4, #8]
 800af04:	459b      	cmp	fp, r3
 800af06:	db17      	blt.n	800af38 <__gethex+0x3d4>
 800af08:	6861      	ldr	r1, [r4, #4]
 800af0a:	9801      	ldr	r0, [sp, #4]
 800af0c:	3101      	adds	r1, #1
 800af0e:	f000 f9c3 	bl	800b298 <_Balloc>
 800af12:	4681      	mov	r9, r0
 800af14:	b918      	cbnz	r0, 800af1e <__gethex+0x3ba>
 800af16:	4b1a      	ldr	r3, [pc, #104]	@ (800af80 <__gethex+0x41c>)
 800af18:	4602      	mov	r2, r0
 800af1a:	2184      	movs	r1, #132	@ 0x84
 800af1c:	e6c5      	b.n	800acaa <__gethex+0x146>
 800af1e:	6922      	ldr	r2, [r4, #16]
 800af20:	3202      	adds	r2, #2
 800af22:	f104 010c 	add.w	r1, r4, #12
 800af26:	0092      	lsls	r2, r2, #2
 800af28:	300c      	adds	r0, #12
 800af2a:	f7fe feda 	bl	8009ce2 <memcpy>
 800af2e:	4621      	mov	r1, r4
 800af30:	9801      	ldr	r0, [sp, #4]
 800af32:	f000 f9f1 	bl	800b318 <_Bfree>
 800af36:	464c      	mov	r4, r9
 800af38:	6923      	ldr	r3, [r4, #16]
 800af3a:	1c5a      	adds	r2, r3, #1
 800af3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af40:	6122      	str	r2, [r4, #16]
 800af42:	2201      	movs	r2, #1
 800af44:	615a      	str	r2, [r3, #20]
 800af46:	e7be      	b.n	800aec6 <__gethex+0x362>
 800af48:	6922      	ldr	r2, [r4, #16]
 800af4a:	455a      	cmp	r2, fp
 800af4c:	dd0b      	ble.n	800af66 <__gethex+0x402>
 800af4e:	2101      	movs	r1, #1
 800af50:	4620      	mov	r0, r4
 800af52:	f7ff fd9f 	bl	800aa94 <rshift>
 800af56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af5a:	3701      	adds	r7, #1
 800af5c:	42bb      	cmp	r3, r7
 800af5e:	f6ff aee0 	blt.w	800ad22 <__gethex+0x1be>
 800af62:	2501      	movs	r5, #1
 800af64:	e7c2      	b.n	800aeec <__gethex+0x388>
 800af66:	f016 061f 	ands.w	r6, r6, #31
 800af6a:	d0fa      	beq.n	800af62 <__gethex+0x3fe>
 800af6c:	4453      	add	r3, sl
 800af6e:	f1c6 0620 	rsb	r6, r6, #32
 800af72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800af76:	f000 fa81 	bl	800b47c <__hi0bits>
 800af7a:	42b0      	cmp	r0, r6
 800af7c:	dbe7      	blt.n	800af4e <__gethex+0x3ea>
 800af7e:	e7f0      	b.n	800af62 <__gethex+0x3fe>
 800af80:	0800cff0 	.word	0x0800cff0

0800af84 <L_shift>:
 800af84:	f1c2 0208 	rsb	r2, r2, #8
 800af88:	0092      	lsls	r2, r2, #2
 800af8a:	b570      	push	{r4, r5, r6, lr}
 800af8c:	f1c2 0620 	rsb	r6, r2, #32
 800af90:	6843      	ldr	r3, [r0, #4]
 800af92:	6804      	ldr	r4, [r0, #0]
 800af94:	fa03 f506 	lsl.w	r5, r3, r6
 800af98:	432c      	orrs	r4, r5
 800af9a:	40d3      	lsrs	r3, r2
 800af9c:	6004      	str	r4, [r0, #0]
 800af9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800afa2:	4288      	cmp	r0, r1
 800afa4:	d3f4      	bcc.n	800af90 <L_shift+0xc>
 800afa6:	bd70      	pop	{r4, r5, r6, pc}

0800afa8 <__match>:
 800afa8:	b530      	push	{r4, r5, lr}
 800afaa:	6803      	ldr	r3, [r0, #0]
 800afac:	3301      	adds	r3, #1
 800afae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afb2:	b914      	cbnz	r4, 800afba <__match+0x12>
 800afb4:	6003      	str	r3, [r0, #0]
 800afb6:	2001      	movs	r0, #1
 800afb8:	bd30      	pop	{r4, r5, pc}
 800afba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800afc2:	2d19      	cmp	r5, #25
 800afc4:	bf98      	it	ls
 800afc6:	3220      	addls	r2, #32
 800afc8:	42a2      	cmp	r2, r4
 800afca:	d0f0      	beq.n	800afae <__match+0x6>
 800afcc:	2000      	movs	r0, #0
 800afce:	e7f3      	b.n	800afb8 <__match+0x10>

0800afd0 <__hexnan>:
 800afd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd4:	680b      	ldr	r3, [r1, #0]
 800afd6:	6801      	ldr	r1, [r0, #0]
 800afd8:	115e      	asrs	r6, r3, #5
 800afda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800afde:	f013 031f 	ands.w	r3, r3, #31
 800afe2:	b087      	sub	sp, #28
 800afe4:	bf18      	it	ne
 800afe6:	3604      	addne	r6, #4
 800afe8:	2500      	movs	r5, #0
 800afea:	1f37      	subs	r7, r6, #4
 800afec:	4682      	mov	sl, r0
 800afee:	4690      	mov	r8, r2
 800aff0:	9301      	str	r3, [sp, #4]
 800aff2:	f846 5c04 	str.w	r5, [r6, #-4]
 800aff6:	46b9      	mov	r9, r7
 800aff8:	463c      	mov	r4, r7
 800affa:	9502      	str	r5, [sp, #8]
 800affc:	46ab      	mov	fp, r5
 800affe:	784a      	ldrb	r2, [r1, #1]
 800b000:	1c4b      	adds	r3, r1, #1
 800b002:	9303      	str	r3, [sp, #12]
 800b004:	b342      	cbz	r2, 800b058 <__hexnan+0x88>
 800b006:	4610      	mov	r0, r2
 800b008:	9105      	str	r1, [sp, #20]
 800b00a:	9204      	str	r2, [sp, #16]
 800b00c:	f7ff fd94 	bl	800ab38 <__hexdig_fun>
 800b010:	2800      	cmp	r0, #0
 800b012:	d151      	bne.n	800b0b8 <__hexnan+0xe8>
 800b014:	9a04      	ldr	r2, [sp, #16]
 800b016:	9905      	ldr	r1, [sp, #20]
 800b018:	2a20      	cmp	r2, #32
 800b01a:	d818      	bhi.n	800b04e <__hexnan+0x7e>
 800b01c:	9b02      	ldr	r3, [sp, #8]
 800b01e:	459b      	cmp	fp, r3
 800b020:	dd13      	ble.n	800b04a <__hexnan+0x7a>
 800b022:	454c      	cmp	r4, r9
 800b024:	d206      	bcs.n	800b034 <__hexnan+0x64>
 800b026:	2d07      	cmp	r5, #7
 800b028:	dc04      	bgt.n	800b034 <__hexnan+0x64>
 800b02a:	462a      	mov	r2, r5
 800b02c:	4649      	mov	r1, r9
 800b02e:	4620      	mov	r0, r4
 800b030:	f7ff ffa8 	bl	800af84 <L_shift>
 800b034:	4544      	cmp	r4, r8
 800b036:	d952      	bls.n	800b0de <__hexnan+0x10e>
 800b038:	2300      	movs	r3, #0
 800b03a:	f1a4 0904 	sub.w	r9, r4, #4
 800b03e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b042:	f8cd b008 	str.w	fp, [sp, #8]
 800b046:	464c      	mov	r4, r9
 800b048:	461d      	mov	r5, r3
 800b04a:	9903      	ldr	r1, [sp, #12]
 800b04c:	e7d7      	b.n	800affe <__hexnan+0x2e>
 800b04e:	2a29      	cmp	r2, #41	@ 0x29
 800b050:	d157      	bne.n	800b102 <__hexnan+0x132>
 800b052:	3102      	adds	r1, #2
 800b054:	f8ca 1000 	str.w	r1, [sl]
 800b058:	f1bb 0f00 	cmp.w	fp, #0
 800b05c:	d051      	beq.n	800b102 <__hexnan+0x132>
 800b05e:	454c      	cmp	r4, r9
 800b060:	d206      	bcs.n	800b070 <__hexnan+0xa0>
 800b062:	2d07      	cmp	r5, #7
 800b064:	dc04      	bgt.n	800b070 <__hexnan+0xa0>
 800b066:	462a      	mov	r2, r5
 800b068:	4649      	mov	r1, r9
 800b06a:	4620      	mov	r0, r4
 800b06c:	f7ff ff8a 	bl	800af84 <L_shift>
 800b070:	4544      	cmp	r4, r8
 800b072:	d936      	bls.n	800b0e2 <__hexnan+0x112>
 800b074:	f1a8 0204 	sub.w	r2, r8, #4
 800b078:	4623      	mov	r3, r4
 800b07a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b07e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b082:	429f      	cmp	r7, r3
 800b084:	d2f9      	bcs.n	800b07a <__hexnan+0xaa>
 800b086:	1b3b      	subs	r3, r7, r4
 800b088:	f023 0303 	bic.w	r3, r3, #3
 800b08c:	3304      	adds	r3, #4
 800b08e:	3401      	adds	r4, #1
 800b090:	3e03      	subs	r6, #3
 800b092:	42b4      	cmp	r4, r6
 800b094:	bf88      	it	hi
 800b096:	2304      	movhi	r3, #4
 800b098:	4443      	add	r3, r8
 800b09a:	2200      	movs	r2, #0
 800b09c:	f843 2b04 	str.w	r2, [r3], #4
 800b0a0:	429f      	cmp	r7, r3
 800b0a2:	d2fb      	bcs.n	800b09c <__hexnan+0xcc>
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	b91b      	cbnz	r3, 800b0b0 <__hexnan+0xe0>
 800b0a8:	4547      	cmp	r7, r8
 800b0aa:	d128      	bne.n	800b0fe <__hexnan+0x12e>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	2005      	movs	r0, #5
 800b0b2:	b007      	add	sp, #28
 800b0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b8:	3501      	adds	r5, #1
 800b0ba:	2d08      	cmp	r5, #8
 800b0bc:	f10b 0b01 	add.w	fp, fp, #1
 800b0c0:	dd06      	ble.n	800b0d0 <__hexnan+0x100>
 800b0c2:	4544      	cmp	r4, r8
 800b0c4:	d9c1      	bls.n	800b04a <__hexnan+0x7a>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0cc:	2501      	movs	r5, #1
 800b0ce:	3c04      	subs	r4, #4
 800b0d0:	6822      	ldr	r2, [r4, #0]
 800b0d2:	f000 000f 	and.w	r0, r0, #15
 800b0d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b0da:	6020      	str	r0, [r4, #0]
 800b0dc:	e7b5      	b.n	800b04a <__hexnan+0x7a>
 800b0de:	2508      	movs	r5, #8
 800b0e0:	e7b3      	b.n	800b04a <__hexnan+0x7a>
 800b0e2:	9b01      	ldr	r3, [sp, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d0dd      	beq.n	800b0a4 <__hexnan+0xd4>
 800b0e8:	f1c3 0320 	rsb	r3, r3, #32
 800b0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f0:	40da      	lsrs	r2, r3
 800b0f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b0fc:	e7d2      	b.n	800b0a4 <__hexnan+0xd4>
 800b0fe:	3f04      	subs	r7, #4
 800b100:	e7d0      	b.n	800b0a4 <__hexnan+0xd4>
 800b102:	2004      	movs	r0, #4
 800b104:	e7d5      	b.n	800b0b2 <__hexnan+0xe2>
	...

0800b108 <malloc>:
 800b108:	4b02      	ldr	r3, [pc, #8]	@ (800b114 <malloc+0xc>)
 800b10a:	4601      	mov	r1, r0
 800b10c:	6818      	ldr	r0, [r3, #0]
 800b10e:	f000 b825 	b.w	800b15c <_malloc_r>
 800b112:	bf00      	nop
 800b114:	200003dc 	.word	0x200003dc

0800b118 <sbrk_aligned>:
 800b118:	b570      	push	{r4, r5, r6, lr}
 800b11a:	4e0f      	ldr	r6, [pc, #60]	@ (800b158 <sbrk_aligned+0x40>)
 800b11c:	460c      	mov	r4, r1
 800b11e:	6831      	ldr	r1, [r6, #0]
 800b120:	4605      	mov	r5, r0
 800b122:	b911      	cbnz	r1, 800b12a <sbrk_aligned+0x12>
 800b124:	f000 ff9e 	bl	800c064 <_sbrk_r>
 800b128:	6030      	str	r0, [r6, #0]
 800b12a:	4621      	mov	r1, r4
 800b12c:	4628      	mov	r0, r5
 800b12e:	f000 ff99 	bl	800c064 <_sbrk_r>
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	d103      	bne.n	800b13e <sbrk_aligned+0x26>
 800b136:	f04f 34ff 	mov.w	r4, #4294967295
 800b13a:	4620      	mov	r0, r4
 800b13c:	bd70      	pop	{r4, r5, r6, pc}
 800b13e:	1cc4      	adds	r4, r0, #3
 800b140:	f024 0403 	bic.w	r4, r4, #3
 800b144:	42a0      	cmp	r0, r4
 800b146:	d0f8      	beq.n	800b13a <sbrk_aligned+0x22>
 800b148:	1a21      	subs	r1, r4, r0
 800b14a:	4628      	mov	r0, r5
 800b14c:	f000 ff8a 	bl	800c064 <_sbrk_r>
 800b150:	3001      	adds	r0, #1
 800b152:	d1f2      	bne.n	800b13a <sbrk_aligned+0x22>
 800b154:	e7ef      	b.n	800b136 <sbrk_aligned+0x1e>
 800b156:	bf00      	nop
 800b158:	20005a74 	.word	0x20005a74

0800b15c <_malloc_r>:
 800b15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b160:	1ccd      	adds	r5, r1, #3
 800b162:	f025 0503 	bic.w	r5, r5, #3
 800b166:	3508      	adds	r5, #8
 800b168:	2d0c      	cmp	r5, #12
 800b16a:	bf38      	it	cc
 800b16c:	250c      	movcc	r5, #12
 800b16e:	2d00      	cmp	r5, #0
 800b170:	4606      	mov	r6, r0
 800b172:	db01      	blt.n	800b178 <_malloc_r+0x1c>
 800b174:	42a9      	cmp	r1, r5
 800b176:	d904      	bls.n	800b182 <_malloc_r+0x26>
 800b178:	230c      	movs	r3, #12
 800b17a:	6033      	str	r3, [r6, #0]
 800b17c:	2000      	movs	r0, #0
 800b17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b258 <_malloc_r+0xfc>
 800b186:	f000 f87b 	bl	800b280 <__malloc_lock>
 800b18a:	f8d8 3000 	ldr.w	r3, [r8]
 800b18e:	461c      	mov	r4, r3
 800b190:	bb44      	cbnz	r4, 800b1e4 <_malloc_r+0x88>
 800b192:	4629      	mov	r1, r5
 800b194:	4630      	mov	r0, r6
 800b196:	f7ff ffbf 	bl	800b118 <sbrk_aligned>
 800b19a:	1c43      	adds	r3, r0, #1
 800b19c:	4604      	mov	r4, r0
 800b19e:	d158      	bne.n	800b252 <_malloc_r+0xf6>
 800b1a0:	f8d8 4000 	ldr.w	r4, [r8]
 800b1a4:	4627      	mov	r7, r4
 800b1a6:	2f00      	cmp	r7, #0
 800b1a8:	d143      	bne.n	800b232 <_malloc_r+0xd6>
 800b1aa:	2c00      	cmp	r4, #0
 800b1ac:	d04b      	beq.n	800b246 <_malloc_r+0xea>
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	4639      	mov	r1, r7
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	eb04 0903 	add.w	r9, r4, r3
 800b1b8:	f000 ff54 	bl	800c064 <_sbrk_r>
 800b1bc:	4581      	cmp	r9, r0
 800b1be:	d142      	bne.n	800b246 <_malloc_r+0xea>
 800b1c0:	6821      	ldr	r1, [r4, #0]
 800b1c2:	1a6d      	subs	r5, r5, r1
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f7ff ffa6 	bl	800b118 <sbrk_aligned>
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d03a      	beq.n	800b246 <_malloc_r+0xea>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	442b      	add	r3, r5
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b1da:	685a      	ldr	r2, [r3, #4]
 800b1dc:	bb62      	cbnz	r2, 800b238 <_malloc_r+0xdc>
 800b1de:	f8c8 7000 	str.w	r7, [r8]
 800b1e2:	e00f      	b.n	800b204 <_malloc_r+0xa8>
 800b1e4:	6822      	ldr	r2, [r4, #0]
 800b1e6:	1b52      	subs	r2, r2, r5
 800b1e8:	d420      	bmi.n	800b22c <_malloc_r+0xd0>
 800b1ea:	2a0b      	cmp	r2, #11
 800b1ec:	d917      	bls.n	800b21e <_malloc_r+0xc2>
 800b1ee:	1961      	adds	r1, r4, r5
 800b1f0:	42a3      	cmp	r3, r4
 800b1f2:	6025      	str	r5, [r4, #0]
 800b1f4:	bf18      	it	ne
 800b1f6:	6059      	strne	r1, [r3, #4]
 800b1f8:	6863      	ldr	r3, [r4, #4]
 800b1fa:	bf08      	it	eq
 800b1fc:	f8c8 1000 	streq.w	r1, [r8]
 800b200:	5162      	str	r2, [r4, r5]
 800b202:	604b      	str	r3, [r1, #4]
 800b204:	4630      	mov	r0, r6
 800b206:	f000 f841 	bl	800b28c <__malloc_unlock>
 800b20a:	f104 000b 	add.w	r0, r4, #11
 800b20e:	1d23      	adds	r3, r4, #4
 800b210:	f020 0007 	bic.w	r0, r0, #7
 800b214:	1ac2      	subs	r2, r0, r3
 800b216:	bf1c      	itt	ne
 800b218:	1a1b      	subne	r3, r3, r0
 800b21a:	50a3      	strne	r3, [r4, r2]
 800b21c:	e7af      	b.n	800b17e <_malloc_r+0x22>
 800b21e:	6862      	ldr	r2, [r4, #4]
 800b220:	42a3      	cmp	r3, r4
 800b222:	bf0c      	ite	eq
 800b224:	f8c8 2000 	streq.w	r2, [r8]
 800b228:	605a      	strne	r2, [r3, #4]
 800b22a:	e7eb      	b.n	800b204 <_malloc_r+0xa8>
 800b22c:	4623      	mov	r3, r4
 800b22e:	6864      	ldr	r4, [r4, #4]
 800b230:	e7ae      	b.n	800b190 <_malloc_r+0x34>
 800b232:	463c      	mov	r4, r7
 800b234:	687f      	ldr	r7, [r7, #4]
 800b236:	e7b6      	b.n	800b1a6 <_malloc_r+0x4a>
 800b238:	461a      	mov	r2, r3
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	42a3      	cmp	r3, r4
 800b23e:	d1fb      	bne.n	800b238 <_malloc_r+0xdc>
 800b240:	2300      	movs	r3, #0
 800b242:	6053      	str	r3, [r2, #4]
 800b244:	e7de      	b.n	800b204 <_malloc_r+0xa8>
 800b246:	230c      	movs	r3, #12
 800b248:	6033      	str	r3, [r6, #0]
 800b24a:	4630      	mov	r0, r6
 800b24c:	f000 f81e 	bl	800b28c <__malloc_unlock>
 800b250:	e794      	b.n	800b17c <_malloc_r+0x20>
 800b252:	6005      	str	r5, [r0, #0]
 800b254:	e7d6      	b.n	800b204 <_malloc_r+0xa8>
 800b256:	bf00      	nop
 800b258:	20005a78 	.word	0x20005a78

0800b25c <__ascii_mbtowc>:
 800b25c:	b082      	sub	sp, #8
 800b25e:	b901      	cbnz	r1, 800b262 <__ascii_mbtowc+0x6>
 800b260:	a901      	add	r1, sp, #4
 800b262:	b142      	cbz	r2, 800b276 <__ascii_mbtowc+0x1a>
 800b264:	b14b      	cbz	r3, 800b27a <__ascii_mbtowc+0x1e>
 800b266:	7813      	ldrb	r3, [r2, #0]
 800b268:	600b      	str	r3, [r1, #0]
 800b26a:	7812      	ldrb	r2, [r2, #0]
 800b26c:	1e10      	subs	r0, r2, #0
 800b26e:	bf18      	it	ne
 800b270:	2001      	movne	r0, #1
 800b272:	b002      	add	sp, #8
 800b274:	4770      	bx	lr
 800b276:	4610      	mov	r0, r2
 800b278:	e7fb      	b.n	800b272 <__ascii_mbtowc+0x16>
 800b27a:	f06f 0001 	mvn.w	r0, #1
 800b27e:	e7f8      	b.n	800b272 <__ascii_mbtowc+0x16>

0800b280 <__malloc_lock>:
 800b280:	4801      	ldr	r0, [pc, #4]	@ (800b288 <__malloc_lock+0x8>)
 800b282:	f7fe bd24 	b.w	8009cce <__retarget_lock_acquire_recursive>
 800b286:	bf00      	nop
 800b288:	20005a70 	.word	0x20005a70

0800b28c <__malloc_unlock>:
 800b28c:	4801      	ldr	r0, [pc, #4]	@ (800b294 <__malloc_unlock+0x8>)
 800b28e:	f7fe bd1f 	b.w	8009cd0 <__retarget_lock_release_recursive>
 800b292:	bf00      	nop
 800b294:	20005a70 	.word	0x20005a70

0800b298 <_Balloc>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	69c6      	ldr	r6, [r0, #28]
 800b29c:	4604      	mov	r4, r0
 800b29e:	460d      	mov	r5, r1
 800b2a0:	b976      	cbnz	r6, 800b2c0 <_Balloc+0x28>
 800b2a2:	2010      	movs	r0, #16
 800b2a4:	f7ff ff30 	bl	800b108 <malloc>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	61e0      	str	r0, [r4, #28]
 800b2ac:	b920      	cbnz	r0, 800b2b8 <_Balloc+0x20>
 800b2ae:	4b18      	ldr	r3, [pc, #96]	@ (800b310 <_Balloc+0x78>)
 800b2b0:	4818      	ldr	r0, [pc, #96]	@ (800b314 <_Balloc+0x7c>)
 800b2b2:	216b      	movs	r1, #107	@ 0x6b
 800b2b4:	f7fe fd2c 	bl	8009d10 <__assert_func>
 800b2b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2bc:	6006      	str	r6, [r0, #0]
 800b2be:	60c6      	str	r6, [r0, #12]
 800b2c0:	69e6      	ldr	r6, [r4, #28]
 800b2c2:	68f3      	ldr	r3, [r6, #12]
 800b2c4:	b183      	cbz	r3, 800b2e8 <_Balloc+0x50>
 800b2c6:	69e3      	ldr	r3, [r4, #28]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2ce:	b9b8      	cbnz	r0, 800b300 <_Balloc+0x68>
 800b2d0:	2101      	movs	r1, #1
 800b2d2:	fa01 f605 	lsl.w	r6, r1, r5
 800b2d6:	1d72      	adds	r2, r6, #5
 800b2d8:	0092      	lsls	r2, r2, #2
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 fed9 	bl	800c092 <_calloc_r>
 800b2e0:	b160      	cbz	r0, 800b2fc <_Balloc+0x64>
 800b2e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2e6:	e00e      	b.n	800b306 <_Balloc+0x6e>
 800b2e8:	2221      	movs	r2, #33	@ 0x21
 800b2ea:	2104      	movs	r1, #4
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f000 fed0 	bl	800c092 <_calloc_r>
 800b2f2:	69e3      	ldr	r3, [r4, #28]
 800b2f4:	60f0      	str	r0, [r6, #12]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1e4      	bne.n	800b2c6 <_Balloc+0x2e>
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	6802      	ldr	r2, [r0, #0]
 800b302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b306:	2300      	movs	r3, #0
 800b308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b30c:	e7f7      	b.n	800b2fe <_Balloc+0x66>
 800b30e:	bf00      	nop
 800b310:	0800ced6 	.word	0x0800ced6
 800b314:	0800d061 	.word	0x0800d061

0800b318 <_Bfree>:
 800b318:	b570      	push	{r4, r5, r6, lr}
 800b31a:	69c6      	ldr	r6, [r0, #28]
 800b31c:	4605      	mov	r5, r0
 800b31e:	460c      	mov	r4, r1
 800b320:	b976      	cbnz	r6, 800b340 <_Bfree+0x28>
 800b322:	2010      	movs	r0, #16
 800b324:	f7ff fef0 	bl	800b108 <malloc>
 800b328:	4602      	mov	r2, r0
 800b32a:	61e8      	str	r0, [r5, #28]
 800b32c:	b920      	cbnz	r0, 800b338 <_Bfree+0x20>
 800b32e:	4b09      	ldr	r3, [pc, #36]	@ (800b354 <_Bfree+0x3c>)
 800b330:	4809      	ldr	r0, [pc, #36]	@ (800b358 <_Bfree+0x40>)
 800b332:	218f      	movs	r1, #143	@ 0x8f
 800b334:	f7fe fcec 	bl	8009d10 <__assert_func>
 800b338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b33c:	6006      	str	r6, [r0, #0]
 800b33e:	60c6      	str	r6, [r0, #12]
 800b340:	b13c      	cbz	r4, 800b352 <_Bfree+0x3a>
 800b342:	69eb      	ldr	r3, [r5, #28]
 800b344:	6862      	ldr	r2, [r4, #4]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b34c:	6021      	str	r1, [r4, #0]
 800b34e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b352:	bd70      	pop	{r4, r5, r6, pc}
 800b354:	0800ced6 	.word	0x0800ced6
 800b358:	0800d061 	.word	0x0800d061

0800b35c <__multadd>:
 800b35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b360:	690d      	ldr	r5, [r1, #16]
 800b362:	4607      	mov	r7, r0
 800b364:	460c      	mov	r4, r1
 800b366:	461e      	mov	r6, r3
 800b368:	f101 0c14 	add.w	ip, r1, #20
 800b36c:	2000      	movs	r0, #0
 800b36e:	f8dc 3000 	ldr.w	r3, [ip]
 800b372:	b299      	uxth	r1, r3
 800b374:	fb02 6101 	mla	r1, r2, r1, r6
 800b378:	0c1e      	lsrs	r6, r3, #16
 800b37a:	0c0b      	lsrs	r3, r1, #16
 800b37c:	fb02 3306 	mla	r3, r2, r6, r3
 800b380:	b289      	uxth	r1, r1
 800b382:	3001      	adds	r0, #1
 800b384:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b388:	4285      	cmp	r5, r0
 800b38a:	f84c 1b04 	str.w	r1, [ip], #4
 800b38e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b392:	dcec      	bgt.n	800b36e <__multadd+0x12>
 800b394:	b30e      	cbz	r6, 800b3da <__multadd+0x7e>
 800b396:	68a3      	ldr	r3, [r4, #8]
 800b398:	42ab      	cmp	r3, r5
 800b39a:	dc19      	bgt.n	800b3d0 <__multadd+0x74>
 800b39c:	6861      	ldr	r1, [r4, #4]
 800b39e:	4638      	mov	r0, r7
 800b3a0:	3101      	adds	r1, #1
 800b3a2:	f7ff ff79 	bl	800b298 <_Balloc>
 800b3a6:	4680      	mov	r8, r0
 800b3a8:	b928      	cbnz	r0, 800b3b6 <__multadd+0x5a>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e0 <__multadd+0x84>)
 800b3ae:	480d      	ldr	r0, [pc, #52]	@ (800b3e4 <__multadd+0x88>)
 800b3b0:	21ba      	movs	r1, #186	@ 0xba
 800b3b2:	f7fe fcad 	bl	8009d10 <__assert_func>
 800b3b6:	6922      	ldr	r2, [r4, #16]
 800b3b8:	3202      	adds	r2, #2
 800b3ba:	f104 010c 	add.w	r1, r4, #12
 800b3be:	0092      	lsls	r2, r2, #2
 800b3c0:	300c      	adds	r0, #12
 800b3c2:	f7fe fc8e 	bl	8009ce2 <memcpy>
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7ff ffa5 	bl	800b318 <_Bfree>
 800b3ce:	4644      	mov	r4, r8
 800b3d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3d4:	3501      	adds	r5, #1
 800b3d6:	615e      	str	r6, [r3, #20]
 800b3d8:	6125      	str	r5, [r4, #16]
 800b3da:	4620      	mov	r0, r4
 800b3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3e0:	0800cff0 	.word	0x0800cff0
 800b3e4:	0800d061 	.word	0x0800d061

0800b3e8 <__s2b>:
 800b3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3ec:	460c      	mov	r4, r1
 800b3ee:	4615      	mov	r5, r2
 800b3f0:	461f      	mov	r7, r3
 800b3f2:	2209      	movs	r2, #9
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	2201      	movs	r2, #1
 800b400:	429a      	cmp	r2, r3
 800b402:	db09      	blt.n	800b418 <__s2b+0x30>
 800b404:	4630      	mov	r0, r6
 800b406:	f7ff ff47 	bl	800b298 <_Balloc>
 800b40a:	b940      	cbnz	r0, 800b41e <__s2b+0x36>
 800b40c:	4602      	mov	r2, r0
 800b40e:	4b19      	ldr	r3, [pc, #100]	@ (800b474 <__s2b+0x8c>)
 800b410:	4819      	ldr	r0, [pc, #100]	@ (800b478 <__s2b+0x90>)
 800b412:	21d3      	movs	r1, #211	@ 0xd3
 800b414:	f7fe fc7c 	bl	8009d10 <__assert_func>
 800b418:	0052      	lsls	r2, r2, #1
 800b41a:	3101      	adds	r1, #1
 800b41c:	e7f0      	b.n	800b400 <__s2b+0x18>
 800b41e:	9b08      	ldr	r3, [sp, #32]
 800b420:	6143      	str	r3, [r0, #20]
 800b422:	2d09      	cmp	r5, #9
 800b424:	f04f 0301 	mov.w	r3, #1
 800b428:	6103      	str	r3, [r0, #16]
 800b42a:	dd16      	ble.n	800b45a <__s2b+0x72>
 800b42c:	f104 0909 	add.w	r9, r4, #9
 800b430:	46c8      	mov	r8, r9
 800b432:	442c      	add	r4, r5
 800b434:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b438:	4601      	mov	r1, r0
 800b43a:	3b30      	subs	r3, #48	@ 0x30
 800b43c:	220a      	movs	r2, #10
 800b43e:	4630      	mov	r0, r6
 800b440:	f7ff ff8c 	bl	800b35c <__multadd>
 800b444:	45a0      	cmp	r8, r4
 800b446:	d1f5      	bne.n	800b434 <__s2b+0x4c>
 800b448:	f1a5 0408 	sub.w	r4, r5, #8
 800b44c:	444c      	add	r4, r9
 800b44e:	1b2d      	subs	r5, r5, r4
 800b450:	1963      	adds	r3, r4, r5
 800b452:	42bb      	cmp	r3, r7
 800b454:	db04      	blt.n	800b460 <__s2b+0x78>
 800b456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b45a:	340a      	adds	r4, #10
 800b45c:	2509      	movs	r5, #9
 800b45e:	e7f6      	b.n	800b44e <__s2b+0x66>
 800b460:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b464:	4601      	mov	r1, r0
 800b466:	3b30      	subs	r3, #48	@ 0x30
 800b468:	220a      	movs	r2, #10
 800b46a:	4630      	mov	r0, r6
 800b46c:	f7ff ff76 	bl	800b35c <__multadd>
 800b470:	e7ee      	b.n	800b450 <__s2b+0x68>
 800b472:	bf00      	nop
 800b474:	0800cff0 	.word	0x0800cff0
 800b478:	0800d061 	.word	0x0800d061

0800b47c <__hi0bits>:
 800b47c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b480:	4603      	mov	r3, r0
 800b482:	bf36      	itet	cc
 800b484:	0403      	lslcc	r3, r0, #16
 800b486:	2000      	movcs	r0, #0
 800b488:	2010      	movcc	r0, #16
 800b48a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b48e:	bf3c      	itt	cc
 800b490:	021b      	lslcc	r3, r3, #8
 800b492:	3008      	addcc	r0, #8
 800b494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b498:	bf3c      	itt	cc
 800b49a:	011b      	lslcc	r3, r3, #4
 800b49c:	3004      	addcc	r0, #4
 800b49e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4a2:	bf3c      	itt	cc
 800b4a4:	009b      	lslcc	r3, r3, #2
 800b4a6:	3002      	addcc	r0, #2
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	db05      	blt.n	800b4b8 <__hi0bits+0x3c>
 800b4ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b4b0:	f100 0001 	add.w	r0, r0, #1
 800b4b4:	bf08      	it	eq
 800b4b6:	2020      	moveq	r0, #32
 800b4b8:	4770      	bx	lr

0800b4ba <__lo0bits>:
 800b4ba:	6803      	ldr	r3, [r0, #0]
 800b4bc:	4602      	mov	r2, r0
 800b4be:	f013 0007 	ands.w	r0, r3, #7
 800b4c2:	d00b      	beq.n	800b4dc <__lo0bits+0x22>
 800b4c4:	07d9      	lsls	r1, r3, #31
 800b4c6:	d421      	bmi.n	800b50c <__lo0bits+0x52>
 800b4c8:	0798      	lsls	r0, r3, #30
 800b4ca:	bf49      	itett	mi
 800b4cc:	085b      	lsrmi	r3, r3, #1
 800b4ce:	089b      	lsrpl	r3, r3, #2
 800b4d0:	2001      	movmi	r0, #1
 800b4d2:	6013      	strmi	r3, [r2, #0]
 800b4d4:	bf5c      	itt	pl
 800b4d6:	6013      	strpl	r3, [r2, #0]
 800b4d8:	2002      	movpl	r0, #2
 800b4da:	4770      	bx	lr
 800b4dc:	b299      	uxth	r1, r3
 800b4de:	b909      	cbnz	r1, 800b4e4 <__lo0bits+0x2a>
 800b4e0:	0c1b      	lsrs	r3, r3, #16
 800b4e2:	2010      	movs	r0, #16
 800b4e4:	b2d9      	uxtb	r1, r3
 800b4e6:	b909      	cbnz	r1, 800b4ec <__lo0bits+0x32>
 800b4e8:	3008      	adds	r0, #8
 800b4ea:	0a1b      	lsrs	r3, r3, #8
 800b4ec:	0719      	lsls	r1, r3, #28
 800b4ee:	bf04      	itt	eq
 800b4f0:	091b      	lsreq	r3, r3, #4
 800b4f2:	3004      	addeq	r0, #4
 800b4f4:	0799      	lsls	r1, r3, #30
 800b4f6:	bf04      	itt	eq
 800b4f8:	089b      	lsreq	r3, r3, #2
 800b4fa:	3002      	addeq	r0, #2
 800b4fc:	07d9      	lsls	r1, r3, #31
 800b4fe:	d403      	bmi.n	800b508 <__lo0bits+0x4e>
 800b500:	085b      	lsrs	r3, r3, #1
 800b502:	f100 0001 	add.w	r0, r0, #1
 800b506:	d003      	beq.n	800b510 <__lo0bits+0x56>
 800b508:	6013      	str	r3, [r2, #0]
 800b50a:	4770      	bx	lr
 800b50c:	2000      	movs	r0, #0
 800b50e:	4770      	bx	lr
 800b510:	2020      	movs	r0, #32
 800b512:	4770      	bx	lr

0800b514 <__i2b>:
 800b514:	b510      	push	{r4, lr}
 800b516:	460c      	mov	r4, r1
 800b518:	2101      	movs	r1, #1
 800b51a:	f7ff febd 	bl	800b298 <_Balloc>
 800b51e:	4602      	mov	r2, r0
 800b520:	b928      	cbnz	r0, 800b52e <__i2b+0x1a>
 800b522:	4b05      	ldr	r3, [pc, #20]	@ (800b538 <__i2b+0x24>)
 800b524:	4805      	ldr	r0, [pc, #20]	@ (800b53c <__i2b+0x28>)
 800b526:	f240 1145 	movw	r1, #325	@ 0x145
 800b52a:	f7fe fbf1 	bl	8009d10 <__assert_func>
 800b52e:	2301      	movs	r3, #1
 800b530:	6144      	str	r4, [r0, #20]
 800b532:	6103      	str	r3, [r0, #16]
 800b534:	bd10      	pop	{r4, pc}
 800b536:	bf00      	nop
 800b538:	0800cff0 	.word	0x0800cff0
 800b53c:	0800d061 	.word	0x0800d061

0800b540 <__multiply>:
 800b540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	4617      	mov	r7, r2
 800b546:	690a      	ldr	r2, [r1, #16]
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	bfa8      	it	ge
 800b54e:	463b      	movge	r3, r7
 800b550:	4689      	mov	r9, r1
 800b552:	bfa4      	itt	ge
 800b554:	460f      	movge	r7, r1
 800b556:	4699      	movge	r9, r3
 800b558:	693d      	ldr	r5, [r7, #16]
 800b55a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	6879      	ldr	r1, [r7, #4]
 800b562:	eb05 060a 	add.w	r6, r5, sl
 800b566:	42b3      	cmp	r3, r6
 800b568:	b085      	sub	sp, #20
 800b56a:	bfb8      	it	lt
 800b56c:	3101      	addlt	r1, #1
 800b56e:	f7ff fe93 	bl	800b298 <_Balloc>
 800b572:	b930      	cbnz	r0, 800b582 <__multiply+0x42>
 800b574:	4602      	mov	r2, r0
 800b576:	4b41      	ldr	r3, [pc, #260]	@ (800b67c <__multiply+0x13c>)
 800b578:	4841      	ldr	r0, [pc, #260]	@ (800b680 <__multiply+0x140>)
 800b57a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b57e:	f7fe fbc7 	bl	8009d10 <__assert_func>
 800b582:	f100 0414 	add.w	r4, r0, #20
 800b586:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b58a:	4623      	mov	r3, r4
 800b58c:	2200      	movs	r2, #0
 800b58e:	4573      	cmp	r3, lr
 800b590:	d320      	bcc.n	800b5d4 <__multiply+0x94>
 800b592:	f107 0814 	add.w	r8, r7, #20
 800b596:	f109 0114 	add.w	r1, r9, #20
 800b59a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b59e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b5a2:	9302      	str	r3, [sp, #8]
 800b5a4:	1beb      	subs	r3, r5, r7
 800b5a6:	3b15      	subs	r3, #21
 800b5a8:	f023 0303 	bic.w	r3, r3, #3
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	3715      	adds	r7, #21
 800b5b0:	42bd      	cmp	r5, r7
 800b5b2:	bf38      	it	cc
 800b5b4:	2304      	movcc	r3, #4
 800b5b6:	9301      	str	r3, [sp, #4]
 800b5b8:	9b02      	ldr	r3, [sp, #8]
 800b5ba:	9103      	str	r1, [sp, #12]
 800b5bc:	428b      	cmp	r3, r1
 800b5be:	d80c      	bhi.n	800b5da <__multiply+0x9a>
 800b5c0:	2e00      	cmp	r6, #0
 800b5c2:	dd03      	ble.n	800b5cc <__multiply+0x8c>
 800b5c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d055      	beq.n	800b678 <__multiply+0x138>
 800b5cc:	6106      	str	r6, [r0, #16]
 800b5ce:	b005      	add	sp, #20
 800b5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d4:	f843 2b04 	str.w	r2, [r3], #4
 800b5d8:	e7d9      	b.n	800b58e <__multiply+0x4e>
 800b5da:	f8b1 a000 	ldrh.w	sl, [r1]
 800b5de:	f1ba 0f00 	cmp.w	sl, #0
 800b5e2:	d01f      	beq.n	800b624 <__multiply+0xe4>
 800b5e4:	46c4      	mov	ip, r8
 800b5e6:	46a1      	mov	r9, r4
 800b5e8:	2700      	movs	r7, #0
 800b5ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b5ee:	f8d9 3000 	ldr.w	r3, [r9]
 800b5f2:	fa1f fb82 	uxth.w	fp, r2
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b5fc:	443b      	add	r3, r7
 800b5fe:	f8d9 7000 	ldr.w	r7, [r9]
 800b602:	0c12      	lsrs	r2, r2, #16
 800b604:	0c3f      	lsrs	r7, r7, #16
 800b606:	fb0a 7202 	mla	r2, sl, r2, r7
 800b60a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b60e:	b29b      	uxth	r3, r3
 800b610:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b614:	4565      	cmp	r5, ip
 800b616:	f849 3b04 	str.w	r3, [r9], #4
 800b61a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b61e:	d8e4      	bhi.n	800b5ea <__multiply+0xaa>
 800b620:	9b01      	ldr	r3, [sp, #4]
 800b622:	50e7      	str	r7, [r4, r3]
 800b624:	9b03      	ldr	r3, [sp, #12]
 800b626:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b62a:	3104      	adds	r1, #4
 800b62c:	f1b9 0f00 	cmp.w	r9, #0
 800b630:	d020      	beq.n	800b674 <__multiply+0x134>
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	4647      	mov	r7, r8
 800b636:	46a4      	mov	ip, r4
 800b638:	f04f 0a00 	mov.w	sl, #0
 800b63c:	f8b7 b000 	ldrh.w	fp, [r7]
 800b640:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b644:	fb09 220b 	mla	r2, r9, fp, r2
 800b648:	4452      	add	r2, sl
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b650:	f84c 3b04 	str.w	r3, [ip], #4
 800b654:	f857 3b04 	ldr.w	r3, [r7], #4
 800b658:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b65c:	f8bc 3000 	ldrh.w	r3, [ip]
 800b660:	fb09 330a 	mla	r3, r9, sl, r3
 800b664:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b668:	42bd      	cmp	r5, r7
 800b66a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b66e:	d8e5      	bhi.n	800b63c <__multiply+0xfc>
 800b670:	9a01      	ldr	r2, [sp, #4]
 800b672:	50a3      	str	r3, [r4, r2]
 800b674:	3404      	adds	r4, #4
 800b676:	e79f      	b.n	800b5b8 <__multiply+0x78>
 800b678:	3e01      	subs	r6, #1
 800b67a:	e7a1      	b.n	800b5c0 <__multiply+0x80>
 800b67c:	0800cff0 	.word	0x0800cff0
 800b680:	0800d061 	.word	0x0800d061

0800b684 <__pow5mult>:
 800b684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b688:	4615      	mov	r5, r2
 800b68a:	f012 0203 	ands.w	r2, r2, #3
 800b68e:	4607      	mov	r7, r0
 800b690:	460e      	mov	r6, r1
 800b692:	d007      	beq.n	800b6a4 <__pow5mult+0x20>
 800b694:	4c25      	ldr	r4, [pc, #148]	@ (800b72c <__pow5mult+0xa8>)
 800b696:	3a01      	subs	r2, #1
 800b698:	2300      	movs	r3, #0
 800b69a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b69e:	f7ff fe5d 	bl	800b35c <__multadd>
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	10ad      	asrs	r5, r5, #2
 800b6a6:	d03d      	beq.n	800b724 <__pow5mult+0xa0>
 800b6a8:	69fc      	ldr	r4, [r7, #28]
 800b6aa:	b97c      	cbnz	r4, 800b6cc <__pow5mult+0x48>
 800b6ac:	2010      	movs	r0, #16
 800b6ae:	f7ff fd2b 	bl	800b108 <malloc>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	61f8      	str	r0, [r7, #28]
 800b6b6:	b928      	cbnz	r0, 800b6c4 <__pow5mult+0x40>
 800b6b8:	4b1d      	ldr	r3, [pc, #116]	@ (800b730 <__pow5mult+0xac>)
 800b6ba:	481e      	ldr	r0, [pc, #120]	@ (800b734 <__pow5mult+0xb0>)
 800b6bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b6c0:	f7fe fb26 	bl	8009d10 <__assert_func>
 800b6c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6c8:	6004      	str	r4, [r0, #0]
 800b6ca:	60c4      	str	r4, [r0, #12]
 800b6cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b6d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6d4:	b94c      	cbnz	r4, 800b6ea <__pow5mult+0x66>
 800b6d6:	f240 2171 	movw	r1, #625	@ 0x271
 800b6da:	4638      	mov	r0, r7
 800b6dc:	f7ff ff1a 	bl	800b514 <__i2b>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	6003      	str	r3, [r0, #0]
 800b6ea:	f04f 0900 	mov.w	r9, #0
 800b6ee:	07eb      	lsls	r3, r5, #31
 800b6f0:	d50a      	bpl.n	800b708 <__pow5mult+0x84>
 800b6f2:	4631      	mov	r1, r6
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	4638      	mov	r0, r7
 800b6f8:	f7ff ff22 	bl	800b540 <__multiply>
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	4680      	mov	r8, r0
 800b700:	4638      	mov	r0, r7
 800b702:	f7ff fe09 	bl	800b318 <_Bfree>
 800b706:	4646      	mov	r6, r8
 800b708:	106d      	asrs	r5, r5, #1
 800b70a:	d00b      	beq.n	800b724 <__pow5mult+0xa0>
 800b70c:	6820      	ldr	r0, [r4, #0]
 800b70e:	b938      	cbnz	r0, 800b720 <__pow5mult+0x9c>
 800b710:	4622      	mov	r2, r4
 800b712:	4621      	mov	r1, r4
 800b714:	4638      	mov	r0, r7
 800b716:	f7ff ff13 	bl	800b540 <__multiply>
 800b71a:	6020      	str	r0, [r4, #0]
 800b71c:	f8c0 9000 	str.w	r9, [r0]
 800b720:	4604      	mov	r4, r0
 800b722:	e7e4      	b.n	800b6ee <__pow5mult+0x6a>
 800b724:	4630      	mov	r0, r6
 800b726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b72a:	bf00      	nop
 800b72c:	0800d224 	.word	0x0800d224
 800b730:	0800ced6 	.word	0x0800ced6
 800b734:	0800d061 	.word	0x0800d061

0800b738 <__lshift>:
 800b738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b73c:	460c      	mov	r4, r1
 800b73e:	6849      	ldr	r1, [r1, #4]
 800b740:	6923      	ldr	r3, [r4, #16]
 800b742:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b746:	68a3      	ldr	r3, [r4, #8]
 800b748:	4607      	mov	r7, r0
 800b74a:	4691      	mov	r9, r2
 800b74c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b750:	f108 0601 	add.w	r6, r8, #1
 800b754:	42b3      	cmp	r3, r6
 800b756:	db0b      	blt.n	800b770 <__lshift+0x38>
 800b758:	4638      	mov	r0, r7
 800b75a:	f7ff fd9d 	bl	800b298 <_Balloc>
 800b75e:	4605      	mov	r5, r0
 800b760:	b948      	cbnz	r0, 800b776 <__lshift+0x3e>
 800b762:	4602      	mov	r2, r0
 800b764:	4b28      	ldr	r3, [pc, #160]	@ (800b808 <__lshift+0xd0>)
 800b766:	4829      	ldr	r0, [pc, #164]	@ (800b80c <__lshift+0xd4>)
 800b768:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b76c:	f7fe fad0 	bl	8009d10 <__assert_func>
 800b770:	3101      	adds	r1, #1
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	e7ee      	b.n	800b754 <__lshift+0x1c>
 800b776:	2300      	movs	r3, #0
 800b778:	f100 0114 	add.w	r1, r0, #20
 800b77c:	f100 0210 	add.w	r2, r0, #16
 800b780:	4618      	mov	r0, r3
 800b782:	4553      	cmp	r3, sl
 800b784:	db33      	blt.n	800b7ee <__lshift+0xb6>
 800b786:	6920      	ldr	r0, [r4, #16]
 800b788:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b78c:	f104 0314 	add.w	r3, r4, #20
 800b790:	f019 091f 	ands.w	r9, r9, #31
 800b794:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b798:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b79c:	d02b      	beq.n	800b7f6 <__lshift+0xbe>
 800b79e:	f1c9 0e20 	rsb	lr, r9, #32
 800b7a2:	468a      	mov	sl, r1
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	6818      	ldr	r0, [r3, #0]
 800b7a8:	fa00 f009 	lsl.w	r0, r0, r9
 800b7ac:	4310      	orrs	r0, r2
 800b7ae:	f84a 0b04 	str.w	r0, [sl], #4
 800b7b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7b6:	459c      	cmp	ip, r3
 800b7b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7bc:	d8f3      	bhi.n	800b7a6 <__lshift+0x6e>
 800b7be:	ebac 0304 	sub.w	r3, ip, r4
 800b7c2:	3b15      	subs	r3, #21
 800b7c4:	f023 0303 	bic.w	r3, r3, #3
 800b7c8:	3304      	adds	r3, #4
 800b7ca:	f104 0015 	add.w	r0, r4, #21
 800b7ce:	4560      	cmp	r0, ip
 800b7d0:	bf88      	it	hi
 800b7d2:	2304      	movhi	r3, #4
 800b7d4:	50ca      	str	r2, [r1, r3]
 800b7d6:	b10a      	cbz	r2, 800b7dc <__lshift+0xa4>
 800b7d8:	f108 0602 	add.w	r6, r8, #2
 800b7dc:	3e01      	subs	r6, #1
 800b7de:	4638      	mov	r0, r7
 800b7e0:	612e      	str	r6, [r5, #16]
 800b7e2:	4621      	mov	r1, r4
 800b7e4:	f7ff fd98 	bl	800b318 <_Bfree>
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	e7c5      	b.n	800b782 <__lshift+0x4a>
 800b7f6:	3904      	subs	r1, #4
 800b7f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b800:	459c      	cmp	ip, r3
 800b802:	d8f9      	bhi.n	800b7f8 <__lshift+0xc0>
 800b804:	e7ea      	b.n	800b7dc <__lshift+0xa4>
 800b806:	bf00      	nop
 800b808:	0800cff0 	.word	0x0800cff0
 800b80c:	0800d061 	.word	0x0800d061

0800b810 <__mcmp>:
 800b810:	690a      	ldr	r2, [r1, #16]
 800b812:	4603      	mov	r3, r0
 800b814:	6900      	ldr	r0, [r0, #16]
 800b816:	1a80      	subs	r0, r0, r2
 800b818:	b530      	push	{r4, r5, lr}
 800b81a:	d10e      	bne.n	800b83a <__mcmp+0x2a>
 800b81c:	3314      	adds	r3, #20
 800b81e:	3114      	adds	r1, #20
 800b820:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b824:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b828:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b82c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b830:	4295      	cmp	r5, r2
 800b832:	d003      	beq.n	800b83c <__mcmp+0x2c>
 800b834:	d205      	bcs.n	800b842 <__mcmp+0x32>
 800b836:	f04f 30ff 	mov.w	r0, #4294967295
 800b83a:	bd30      	pop	{r4, r5, pc}
 800b83c:	42a3      	cmp	r3, r4
 800b83e:	d3f3      	bcc.n	800b828 <__mcmp+0x18>
 800b840:	e7fb      	b.n	800b83a <__mcmp+0x2a>
 800b842:	2001      	movs	r0, #1
 800b844:	e7f9      	b.n	800b83a <__mcmp+0x2a>
	...

0800b848 <__mdiff>:
 800b848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	4689      	mov	r9, r1
 800b84e:	4606      	mov	r6, r0
 800b850:	4611      	mov	r1, r2
 800b852:	4648      	mov	r0, r9
 800b854:	4614      	mov	r4, r2
 800b856:	f7ff ffdb 	bl	800b810 <__mcmp>
 800b85a:	1e05      	subs	r5, r0, #0
 800b85c:	d112      	bne.n	800b884 <__mdiff+0x3c>
 800b85e:	4629      	mov	r1, r5
 800b860:	4630      	mov	r0, r6
 800b862:	f7ff fd19 	bl	800b298 <_Balloc>
 800b866:	4602      	mov	r2, r0
 800b868:	b928      	cbnz	r0, 800b876 <__mdiff+0x2e>
 800b86a:	4b3f      	ldr	r3, [pc, #252]	@ (800b968 <__mdiff+0x120>)
 800b86c:	f240 2137 	movw	r1, #567	@ 0x237
 800b870:	483e      	ldr	r0, [pc, #248]	@ (800b96c <__mdiff+0x124>)
 800b872:	f7fe fa4d 	bl	8009d10 <__assert_func>
 800b876:	2301      	movs	r3, #1
 800b878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b87c:	4610      	mov	r0, r2
 800b87e:	b003      	add	sp, #12
 800b880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b884:	bfbc      	itt	lt
 800b886:	464b      	movlt	r3, r9
 800b888:	46a1      	movlt	r9, r4
 800b88a:	4630      	mov	r0, r6
 800b88c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b890:	bfba      	itte	lt
 800b892:	461c      	movlt	r4, r3
 800b894:	2501      	movlt	r5, #1
 800b896:	2500      	movge	r5, #0
 800b898:	f7ff fcfe 	bl	800b298 <_Balloc>
 800b89c:	4602      	mov	r2, r0
 800b89e:	b918      	cbnz	r0, 800b8a8 <__mdiff+0x60>
 800b8a0:	4b31      	ldr	r3, [pc, #196]	@ (800b968 <__mdiff+0x120>)
 800b8a2:	f240 2145 	movw	r1, #581	@ 0x245
 800b8a6:	e7e3      	b.n	800b870 <__mdiff+0x28>
 800b8a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b8ac:	6926      	ldr	r6, [r4, #16]
 800b8ae:	60c5      	str	r5, [r0, #12]
 800b8b0:	f109 0310 	add.w	r3, r9, #16
 800b8b4:	f109 0514 	add.w	r5, r9, #20
 800b8b8:	f104 0e14 	add.w	lr, r4, #20
 800b8bc:	f100 0b14 	add.w	fp, r0, #20
 800b8c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b8c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b8c8:	9301      	str	r3, [sp, #4]
 800b8ca:	46d9      	mov	r9, fp
 800b8cc:	f04f 0c00 	mov.w	ip, #0
 800b8d0:	9b01      	ldr	r3, [sp, #4]
 800b8d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b8d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b8da:	9301      	str	r3, [sp, #4]
 800b8dc:	fa1f f38a 	uxth.w	r3, sl
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	b283      	uxth	r3, r0
 800b8e4:	1acb      	subs	r3, r1, r3
 800b8e6:	0c00      	lsrs	r0, r0, #16
 800b8e8:	4463      	add	r3, ip
 800b8ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b8ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b8f8:	4576      	cmp	r6, lr
 800b8fa:	f849 3b04 	str.w	r3, [r9], #4
 800b8fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b902:	d8e5      	bhi.n	800b8d0 <__mdiff+0x88>
 800b904:	1b33      	subs	r3, r6, r4
 800b906:	3b15      	subs	r3, #21
 800b908:	f023 0303 	bic.w	r3, r3, #3
 800b90c:	3415      	adds	r4, #21
 800b90e:	3304      	adds	r3, #4
 800b910:	42a6      	cmp	r6, r4
 800b912:	bf38      	it	cc
 800b914:	2304      	movcc	r3, #4
 800b916:	441d      	add	r5, r3
 800b918:	445b      	add	r3, fp
 800b91a:	461e      	mov	r6, r3
 800b91c:	462c      	mov	r4, r5
 800b91e:	4544      	cmp	r4, r8
 800b920:	d30e      	bcc.n	800b940 <__mdiff+0xf8>
 800b922:	f108 0103 	add.w	r1, r8, #3
 800b926:	1b49      	subs	r1, r1, r5
 800b928:	f021 0103 	bic.w	r1, r1, #3
 800b92c:	3d03      	subs	r5, #3
 800b92e:	45a8      	cmp	r8, r5
 800b930:	bf38      	it	cc
 800b932:	2100      	movcc	r1, #0
 800b934:	440b      	add	r3, r1
 800b936:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b93a:	b191      	cbz	r1, 800b962 <__mdiff+0x11a>
 800b93c:	6117      	str	r7, [r2, #16]
 800b93e:	e79d      	b.n	800b87c <__mdiff+0x34>
 800b940:	f854 1b04 	ldr.w	r1, [r4], #4
 800b944:	46e6      	mov	lr, ip
 800b946:	0c08      	lsrs	r0, r1, #16
 800b948:	fa1c fc81 	uxtah	ip, ip, r1
 800b94c:	4471      	add	r1, lr
 800b94e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b952:	b289      	uxth	r1, r1
 800b954:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b958:	f846 1b04 	str.w	r1, [r6], #4
 800b95c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b960:	e7dd      	b.n	800b91e <__mdiff+0xd6>
 800b962:	3f01      	subs	r7, #1
 800b964:	e7e7      	b.n	800b936 <__mdiff+0xee>
 800b966:	bf00      	nop
 800b968:	0800cff0 	.word	0x0800cff0
 800b96c:	0800d061 	.word	0x0800d061

0800b970 <__ulp>:
 800b970:	b082      	sub	sp, #8
 800b972:	ed8d 0b00 	vstr	d0, [sp]
 800b976:	9a01      	ldr	r2, [sp, #4]
 800b978:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b8 <__ulp+0x48>)
 800b97a:	4013      	ands	r3, r2
 800b97c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b980:	2b00      	cmp	r3, #0
 800b982:	dc08      	bgt.n	800b996 <__ulp+0x26>
 800b984:	425b      	negs	r3, r3
 800b986:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b98a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b98e:	da04      	bge.n	800b99a <__ulp+0x2a>
 800b990:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b994:	4113      	asrs	r3, r2
 800b996:	2200      	movs	r2, #0
 800b998:	e008      	b.n	800b9ac <__ulp+0x3c>
 800b99a:	f1a2 0314 	sub.w	r3, r2, #20
 800b99e:	2b1e      	cmp	r3, #30
 800b9a0:	bfda      	itte	le
 800b9a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b9a6:	40da      	lsrle	r2, r3
 800b9a8:	2201      	movgt	r2, #1
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	ec41 0b10 	vmov	d0, r0, r1
 800b9b4:	b002      	add	sp, #8
 800b9b6:	4770      	bx	lr
 800b9b8:	7ff00000 	.word	0x7ff00000

0800b9bc <__b2d>:
 800b9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c0:	6906      	ldr	r6, [r0, #16]
 800b9c2:	f100 0814 	add.w	r8, r0, #20
 800b9c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b9ca:	1f37      	subs	r7, r6, #4
 800b9cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b9d0:	4610      	mov	r0, r2
 800b9d2:	f7ff fd53 	bl	800b47c <__hi0bits>
 800b9d6:	f1c0 0320 	rsb	r3, r0, #32
 800b9da:	280a      	cmp	r0, #10
 800b9dc:	600b      	str	r3, [r1, #0]
 800b9de:	491b      	ldr	r1, [pc, #108]	@ (800ba4c <__b2d+0x90>)
 800b9e0:	dc15      	bgt.n	800ba0e <__b2d+0x52>
 800b9e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b9e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b9ea:	45b8      	cmp	r8, r7
 800b9ec:	ea43 0501 	orr.w	r5, r3, r1
 800b9f0:	bf34      	ite	cc
 800b9f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b9f6:	2300      	movcs	r3, #0
 800b9f8:	3015      	adds	r0, #21
 800b9fa:	fa02 f000 	lsl.w	r0, r2, r0
 800b9fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800ba02:	4303      	orrs	r3, r0
 800ba04:	461c      	mov	r4, r3
 800ba06:	ec45 4b10 	vmov	d0, r4, r5
 800ba0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba0e:	45b8      	cmp	r8, r7
 800ba10:	bf3a      	itte	cc
 800ba12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ba16:	f1a6 0708 	subcc.w	r7, r6, #8
 800ba1a:	2300      	movcs	r3, #0
 800ba1c:	380b      	subs	r0, #11
 800ba1e:	d012      	beq.n	800ba46 <__b2d+0x8a>
 800ba20:	f1c0 0120 	rsb	r1, r0, #32
 800ba24:	fa23 f401 	lsr.w	r4, r3, r1
 800ba28:	4082      	lsls	r2, r0
 800ba2a:	4322      	orrs	r2, r4
 800ba2c:	4547      	cmp	r7, r8
 800ba2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ba32:	bf8c      	ite	hi
 800ba34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ba38:	2200      	movls	r2, #0
 800ba3a:	4083      	lsls	r3, r0
 800ba3c:	40ca      	lsrs	r2, r1
 800ba3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ba42:	4313      	orrs	r3, r2
 800ba44:	e7de      	b.n	800ba04 <__b2d+0x48>
 800ba46:	ea42 0501 	orr.w	r5, r2, r1
 800ba4a:	e7db      	b.n	800ba04 <__b2d+0x48>
 800ba4c:	3ff00000 	.word	0x3ff00000

0800ba50 <__d2b>:
 800ba50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba54:	460f      	mov	r7, r1
 800ba56:	2101      	movs	r1, #1
 800ba58:	ec59 8b10 	vmov	r8, r9, d0
 800ba5c:	4616      	mov	r6, r2
 800ba5e:	f7ff fc1b 	bl	800b298 <_Balloc>
 800ba62:	4604      	mov	r4, r0
 800ba64:	b930      	cbnz	r0, 800ba74 <__d2b+0x24>
 800ba66:	4602      	mov	r2, r0
 800ba68:	4b23      	ldr	r3, [pc, #140]	@ (800baf8 <__d2b+0xa8>)
 800ba6a:	4824      	ldr	r0, [pc, #144]	@ (800bafc <__d2b+0xac>)
 800ba6c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba70:	f7fe f94e 	bl	8009d10 <__assert_func>
 800ba74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba7c:	b10d      	cbz	r5, 800ba82 <__d2b+0x32>
 800ba7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba82:	9301      	str	r3, [sp, #4]
 800ba84:	f1b8 0300 	subs.w	r3, r8, #0
 800ba88:	d023      	beq.n	800bad2 <__d2b+0x82>
 800ba8a:	4668      	mov	r0, sp
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	f7ff fd14 	bl	800b4ba <__lo0bits>
 800ba92:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba96:	b1d0      	cbz	r0, 800bace <__d2b+0x7e>
 800ba98:	f1c0 0320 	rsb	r3, r0, #32
 800ba9c:	fa02 f303 	lsl.w	r3, r2, r3
 800baa0:	430b      	orrs	r3, r1
 800baa2:	40c2      	lsrs	r2, r0
 800baa4:	6163      	str	r3, [r4, #20]
 800baa6:	9201      	str	r2, [sp, #4]
 800baa8:	9b01      	ldr	r3, [sp, #4]
 800baaa:	61a3      	str	r3, [r4, #24]
 800baac:	2b00      	cmp	r3, #0
 800baae:	bf0c      	ite	eq
 800bab0:	2201      	moveq	r2, #1
 800bab2:	2202      	movne	r2, #2
 800bab4:	6122      	str	r2, [r4, #16]
 800bab6:	b1a5      	cbz	r5, 800bae2 <__d2b+0x92>
 800bab8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800babc:	4405      	add	r5, r0
 800babe:	603d      	str	r5, [r7, #0]
 800bac0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bac4:	6030      	str	r0, [r6, #0]
 800bac6:	4620      	mov	r0, r4
 800bac8:	b003      	add	sp, #12
 800baca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bace:	6161      	str	r1, [r4, #20]
 800bad0:	e7ea      	b.n	800baa8 <__d2b+0x58>
 800bad2:	a801      	add	r0, sp, #4
 800bad4:	f7ff fcf1 	bl	800b4ba <__lo0bits>
 800bad8:	9b01      	ldr	r3, [sp, #4]
 800bada:	6163      	str	r3, [r4, #20]
 800badc:	3020      	adds	r0, #32
 800bade:	2201      	movs	r2, #1
 800bae0:	e7e8      	b.n	800bab4 <__d2b+0x64>
 800bae2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bae6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800baea:	6038      	str	r0, [r7, #0]
 800baec:	6918      	ldr	r0, [r3, #16]
 800baee:	f7ff fcc5 	bl	800b47c <__hi0bits>
 800baf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800baf6:	e7e5      	b.n	800bac4 <__d2b+0x74>
 800baf8:	0800cff0 	.word	0x0800cff0
 800bafc:	0800d061 	.word	0x0800d061

0800bb00 <__ratio>:
 800bb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb04:	b085      	sub	sp, #20
 800bb06:	e9cd 1000 	strd	r1, r0, [sp]
 800bb0a:	a902      	add	r1, sp, #8
 800bb0c:	f7ff ff56 	bl	800b9bc <__b2d>
 800bb10:	9800      	ldr	r0, [sp, #0]
 800bb12:	a903      	add	r1, sp, #12
 800bb14:	ec55 4b10 	vmov	r4, r5, d0
 800bb18:	f7ff ff50 	bl	800b9bc <__b2d>
 800bb1c:	9b01      	ldr	r3, [sp, #4]
 800bb1e:	6919      	ldr	r1, [r3, #16]
 800bb20:	9b00      	ldr	r3, [sp, #0]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	1ac9      	subs	r1, r1, r3
 800bb26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bb2a:	1a9b      	subs	r3, r3, r2
 800bb2c:	ec5b ab10 	vmov	sl, fp, d0
 800bb30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	bfce      	itee	gt
 800bb38:	462a      	movgt	r2, r5
 800bb3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb3e:	465a      	movle	r2, fp
 800bb40:	462f      	mov	r7, r5
 800bb42:	46d9      	mov	r9, fp
 800bb44:	bfcc      	ite	gt
 800bb46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bb4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bb4e:	464b      	mov	r3, r9
 800bb50:	4652      	mov	r2, sl
 800bb52:	4620      	mov	r0, r4
 800bb54:	4639      	mov	r1, r7
 800bb56:	f7f4 fe89 	bl	800086c <__aeabi_ddiv>
 800bb5a:	ec41 0b10 	vmov	d0, r0, r1
 800bb5e:	b005      	add	sp, #20
 800bb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb64 <__copybits>:
 800bb64:	3901      	subs	r1, #1
 800bb66:	b570      	push	{r4, r5, r6, lr}
 800bb68:	1149      	asrs	r1, r1, #5
 800bb6a:	6914      	ldr	r4, [r2, #16]
 800bb6c:	3101      	adds	r1, #1
 800bb6e:	f102 0314 	add.w	r3, r2, #20
 800bb72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb7a:	1f05      	subs	r5, r0, #4
 800bb7c:	42a3      	cmp	r3, r4
 800bb7e:	d30c      	bcc.n	800bb9a <__copybits+0x36>
 800bb80:	1aa3      	subs	r3, r4, r2
 800bb82:	3b11      	subs	r3, #17
 800bb84:	f023 0303 	bic.w	r3, r3, #3
 800bb88:	3211      	adds	r2, #17
 800bb8a:	42a2      	cmp	r2, r4
 800bb8c:	bf88      	it	hi
 800bb8e:	2300      	movhi	r3, #0
 800bb90:	4418      	add	r0, r3
 800bb92:	2300      	movs	r3, #0
 800bb94:	4288      	cmp	r0, r1
 800bb96:	d305      	bcc.n	800bba4 <__copybits+0x40>
 800bb98:	bd70      	pop	{r4, r5, r6, pc}
 800bb9a:	f853 6b04 	ldr.w	r6, [r3], #4
 800bb9e:	f845 6f04 	str.w	r6, [r5, #4]!
 800bba2:	e7eb      	b.n	800bb7c <__copybits+0x18>
 800bba4:	f840 3b04 	str.w	r3, [r0], #4
 800bba8:	e7f4      	b.n	800bb94 <__copybits+0x30>

0800bbaa <__any_on>:
 800bbaa:	f100 0214 	add.w	r2, r0, #20
 800bbae:	6900      	ldr	r0, [r0, #16]
 800bbb0:	114b      	asrs	r3, r1, #5
 800bbb2:	4298      	cmp	r0, r3
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	db11      	blt.n	800bbdc <__any_on+0x32>
 800bbb8:	dd0a      	ble.n	800bbd0 <__any_on+0x26>
 800bbba:	f011 011f 	ands.w	r1, r1, #31
 800bbbe:	d007      	beq.n	800bbd0 <__any_on+0x26>
 800bbc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bbc4:	fa24 f001 	lsr.w	r0, r4, r1
 800bbc8:	fa00 f101 	lsl.w	r1, r0, r1
 800bbcc:	428c      	cmp	r4, r1
 800bbce:	d10b      	bne.n	800bbe8 <__any_on+0x3e>
 800bbd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d803      	bhi.n	800bbe0 <__any_on+0x36>
 800bbd8:	2000      	movs	r0, #0
 800bbda:	bd10      	pop	{r4, pc}
 800bbdc:	4603      	mov	r3, r0
 800bbde:	e7f7      	b.n	800bbd0 <__any_on+0x26>
 800bbe0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbe4:	2900      	cmp	r1, #0
 800bbe6:	d0f5      	beq.n	800bbd4 <__any_on+0x2a>
 800bbe8:	2001      	movs	r0, #1
 800bbea:	e7f6      	b.n	800bbda <__any_on+0x30>

0800bbec <__ascii_wctomb>:
 800bbec:	4603      	mov	r3, r0
 800bbee:	4608      	mov	r0, r1
 800bbf0:	b141      	cbz	r1, 800bc04 <__ascii_wctomb+0x18>
 800bbf2:	2aff      	cmp	r2, #255	@ 0xff
 800bbf4:	d904      	bls.n	800bc00 <__ascii_wctomb+0x14>
 800bbf6:	228a      	movs	r2, #138	@ 0x8a
 800bbf8:	601a      	str	r2, [r3, #0]
 800bbfa:	f04f 30ff 	mov.w	r0, #4294967295
 800bbfe:	4770      	bx	lr
 800bc00:	700a      	strb	r2, [r1, #0]
 800bc02:	2001      	movs	r0, #1
 800bc04:	4770      	bx	lr

0800bc06 <__ssputs_r>:
 800bc06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc0a:	688e      	ldr	r6, [r1, #8]
 800bc0c:	461f      	mov	r7, r3
 800bc0e:	42be      	cmp	r6, r7
 800bc10:	680b      	ldr	r3, [r1, #0]
 800bc12:	4682      	mov	sl, r0
 800bc14:	460c      	mov	r4, r1
 800bc16:	4690      	mov	r8, r2
 800bc18:	d82d      	bhi.n	800bc76 <__ssputs_r+0x70>
 800bc1a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc1e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc22:	d026      	beq.n	800bc72 <__ssputs_r+0x6c>
 800bc24:	6965      	ldr	r5, [r4, #20]
 800bc26:	6909      	ldr	r1, [r1, #16]
 800bc28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc2c:	eba3 0901 	sub.w	r9, r3, r1
 800bc30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc34:	1c7b      	adds	r3, r7, #1
 800bc36:	444b      	add	r3, r9
 800bc38:	106d      	asrs	r5, r5, #1
 800bc3a:	429d      	cmp	r5, r3
 800bc3c:	bf38      	it	cc
 800bc3e:	461d      	movcc	r5, r3
 800bc40:	0553      	lsls	r3, r2, #21
 800bc42:	d527      	bpl.n	800bc94 <__ssputs_r+0x8e>
 800bc44:	4629      	mov	r1, r5
 800bc46:	f7ff fa89 	bl	800b15c <_malloc_r>
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	b360      	cbz	r0, 800bca8 <__ssputs_r+0xa2>
 800bc4e:	6921      	ldr	r1, [r4, #16]
 800bc50:	464a      	mov	r2, r9
 800bc52:	f7fe f846 	bl	8009ce2 <memcpy>
 800bc56:	89a3      	ldrh	r3, [r4, #12]
 800bc58:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc60:	81a3      	strh	r3, [r4, #12]
 800bc62:	6126      	str	r6, [r4, #16]
 800bc64:	6165      	str	r5, [r4, #20]
 800bc66:	444e      	add	r6, r9
 800bc68:	eba5 0509 	sub.w	r5, r5, r9
 800bc6c:	6026      	str	r6, [r4, #0]
 800bc6e:	60a5      	str	r5, [r4, #8]
 800bc70:	463e      	mov	r6, r7
 800bc72:	42be      	cmp	r6, r7
 800bc74:	d900      	bls.n	800bc78 <__ssputs_r+0x72>
 800bc76:	463e      	mov	r6, r7
 800bc78:	6820      	ldr	r0, [r4, #0]
 800bc7a:	4632      	mov	r2, r6
 800bc7c:	4641      	mov	r1, r8
 800bc7e:	f000 f9d7 	bl	800c030 <memmove>
 800bc82:	68a3      	ldr	r3, [r4, #8]
 800bc84:	1b9b      	subs	r3, r3, r6
 800bc86:	60a3      	str	r3, [r4, #8]
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	4433      	add	r3, r6
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	2000      	movs	r0, #0
 800bc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc94:	462a      	mov	r2, r5
 800bc96:	f000 fa10 	bl	800c0ba <_realloc_r>
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d1e0      	bne.n	800bc62 <__ssputs_r+0x5c>
 800bca0:	6921      	ldr	r1, [r4, #16]
 800bca2:	4650      	mov	r0, sl
 800bca4:	f7fe feac 	bl	800aa00 <_free_r>
 800bca8:	230c      	movs	r3, #12
 800bcaa:	f8ca 3000 	str.w	r3, [sl]
 800bcae:	89a3      	ldrh	r3, [r4, #12]
 800bcb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcb4:	81a3      	strh	r3, [r4, #12]
 800bcb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcba:	e7e9      	b.n	800bc90 <__ssputs_r+0x8a>

0800bcbc <_svfiprintf_r>:
 800bcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	4698      	mov	r8, r3
 800bcc2:	898b      	ldrh	r3, [r1, #12]
 800bcc4:	061b      	lsls	r3, r3, #24
 800bcc6:	b09d      	sub	sp, #116	@ 0x74
 800bcc8:	4607      	mov	r7, r0
 800bcca:	460d      	mov	r5, r1
 800bccc:	4614      	mov	r4, r2
 800bcce:	d510      	bpl.n	800bcf2 <_svfiprintf_r+0x36>
 800bcd0:	690b      	ldr	r3, [r1, #16]
 800bcd2:	b973      	cbnz	r3, 800bcf2 <_svfiprintf_r+0x36>
 800bcd4:	2140      	movs	r1, #64	@ 0x40
 800bcd6:	f7ff fa41 	bl	800b15c <_malloc_r>
 800bcda:	6028      	str	r0, [r5, #0]
 800bcdc:	6128      	str	r0, [r5, #16]
 800bcde:	b930      	cbnz	r0, 800bcee <_svfiprintf_r+0x32>
 800bce0:	230c      	movs	r3, #12
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	f04f 30ff 	mov.w	r0, #4294967295
 800bce8:	b01d      	add	sp, #116	@ 0x74
 800bcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcee:	2340      	movs	r3, #64	@ 0x40
 800bcf0:	616b      	str	r3, [r5, #20]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcf6:	2320      	movs	r3, #32
 800bcf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bcfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd00:	2330      	movs	r3, #48	@ 0x30
 800bd02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bea0 <_svfiprintf_r+0x1e4>
 800bd06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd0a:	f04f 0901 	mov.w	r9, #1
 800bd0e:	4623      	mov	r3, r4
 800bd10:	469a      	mov	sl, r3
 800bd12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd16:	b10a      	cbz	r2, 800bd1c <_svfiprintf_r+0x60>
 800bd18:	2a25      	cmp	r2, #37	@ 0x25
 800bd1a:	d1f9      	bne.n	800bd10 <_svfiprintf_r+0x54>
 800bd1c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd20:	d00b      	beq.n	800bd3a <_svfiprintf_r+0x7e>
 800bd22:	465b      	mov	r3, fp
 800bd24:	4622      	mov	r2, r4
 800bd26:	4629      	mov	r1, r5
 800bd28:	4638      	mov	r0, r7
 800bd2a:	f7ff ff6c 	bl	800bc06 <__ssputs_r>
 800bd2e:	3001      	adds	r0, #1
 800bd30:	f000 80a7 	beq.w	800be82 <_svfiprintf_r+0x1c6>
 800bd34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd36:	445a      	add	r2, fp
 800bd38:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f000 809f 	beq.w	800be82 <_svfiprintf_r+0x1c6>
 800bd44:	2300      	movs	r3, #0
 800bd46:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd4e:	f10a 0a01 	add.w	sl, sl, #1
 800bd52:	9304      	str	r3, [sp, #16]
 800bd54:	9307      	str	r3, [sp, #28]
 800bd56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd5c:	4654      	mov	r4, sl
 800bd5e:	2205      	movs	r2, #5
 800bd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd64:	484e      	ldr	r0, [pc, #312]	@ (800bea0 <_svfiprintf_r+0x1e4>)
 800bd66:	f7f4 fa43 	bl	80001f0 <memchr>
 800bd6a:	9a04      	ldr	r2, [sp, #16]
 800bd6c:	b9d8      	cbnz	r0, 800bda6 <_svfiprintf_r+0xea>
 800bd6e:	06d0      	lsls	r0, r2, #27
 800bd70:	bf44      	itt	mi
 800bd72:	2320      	movmi	r3, #32
 800bd74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd78:	0711      	lsls	r1, r2, #28
 800bd7a:	bf44      	itt	mi
 800bd7c:	232b      	movmi	r3, #43	@ 0x2b
 800bd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd82:	f89a 3000 	ldrb.w	r3, [sl]
 800bd86:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd88:	d015      	beq.n	800bdb6 <_svfiprintf_r+0xfa>
 800bd8a:	9a07      	ldr	r2, [sp, #28]
 800bd8c:	4654      	mov	r4, sl
 800bd8e:	2000      	movs	r0, #0
 800bd90:	f04f 0c0a 	mov.w	ip, #10
 800bd94:	4621      	mov	r1, r4
 800bd96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd9a:	3b30      	subs	r3, #48	@ 0x30
 800bd9c:	2b09      	cmp	r3, #9
 800bd9e:	d94b      	bls.n	800be38 <_svfiprintf_r+0x17c>
 800bda0:	b1b0      	cbz	r0, 800bdd0 <_svfiprintf_r+0x114>
 800bda2:	9207      	str	r2, [sp, #28]
 800bda4:	e014      	b.n	800bdd0 <_svfiprintf_r+0x114>
 800bda6:	eba0 0308 	sub.w	r3, r0, r8
 800bdaa:	fa09 f303 	lsl.w	r3, r9, r3
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	9304      	str	r3, [sp, #16]
 800bdb2:	46a2      	mov	sl, r4
 800bdb4:	e7d2      	b.n	800bd5c <_svfiprintf_r+0xa0>
 800bdb6:	9b03      	ldr	r3, [sp, #12]
 800bdb8:	1d19      	adds	r1, r3, #4
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	9103      	str	r1, [sp, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	bfbb      	ittet	lt
 800bdc2:	425b      	neglt	r3, r3
 800bdc4:	f042 0202 	orrlt.w	r2, r2, #2
 800bdc8:	9307      	strge	r3, [sp, #28]
 800bdca:	9307      	strlt	r3, [sp, #28]
 800bdcc:	bfb8      	it	lt
 800bdce:	9204      	strlt	r2, [sp, #16]
 800bdd0:	7823      	ldrb	r3, [r4, #0]
 800bdd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdd4:	d10a      	bne.n	800bdec <_svfiprintf_r+0x130>
 800bdd6:	7863      	ldrb	r3, [r4, #1]
 800bdd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdda:	d132      	bne.n	800be42 <_svfiprintf_r+0x186>
 800bddc:	9b03      	ldr	r3, [sp, #12]
 800bdde:	1d1a      	adds	r2, r3, #4
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	9203      	str	r2, [sp, #12]
 800bde4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bde8:	3402      	adds	r4, #2
 800bdea:	9305      	str	r3, [sp, #20]
 800bdec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800beb0 <_svfiprintf_r+0x1f4>
 800bdf0:	7821      	ldrb	r1, [r4, #0]
 800bdf2:	2203      	movs	r2, #3
 800bdf4:	4650      	mov	r0, sl
 800bdf6:	f7f4 f9fb 	bl	80001f0 <memchr>
 800bdfa:	b138      	cbz	r0, 800be0c <_svfiprintf_r+0x150>
 800bdfc:	9b04      	ldr	r3, [sp, #16]
 800bdfe:	eba0 000a 	sub.w	r0, r0, sl
 800be02:	2240      	movs	r2, #64	@ 0x40
 800be04:	4082      	lsls	r2, r0
 800be06:	4313      	orrs	r3, r2
 800be08:	3401      	adds	r4, #1
 800be0a:	9304      	str	r3, [sp, #16]
 800be0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be10:	4824      	ldr	r0, [pc, #144]	@ (800bea4 <_svfiprintf_r+0x1e8>)
 800be12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be16:	2206      	movs	r2, #6
 800be18:	f7f4 f9ea 	bl	80001f0 <memchr>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d036      	beq.n	800be8e <_svfiprintf_r+0x1d2>
 800be20:	4b21      	ldr	r3, [pc, #132]	@ (800bea8 <_svfiprintf_r+0x1ec>)
 800be22:	bb1b      	cbnz	r3, 800be6c <_svfiprintf_r+0x1b0>
 800be24:	9b03      	ldr	r3, [sp, #12]
 800be26:	3307      	adds	r3, #7
 800be28:	f023 0307 	bic.w	r3, r3, #7
 800be2c:	3308      	adds	r3, #8
 800be2e:	9303      	str	r3, [sp, #12]
 800be30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be32:	4433      	add	r3, r6
 800be34:	9309      	str	r3, [sp, #36]	@ 0x24
 800be36:	e76a      	b.n	800bd0e <_svfiprintf_r+0x52>
 800be38:	fb0c 3202 	mla	r2, ip, r2, r3
 800be3c:	460c      	mov	r4, r1
 800be3e:	2001      	movs	r0, #1
 800be40:	e7a8      	b.n	800bd94 <_svfiprintf_r+0xd8>
 800be42:	2300      	movs	r3, #0
 800be44:	3401      	adds	r4, #1
 800be46:	9305      	str	r3, [sp, #20]
 800be48:	4619      	mov	r1, r3
 800be4a:	f04f 0c0a 	mov.w	ip, #10
 800be4e:	4620      	mov	r0, r4
 800be50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be54:	3a30      	subs	r2, #48	@ 0x30
 800be56:	2a09      	cmp	r2, #9
 800be58:	d903      	bls.n	800be62 <_svfiprintf_r+0x1a6>
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d0c6      	beq.n	800bdec <_svfiprintf_r+0x130>
 800be5e:	9105      	str	r1, [sp, #20]
 800be60:	e7c4      	b.n	800bdec <_svfiprintf_r+0x130>
 800be62:	fb0c 2101 	mla	r1, ip, r1, r2
 800be66:	4604      	mov	r4, r0
 800be68:	2301      	movs	r3, #1
 800be6a:	e7f0      	b.n	800be4e <_svfiprintf_r+0x192>
 800be6c:	ab03      	add	r3, sp, #12
 800be6e:	9300      	str	r3, [sp, #0]
 800be70:	462a      	mov	r2, r5
 800be72:	4b0e      	ldr	r3, [pc, #56]	@ (800beac <_svfiprintf_r+0x1f0>)
 800be74:	a904      	add	r1, sp, #16
 800be76:	4638      	mov	r0, r7
 800be78:	f7fd f902 	bl	8009080 <_printf_float>
 800be7c:	1c42      	adds	r2, r0, #1
 800be7e:	4606      	mov	r6, r0
 800be80:	d1d6      	bne.n	800be30 <_svfiprintf_r+0x174>
 800be82:	89ab      	ldrh	r3, [r5, #12]
 800be84:	065b      	lsls	r3, r3, #25
 800be86:	f53f af2d 	bmi.w	800bce4 <_svfiprintf_r+0x28>
 800be8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be8c:	e72c      	b.n	800bce8 <_svfiprintf_r+0x2c>
 800be8e:	ab03      	add	r3, sp, #12
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	462a      	mov	r2, r5
 800be94:	4b05      	ldr	r3, [pc, #20]	@ (800beac <_svfiprintf_r+0x1f0>)
 800be96:	a904      	add	r1, sp, #16
 800be98:	4638      	mov	r0, r7
 800be9a:	f7fd fb89 	bl	80095b0 <_printf_i>
 800be9e:	e7ed      	b.n	800be7c <_svfiprintf_r+0x1c0>
 800bea0:	0800d0ba 	.word	0x0800d0ba
 800bea4:	0800d0c4 	.word	0x0800d0c4
 800bea8:	08009081 	.word	0x08009081
 800beac:	0800bc07 	.word	0x0800bc07
 800beb0:	0800d0c0 	.word	0x0800d0c0

0800beb4 <__sflush_r>:
 800beb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800beb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bebc:	0716      	lsls	r6, r2, #28
 800bebe:	4605      	mov	r5, r0
 800bec0:	460c      	mov	r4, r1
 800bec2:	d454      	bmi.n	800bf6e <__sflush_r+0xba>
 800bec4:	684b      	ldr	r3, [r1, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	dc02      	bgt.n	800bed0 <__sflush_r+0x1c>
 800beca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800becc:	2b00      	cmp	r3, #0
 800bece:	dd48      	ble.n	800bf62 <__sflush_r+0xae>
 800bed0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bed2:	2e00      	cmp	r6, #0
 800bed4:	d045      	beq.n	800bf62 <__sflush_r+0xae>
 800bed6:	2300      	movs	r3, #0
 800bed8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bedc:	682f      	ldr	r7, [r5, #0]
 800bede:	6a21      	ldr	r1, [r4, #32]
 800bee0:	602b      	str	r3, [r5, #0]
 800bee2:	d030      	beq.n	800bf46 <__sflush_r+0x92>
 800bee4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bee6:	89a3      	ldrh	r3, [r4, #12]
 800bee8:	0759      	lsls	r1, r3, #29
 800beea:	d505      	bpl.n	800bef8 <__sflush_r+0x44>
 800beec:	6863      	ldr	r3, [r4, #4]
 800beee:	1ad2      	subs	r2, r2, r3
 800bef0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bef2:	b10b      	cbz	r3, 800bef8 <__sflush_r+0x44>
 800bef4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bef6:	1ad2      	subs	r2, r2, r3
 800bef8:	2300      	movs	r3, #0
 800befa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800befc:	6a21      	ldr	r1, [r4, #32]
 800befe:	4628      	mov	r0, r5
 800bf00:	47b0      	blx	r6
 800bf02:	1c43      	adds	r3, r0, #1
 800bf04:	89a3      	ldrh	r3, [r4, #12]
 800bf06:	d106      	bne.n	800bf16 <__sflush_r+0x62>
 800bf08:	6829      	ldr	r1, [r5, #0]
 800bf0a:	291d      	cmp	r1, #29
 800bf0c:	d82b      	bhi.n	800bf66 <__sflush_r+0xb2>
 800bf0e:	4a2a      	ldr	r2, [pc, #168]	@ (800bfb8 <__sflush_r+0x104>)
 800bf10:	40ca      	lsrs	r2, r1
 800bf12:	07d6      	lsls	r6, r2, #31
 800bf14:	d527      	bpl.n	800bf66 <__sflush_r+0xb2>
 800bf16:	2200      	movs	r2, #0
 800bf18:	6062      	str	r2, [r4, #4]
 800bf1a:	04d9      	lsls	r1, r3, #19
 800bf1c:	6922      	ldr	r2, [r4, #16]
 800bf1e:	6022      	str	r2, [r4, #0]
 800bf20:	d504      	bpl.n	800bf2c <__sflush_r+0x78>
 800bf22:	1c42      	adds	r2, r0, #1
 800bf24:	d101      	bne.n	800bf2a <__sflush_r+0x76>
 800bf26:	682b      	ldr	r3, [r5, #0]
 800bf28:	b903      	cbnz	r3, 800bf2c <__sflush_r+0x78>
 800bf2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf2e:	602f      	str	r7, [r5, #0]
 800bf30:	b1b9      	cbz	r1, 800bf62 <__sflush_r+0xae>
 800bf32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf36:	4299      	cmp	r1, r3
 800bf38:	d002      	beq.n	800bf40 <__sflush_r+0x8c>
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	f7fe fd60 	bl	800aa00 <_free_r>
 800bf40:	2300      	movs	r3, #0
 800bf42:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf44:	e00d      	b.n	800bf62 <__sflush_r+0xae>
 800bf46:	2301      	movs	r3, #1
 800bf48:	4628      	mov	r0, r5
 800bf4a:	47b0      	blx	r6
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	1c50      	adds	r0, r2, #1
 800bf50:	d1c9      	bne.n	800bee6 <__sflush_r+0x32>
 800bf52:	682b      	ldr	r3, [r5, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d0c6      	beq.n	800bee6 <__sflush_r+0x32>
 800bf58:	2b1d      	cmp	r3, #29
 800bf5a:	d001      	beq.n	800bf60 <__sflush_r+0xac>
 800bf5c:	2b16      	cmp	r3, #22
 800bf5e:	d11e      	bne.n	800bf9e <__sflush_r+0xea>
 800bf60:	602f      	str	r7, [r5, #0]
 800bf62:	2000      	movs	r0, #0
 800bf64:	e022      	b.n	800bfac <__sflush_r+0xf8>
 800bf66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf6a:	b21b      	sxth	r3, r3
 800bf6c:	e01b      	b.n	800bfa6 <__sflush_r+0xf2>
 800bf6e:	690f      	ldr	r7, [r1, #16]
 800bf70:	2f00      	cmp	r7, #0
 800bf72:	d0f6      	beq.n	800bf62 <__sflush_r+0xae>
 800bf74:	0793      	lsls	r3, r2, #30
 800bf76:	680e      	ldr	r6, [r1, #0]
 800bf78:	bf08      	it	eq
 800bf7a:	694b      	ldreq	r3, [r1, #20]
 800bf7c:	600f      	str	r7, [r1, #0]
 800bf7e:	bf18      	it	ne
 800bf80:	2300      	movne	r3, #0
 800bf82:	eba6 0807 	sub.w	r8, r6, r7
 800bf86:	608b      	str	r3, [r1, #8]
 800bf88:	f1b8 0f00 	cmp.w	r8, #0
 800bf8c:	dde9      	ble.n	800bf62 <__sflush_r+0xae>
 800bf8e:	6a21      	ldr	r1, [r4, #32]
 800bf90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf92:	4643      	mov	r3, r8
 800bf94:	463a      	mov	r2, r7
 800bf96:	4628      	mov	r0, r5
 800bf98:	47b0      	blx	r6
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	dc08      	bgt.n	800bfb0 <__sflush_r+0xfc>
 800bf9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfa6:	81a3      	strh	r3, [r4, #12]
 800bfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb0:	4407      	add	r7, r0
 800bfb2:	eba8 0800 	sub.w	r8, r8, r0
 800bfb6:	e7e7      	b.n	800bf88 <__sflush_r+0xd4>
 800bfb8:	20400001 	.word	0x20400001

0800bfbc <_fflush_r>:
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	690b      	ldr	r3, [r1, #16]
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	b913      	cbnz	r3, 800bfcc <_fflush_r+0x10>
 800bfc6:	2500      	movs	r5, #0
 800bfc8:	4628      	mov	r0, r5
 800bfca:	bd38      	pop	{r3, r4, r5, pc}
 800bfcc:	b118      	cbz	r0, 800bfd6 <_fflush_r+0x1a>
 800bfce:	6a03      	ldr	r3, [r0, #32]
 800bfd0:	b90b      	cbnz	r3, 800bfd6 <_fflush_r+0x1a>
 800bfd2:	f7fd fc97 	bl	8009904 <__sinit>
 800bfd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d0f3      	beq.n	800bfc6 <_fflush_r+0xa>
 800bfde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bfe0:	07d0      	lsls	r0, r2, #31
 800bfe2:	d404      	bmi.n	800bfee <_fflush_r+0x32>
 800bfe4:	0599      	lsls	r1, r3, #22
 800bfe6:	d402      	bmi.n	800bfee <_fflush_r+0x32>
 800bfe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfea:	f7fd fe70 	bl	8009cce <__retarget_lock_acquire_recursive>
 800bfee:	4628      	mov	r0, r5
 800bff0:	4621      	mov	r1, r4
 800bff2:	f7ff ff5f 	bl	800beb4 <__sflush_r>
 800bff6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bff8:	07da      	lsls	r2, r3, #31
 800bffa:	4605      	mov	r5, r0
 800bffc:	d4e4      	bmi.n	800bfc8 <_fflush_r+0xc>
 800bffe:	89a3      	ldrh	r3, [r4, #12]
 800c000:	059b      	lsls	r3, r3, #22
 800c002:	d4e1      	bmi.n	800bfc8 <_fflush_r+0xc>
 800c004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c006:	f7fd fe63 	bl	8009cd0 <__retarget_lock_release_recursive>
 800c00a:	e7dd      	b.n	800bfc8 <_fflush_r+0xc>

0800c00c <fiprintf>:
 800c00c:	b40e      	push	{r1, r2, r3}
 800c00e:	b503      	push	{r0, r1, lr}
 800c010:	4601      	mov	r1, r0
 800c012:	ab03      	add	r3, sp, #12
 800c014:	4805      	ldr	r0, [pc, #20]	@ (800c02c <fiprintf+0x20>)
 800c016:	f853 2b04 	ldr.w	r2, [r3], #4
 800c01a:	6800      	ldr	r0, [r0, #0]
 800c01c:	9301      	str	r3, [sp, #4]
 800c01e:	f000 f8a3 	bl	800c168 <_vfiprintf_r>
 800c022:	b002      	add	sp, #8
 800c024:	f85d eb04 	ldr.w	lr, [sp], #4
 800c028:	b003      	add	sp, #12
 800c02a:	4770      	bx	lr
 800c02c:	200003dc 	.word	0x200003dc

0800c030 <memmove>:
 800c030:	4288      	cmp	r0, r1
 800c032:	b510      	push	{r4, lr}
 800c034:	eb01 0402 	add.w	r4, r1, r2
 800c038:	d902      	bls.n	800c040 <memmove+0x10>
 800c03a:	4284      	cmp	r4, r0
 800c03c:	4623      	mov	r3, r4
 800c03e:	d807      	bhi.n	800c050 <memmove+0x20>
 800c040:	1e43      	subs	r3, r0, #1
 800c042:	42a1      	cmp	r1, r4
 800c044:	d008      	beq.n	800c058 <memmove+0x28>
 800c046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c04a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c04e:	e7f8      	b.n	800c042 <memmove+0x12>
 800c050:	4402      	add	r2, r0
 800c052:	4601      	mov	r1, r0
 800c054:	428a      	cmp	r2, r1
 800c056:	d100      	bne.n	800c05a <memmove+0x2a>
 800c058:	bd10      	pop	{r4, pc}
 800c05a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c05e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c062:	e7f7      	b.n	800c054 <memmove+0x24>

0800c064 <_sbrk_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4d06      	ldr	r5, [pc, #24]	@ (800c080 <_sbrk_r+0x1c>)
 800c068:	2300      	movs	r3, #0
 800c06a:	4604      	mov	r4, r0
 800c06c:	4608      	mov	r0, r1
 800c06e:	602b      	str	r3, [r5, #0]
 800c070:	f7f6 f9fc 	bl	800246c <_sbrk>
 800c074:	1c43      	adds	r3, r0, #1
 800c076:	d102      	bne.n	800c07e <_sbrk_r+0x1a>
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	b103      	cbz	r3, 800c07e <_sbrk_r+0x1a>
 800c07c:	6023      	str	r3, [r4, #0]
 800c07e:	bd38      	pop	{r3, r4, r5, pc}
 800c080:	20005a6c 	.word	0x20005a6c

0800c084 <abort>:
 800c084:	b508      	push	{r3, lr}
 800c086:	2006      	movs	r0, #6
 800c088:	f000 fa42 	bl	800c510 <raise>
 800c08c:	2001      	movs	r0, #1
 800c08e:	f7f6 f975 	bl	800237c <_exit>

0800c092 <_calloc_r>:
 800c092:	b570      	push	{r4, r5, r6, lr}
 800c094:	fba1 5402 	umull	r5, r4, r1, r2
 800c098:	b934      	cbnz	r4, 800c0a8 <_calloc_r+0x16>
 800c09a:	4629      	mov	r1, r5
 800c09c:	f7ff f85e 	bl	800b15c <_malloc_r>
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	b928      	cbnz	r0, 800c0b0 <_calloc_r+0x1e>
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	bd70      	pop	{r4, r5, r6, pc}
 800c0a8:	220c      	movs	r2, #12
 800c0aa:	6002      	str	r2, [r0, #0]
 800c0ac:	2600      	movs	r6, #0
 800c0ae:	e7f9      	b.n	800c0a4 <_calloc_r+0x12>
 800c0b0:	462a      	mov	r2, r5
 800c0b2:	4621      	mov	r1, r4
 800c0b4:	f7fd fcc1 	bl	8009a3a <memset>
 800c0b8:	e7f4      	b.n	800c0a4 <_calloc_r+0x12>

0800c0ba <_realloc_r>:
 800c0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0be:	4607      	mov	r7, r0
 800c0c0:	4614      	mov	r4, r2
 800c0c2:	460d      	mov	r5, r1
 800c0c4:	b921      	cbnz	r1, 800c0d0 <_realloc_r+0x16>
 800c0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ca:	4611      	mov	r1, r2
 800c0cc:	f7ff b846 	b.w	800b15c <_malloc_r>
 800c0d0:	b92a      	cbnz	r2, 800c0de <_realloc_r+0x24>
 800c0d2:	f7fe fc95 	bl	800aa00 <_free_r>
 800c0d6:	4625      	mov	r5, r4
 800c0d8:	4628      	mov	r0, r5
 800c0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0de:	f000 fa33 	bl	800c548 <_malloc_usable_size_r>
 800c0e2:	4284      	cmp	r4, r0
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	d802      	bhi.n	800c0ee <_realloc_r+0x34>
 800c0e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0ec:	d8f4      	bhi.n	800c0d8 <_realloc_r+0x1e>
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	f7ff f833 	bl	800b15c <_malloc_r>
 800c0f6:	4680      	mov	r8, r0
 800c0f8:	b908      	cbnz	r0, 800c0fe <_realloc_r+0x44>
 800c0fa:	4645      	mov	r5, r8
 800c0fc:	e7ec      	b.n	800c0d8 <_realloc_r+0x1e>
 800c0fe:	42b4      	cmp	r4, r6
 800c100:	4622      	mov	r2, r4
 800c102:	4629      	mov	r1, r5
 800c104:	bf28      	it	cs
 800c106:	4632      	movcs	r2, r6
 800c108:	f7fd fdeb 	bl	8009ce2 <memcpy>
 800c10c:	4629      	mov	r1, r5
 800c10e:	4638      	mov	r0, r7
 800c110:	f7fe fc76 	bl	800aa00 <_free_r>
 800c114:	e7f1      	b.n	800c0fa <_realloc_r+0x40>

0800c116 <__sfputc_r>:
 800c116:	6893      	ldr	r3, [r2, #8]
 800c118:	3b01      	subs	r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	b410      	push	{r4}
 800c11e:	6093      	str	r3, [r2, #8]
 800c120:	da08      	bge.n	800c134 <__sfputc_r+0x1e>
 800c122:	6994      	ldr	r4, [r2, #24]
 800c124:	42a3      	cmp	r3, r4
 800c126:	db01      	blt.n	800c12c <__sfputc_r+0x16>
 800c128:	290a      	cmp	r1, #10
 800c12a:	d103      	bne.n	800c134 <__sfputc_r+0x1e>
 800c12c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c130:	f000 b932 	b.w	800c398 <__swbuf_r>
 800c134:	6813      	ldr	r3, [r2, #0]
 800c136:	1c58      	adds	r0, r3, #1
 800c138:	6010      	str	r0, [r2, #0]
 800c13a:	7019      	strb	r1, [r3, #0]
 800c13c:	4608      	mov	r0, r1
 800c13e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <__sfputs_r>:
 800c144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c146:	4606      	mov	r6, r0
 800c148:	460f      	mov	r7, r1
 800c14a:	4614      	mov	r4, r2
 800c14c:	18d5      	adds	r5, r2, r3
 800c14e:	42ac      	cmp	r4, r5
 800c150:	d101      	bne.n	800c156 <__sfputs_r+0x12>
 800c152:	2000      	movs	r0, #0
 800c154:	e007      	b.n	800c166 <__sfputs_r+0x22>
 800c156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c15a:	463a      	mov	r2, r7
 800c15c:	4630      	mov	r0, r6
 800c15e:	f7ff ffda 	bl	800c116 <__sfputc_r>
 800c162:	1c43      	adds	r3, r0, #1
 800c164:	d1f3      	bne.n	800c14e <__sfputs_r+0xa>
 800c166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c168 <_vfiprintf_r>:
 800c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16c:	460d      	mov	r5, r1
 800c16e:	b09d      	sub	sp, #116	@ 0x74
 800c170:	4614      	mov	r4, r2
 800c172:	4698      	mov	r8, r3
 800c174:	4606      	mov	r6, r0
 800c176:	b118      	cbz	r0, 800c180 <_vfiprintf_r+0x18>
 800c178:	6a03      	ldr	r3, [r0, #32]
 800c17a:	b90b      	cbnz	r3, 800c180 <_vfiprintf_r+0x18>
 800c17c:	f7fd fbc2 	bl	8009904 <__sinit>
 800c180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c182:	07d9      	lsls	r1, r3, #31
 800c184:	d405      	bmi.n	800c192 <_vfiprintf_r+0x2a>
 800c186:	89ab      	ldrh	r3, [r5, #12]
 800c188:	059a      	lsls	r2, r3, #22
 800c18a:	d402      	bmi.n	800c192 <_vfiprintf_r+0x2a>
 800c18c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c18e:	f7fd fd9e 	bl	8009cce <__retarget_lock_acquire_recursive>
 800c192:	89ab      	ldrh	r3, [r5, #12]
 800c194:	071b      	lsls	r3, r3, #28
 800c196:	d501      	bpl.n	800c19c <_vfiprintf_r+0x34>
 800c198:	692b      	ldr	r3, [r5, #16]
 800c19a:	b99b      	cbnz	r3, 800c1c4 <_vfiprintf_r+0x5c>
 800c19c:	4629      	mov	r1, r5
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f000 f938 	bl	800c414 <__swsetup_r>
 800c1a4:	b170      	cbz	r0, 800c1c4 <_vfiprintf_r+0x5c>
 800c1a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1a8:	07dc      	lsls	r4, r3, #31
 800c1aa:	d504      	bpl.n	800c1b6 <_vfiprintf_r+0x4e>
 800c1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b0:	b01d      	add	sp, #116	@ 0x74
 800c1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b6:	89ab      	ldrh	r3, [r5, #12]
 800c1b8:	0598      	lsls	r0, r3, #22
 800c1ba:	d4f7      	bmi.n	800c1ac <_vfiprintf_r+0x44>
 800c1bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1be:	f7fd fd87 	bl	8009cd0 <__retarget_lock_release_recursive>
 800c1c2:	e7f3      	b.n	800c1ac <_vfiprintf_r+0x44>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1c8:	2320      	movs	r3, #32
 800c1ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1d2:	2330      	movs	r3, #48	@ 0x30
 800c1d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c384 <_vfiprintf_r+0x21c>
 800c1d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1dc:	f04f 0901 	mov.w	r9, #1
 800c1e0:	4623      	mov	r3, r4
 800c1e2:	469a      	mov	sl, r3
 800c1e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1e8:	b10a      	cbz	r2, 800c1ee <_vfiprintf_r+0x86>
 800c1ea:	2a25      	cmp	r2, #37	@ 0x25
 800c1ec:	d1f9      	bne.n	800c1e2 <_vfiprintf_r+0x7a>
 800c1ee:	ebba 0b04 	subs.w	fp, sl, r4
 800c1f2:	d00b      	beq.n	800c20c <_vfiprintf_r+0xa4>
 800c1f4:	465b      	mov	r3, fp
 800c1f6:	4622      	mov	r2, r4
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	4630      	mov	r0, r6
 800c1fc:	f7ff ffa2 	bl	800c144 <__sfputs_r>
 800c200:	3001      	adds	r0, #1
 800c202:	f000 80a7 	beq.w	800c354 <_vfiprintf_r+0x1ec>
 800c206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c208:	445a      	add	r2, fp
 800c20a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c20c:	f89a 3000 	ldrb.w	r3, [sl]
 800c210:	2b00      	cmp	r3, #0
 800c212:	f000 809f 	beq.w	800c354 <_vfiprintf_r+0x1ec>
 800c216:	2300      	movs	r3, #0
 800c218:	f04f 32ff 	mov.w	r2, #4294967295
 800c21c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c220:	f10a 0a01 	add.w	sl, sl, #1
 800c224:	9304      	str	r3, [sp, #16]
 800c226:	9307      	str	r3, [sp, #28]
 800c228:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c22c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c22e:	4654      	mov	r4, sl
 800c230:	2205      	movs	r2, #5
 800c232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c236:	4853      	ldr	r0, [pc, #332]	@ (800c384 <_vfiprintf_r+0x21c>)
 800c238:	f7f3 ffda 	bl	80001f0 <memchr>
 800c23c:	9a04      	ldr	r2, [sp, #16]
 800c23e:	b9d8      	cbnz	r0, 800c278 <_vfiprintf_r+0x110>
 800c240:	06d1      	lsls	r1, r2, #27
 800c242:	bf44      	itt	mi
 800c244:	2320      	movmi	r3, #32
 800c246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c24a:	0713      	lsls	r3, r2, #28
 800c24c:	bf44      	itt	mi
 800c24e:	232b      	movmi	r3, #43	@ 0x2b
 800c250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c254:	f89a 3000 	ldrb.w	r3, [sl]
 800c258:	2b2a      	cmp	r3, #42	@ 0x2a
 800c25a:	d015      	beq.n	800c288 <_vfiprintf_r+0x120>
 800c25c:	9a07      	ldr	r2, [sp, #28]
 800c25e:	4654      	mov	r4, sl
 800c260:	2000      	movs	r0, #0
 800c262:	f04f 0c0a 	mov.w	ip, #10
 800c266:	4621      	mov	r1, r4
 800c268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c26c:	3b30      	subs	r3, #48	@ 0x30
 800c26e:	2b09      	cmp	r3, #9
 800c270:	d94b      	bls.n	800c30a <_vfiprintf_r+0x1a2>
 800c272:	b1b0      	cbz	r0, 800c2a2 <_vfiprintf_r+0x13a>
 800c274:	9207      	str	r2, [sp, #28]
 800c276:	e014      	b.n	800c2a2 <_vfiprintf_r+0x13a>
 800c278:	eba0 0308 	sub.w	r3, r0, r8
 800c27c:	fa09 f303 	lsl.w	r3, r9, r3
 800c280:	4313      	orrs	r3, r2
 800c282:	9304      	str	r3, [sp, #16]
 800c284:	46a2      	mov	sl, r4
 800c286:	e7d2      	b.n	800c22e <_vfiprintf_r+0xc6>
 800c288:	9b03      	ldr	r3, [sp, #12]
 800c28a:	1d19      	adds	r1, r3, #4
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	9103      	str	r1, [sp, #12]
 800c290:	2b00      	cmp	r3, #0
 800c292:	bfbb      	ittet	lt
 800c294:	425b      	neglt	r3, r3
 800c296:	f042 0202 	orrlt.w	r2, r2, #2
 800c29a:	9307      	strge	r3, [sp, #28]
 800c29c:	9307      	strlt	r3, [sp, #28]
 800c29e:	bfb8      	it	lt
 800c2a0:	9204      	strlt	r2, [sp, #16]
 800c2a2:	7823      	ldrb	r3, [r4, #0]
 800c2a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2a6:	d10a      	bne.n	800c2be <_vfiprintf_r+0x156>
 800c2a8:	7863      	ldrb	r3, [r4, #1]
 800c2aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2ac:	d132      	bne.n	800c314 <_vfiprintf_r+0x1ac>
 800c2ae:	9b03      	ldr	r3, [sp, #12]
 800c2b0:	1d1a      	adds	r2, r3, #4
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	9203      	str	r2, [sp, #12]
 800c2b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2ba:	3402      	adds	r4, #2
 800c2bc:	9305      	str	r3, [sp, #20]
 800c2be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c394 <_vfiprintf_r+0x22c>
 800c2c2:	7821      	ldrb	r1, [r4, #0]
 800c2c4:	2203      	movs	r2, #3
 800c2c6:	4650      	mov	r0, sl
 800c2c8:	f7f3 ff92 	bl	80001f0 <memchr>
 800c2cc:	b138      	cbz	r0, 800c2de <_vfiprintf_r+0x176>
 800c2ce:	9b04      	ldr	r3, [sp, #16]
 800c2d0:	eba0 000a 	sub.w	r0, r0, sl
 800c2d4:	2240      	movs	r2, #64	@ 0x40
 800c2d6:	4082      	lsls	r2, r0
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	3401      	adds	r4, #1
 800c2dc:	9304      	str	r3, [sp, #16]
 800c2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e2:	4829      	ldr	r0, [pc, #164]	@ (800c388 <_vfiprintf_r+0x220>)
 800c2e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2e8:	2206      	movs	r2, #6
 800c2ea:	f7f3 ff81 	bl	80001f0 <memchr>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d03f      	beq.n	800c372 <_vfiprintf_r+0x20a>
 800c2f2:	4b26      	ldr	r3, [pc, #152]	@ (800c38c <_vfiprintf_r+0x224>)
 800c2f4:	bb1b      	cbnz	r3, 800c33e <_vfiprintf_r+0x1d6>
 800c2f6:	9b03      	ldr	r3, [sp, #12]
 800c2f8:	3307      	adds	r3, #7
 800c2fa:	f023 0307 	bic.w	r3, r3, #7
 800c2fe:	3308      	adds	r3, #8
 800c300:	9303      	str	r3, [sp, #12]
 800c302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c304:	443b      	add	r3, r7
 800c306:	9309      	str	r3, [sp, #36]	@ 0x24
 800c308:	e76a      	b.n	800c1e0 <_vfiprintf_r+0x78>
 800c30a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c30e:	460c      	mov	r4, r1
 800c310:	2001      	movs	r0, #1
 800c312:	e7a8      	b.n	800c266 <_vfiprintf_r+0xfe>
 800c314:	2300      	movs	r3, #0
 800c316:	3401      	adds	r4, #1
 800c318:	9305      	str	r3, [sp, #20]
 800c31a:	4619      	mov	r1, r3
 800c31c:	f04f 0c0a 	mov.w	ip, #10
 800c320:	4620      	mov	r0, r4
 800c322:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c326:	3a30      	subs	r2, #48	@ 0x30
 800c328:	2a09      	cmp	r2, #9
 800c32a:	d903      	bls.n	800c334 <_vfiprintf_r+0x1cc>
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d0c6      	beq.n	800c2be <_vfiprintf_r+0x156>
 800c330:	9105      	str	r1, [sp, #20]
 800c332:	e7c4      	b.n	800c2be <_vfiprintf_r+0x156>
 800c334:	fb0c 2101 	mla	r1, ip, r1, r2
 800c338:	4604      	mov	r4, r0
 800c33a:	2301      	movs	r3, #1
 800c33c:	e7f0      	b.n	800c320 <_vfiprintf_r+0x1b8>
 800c33e:	ab03      	add	r3, sp, #12
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	462a      	mov	r2, r5
 800c344:	4b12      	ldr	r3, [pc, #72]	@ (800c390 <_vfiprintf_r+0x228>)
 800c346:	a904      	add	r1, sp, #16
 800c348:	4630      	mov	r0, r6
 800c34a:	f7fc fe99 	bl	8009080 <_printf_float>
 800c34e:	4607      	mov	r7, r0
 800c350:	1c78      	adds	r0, r7, #1
 800c352:	d1d6      	bne.n	800c302 <_vfiprintf_r+0x19a>
 800c354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c356:	07d9      	lsls	r1, r3, #31
 800c358:	d405      	bmi.n	800c366 <_vfiprintf_r+0x1fe>
 800c35a:	89ab      	ldrh	r3, [r5, #12]
 800c35c:	059a      	lsls	r2, r3, #22
 800c35e:	d402      	bmi.n	800c366 <_vfiprintf_r+0x1fe>
 800c360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c362:	f7fd fcb5 	bl	8009cd0 <__retarget_lock_release_recursive>
 800c366:	89ab      	ldrh	r3, [r5, #12]
 800c368:	065b      	lsls	r3, r3, #25
 800c36a:	f53f af1f 	bmi.w	800c1ac <_vfiprintf_r+0x44>
 800c36e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c370:	e71e      	b.n	800c1b0 <_vfiprintf_r+0x48>
 800c372:	ab03      	add	r3, sp, #12
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	462a      	mov	r2, r5
 800c378:	4b05      	ldr	r3, [pc, #20]	@ (800c390 <_vfiprintf_r+0x228>)
 800c37a:	a904      	add	r1, sp, #16
 800c37c:	4630      	mov	r0, r6
 800c37e:	f7fd f917 	bl	80095b0 <_printf_i>
 800c382:	e7e4      	b.n	800c34e <_vfiprintf_r+0x1e6>
 800c384:	0800d0ba 	.word	0x0800d0ba
 800c388:	0800d0c4 	.word	0x0800d0c4
 800c38c:	08009081 	.word	0x08009081
 800c390:	0800c145 	.word	0x0800c145
 800c394:	0800d0c0 	.word	0x0800d0c0

0800c398 <__swbuf_r>:
 800c398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c39a:	460e      	mov	r6, r1
 800c39c:	4614      	mov	r4, r2
 800c39e:	4605      	mov	r5, r0
 800c3a0:	b118      	cbz	r0, 800c3aa <__swbuf_r+0x12>
 800c3a2:	6a03      	ldr	r3, [r0, #32]
 800c3a4:	b90b      	cbnz	r3, 800c3aa <__swbuf_r+0x12>
 800c3a6:	f7fd faad 	bl	8009904 <__sinit>
 800c3aa:	69a3      	ldr	r3, [r4, #24]
 800c3ac:	60a3      	str	r3, [r4, #8]
 800c3ae:	89a3      	ldrh	r3, [r4, #12]
 800c3b0:	071a      	lsls	r2, r3, #28
 800c3b2:	d501      	bpl.n	800c3b8 <__swbuf_r+0x20>
 800c3b4:	6923      	ldr	r3, [r4, #16]
 800c3b6:	b943      	cbnz	r3, 800c3ca <__swbuf_r+0x32>
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	f000 f82a 	bl	800c414 <__swsetup_r>
 800c3c0:	b118      	cbz	r0, 800c3ca <__swbuf_r+0x32>
 800c3c2:	f04f 37ff 	mov.w	r7, #4294967295
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	6922      	ldr	r2, [r4, #16]
 800c3ce:	1a98      	subs	r0, r3, r2
 800c3d0:	6963      	ldr	r3, [r4, #20]
 800c3d2:	b2f6      	uxtb	r6, r6
 800c3d4:	4283      	cmp	r3, r0
 800c3d6:	4637      	mov	r7, r6
 800c3d8:	dc05      	bgt.n	800c3e6 <__swbuf_r+0x4e>
 800c3da:	4621      	mov	r1, r4
 800c3dc:	4628      	mov	r0, r5
 800c3de:	f7ff fded 	bl	800bfbc <_fflush_r>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d1ed      	bne.n	800c3c2 <__swbuf_r+0x2a>
 800c3e6:	68a3      	ldr	r3, [r4, #8]
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	60a3      	str	r3, [r4, #8]
 800c3ec:	6823      	ldr	r3, [r4, #0]
 800c3ee:	1c5a      	adds	r2, r3, #1
 800c3f0:	6022      	str	r2, [r4, #0]
 800c3f2:	701e      	strb	r6, [r3, #0]
 800c3f4:	6962      	ldr	r2, [r4, #20]
 800c3f6:	1c43      	adds	r3, r0, #1
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d004      	beq.n	800c406 <__swbuf_r+0x6e>
 800c3fc:	89a3      	ldrh	r3, [r4, #12]
 800c3fe:	07db      	lsls	r3, r3, #31
 800c400:	d5e1      	bpl.n	800c3c6 <__swbuf_r+0x2e>
 800c402:	2e0a      	cmp	r6, #10
 800c404:	d1df      	bne.n	800c3c6 <__swbuf_r+0x2e>
 800c406:	4621      	mov	r1, r4
 800c408:	4628      	mov	r0, r5
 800c40a:	f7ff fdd7 	bl	800bfbc <_fflush_r>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d0d9      	beq.n	800c3c6 <__swbuf_r+0x2e>
 800c412:	e7d6      	b.n	800c3c2 <__swbuf_r+0x2a>

0800c414 <__swsetup_r>:
 800c414:	b538      	push	{r3, r4, r5, lr}
 800c416:	4b29      	ldr	r3, [pc, #164]	@ (800c4bc <__swsetup_r+0xa8>)
 800c418:	4605      	mov	r5, r0
 800c41a:	6818      	ldr	r0, [r3, #0]
 800c41c:	460c      	mov	r4, r1
 800c41e:	b118      	cbz	r0, 800c428 <__swsetup_r+0x14>
 800c420:	6a03      	ldr	r3, [r0, #32]
 800c422:	b90b      	cbnz	r3, 800c428 <__swsetup_r+0x14>
 800c424:	f7fd fa6e 	bl	8009904 <__sinit>
 800c428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c42c:	0719      	lsls	r1, r3, #28
 800c42e:	d422      	bmi.n	800c476 <__swsetup_r+0x62>
 800c430:	06da      	lsls	r2, r3, #27
 800c432:	d407      	bmi.n	800c444 <__swsetup_r+0x30>
 800c434:	2209      	movs	r2, #9
 800c436:	602a      	str	r2, [r5, #0]
 800c438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c43c:	81a3      	strh	r3, [r4, #12]
 800c43e:	f04f 30ff 	mov.w	r0, #4294967295
 800c442:	e033      	b.n	800c4ac <__swsetup_r+0x98>
 800c444:	0758      	lsls	r0, r3, #29
 800c446:	d512      	bpl.n	800c46e <__swsetup_r+0x5a>
 800c448:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c44a:	b141      	cbz	r1, 800c45e <__swsetup_r+0x4a>
 800c44c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c450:	4299      	cmp	r1, r3
 800c452:	d002      	beq.n	800c45a <__swsetup_r+0x46>
 800c454:	4628      	mov	r0, r5
 800c456:	f7fe fad3 	bl	800aa00 <_free_r>
 800c45a:	2300      	movs	r3, #0
 800c45c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c464:	81a3      	strh	r3, [r4, #12]
 800c466:	2300      	movs	r3, #0
 800c468:	6063      	str	r3, [r4, #4]
 800c46a:	6923      	ldr	r3, [r4, #16]
 800c46c:	6023      	str	r3, [r4, #0]
 800c46e:	89a3      	ldrh	r3, [r4, #12]
 800c470:	f043 0308 	orr.w	r3, r3, #8
 800c474:	81a3      	strh	r3, [r4, #12]
 800c476:	6923      	ldr	r3, [r4, #16]
 800c478:	b94b      	cbnz	r3, 800c48e <__swsetup_r+0x7a>
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c484:	d003      	beq.n	800c48e <__swsetup_r+0x7a>
 800c486:	4621      	mov	r1, r4
 800c488:	4628      	mov	r0, r5
 800c48a:	f000 f88b 	bl	800c5a4 <__smakebuf_r>
 800c48e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c492:	f013 0201 	ands.w	r2, r3, #1
 800c496:	d00a      	beq.n	800c4ae <__swsetup_r+0x9a>
 800c498:	2200      	movs	r2, #0
 800c49a:	60a2      	str	r2, [r4, #8]
 800c49c:	6962      	ldr	r2, [r4, #20]
 800c49e:	4252      	negs	r2, r2
 800c4a0:	61a2      	str	r2, [r4, #24]
 800c4a2:	6922      	ldr	r2, [r4, #16]
 800c4a4:	b942      	cbnz	r2, 800c4b8 <__swsetup_r+0xa4>
 800c4a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c4aa:	d1c5      	bne.n	800c438 <__swsetup_r+0x24>
 800c4ac:	bd38      	pop	{r3, r4, r5, pc}
 800c4ae:	0799      	lsls	r1, r3, #30
 800c4b0:	bf58      	it	pl
 800c4b2:	6962      	ldrpl	r2, [r4, #20]
 800c4b4:	60a2      	str	r2, [r4, #8]
 800c4b6:	e7f4      	b.n	800c4a2 <__swsetup_r+0x8e>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	e7f7      	b.n	800c4ac <__swsetup_r+0x98>
 800c4bc:	200003dc 	.word	0x200003dc

0800c4c0 <_raise_r>:
 800c4c0:	291f      	cmp	r1, #31
 800c4c2:	b538      	push	{r3, r4, r5, lr}
 800c4c4:	4605      	mov	r5, r0
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	d904      	bls.n	800c4d4 <_raise_r+0x14>
 800c4ca:	2316      	movs	r3, #22
 800c4cc:	6003      	str	r3, [r0, #0]
 800c4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d2:	bd38      	pop	{r3, r4, r5, pc}
 800c4d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c4d6:	b112      	cbz	r2, 800c4de <_raise_r+0x1e>
 800c4d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4dc:	b94b      	cbnz	r3, 800c4f2 <_raise_r+0x32>
 800c4de:	4628      	mov	r0, r5
 800c4e0:	f000 f830 	bl	800c544 <_getpid_r>
 800c4e4:	4622      	mov	r2, r4
 800c4e6:	4601      	mov	r1, r0
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ee:	f000 b817 	b.w	800c520 <_kill_r>
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d00a      	beq.n	800c50c <_raise_r+0x4c>
 800c4f6:	1c59      	adds	r1, r3, #1
 800c4f8:	d103      	bne.n	800c502 <_raise_r+0x42>
 800c4fa:	2316      	movs	r3, #22
 800c4fc:	6003      	str	r3, [r0, #0]
 800c4fe:	2001      	movs	r0, #1
 800c500:	e7e7      	b.n	800c4d2 <_raise_r+0x12>
 800c502:	2100      	movs	r1, #0
 800c504:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c508:	4620      	mov	r0, r4
 800c50a:	4798      	blx	r3
 800c50c:	2000      	movs	r0, #0
 800c50e:	e7e0      	b.n	800c4d2 <_raise_r+0x12>

0800c510 <raise>:
 800c510:	4b02      	ldr	r3, [pc, #8]	@ (800c51c <raise+0xc>)
 800c512:	4601      	mov	r1, r0
 800c514:	6818      	ldr	r0, [r3, #0]
 800c516:	f7ff bfd3 	b.w	800c4c0 <_raise_r>
 800c51a:	bf00      	nop
 800c51c:	200003dc 	.word	0x200003dc

0800c520 <_kill_r>:
 800c520:	b538      	push	{r3, r4, r5, lr}
 800c522:	4d07      	ldr	r5, [pc, #28]	@ (800c540 <_kill_r+0x20>)
 800c524:	2300      	movs	r3, #0
 800c526:	4604      	mov	r4, r0
 800c528:	4608      	mov	r0, r1
 800c52a:	4611      	mov	r1, r2
 800c52c:	602b      	str	r3, [r5, #0]
 800c52e:	f7f5 ff15 	bl	800235c <_kill>
 800c532:	1c43      	adds	r3, r0, #1
 800c534:	d102      	bne.n	800c53c <_kill_r+0x1c>
 800c536:	682b      	ldr	r3, [r5, #0]
 800c538:	b103      	cbz	r3, 800c53c <_kill_r+0x1c>
 800c53a:	6023      	str	r3, [r4, #0]
 800c53c:	bd38      	pop	{r3, r4, r5, pc}
 800c53e:	bf00      	nop
 800c540:	20005a6c 	.word	0x20005a6c

0800c544 <_getpid_r>:
 800c544:	f7f5 bf02 	b.w	800234c <_getpid>

0800c548 <_malloc_usable_size_r>:
 800c548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c54c:	1f18      	subs	r0, r3, #4
 800c54e:	2b00      	cmp	r3, #0
 800c550:	bfbc      	itt	lt
 800c552:	580b      	ldrlt	r3, [r1, r0]
 800c554:	18c0      	addlt	r0, r0, r3
 800c556:	4770      	bx	lr

0800c558 <__swhatbuf_r>:
 800c558:	b570      	push	{r4, r5, r6, lr}
 800c55a:	460c      	mov	r4, r1
 800c55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c560:	2900      	cmp	r1, #0
 800c562:	b096      	sub	sp, #88	@ 0x58
 800c564:	4615      	mov	r5, r2
 800c566:	461e      	mov	r6, r3
 800c568:	da0d      	bge.n	800c586 <__swhatbuf_r+0x2e>
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c570:	f04f 0100 	mov.w	r1, #0
 800c574:	bf14      	ite	ne
 800c576:	2340      	movne	r3, #64	@ 0x40
 800c578:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c57c:	2000      	movs	r0, #0
 800c57e:	6031      	str	r1, [r6, #0]
 800c580:	602b      	str	r3, [r5, #0]
 800c582:	b016      	add	sp, #88	@ 0x58
 800c584:	bd70      	pop	{r4, r5, r6, pc}
 800c586:	466a      	mov	r2, sp
 800c588:	f000 f848 	bl	800c61c <_fstat_r>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	dbec      	blt.n	800c56a <__swhatbuf_r+0x12>
 800c590:	9901      	ldr	r1, [sp, #4]
 800c592:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c596:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c59a:	4259      	negs	r1, r3
 800c59c:	4159      	adcs	r1, r3
 800c59e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5a2:	e7eb      	b.n	800c57c <__swhatbuf_r+0x24>

0800c5a4 <__smakebuf_r>:
 800c5a4:	898b      	ldrh	r3, [r1, #12]
 800c5a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5a8:	079d      	lsls	r5, r3, #30
 800c5aa:	4606      	mov	r6, r0
 800c5ac:	460c      	mov	r4, r1
 800c5ae:	d507      	bpl.n	800c5c0 <__smakebuf_r+0x1c>
 800c5b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	6123      	str	r3, [r4, #16]
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	6163      	str	r3, [r4, #20]
 800c5bc:	b003      	add	sp, #12
 800c5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5c0:	ab01      	add	r3, sp, #4
 800c5c2:	466a      	mov	r2, sp
 800c5c4:	f7ff ffc8 	bl	800c558 <__swhatbuf_r>
 800c5c8:	9f00      	ldr	r7, [sp, #0]
 800c5ca:	4605      	mov	r5, r0
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f7fe fdc4 	bl	800b15c <_malloc_r>
 800c5d4:	b948      	cbnz	r0, 800c5ea <__smakebuf_r+0x46>
 800c5d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5da:	059a      	lsls	r2, r3, #22
 800c5dc:	d4ee      	bmi.n	800c5bc <__smakebuf_r+0x18>
 800c5de:	f023 0303 	bic.w	r3, r3, #3
 800c5e2:	f043 0302 	orr.w	r3, r3, #2
 800c5e6:	81a3      	strh	r3, [r4, #12]
 800c5e8:	e7e2      	b.n	800c5b0 <__smakebuf_r+0xc>
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	6020      	str	r0, [r4, #0]
 800c5ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5f2:	81a3      	strh	r3, [r4, #12]
 800c5f4:	9b01      	ldr	r3, [sp, #4]
 800c5f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5fa:	b15b      	cbz	r3, 800c614 <__smakebuf_r+0x70>
 800c5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c600:	4630      	mov	r0, r6
 800c602:	f000 f81d 	bl	800c640 <_isatty_r>
 800c606:	b128      	cbz	r0, 800c614 <__smakebuf_r+0x70>
 800c608:	89a3      	ldrh	r3, [r4, #12]
 800c60a:	f023 0303 	bic.w	r3, r3, #3
 800c60e:	f043 0301 	orr.w	r3, r3, #1
 800c612:	81a3      	strh	r3, [r4, #12]
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	431d      	orrs	r5, r3
 800c618:	81a5      	strh	r5, [r4, #12]
 800c61a:	e7cf      	b.n	800c5bc <__smakebuf_r+0x18>

0800c61c <_fstat_r>:
 800c61c:	b538      	push	{r3, r4, r5, lr}
 800c61e:	4d07      	ldr	r5, [pc, #28]	@ (800c63c <_fstat_r+0x20>)
 800c620:	2300      	movs	r3, #0
 800c622:	4604      	mov	r4, r0
 800c624:	4608      	mov	r0, r1
 800c626:	4611      	mov	r1, r2
 800c628:	602b      	str	r3, [r5, #0]
 800c62a:	f7f5 fef7 	bl	800241c <_fstat>
 800c62e:	1c43      	adds	r3, r0, #1
 800c630:	d102      	bne.n	800c638 <_fstat_r+0x1c>
 800c632:	682b      	ldr	r3, [r5, #0]
 800c634:	b103      	cbz	r3, 800c638 <_fstat_r+0x1c>
 800c636:	6023      	str	r3, [r4, #0]
 800c638:	bd38      	pop	{r3, r4, r5, pc}
 800c63a:	bf00      	nop
 800c63c:	20005a6c 	.word	0x20005a6c

0800c640 <_isatty_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	4d06      	ldr	r5, [pc, #24]	@ (800c65c <_isatty_r+0x1c>)
 800c644:	2300      	movs	r3, #0
 800c646:	4604      	mov	r4, r0
 800c648:	4608      	mov	r0, r1
 800c64a:	602b      	str	r3, [r5, #0]
 800c64c:	f7f5 fef6 	bl	800243c <_isatty>
 800c650:	1c43      	adds	r3, r0, #1
 800c652:	d102      	bne.n	800c65a <_isatty_r+0x1a>
 800c654:	682b      	ldr	r3, [r5, #0]
 800c656:	b103      	cbz	r3, 800c65a <_isatty_r+0x1a>
 800c658:	6023      	str	r3, [r4, #0]
 800c65a:	bd38      	pop	{r3, r4, r5, pc}
 800c65c:	20005a6c 	.word	0x20005a6c

0800c660 <_init>:
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	bf00      	nop
 800c664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c666:	bc08      	pop	{r3}
 800c668:	469e      	mov	lr, r3
 800c66a:	4770      	bx	lr

0800c66c <_fini>:
 800c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66e:	bf00      	nop
 800c670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c672:	bc08      	pop	{r3}
 800c674:	469e      	mov	lr, r3
 800c676:	4770      	bx	lr
