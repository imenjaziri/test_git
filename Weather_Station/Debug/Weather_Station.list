
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c488  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001180  0800c618  0800c618  0000d618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d798  0800d798  0000f444  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d798  0800d798  0000e798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7a0  0800d7a0  0000f444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7a0  0800d7a0  0000e7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d7a4  0800d7a4  0000e7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000444  20000000  0800d7a8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005654  20000444  0800dbec  0000f444  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005a98  0800dbec  0000fa98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f444  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2c9  00000000  00000000  0000f474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e1e  00000000  00000000  0002973d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0002d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001210  00000000  00000000  0002ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a72b  00000000  00000000  0002fec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b25f  00000000  00000000  0005a5eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff600  00000000  00000000  0007584a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00174e4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007658  00000000  00000000  00174e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0017c4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000444 	.word	0x20000444
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c600 	.word	0x0800c600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000448 	.word	0x20000448
 80001cc:	0800c600 	.word	0x0800c600

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a07      	ldr	r2, [pc, #28]	@ (800106c <vApplicationGetIdleTaskMemory+0x2c>)
 8001050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4a06      	ldr	r2, [pc, #24]	@ (8001070 <vApplicationGetIdleTaskMemory+0x30>)
 8001056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000468 	.word	0x20000468
 8001070:	20000508 	.word	0x20000508

08001074 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b08e      	sub	sp, #56	@ 0x38
 8001078:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <MX_FREERTOS_Init+0x58>)
 800107c:	f107 041c 	add.w	r4, r7, #28
 8001080:	461d      	mov	r5, r3
 8001082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001086:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800108a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f005 f852 	bl	800613e <osThreadCreate>
 800109a:	4603      	mov	r3, r0
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <MX_FREERTOS_Init+0x5c>)
 800109e:	6013      	str	r3, [r2, #0]

  /* definition and creation of IHM_Task */
  osThreadDef(IHM_Task, Start_IHM_Task, osPriorityIdle, 0, 1024);
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_FREERTOS_Init+0x60>)
 80010a2:	463c      	mov	r4, r7
 80010a4:	461d      	mov	r5, r3
 80010a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IHM_TaskHandle = osThreadCreate(osThread(IHM_Task), NULL);
 80010b2:	463b      	mov	r3, r7
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f005 f841 	bl	800613e <osThreadCreate>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <MX_FREERTOS_Init+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010c2:	bf00      	nop
 80010c4:	3738      	adds	r7, #56	@ 0x38
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	0800c624 	.word	0x0800c624
 80010d0:	20000460 	.word	0x20000460
 80010d4:	0800c64c 	.word	0x0800c64c
 80010d8:	20000464 	.word	0x20000464

080010dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f005 f876 	bl	80061d6 <osDelay>
 80010ea:	e7fb      	b.n	80010e4 <StartDefaultTask+0x8>

080010ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	4a2a      	ldr	r2, [pc, #168]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110e:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a24      	ldr	r2, [pc, #144]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2120      	movs	r1, #32
 8001166:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116a:	f001 fdaf 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800116e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001174:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480b      	ldr	r0, [pc, #44]	@ (80011b4 <MX_GPIO_Init+0xc8>)
 8001186:	f001 fbf7 	bl	8002978 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800118a:	2320      	movs	r3, #32
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a4:	f001 fbe8 	bl	8002978 <HAL_GPIO_Init>

}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	@ 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000800 	.word	0x48000800

080011b8 <UpperCase>:
	uint8_t cr_l ;
	uint8_t bw_l ;
}Lora;
Lora LoraValues = {7, 5, 6};
//Useful functions for the code
void UpperCase(char *str){
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	while (*str)
 80011c0:	e015      	b.n	80011ee <UpperCase+0x36>
	{
		*str=toupper(*str);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <UpperCase+0x4c>)
 80011ce:	4413      	add	r3, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d102      	bne.n	80011e0 <UpperCase+0x28>
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	3b20      	subs	r3, #32
 80011de:	e000      	b.n	80011e2 <UpperCase+0x2a>
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	701a      	strb	r2, [r3, #0]
		str++;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3301      	adds	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
	while (*str)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1e5      	bne.n	80011c2 <UpperCase+0xa>
	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	0800d598 	.word	0x0800d598

08001208 <Start_IHM_Task>:

void Start_IHM_Task(void const * argument)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_IHM_Task */
	MainMenu();
 8001210:	f000 f8e2 	bl	80013d8 <MainMenu>
	MessageBufferHandle = xMessageBufferCreate(xMessageBufferSizeBytes);
 8001214:	2364      	movs	r3, #100	@ 0x64
 8001216:	2201      	movs	r2, #1
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f005 f8a3 	bl	8006366 <xStreamBufferGenericCreate>
 8001220:	4603      	mov	r3, r0
 8001222:	4a15      	ldr	r2, [pc, #84]	@ (8001278 <Start_IHM_Task+0x70>)
 8001224:	6013      	str	r3, [r2, #0]
	if( MessageBufferHandle != NULL )
 8001226:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <Start_IHM_Task+0x70>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d105      	bne.n	800123a <Start_IHM_Task+0x32>
	{
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 800122e:	2364      	movs	r3, #100	@ 0x64
 8001230:	2222      	movs	r2, #34	@ 0x22
 8001232:	4912      	ldr	r1, [pc, #72]	@ (800127c <Start_IHM_Task+0x74>)
 8001234:	4812      	ldr	r0, [pc, #72]	@ (8001280 <Start_IHM_Task+0x78>)
 8001236:	f003 fbc7 	bl	80049c8 <HAL_UART_Transmit>
	}

	/* Infinite loop */
	for(;;)
	{
		xMessageBufferReceive( MessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <Start_IHM_Task+0x70>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	2240      	movs	r2, #64	@ 0x40
 8001244:	490f      	ldr	r1, [pc, #60]	@ (8001284 <Start_IHM_Task+0x7c>)
 8001246:	f005 f9d0 	bl	80065ea <xStreamBufferReceive>
		memset(new_buff,0,sizeof(new_buff));
 800124a:	2240      	movs	r2, #64	@ 0x40
 800124c:	2100      	movs	r1, #0
 800124e:	480e      	ldr	r0, [pc, #56]	@ (8001288 <Start_IHM_Task+0x80>)
 8001250:	f008 fbcb 	bl	80099ea <memset>
		UpperCase((char*)received_data);
 8001254:	480b      	ldr	r0, [pc, #44]	@ (8001284 <Start_IHM_Task+0x7c>)
 8001256:	f7ff ffaf 	bl	80011b8 <UpperCase>
		tokenization((char*)received_data);
 800125a:	480a      	ldr	r0, [pc, #40]	@ (8001284 <Start_IHM_Task+0x7c>)
 800125c:	f000 f912 	bl	8001484 <tokenization>
		ParseCommand();
 8001260:	f000 f93e 	bl	80014e0 <ParseCommand>
		memset(received_data,0,sizeof(received_data));
 8001264:	2240      	movs	r2, #64	@ 0x40
 8001266:	2100      	movs	r1, #0
 8001268:	4806      	ldr	r0, [pc, #24]	@ (8001284 <Start_IHM_Task+0x7c>)
 800126a:	f008 fbbe 	bl	80099ea <memset>
		osDelay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f004 ffb1 	bl	80061d6 <osDelay>
		xMessageBufferReceive( MessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 8001274:	bf00      	nop
 8001276:	e7e0      	b.n	800123a <Start_IHM_Task+0x32>
 8001278:	20000850 	.word	0x20000850
 800127c:	0800c668 	.word	0x0800c668
 8001280:	2000094c 	.word	0x2000094c
 8001284:	20000810 	.word	0x20000810
 8001288:	20000748 	.word	0x20000748

0800128c <HAL_UART_RxCpltCallback>:
}

// Fonction pour afficher le menu principal complet


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if (!processing)
 8001294:	4b44      	ldr	r3, [pc, #272]	@ (80013a8 <HAL_UART_RxCpltCallback+0x11c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d17b      	bne.n	8001394 <HAL_UART_RxCpltCallback+0x108>
	{ if ((rxByte == '\r')||(rxByte=='\n'))
 800129c:	4b43      	ldr	r3, [pc, #268]	@ (80013ac <HAL_UART_RxCpltCallback+0x120>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b0d      	cmp	r3, #13
 80012a2:	d003      	beq.n	80012ac <HAL_UART_RxCpltCallback+0x20>
 80012a4:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <HAL_UART_RxCpltCallback+0x120>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b0a      	cmp	r3, #10
 80012aa:	d13a      	bne.n	8001322 <HAL_UART_RxCpltCallback+0x96>
	{   if (rxIndex!=0)
 80012ac:	4b40      	ldr	r3, [pc, #256]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d06f      	beq.n	8001394 <HAL_UART_RxCpltCallback+0x108>
	{
		processing=1;
 80012b4:	4b3c      	ldr	r3, [pc, #240]	@ (80013a8 <HAL_UART_RxCpltCallback+0x11c>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
		rxBuffer[rxIndex] = '\0';
 80012ba:	4b3d      	ldr	r3, [pc, #244]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	4b3c      	ldr	r3, [pc, #240]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 80012c2:	2100      	movs	r1, #0
 80012c4:	5499      	strb	r1, [r3, r2]
		memcpy(new_buff,rxBuffer,rxIndex);
 80012c6:	4b3a      	ldr	r3, [pc, #232]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	4939      	ldr	r1, [pc, #228]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 80012ce:	483a      	ldr	r0, [pc, #232]	@ (80013b8 <HAL_UART_RxCpltCallback+0x12c>)
 80012d0:	f008 fcd7 	bl	8009c82 <memcpy>
		xBytesSent=xMessageBufferSendFromISR(MessageBufferHandle,new_buff,strlen((char*)new_buff),&xHigherPriorityTaskWoken);
 80012d4:	4b39      	ldr	r3, [pc, #228]	@ (80013bc <HAL_UART_RxCpltCallback+0x130>)
 80012d6:	681c      	ldr	r4, [r3, #0]
 80012d8:	4837      	ldr	r0, [pc, #220]	@ (80013b8 <HAL_UART_RxCpltCallback+0x12c>)
 80012da:	f7fe ffd9 	bl	8000290 <strlen>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b37      	ldr	r3, [pc, #220]	@ (80013c0 <HAL_UART_RxCpltCallback+0x134>)
 80012e2:	4935      	ldr	r1, [pc, #212]	@ (80013b8 <HAL_UART_RxCpltCallback+0x12c>)
 80012e4:	4620      	mov	r0, r4
 80012e6:	f005 f8d0 	bl	800648a <xStreamBufferSendFromISR>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b35      	ldr	r3, [pc, #212]	@ (80013c4 <HAL_UART_RxCpltCallback+0x138>)
 80012f0:	701a      	strb	r2, [r3, #0]
		//The number of bytes actually written to the message buffer.  If the
		// * message buffer didn't have enough free space for the message to be stored
		// * then 0 is returned, otherwise xDataLengthBytes is returned.
		if( xBytesSent != strlen((char*)new_buff))
 80012f2:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <HAL_UART_RxCpltCallback+0x138>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461c      	mov	r4, r3
 80012f8:	482f      	ldr	r0, [pc, #188]	@ (80013b8 <HAL_UART_RxCpltCallback+0x12c>)
 80012fa:	f7fe ffc9 	bl	8000290 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	429c      	cmp	r4, r3
 8001302:	d005      	beq.n	8001310 <HAL_UART_RxCpltCallback+0x84>
		{
			HAL_UART_Transmit(&huart2, (const uint8_t *)"Message sent !=buffer data\r\n",26,100);
 8001304:	2364      	movs	r3, #100	@ 0x64
 8001306:	221a      	movs	r2, #26
 8001308:	492f      	ldr	r1, [pc, #188]	@ (80013c8 <HAL_UART_RxCpltCallback+0x13c>)
 800130a:	4830      	ldr	r0, [pc, #192]	@ (80013cc <HAL_UART_RxCpltCallback+0x140>)
 800130c:	f003 fb5c 	bl	80049c8 <HAL_UART_Transmit>
		}
		memset(rxBuffer,0,sizeof(rxBuffer));
 8001310:	2240      	movs	r2, #64	@ 0x40
 8001312:	2100      	movs	r1, #0
 8001314:	4827      	ldr	r0, [pc, #156]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 8001316:	f008 fb68 	bl	80099ea <memset>
		rxIndex = 0;}
 800131a:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
	{   if (rxIndex!=0)
 8001320:	e038      	b.n	8001394 <HAL_UART_RxCpltCallback+0x108>
	}

	else { if (rxIndex > 0){
 8001322:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d021      	beq.n	800136e <HAL_UART_RxCpltCallback+0xe2>

		if (rxByte == '\b') {
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <HAL_UART_RxCpltCallback+0x120>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b08      	cmp	r3, #8
 8001330:	d11d      	bne.n	800136e <HAL_UART_RxCpltCallback+0xe2>
			rxBuffer[rxIndex]=' ';
 8001332:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 800133a:	2120      	movs	r1, #32
 800133c:	5499      	strb	r1, [r3, r2]
			rxIndex=rxIndex-1;
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001348:	701a      	strb	r2, [r3, #0]
			rxBuffer[rxIndex]=' ';
 800134a:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 8001352:	2120      	movs	r1, #32
 8001354:	5499      	strb	r1, [r3, r2]
			retour=rxIndex-1;
 8001356:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	3b01      	subs	r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <HAL_UART_RxCpltCallback+0x144>)
 8001360:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, (uint8_t *)" \b", 2, 100);
 8001362:	2364      	movs	r3, #100	@ 0x64
 8001364:	2202      	movs	r2, #2
 8001366:	491b      	ldr	r1, [pc, #108]	@ (80013d4 <HAL_UART_RxCpltCallback+0x148>)
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f003 fb2d 	bl	80049c8 <HAL_UART_Transmit>
			//{rxBuffer[i]=rxBuffer[retour++];
			//if (i==retour)
			//rxBuffer[i]='\0';}
		}
	}
	if (rxIndex < RX_BUFFER_SIZE-1) {
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b3e      	cmp	r3, #62	@ 0x3e
 8001374:	d80b      	bhi.n	800138e <HAL_UART_RxCpltCallback+0x102>

		rxBuffer[rxIndex++] = rxByte;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	b2d1      	uxtb	r1, r2
 800137e:	4a0c      	ldr	r2, [pc, #48]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001380:	7011      	strb	r1, [r2, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_UART_RxCpltCallback+0x120>)
 8001386:	7819      	ldrb	r1, [r3, #0]
 8001388:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 800138a:	5499      	strb	r1, [r3, r2]
 800138c:	e002      	b.n	8001394 <HAL_UART_RxCpltCallback+0x108>
	}
	else {
		rxIndex=0;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	}
	}
	}
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	4905      	ldr	r1, [pc, #20]	@ (80013ac <HAL_UART_RxCpltCallback+0x120>)
 8001398:	480c      	ldr	r0, [pc, #48]	@ (80013cc <HAL_UART_RxCpltCallback+0x140>)
 800139a:	f003 fb9f 	bl	8004adc <HAL_UART_Receive_IT>
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000858 	.word	0x20000858
 80013ac:	20000788 	.word	0x20000788
 80013b0:	20000789 	.word	0x20000789
 80013b4:	20000708 	.word	0x20000708
 80013b8:	20000748 	.word	0x20000748
 80013bc:	20000850 	.word	0x20000850
 80013c0:	20000854 	.word	0x20000854
 80013c4:	2000080c 	.word	0x2000080c
 80013c8:	0800c68c 	.word	0x0800c68c
 80013cc:	2000094c 	.word	0x2000094c
 80013d0:	20000859 	.word	0x20000859
 80013d4:	0800c6ac 	.word	0x0800c6ac

080013d8 <MainMenu>:
		//SystemConfig Menu
		{"SAVE",(char*)"TO SAVE MODIFIED PARAMETERS PERMANENTLY WRITE SAVE",Save_f,SysConfig_Menu},
		{"RESTORE",(char*)"TO RESTORE OLD PARAMETERS WRITE RESTORE",Restore_f,SysConfig_Menu},

};
void MainMenu(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
	// Afficher tout le menu une seule fois
	currentMenu=Main_Menu;
 80013de:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <MainMenu+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;30;107m----------------Main Menu---------------\033[0m\n \r\n");
 80013e4:	4921      	ldr	r1, [pc, #132]	@ (800146c <MainMenu+0x94>)
 80013e6:	4822      	ldr	r0, [pc, #136]	@ (8001470 <MainMenu+0x98>)
 80013e8:	f008 fa9a 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80013ec:	4820      	ldr	r0, [pc, #128]	@ (8001470 <MainMenu+0x98>)
 80013ee:	f7fe ff4f 	bl	8000290 <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	2364      	movs	r3, #100	@ 0x64
 80013f8:	491d      	ldr	r1, [pc, #116]	@ (8001470 <MainMenu+0x98>)
 80013fa:	481e      	ldr	r0, [pc, #120]	@ (8001474 <MainMenu+0x9c>)
 80013fc:	f003 fae4 	bl	80049c8 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001400:	2300      	movs	r3, #0
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	e023      	b.n	800144e <MainMenu+0x76>
	{if (cmd_list[l].MenuIndex==Main_Menu)
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a1b      	ldr	r2, [pc, #108]	@ (8001478 <MainMenu+0xa0>)
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	4413      	add	r3, r2
 800140e:	330c      	adds	r3, #12
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d118      	bne.n	8001448 <MainMenu+0x70>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4a17      	ldr	r2, [pc, #92]	@ (8001478 <MainMenu+0xa0>)
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4915      	ldr	r1, [pc, #84]	@ (8001478 <MainMenu+0xa0>)
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	440b      	add	r3, r1
 8001428:	3304      	adds	r3, #4
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4913      	ldr	r1, [pc, #76]	@ (800147c <MainMenu+0xa4>)
 800142e:	4810      	ldr	r0, [pc, #64]	@ (8001470 <MainMenu+0x98>)
 8001430:	f008 fa76 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001434:	480e      	ldr	r0, [pc, #56]	@ (8001470 <MainMenu+0x98>)
 8001436:	f7fe ff2b 	bl	8000290 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	2364      	movs	r3, #100	@ 0x64
 8001440:	490b      	ldr	r1, [pc, #44]	@ (8001470 <MainMenu+0x98>)
 8001442:	480c      	ldr	r0, [pc, #48]	@ (8001474 <MainMenu+0x9c>)
 8001444:	f003 fac0 	bl	80049c8 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	3301      	adds	r3, #1
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b25      	cmp	r3, #37	@ 0x25
 8001452:	d9d8      	bls.n	8001406 <MainMenu+0x2e>
	}
	}

	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8001454:	2201      	movs	r2, #1
 8001456:	490a      	ldr	r1, [pc, #40]	@ (8001480 <MainMenu+0xa8>)
 8001458:	4806      	ldr	r0, [pc, #24]	@ (8001474 <MainMenu+0x9c>)
 800145a:	f003 fb3f 	bl	8004adc <HAL_UART_Receive_IT>

}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200008f8 	.word	0x200008f8
 800146c:	0800ceb8 	.word	0x0800ceb8
 8001470:	2000078c 	.word	0x2000078c
 8001474:	2000094c 	.word	0x2000094c
 8001478:	20000008 	.word	0x20000008
 800147c:	0800cef4 	.word	0x0800cef4
 8001480:	20000788 	.word	0x20000788

08001484 <tokenization>:
void tokenization(char *str) //function to tokenize input string
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	tokens[0]=strtok(str," ");
 800148c:	4912      	ldr	r1, [pc, #72]	@ (80014d8 <tokenization+0x54>)
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f008 fac6 	bl	8009a20 <strtok>
 8001494:	4603      	mov	r3, r0
 8001496:	4a11      	ldr	r2, [pc, #68]	@ (80014dc <tokenization+0x58>)
 8001498:	6013      	str	r3, [r2, #0]
	for (uint8_t i=1; i<10;i++)
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e011      	b.n	80014c4 <tokenization+0x40>
	{   tokens[i]=strtok(NULL," ");
 80014a0:	7bfc      	ldrb	r4, [r7, #15]
 80014a2:	490d      	ldr	r1, [pc, #52]	@ (80014d8 <tokenization+0x54>)
 80014a4:	2000      	movs	r0, #0
 80014a6:	f008 fabb 	bl	8009a20 <strtok>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a0b      	ldr	r2, [pc, #44]	@ (80014dc <tokenization+0x58>)
 80014ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (tokens[i]==NULL)
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	4a09      	ldr	r2, [pc, #36]	@ (80014dc <tokenization+0x58>)
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <tokenization+0x48>
	for (uint8_t i=1; i<10;i++)
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	3301      	adds	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b09      	cmp	r3, #9
 80014c8:	d9ea      	bls.n	80014a0 <tokenization+0x1c>
		break;
	}
}
 80014ca:	e000      	b.n	80014ce <tokenization+0x4a>
		break;
 80014cc:	bf00      	nop
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd90      	pop	{r4, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	0800cf00 	.word	0x0800cf00
 80014dc:	2000085c 	.word	0x2000085c

080014e0 <ParseCommand>:
uint8_t cl_elements=sizeof(cmd_list)/sizeof(cmd_list[0]);
void ParseCommand() {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
	uint8_t c=0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	71fb      	strb	r3, [r7, #7]
	uint8_t correspond=0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	71bb      	strb	r3, [r7, #6]
	uint8_t true=0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	717b      	strb	r3, [r7, #5]
	uint8_t goback=0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	713b      	strb	r3, [r7, #4]
	if (strcmp(tokens[0],"..")==0)
 80014f6:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <ParseCommand+0xcc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	492d      	ldr	r1, [pc, #180]	@ (80015b0 <ParseCommand+0xd0>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe fe67 	bl	80001d0 <strcmp>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d135      	bne.n	8001574 <ParseCommand+0x94>
	{MainMenu();
 8001508:	f7ff ff66 	bl	80013d8 <MainMenu>
	goback=1;}
 800150c:	2301      	movs	r3, #1
 800150e:	713b      	strb	r3, [r7, #4]
	while (c<cl_elements)
 8001510:	e030      	b.n	8001574 <ParseCommand+0x94>
	{if (strcmp(tokens[0], cmd_list[c].Name)== 0)
 8001512:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <ParseCommand+0xcc>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4926      	ldr	r1, [pc, #152]	@ (80015b4 <ParseCommand+0xd4>)
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	440b      	add	r3, r1
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f7fe fe54 	bl	80001d0 <strcmp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d11f      	bne.n	800156e <ParseCommand+0x8e>
	{ true=1;
 800152e:	2301      	movs	r3, #1
 8001530:	717b      	strb	r3, [r7, #5]
	if (currentMenu==cmd_list[c].MenuIndex)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4a1f      	ldr	r2, [pc, #124]	@ (80015b4 <ParseCommand+0xd4>)
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	4413      	add	r3, r2
 800153a:	330c      	adds	r3, #12
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <ParseCommand+0xd8>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d10c      	bne.n	8001560 <ParseCommand+0x80>
	{cmd_list[c].handler(tokens[1]);
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4a1a      	ldr	r2, [pc, #104]	@ (80015b4 <ParseCommand+0xd4>)
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	3308      	adds	r3, #8
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <ParseCommand+0xcc>)
 8001554:	6852      	ldr	r2, [r2, #4]
 8001556:	4610      	mov	r0, r2
 8001558:	4798      	blx	r3
	correspond=1;}
 800155a:	2301      	movs	r3, #1
 800155c:	71bb      	strb	r3, [r7, #6]
	else HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong Menu\r\n",strlen("Wrong Menu\r\n"),100);
	break;
 800155e:	e00e      	b.n	800157e <ParseCommand+0x9e>
	else HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong Menu\r\n",strlen("Wrong Menu\r\n"),100);
 8001560:	2364      	movs	r3, #100	@ 0x64
 8001562:	220c      	movs	r2, #12
 8001564:	4915      	ldr	r1, [pc, #84]	@ (80015bc <ParseCommand+0xdc>)
 8001566:	4816      	ldr	r0, [pc, #88]	@ (80015c0 <ParseCommand+0xe0>)
 8001568:	f003 fa2e 	bl	80049c8 <HAL_UART_Transmit>
	break;
 800156c:	e007      	b.n	800157e <ParseCommand+0x9e>
	}
	c++;
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	3301      	adds	r3, #1
 8001572:	71fb      	strb	r3, [r7, #7]
	while (c<cl_elements)
 8001574:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <ParseCommand+0xe4>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	79fa      	ldrb	r2, [r7, #7]
 800157a:	429a      	cmp	r2, r3
 800157c:	d3c9      	bcc.n	8001512 <ParseCommand+0x32>
	}
	if (true==0 && correspond==0 && goback==0)
 800157e:	797b      	ldrb	r3, [r7, #5]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10b      	bne.n	800159c <ParseCommand+0xbc>
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d108      	bne.n	800159c <ParseCommand+0xbc>
 800158a:	793b      	ldrb	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <ParseCommand+0xbc>
		HAL_UART_Transmit(&huart2, (uint8_t*)"COMMAND ERROR\r\n",16,100);
 8001590:	2364      	movs	r3, #100	@ 0x64
 8001592:	2210      	movs	r2, #16
 8001594:	490c      	ldr	r1, [pc, #48]	@ (80015c8 <ParseCommand+0xe8>)
 8001596:	480a      	ldr	r0, [pc, #40]	@ (80015c0 <ParseCommand+0xe0>)
 8001598:	f003 fa16 	bl	80049c8 <HAL_UART_Transmit>

	processing=0;
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <ParseCommand+0xec>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000085c 	.word	0x2000085c
 80015b0:	0800cf04 	.word	0x0800cf04
 80015b4:	20000008 	.word	0x20000008
 80015b8:	200008f8 	.word	0x200008f8
 80015bc:	0800cf08 	.word	0x0800cf08
 80015c0:	2000094c 	.word	0x2000094c
 80015c4:	20000268 	.word	0x20000268
 80015c8:	0800cf18 	.word	0x0800cf18
 80015cc:	20000858 	.word	0x20000858

080015d0 <LoraMenu>:

//Lora Menu Code
void LoraMenu(char* arg){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

	currentMenu=Lora_Menu;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <LoraMenu+0x88>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;38;2;25;25;112;107m--------------- LORA Menu ---------------\033[0m\n \r\n");
 80015de:	491f      	ldr	r1, [pc, #124]	@ (800165c <LoraMenu+0x8c>)
 80015e0:	481f      	ldr	r0, [pc, #124]	@ (8001660 <LoraMenu+0x90>)
 80015e2:	f008 f99d 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80015e6:	481e      	ldr	r0, [pc, #120]	@ (8001660 <LoraMenu+0x90>)
 80015e8:	f7fe fe52 	bl	8000290 <strlen>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	2364      	movs	r3, #100	@ 0x64
 80015f2:	491b      	ldr	r1, [pc, #108]	@ (8001660 <LoraMenu+0x90>)
 80015f4:	481b      	ldr	r0, [pc, #108]	@ (8001664 <LoraMenu+0x94>)
 80015f6:	f003 f9e7 	bl	80049c8 <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e023      	b.n	8001648 <LoraMenu+0x78>
	{if (cmd_list[l].MenuIndex==Lora_Menu)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	4a19      	ldr	r2, [pc, #100]	@ (8001668 <LoraMenu+0x98>)
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	330c      	adds	r3, #12
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d118      	bne.n	8001642 <LoraMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	4a15      	ldr	r2, [pc, #84]	@ (8001668 <LoraMenu+0x98>)
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	4413      	add	r3, r2
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	4912      	ldr	r1, [pc, #72]	@ (8001668 <LoraMenu+0x98>)
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	440b      	add	r3, r1
 8001622:	3304      	adds	r3, #4
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4911      	ldr	r1, [pc, #68]	@ (800166c <LoraMenu+0x9c>)
 8001628:	480d      	ldr	r0, [pc, #52]	@ (8001660 <LoraMenu+0x90>)
 800162a:	f008 f979 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 800162e:	480c      	ldr	r0, [pc, #48]	@ (8001660 <LoraMenu+0x90>)
 8001630:	f7fe fe2e 	bl	8000290 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	2364      	movs	r3, #100	@ 0x64
 800163a:	4909      	ldr	r1, [pc, #36]	@ (8001660 <LoraMenu+0x90>)
 800163c:	4809      	ldr	r0, [pc, #36]	@ (8001664 <LoraMenu+0x94>)
 800163e:	f003 f9c3 	bl	80049c8 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	3301      	adds	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b25      	cmp	r3, #37	@ 0x25
 800164c:	d9d8      	bls.n	8001600 <LoraMenu+0x30>
	}
	}
}
 800164e:	bf00      	nop
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200008f8 	.word	0x200008f8
 800165c:	0800cf28 	.word	0x0800cf28
 8001660:	2000078c 	.word	0x2000078c
 8001664:	2000094c 	.word	0x2000094c
 8001668:	20000008 	.word	0x20000008
 800166c:	0800cef4 	.word	0x0800cef4

08001670 <SetSF_f>:
void SetSF_f(char* arg){
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	uint8_t MAX_TH_SF=12;
 8001678:	230c      	movs	r3, #12
 800167a:	73bb      	strb	r3, [r7, #14]
	uint8_t MIN_TH_SF=5;
 800167c:	2305      	movs	r3, #5
 800167e:	737b      	strb	r3, [r7, #13]
	uint8_t success = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]

	if (tokens[1] != NULL && strlen(tokens[1]) < 3) {
 8001684:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <SetSF_f+0x90>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d026      	beq.n	80016da <SetSF_f+0x6a>
 800168c:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <SetSF_f+0x90>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fdfd 	bl	8000290 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	2b02      	cmp	r3, #2
 800169a:	d81e      	bhi.n	80016da <SetSF_f+0x6a>
		int sf_new_value = atoi(tokens[1]);
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <SetSF_f+0x90>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f006 fd8c 	bl	80081be <atoi>
 80016a6:	60b8      	str	r0, [r7, #8]

		if (sf_new_value >= MIN_TH_SF && sf_new_value <= MAX_TH_SF) {
 80016a8:	7b7b      	ldrb	r3, [r7, #13]
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	db14      	blt.n	80016da <SetSF_f+0x6a>
 80016b0:	7bbb      	ldrb	r3, [r7, #14]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dc10      	bgt.n	80016da <SetSF_f+0x6a>
			sprintf((char*)cmd_buff, "SF VALUE SET TO %d SUCCESSFULLY\r\n", sf_new_value);
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	4912      	ldr	r1, [pc, #72]	@ (8001704 <SetSF_f+0x94>)
 80016bc:	4812      	ldr	r0, [pc, #72]	@ (8001708 <SetSF_f+0x98>)
 80016be:	f008 f92f 	bl	8009920 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80016c2:	4811      	ldr	r0, [pc, #68]	@ (8001708 <SetSF_f+0x98>)
 80016c4:	f7fe fde4 	bl	8000290 <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	2364      	movs	r3, #100	@ 0x64
 80016ce:	490e      	ldr	r1, [pc, #56]	@ (8001708 <SetSF_f+0x98>)
 80016d0:	480e      	ldr	r0, [pc, #56]	@ (800170c <SetSF_f+0x9c>)
 80016d2:	f003 f979 	bl	80049c8 <HAL_UART_Transmit>
			success = 1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (success==0) {
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <SetSF_f+0x7c>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 80016e0:	2364      	movs	r3, #100	@ 0x64
 80016e2:	2210      	movs	r2, #16
 80016e4:	490a      	ldr	r1, [pc, #40]	@ (8001710 <SetSF_f+0xa0>)
 80016e6:	4809      	ldr	r0, [pc, #36]	@ (800170c <SetSF_f+0x9c>)
 80016e8:	f003 f96e 	bl	80049c8 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));  // always clear at the end
 80016ec:	2264      	movs	r2, #100	@ 0x64
 80016ee:	2100      	movs	r1, #0
 80016f0:	4805      	ldr	r0, [pc, #20]	@ (8001708 <SetSF_f+0x98>)
 80016f2:	f008 f97a 	bl	80099ea <memset>
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000085c 	.word	0x2000085c
 8001704:	0800cf74 	.word	0x0800cf74
 8001708:	20000888 	.word	0x20000888
 800170c:	2000094c 	.word	0x2000094c
 8001710:	0800cf98 	.word	0x0800cf98

08001714 <GetSF_f>:
	LoraValues.sf_l=0x0C;
}

}*/
void GetSF_f(char* arg)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"SF VALUE IS %d \r\nSF DEFAULT VALUE IS %d",sf_new_value,LoraValues.sf_l);
 800171c:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <GetSF_f+0x40>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <GetSF_f+0x44>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	490d      	ldr	r1, [pc, #52]	@ (800175c <GetSF_f+0x48>)
 8001728:	480d      	ldr	r0, [pc, #52]	@ (8001760 <GetSF_f+0x4c>)
 800172a:	f008 f8f9 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800172e:	480c      	ldr	r0, [pc, #48]	@ (8001760 <GetSF_f+0x4c>)
 8001730:	f7fe fdae 	bl	8000290 <strlen>
 8001734:	4603      	mov	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	2364      	movs	r3, #100	@ 0x64
 800173a:	4909      	ldr	r1, [pc, #36]	@ (8001760 <GetSF_f+0x4c>)
 800173c:	4809      	ldr	r0, [pc, #36]	@ (8001764 <GetSF_f+0x50>)
 800173e:	f003 f943 	bl	80049c8 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001742:	2264      	movs	r2, #100	@ 0x64
 8001744:	2100      	movs	r1, #0
 8001746:	4806      	ldr	r0, [pc, #24]	@ (8001760 <GetSF_f+0x4c>)
 8001748:	f008 f94f 	bl	80099ea <memset>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000884 	.word	0x20000884
 8001758:	20000004 	.word	0x20000004
 800175c:	0800cfa8 	.word	0x0800cfa8
 8001760:	20000888 	.word	0x20000888
 8001764:	2000094c 	.word	0x2000094c

08001768 <SetCR_f>:
void SetCR_f(char* arg)
{   uint8_t cr_flag=0;
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b089      	sub	sp, #36	@ 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	2300      	movs	r3, #0
 8001772:	77fb      	strb	r3, [r7, #31]
char* CR_Values[]={"1","2","3","4"};
 8001774:	4b28      	ldr	r3, [pc, #160]	@ (8001818 <SetCR_f+0xb0>)
 8001776:	f107 040c 	add.w	r4, r7, #12
 800177a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800177c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
for (uint8_t cr=0 ; cr<sizeof(CR_Values) / sizeof(CR_Values[0]);cr++)
 8001780:	2300      	movs	r3, #0
 8001782:	77bb      	strb	r3, [r7, #30]
 8001784:	e037      	b.n	80017f6 <SetCR_f+0x8e>
{if (tokens[1]!=NULL &&
 8001786:	4b25      	ldr	r3, [pc, #148]	@ (800181c <SetCR_f+0xb4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d030      	beq.n	80017f0 <SetCR_f+0x88>
		strcmp(tokens[1],CR_Values[cr])==0)
 800178e:	4b23      	ldr	r3, [pc, #140]	@ (800181c <SetCR_f+0xb4>)
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	7fbb      	ldrb	r3, [r7, #30]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	3320      	adds	r3, #32
 8001798:	443b      	add	r3, r7
 800179a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800179e:	4619      	mov	r1, r3
 80017a0:	4610      	mov	r0, r2
 80017a2:	f7fe fd15 	bl	80001d0 <strcmp>
 80017a6:	4603      	mov	r3, r0
{if (tokens[1]!=NULL &&
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d121      	bne.n	80017f0 <SetCR_f+0x88>
{Cr_new_value=atoi(tokens[1]);
 80017ac:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <SetCR_f+0xb4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f006 fd04 	bl	80081be <atoi>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <SetCR_f+0xb8>)
 80017bc:	701a      	strb	r2, [r3, #0]
cr_flag=1;
 80017be:	2301      	movs	r3, #1
 80017c0:	77fb      	strb	r3, [r7, #31]
sprintf((char*)cmd_buff, "CR VALUE SET TO %d SUCCESSFULLY\r\n", Cr_new_value);
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <SetCR_f+0xb8>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	4916      	ldr	r1, [pc, #88]	@ (8001824 <SetCR_f+0xbc>)
 80017ca:	4817      	ldr	r0, [pc, #92]	@ (8001828 <SetCR_f+0xc0>)
 80017cc:	f008 f8a8 	bl	8009920 <siprintf>
HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80017d0:	4815      	ldr	r0, [pc, #84]	@ (8001828 <SetCR_f+0xc0>)
 80017d2:	f7fe fd5d 	bl	8000290 <strlen>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	2364      	movs	r3, #100	@ 0x64
 80017dc:	4912      	ldr	r1, [pc, #72]	@ (8001828 <SetCR_f+0xc0>)
 80017de:	4813      	ldr	r0, [pc, #76]	@ (800182c <SetCR_f+0xc4>)
 80017e0:	f003 f8f2 	bl	80049c8 <HAL_UART_Transmit>
memset(cmd_buff,0,sizeof(cmd_buff));
 80017e4:	2264      	movs	r2, #100	@ 0x64
 80017e6:	2100      	movs	r1, #0
 80017e8:	480f      	ldr	r0, [pc, #60]	@ (8001828 <SetCR_f+0xc0>)
 80017ea:	f008 f8fe 	bl	80099ea <memset>
break;
 80017ee:	e005      	b.n	80017fc <SetCR_f+0x94>
for (uint8_t cr=0 ; cr<sizeof(CR_Values) / sizeof(CR_Values[0]);cr++)
 80017f0:	7fbb      	ldrb	r3, [r7, #30]
 80017f2:	3301      	adds	r3, #1
 80017f4:	77bb      	strb	r3, [r7, #30]
 80017f6:	7fbb      	ldrb	r3, [r7, #30]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d9c4      	bls.n	8001786 <SetCR_f+0x1e>
}
}

if (cr_flag==0)
 80017fc:	7ffb      	ldrb	r3, [r7, #31]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <SetCR_f+0xa6>
	HAL_UART_Transmit(&huart2,(const uint8_t*)"WRONG CR VALUE\r\n",strlen("WRONG CR VALUE\r\n"), 100);
 8001802:	2364      	movs	r3, #100	@ 0x64
 8001804:	2210      	movs	r2, #16
 8001806:	490a      	ldr	r1, [pc, #40]	@ (8001830 <SetCR_f+0xc8>)
 8001808:	4808      	ldr	r0, [pc, #32]	@ (800182c <SetCR_f+0xc4>)
 800180a:	f003 f8dd 	bl	80049c8 <HAL_UART_Transmit>
}
 800180e:	bf00      	nop
 8001810:	3724      	adds	r7, #36	@ 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd90      	pop	{r4, r7, pc}
 8001816:	bf00      	nop
 8001818:	0800d018 	.word	0x0800d018
 800181c:	2000085c 	.word	0x2000085c
 8001820:	200008ec 	.word	0x200008ec
 8001824:	0800cfd0 	.word	0x0800cfd0
 8001828:	20000888 	.word	0x20000888
 800182c:	2000094c 	.word	0x2000094c
 8001830:	0800cff4 	.word	0x0800cff4

08001834 <GetCR_f>:

void GetCR_f(char* arg)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"CR VALUE IS %d \r\n",Cr_new_value);
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <GetCR_f+0x3c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	490c      	ldr	r1, [pc, #48]	@ (8001874 <GetCR_f+0x40>)
 8001844:	480c      	ldr	r0, [pc, #48]	@ (8001878 <GetCR_f+0x44>)
 8001846:	f008 f86b 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800184a:	480b      	ldr	r0, [pc, #44]	@ (8001878 <GetCR_f+0x44>)
 800184c:	f7fe fd20 	bl	8000290 <strlen>
 8001850:	4603      	mov	r3, r0
 8001852:	b29a      	uxth	r2, r3
 8001854:	2364      	movs	r3, #100	@ 0x64
 8001856:	4908      	ldr	r1, [pc, #32]	@ (8001878 <GetCR_f+0x44>)
 8001858:	4808      	ldr	r0, [pc, #32]	@ (800187c <GetCR_f+0x48>)
 800185a:	f003 f8b5 	bl	80049c8 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 800185e:	2264      	movs	r2, #100	@ 0x64
 8001860:	2100      	movs	r1, #0
 8001862:	4805      	ldr	r0, [pc, #20]	@ (8001878 <GetCR_f+0x44>)
 8001864:	f008 f8c1 	bl	80099ea <memset>
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200008ec 	.word	0x200008ec
 8001874:	0800d028 	.word	0x0800d028
 8001878:	20000888 	.word	0x20000888
 800187c:	2000094c 	.word	0x2000094c

08001880 <SetBW_f>:
void SetBW_f(char* arg)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	uint8_t bw_flag=0;
 8001888:	2300      	movs	r3, #0
 800188a:	75fb      	strb	r3, [r7, #23]
	char* BW_Values[]={"4","5","6"};
 800188c:	4a28      	ldr	r2, [pc, #160]	@ (8001930 <SetBW_f+0xb0>)
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	ca07      	ldmia	r2, {r0, r1, r2}
 8001894:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint8_t bw=0 ; bw<sizeof(BW_Values) / sizeof(BW_Values[0]);bw++)
 8001898:	2300      	movs	r3, #0
 800189a:	75bb      	strb	r3, [r7, #22]
 800189c:	e037      	b.n	800190e <SetBW_f+0x8e>
	{if (tokens[1]!=NULL &&
 800189e:	4b25      	ldr	r3, [pc, #148]	@ (8001934 <SetBW_f+0xb4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d030      	beq.n	8001908 <SetBW_f+0x88>
			strcmp(tokens[1],BW_Values[bw])==0)
 80018a6:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <SetBW_f+0xb4>)
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	7dbb      	ldrb	r3, [r7, #22]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	3318      	adds	r3, #24
 80018b0:	443b      	add	r3, r7
 80018b2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4610      	mov	r0, r2
 80018ba:	f7fe fc89 	bl	80001d0 <strcmp>
 80018be:	4603      	mov	r3, r0
	{if (tokens[1]!=NULL &&
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d121      	bne.n	8001908 <SetBW_f+0x88>
	{bw_new_value=atoi(tokens[1]);
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <SetBW_f+0xb4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f006 fc78 	bl	80081be <atoi>
 80018ce:	4603      	mov	r3, r0
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <SetBW_f+0xb8>)
 80018d4:	701a      	strb	r2, [r3, #0]
	bw_flag=1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	75fb      	strb	r3, [r7, #23]
	sprintf((char*)cmd_buff, "BW VALUE SET TO %d SUCCESSFULLY\r\n", bw_new_value);
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <SetBW_f+0xb8>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4916      	ldr	r1, [pc, #88]	@ (800193c <SetBW_f+0xbc>)
 80018e2:	4817      	ldr	r0, [pc, #92]	@ (8001940 <SetBW_f+0xc0>)
 80018e4:	f008 f81c 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80018e8:	4815      	ldr	r0, [pc, #84]	@ (8001940 <SetBW_f+0xc0>)
 80018ea:	f7fe fcd1 	bl	8000290 <strlen>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	2364      	movs	r3, #100	@ 0x64
 80018f4:	4912      	ldr	r1, [pc, #72]	@ (8001940 <SetBW_f+0xc0>)
 80018f6:	4813      	ldr	r0, [pc, #76]	@ (8001944 <SetBW_f+0xc4>)
 80018f8:	f003 f866 	bl	80049c8 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80018fc:	2264      	movs	r2, #100	@ 0x64
 80018fe:	2100      	movs	r1, #0
 8001900:	480f      	ldr	r0, [pc, #60]	@ (8001940 <SetBW_f+0xc0>)
 8001902:	f008 f872 	bl	80099ea <memset>
	break;
 8001906:	e005      	b.n	8001914 <SetBW_f+0x94>
	for (uint8_t bw=0 ; bw<sizeof(BW_Values) / sizeof(BW_Values[0]);bw++)
 8001908:	7dbb      	ldrb	r3, [r7, #22]
 800190a:	3301      	adds	r3, #1
 800190c:	75bb      	strb	r3, [r7, #22]
 800190e:	7dbb      	ldrb	r3, [r7, #22]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d9c4      	bls.n	800189e <SetBW_f+0x1e>
	}
	}

	if (bw_flag==0)
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <SetBW_f+0xa6>
		HAL_UART_Transmit(&huart2,(const uint8_t*)"WRONG BW VALUE\r\n",strlen("WRONG CR VALUE\r\n"), 100);
 800191a:	2364      	movs	r3, #100	@ 0x64
 800191c:	2210      	movs	r2, #16
 800191e:	490a      	ldr	r1, [pc, #40]	@ (8001948 <SetBW_f+0xc8>)
 8001920:	4808      	ldr	r0, [pc, #32]	@ (8001944 <SetBW_f+0xc4>)
 8001922:	f003 f851 	bl	80049c8 <HAL_UART_Transmit>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	0800d07c 	.word	0x0800d07c
 8001934:	2000085c 	.word	0x2000085c
 8001938:	200008ed 	.word	0x200008ed
 800193c:	0800d03c 	.word	0x0800d03c
 8001940:	20000888 	.word	0x20000888
 8001944:	2000094c 	.word	0x2000094c
 8001948:	0800d060 	.word	0x0800d060

0800194c <GetBW_f>:
void GetBW_f(char* arg)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"BW VALUE IS : %d \r\nBW DEFAULT VALUE IS : %d\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",bw_new_value,LoraValues.bw_l);
 8001954:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <GetBW_f+0x40>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <GetBW_f+0x44>)
 800195c:	789b      	ldrb	r3, [r3, #2]
 800195e:	490d      	ldr	r1, [pc, #52]	@ (8001994 <GetBW_f+0x48>)
 8001960:	480d      	ldr	r0, [pc, #52]	@ (8001998 <GetBW_f+0x4c>)
 8001962:	f007 ffdd 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001966:	480c      	ldr	r0, [pc, #48]	@ (8001998 <GetBW_f+0x4c>)
 8001968:	f7fe fc92 	bl	8000290 <strlen>
 800196c:	4603      	mov	r3, r0
 800196e:	b29a      	uxth	r2, r3
 8001970:	2364      	movs	r3, #100	@ 0x64
 8001972:	4909      	ldr	r1, [pc, #36]	@ (8001998 <GetBW_f+0x4c>)
 8001974:	4809      	ldr	r0, [pc, #36]	@ (800199c <GetBW_f+0x50>)
 8001976:	f003 f827 	bl	80049c8 <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 800197a:	2264      	movs	r2, #100	@ 0x64
 800197c:	2100      	movs	r1, #0
 800197e:	4806      	ldr	r0, [pc, #24]	@ (8001998 <GetBW_f+0x4c>)
 8001980:	f008 f833 	bl	80099ea <memset>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200008ed 	.word	0x200008ed
 8001990:	20000004 	.word	0x20000004
 8001994:	0800d088 	.word	0x0800d088
 8001998:	20000888 	.word	0x20000888
 800199c:	2000094c 	.word	0x2000094c

080019a0 <GPSMenu>:
//GPS Menu
void GPSMenu(char* arg){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	currentMenu=GPS_Menu;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a28 <GPSMenu+0x88>)
 80019aa:	2202      	movs	r2, #2
 80019ac:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;34;107m-----------------GPS Menu---------------\033[0m\n \r\n");
 80019ae:	491f      	ldr	r1, [pc, #124]	@ (8001a2c <GPSMenu+0x8c>)
 80019b0:	481f      	ldr	r0, [pc, #124]	@ (8001a30 <GPSMenu+0x90>)
 80019b2:	f007 ffb5 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80019b6:	481e      	ldr	r0, [pc, #120]	@ (8001a30 <GPSMenu+0x90>)
 80019b8:	f7fe fc6a 	bl	8000290 <strlen>
 80019bc:	4603      	mov	r3, r0
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2364      	movs	r3, #100	@ 0x64
 80019c2:	491b      	ldr	r1, [pc, #108]	@ (8001a30 <GPSMenu+0x90>)
 80019c4:	481b      	ldr	r0, [pc, #108]	@ (8001a34 <GPSMenu+0x94>)
 80019c6:	f002 ffff 	bl	80049c8 <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	e023      	b.n	8001a18 <GPSMenu+0x78>
	{if (cmd_list[l].MenuIndex==GPS_Menu)
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <GPSMenu+0x98>)
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	4413      	add	r3, r2
 80019d8:	330c      	adds	r3, #12
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d118      	bne.n	8001a12 <GPSMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	4a15      	ldr	r2, [pc, #84]	@ (8001a38 <GPSMenu+0x98>)
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	4413      	add	r3, r2
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4912      	ldr	r1, [pc, #72]	@ (8001a38 <GPSMenu+0x98>)
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	440b      	add	r3, r1
 80019f2:	3304      	adds	r3, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4911      	ldr	r1, [pc, #68]	@ (8001a3c <GPSMenu+0x9c>)
 80019f8:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <GPSMenu+0x90>)
 80019fa:	f007 ff91 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80019fe:	480c      	ldr	r0, [pc, #48]	@ (8001a30 <GPSMenu+0x90>)
 8001a00:	f7fe fc46 	bl	8000290 <strlen>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	2364      	movs	r3, #100	@ 0x64
 8001a0a:	4909      	ldr	r1, [pc, #36]	@ (8001a30 <GPSMenu+0x90>)
 8001a0c:	4809      	ldr	r0, [pc, #36]	@ (8001a34 <GPSMenu+0x94>)
 8001a0e:	f002 ffdb 	bl	80049c8 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	3301      	adds	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b25      	cmp	r3, #37	@ 0x25
 8001a1c:	d9d8      	bls.n	80019d0 <GPSMenu+0x30>
	}
	}
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200008f8 	.word	0x200008f8
 8001a2c:	0800d0dc 	.word	0x0800d0dc
 8001a30:	2000078c 	.word	0x2000078c
 8001a34:	2000094c 	.word	0x2000094c
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	0800cef4 	.word	0x0800cef4

08001a40 <SetAltGPS_f>:
void SetAltGPS_f(char* arg){
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	;
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <GetAltGPS_f>:
void GetAltGPS_f(char* arg){
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	;
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <SetLatGPS_f>:
void SetLatGPS_f(char* arg){
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	;
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <GetLatGPS_f>:
void GetLatGPS_f(char* arg){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	;
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <SetTimeGPS_f>:
void SetTimeGPS_f(char* arg){
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	;
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <GetTimeGPS_f>:
void GetTimeGPS_f(char* arg){
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	;
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <SensorsMenu>:

void SensorsMenu(char* arg){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	currentMenu=Sensors_Menu;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <SensorsMenu+0x88>)
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;32;107m--------------Sensors Menu---------------\033[0m\n \r\n");
 8001ac6:	491f      	ldr	r1, [pc, #124]	@ (8001b44 <SensorsMenu+0x8c>)
 8001ac8:	481f      	ldr	r0, [pc, #124]	@ (8001b48 <SensorsMenu+0x90>)
 8001aca:	f007 ff29 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001ace:	481e      	ldr	r0, [pc, #120]	@ (8001b48 <SensorsMenu+0x90>)
 8001ad0:	f7fe fbde 	bl	8000290 <strlen>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	2364      	movs	r3, #100	@ 0x64
 8001ada:	491b      	ldr	r1, [pc, #108]	@ (8001b48 <SensorsMenu+0x90>)
 8001adc:	481b      	ldr	r0, [pc, #108]	@ (8001b4c <SensorsMenu+0x94>)
 8001ade:	f002 ff73 	bl	80049c8 <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	e023      	b.n	8001b30 <SensorsMenu+0x78>
	{if (cmd_list[l].MenuIndex==Sensors_Menu)
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	4a19      	ldr	r2, [pc, #100]	@ (8001b50 <SensorsMenu+0x98>)
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4413      	add	r3, r2
 8001af0:	330c      	adds	r3, #12
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d118      	bne.n	8001b2a <SensorsMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	4a15      	ldr	r2, [pc, #84]	@ (8001b50 <SensorsMenu+0x98>)
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	4413      	add	r3, r2
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	4912      	ldr	r1, [pc, #72]	@ (8001b50 <SensorsMenu+0x98>)
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	440b      	add	r3, r1
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4911      	ldr	r1, [pc, #68]	@ (8001b54 <SensorsMenu+0x9c>)
 8001b10:	480d      	ldr	r0, [pc, #52]	@ (8001b48 <SensorsMenu+0x90>)
 8001b12:	f007 ff05 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001b16:	480c      	ldr	r0, [pc, #48]	@ (8001b48 <SensorsMenu+0x90>)
 8001b18:	f7fe fbba 	bl	8000290 <strlen>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	2364      	movs	r3, #100	@ 0x64
 8001b22:	4909      	ldr	r1, [pc, #36]	@ (8001b48 <SensorsMenu+0x90>)
 8001b24:	4809      	ldr	r0, [pc, #36]	@ (8001b4c <SensorsMenu+0x94>)
 8001b26:	f002 ff4f 	bl	80049c8 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b25      	cmp	r3, #37	@ 0x25
 8001b34:	d9d8      	bls.n	8001ae8 <SensorsMenu+0x30>
	}
	}
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200008f8 	.word	0x200008f8
 8001b44:	0800d118 	.word	0x0800d118
 8001b48:	2000078c 	.word	0x2000078c
 8001b4c:	2000094c 	.word	0x2000094c
 8001b50:	20000008 	.word	0x20000008
 8001b54:	0800cef4 	.word	0x0800cef4

08001b58 <SetSoilTemp_f>:

void SetSoilTemp_f(char* arg){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	uint8_t soiltemp = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8001b64:	4b28      	ldr	r3, [pc, #160]	@ (8001c08 <SetSoilTemp_f+0xb0>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d03a      	beq.n	8001be2 <SetSoilTemp_f+0x8a>
 8001b6c:	4b26      	ldr	r3, [pc, #152]	@ (8001c08 <SetSoilTemp_f+0xb0>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fb8d 	bl	8000290 <strlen>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d832      	bhi.n	8001be2 <SetSoilTemp_f+0x8a>
		SoilTemp_New_Value = atof(tokens[1]);
 8001b7c:	4b22      	ldr	r3, [pc, #136]	@ (8001c08 <SetSoilTemp_f+0xb0>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f006 fb19 	bl	80081b8 <atof>
 8001b86:	ec53 2b10 	vmov	r2, r3, d0
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7ff f83b 	bl	8000c08 <__aeabi_d2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a1d      	ldr	r2, [pc, #116]	@ (8001c0c <SetSoilTemp_f+0xb4>)
 8001b96:	6013      	str	r3, [r2, #0]

		if (SoilTemp_New_Value >= MIN_SOIL_TEMP && sf_new_value <= MAX_SOIL_TEMP) {
 8001b98:	4b1c      	ldr	r3, [pc, #112]	@ (8001c0c <SetSoilTemp_f+0xb4>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8001ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	db1a      	blt.n	8001be2 <SetSoilTemp_f+0x8a>
 8001bac:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <SetSoilTemp_f+0xb8>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b50      	cmp	r3, #80	@ 0x50
 8001bb2:	d816      	bhi.n	8001be2 <SetSoilTemp_f+0x8a>
			sprintf((char*)cmd_buff, "SOIL TEMPERATURE VALUE SET TO %.1f°C SUCCESSFULLY\r\n", SoilTemp_New_Value);
 8001bb4:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <SetSoilTemp_f+0xb4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcd5 	bl	8000568 <__aeabi_f2d>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4914      	ldr	r1, [pc, #80]	@ (8001c14 <SetSoilTemp_f+0xbc>)
 8001bc4:	4814      	ldr	r0, [pc, #80]	@ (8001c18 <SetSoilTemp_f+0xc0>)
 8001bc6:	f007 feab 	bl	8009920 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001bca:	4813      	ldr	r0, [pc, #76]	@ (8001c18 <SetSoilTemp_f+0xc0>)
 8001bcc:	f7fe fb60 	bl	8000290 <strlen>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	2364      	movs	r3, #100	@ 0x64
 8001bd6:	4910      	ldr	r1, [pc, #64]	@ (8001c18 <SetSoilTemp_f+0xc0>)
 8001bd8:	4810      	ldr	r0, [pc, #64]	@ (8001c1c <SetSoilTemp_f+0xc4>)
 8001bda:	f002 fef5 	bl	80049c8 <HAL_UART_Transmit>
			soiltemp = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (soiltemp==0) {
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <SetSoilTemp_f+0x9c>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8001be8:	2364      	movs	r3, #100	@ 0x64
 8001bea:	2210      	movs	r2, #16
 8001bec:	490c      	ldr	r1, [pc, #48]	@ (8001c20 <SetSoilTemp_f+0xc8>)
 8001bee:	480b      	ldr	r0, [pc, #44]	@ (8001c1c <SetSoilTemp_f+0xc4>)
 8001bf0:	f002 feea 	bl	80049c8 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));  // always clear at the end
 8001bf4:	2264      	movs	r2, #100	@ 0x64
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <SetSoilTemp_f+0xc0>)
 8001bfa:	f007 fef6 	bl	80099ea <memset>
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2000085c 	.word	0x2000085c
 8001c0c:	200008f0 	.word	0x200008f0
 8001c10:	20000884 	.word	0x20000884
 8001c14:	0800d158 	.word	0x0800d158
 8001c18:	20000888 	.word	0x20000888
 8001c1c:	2000094c 	.word	0x2000094c
 8001c20:	0800cf98 	.word	0x0800cf98

08001c24 <GetSoilTemp_f>:

void GetSoilTemp_f(char* arg){
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	;
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <SetAirTemp_f>:
void SetAirTemp_f(char* arg) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	uint8_t airtemp = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8001c44:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <SetAirTemp_f+0xb0>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d03a      	beq.n	8001cc2 <SetAirTemp_f+0x8a>
 8001c4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <SetAirTemp_f+0xb0>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fb1d 	bl	8000290 <strlen>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d832      	bhi.n	8001cc2 <SetAirTemp_f+0x8a>
		AirTemp_New_Value = atof(tokens[1]);
 8001c5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <SetAirTemp_f+0xb0>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f006 faa9 	bl	80081b8 <atof>
 8001c66:	ec53 2b10 	vmov	r2, r3, d0
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe ffcb 	bl	8000c08 <__aeabi_d2f>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4a1d      	ldr	r2, [pc, #116]	@ (8001cec <SetAirTemp_f+0xb4>)
 8001c76:	6013      	str	r3, [r2, #0]

		if (AirTemp_New_Value >= MIN_SOIL_TEMP && sf_new_value <= MAX_SOIL_TEMP) {
 8001c78:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <SetAirTemp_f+0xb4>)
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
 8001c7e:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8001c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	db1a      	blt.n	8001cc2 <SetAirTemp_f+0x8a>
 8001c8c:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <SetAirTemp_f+0xb8>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b50      	cmp	r3, #80	@ 0x50
 8001c92:	d816      	bhi.n	8001cc2 <SetAirTemp_f+0x8a>
			sprintf((char*)cmd_buff, "AIR TEMPERATURE VALUE SET TO %.1f°C SUCCESSFULLY\r\n", AirTemp_New_Value);
 8001c94:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <SetAirTemp_f+0xb4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc65 	bl	8000568 <__aeabi_f2d>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4914      	ldr	r1, [pc, #80]	@ (8001cf4 <SetAirTemp_f+0xbc>)
 8001ca4:	4814      	ldr	r0, [pc, #80]	@ (8001cf8 <SetAirTemp_f+0xc0>)
 8001ca6:	f007 fe3b 	bl	8009920 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001caa:	4813      	ldr	r0, [pc, #76]	@ (8001cf8 <SetAirTemp_f+0xc0>)
 8001cac:	f7fe faf0 	bl	8000290 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	2364      	movs	r3, #100	@ 0x64
 8001cb6:	4910      	ldr	r1, [pc, #64]	@ (8001cf8 <SetAirTemp_f+0xc0>)
 8001cb8:	4810      	ldr	r0, [pc, #64]	@ (8001cfc <SetAirTemp_f+0xc4>)
 8001cba:	f002 fe85 	bl	80049c8 <HAL_UART_Transmit>
			airtemp = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (airtemp==0) {
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <SetAirTemp_f+0x9c>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8001cc8:	2364      	movs	r3, #100	@ 0x64
 8001cca:	2210      	movs	r2, #16
 8001ccc:	490c      	ldr	r1, [pc, #48]	@ (8001d00 <SetAirTemp_f+0xc8>)
 8001cce:	480b      	ldr	r0, [pc, #44]	@ (8001cfc <SetAirTemp_f+0xc4>)
 8001cd0:	f002 fe7a 	bl	80049c8 <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 8001cd4:	2264      	movs	r2, #100	@ 0x64
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4807      	ldr	r0, [pc, #28]	@ (8001cf8 <SetAirTemp_f+0xc0>)
 8001cda:	f007 fe86 	bl	80099ea <memset>
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000085c 	.word	0x2000085c
 8001cec:	200008f4 	.word	0x200008f4
 8001cf0:	20000884 	.word	0x20000884
 8001cf4:	0800d190 	.word	0x0800d190
 8001cf8:	20000888 	.word	0x20000888
 8001cfc:	2000094c 	.word	0x2000094c
 8001d00:	0800cf98 	.word	0x0800cf98

08001d04 <GetAirTemp_f>:
void GetAirTemp_f(char* arg){
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	;
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <SetRelativeHumidity_f>:
void SetRelativeHumidity_f(char* arg){
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	;
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <GetRelativeHumidity_f>:
void GetRelativeHumidity_f(char* arg){
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	;
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <SetSoilHumidity_f>:
void SetSoilHumidity_f(char* arg){
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	;
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <GetSoilHumidity_f>:
void GetSoilHumidity_f(char* arg){
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	;
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <SetWindSpeed_f>:
void SetWindSpeed_f(char* arg){
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	;
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <GetWindSpeed_f>:
void GetWindSpeed_f(char* arg){
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	;
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <SetRadiation_f>:
void SetRadiation_f(char* arg){
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	;
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <GetRadiation_f>:
void GetRadiation_f(char* arg){
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	;
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <SetKc_f>:
void SetKc_f(char* arg){
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	;
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <GetKc_f>:
void GetKc_f(char* arg){
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	;
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <SetKp_f>:
void SetKp_f(char* arg){
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	;
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <GetKp_f>:
void GetKp_f(char* arg){
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	;
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <GetET0_f>:
void GetET0_f(char* arg){
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	;
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <SetET0_f>:
void SetET0_f(char* arg){
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	;
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <SetAirPressure_f>:
void SetAirPressure_f(char* arg){
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	;

}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <GetAirPressure_f>:
void GetAirPressure_f(char* arg){
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	;

}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <SysConfigMenu>:
void SysConfigMenu(char* arg){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	currentMenu=SysConfig_Menu;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <SysConfigMenu+0x88>)
 8001e62:	2204      	movs	r2, #4
 8001e64:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"------------------ SYSTEM CONFIGURATION MENU -----------------\r\n");
 8001e66:	491f      	ldr	r1, [pc, #124]	@ (8001ee4 <SysConfigMenu+0x8c>)
 8001e68:	481f      	ldr	r0, [pc, #124]	@ (8001ee8 <SysConfigMenu+0x90>)
 8001e6a:	f007 fd59 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001e6e:	481e      	ldr	r0, [pc, #120]	@ (8001ee8 <SysConfigMenu+0x90>)
 8001e70:	f7fe fa0e 	bl	8000290 <strlen>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	2364      	movs	r3, #100	@ 0x64
 8001e7a:	491b      	ldr	r1, [pc, #108]	@ (8001ee8 <SysConfigMenu+0x90>)
 8001e7c:	481b      	ldr	r0, [pc, #108]	@ (8001eec <SysConfigMenu+0x94>)
 8001e7e:	f002 fda3 	bl	80049c8 <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	e023      	b.n	8001ed0 <SysConfigMenu+0x78>
	{if (cmd_list[l].MenuIndex==SysConfig_Menu)
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	4a19      	ldr	r2, [pc, #100]	@ (8001ef0 <SysConfigMenu+0x98>)
 8001e8c:	011b      	lsls	r3, r3, #4
 8001e8e:	4413      	add	r3, r2
 8001e90:	330c      	adds	r3, #12
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d118      	bne.n	8001eca <SysConfigMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	4a15      	ldr	r2, [pc, #84]	@ (8001ef0 <SysConfigMenu+0x98>)
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	4413      	add	r3, r2
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	4912      	ldr	r1, [pc, #72]	@ (8001ef0 <SysConfigMenu+0x98>)
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3304      	adds	r3, #4
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4911      	ldr	r1, [pc, #68]	@ (8001ef4 <SysConfigMenu+0x9c>)
 8001eb0:	480d      	ldr	r0, [pc, #52]	@ (8001ee8 <SysConfigMenu+0x90>)
 8001eb2:	f007 fd35 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001eb6:	480c      	ldr	r0, [pc, #48]	@ (8001ee8 <SysConfigMenu+0x90>)
 8001eb8:	f7fe f9ea 	bl	8000290 <strlen>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	2364      	movs	r3, #100	@ 0x64
 8001ec2:	4909      	ldr	r1, [pc, #36]	@ (8001ee8 <SysConfigMenu+0x90>)
 8001ec4:	4809      	ldr	r0, [pc, #36]	@ (8001eec <SysConfigMenu+0x94>)
 8001ec6:	f002 fd7f 	bl	80049c8 <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	2b25      	cmp	r3, #37	@ 0x25
 8001ed4:	d9d8      	bls.n	8001e88 <SysConfigMenu+0x30>
	}
	}

}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200008f8 	.word	0x200008f8
 8001ee4:	0800d1c4 	.word	0x0800d1c4
 8001ee8:	2000078c 	.word	0x2000078c
 8001eec:	2000094c 	.word	0x2000094c
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	0800cef4 	.word	0x0800cef4

08001ef8 <Save_f>:
void Save_f(char* arg){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	//Saving Lora Values
	Old_Default_Sf=LoraValues.sf_l;
 8001f00:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <Save_f+0x94>)
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	4b22      	ldr	r3, [pc, #136]	@ (8001f90 <Save_f+0x98>)
 8001f06:	701a      	strb	r2, [r3, #0]
	LoraValues.sf_l=sf_new_value;
 8001f08:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <Save_f+0x9c>)
 8001f0a:	781a      	ldrb	r2, [r3, #0]
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <Save_f+0x94>)
 8001f0e:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"The default SF Value is now %d\r\n",LoraValues.sf_l);
 8001f10:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <Save_f+0x94>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4920      	ldr	r1, [pc, #128]	@ (8001f98 <Save_f+0xa0>)
 8001f18:	4820      	ldr	r0, [pc, #128]	@ (8001f9c <Save_f+0xa4>)
 8001f1a:	f007 fd01 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001f1e:	481f      	ldr	r0, [pc, #124]	@ (8001f9c <Save_f+0xa4>)
 8001f20:	f7fe f9b6 	bl	8000290 <strlen>
 8001f24:	4603      	mov	r3, r0
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	2364      	movs	r3, #100	@ 0x64
 8001f2a:	491c      	ldr	r1, [pc, #112]	@ (8001f9c <Save_f+0xa4>)
 8001f2c:	481c      	ldr	r0, [pc, #112]	@ (8001fa0 <Save_f+0xa8>)
 8001f2e:	f002 fd4b 	bl	80049c8 <HAL_UART_Transmit>
	Old_Default_Bw=LoraValues.bw_l;
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <Save_f+0x94>)
 8001f34:	789a      	ldrb	r2, [r3, #2]
 8001f36:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa4 <Save_f+0xac>)
 8001f38:	701a      	strb	r2, [r3, #0]
	LoraValues.bw_l=bw_new_value;
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <Save_f+0xb0>)
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <Save_f+0x94>)
 8001f40:	709a      	strb	r2, [r3, #2]
	sprintf((char*)txBuffer,"The default Bandwidth Value is now %d\r\n",LoraValues.bw_l);
 8001f42:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <Save_f+0x94>)
 8001f44:	789b      	ldrb	r3, [r3, #2]
 8001f46:	461a      	mov	r2, r3
 8001f48:	4918      	ldr	r1, [pc, #96]	@ (8001fac <Save_f+0xb4>)
 8001f4a:	4814      	ldr	r0, [pc, #80]	@ (8001f9c <Save_f+0xa4>)
 8001f4c:	f007 fce8 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001f50:	4812      	ldr	r0, [pc, #72]	@ (8001f9c <Save_f+0xa4>)
 8001f52:	f7fe f99d 	bl	8000290 <strlen>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	2364      	movs	r3, #100	@ 0x64
 8001f5c:	490f      	ldr	r1, [pc, #60]	@ (8001f9c <Save_f+0xa4>)
 8001f5e:	4810      	ldr	r0, [pc, #64]	@ (8001fa0 <Save_f+0xa8>)
 8001f60:	f002 fd32 	bl	80049c8 <HAL_UART_Transmit>
	Old_Default_Cr=LoraValues.cr_l;
 8001f64:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <Save_f+0x94>)
 8001f66:	785a      	ldrb	r2, [r3, #1]
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <Save_f+0xb8>)
 8001f6a:	701a      	strb	r2, [r3, #0]
	LoraValues.cr_l=Cr_new_value;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <Save_f+0xbc>)
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <Save_f+0x94>)
 8001f72:	705a      	strb	r2, [r3, #1]
	sprintf((char*)txBuffer,"The default CR buffer is now %d\r\n",LoraValues.cr_l);
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <Save_f+0x94>)
 8001f76:	785b      	ldrb	r3, [r3, #1]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	490f      	ldr	r1, [pc, #60]	@ (8001fb8 <Save_f+0xc0>)
 8001f7c:	4807      	ldr	r0, [pc, #28]	@ (8001f9c <Save_f+0xa4>)
 8001f7e:	f007 fccf 	bl	8009920 <siprintf>
	//Saving GPS Values
	//Saving Sensors Values

}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000884 	.word	0x20000884
 8001f98:	0800d208 	.word	0x0800d208
 8001f9c:	2000078c 	.word	0x2000078c
 8001fa0:	2000094c 	.word	0x2000094c
 8001fa4:	20000001 	.word	0x20000001
 8001fa8:	200008ed 	.word	0x200008ed
 8001fac:	0800d22c 	.word	0x0800d22c
 8001fb0:	20000002 	.word	0x20000002
 8001fb4:	200008ec 	.word	0x200008ec
 8001fb8:	0800d254 	.word	0x0800d254

08001fbc <Restore_f>:
void Restore_f(char* arg){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	//Restoring Lora Values
	LoraValues.sf_l=Old_Default_Sf;
 8001fc4:	4b21      	ldr	r3, [pc, #132]	@ (800204c <Restore_f+0x90>)
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <Restore_f+0x94>)
 8001fca:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"SF value restored to %d\r\n",LoraValues.sf_l);
 8001fcc:	4b20      	ldr	r3, [pc, #128]	@ (8002050 <Restore_f+0x94>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4920      	ldr	r1, [pc, #128]	@ (8002054 <Restore_f+0x98>)
 8001fd4:	4820      	ldr	r0, [pc, #128]	@ (8002058 <Restore_f+0x9c>)
 8001fd6:	f007 fca3 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001fda:	481f      	ldr	r0, [pc, #124]	@ (8002058 <Restore_f+0x9c>)
 8001fdc:	f7fe f958 	bl	8000290 <strlen>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2364      	movs	r3, #100	@ 0x64
 8001fe6:	491c      	ldr	r1, [pc, #112]	@ (8002058 <Restore_f+0x9c>)
 8001fe8:	481c      	ldr	r0, [pc, #112]	@ (800205c <Restore_f+0xa0>)
 8001fea:	f002 fced 	bl	80049c8 <HAL_UART_Transmit>
	LoraValues.bw_l=Old_Default_Bw;
 8001fee:	4b1c      	ldr	r3, [pc, #112]	@ (8002060 <Restore_f+0xa4>)
 8001ff0:	781a      	ldrb	r2, [r3, #0]
 8001ff2:	4b17      	ldr	r3, [pc, #92]	@ (8002050 <Restore_f+0x94>)
 8001ff4:	709a      	strb	r2, [r3, #2]
	sprintf((char*)txBuffer,"BW value restored to %d\r\n",LoraValues.bw_l);
 8001ff6:	4b16      	ldr	r3, [pc, #88]	@ (8002050 <Restore_f+0x94>)
 8001ff8:	789b      	ldrb	r3, [r3, #2]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4919      	ldr	r1, [pc, #100]	@ (8002064 <Restore_f+0xa8>)
 8001ffe:	4816      	ldr	r0, [pc, #88]	@ (8002058 <Restore_f+0x9c>)
 8002000:	f007 fc8e 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002004:	4814      	ldr	r0, [pc, #80]	@ (8002058 <Restore_f+0x9c>)
 8002006:	f7fe f943 	bl	8000290 <strlen>
 800200a:	4603      	mov	r3, r0
 800200c:	b29a      	uxth	r2, r3
 800200e:	2364      	movs	r3, #100	@ 0x64
 8002010:	4911      	ldr	r1, [pc, #68]	@ (8002058 <Restore_f+0x9c>)
 8002012:	4812      	ldr	r0, [pc, #72]	@ (800205c <Restore_f+0xa0>)
 8002014:	f002 fcd8 	bl	80049c8 <HAL_UART_Transmit>
	LoraValues.cr_l=Old_Default_Cr;
 8002018:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <Restore_f+0xac>)
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <Restore_f+0x94>)
 800201e:	705a      	strb	r2, [r3, #1]
	sprintf((char*)txBuffer,"CR value restored to %d\r\n",LoraValues.cr_l);
 8002020:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <Restore_f+0x94>)
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	461a      	mov	r2, r3
 8002026:	4911      	ldr	r1, [pc, #68]	@ (800206c <Restore_f+0xb0>)
 8002028:	480b      	ldr	r0, [pc, #44]	@ (8002058 <Restore_f+0x9c>)
 800202a:	f007 fc79 	bl	8009920 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 800202e:	480a      	ldr	r0, [pc, #40]	@ (8002058 <Restore_f+0x9c>)
 8002030:	f7fe f92e 	bl	8000290 <strlen>
 8002034:	4603      	mov	r3, r0
 8002036:	b29a      	uxth	r2, r3
 8002038:	2364      	movs	r3, #100	@ 0x64
 800203a:	4907      	ldr	r1, [pc, #28]	@ (8002058 <Restore_f+0x9c>)
 800203c:	4807      	ldr	r0, [pc, #28]	@ (800205c <Restore_f+0xa0>)
 800203e:	f002 fcc3 	bl	80049c8 <HAL_UART_Transmit>
	//Restoring GPS Values
	//Restoring Sensors Values
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000000 	.word	0x20000000
 8002050:	20000004 	.word	0x20000004
 8002054:	0800d278 	.word	0x0800d278
 8002058:	2000078c 	.word	0x2000078c
 800205c:	2000094c 	.word	0x2000094c
 8002060:	20000001 	.word	0x20000001
 8002064:	0800d294 	.word	0x0800d294
 8002068:	20000002 	.word	0x20000002
 800206c:	0800d2b0 	.word	0x0800d2b0

08002070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002074:	f000 fade 	bl	8002634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002078:	f000 f80a 	bl	8002090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800207c:	f7ff f836 	bl	80010ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002080:	f000 fa1a 	bl	80024b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002084:	f7fe fff6 	bl	8001074 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002088:	f004 f852 	bl	8006130 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <main+0x1c>

08002090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b096      	sub	sp, #88	@ 0x58
 8002094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	2244      	movs	r2, #68	@ 0x44
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f007 fca3 	bl	80099ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a4:	463b      	mov	r3, r7
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020b6:	f000 fe2f 	bl	8002d18 <HAL_PWREx_ControlVoltageScaling>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80020c0:	f000 f84a 	bl	8002158 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020c4:	2302      	movs	r3, #2
 80020c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020ce:	2310      	movs	r3, #16
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020d2:	2302      	movs	r3, #2
 80020d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020d6:	2302      	movs	r3, #2
 80020d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020da:	2301      	movs	r3, #1
 80020dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80020de:	230a      	movs	r3, #10
 80020e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80020e2:	2307      	movs	r3, #7
 80020e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020e6:	2302      	movs	r3, #2
 80020e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020ea:	2302      	movs	r3, #2
 80020ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fe66 	bl	8002dc4 <HAL_RCC_OscConfig>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80020fe:	f000 f82b 	bl	8002158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002102:	230f      	movs	r3, #15
 8002104:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002106:	2303      	movs	r3, #3
 8002108:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002116:	463b      	mov	r3, r7
 8002118:	2104      	movs	r1, #4
 800211a:	4618      	mov	r0, r3
 800211c:	f001 fa2e 	bl	800357c <HAL_RCC_ClockConfig>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002126:	f000 f817 	bl	8002158 <Error_Handler>
  }
}
 800212a:	bf00      	nop
 800212c:	3758      	adds	r7, #88	@ 0x58
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002146:	f000 fa95 	bl	8002674 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40001000 	.word	0x40001000

08002158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800215c:	b672      	cpsid	i
}
 800215e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <Error_Handler+0x8>

08002164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <HAL_MspInit+0x4c>)
 800216c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216e:	4a10      	ldr	r2, [pc, #64]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6613      	str	r3, [r2, #96]	@ 0x60
 8002176:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002186:	4a0a      	ldr	r2, [pc, #40]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218c:	6593      	str	r3, [r2, #88]	@ 0x58
 800218e:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <HAL_MspInit+0x4c>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	210f      	movs	r1, #15
 800219e:	f06f 0001 	mvn.w	r0, #1
 80021a2:	f000 fb3f 	bl	8002824 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000

080021b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08e      	sub	sp, #56	@ 0x38
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021c2:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <HAL_InitTick+0xe0>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	4a33      	ldr	r2, [pc, #204]	@ (8002294 <HAL_InitTick+0xe0>)
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ce:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <HAL_InitTick+0xe0>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021da:	f107 0210 	add.w	r2, r7, #16
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 fb8d 	bl	8003904 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d103      	bne.n	80021fc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021f4:	f001 fb5a 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80021f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80021fa:	e004      	b.n	8002206 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021fc:	f001 fb56 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 8002200:	4603      	mov	r3, r0
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002208:	4a23      	ldr	r2, [pc, #140]	@ (8002298 <HAL_InitTick+0xe4>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0c9b      	lsrs	r3, r3, #18
 8002210:	3b01      	subs	r3, #1
 8002212:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002214:	4b21      	ldr	r3, [pc, #132]	@ (800229c <HAL_InitTick+0xe8>)
 8002216:	4a22      	ldr	r2, [pc, #136]	@ (80022a0 <HAL_InitTick+0xec>)
 8002218:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800221a:	4b20      	ldr	r3, [pc, #128]	@ (800229c <HAL_InitTick+0xe8>)
 800221c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002220:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002222:	4a1e      	ldr	r2, [pc, #120]	@ (800229c <HAL_InitTick+0xe8>)
 8002224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002226:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002228:	4b1c      	ldr	r3, [pc, #112]	@ (800229c <HAL_InitTick+0xe8>)
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222e:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <HAL_InitTick+0xe8>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_InitTick+0xe8>)
 8002236:	2200      	movs	r2, #0
 8002238:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800223a:	4818      	ldr	r0, [pc, #96]	@ (800229c <HAL_InitTick+0xe8>)
 800223c:	f002 f8b0 	bl	80043a0 <HAL_TIM_Base_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002246:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800224a:	2b00      	cmp	r3, #0
 800224c:	d11b      	bne.n	8002286 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800224e:	4813      	ldr	r0, [pc, #76]	@ (800229c <HAL_InitTick+0xe8>)
 8002250:	f002 f908 	bl	8004464 <HAL_TIM_Base_Start_IT>
 8002254:	4603      	mov	r3, r0
 8002256:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800225a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800225e:	2b00      	cmp	r3, #0
 8002260:	d111      	bne.n	8002286 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002262:	2036      	movs	r0, #54	@ 0x36
 8002264:	f000 fafa 	bl	800285c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b0f      	cmp	r3, #15
 800226c:	d808      	bhi.n	8002280 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800226e:	2200      	movs	r2, #0
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	2036      	movs	r0, #54	@ 0x36
 8002274:	f000 fad6 	bl	8002824 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002278:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <HAL_InitTick+0xf0>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e002      	b.n	8002286 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002286:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800228a:	4618      	mov	r0, r3
 800228c:	3738      	adds	r7, #56	@ 0x38
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	431bde83 	.word	0x431bde83
 800229c:	200008fc 	.word	0x200008fc
 80022a0:	40001000 	.word	0x40001000
 80022a4:	20000270 	.word	0x20000270

080022a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <NMI_Handler+0x4>

080022b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <HardFault_Handler+0x4>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <MemManage_Handler+0x4>

080022c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <BusFault_Handler+0x4>

080022c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <UsageFault_Handler+0x4>

080022d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <USART2_IRQHandler+0x10>)
 80022e6:	f002 fc45 	bl	8004b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2000094c 	.word	0x2000094c

080022f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <TIM6_DAC_IRQHandler+0x10>)
 80022fa:	f002 f923 	bl	8004544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200008fc 	.word	0x200008fc

08002308 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return 1;
 800230c:	2301      	movs	r3, #1
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_kill>:

int _kill(int pid, int sig)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002322:	f007 fc81 	bl	8009c28 <__errno>
 8002326:	4603      	mov	r3, r0
 8002328:	2216      	movs	r2, #22
 800232a:	601a      	str	r2, [r3, #0]
  return -1;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <_exit>:

void _exit (int status)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ffe7 	bl	8002318 <_kill>
  while (1) {}    /* Make sure we hang here */
 800234a:	bf00      	nop
 800234c:	e7fd      	b.n	800234a <_exit+0x12>

0800234e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e00a      	b.n	8002376 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002360:	f3af 8000 	nop.w
 8002364:	4601      	mov	r1, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	60ba      	str	r2, [r7, #8]
 800236c:	b2ca      	uxtb	r2, r1
 800236e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3301      	adds	r3, #1
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	dbf0      	blt.n	8002360 <_read+0x12>
  }

  return len;
 800237e:	687b      	ldr	r3, [r7, #4]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	e009      	b.n	80023ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	60ba      	str	r2, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3301      	adds	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dbf1      	blt.n	800239a <_write+0x12>
  }
  return len;
 80023b6:	687b      	ldr	r3, [r7, #4]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_close>:

int _close(int file)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023e8:	605a      	str	r2, [r3, #4]
  return 0;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <_isatty>:

int _isatty(int file)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002400:	2301      	movs	r3, #1
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002430:	4a14      	ldr	r2, [pc, #80]	@ (8002484 <_sbrk+0x5c>)
 8002432:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <_sbrk+0x60>)
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <_sbrk+0x64>)
 8002446:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <_sbrk+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d207      	bcs.n	8002468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002458:	f007 fbe6 	bl	8009c28 <__errno>
 800245c:	4603      	mov	r3, r0
 800245e:	220c      	movs	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e009      	b.n	800247c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002468:	4b08      	ldr	r3, [pc, #32]	@ (800248c <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246e:	4b07      	ldr	r3, [pc, #28]	@ (800248c <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	4a05      	ldr	r2, [pc, #20]	@ (800248c <_sbrk+0x64>)
 8002478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20018000 	.word	0x20018000
 8002488:	00000400 	.word	0x00000400
 800248c:	20000948 	.word	0x20000948
 8002490:	20005a98 	.word	0x20005a98

08002494 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <SystemInit+0x20>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249e:	4a05      	ldr	r2, [pc, #20]	@ (80024b4 <SystemInit+0x20>)
 80024a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024bc:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <MX_USART2_UART_Init+0x58>)
 80024be:	4a15      	ldr	r2, [pc, #84]	@ (8002514 <MX_USART2_UART_Init+0x5c>)
 80024c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024c2:	4b13      	ldr	r3, [pc, #76]	@ (8002510 <MX_USART2_UART_Init+0x58>)
 80024c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <MX_USART2_UART_Init+0x58>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <MX_USART2_UART_Init+0x58>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <MX_USART2_UART_Init+0x58>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <MX_USART2_UART_Init+0x58>)
 80024de:	220c      	movs	r2, #12
 80024e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <MX_USART2_UART_Init+0x58>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e8:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <MX_USART2_UART_Init+0x58>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ee:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <MX_USART2_UART_Init+0x58>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <MX_USART2_UART_Init+0x58>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024fa:	4805      	ldr	r0, [pc, #20]	@ (8002510 <MX_USART2_UART_Init+0x58>)
 80024fc:	f002 fa16 	bl	800492c <HAL_UART_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002506:	f7ff fe27 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000094c 	.word	0x2000094c
 8002514:	40004400 	.word	0x40004400

08002518 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0ac      	sub	sp, #176	@ 0xb0
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	2288      	movs	r2, #136	@ 0x88
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f007 fa56 	bl	80099ea <memset>
  if(uartHandle->Instance==USART2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a25      	ldr	r2, [pc, #148]	@ (80025d8 <HAL_UART_MspInit+0xc0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d143      	bne.n	80025d0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002548:	2302      	movs	r3, #2
 800254a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800254c:	2300      	movs	r3, #0
 800254e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4618      	mov	r0, r3
 8002556:	f001 fa67 	bl	8003a28 <HAL_RCCEx_PeriphCLKConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002560:	f7ff fdfa 	bl	8002158 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002564:	4b1d      	ldr	r3, [pc, #116]	@ (80025dc <HAL_UART_MspInit+0xc4>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002568:	4a1c      	ldr	r2, [pc, #112]	@ (80025dc <HAL_UART_MspInit+0xc4>)
 800256a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800256e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002570:	4b1a      	ldr	r3, [pc, #104]	@ (80025dc <HAL_UART_MspInit+0xc4>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257c:	4b17      	ldr	r3, [pc, #92]	@ (80025dc <HAL_UART_MspInit+0xc4>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	4a16      	ldr	r2, [pc, #88]	@ (80025dc <HAL_UART_MspInit+0xc4>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <HAL_UART_MspInit+0xc4>)
 800258a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002594:	230c      	movs	r3, #12
 8002596:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ac:	2307      	movs	r3, #7
 80025ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025b6:	4619      	mov	r1, r3
 80025b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025bc:	f000 f9dc 	bl	8002978 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2105      	movs	r1, #5
 80025c4:	2026      	movs	r0, #38	@ 0x26
 80025c6:	f000 f92d 	bl	8002824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025ca:	2026      	movs	r0, #38	@ 0x26
 80025cc:	f000 f946 	bl	800285c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025d0:	bf00      	nop
 80025d2:	37b0      	adds	r7, #176	@ 0xb0
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40004400 	.word	0x40004400
 80025dc:	40021000 	.word	0x40021000

080025e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002618 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025e4:	f7ff ff56 	bl	8002494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025e8:	480c      	ldr	r0, [pc, #48]	@ (800261c <LoopForever+0x6>)
  ldr r1, =_edata
 80025ea:	490d      	ldr	r1, [pc, #52]	@ (8002620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002624 <LoopForever+0xe>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f0:	e002      	b.n	80025f8 <LoopCopyDataInit>

080025f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025f6:	3304      	adds	r3, #4

080025f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025fc:	d3f9      	bcc.n	80025f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002600:	4c0a      	ldr	r4, [pc, #40]	@ (800262c <LoopForever+0x16>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002604:	e001      	b.n	800260a <LoopFillZerobss>

08002606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002608:	3204      	adds	r2, #4

0800260a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800260c:	d3fb      	bcc.n	8002606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800260e:	f007 fb11 	bl	8009c34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002612:	f7ff fd2d 	bl	8002070 <main>

08002616 <LoopForever>:

LoopForever:
    b LoopForever
 8002616:	e7fe      	b.n	8002616 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002618:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800261c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002620:	20000444 	.word	0x20000444
  ldr r2, =_sidata
 8002624:	0800d7a8 	.word	0x0800d7a8
  ldr r2, =_sbss
 8002628:	20000444 	.word	0x20000444
  ldr r4, =_ebss
 800262c:	20005a98 	.word	0x20005a98

08002630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002630:	e7fe      	b.n	8002630 <ADC1_2_IRQHandler>
	...

08002634 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800263e:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <HAL_Init+0x3c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a0b      	ldr	r2, [pc, #44]	@ (8002670 <HAL_Init+0x3c>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002648:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264a:	2003      	movs	r0, #3
 800264c:	f000 f8df 	bl	800280e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002650:	200f      	movs	r0, #15
 8002652:	f7ff fdaf 	bl	80021b4 <HAL_InitTick>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	71fb      	strb	r3, [r7, #7]
 8002660:	e001      	b.n	8002666 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002662:	f7ff fd7f 	bl	8002164 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002666:	79fb      	ldrb	r3, [r7, #7]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40022000 	.word	0x40022000

08002674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002678:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_IncTick+0x20>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_IncTick+0x24>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4413      	add	r3, r2
 8002684:	4a04      	ldr	r2, [pc, #16]	@ (8002698 <HAL_IncTick+0x24>)
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000274 	.word	0x20000274
 8002698:	200009d4 	.word	0x200009d4

0800269c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return uwTick;
 80026a0:	4b03      	ldr	r3, [pc, #12]	@ (80026b0 <HAL_GetTick+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	200009d4 	.word	0x200009d4

080026b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <__NVIC_SetPriorityGrouping+0x44>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026d0:	4013      	ands	r3, r2
 80026d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e6:	4a04      	ldr	r2, [pc, #16]	@ (80026f8 <__NVIC_SetPriorityGrouping+0x44>)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	60d3      	str	r3, [r2, #12]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002700:	4b04      	ldr	r3, [pc, #16]	@ (8002714 <__NVIC_GetPriorityGrouping+0x18>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	f003 0307 	and.w	r3, r3, #7
}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	2b00      	cmp	r3, #0
 8002728:	db0b      	blt.n	8002742 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	f003 021f 	and.w	r2, r3, #31
 8002730:	4907      	ldr	r1, [pc, #28]	@ (8002750 <__NVIC_EnableIRQ+0x38>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2001      	movs	r0, #1
 800273a:	fa00 f202 	lsl.w	r2, r0, r2
 800273e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000e100 	.word	0xe000e100

08002754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	6039      	str	r1, [r7, #0]
 800275e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002764:	2b00      	cmp	r3, #0
 8002766:	db0a      	blt.n	800277e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	b2da      	uxtb	r2, r3
 800276c:	490c      	ldr	r1, [pc, #48]	@ (80027a0 <__NVIC_SetPriority+0x4c>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	0112      	lsls	r2, r2, #4
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	440b      	add	r3, r1
 8002778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800277c:	e00a      	b.n	8002794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4908      	ldr	r1, [pc, #32]	@ (80027a4 <__NVIC_SetPriority+0x50>)
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	3b04      	subs	r3, #4
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	440b      	add	r3, r1
 8002792:	761a      	strb	r2, [r3, #24]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000e100 	.word	0xe000e100
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	@ 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f1c3 0307 	rsb	r3, r3, #7
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	bf28      	it	cs
 80027c6:	2304      	movcs	r3, #4
 80027c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3304      	adds	r3, #4
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d902      	bls.n	80027d8 <NVIC_EncodePriority+0x30>
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3b03      	subs	r3, #3
 80027d6:	e000      	b.n	80027da <NVIC_EncodePriority+0x32>
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	f04f 32ff 	mov.w	r2, #4294967295
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43da      	mvns	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	401a      	ands	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f0:	f04f 31ff 	mov.w	r1, #4294967295
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	43d9      	mvns	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002800:	4313      	orrs	r3, r2
         );
}
 8002802:	4618      	mov	r0, r3
 8002804:	3724      	adds	r7, #36	@ 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ff4c 	bl	80026b4 <__NVIC_SetPriorityGrouping>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002836:	f7ff ff61 	bl	80026fc <__NVIC_GetPriorityGrouping>
 800283a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	6978      	ldr	r0, [r7, #20]
 8002842:	f7ff ffb1 	bl	80027a8 <NVIC_EncodePriority>
 8002846:	4602      	mov	r2, r0
 8002848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff80 	bl	8002754 <__NVIC_SetPriority>
}
 8002854:	bf00      	nop
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff54 	bl	8002718 <__NVIC_EnableIRQ>
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d008      	beq.n	80028a2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2204      	movs	r2, #4
 8002894:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e022      	b.n	80028e8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 020e 	bic.w	r2, r2, #14
 80028b0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c6:	f003 021c 	and.w	r2, r3, #28
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f202 	lsl.w	r2, r1, r2
 80028d4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d005      	beq.n	8002918 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2204      	movs	r2, #4
 8002910:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
 8002916:	e029      	b.n	800296c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 020e 	bic.w	r2, r2, #14
 8002926:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293c:	f003 021c 	and.w	r2, r3, #28
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f202 	lsl.w	r2, r1, r2
 800294a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
    }
  }
  return status;
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002986:	e17f      	b.n	8002c88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	2101      	movs	r1, #1
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	4013      	ands	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8171 	beq.w	8002c82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d005      	beq.n	80029b8 <HAL_GPIO_Init+0x40>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d130      	bne.n	8002a1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ee:	2201      	movs	r2, #1
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f003 0201 	and.w	r2, r3, #1
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d118      	bne.n	8002a58 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	f003 0201 	and.w	r2, r3, #1
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d017      	beq.n	8002a94 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d123      	bne.n	8002ae8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	08da      	lsrs	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3208      	adds	r2, #8
 8002aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	08da      	lsrs	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3208      	adds	r2, #8
 8002ae2:	6939      	ldr	r1, [r7, #16]
 8002ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0203 	and.w	r2, r3, #3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80ac 	beq.w	8002c82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ca8 <HAL_GPIO_Init+0x330>)
 8002b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ca8 <HAL_GPIO_Init+0x330>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b36:	4b5c      	ldr	r3, [pc, #368]	@ (8002ca8 <HAL_GPIO_Init+0x330>)
 8002b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b42:	4a5a      	ldr	r2, [pc, #360]	@ (8002cac <HAL_GPIO_Init+0x334>)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b6c:	d025      	beq.n	8002bba <HAL_GPIO_Init+0x242>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4f      	ldr	r2, [pc, #316]	@ (8002cb0 <HAL_GPIO_Init+0x338>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01f      	beq.n	8002bb6 <HAL_GPIO_Init+0x23e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4e      	ldr	r2, [pc, #312]	@ (8002cb4 <HAL_GPIO_Init+0x33c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d019      	beq.n	8002bb2 <HAL_GPIO_Init+0x23a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4d      	ldr	r2, [pc, #308]	@ (8002cb8 <HAL_GPIO_Init+0x340>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0x236>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4c      	ldr	r2, [pc, #304]	@ (8002cbc <HAL_GPIO_Init+0x344>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00d      	beq.n	8002baa <HAL_GPIO_Init+0x232>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4b      	ldr	r2, [pc, #300]	@ (8002cc0 <HAL_GPIO_Init+0x348>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <HAL_GPIO_Init+0x22e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4a      	ldr	r2, [pc, #296]	@ (8002cc4 <HAL_GPIO_Init+0x34c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_GPIO_Init+0x22a>
 8002b9e:	2306      	movs	r3, #6
 8002ba0:	e00c      	b.n	8002bbc <HAL_GPIO_Init+0x244>
 8002ba2:	2307      	movs	r3, #7
 8002ba4:	e00a      	b.n	8002bbc <HAL_GPIO_Init+0x244>
 8002ba6:	2305      	movs	r3, #5
 8002ba8:	e008      	b.n	8002bbc <HAL_GPIO_Init+0x244>
 8002baa:	2304      	movs	r3, #4
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x244>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e004      	b.n	8002bbc <HAL_GPIO_Init+0x244>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e002      	b.n	8002bbc <HAL_GPIO_Init+0x244>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_GPIO_Init+0x244>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	f002 0203 	and.w	r2, r2, #3
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	4093      	lsls	r3, r2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bcc:	4937      	ldr	r1, [pc, #220]	@ (8002cac <HAL_GPIO_Init+0x334>)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bda:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc8 <HAL_GPIO_Init+0x350>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bfe:	4a32      	ldr	r2, [pc, #200]	@ (8002cc8 <HAL_GPIO_Init+0x350>)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c04:	4b30      	ldr	r3, [pc, #192]	@ (8002cc8 <HAL_GPIO_Init+0x350>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c28:	4a27      	ldr	r2, [pc, #156]	@ (8002cc8 <HAL_GPIO_Init+0x350>)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c2e:	4b26      	ldr	r3, [pc, #152]	@ (8002cc8 <HAL_GPIO_Init+0x350>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c52:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc8 <HAL_GPIO_Init+0x350>)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <HAL_GPIO_Init+0x350>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4013      	ands	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c7c:	4a12      	ldr	r2, [pc, #72]	@ (8002cc8 <HAL_GPIO_Init+0x350>)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3301      	adds	r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f47f ae78 	bne.w	8002988 <HAL_GPIO_Init+0x10>
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40010000 	.word	0x40010000
 8002cb0:	48000400 	.word	0x48000400
 8002cb4:	48000800 	.word	0x48000800
 8002cb8:	48000c00 	.word	0x48000c00
 8002cbc:	48001000 	.word	0x48001000
 8002cc0:	48001400 	.word	0x48001400
 8002cc4:	48001800 	.word	0x48001800
 8002cc8:	40010400 	.word	0x40010400

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce8:	e002      	b.n	8002cf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d00:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40007000 	.word	0x40007000

08002d18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d26:	d130      	bne.n	8002d8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d28:	4b23      	ldr	r3, [pc, #140]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d34:	d038      	beq.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d36:	4b20      	ldr	r3, [pc, #128]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d46:	4b1d      	ldr	r3, [pc, #116]	@ (8002dbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2232      	movs	r2, #50	@ 0x32
 8002d4c:	fb02 f303 	mul.w	r3, r2, r3
 8002d50:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	0c9b      	lsrs	r3, r3, #18
 8002d58:	3301      	adds	r3, #1
 8002d5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d5c:	e002      	b.n	8002d64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d64:	4b14      	ldr	r3, [pc, #80]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d70:	d102      	bne.n	8002d78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f2      	bne.n	8002d5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d78:	4b0f      	ldr	r3, [pc, #60]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d84:	d110      	bne.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e00f      	b.n	8002daa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d96:	d007      	beq.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d98:	4b07      	ldr	r3, [pc, #28]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002da0:	4a05      	ldr	r2, [pc, #20]	@ (8002db8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002da6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	2000026c 	.word	0x2000026c
 8002dc0:	431bde83 	.word	0x431bde83

08002dc4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e3ca      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dd6:	4b97      	ldr	r3, [pc, #604]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de0:	4b94      	ldr	r3, [pc, #592]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80e4 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_RCC_OscConfig+0x4a>
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	f040 808b 	bne.w	8002f1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	f040 8087 	bne.w	8002f1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e0e:	4b89      	ldr	r3, [pc, #548]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x62>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e3a2      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	4b82      	ldr	r3, [pc, #520]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <HAL_RCC_OscConfig+0x7c>
 8002e36:	4b7f      	ldr	r3, [pc, #508]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e3e:	e005      	b.n	8002e4c <HAL_RCC_OscConfig+0x88>
 8002e40:	4b7c      	ldr	r3, [pc, #496]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d223      	bcs.n	8002e98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fd87 	bl	8003968 <RCC_SetFlashLatencyFromMSIRange>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e383      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e64:	4b73      	ldr	r3, [pc, #460]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a72      	ldr	r2, [pc, #456]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b70      	ldr	r3, [pc, #448]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	496d      	ldr	r1, [pc, #436]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e82:	4b6c      	ldr	r3, [pc, #432]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	4968      	ldr	r1, [pc, #416]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]
 8002e96:	e025      	b.n	8002ee4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e98:	4b66      	ldr	r3, [pc, #408]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a65      	ldr	r2, [pc, #404]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002e9e:	f043 0308 	orr.w	r3, r3, #8
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b63      	ldr	r3, [pc, #396]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4960      	ldr	r1, [pc, #384]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	495b      	ldr	r1, [pc, #364]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fd47 	bl	8003968 <RCC_SetFlashLatencyFromMSIRange>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e343      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee4:	f000 fc4a 	bl	800377c <HAL_RCC_GetSysClockFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b52      	ldr	r3, [pc, #328]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	4950      	ldr	r1, [pc, #320]	@ (8003038 <HAL_RCC_OscConfig+0x274>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	4a4e      	ldr	r2, [pc, #312]	@ (800303c <HAL_RCC_OscConfig+0x278>)
 8002f02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f04:	4b4e      	ldr	r3, [pc, #312]	@ (8003040 <HAL_RCC_OscConfig+0x27c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff f953 	bl	80021b4 <HAL_InitTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d052      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	e327      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d032      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f24:	4b43      	ldr	r3, [pc, #268]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a42      	ldr	r2, [pc, #264]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f30:	f7ff fbb4 	bl	800269c <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f38:	f7ff fbb0 	bl	800269c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e310      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f56:	4b37      	ldr	r3, [pc, #220]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a36      	ldr	r2, [pc, #216]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	f043 0308 	orr.w	r3, r3, #8
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b34      	ldr	r3, [pc, #208]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4931      	ldr	r1, [pc, #196]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f74:	4b2f      	ldr	r3, [pc, #188]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	492c      	ldr	r1, [pc, #176]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
 8002f88:	e01a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a29      	ldr	r2, [pc, #164]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f96:	f7ff fb81 	bl	800269c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f9e:	f7ff fb7d 	bl	800269c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e2dd      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fb0:	4b20      	ldr	r3, [pc, #128]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x1da>
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d074      	beq.n	80030b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d005      	beq.n	8002fde <HAL_RCC_OscConfig+0x21a>
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fde:	4b15      	ldr	r3, [pc, #84]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d064      	beq.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d160      	bne.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e2ba      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x24a>
 8003000:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0b      	ldr	r2, [pc, #44]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e026      	b.n	800305c <HAL_RCC_OscConfig+0x298>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003016:	d115      	bne.n	8003044 <HAL_RCC_OscConfig+0x280>
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a05      	ldr	r2, [pc, #20]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 800301e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b03      	ldr	r3, [pc, #12]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a02      	ldr	r2, [pc, #8]	@ (8003034 <HAL_RCC_OscConfig+0x270>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	e014      	b.n	800305c <HAL_RCC_OscConfig+0x298>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	0800d2d4 	.word	0x0800d2d4
 800303c:	2000026c 	.word	0x2000026c
 8003040:	20000270 	.word	0x20000270
 8003044:	4ba0      	ldr	r3, [pc, #640]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a9f      	ldr	r2, [pc, #636]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b9d      	ldr	r3, [pc, #628]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a9c      	ldr	r2, [pc, #624]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800305a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7ff fb1a 	bl	800269c <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800306c:	f7ff fb16 	bl	800269c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	@ 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e276      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800307e:	4b92      	ldr	r3, [pc, #584]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x2a8>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7ff fb06 	bl	800269c <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003094:	f7ff fb02 	bl	800269c <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	@ 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e262      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030a6:	4b88      	ldr	r3, [pc, #544]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x2d0>
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d060      	beq.n	8003184 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_OscConfig+0x310>
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d119      	bne.n	8003102 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d116      	bne.n	8003102 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d4:	4b7c      	ldr	r3, [pc, #496]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_OscConfig+0x328>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e23f      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ec:	4b76      	ldr	r3, [pc, #472]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	4973      	ldr	r1, [pc, #460]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003100:	e040      	b.n	8003184 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d023      	beq.n	8003152 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800310a:	4b6f      	ldr	r3, [pc, #444]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6e      	ldr	r2, [pc, #440]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7ff fac1 	bl	800269c <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311e:	f7ff fabd 	bl	800269c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e21d      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003130:	4b65      	ldr	r3, [pc, #404]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313c:	4b62      	ldr	r3, [pc, #392]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	061b      	lsls	r3, r3, #24
 800314a:	495f      	ldr	r1, [pc, #380]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
 8003150:	e018      	b.n	8003184 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003152:	4b5d      	ldr	r3, [pc, #372]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a5c      	ldr	r2, [pc, #368]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800315c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7ff fa9d 	bl	800269c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003166:	f7ff fa99 	bl	800269c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e1f9      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003178:	4b53      	ldr	r3, [pc, #332]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f0      	bne.n	8003166 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d03c      	beq.n	800320a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003198:	4b4b      	ldr	r3, [pc, #300]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800319a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800319e:	4a4a      	ldr	r2, [pc, #296]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7ff fa78 	bl	800269c <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b0:	f7ff fa74 	bl	800269c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e1d4      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031c2:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80031c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ef      	beq.n	80031b0 <HAL_RCC_OscConfig+0x3ec>
 80031d0:	e01b      	b.n	800320a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031d2:	4b3d      	ldr	r3, [pc, #244]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80031d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d8:	4a3b      	ldr	r2, [pc, #236]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7ff fa5b 	bl	800269c <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ea:	f7ff fa57 	bl	800269c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e1b7      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031fc:	4b32      	ldr	r3, [pc, #200]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80031fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1ef      	bne.n	80031ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80a6 	beq.w	8003364 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003218:	2300      	movs	r3, #0
 800321a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800321c:	4b2a      	ldr	r3, [pc, #168]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10d      	bne.n	8003244 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	4b27      	ldr	r3, [pc, #156]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800322a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322c:	4a26      	ldr	r2, [pc, #152]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800322e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003232:	6593      	str	r3, [r2, #88]	@ 0x58
 8003234:	4b24      	ldr	r3, [pc, #144]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003240:	2301      	movs	r3, #1
 8003242:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003244:	4b21      	ldr	r3, [pc, #132]	@ (80032cc <HAL_RCC_OscConfig+0x508>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d118      	bne.n	8003282 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003250:	4b1e      	ldr	r3, [pc, #120]	@ (80032cc <HAL_RCC_OscConfig+0x508>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1d      	ldr	r2, [pc, #116]	@ (80032cc <HAL_RCC_OscConfig+0x508>)
 8003256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800325a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325c:	f7ff fa1e 	bl	800269c <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003264:	f7ff fa1a 	bl	800269c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e17a      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003276:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <HAL_RCC_OscConfig+0x508>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d108      	bne.n	800329c <HAL_RCC_OscConfig+0x4d8>
 800328a:	4b0f      	ldr	r3, [pc, #60]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003290:	4a0d      	ldr	r2, [pc, #52]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800329a:	e029      	b.n	80032f0 <HAL_RCC_OscConfig+0x52c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d115      	bne.n	80032d0 <HAL_RCC_OscConfig+0x50c>
 80032a4:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032aa:	4a07      	ldr	r2, [pc, #28]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032b4:	4b04      	ldr	r3, [pc, #16]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ba:	4a03      	ldr	r2, [pc, #12]	@ (80032c8 <HAL_RCC_OscConfig+0x504>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032c4:	e014      	b.n	80032f0 <HAL_RCC_OscConfig+0x52c>
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40007000 	.word	0x40007000
 80032d0:	4b9c      	ldr	r3, [pc, #624]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d6:	4a9b      	ldr	r2, [pc, #620]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032e0:	4b98      	ldr	r3, [pc, #608]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e6:	4a97      	ldr	r2, [pc, #604]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80032e8:	f023 0304 	bic.w	r3, r3, #4
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d016      	beq.n	8003326 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7ff f9d0 	bl	800269c <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7ff f9cc 	bl	800269c <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e12a      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003316:	4b8b      	ldr	r3, [pc, #556]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0ed      	beq.n	8003300 <HAL_RCC_OscConfig+0x53c>
 8003324:	e015      	b.n	8003352 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003326:	f7ff f9b9 	bl	800269c <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800332c:	e00a      	b.n	8003344 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332e:	f7ff f9b5 	bl	800269c <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800333c:	4293      	cmp	r3, r2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e113      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003344:	4b7f      	ldr	r3, [pc, #508]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1ed      	bne.n	800332e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003352:	7ffb      	ldrb	r3, [r7, #31]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d105      	bne.n	8003364 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003358:	4b7a      	ldr	r3, [pc, #488]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335c:	4a79      	ldr	r2, [pc, #484]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800335e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003362:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80fe 	beq.w	800356a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	2b02      	cmp	r3, #2
 8003374:	f040 80d0 	bne.w	8003518 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003378:	4b72      	ldr	r3, [pc, #456]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0203 	and.w	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	429a      	cmp	r2, r3
 800338a:	d130      	bne.n	80033ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	3b01      	subs	r3, #1
 8003398:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d127      	bne.n	80033ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d11f      	bne.n	80033ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033b8:	2a07      	cmp	r2, #7
 80033ba:	bf14      	ite	ne
 80033bc:	2201      	movne	r2, #1
 80033be:	2200      	moveq	r2, #0
 80033c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d113      	bne.n	80033ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d0:	085b      	lsrs	r3, r3, #1
 80033d2:	3b01      	subs	r3, #1
 80033d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	3b01      	subs	r3, #1
 80033e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d06e      	beq.n	80034cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	d069      	beq.n	80034c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033f4:	4b53      	ldr	r3, [pc, #332]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003400:	4b50      	ldr	r3, [pc, #320]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0ad      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003410:	4b4c      	ldr	r3, [pc, #304]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a4b      	ldr	r2, [pc, #300]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800341a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800341c:	f7ff f93e 	bl	800269c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003424:	f7ff f93a 	bl	800269c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e09a      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003436:	4b43      	ldr	r3, [pc, #268]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003442:	4b40      	ldr	r3, [pc, #256]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	4b40      	ldr	r3, [pc, #256]	@ (8003548 <HAL_RCC_OscConfig+0x784>)
 8003448:	4013      	ands	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003452:	3a01      	subs	r2, #1
 8003454:	0112      	lsls	r2, r2, #4
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800345c:	0212      	lsls	r2, r2, #8
 800345e:	4311      	orrs	r1, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003464:	0852      	lsrs	r2, r2, #1
 8003466:	3a01      	subs	r2, #1
 8003468:	0552      	lsls	r2, r2, #21
 800346a:	4311      	orrs	r1, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003470:	0852      	lsrs	r2, r2, #1
 8003472:	3a01      	subs	r2, #1
 8003474:	0652      	lsls	r2, r2, #25
 8003476:	4311      	orrs	r1, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800347c:	0912      	lsrs	r2, r2, #4
 800347e:	0452      	lsls	r2, r2, #17
 8003480:	430a      	orrs	r2, r1
 8003482:	4930      	ldr	r1, [pc, #192]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003484:	4313      	orrs	r3, r2
 8003486:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003488:	4b2e      	ldr	r3, [pc, #184]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a2d      	ldr	r2, [pc, #180]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800348e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003492:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003494:	4b2b      	ldr	r3, [pc, #172]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a2a      	ldr	r2, [pc, #168]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800349a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800349e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034a0:	f7ff f8fc 	bl	800269c <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a8:	f7ff f8f8 	bl	800269c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e058      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ba:	4b22      	ldr	r3, [pc, #136]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034c6:	e050      	b.n	800356a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e04f      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d148      	bne.n	800356a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a19      	ldr	r2, [pc, #100]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80034de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e4:	4b17      	ldr	r3, [pc, #92]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a16      	ldr	r2, [pc, #88]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 80034ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034f0:	f7ff f8d4 	bl	800269c <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7ff f8d0 	bl	800269c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e030      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350a:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x734>
 8003516:	e028      	b.n	800356a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d023      	beq.n	8003566 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351e:	4b09      	ldr	r3, [pc, #36]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a08      	ldr	r2, [pc, #32]	@ (8003544 <HAL_RCC_OscConfig+0x780>)
 8003524:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7ff f8b7 	bl	800269c <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003530:	e00c      	b.n	800354c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003532:	f7ff f8b3 	bl	800269c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d905      	bls.n	800354c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e013      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
 8003544:	40021000 	.word	0x40021000
 8003548:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354c:	4b09      	ldr	r3, [pc, #36]	@ (8003574 <HAL_RCC_OscConfig+0x7b0>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ec      	bne.n	8003532 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003558:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_RCC_OscConfig+0x7b0>)
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	4905      	ldr	r1, [pc, #20]	@ (8003574 <HAL_RCC_OscConfig+0x7b0>)
 800355e:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <HAL_RCC_OscConfig+0x7b4>)
 8003560:	4013      	ands	r3, r2
 8003562:	60cb      	str	r3, [r1, #12]
 8003564:	e001      	b.n	800356a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000
 8003578:	feeefffc 	.word	0xfeeefffc

0800357c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0e7      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003590:	4b75      	ldr	r3, [pc, #468]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d910      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359e:	4b72      	ldr	r3, [pc, #456]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 0207 	bic.w	r2, r3, #7
 80035a6:	4970      	ldr	r1, [pc, #448]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0cf      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d010      	beq.n	80035ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	4b66      	ldr	r3, [pc, #408]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d8:	429a      	cmp	r2, r3
 80035da:	d908      	bls.n	80035ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035dc:	4b63      	ldr	r3, [pc, #396]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4960      	ldr	r1, [pc, #384]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d04c      	beq.n	8003694 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d107      	bne.n	8003612 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003602:	4b5a      	ldr	r3, [pc, #360]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d121      	bne.n	8003652 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0a6      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d107      	bne.n	800362a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800361a:	4b54      	ldr	r3, [pc, #336]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d115      	bne.n	8003652 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e09a      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003632:	4b4e      	ldr	r3, [pc, #312]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e08e      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003642:	4b4a      	ldr	r3, [pc, #296]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e086      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003652:	4b46      	ldr	r3, [pc, #280]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f023 0203 	bic.w	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4943      	ldr	r1, [pc, #268]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003664:	f7ff f81a 	bl	800269c <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	e00a      	b.n	8003682 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366c:	f7ff f816 	bl	800269c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e06e      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	4b3a      	ldr	r3, [pc, #232]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 020c 	and.w	r2, r3, #12
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	429a      	cmp	r2, r3
 8003692:	d1eb      	bne.n	800366c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	4b31      	ldr	r3, [pc, #196]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d208      	bcs.n	80036c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b2e      	ldr	r3, [pc, #184]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	492b      	ldr	r1, [pc, #172]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c2:	4b29      	ldr	r3, [pc, #164]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d210      	bcs.n	80036f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d0:	4b25      	ldr	r3, [pc, #148]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 0207 	bic.w	r2, r3, #7
 80036d8:	4923      	ldr	r1, [pc, #140]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e0:	4b21      	ldr	r3, [pc, #132]	@ (8003768 <HAL_RCC_ClockConfig+0x1ec>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e036      	b.n	8003760 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fe:	4b1b      	ldr	r3, [pc, #108]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4918      	ldr	r1, [pc, #96]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d009      	beq.n	8003730 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800371c:	4b13      	ldr	r3, [pc, #76]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4910      	ldr	r1, [pc, #64]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 800372c:	4313      	orrs	r3, r2
 800372e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003730:	f000 f824 	bl	800377c <HAL_RCC_GetSysClockFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b0d      	ldr	r3, [pc, #52]	@ (800376c <HAL_RCC_ClockConfig+0x1f0>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	490b      	ldr	r1, [pc, #44]	@ (8003770 <HAL_RCC_ClockConfig+0x1f4>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
 800374c:	4a09      	ldr	r2, [pc, #36]	@ (8003774 <HAL_RCC_ClockConfig+0x1f8>)
 800374e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003750:	4b09      	ldr	r3, [pc, #36]	@ (8003778 <HAL_RCC_ClockConfig+0x1fc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fd2d 	bl	80021b4 <HAL_InitTick>
 800375a:	4603      	mov	r3, r0
 800375c:	72fb      	strb	r3, [r7, #11]

  return status;
 800375e:	7afb      	ldrb	r3, [r7, #11]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40022000 	.word	0x40022000
 800376c:	40021000 	.word	0x40021000
 8003770:	0800d2d4 	.word	0x0800d2d4
 8003774:	2000026c 	.word	0x2000026c
 8003778:	20000270 	.word	0x20000270

0800377c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	b089      	sub	sp, #36	@ 0x24
 8003780:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	2300      	movs	r3, #0
 8003788:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800378a:	4b3e      	ldr	r3, [pc, #248]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003794:	4b3b      	ldr	r3, [pc, #236]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0x34>
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	d121      	bne.n	80037ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d11e      	bne.n	80037ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037b0:	4b34      	ldr	r3, [pc, #208]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037bc:	4b31      	ldr	r3, [pc, #196]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 80037be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e005      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10d      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ec:	e00a      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d102      	bne.n	80037fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037f4:	4b25      	ldr	r3, [pc, #148]	@ (800388c <HAL_RCC_GetSysClockFreq+0x110>)
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	e004      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003800:	4b23      	ldr	r3, [pc, #140]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x114>)
 8003802:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b0c      	cmp	r3, #12
 8003808:	d134      	bne.n	8003874 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800380a:	4b1e      	ldr	r3, [pc, #120]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d003      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0xa6>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d003      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0xac>
 8003820:	e005      	b.n	800382e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003822:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <HAL_RCC_GetSysClockFreq+0x110>)
 8003824:	617b      	str	r3, [r7, #20]
      break;
 8003826:	e005      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003828:	4b19      	ldr	r3, [pc, #100]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x114>)
 800382a:	617b      	str	r3, [r7, #20]
      break;
 800382c:	e002      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	617b      	str	r3, [r7, #20]
      break;
 8003832:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003834:	4b13      	ldr	r3, [pc, #76]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	3301      	adds	r3, #1
 8003840:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003842:	4b10      	ldr	r3, [pc, #64]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	fb03 f202 	mul.w	r2, r3, r2
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	fbb2 f3f3 	udiv	r3, r2, r3
 8003858:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800385a:	4b0a      	ldr	r3, [pc, #40]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x108>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	0e5b      	lsrs	r3, r3, #25
 8003860:	f003 0303 	and.w	r3, r3, #3
 8003864:	3301      	adds	r3, #1
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003874:	69bb      	ldr	r3, [r7, #24]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3724      	adds	r7, #36	@ 0x24
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	0800d2ec 	.word	0x0800d2ec
 800388c:	00f42400 	.word	0x00f42400
 8003890:	007a1200 	.word	0x007a1200

08003894 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003898:	4b03      	ldr	r3, [pc, #12]	@ (80038a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	2000026c 	.word	0x2000026c

080038ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038b0:	f7ff fff0 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038b4:	4602      	mov	r2, r0
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	4904      	ldr	r1, [pc, #16]	@ (80038d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038c2:	5ccb      	ldrb	r3, [r1, r3]
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	0800d2e4 	.word	0x0800d2e4

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038dc:	f7ff ffda 	bl	8003894 <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0adb      	lsrs	r3, r3, #11
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4904      	ldr	r1, [pc, #16]	@ (8003900 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40021000 	.word	0x40021000
 8003900:	0800d2e4 	.word	0x0800d2e4

08003904 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	220f      	movs	r2, #15
 8003912:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003914:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <HAL_RCC_GetClockConfig+0x5c>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 0203 	and.w	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003920:	4b0f      	ldr	r3, [pc, #60]	@ (8003960 <HAL_RCC_GetClockConfig+0x5c>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800392c:	4b0c      	ldr	r3, [pc, #48]	@ (8003960 <HAL_RCC_GetClockConfig+0x5c>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003938:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <HAL_RCC_GetClockConfig+0x5c>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	08db      	lsrs	r3, r3, #3
 800393e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003946:	4b07      	ldr	r3, [pc, #28]	@ (8003964 <HAL_RCC_GetClockConfig+0x60>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0207 	and.w	r2, r3, #7
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000
 8003964:	40022000 	.word	0x40022000

08003968 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003974:	4b2a      	ldr	r3, [pc, #168]	@ (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003980:	f7ff f9bc 	bl	8002cfc <HAL_PWREx_GetVoltageRange>
 8003984:	6178      	str	r0, [r7, #20]
 8003986:	e014      	b.n	80039b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003988:	4b25      	ldr	r3, [pc, #148]	@ (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398c:	4a24      	ldr	r2, [pc, #144]	@ (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003992:	6593      	str	r3, [r2, #88]	@ 0x58
 8003994:	4b22      	ldr	r3, [pc, #136]	@ (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039a0:	f7ff f9ac 	bl	8002cfc <HAL_PWREx_GetVoltageRange>
 80039a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039b8:	d10b      	bne.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b80      	cmp	r3, #128	@ 0x80
 80039be:	d919      	bls.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80039c4:	d902      	bls.n	80039cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039c6:	2302      	movs	r3, #2
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	e013      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039cc:	2301      	movs	r3, #1
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	e010      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b80      	cmp	r3, #128	@ 0x80
 80039d6:	d902      	bls.n	80039de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039d8:	2303      	movs	r3, #3
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	e00a      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b80      	cmp	r3, #128	@ 0x80
 80039e2:	d102      	bne.n	80039ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039e4:	2302      	movs	r3, #2
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	e004      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b70      	cmp	r3, #112	@ 0x70
 80039ee:	d101      	bne.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039f0:	2301      	movs	r3, #1
 80039f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 0207 	bic.w	r2, r3, #7
 80039fc:	4909      	ldr	r1, [pc, #36]	@ (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a04:	4b07      	ldr	r3, [pc, #28]	@ (8003a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d001      	beq.n	8003a16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40022000 	.word	0x40022000

08003a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a30:	2300      	movs	r3, #0
 8003a32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a34:	2300      	movs	r3, #0
 8003a36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d041      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a4c:	d02a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a4e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a52:	d824      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a58:	d008      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a5e:	d81e      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a68:	d010      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a6a:	e018      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a6c:	4b86      	ldr	r3, [pc, #536]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a85      	ldr	r2, [pc, #532]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a78:	e015      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fabb 	bl	8003ffc <RCCEx_PLLSAI1_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a8a:	e00c      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3320      	adds	r3, #32
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fba6 	bl	80041e4 <RCCEx_PLLSAI2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a9c:	e003      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	74fb      	strb	r3, [r7, #19]
      break;
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa6:	7cfb      	ldrb	r3, [r7, #19]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aac:	4b76      	ldr	r3, [pc, #472]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aba:	4973      	ldr	r1, [pc, #460]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ac2:	e001      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d041      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ad8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003adc:	d02a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ade:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ae2:	d824      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ae8:	d008      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003aea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003aee:	d81e      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003af4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003af8:	d010      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003afa:	e018      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003afc:	4b62      	ldr	r3, [pc, #392]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a61      	ldr	r2, [pc, #388]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b08:	e015      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fa73 	bl	8003ffc <RCCEx_PLLSAI1_Config>
 8003b16:	4603      	mov	r3, r0
 8003b18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b1a:	e00c      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3320      	adds	r3, #32
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fb5e 	bl	80041e4 <RCCEx_PLLSAI2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b2c:	e003      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	74fb      	strb	r3, [r7, #19]
      break;
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b36:	7cfb      	ldrb	r3, [r7, #19]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10b      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b3c:	4b52      	ldr	r3, [pc, #328]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b4a:	494f      	ldr	r1, [pc, #316]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b52:	e001      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a0 	beq.w	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b6a:	4b47      	ldr	r3, [pc, #284]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00d      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b80:	4b41      	ldr	r3, [pc, #260]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b84:	4a40      	ldr	r2, [pc, #256]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ba6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ba8:	f7fe fd78 	bl	800269c <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bae:	e009      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb0:	f7fe fd74 	bl	800269c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d902      	bls.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	74fb      	strb	r3, [r7, #19]
        break;
 8003bc2:	e005      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bc4:	4b31      	ldr	r3, [pc, #196]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ef      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d15c      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003be0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01f      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d019      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bf4:	4b24      	ldr	r3, [pc, #144]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c00:	4b21      	ldr	r3, [pc, #132]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c06:	4a20      	ldr	r2, [pc, #128]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c10:	4b1d      	ldr	r3, [pc, #116]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c16:	4a1c      	ldr	r2, [pc, #112]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c20:	4a19      	ldr	r2, [pc, #100]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fe fd33 	bl	800269c <HAL_GetTick>
 8003c36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c38:	e00b      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fe fd2f 	bl	800269c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d902      	bls.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	74fb      	strb	r3, [r7, #19]
            break;
 8003c50:	e006      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c52:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ec      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c66:	4b08      	ldr	r3, [pc, #32]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c76:	4904      	ldr	r1, [pc, #16]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c7e:	e009      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c80:	7cfb      	ldrb	r3, [r7, #19]
 8003c82:	74bb      	strb	r3, [r7, #18]
 8003c84:	e006      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c94:	7c7b      	ldrb	r3, [r7, #17]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d105      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9a:	4b9e      	ldr	r3, [pc, #632]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9e:	4a9d      	ldr	r2, [pc, #628]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb2:	4b98      	ldr	r3, [pc, #608]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb8:	f023 0203 	bic.w	r2, r3, #3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	4994      	ldr	r1, [pc, #592]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cd4:	4b8f      	ldr	r3, [pc, #572]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cda:	f023 020c 	bic.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce2:	498c      	ldr	r1, [pc, #560]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cf6:	4b87      	ldr	r3, [pc, #540]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	4983      	ldr	r1, [pc, #524]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d18:	4b7e      	ldr	r3, [pc, #504]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d26:	497b      	ldr	r1, [pc, #492]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d3a:	4b76      	ldr	r3, [pc, #472]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d48:	4972      	ldr	r1, [pc, #456]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d5c:	4b6d      	ldr	r3, [pc, #436]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d6a:	496a      	ldr	r1, [pc, #424]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d7e:	4b65      	ldr	r3, [pc, #404]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d8c:	4961      	ldr	r1, [pc, #388]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003da0:	4b5c      	ldr	r3, [pc, #368]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dae:	4959      	ldr	r1, [pc, #356]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dc2:	4b54      	ldr	r3, [pc, #336]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd0:	4950      	ldr	r1, [pc, #320]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003de4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df2:	4948      	ldr	r1, [pc, #288]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e06:	4b43      	ldr	r3, [pc, #268]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	493f      	ldr	r1, [pc, #252]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d028      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e28:	4b3a      	ldr	r3, [pc, #232]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e36:	4937      	ldr	r1, [pc, #220]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e46:	d106      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e48:	4b32      	ldr	r3, [pc, #200]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a31      	ldr	r2, [pc, #196]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e52:	60d3      	str	r3, [r2, #12]
 8003e54:	e011      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	2101      	movs	r1, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f8c8 	bl	8003ffc <RCCEx_PLLSAI1_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d028      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e86:	4b23      	ldr	r3, [pc, #140]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e94:	491f      	ldr	r1, [pc, #124]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ea4:	d106      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eb0:	60d3      	str	r3, [r2, #12]
 8003eb2:	e011      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f899 	bl	8003ffc <RCCEx_PLLSAI1_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02b      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef2:	4908      	ldr	r1, [pc, #32]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003efe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f02:	d109      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f04:	4b03      	ldr	r3, [pc, #12]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4a02      	ldr	r2, [pc, #8]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f0e:	60d3      	str	r3, [r2, #12]
 8003f10:	e014      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f12:	bf00      	nop
 8003f14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2101      	movs	r1, #1
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f867 	bl	8003ffc <RCCEx_PLLSAI1_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f38:	7cfb      	ldrb	r3, [r7, #19]
 8003f3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d02f      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f48:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f56:	4928      	ldr	r1, [pc, #160]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f66:	d10d      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f844 	bl	8003ffc <RCCEx_PLLSAI1_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d014      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f7e:	7cfb      	ldrb	r3, [r7, #19]
 8003f80:	74bb      	strb	r3, [r7, #18]
 8003f82:	e011      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3320      	adds	r3, #32
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 f925 	bl	80041e4 <RCCEx_PLLSAI2_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fb4:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fc2:	490d      	ldr	r1, [pc, #52]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fd6:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fdc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fe6:	4904      	ldr	r1, [pc, #16]	@ (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fee:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000

08003ffc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800400a:	4b75      	ldr	r3, [pc, #468]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d018      	beq.n	8004048 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004016:	4b72      	ldr	r3, [pc, #456]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0203 	and.w	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d10d      	bne.n	8004042 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
       ||
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800402e:	4b6c      	ldr	r3, [pc, #432]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
       ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d047      	beq.n	80040d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
 8004046:	e044      	b.n	80040d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b03      	cmp	r3, #3
 800404e:	d018      	beq.n	8004082 <RCCEx_PLLSAI1_Config+0x86>
 8004050:	2b03      	cmp	r3, #3
 8004052:	d825      	bhi.n	80040a0 <RCCEx_PLLSAI1_Config+0xa4>
 8004054:	2b01      	cmp	r3, #1
 8004056:	d002      	beq.n	800405e <RCCEx_PLLSAI1_Config+0x62>
 8004058:	2b02      	cmp	r3, #2
 800405a:	d009      	beq.n	8004070 <RCCEx_PLLSAI1_Config+0x74>
 800405c:	e020      	b.n	80040a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800405e:	4b60      	ldr	r3, [pc, #384]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d11d      	bne.n	80040a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800406e:	e01a      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004070:	4b5b      	ldr	r3, [pc, #364]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d116      	bne.n	80040aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004080:	e013      	b.n	80040aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004082:	4b57      	ldr	r3, [pc, #348]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10f      	bne.n	80040ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800408e:	4b54      	ldr	r3, [pc, #336]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800409e:	e006      	b.n	80040ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
      break;
 80040a4:	e004      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040a6:	bf00      	nop
 80040a8:	e002      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040aa:	bf00      	nop
 80040ac:	e000      	b.n	80040b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10d      	bne.n	80040d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040b6:	4b4a      	ldr	r3, [pc, #296]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6819      	ldr	r1, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	430b      	orrs	r3, r1
 80040cc:	4944      	ldr	r1, [pc, #272]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d17d      	bne.n	80041d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040d8:	4b41      	ldr	r3, [pc, #260]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a40      	ldr	r2, [pc, #256]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e4:	f7fe fada 	bl	800269c <HAL_GetTick>
 80040e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040ea:	e009      	b.n	8004100 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040ec:	f7fe fad6 	bl	800269c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d902      	bls.n	8004100 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	73fb      	strb	r3, [r7, #15]
        break;
 80040fe:	e005      	b.n	800410c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004100:	4b37      	ldr	r3, [pc, #220]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1ef      	bne.n	80040ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d160      	bne.n	80041d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d111      	bne.n	800413c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004118:	4b31      	ldr	r3, [pc, #196]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004120:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6892      	ldr	r2, [r2, #8]
 8004128:	0211      	lsls	r1, r2, #8
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68d2      	ldr	r2, [r2, #12]
 800412e:	0912      	lsrs	r2, r2, #4
 8004130:	0452      	lsls	r2, r2, #17
 8004132:	430a      	orrs	r2, r1
 8004134:	492a      	ldr	r1, [pc, #168]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004136:	4313      	orrs	r3, r2
 8004138:	610b      	str	r3, [r1, #16]
 800413a:	e027      	b.n	800418c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d112      	bne.n	8004168 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004142:	4b27      	ldr	r3, [pc, #156]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800414a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6892      	ldr	r2, [r2, #8]
 8004152:	0211      	lsls	r1, r2, #8
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6912      	ldr	r2, [r2, #16]
 8004158:	0852      	lsrs	r2, r2, #1
 800415a:	3a01      	subs	r2, #1
 800415c:	0552      	lsls	r2, r2, #21
 800415e:	430a      	orrs	r2, r1
 8004160:	491f      	ldr	r1, [pc, #124]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004162:	4313      	orrs	r3, r2
 8004164:	610b      	str	r3, [r1, #16]
 8004166:	e011      	b.n	800418c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004168:	4b1d      	ldr	r3, [pc, #116]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004170:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6892      	ldr	r2, [r2, #8]
 8004178:	0211      	lsls	r1, r2, #8
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6952      	ldr	r2, [r2, #20]
 800417e:	0852      	lsrs	r2, r2, #1
 8004180:	3a01      	subs	r2, #1
 8004182:	0652      	lsls	r2, r2, #25
 8004184:	430a      	orrs	r2, r1
 8004186:	4916      	ldr	r1, [pc, #88]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800418c:	4b14      	ldr	r3, [pc, #80]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a13      	ldr	r2, [pc, #76]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004192:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004196:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004198:	f7fe fa80 	bl	800269c <HAL_GetTick>
 800419c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800419e:	e009      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041a0:	f7fe fa7c 	bl	800269c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d902      	bls.n	80041b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	73fb      	strb	r3, [r7, #15]
          break;
 80041b2:	e005      	b.n	80041c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041b4:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ef      	beq.n	80041a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041c6:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	4904      	ldr	r1, [pc, #16]	@ (80041e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000

080041e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041f2:	4b6a      	ldr	r3, [pc, #424]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d018      	beq.n	8004230 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041fe:	4b67      	ldr	r3, [pc, #412]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0203 	and.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d10d      	bne.n	800422a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
       ||
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004216:	4b61      	ldr	r3, [pc, #388]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
       ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d047      	beq.n	80042ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
 800422e:	e044      	b.n	80042ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d018      	beq.n	800426a <RCCEx_PLLSAI2_Config+0x86>
 8004238:	2b03      	cmp	r3, #3
 800423a:	d825      	bhi.n	8004288 <RCCEx_PLLSAI2_Config+0xa4>
 800423c:	2b01      	cmp	r3, #1
 800423e:	d002      	beq.n	8004246 <RCCEx_PLLSAI2_Config+0x62>
 8004240:	2b02      	cmp	r3, #2
 8004242:	d009      	beq.n	8004258 <RCCEx_PLLSAI2_Config+0x74>
 8004244:	e020      	b.n	8004288 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004246:	4b55      	ldr	r3, [pc, #340]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d11d      	bne.n	800428e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004256:	e01a      	b.n	800428e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004258:	4b50      	ldr	r3, [pc, #320]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004260:	2b00      	cmp	r3, #0
 8004262:	d116      	bne.n	8004292 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004268:	e013      	b.n	8004292 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800426a:	4b4c      	ldr	r3, [pc, #304]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004276:	4b49      	ldr	r3, [pc, #292]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004286:	e006      	b.n	8004296 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      break;
 800428c:	e004      	b.n	8004298 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800428e:	bf00      	nop
 8004290:	e002      	b.n	8004298 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004292:	bf00      	nop
 8004294:	e000      	b.n	8004298 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004296:	bf00      	nop
    }

    if(status == HAL_OK)
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10d      	bne.n	80042ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800429e:	4b3f      	ldr	r3, [pc, #252]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6819      	ldr	r1, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	430b      	orrs	r3, r1
 80042b4:	4939      	ldr	r1, [pc, #228]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d167      	bne.n	8004390 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042c0:	4b36      	ldr	r3, [pc, #216]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a35      	ldr	r2, [pc, #212]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042cc:	f7fe f9e6 	bl	800269c <HAL_GetTick>
 80042d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042d2:	e009      	b.n	80042e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042d4:	f7fe f9e2 	bl	800269c <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d902      	bls.n	80042e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	73fb      	strb	r3, [r7, #15]
        break;
 80042e6:	e005      	b.n	80042f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042e8:	4b2c      	ldr	r3, [pc, #176]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ef      	bne.n	80042d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d14a      	bne.n	8004390 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d111      	bne.n	8004324 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004300:	4b26      	ldr	r3, [pc, #152]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6892      	ldr	r2, [r2, #8]
 8004310:	0211      	lsls	r1, r2, #8
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68d2      	ldr	r2, [r2, #12]
 8004316:	0912      	lsrs	r2, r2, #4
 8004318:	0452      	lsls	r2, r2, #17
 800431a:	430a      	orrs	r2, r1
 800431c:	491f      	ldr	r1, [pc, #124]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 800431e:	4313      	orrs	r3, r2
 8004320:	614b      	str	r3, [r1, #20]
 8004322:	e011      	b.n	8004348 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004324:	4b1d      	ldr	r3, [pc, #116]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800432c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6892      	ldr	r2, [r2, #8]
 8004334:	0211      	lsls	r1, r2, #8
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6912      	ldr	r2, [r2, #16]
 800433a:	0852      	lsrs	r2, r2, #1
 800433c:	3a01      	subs	r2, #1
 800433e:	0652      	lsls	r2, r2, #25
 8004340:	430a      	orrs	r2, r1
 8004342:	4916      	ldr	r1, [pc, #88]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004344:	4313      	orrs	r3, r2
 8004346:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004348:	4b14      	ldr	r3, [pc, #80]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a13      	ldr	r2, [pc, #76]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 800434e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004352:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fe f9a2 	bl	800269c <HAL_GetTick>
 8004358:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800435a:	e009      	b.n	8004370 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800435c:	f7fe f99e 	bl	800269c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d902      	bls.n	8004370 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	73fb      	strb	r3, [r7, #15]
          break;
 800436e:	e005      	b.n	800437c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004370:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0ef      	beq.n	800435c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004382:	4b06      	ldr	r3, [pc, #24]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	4904      	ldr	r1, [pc, #16]	@ (800439c <RCCEx_PLLSAI2_Config+0x1b8>)
 800438c:	4313      	orrs	r3, r2
 800438e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000

080043a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e049      	b.n	8004446 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f841 	bl	800444e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f000 f9e0 	bl	80047a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	d001      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e04f      	b.n	800451c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a23      	ldr	r2, [pc, #140]	@ (8004528 <HAL_TIM_Base_Start_IT+0xc4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01d      	beq.n	80044da <HAL_TIM_Base_Start_IT+0x76>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a6:	d018      	beq.n	80044da <HAL_TIM_Base_Start_IT+0x76>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1f      	ldr	r2, [pc, #124]	@ (800452c <HAL_TIM_Base_Start_IT+0xc8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <HAL_TIM_Base_Start_IT+0x76>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004530 <HAL_TIM_Base_Start_IT+0xcc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00e      	beq.n	80044da <HAL_TIM_Base_Start_IT+0x76>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004534 <HAL_TIM_Base_Start_IT+0xd0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d009      	beq.n	80044da <HAL_TIM_Base_Start_IT+0x76>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004538 <HAL_TIM_Base_Start_IT+0xd4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <HAL_TIM_Base_Start_IT+0x76>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a19      	ldr	r2, [pc, #100]	@ (800453c <HAL_TIM_Base_Start_IT+0xd8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d115      	bne.n	8004506 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	4b17      	ldr	r3, [pc, #92]	@ (8004540 <HAL_TIM_Base_Start_IT+0xdc>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d015      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0xb4>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f2:	d011      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004504:	e008      	b.n	8004518 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0201 	orr.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e000      	b.n	800451a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004518:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40013400 	.word	0x40013400
 800453c:	40014000 	.word	0x40014000
 8004540:	00010007 	.word	0x00010007

08004544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d020      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01b      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0202 	mvn.w	r2, #2
 8004578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f8e9 	bl	8004766 <HAL_TIM_IC_CaptureCallback>
 8004594:	e005      	b.n	80045a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f8db 	bl	8004752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f8ec 	bl	800477a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d020      	beq.n	80045f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01b      	beq.n	80045f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0204 	mvn.w	r2, #4
 80045c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f8c3 	bl	8004766 <HAL_TIM_IC_CaptureCallback>
 80045e0:	e005      	b.n	80045ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8b5 	bl	8004752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f8c6 	bl	800477a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d020      	beq.n	8004640 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01b      	beq.n	8004640 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0208 	mvn.w	r2, #8
 8004610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2204      	movs	r2, #4
 8004616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f89d 	bl	8004766 <HAL_TIM_IC_CaptureCallback>
 800462c:	e005      	b.n	800463a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f88f 	bl	8004752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f8a0 	bl	800477a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b00      	cmp	r3, #0
 8004648:	d020      	beq.n	800468c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01b      	beq.n	800468c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0210 	mvn.w	r2, #16
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2208      	movs	r2, #8
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f877 	bl	8004766 <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f869 	bl	8004752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f87a 	bl	800477a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00c      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d007      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0201 	mvn.w	r2, #1
 80046a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fd fd42 	bl	8002134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00c      	beq.n	80046de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80046d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f913 	bl	8004904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00c      	beq.n	8004702 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f90b 	bl	8004918 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00c      	beq.n	8004726 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d007      	beq.n	8004726 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800471e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f834 	bl	800478e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00c      	beq.n	800474a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f06f 0220 	mvn.w	r2, #32
 8004742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8d3 	bl	80048f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a46      	ldr	r2, [pc, #280]	@ (80048d0 <TIM_Base_SetConfig+0x12c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d013      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c2:	d00f      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a43      	ldr	r2, [pc, #268]	@ (80048d4 <TIM_Base_SetConfig+0x130>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00b      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a42      	ldr	r2, [pc, #264]	@ (80048d8 <TIM_Base_SetConfig+0x134>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d007      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a41      	ldr	r2, [pc, #260]	@ (80048dc <TIM_Base_SetConfig+0x138>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d003      	beq.n	80047e4 <TIM_Base_SetConfig+0x40>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a40      	ldr	r2, [pc, #256]	@ (80048e0 <TIM_Base_SetConfig+0x13c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d108      	bne.n	80047f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a35      	ldr	r2, [pc, #212]	@ (80048d0 <TIM_Base_SetConfig+0x12c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01f      	beq.n	800483e <TIM_Base_SetConfig+0x9a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004804:	d01b      	beq.n	800483e <TIM_Base_SetConfig+0x9a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a32      	ldr	r2, [pc, #200]	@ (80048d4 <TIM_Base_SetConfig+0x130>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d017      	beq.n	800483e <TIM_Base_SetConfig+0x9a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a31      	ldr	r2, [pc, #196]	@ (80048d8 <TIM_Base_SetConfig+0x134>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <TIM_Base_SetConfig+0x9a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a30      	ldr	r2, [pc, #192]	@ (80048dc <TIM_Base_SetConfig+0x138>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00f      	beq.n	800483e <TIM_Base_SetConfig+0x9a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a2f      	ldr	r2, [pc, #188]	@ (80048e0 <TIM_Base_SetConfig+0x13c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00b      	beq.n	800483e <TIM_Base_SetConfig+0x9a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2e      	ldr	r2, [pc, #184]	@ (80048e4 <TIM_Base_SetConfig+0x140>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d007      	beq.n	800483e <TIM_Base_SetConfig+0x9a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2d      	ldr	r2, [pc, #180]	@ (80048e8 <TIM_Base_SetConfig+0x144>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_Base_SetConfig+0x9a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2c      	ldr	r2, [pc, #176]	@ (80048ec <TIM_Base_SetConfig+0x148>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d108      	bne.n	8004850 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a16      	ldr	r2, [pc, #88]	@ (80048d0 <TIM_Base_SetConfig+0x12c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00f      	beq.n	800489c <TIM_Base_SetConfig+0xf8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a18      	ldr	r2, [pc, #96]	@ (80048e0 <TIM_Base_SetConfig+0x13c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00b      	beq.n	800489c <TIM_Base_SetConfig+0xf8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a17      	ldr	r2, [pc, #92]	@ (80048e4 <TIM_Base_SetConfig+0x140>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d007      	beq.n	800489c <TIM_Base_SetConfig+0xf8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a16      	ldr	r2, [pc, #88]	@ (80048e8 <TIM_Base_SetConfig+0x144>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_Base_SetConfig+0xf8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a15      	ldr	r2, [pc, #84]	@ (80048ec <TIM_Base_SetConfig+0x148>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d103      	bne.n	80048a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d105      	bne.n	80048c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f023 0201 	bic.w	r2, r3, #1
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	611a      	str	r2, [r3, #16]
  }
}
 80048c2:	bf00      	nop
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40012c00 	.word	0x40012c00
 80048d4:	40000400 	.word	0x40000400
 80048d8:	40000800 	.word	0x40000800
 80048dc:	40000c00 	.word	0x40000c00
 80048e0:	40013400 	.word	0x40013400
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40014400 	.word	0x40014400
 80048ec:	40014800 	.word	0x40014800

080048f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e040      	b.n	80049c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fd fde2 	bl	8002518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2224      	movs	r2, #36	@ 0x24
 8004958:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fedc 	bl	8005730 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fc21 	bl	80051c0 <UART_SetConfig>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e01b      	b.n	80049c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004996:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 ff5b 	bl	8005874 <UART_CheckIdleState>
 80049be:	4603      	mov	r3, r0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	@ 0x28
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049dc:	2b20      	cmp	r3, #32
 80049de:	d177      	bne.n	8004ad0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <HAL_UART_Transmit+0x24>
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e070      	b.n	8004ad2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2221      	movs	r2, #33	@ 0x21
 80049fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049fe:	f7fd fe4d 	bl	800269c <HAL_GetTick>
 8004a02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	88fa      	ldrh	r2, [r7, #6]
 8004a08:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	88fa      	ldrh	r2, [r7, #6]
 8004a10:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1c:	d108      	bne.n	8004a30 <HAL_UART_Transmit+0x68>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	e003      	b.n	8004a38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a38:	e02f      	b.n	8004a9a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2200      	movs	r2, #0
 8004a42:	2180      	movs	r1, #128	@ 0x80
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 ffbd 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e03b      	b.n	8004ad2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10b      	bne.n	8004a78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	881a      	ldrh	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a6c:	b292      	uxth	r2, r2
 8004a6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	3302      	adds	r3, #2
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	e007      	b.n	8004a88 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	781a      	ldrb	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3301      	adds	r3, #1
 8004a86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1c9      	bne.n	8004a3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2140      	movs	r1, #64	@ 0x40
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 ff87 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e005      	b.n	8004ad2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e000      	b.n	8004ad2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
  }
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3720      	adds	r7, #32
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08a      	sub	sp, #40	@ 0x28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d137      	bne.n	8004b64 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_UART_Receive_IT+0x24>
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e030      	b.n	8004b66 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a18      	ldr	r2, [pc, #96]	@ (8004b70 <HAL_UART_Receive_IT+0x94>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d01f      	beq.n	8004b54 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d018      	beq.n	8004b54 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	623b      	str	r3, [r7, #32]
 8004b42:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	69f9      	ldr	r1, [r7, #28]
 8004b46:	6a3a      	ldr	r2, [r7, #32]
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e6      	bne.n	8004b22 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	461a      	mov	r2, r3
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 ffa0 	bl	8005aa0 <UART_Start_Receive_IT>
 8004b60:	4603      	mov	r3, r0
 8004b62:	e000      	b.n	8004b66 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3728      	adds	r7, #40	@ 0x28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40008000 	.word	0x40008000

08004b74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b0ba      	sub	sp, #232	@ 0xe8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004b9e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d115      	bne.n	8004bdc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00f      	beq.n	8004bdc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d009      	beq.n	8004bdc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 82ca 	beq.w	8005166 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	4798      	blx	r3
      }
      return;
 8004bda:	e2c4      	b.n	8005166 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004bdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8117 	beq.w	8004e14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004bf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004bf6:	4b85      	ldr	r3, [pc, #532]	@ (8004e0c <HAL_UART_IRQHandler+0x298>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 810a 	beq.w	8004e14 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d011      	beq.n	8004c30 <HAL_UART_IRQHandler+0xbc>
 8004c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00b      	beq.n	8004c30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c26:	f043 0201 	orr.w	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d011      	beq.n	8004c60 <HAL_UART_IRQHandler+0xec>
 8004c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00b      	beq.n	8004c60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c56:	f043 0204 	orr.w	r2, r3, #4
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d011      	beq.n	8004c90 <HAL_UART_IRQHandler+0x11c>
 8004c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00b      	beq.n	8004c90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c86:	f043 0202 	orr.w	r2, r3, #2
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d017      	beq.n	8004ccc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00b      	beq.n	8004ccc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2208      	movs	r2, #8
 8004cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cc2:	f043 0208 	orr.w	r2, r3, #8
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d012      	beq.n	8004cfe <HAL_UART_IRQHandler+0x18a>
 8004cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00c      	beq.n	8004cfe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8230 	beq.w	800516a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00d      	beq.n	8004d32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d46:	2b40      	cmp	r3, #64	@ 0x40
 8004d48:	d005      	beq.n	8004d56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d04f      	beq.n	8004df6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 ff68 	bl	8005c2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d66:	2b40      	cmp	r3, #64	@ 0x40
 8004d68:	d141      	bne.n	8004dee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3308      	adds	r3, #8
 8004d70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3308      	adds	r3, #8
 8004d92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004da2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1d9      	bne.n	8004d6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d013      	beq.n	8004de6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dc2:	4a13      	ldr	r2, [pc, #76]	@ (8004e10 <HAL_UART_IRQHandler+0x29c>)
 8004dc4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fd fd92 	bl	80028f4 <HAL_DMA_Abort_IT>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d017      	beq.n	8004e06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004de0:	4610      	mov	r0, r2
 8004de2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de4:	e00f      	b.n	8004e06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f9d4 	bl	8005194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	e00b      	b.n	8004e06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f9d0 	bl	8005194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	e007      	b.n	8004e06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9cc 	bl	8005194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004e04:	e1b1      	b.n	800516a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e06:	bf00      	nop
    return;
 8004e08:	e1af      	b.n	800516a <HAL_UART_IRQHandler+0x5f6>
 8004e0a:	bf00      	nop
 8004e0c:	04000120 	.word	0x04000120
 8004e10:	08005cf5 	.word	0x08005cf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	f040 816a 	bne.w	80050f2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 8163 	beq.w	80050f2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e30:	f003 0310 	and.w	r3, r3, #16
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 815c 	beq.w	80050f2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2210      	movs	r2, #16
 8004e40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4c:	2b40      	cmp	r3, #64	@ 0x40
 8004e4e:	f040 80d4 	bne.w	8004ffa <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80ad 	beq.w	8004fc2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e72:	429a      	cmp	r2, r3
 8004e74:	f080 80a5 	bcs.w	8004fc2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f040 8086 	bne.w	8004fa0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004eac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004ebe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ec2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004eca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1da      	bne.n	8004e94 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004eee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e1      	bne.n	8004ede <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3308      	adds	r3, #8
 8004f20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3308      	adds	r3, #8
 8004f3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e3      	bne.n	8004f1a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f70:	f023 0310 	bic.w	r3, r3, #16
 8004f74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e4      	bne.n	8004f60 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fd fc6c 	bl	8002878 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	4619      	mov	r1, r3
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8f4 	bl	80051a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004fc0:	e0d5      	b.n	800516e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004fc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	f040 80ce 	bne.w	800516e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	f040 80c5 	bne.w	800516e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f8d8 	bl	80051a8 <HAL_UARTEx_RxEventCallback>
      return;
 8004ff8:	e0b9      	b.n	800516e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005006:	b29b      	uxth	r3, r3
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80ab 	beq.w	8005172 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800501c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80a6 	beq.w	8005172 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800503a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005048:	647b      	str	r3, [r7, #68]	@ 0x44
 800504a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800504e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e4      	bne.n	8005026 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3308      	adds	r3, #8
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	623b      	str	r3, [r7, #32]
   return(result);
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3308      	adds	r3, #8
 800507c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005080:	633a      	str	r2, [r7, #48]	@ 0x30
 8005082:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005088:	e841 2300 	strex	r3, r2, [r1]
 800508c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800508e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1e3      	bne.n	800505c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f023 0310 	bic.w	r3, r3, #16
 80050bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	69b9      	ldr	r1, [r7, #24]
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	617b      	str	r3, [r7, #20]
   return(result);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e4      	bne.n	80050a8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f85c 	bl	80051a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050f0:	e03f      	b.n	8005172 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00e      	beq.n	800511c <HAL_UART_IRQHandler+0x5a8>
 80050fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d008      	beq.n	800511c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005112:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 ffe9 	bl	80060ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800511a:	e02d      	b.n	8005178 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800511c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00e      	beq.n	8005146 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800512c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005130:	2b00      	cmp	r3, #0
 8005132:	d008      	beq.n	8005146 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01c      	beq.n	8005176 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	4798      	blx	r3
    }
    return;
 8005144:	e017      	b.n	8005176 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514e:	2b00      	cmp	r3, #0
 8005150:	d012      	beq.n	8005178 <HAL_UART_IRQHandler+0x604>
 8005152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00c      	beq.n	8005178 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fdde 	bl	8005d20 <UART_EndTransmit_IT>
    return;
 8005164:	e008      	b.n	8005178 <HAL_UART_IRQHandler+0x604>
      return;
 8005166:	bf00      	nop
 8005168:	e006      	b.n	8005178 <HAL_UART_IRQHandler+0x604>
    return;
 800516a:	bf00      	nop
 800516c:	e004      	b.n	8005178 <HAL_UART_IRQHandler+0x604>
      return;
 800516e:	bf00      	nop
 8005170:	e002      	b.n	8005178 <HAL_UART_IRQHandler+0x604>
      return;
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <HAL_UART_IRQHandler+0x604>
    return;
 8005176:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005178:	37e8      	adds	r7, #232	@ 0xe8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop

08005180 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c4:	b08a      	sub	sp, #40	@ 0x28
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	431a      	orrs	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	431a      	orrs	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4ba4      	ldr	r3, [pc, #656]	@ (8005480 <UART_SetConfig+0x2c0>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a99      	ldr	r2, [pc, #612]	@ (8005484 <UART_SetConfig+0x2c4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005228:	4313      	orrs	r3, r2
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a90      	ldr	r2, [pc, #576]	@ (8005488 <UART_SetConfig+0x2c8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d126      	bne.n	8005298 <UART_SetConfig+0xd8>
 800524a:	4b90      	ldr	r3, [pc, #576]	@ (800548c <UART_SetConfig+0x2cc>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	2b03      	cmp	r3, #3
 8005256:	d81b      	bhi.n	8005290 <UART_SetConfig+0xd0>
 8005258:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <UART_SetConfig+0xa0>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	08005271 	.word	0x08005271
 8005264:	08005281 	.word	0x08005281
 8005268:	08005279 	.word	0x08005279
 800526c:	08005289 	.word	0x08005289
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005276:	e116      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005278:	2302      	movs	r3, #2
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800527e:	e112      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005280:	2304      	movs	r3, #4
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005286:	e10e      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005288:	2308      	movs	r3, #8
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800528e:	e10a      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005290:	2310      	movs	r3, #16
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005296:	e106      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a7c      	ldr	r2, [pc, #496]	@ (8005490 <UART_SetConfig+0x2d0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d138      	bne.n	8005314 <UART_SetConfig+0x154>
 80052a2:	4b7a      	ldr	r3, [pc, #488]	@ (800548c <UART_SetConfig+0x2cc>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a8:	f003 030c 	and.w	r3, r3, #12
 80052ac:	2b0c      	cmp	r3, #12
 80052ae:	d82d      	bhi.n	800530c <UART_SetConfig+0x14c>
 80052b0:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <UART_SetConfig+0xf8>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052ed 	.word	0x080052ed
 80052bc:	0800530d 	.word	0x0800530d
 80052c0:	0800530d 	.word	0x0800530d
 80052c4:	0800530d 	.word	0x0800530d
 80052c8:	080052fd 	.word	0x080052fd
 80052cc:	0800530d 	.word	0x0800530d
 80052d0:	0800530d 	.word	0x0800530d
 80052d4:	0800530d 	.word	0x0800530d
 80052d8:	080052f5 	.word	0x080052f5
 80052dc:	0800530d 	.word	0x0800530d
 80052e0:	0800530d 	.word	0x0800530d
 80052e4:	0800530d 	.word	0x0800530d
 80052e8:	08005305 	.word	0x08005305
 80052ec:	2300      	movs	r3, #0
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052f2:	e0d8      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80052f4:	2302      	movs	r3, #2
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052fa:	e0d4      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80052fc:	2304      	movs	r3, #4
 80052fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005302:	e0d0      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005304:	2308      	movs	r3, #8
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800530a:	e0cc      	b.n	80054a6 <UART_SetConfig+0x2e6>
 800530c:	2310      	movs	r3, #16
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005312:	e0c8      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a5e      	ldr	r2, [pc, #376]	@ (8005494 <UART_SetConfig+0x2d4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d125      	bne.n	800536a <UART_SetConfig+0x1aa>
 800531e:	4b5b      	ldr	r3, [pc, #364]	@ (800548c <UART_SetConfig+0x2cc>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005324:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005328:	2b30      	cmp	r3, #48	@ 0x30
 800532a:	d016      	beq.n	800535a <UART_SetConfig+0x19a>
 800532c:	2b30      	cmp	r3, #48	@ 0x30
 800532e:	d818      	bhi.n	8005362 <UART_SetConfig+0x1a2>
 8005330:	2b20      	cmp	r3, #32
 8005332:	d00a      	beq.n	800534a <UART_SetConfig+0x18a>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d814      	bhi.n	8005362 <UART_SetConfig+0x1a2>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <UART_SetConfig+0x182>
 800533c:	2b10      	cmp	r3, #16
 800533e:	d008      	beq.n	8005352 <UART_SetConfig+0x192>
 8005340:	e00f      	b.n	8005362 <UART_SetConfig+0x1a2>
 8005342:	2300      	movs	r3, #0
 8005344:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005348:	e0ad      	b.n	80054a6 <UART_SetConfig+0x2e6>
 800534a:	2302      	movs	r3, #2
 800534c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005350:	e0a9      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005352:	2304      	movs	r3, #4
 8005354:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005358:	e0a5      	b.n	80054a6 <UART_SetConfig+0x2e6>
 800535a:	2308      	movs	r3, #8
 800535c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005360:	e0a1      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005362:	2310      	movs	r3, #16
 8005364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005368:	e09d      	b.n	80054a6 <UART_SetConfig+0x2e6>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a4a      	ldr	r2, [pc, #296]	@ (8005498 <UART_SetConfig+0x2d8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d125      	bne.n	80053c0 <UART_SetConfig+0x200>
 8005374:	4b45      	ldr	r3, [pc, #276]	@ (800548c <UART_SetConfig+0x2cc>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800537e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005380:	d016      	beq.n	80053b0 <UART_SetConfig+0x1f0>
 8005382:	2bc0      	cmp	r3, #192	@ 0xc0
 8005384:	d818      	bhi.n	80053b8 <UART_SetConfig+0x1f8>
 8005386:	2b80      	cmp	r3, #128	@ 0x80
 8005388:	d00a      	beq.n	80053a0 <UART_SetConfig+0x1e0>
 800538a:	2b80      	cmp	r3, #128	@ 0x80
 800538c:	d814      	bhi.n	80053b8 <UART_SetConfig+0x1f8>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <UART_SetConfig+0x1d8>
 8005392:	2b40      	cmp	r3, #64	@ 0x40
 8005394:	d008      	beq.n	80053a8 <UART_SetConfig+0x1e8>
 8005396:	e00f      	b.n	80053b8 <UART_SetConfig+0x1f8>
 8005398:	2300      	movs	r3, #0
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800539e:	e082      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80053a0:	2302      	movs	r3, #2
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053a6:	e07e      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80053a8:	2304      	movs	r3, #4
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ae:	e07a      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80053b0:	2308      	movs	r3, #8
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053b6:	e076      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80053b8:	2310      	movs	r3, #16
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053be:	e072      	b.n	80054a6 <UART_SetConfig+0x2e6>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a35      	ldr	r2, [pc, #212]	@ (800549c <UART_SetConfig+0x2dc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d12a      	bne.n	8005420 <UART_SetConfig+0x260>
 80053ca:	4b30      	ldr	r3, [pc, #192]	@ (800548c <UART_SetConfig+0x2cc>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053d8:	d01a      	beq.n	8005410 <UART_SetConfig+0x250>
 80053da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053de:	d81b      	bhi.n	8005418 <UART_SetConfig+0x258>
 80053e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053e4:	d00c      	beq.n	8005400 <UART_SetConfig+0x240>
 80053e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ea:	d815      	bhi.n	8005418 <UART_SetConfig+0x258>
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <UART_SetConfig+0x238>
 80053f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f4:	d008      	beq.n	8005408 <UART_SetConfig+0x248>
 80053f6:	e00f      	b.n	8005418 <UART_SetConfig+0x258>
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053fe:	e052      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005400:	2302      	movs	r3, #2
 8005402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005406:	e04e      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005408:	2304      	movs	r3, #4
 800540a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800540e:	e04a      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005410:	2308      	movs	r3, #8
 8005412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005416:	e046      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005418:	2310      	movs	r3, #16
 800541a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800541e:	e042      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a17      	ldr	r2, [pc, #92]	@ (8005484 <UART_SetConfig+0x2c4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d13a      	bne.n	80054a0 <UART_SetConfig+0x2e0>
 800542a:	4b18      	ldr	r3, [pc, #96]	@ (800548c <UART_SetConfig+0x2cc>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005430:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005434:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005438:	d01a      	beq.n	8005470 <UART_SetConfig+0x2b0>
 800543a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800543e:	d81b      	bhi.n	8005478 <UART_SetConfig+0x2b8>
 8005440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005444:	d00c      	beq.n	8005460 <UART_SetConfig+0x2a0>
 8005446:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800544a:	d815      	bhi.n	8005478 <UART_SetConfig+0x2b8>
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <UART_SetConfig+0x298>
 8005450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005454:	d008      	beq.n	8005468 <UART_SetConfig+0x2a8>
 8005456:	e00f      	b.n	8005478 <UART_SetConfig+0x2b8>
 8005458:	2300      	movs	r3, #0
 800545a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800545e:	e022      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005460:	2302      	movs	r3, #2
 8005462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005466:	e01e      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005468:	2304      	movs	r3, #4
 800546a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800546e:	e01a      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005470:	2308      	movs	r3, #8
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005476:	e016      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005478:	2310      	movs	r3, #16
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800547e:	e012      	b.n	80054a6 <UART_SetConfig+0x2e6>
 8005480:	efff69f3 	.word	0xefff69f3
 8005484:	40008000 	.word	0x40008000
 8005488:	40013800 	.word	0x40013800
 800548c:	40021000 	.word	0x40021000
 8005490:	40004400 	.word	0x40004400
 8005494:	40004800 	.word	0x40004800
 8005498:	40004c00 	.word	0x40004c00
 800549c:	40005000 	.word	0x40005000
 80054a0:	2310      	movs	r3, #16
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a9f      	ldr	r2, [pc, #636]	@ (8005728 <UART_SetConfig+0x568>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d17a      	bne.n	80055a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d824      	bhi.n	8005502 <UART_SetConfig+0x342>
 80054b8:	a201      	add	r2, pc, #4	@ (adr r2, 80054c0 <UART_SetConfig+0x300>)
 80054ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054be:	bf00      	nop
 80054c0:	080054e5 	.word	0x080054e5
 80054c4:	08005503 	.word	0x08005503
 80054c8:	080054ed 	.word	0x080054ed
 80054cc:	08005503 	.word	0x08005503
 80054d0:	080054f3 	.word	0x080054f3
 80054d4:	08005503 	.word	0x08005503
 80054d8:	08005503 	.word	0x08005503
 80054dc:	08005503 	.word	0x08005503
 80054e0:	080054fb 	.word	0x080054fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e4:	f7fe f9e2 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80054e8:	61f8      	str	r0, [r7, #28]
        break;
 80054ea:	e010      	b.n	800550e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054ec:	4b8f      	ldr	r3, [pc, #572]	@ (800572c <UART_SetConfig+0x56c>)
 80054ee:	61fb      	str	r3, [r7, #28]
        break;
 80054f0:	e00d      	b.n	800550e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054f2:	f7fe f943 	bl	800377c <HAL_RCC_GetSysClockFreq>
 80054f6:	61f8      	str	r0, [r7, #28]
        break;
 80054f8:	e009      	b.n	800550e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054fe:	61fb      	str	r3, [r7, #28]
        break;
 8005500:	e005      	b.n	800550e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800550c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80fb 	beq.w	800570c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	4413      	add	r3, r2
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	429a      	cmp	r2, r3
 8005524:	d305      	bcc.n	8005532 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	429a      	cmp	r2, r3
 8005530:	d903      	bls.n	800553a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005538:	e0e8      	b.n	800570c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2200      	movs	r2, #0
 800553e:	461c      	mov	r4, r3
 8005540:	4615      	mov	r5, r2
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	022b      	lsls	r3, r5, #8
 800554c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005550:	0222      	lsls	r2, r4, #8
 8005552:	68f9      	ldr	r1, [r7, #12]
 8005554:	6849      	ldr	r1, [r1, #4]
 8005556:	0849      	lsrs	r1, r1, #1
 8005558:	2000      	movs	r0, #0
 800555a:	4688      	mov	r8, r1
 800555c:	4681      	mov	r9, r0
 800555e:	eb12 0a08 	adds.w	sl, r2, r8
 8005562:	eb43 0b09 	adc.w	fp, r3, r9
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005574:	4650      	mov	r0, sl
 8005576:	4659      	mov	r1, fp
 8005578:	f7fb fb96 	bl	8000ca8 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4613      	mov	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800558a:	d308      	bcc.n	800559e <UART_SetConfig+0x3de>
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005592:	d204      	bcs.n	800559e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	60da      	str	r2, [r3, #12]
 800559c:	e0b6      	b.n	800570c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055a4:	e0b2      	b.n	800570c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ae:	d15e      	bne.n	800566e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d828      	bhi.n	800560a <UART_SetConfig+0x44a>
 80055b8:	a201      	add	r2, pc, #4	@ (adr r2, 80055c0 <UART_SetConfig+0x400>)
 80055ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055be:	bf00      	nop
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055ed 	.word	0x080055ed
 80055c8:	080055f5 	.word	0x080055f5
 80055cc:	0800560b 	.word	0x0800560b
 80055d0:	080055fb 	.word	0x080055fb
 80055d4:	0800560b 	.word	0x0800560b
 80055d8:	0800560b 	.word	0x0800560b
 80055dc:	0800560b 	.word	0x0800560b
 80055e0:	08005603 	.word	0x08005603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e4:	f7fe f962 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80055e8:	61f8      	str	r0, [r7, #28]
        break;
 80055ea:	e014      	b.n	8005616 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ec:	f7fe f974 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 80055f0:	61f8      	str	r0, [r7, #28]
        break;
 80055f2:	e010      	b.n	8005616 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055f4:	4b4d      	ldr	r3, [pc, #308]	@ (800572c <UART_SetConfig+0x56c>)
 80055f6:	61fb      	str	r3, [r7, #28]
        break;
 80055f8:	e00d      	b.n	8005616 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055fa:	f7fe f8bf 	bl	800377c <HAL_RCC_GetSysClockFreq>
 80055fe:	61f8      	str	r0, [r7, #28]
        break;
 8005600:	e009      	b.n	8005616 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005606:	61fb      	str	r3, [r7, #28]
        break;
 8005608:	e005      	b.n	8005616 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005614:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d077      	beq.n	800570c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	005a      	lsls	r2, r3, #1
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	085b      	lsrs	r3, r3, #1
 8005626:	441a      	add	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	2b0f      	cmp	r3, #15
 8005636:	d916      	bls.n	8005666 <UART_SetConfig+0x4a6>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800563e:	d212      	bcs.n	8005666 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f023 030f 	bic.w	r3, r3, #15
 8005648:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	085b      	lsrs	r3, r3, #1
 800564e:	b29b      	uxth	r3, r3
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	b29a      	uxth	r2, r3
 8005656:	8afb      	ldrh	r3, [r7, #22]
 8005658:	4313      	orrs	r3, r2
 800565a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	8afa      	ldrh	r2, [r7, #22]
 8005662:	60da      	str	r2, [r3, #12]
 8005664:	e052      	b.n	800570c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800566c:	e04e      	b.n	800570c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800566e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005672:	2b08      	cmp	r3, #8
 8005674:	d827      	bhi.n	80056c6 <UART_SetConfig+0x506>
 8005676:	a201      	add	r2, pc, #4	@ (adr r2, 800567c <UART_SetConfig+0x4bc>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056a9 	.word	0x080056a9
 8005684:	080056b1 	.word	0x080056b1
 8005688:	080056c7 	.word	0x080056c7
 800568c:	080056b7 	.word	0x080056b7
 8005690:	080056c7 	.word	0x080056c7
 8005694:	080056c7 	.word	0x080056c7
 8005698:	080056c7 	.word	0x080056c7
 800569c:	080056bf 	.word	0x080056bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7fe f904 	bl	80038ac <HAL_RCC_GetPCLK1Freq>
 80056a4:	61f8      	str	r0, [r7, #28]
        break;
 80056a6:	e014      	b.n	80056d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056a8:	f7fe f916 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 80056ac:	61f8      	str	r0, [r7, #28]
        break;
 80056ae:	e010      	b.n	80056d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b0:	4b1e      	ldr	r3, [pc, #120]	@ (800572c <UART_SetConfig+0x56c>)
 80056b2:	61fb      	str	r3, [r7, #28]
        break;
 80056b4:	e00d      	b.n	80056d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056b6:	f7fe f861 	bl	800377c <HAL_RCC_GetSysClockFreq>
 80056ba:	61f8      	str	r0, [r7, #28]
        break;
 80056bc:	e009      	b.n	80056d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056c2:	61fb      	str	r3, [r7, #28]
        break;
 80056c4:	e005      	b.n	80056d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056d0:	bf00      	nop
    }

    if (pclk != 0U)
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d019      	beq.n	800570c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	085a      	lsrs	r2, r3, #1
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	2b0f      	cmp	r3, #15
 80056f0:	d909      	bls.n	8005706 <UART_SetConfig+0x546>
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f8:	d205      	bcs.n	8005706 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60da      	str	r2, [r3, #12]
 8005704:	e002      	b.n	800570c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005718:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800571c:	4618      	mov	r0, r3
 800571e:	3728      	adds	r7, #40	@ 0x28
 8005720:	46bd      	mov	sp, r7
 8005722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005726:	bf00      	nop
 8005728:	40008000 	.word	0x40008000
 800572c:	00f42400 	.word	0x00f42400

08005730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01a      	beq.n	8005846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800582e:	d10a      	bne.n	8005846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	605a      	str	r2, [r3, #4]
  }
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b098      	sub	sp, #96	@ 0x60
 8005878:	af02      	add	r7, sp, #8
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005884:	f7fc ff0a 	bl	800269c <HAL_GetTick>
 8005888:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b08      	cmp	r3, #8
 8005896:	d12e      	bne.n	80058f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005898:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a0:	2200      	movs	r2, #0
 80058a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f88c 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d021      	beq.n	80058f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e6      	bne.n	80058b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e062      	b.n	80059bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b04      	cmp	r3, #4
 8005902:	d149      	bne.n	8005998 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005904:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800590c:	2200      	movs	r2, #0
 800590e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f856 	bl	80059c4 <UART_WaitOnFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d03c      	beq.n	8005998 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	623b      	str	r3, [r7, #32]
   return(result);
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800593c:	633b      	str	r3, [r7, #48]	@ 0x30
 800593e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800594a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e6      	bne.n	800591e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3308      	adds	r3, #8
 8005956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3308      	adds	r3, #8
 800596e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005970:	61fa      	str	r2, [r7, #28]
 8005972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	69b9      	ldr	r1, [r7, #24]
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	617b      	str	r3, [r7, #20]
   return(result);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e5      	bne.n	8005950 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e011      	b.n	80059bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3758      	adds	r7, #88	@ 0x58
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	4613      	mov	r3, r2
 80059d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d4:	e04f      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d04b      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fc fe5d 	bl	800269c <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e04e      	b.n	8005a96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d037      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b80      	cmp	r3, #128	@ 0x80
 8005a0a:	d034      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b40      	cmp	r3, #64	@ 0x40
 8005a10:	d031      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d110      	bne.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2208      	movs	r2, #8
 8005a26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f8ff 	bl	8005c2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2208      	movs	r2, #8
 8005a32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e029      	b.n	8005a96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a50:	d111      	bne.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f8e5 	bl	8005c2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e00f      	b.n	8005a96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	bf0c      	ite	eq
 8005a86:	2301      	moveq	r3, #1
 8005a88:	2300      	movne	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d0a0      	beq.n	80059d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b097      	sub	sp, #92	@ 0x5c
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad2:	d10e      	bne.n	8005af2 <UART_Start_Receive_IT+0x52>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d105      	bne.n	8005ae8 <UART_Start_Receive_IT+0x48>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005ae2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ae6:	e02d      	b.n	8005b44 <UART_Start_Receive_IT+0xa4>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	22ff      	movs	r2, #255	@ 0xff
 8005aec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005af0:	e028      	b.n	8005b44 <UART_Start_Receive_IT+0xa4>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10d      	bne.n	8005b16 <UART_Start_Receive_IT+0x76>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <UART_Start_Receive_IT+0x6c>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	22ff      	movs	r2, #255	@ 0xff
 8005b06:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b0a:	e01b      	b.n	8005b44 <UART_Start_Receive_IT+0xa4>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	227f      	movs	r2, #127	@ 0x7f
 8005b10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b14:	e016      	b.n	8005b44 <UART_Start_Receive_IT+0xa4>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b1e:	d10d      	bne.n	8005b3c <UART_Start_Receive_IT+0x9c>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <UART_Start_Receive_IT+0x92>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	227f      	movs	r2, #127	@ 0x7f
 8005b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b30:	e008      	b.n	8005b44 <UART_Start_Receive_IT+0xa4>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	223f      	movs	r2, #63	@ 0x3f
 8005b36:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005b3a:	e003      	b.n	8005b44 <UART_Start_Receive_IT+0xa4>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2222      	movs	r2, #34	@ 0x22
 8005b50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3308      	adds	r3, #8
 8005b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b66:	f043 0301 	orr.w	r3, r3, #1
 8005b6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3308      	adds	r3, #8
 8005b72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b74:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005b76:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e5      	bne.n	8005b54 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b90:	d107      	bne.n	8005ba2 <UART_Start_Receive_IT+0x102>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4a21      	ldr	r2, [pc, #132]	@ (8005c24 <UART_Start_Receive_IT+0x184>)
 8005b9e:	669a      	str	r2, [r3, #104]	@ 0x68
 8005ba0:	e002      	b.n	8005ba8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4a20      	ldr	r2, [pc, #128]	@ (8005c28 <UART_Start_Receive_IT+0x188>)
 8005ba6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d019      	beq.n	8005be4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005bd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e6      	bne.n	8005bb0 <UART_Start_Receive_IT+0x110>
 8005be2:	e018      	b.n	8005c16 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f043 0320 	orr.w	r3, r3, #32
 8005bf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c02:	623b      	str	r3, [r7, #32]
 8005c04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c06:	69f9      	ldr	r1, [r7, #28]
 8005c08:	6a3a      	ldr	r2, [r7, #32]
 8005c0a:	e841 2300 	strex	r3, r2, [r1]
 8005c0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1e6      	bne.n	8005be4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	375c      	adds	r7, #92	@ 0x5c
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	08005f31 	.word	0x08005f31
 8005c28:	08005d75 	.word	0x08005d75

08005c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b095      	sub	sp, #84	@ 0x54
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c52:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c54:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e6      	bne.n	8005c34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e5      	bne.n	8005c66 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d118      	bne.n	8005cd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f023 0310 	bic.w	r3, r3, #16
 8005cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6979      	ldr	r1, [r7, #20]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e6      	bne.n	8005ca2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ce8:	bf00      	nop
 8005cea:	3754      	adds	r7, #84	@ 0x54
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f7ff fa3e 	bl	8005194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d3c:	61fb      	str	r3, [r7, #28]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	6979      	ldr	r1, [r7, #20]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	613b      	str	r3, [r7, #16]
   return(result);
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e6      	bne.n	8005d28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff fa0a 	bl	8005180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d6c:	bf00      	nop
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b09c      	sub	sp, #112	@ 0x70
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d8c:	2b22      	cmp	r3, #34	@ 0x22
 8005d8e:	f040 80be 	bne.w	8005f0e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005d98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005da0:	b2d9      	uxtb	r1, r3
 8005da2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dac:	400a      	ands	r2, r1
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f040 80a3 	bne.w	8005f22 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005dea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005dfc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e6      	bne.n	8005ddc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3308      	adds	r3, #8
 8005e14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e18:	e853 3f00 	ldrex	r3, [r3]
 8005e1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e20:	f023 0301 	bic.w	r3, r3, #1
 8005e24:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3308      	adds	r3, #8
 8005e2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005e2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e5      	bne.n	8005e0e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a34      	ldr	r2, [pc, #208]	@ (8005f2c <UART_RxISR_8BIT+0x1b8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d01f      	beq.n	8005ea0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d018      	beq.n	8005ea0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	e853 3f00 	ldrex	r3, [r3]
 8005e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e82:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e6      	bne.n	8005e6e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d12e      	bne.n	8005f06 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0310 	bic.w	r3, r3, #16
 8005ec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	69b9      	ldr	r1, [r7, #24]
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e6      	bne.n	8005eae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f003 0310 	and.w	r3, r3, #16
 8005eea:	2b10      	cmp	r3, #16
 8005eec:	d103      	bne.n	8005ef6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2210      	movs	r2, #16
 8005ef4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff f952 	bl	80051a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f04:	e00d      	b.n	8005f22 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fb f9c0 	bl	800128c <HAL_UART_RxCpltCallback>
}
 8005f0c:	e009      	b.n	8005f22 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	8b1b      	ldrh	r3, [r3, #24]
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0208 	orr.w	r2, r2, #8
 8005f1e:	b292      	uxth	r2, r2
 8005f20:	831a      	strh	r2, [r3, #24]
}
 8005f22:	bf00      	nop
 8005f24:	3770      	adds	r7, #112	@ 0x70
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40008000 	.word	0x40008000

08005f30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b09c      	sub	sp, #112	@ 0x70
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f48:	2b22      	cmp	r3, #34	@ 0x22
 8005f4a:	f040 80be 	bne.w	80060ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005f54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005f62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005f66:	4013      	ands	r3, r2
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f72:	1c9a      	adds	r2, r3, #2
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f040 80a3 	bne.w	80060de <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fac:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fb8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005fbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e6      	bne.n	8005f98 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	f023 0301 	bic.w	r3, r3, #1
 8005fe0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005fea:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ff0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e5      	bne.n	8005fca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a34      	ldr	r2, [pc, #208]	@ (80060e8 <UART_RxISR_16BIT+0x1b8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d01f      	beq.n	800605c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d018      	beq.n	800605c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	61fb      	str	r3, [r7, #28]
   return(result);
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800603e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800604a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800604e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e6      	bne.n	800602a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006060:	2b01      	cmp	r3, #1
 8006062:	d12e      	bne.n	80060c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	60bb      	str	r3, [r7, #8]
   return(result);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f023 0310 	bic.w	r3, r3, #16
 800607e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6979      	ldr	r1, [r7, #20]
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	613b      	str	r3, [r7, #16]
   return(result);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e6      	bne.n	800606a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b10      	cmp	r3, #16
 80060a8:	d103      	bne.n	80060b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2210      	movs	r2, #16
 80060b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff f874 	bl	80051a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060c0:	e00d      	b.n	80060de <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fb f8e2 	bl	800128c <HAL_UART_RxCpltCallback>
}
 80060c8:	e009      	b.n	80060de <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	8b1b      	ldrh	r3, [r3, #24]
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0208 	orr.w	r2, r2, #8
 80060da:	b292      	uxth	r2, r2
 80060dc:	831a      	strh	r2, [r3, #24]
}
 80060de:	bf00      	nop
 80060e0:	3770      	adds	r7, #112	@ 0x70
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	40008000 	.word	0x40008000

080060ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	4603      	mov	r3, r0
 8006108:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800610e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006112:	2b84      	cmp	r3, #132	@ 0x84
 8006114:	d005      	beq.n	8006122 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006116:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4413      	add	r3, r2
 800611e:	3303      	adds	r3, #3
 8006120:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006122:	68fb      	ldr	r3, [r7, #12]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006134:	f000 fe4e 	bl	8006dd4 <vTaskStartScheduler>
  
  return osOK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	bd80      	pop	{r7, pc}

0800613e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800613e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006140:	b089      	sub	sp, #36	@ 0x24
 8006142:	af04      	add	r7, sp, #16
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d020      	beq.n	8006192 <osThreadCreate+0x54>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01c      	beq.n	8006192 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685c      	ldr	r4, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691e      	ldr	r6, [r3, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800616a:	4618      	mov	r0, r3
 800616c:	f7ff ffc8 	bl	8006100 <makeFreeRtosPriority>
 8006170:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800617a:	9202      	str	r2, [sp, #8]
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	9100      	str	r1, [sp, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	4632      	mov	r2, r6
 8006184:	4629      	mov	r1, r5
 8006186:	4620      	mov	r0, r4
 8006188:	f000 fc3f 	bl	8006a0a <xTaskCreateStatic>
 800618c:	4603      	mov	r3, r0
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	e01c      	b.n	80061cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685c      	ldr	r4, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800619e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff ffaa 	bl	8006100 <makeFreeRtosPriority>
 80061ac:	4602      	mov	r2, r0
 80061ae:	f107 030c 	add.w	r3, r7, #12
 80061b2:	9301      	str	r3, [sp, #4]
 80061b4:	9200      	str	r2, [sp, #0]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	4632      	mov	r2, r6
 80061ba:	4629      	mov	r1, r5
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 fc84 	bl	8006aca <xTaskCreate>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d001      	beq.n	80061cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	e000      	b.n	80061ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061cc:	68fb      	ldr	r3, [r7, #12]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <osDelay+0x16>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	e000      	b.n	80061ee <osDelay+0x18>
 80061ec:	2301      	movs	r3, #1
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fdba 	bl	8006d68 <vTaskDelay>
  
  return osOK;
 80061f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f103 0208 	add.w	r2, r3, #8
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f04f 32ff 	mov.w	r2, #4294967295
 8006216:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f103 0208 	add.w	r2, r3, #8
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f103 0208 	add.w	r2, r3, #8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
}
 8006294:	bf00      	nop
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b6:	d103      	bne.n	80062c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	e00c      	b.n	80062da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3308      	adds	r3, #8
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	e002      	b.n	80062ce <vListInsert+0x2e>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d2f6      	bcs.n	80062c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	601a      	str	r2, [r3, #0]
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6892      	ldr	r2, [r2, #8]
 8006328:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6852      	ldr	r2, [r2, #4]
 8006332:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	429a      	cmp	r2, r3
 800633c:	d103      	bne.n	8006346 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689a      	ldr	r2, [r3, #8]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	1e5a      	subs	r2, r3, #1
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8006366:	b580      	push	{r7, lr}
 8006368:	b08c      	sub	sp, #48	@ 0x30
 800636a:	af02      	add	r7, sp, #8
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d111      	bne.n	800639c <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b04      	cmp	r3, #4
 8006382:	d81d      	bhi.n	80063c0 <xStreamBufferGenericCreate+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006396:	bf00      	nop
 8006398:	bf00      	nop
 800639a:	e7fd      	b.n	8006398 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10b      	bne.n	80063c0 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	61bb      	str	r3, [r7, #24]
}
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	e7fd      	b.n	80063bc <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d90b      	bls.n	80063e0 <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 80063c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063cc:	f383 8811 	msr	BASEPRI, r3
 80063d0:	f3bf 8f6f 	isb	sy
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	617b      	str	r3, [r7, #20]
}
 80063da:	bf00      	nop
 80063dc:	bf00      	nop
 80063de:	e7fd      	b.n	80063dc <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80063e6:	2301      	movs	r3, #1
 80063e8:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3320      	adds	r3, #32
 80063f4:	4618      	mov	r0, r3
 80063f6:	f001 fcf1 	bl	8007ddc <pvPortMalloc>
 80063fa:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	f103 0120 	add.w	r1, r3, #32
 8006408:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	6a38      	ldr	r0, [r7, #32]
 8006414:	f000 fac5 	bl	80069a2 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8006418:	6a3b      	ldr	r3, [r7, #32]
	}
 800641a:	4618      	mov	r0, r3
 800641c:	3728      	adds	r7, #40	@ 0x28
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8006422:	b480      	push	{r7}
 8006424:	b087      	sub	sp, #28
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10b      	bne.n	800644c <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	60fb      	str	r3, [r7, #12]
}
 8006446:	bf00      	nop
 8006448:	bf00      	nop
 800644a:	e7fd      	b.n	8006448 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4413      	add	r3, r2
 8006456:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	3b01      	subs	r3, #1
 8006466:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	429a      	cmp	r2, r3
 8006470:	d304      	bcc.n	800647c <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800647c:	697b      	ldr	r3, [r7, #20]
}
 800647e:	4618      	mov	r0, r3
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b090      	sub	sp, #64	@ 0x40
 800648e:	af02      	add	r7, sp, #8
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10b      	bne.n	80064be <xStreamBufferSendFromISR+0x34>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	623b      	str	r3, [r7, #32]
}
 80064b8:	bf00      	nop
 80064ba:	bf00      	nop
 80064bc:	e7fd      	b.n	80064ba <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 80064be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10b      	bne.n	80064dc <xStreamBufferSendFromISR+0x52>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	61fb      	str	r3, [r7, #28]
}
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	e7fd      	b.n	80064d8 <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80064dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064de:	7f1b      	ldrb	r3, [r3, #28]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80064e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ea:	3304      	adds	r3, #4
 80064ec:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80064ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064f0:	f7ff ff97 	bl	8006422 <xStreamBufferSpacesAvailable>
 80064f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80064f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006502:	f000 f835 	bl	8006570 <prvWriteMessageToBuffer>
 8006506:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8006508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650a:	2b00      	cmp	r3, #0
 800650c:	d02b      	beq.n	8006566 <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800650e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006510:	f000 fa27 	bl	8006962 <prvBytesInBuffer>
 8006514:	4602      	mov	r2, r0
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	429a      	cmp	r2, r3
 800651c:	d323      	bcc.n	8006566 <xStreamBufferSendFromISR+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800651e:	f3ef 8211 	mrs	r2, BASEPRI
 8006522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	61ba      	str	r2, [r7, #24]
 8006534:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006536:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8006538:	627b      	str	r3, [r7, #36]	@ 0x24
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00b      	beq.n	800655a <xStreamBufferSendFromISR+0xd0>
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	6918      	ldr	r0, [r3, #16]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	2300      	movs	r3, #0
 800654c:	2200      	movs	r2, #0
 800654e:	2100      	movs	r1, #0
 8006550:	f001 f882 	bl	8007658 <xTaskGenericNotifyFromISR>
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	2200      	movs	r2, #0
 8006558:	611a      	str	r2, [r3, #16]
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006564:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8006566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8006568:	4618      	mov	r0, r3
 800656a:	3738      	adds	r7, #56	@ 0x38
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	e01d      	b.n	80065c6 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	7f1b      	ldrb	r3, [r3, #28]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d108      	bne.n	80065a8 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8006596:	2301      	movs	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	4293      	cmp	r3, r2
 80065a0:	bf28      	it	cs
 80065a2:	4613      	movcs	r3, r2
 80065a4:	607b      	str	r3, [r7, #4]
 80065a6:	e00e      	b.n	80065c6 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d308      	bcc.n	80065c2 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80065b4:	1d3b      	adds	r3, r7, #4
 80065b6:	2204      	movs	r2, #4
 80065b8:	4619      	mov	r1, r3
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f8df 	bl	800677e <prvWriteBytesToBuffer>
 80065c0:	e001      	b.n	80065c6 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d007      	beq.n	80065dc <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	461a      	mov	r2, r3
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f8d3 	bl	800677e <prvWriteBytesToBuffer>
 80065d8:	6138      	str	r0, [r7, #16]
 80065da:	e001      	b.n	80065e0 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80065dc:	2300      	movs	r3, #0
 80065de:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80065e0:	693b      	ldr	r3, [r7, #16]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b08e      	sub	sp, #56	@ 0x38
 80065ee:	af02      	add	r7, sp, #8
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80065fc:	2300      	movs	r3, #0
 80065fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10b      	bne.n	800661e <xStreamBufferReceive+0x34>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	61fb      	str	r3, [r7, #28]
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	e7fd      	b.n	800661a <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10b      	bne.n	800663c <xStreamBufferReceive+0x52>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	61bb      	str	r3, [r7, #24]
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	e7fd      	b.n	8006638 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	7f1b      	ldrb	r3, [r3, #28]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8006648:	2304      	movs	r3, #4
 800664a:	627b      	str	r3, [r7, #36]	@ 0x24
 800664c:	e001      	b.n	8006652 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d035      	beq.n	80066c4 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8006658:	f001 fa9e 	bl	8007b98 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800665c:	6a38      	ldr	r0, [r7, #32]
 800665e:	f000 f980 	bl	8006962 <prvBytesInBuffer>
 8006662:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8006664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	429a      	cmp	r2, r3
 800666a:	d817      	bhi.n	800669c <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800666c:	2000      	movs	r0, #0
 800666e:	f001 f8d9 	bl	8007824 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <xStreamBufferReceive+0xa8>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	617b      	str	r3, [r7, #20]
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	e7fd      	b.n	800668e <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8006692:	f000 feaf 	bl	80073f4 <xTaskGetCurrentTaskHandle>
 8006696:	4602      	mov	r2, r0
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800669c:	f001 faae 	bl	8007bfc <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80066a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d811      	bhi.n	80066cc <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	2100      	movs	r1, #0
 80066ae:	2000      	movs	r0, #0
 80066b0:	f000 feb0 	bl	8007414 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	2200      	movs	r2, #0
 80066b8:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80066ba:	6a38      	ldr	r0, [r7, #32]
 80066bc:	f000 f951 	bl	8006962 <prvBytesInBuffer>
 80066c0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80066c2:	e003      	b.n	80066cc <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80066c4:	6a38      	ldr	r0, [r7, #32]
 80066c6:	f000 f94c 	bl	8006962 <prvBytesInBuffer>
 80066ca:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80066cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d91d      	bls.n	8006710 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	6a38      	ldr	r0, [r7, #32]
 80066e0:	f000 f81b 	bl	800671a <prvReadMessageFromBuffer>
 80066e4:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80066e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d011      	beq.n	8006710 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80066ec:	f000 fbdc 	bl	8006ea8 <vTaskSuspendAll>
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <xStreamBufferReceive+0x122>
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	6958      	ldr	r0, [r3, #20]
 80066fc:	2300      	movs	r3, #0
 80066fe:	2200      	movs	r2, #0
 8006700:	2100      	movs	r1, #0
 8006702:	f000 fee7 	bl	80074d4 <xTaskGenericNotify>
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	2200      	movs	r2, #0
 800670a:	615a      	str	r2, [r3, #20]
 800670c:	f000 fbda 	bl	8006ec4 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006712:	4618      	mov	r0, r3
 8006714:	3730      	adds	r7, #48	@ 0x30
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b088      	sub	sp, #32
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
 8006726:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8006728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672a:	2b00      	cmp	r3, #0
 800672c:	d019      	beq.n	8006762 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8006734:	f107 0110 	add.w	r1, r7, #16
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f893 	bl	8006868 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	429a      	cmp	r2, r3
 8006754:	d907      	bls.n	8006766 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	e001      	b.n	8006766 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	69fa      	ldr	r2, [r7, #28]
 800676a:	68b9      	ldr	r1, [r7, #8]
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f87b 	bl	8006868 <prvReadBytesFromBuffer>
 8006772:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8006774:	697b      	ldr	r3, [r7, #20]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b08a      	sub	sp, #40	@ 0x28
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10b      	bne.n	80067a8 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	61fb      	str	r3, [r7, #28]
}
 80067a2:	bf00      	nop
 80067a4:	bf00      	nop
 80067a6:	e7fd      	b.n	80067a4 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	4293      	cmp	r3, r2
 80067ba:	bf28      	it	cs
 80067bc:	4613      	movcs	r3, r2
 80067be:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80067c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	441a      	add	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d90b      	bls.n	80067e6 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	61bb      	str	r3, [r7, #24]
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	e7fd      	b.n	80067e2 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	4413      	add	r3, r2
 80067ee:	6a3a      	ldr	r2, [r7, #32]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f003 fa45 	bl	8009c82 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d91d      	bls.n	800683c <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	1ad2      	subs	r2, r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	429a      	cmp	r2, r3
 800680c:	d90b      	bls.n	8006826 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	617b      	str	r3, [r7, #20]
}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	e7fd      	b.n	8006822 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6998      	ldr	r0, [r3, #24]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	18d1      	adds	r1, r2, r3
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	461a      	mov	r2, r3
 8006838:	f003 fa23 	bl	8009c82 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800683c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4413      	add	r3, r2
 8006842:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800684a:	429a      	cmp	r2, r3
 800684c:	d304      	bcc.n	8006858 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800685c:	605a      	str	r2, [r3, #4]

	return xCount;
 800685e:	687b      	ldr	r3, [r7, #4]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3728      	adds	r7, #40	@ 0x28
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	@ 0x28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	4293      	cmp	r3, r2
 800687c:	bf28      	it	cs
 800687e:	4613      	movcs	r3, r2
 8006880:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d067      	beq.n	8006958 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	6a3a      	ldr	r2, [r7, #32]
 8006898:	4293      	cmp	r3, r2
 800689a:	bf28      	it	cs
 800689c:	4613      	movcs	r3, r2
 800689e:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d90b      	bls.n	80068c0 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	61bb      	str	r3, [r7, #24]
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80068c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	441a      	add	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d90b      	bls.n	80068e6 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	617b      	str	r3, [r7, #20]
}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop
 80068e4:	e7fd      	b.n	80068e2 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	699a      	ldr	r2, [r3, #24]
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	4413      	add	r3, r2
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	4619      	mov	r1, r3
 80068f2:	68b8      	ldr	r0, [r7, #8]
 80068f4:	f003 f9c5 	bl	8009c82 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80068f8:	6a3a      	ldr	r2, [r7, #32]
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d91a      	bls.n	8006936 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8006900:	6a3a      	ldr	r2, [r7, #32]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	429a      	cmp	r2, r3
 8006906:	d90b      	bls.n	8006920 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	613b      	str	r3, [r7, #16]
}
 800691a:	bf00      	nop
 800691c:	bf00      	nop
 800691e:	e7fd      	b.n	800691c <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	18d0      	adds	r0, r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6999      	ldr	r1, [r3, #24]
 800692a:	6a3a      	ldr	r2, [r7, #32]
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	461a      	mov	r2, r3
 8006932:	f003 f9a6 	bl	8009c82 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8006936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	4413      	add	r3, r2
 800693c:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006944:	429a      	cmp	r2, r3
 8006946:	d304      	bcc.n	8006952 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006956:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8006958:	6a3b      	ldr	r3, [r7, #32]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3728      	adds	r7, #40	@ 0x28
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	4413      	add	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	429a      	cmp	r2, r3
 8006988:	d304      	bcc.n	8006994 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8006994:	68fb      	ldr	r3, [r7, #12]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b086      	sub	sp, #24
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	607a      	str	r2, [r7, #4]
 80069ae:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80069b0:	2355      	movs	r3, #85	@ 0x55
 80069b2:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6979      	ldr	r1, [r7, #20]
 80069b8:	68b8      	ldr	r0, [r7, #8]
 80069ba:	f003 f816 	bl	80099ea <memset>
 80069be:	4602      	mov	r2, r0
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00b      	beq.n	80069de <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	613b      	str	r3, [r7, #16]
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	e7fd      	b.n	80069da <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80069de:	2220      	movs	r2, #32
 80069e0:	2100      	movs	r1, #0
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f003 f801 	bl	80099ea <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006a00:	771a      	strb	r2, [r3, #28]
}
 8006a02:	bf00      	nop
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b08e      	sub	sp, #56	@ 0x38
 8006a0e:	af04      	add	r7, sp, #16
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10b      	bne.n	8006a36 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	623b      	str	r3, [r7, #32]
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	e7fd      	b.n	8006a32 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10b      	bne.n	8006a54 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	61fb      	str	r3, [r7, #28]
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	e7fd      	b.n	8006a50 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a54:	23a0      	movs	r3, #160	@ 0xa0
 8006a56:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8006a5c:	d00b      	beq.n	8006a76 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	61bb      	str	r3, [r7, #24]
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop
 8006a74:	e7fd      	b.n	8006a72 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d01e      	beq.n	8006abc <xTaskCreateStatic+0xb2>
 8006a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01b      	beq.n	8006abc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a86:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a8c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a96:	2300      	movs	r3, #0
 8006a98:	9303      	str	r3, [sp, #12]
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	9302      	str	r3, [sp, #8]
 8006a9e:	f107 0314 	add.w	r3, r7, #20
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f850 	bl	8006b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ab4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ab6:	f000 f8ed 	bl	8006c94 <prvAddNewTaskToReadyList>
 8006aba:	e001      	b.n	8006ac0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ac0:	697b      	ldr	r3, [r7, #20]
	}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3728      	adds	r7, #40	@ 0x28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b08c      	sub	sp, #48	@ 0x30
 8006ace:	af04      	add	r7, sp, #16
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f97c 	bl	8007ddc <pvPortMalloc>
 8006ae4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00e      	beq.n	8006b0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006aec:	20a0      	movs	r0, #160	@ 0xa0
 8006aee:	f001 f975 	bl	8007ddc <pvPortMalloc>
 8006af2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b00:	e005      	b.n	8006b0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b02:	6978      	ldr	r0, [r7, #20]
 8006b04:	f001 fa38 	bl	8007f78 <vPortFree>
 8006b08:	e001      	b.n	8006b0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d017      	beq.n	8006b44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	9303      	str	r3, [sp, #12]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	9302      	str	r3, [sp, #8]
 8006b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b28:	9301      	str	r3, [sp, #4]
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f80e 	bl	8006b54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b38:	69f8      	ldr	r0, [r7, #28]
 8006b3a:	f000 f8ab 	bl	8006c94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	e002      	b.n	8006b4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b44:	f04f 33ff 	mov.w	r3, #4294967295
 8006b48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	4413      	add	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	f023 0307 	bic.w	r3, r3, #7
 8006b7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00b      	beq.n	8006b9e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	617b      	str	r3, [r7, #20]
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	e7fd      	b.n	8006b9a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d01f      	beq.n	8006be4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	e012      	b.n	8006bd0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	4413      	add	r3, r2
 8006bb0:	7819      	ldrb	r1, [r3, #0]
 8006bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3334      	adds	r3, #52	@ 0x34
 8006bba:	460a      	mov	r2, r1
 8006bbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d006      	beq.n	8006bd8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	2b0f      	cmp	r3, #15
 8006bd4:	d9e9      	bls.n	8006baa <prvInitialiseNewTask+0x56>
 8006bd6:	e000      	b.n	8006bda <prvInitialiseNewTask+0x86>
			{
				break;
 8006bd8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006be2:	e003      	b.n	8006bec <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bee:	2b06      	cmp	r3, #6
 8006bf0:	d901      	bls.n	8006bf6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bf2:	2306      	movs	r3, #6
 8006bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c00:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	2200      	movs	r2, #0
 8006c06:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff fb16 	bl	800623e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	3318      	adds	r3, #24
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff fb11 	bl	800623e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c24:	f1c3 0207 	rsb	r2, r3, #7
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c30:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	334c      	adds	r3, #76	@ 0x4c
 8006c46:	224c      	movs	r2, #76	@ 0x4c
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f002 fecd 	bl	80099ea <memset>
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	4a0d      	ldr	r2, [pc, #52]	@ (8006c88 <prvInitialiseNewTask+0x134>)
 8006c54:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	4a0c      	ldr	r2, [pc, #48]	@ (8006c8c <prvInitialiseNewTask+0x138>)
 8006c5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006c90 <prvInitialiseNewTask+0x13c>)
 8006c60:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	68f9      	ldr	r1, [r7, #12]
 8006c66:	69b8      	ldr	r0, [r7, #24]
 8006c68:	f000 fe68 	bl	800793c <pxPortInitialiseStack>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c7e:	bf00      	nop
 8006c80:	3720      	adds	r7, #32
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	2000594c 	.word	0x2000594c
 8006c8c:	200059b4 	.word	0x200059b4
 8006c90:	20005a1c 	.word	0x20005a1c

08006c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c9c:	f000 ff7c 	bl	8007b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8006d4c <prvAddNewTaskToReadyList+0xb8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	4a29      	ldr	r2, [pc, #164]	@ (8006d4c <prvAddNewTaskToReadyList+0xb8>)
 8006ca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006caa:	4b29      	ldr	r3, [pc, #164]	@ (8006d50 <prvAddNewTaskToReadyList+0xbc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cb2:	4a27      	ldr	r2, [pc, #156]	@ (8006d50 <prvAddNewTaskToReadyList+0xbc>)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cb8:	4b24      	ldr	r3, [pc, #144]	@ (8006d4c <prvAddNewTaskToReadyList+0xb8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d110      	bne.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cc0:	f000 fad4 	bl	800726c <prvInitialiseTaskLists>
 8006cc4:	e00d      	b.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cc6:	4b23      	ldr	r3, [pc, #140]	@ (8006d54 <prvAddNewTaskToReadyList+0xc0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cce:	4b20      	ldr	r3, [pc, #128]	@ (8006d50 <prvAddNewTaskToReadyList+0xbc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d802      	bhi.n	8006ce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8006d50 <prvAddNewTaskToReadyList+0xbc>)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d58 <prvAddNewTaskToReadyList+0xc4>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8006d58 <prvAddNewTaskToReadyList+0xc4>)
 8006cea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	409a      	lsls	r2, r3
 8006cf4:	4b19      	ldr	r3, [pc, #100]	@ (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	4a18      	ldr	r2, [pc, #96]	@ (8006d5c <prvAddNewTaskToReadyList+0xc8>)
 8006cfc:	6013      	str	r3, [r2, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4a15      	ldr	r2, [pc, #84]	@ (8006d60 <prvAddNewTaskToReadyList+0xcc>)
 8006d0c:	441a      	add	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3304      	adds	r3, #4
 8006d12:	4619      	mov	r1, r3
 8006d14:	4610      	mov	r0, r2
 8006d16:	f7ff fa9f 	bl	8006258 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d1a:	f000 ff6f 	bl	8007bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <prvAddNewTaskToReadyList+0xc0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00e      	beq.n	8006d44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d26:	4b0a      	ldr	r3, [pc, #40]	@ (8006d50 <prvAddNewTaskToReadyList+0xbc>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d207      	bcs.n	8006d44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d34:	4b0b      	ldr	r3, [pc, #44]	@ (8006d64 <prvAddNewTaskToReadyList+0xd0>)
 8006d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d44:	bf00      	nop
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	20000ad8 	.word	0x20000ad8
 8006d50:	200009d8 	.word	0x200009d8
 8006d54:	20000ae4 	.word	0x20000ae4
 8006d58:	20000af4 	.word	0x20000af4
 8006d5c:	20000ae0 	.word	0x20000ae0
 8006d60:	200009dc 	.word	0x200009dc
 8006d64:	e000ed04 	.word	0xe000ed04

08006d68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d018      	beq.n	8006dac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d7a:	4b14      	ldr	r3, [pc, #80]	@ (8006dcc <vTaskDelay+0x64>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00b      	beq.n	8006d9a <vTaskDelay+0x32>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	60bb      	str	r3, [r7, #8]
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop
 8006d98:	e7fd      	b.n	8006d96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d9a:	f000 f885 	bl	8006ea8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d9e:	2100      	movs	r1, #0
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fd65 	bl	8007870 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006da6:	f000 f88d 	bl	8006ec4 <xTaskResumeAll>
 8006daa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d107      	bne.n	8006dc2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006db2:	4b07      	ldr	r3, [pc, #28]	@ (8006dd0 <vTaskDelay+0x68>)
 8006db4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dc2:	bf00      	nop
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000b00 	.word	0x20000b00
 8006dd0:	e000ed04 	.word	0xe000ed04

08006dd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08a      	sub	sp, #40	@ 0x28
 8006dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006de2:	463a      	mov	r2, r7
 8006de4:	1d39      	adds	r1, r7, #4
 8006de6:	f107 0308 	add.w	r3, r7, #8
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fa f928 	bl	8001040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	9202      	str	r2, [sp, #8]
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	460a      	mov	r2, r1
 8006e02:	4921      	ldr	r1, [pc, #132]	@ (8006e88 <vTaskStartScheduler+0xb4>)
 8006e04:	4821      	ldr	r0, [pc, #132]	@ (8006e8c <vTaskStartScheduler+0xb8>)
 8006e06:	f7ff fe00 	bl	8006a0a <xTaskCreateStatic>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	4a20      	ldr	r2, [pc, #128]	@ (8006e90 <vTaskStartScheduler+0xbc>)
 8006e0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e10:	4b1f      	ldr	r3, [pc, #124]	@ (8006e90 <vTaskStartScheduler+0xbc>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	e001      	b.n	8006e22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d11b      	bne.n	8006e60 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	613b      	str	r3, [r7, #16]
}
 8006e3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e3c:	4b15      	ldr	r3, [pc, #84]	@ (8006e94 <vTaskStartScheduler+0xc0>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	334c      	adds	r3, #76	@ 0x4c
 8006e42:	4a15      	ldr	r2, [pc, #84]	@ (8006e98 <vTaskStartScheduler+0xc4>)
 8006e44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e46:	4b15      	ldr	r3, [pc, #84]	@ (8006e9c <vTaskStartScheduler+0xc8>)
 8006e48:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e4e:	4b14      	ldr	r3, [pc, #80]	@ (8006ea0 <vTaskStartScheduler+0xcc>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e54:	4b13      	ldr	r3, [pc, #76]	@ (8006ea4 <vTaskStartScheduler+0xd0>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e5a:	f000 fdf9 	bl	8007a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e5e:	e00f      	b.n	8006e80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d10b      	bne.n	8006e80 <vTaskStartScheduler+0xac>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	60fb      	str	r3, [r7, #12]
}
 8006e7a:	bf00      	nop
 8006e7c:	bf00      	nop
 8006e7e:	e7fd      	b.n	8006e7c <vTaskStartScheduler+0xa8>
}
 8006e80:	bf00      	nop
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	0800d2cc 	.word	0x0800d2cc
 8006e8c:	0800723d 	.word	0x0800723d
 8006e90:	20000afc 	.word	0x20000afc
 8006e94:	200009d8 	.word	0x200009d8
 8006e98:	200003f4 	.word	0x200003f4
 8006e9c:	20000af8 	.word	0x20000af8
 8006ea0:	20000ae4 	.word	0x20000ae4
 8006ea4:	20000adc 	.word	0x20000adc

08006ea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006eac:	4b04      	ldr	r3, [pc, #16]	@ (8006ec0 <vTaskSuspendAll+0x18>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	4a03      	ldr	r2, [pc, #12]	@ (8006ec0 <vTaskSuspendAll+0x18>)
 8006eb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006eb6:	bf00      	nop
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	20000b00 	.word	0x20000b00

08006ec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ed2:	4b42      	ldr	r3, [pc, #264]	@ (8006fdc <xTaskResumeAll+0x118>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <xTaskResumeAll+0x2e>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	603b      	str	r3, [r7, #0]
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	e7fd      	b.n	8006eee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ef2:	f000 fe51 	bl	8007b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ef6:	4b39      	ldr	r3, [pc, #228]	@ (8006fdc <xTaskResumeAll+0x118>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	4a37      	ldr	r2, [pc, #220]	@ (8006fdc <xTaskResumeAll+0x118>)
 8006efe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f00:	4b36      	ldr	r3, [pc, #216]	@ (8006fdc <xTaskResumeAll+0x118>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d161      	bne.n	8006fcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f08:	4b35      	ldr	r3, [pc, #212]	@ (8006fe0 <xTaskResumeAll+0x11c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d05d      	beq.n	8006fcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f10:	e02e      	b.n	8006f70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f12:	4b34      	ldr	r3, [pc, #208]	@ (8006fe4 <xTaskResumeAll+0x120>)
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3318      	adds	r3, #24
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff f9f7 	bl	8006312 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff f9f2 	bl	8006312 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f32:	2201      	movs	r2, #1
 8006f34:	409a      	lsls	r2, r3
 8006f36:	4b2c      	ldr	r3, [pc, #176]	@ (8006fe8 <xTaskResumeAll+0x124>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8006fe8 <xTaskResumeAll+0x124>)
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4a27      	ldr	r2, [pc, #156]	@ (8006fec <xTaskResumeAll+0x128>)
 8006f4e:	441a      	add	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7ff f97e 	bl	8006258 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f60:	4b23      	ldr	r3, [pc, #140]	@ (8006ff0 <xTaskResumeAll+0x12c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d302      	bcc.n	8006f70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f6a:	4b22      	ldr	r3, [pc, #136]	@ (8006ff4 <xTaskResumeAll+0x130>)
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f70:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe4 <xTaskResumeAll+0x120>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1cc      	bne.n	8006f12 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f7e:	f000 fa19 	bl	80073b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f82:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff8 <xTaskResumeAll+0x134>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d010      	beq.n	8006fb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f8e:	f000 f837 	bl	8007000 <xTaskIncrementTick>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f98:	4b16      	ldr	r3, [pc, #88]	@ (8006ff4 <xTaskResumeAll+0x130>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f1      	bne.n	8006f8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006faa:	4b13      	ldr	r3, [pc, #76]	@ (8006ff8 <xTaskResumeAll+0x134>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fb0:	4b10      	ldr	r3, [pc, #64]	@ (8006ff4 <xTaskResumeAll+0x130>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d009      	beq.n	8006fcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8006ffc <xTaskResumeAll+0x138>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fcc:	f000 fe16 	bl	8007bfc <vPortExitCritical>

	return xAlreadyYielded;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000b00 	.word	0x20000b00
 8006fe0:	20000ad8 	.word	0x20000ad8
 8006fe4:	20000a98 	.word	0x20000a98
 8006fe8:	20000ae0 	.word	0x20000ae0
 8006fec:	200009dc 	.word	0x200009dc
 8006ff0:	200009d8 	.word	0x200009d8
 8006ff4:	20000aec 	.word	0x20000aec
 8006ff8:	20000ae8 	.word	0x20000ae8
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007006:	2300      	movs	r3, #0
 8007008:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700a:	4b4f      	ldr	r3, [pc, #316]	@ (8007148 <xTaskIncrementTick+0x148>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 808f 	bne.w	8007132 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007014:	4b4d      	ldr	r3, [pc, #308]	@ (800714c <xTaskIncrementTick+0x14c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800701c:	4a4b      	ldr	r2, [pc, #300]	@ (800714c <xTaskIncrementTick+0x14c>)
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d121      	bne.n	800706c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007028:	4b49      	ldr	r3, [pc, #292]	@ (8007150 <xTaskIncrementTick+0x150>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	603b      	str	r3, [r7, #0]
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	e7fd      	b.n	8007046 <xTaskIncrementTick+0x46>
 800704a:	4b41      	ldr	r3, [pc, #260]	@ (8007150 <xTaskIncrementTick+0x150>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	4b40      	ldr	r3, [pc, #256]	@ (8007154 <xTaskIncrementTick+0x154>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a3e      	ldr	r2, [pc, #248]	@ (8007150 <xTaskIncrementTick+0x150>)
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	4a3e      	ldr	r2, [pc, #248]	@ (8007154 <xTaskIncrementTick+0x154>)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	4b3e      	ldr	r3, [pc, #248]	@ (8007158 <xTaskIncrementTick+0x158>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3301      	adds	r3, #1
 8007064:	4a3c      	ldr	r2, [pc, #240]	@ (8007158 <xTaskIncrementTick+0x158>)
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	f000 f9a4 	bl	80073b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800706c:	4b3b      	ldr	r3, [pc, #236]	@ (800715c <xTaskIncrementTick+0x15c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	429a      	cmp	r2, r3
 8007074:	d348      	bcc.n	8007108 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007076:	4b36      	ldr	r3, [pc, #216]	@ (8007150 <xTaskIncrementTick+0x150>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d104      	bne.n	800708a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007080:	4b36      	ldr	r3, [pc, #216]	@ (800715c <xTaskIncrementTick+0x15c>)
 8007082:	f04f 32ff 	mov.w	r2, #4294967295
 8007086:	601a      	str	r2, [r3, #0]
					break;
 8007088:	e03e      	b.n	8007108 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708a:	4b31      	ldr	r3, [pc, #196]	@ (8007150 <xTaskIncrementTick+0x150>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d203      	bcs.n	80070aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070a2:	4a2e      	ldr	r2, [pc, #184]	@ (800715c <xTaskIncrementTick+0x15c>)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070a8:	e02e      	b.n	8007108 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff f92f 	bl	8006312 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d004      	beq.n	80070c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	3318      	adds	r3, #24
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff f926 	bl	8006312 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ca:	2201      	movs	r2, #1
 80070cc:	409a      	lsls	r2, r3
 80070ce:	4b24      	ldr	r3, [pc, #144]	@ (8007160 <xTaskIncrementTick+0x160>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	4a22      	ldr	r2, [pc, #136]	@ (8007160 <xTaskIncrementTick+0x160>)
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007164 <xTaskIncrementTick+0x164>)
 80070e6:	441a      	add	r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	3304      	adds	r3, #4
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f7ff f8b2 	bl	8006258 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007168 <xTaskIncrementTick+0x168>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fe:	429a      	cmp	r2, r3
 8007100:	d3b9      	bcc.n	8007076 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007102:	2301      	movs	r3, #1
 8007104:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007106:	e7b6      	b.n	8007076 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007108:	4b17      	ldr	r3, [pc, #92]	@ (8007168 <xTaskIncrementTick+0x168>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800710e:	4915      	ldr	r1, [pc, #84]	@ (8007164 <xTaskIncrementTick+0x164>)
 8007110:	4613      	mov	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	440b      	add	r3, r1
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d901      	bls.n	8007124 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007120:	2301      	movs	r3, #1
 8007122:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007124:	4b11      	ldr	r3, [pc, #68]	@ (800716c <xTaskIncrementTick+0x16c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d007      	beq.n	800713c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	e004      	b.n	800713c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007132:	4b0f      	ldr	r3, [pc, #60]	@ (8007170 <xTaskIncrementTick+0x170>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	4a0d      	ldr	r2, [pc, #52]	@ (8007170 <xTaskIncrementTick+0x170>)
 800713a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800713c:	697b      	ldr	r3, [r7, #20]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20000b00 	.word	0x20000b00
 800714c:	20000adc 	.word	0x20000adc
 8007150:	20000a90 	.word	0x20000a90
 8007154:	20000a94 	.word	0x20000a94
 8007158:	20000af0 	.word	0x20000af0
 800715c:	20000af8 	.word	0x20000af8
 8007160:	20000ae0 	.word	0x20000ae0
 8007164:	200009dc 	.word	0x200009dc
 8007168:	200009d8 	.word	0x200009d8
 800716c:	20000aec 	.word	0x20000aec
 8007170:	20000ae8 	.word	0x20000ae8

08007174 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800717a:	4b2a      	ldr	r3, [pc, #168]	@ (8007224 <vTaskSwitchContext+0xb0>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007182:	4b29      	ldr	r3, [pc, #164]	@ (8007228 <vTaskSwitchContext+0xb4>)
 8007184:	2201      	movs	r2, #1
 8007186:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007188:	e045      	b.n	8007216 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800718a:	4b27      	ldr	r3, [pc, #156]	@ (8007228 <vTaskSwitchContext+0xb4>)
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007190:	4b26      	ldr	r3, [pc, #152]	@ (800722c <vTaskSwitchContext+0xb8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	fab3 f383 	clz	r3, r3
 800719c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800719e:	7afb      	ldrb	r3, [r7, #11]
 80071a0:	f1c3 031f 	rsb	r3, r3, #31
 80071a4:	617b      	str	r3, [r7, #20]
 80071a6:	4922      	ldr	r1, [pc, #136]	@ (8007230 <vTaskSwitchContext+0xbc>)
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	440b      	add	r3, r1
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10b      	bne.n	80071d2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	607b      	str	r3, [r7, #4]
}
 80071cc:	bf00      	nop
 80071ce:	bf00      	nop
 80071d0:	e7fd      	b.n	80071ce <vTaskSwitchContext+0x5a>
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4a14      	ldr	r2, [pc, #80]	@ (8007230 <vTaskSwitchContext+0xbc>)
 80071de:	4413      	add	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	605a      	str	r2, [r3, #4]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	3308      	adds	r3, #8
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d104      	bne.n	8007202 <vTaskSwitchContext+0x8e>
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	605a      	str	r2, [r3, #4]
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4a0a      	ldr	r2, [pc, #40]	@ (8007234 <vTaskSwitchContext+0xc0>)
 800720a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800720c:	4b09      	ldr	r3, [pc, #36]	@ (8007234 <vTaskSwitchContext+0xc0>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	334c      	adds	r3, #76	@ 0x4c
 8007212:	4a09      	ldr	r2, [pc, #36]	@ (8007238 <vTaskSwitchContext+0xc4>)
 8007214:	6013      	str	r3, [r2, #0]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000b00 	.word	0x20000b00
 8007228:	20000aec 	.word	0x20000aec
 800722c:	20000ae0 	.word	0x20000ae0
 8007230:	200009dc 	.word	0x200009dc
 8007234:	200009d8 	.word	0x200009d8
 8007238:	200003f4 	.word	0x200003f4

0800723c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007244:	f000 f852 	bl	80072ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007248:	4b06      	ldr	r3, [pc, #24]	@ (8007264 <prvIdleTask+0x28>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d9f9      	bls.n	8007244 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007250:	4b05      	ldr	r3, [pc, #20]	@ (8007268 <prvIdleTask+0x2c>)
 8007252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007260:	e7f0      	b.n	8007244 <prvIdleTask+0x8>
 8007262:	bf00      	nop
 8007264:	200009dc 	.word	0x200009dc
 8007268:	e000ed04 	.word	0xe000ed04

0800726c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007272:	2300      	movs	r3, #0
 8007274:	607b      	str	r3, [r7, #4]
 8007276:	e00c      	b.n	8007292 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	4613      	mov	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4a12      	ldr	r2, [pc, #72]	@ (80072cc <prvInitialiseTaskLists+0x60>)
 8007284:	4413      	add	r3, r2
 8007286:	4618      	mov	r0, r3
 8007288:	f7fe ffb9 	bl	80061fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3301      	adds	r3, #1
 8007290:	607b      	str	r3, [r7, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b06      	cmp	r3, #6
 8007296:	d9ef      	bls.n	8007278 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007298:	480d      	ldr	r0, [pc, #52]	@ (80072d0 <prvInitialiseTaskLists+0x64>)
 800729a:	f7fe ffb0 	bl	80061fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800729e:	480d      	ldr	r0, [pc, #52]	@ (80072d4 <prvInitialiseTaskLists+0x68>)
 80072a0:	f7fe ffad 	bl	80061fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072a4:	480c      	ldr	r0, [pc, #48]	@ (80072d8 <prvInitialiseTaskLists+0x6c>)
 80072a6:	f7fe ffaa 	bl	80061fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072aa:	480c      	ldr	r0, [pc, #48]	@ (80072dc <prvInitialiseTaskLists+0x70>)
 80072ac:	f7fe ffa7 	bl	80061fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072b0:	480b      	ldr	r0, [pc, #44]	@ (80072e0 <prvInitialiseTaskLists+0x74>)
 80072b2:	f7fe ffa4 	bl	80061fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072b6:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <prvInitialiseTaskLists+0x78>)
 80072b8:	4a05      	ldr	r2, [pc, #20]	@ (80072d0 <prvInitialiseTaskLists+0x64>)
 80072ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072bc:	4b0a      	ldr	r3, [pc, #40]	@ (80072e8 <prvInitialiseTaskLists+0x7c>)
 80072be:	4a05      	ldr	r2, [pc, #20]	@ (80072d4 <prvInitialiseTaskLists+0x68>)
 80072c0:	601a      	str	r2, [r3, #0]
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	200009dc 	.word	0x200009dc
 80072d0:	20000a68 	.word	0x20000a68
 80072d4:	20000a7c 	.word	0x20000a7c
 80072d8:	20000a98 	.word	0x20000a98
 80072dc:	20000aac 	.word	0x20000aac
 80072e0:	20000ac4 	.word	0x20000ac4
 80072e4:	20000a90 	.word	0x20000a90
 80072e8:	20000a94 	.word	0x20000a94

080072ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072f2:	e019      	b.n	8007328 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072f4:	f000 fc50 	bl	8007b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f8:	4b10      	ldr	r3, [pc, #64]	@ (800733c <prvCheckTasksWaitingTermination+0x50>)
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	3304      	adds	r3, #4
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff f804 	bl	8006312 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800730a:	4b0d      	ldr	r3, [pc, #52]	@ (8007340 <prvCheckTasksWaitingTermination+0x54>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3b01      	subs	r3, #1
 8007310:	4a0b      	ldr	r2, [pc, #44]	@ (8007340 <prvCheckTasksWaitingTermination+0x54>)
 8007312:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007314:	4b0b      	ldr	r3, [pc, #44]	@ (8007344 <prvCheckTasksWaitingTermination+0x58>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3b01      	subs	r3, #1
 800731a:	4a0a      	ldr	r2, [pc, #40]	@ (8007344 <prvCheckTasksWaitingTermination+0x58>)
 800731c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800731e:	f000 fc6d 	bl	8007bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f810 	bl	8007348 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007328:	4b06      	ldr	r3, [pc, #24]	@ (8007344 <prvCheckTasksWaitingTermination+0x58>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e1      	bne.n	80072f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007330:	bf00      	nop
 8007332:	bf00      	nop
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20000aac 	.word	0x20000aac
 8007340:	20000ad8 	.word	0x20000ad8
 8007344:	20000ac0 	.word	0x20000ac0

08007348 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	334c      	adds	r3, #76	@ 0x4c
 8007354:	4618      	mov	r0, r3
 8007356:	f002 fbd3 	bl	8009b00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007360:	2b00      	cmp	r3, #0
 8007362:	d108      	bne.n	8007376 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fe05 	bl	8007f78 <vPortFree>
				vPortFree( pxTCB );
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fe02 	bl	8007f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007374:	e019      	b.n	80073aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800737c:	2b01      	cmp	r3, #1
 800737e:	d103      	bne.n	8007388 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 fdf9 	bl	8007f78 <vPortFree>
	}
 8007386:	e010      	b.n	80073aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800738e:	2b02      	cmp	r3, #2
 8007390:	d00b      	beq.n	80073aa <prvDeleteTCB+0x62>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	60fb      	str	r3, [r7, #12]
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	e7fd      	b.n	80073a6 <prvDeleteTCB+0x5e>
	}
 80073aa:	bf00      	nop
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ba:	4b0c      	ldr	r3, [pc, #48]	@ (80073ec <prvResetNextTaskUnblockTime+0x38>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d104      	bne.n	80073ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073c4:	4b0a      	ldr	r3, [pc, #40]	@ (80073f0 <prvResetNextTaskUnblockTime+0x3c>)
 80073c6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073cc:	e008      	b.n	80073e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ce:	4b07      	ldr	r3, [pc, #28]	@ (80073ec <prvResetNextTaskUnblockTime+0x38>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	4a04      	ldr	r2, [pc, #16]	@ (80073f0 <prvResetNextTaskUnblockTime+0x3c>)
 80073de:	6013      	str	r3, [r2, #0]
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	20000a90 	.word	0x20000a90
 80073f0:	20000af8 	.word	0x20000af8

080073f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80073fa:	4b05      	ldr	r3, [pc, #20]	@ (8007410 <xTaskGetCurrentTaskHandle+0x1c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007400:	687b      	ldr	r3, [r7, #4]
	}
 8007402:	4618      	mov	r0, r3
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	200009d8 	.word	0x200009d8

08007414 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007422:	f000 fbb9 	bl	8007b98 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007426:	4b29      	ldr	r3, [pc, #164]	@ (80074cc <xTaskNotifyWait+0xb8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	d01c      	beq.n	800746e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007434:	4b25      	ldr	r3, [pc, #148]	@ (80074cc <xTaskNotifyWait+0xb8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	43d2      	mvns	r2, r2
 8007440:	400a      	ands	r2, r1
 8007442:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007446:	4b21      	ldr	r3, [pc, #132]	@ (80074cc <xTaskNotifyWait+0xb8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007456:	2101      	movs	r1, #1
 8007458:	6838      	ldr	r0, [r7, #0]
 800745a:	f000 fa09 	bl	8007870 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800745e:	4b1c      	ldr	r3, [pc, #112]	@ (80074d0 <xTaskNotifyWait+0xbc>)
 8007460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800746e:	f000 fbc5 	bl	8007bfc <vPortExitCritical>

		taskENTER_CRITICAL();
 8007472:	f000 fb91 	bl	8007b98 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800747c:	4b13      	ldr	r3, [pc, #76]	@ (80074cc <xTaskNotifyWait+0xb8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007488:	4b10      	ldr	r3, [pc, #64]	@ (80074cc <xTaskNotifyWait+0xb8>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b02      	cmp	r3, #2
 8007494:	d002      	beq.n	800749c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007496:	2300      	movs	r3, #0
 8007498:	617b      	str	r3, [r7, #20]
 800749a:	e00a      	b.n	80074b2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800749c:	4b0b      	ldr	r3, [pc, #44]	@ (80074cc <xTaskNotifyWait+0xb8>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	43d2      	mvns	r2, r2
 80074a8:	400a      	ands	r2, r1
 80074aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 80074ae:	2301      	movs	r3, #1
 80074b0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074b2:	4b06      	ldr	r3, [pc, #24]	@ (80074cc <xTaskNotifyWait+0xb8>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 80074bc:	f000 fb9e 	bl	8007bfc <vPortExitCritical>

		return xReturn;
 80074c0:	697b      	ldr	r3, [r7, #20]
	}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	200009d8 	.word	0x200009d8
 80074d0:	e000ed04 	.word	0xe000ed04

080074d4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08a      	sub	sp, #40	@ 0x28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	4613      	mov	r3, r2
 80074e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80074e4:	2301      	movs	r3, #1
 80074e6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10b      	bne.n	8007506 <xTaskGenericNotify+0x32>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	61bb      	str	r3, [r7, #24]
}
 8007500:	bf00      	nop
 8007502:	bf00      	nop
 8007504:	e7fd      	b.n	8007502 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800750a:	f000 fb45 	bl	8007b98 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d004      	beq.n	800751e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007524:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	2202      	movs	r2, #2
 800752a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	2b04      	cmp	r3, #4
 8007532:	d82e      	bhi.n	8007592 <xTaskGenericNotify+0xbe>
 8007534:	a201      	add	r2, pc, #4	@ (adr r2, 800753c <xTaskGenericNotify+0x68>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	080075b7 	.word	0x080075b7
 8007540:	08007551 	.word	0x08007551
 8007544:	08007563 	.word	0x08007563
 8007548:	08007573 	.word	0x08007573
 800754c:	0800757d 	.word	0x0800757d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	431a      	orrs	r2, r3
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8007560:	e02c      	b.n	80075bc <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8007570:	e024      	b.n	80075bc <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800757a:	e01f      	b.n	80075bc <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800757c:	7ffb      	ldrb	r3, [r7, #31]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d004      	beq.n	800758c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800758a:	e017      	b.n	80075bc <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800758c:	2300      	movs	r3, #0
 800758e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007590:	e014      	b.n	80075bc <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759c:	d00d      	beq.n	80075ba <xTaskGenericNotify+0xe6>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	617b      	str	r3, [r7, #20]
}
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	e7fd      	b.n	80075b2 <xTaskGenericNotify+0xde>
					break;
 80075b6:	bf00      	nop
 80075b8:	e000      	b.n	80075bc <xTaskGenericNotify+0xe8>

					break;
 80075ba:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80075bc:	7ffb      	ldrb	r3, [r7, #31]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d13a      	bne.n	8007638 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	3304      	adds	r3, #4
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe fea3 	bl	8006312 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d0:	2201      	movs	r2, #1
 80075d2:	409a      	lsls	r2, r3
 80075d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007648 <xTaskGenericNotify+0x174>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4313      	orrs	r3, r2
 80075da:	4a1b      	ldr	r2, [pc, #108]	@ (8007648 <xTaskGenericNotify+0x174>)
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e2:	4613      	mov	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4a18      	ldr	r2, [pc, #96]	@ (800764c <xTaskGenericNotify+0x178>)
 80075ec:	441a      	add	r2, r3
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	3304      	adds	r3, #4
 80075f2:	4619      	mov	r1, r3
 80075f4:	4610      	mov	r0, r2
 80075f6:	f7fe fe2f 	bl	8006258 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00b      	beq.n	800761a <xTaskGenericNotify+0x146>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	613b      	str	r3, [r7, #16]
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	e7fd      	b.n	8007616 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761e:	4b0c      	ldr	r3, [pc, #48]	@ (8007650 <xTaskGenericNotify+0x17c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007624:	429a      	cmp	r2, r3
 8007626:	d907      	bls.n	8007638 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007628:	4b0a      	ldr	r3, [pc, #40]	@ (8007654 <xTaskGenericNotify+0x180>)
 800762a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007638:	f000 fae0 	bl	8007bfc <vPortExitCritical>

		return xReturn;
 800763c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800763e:	4618      	mov	r0, r3
 8007640:	3728      	adds	r7, #40	@ 0x28
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000ae0 	.word	0x20000ae0
 800764c:	200009dc 	.word	0x200009dc
 8007650:	200009d8 	.word	0x200009d8
 8007654:	e000ed04 	.word	0xe000ed04

08007658 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08e      	sub	sp, #56	@ 0x38
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	4613      	mov	r3, r2
 8007666:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007668:	2301      	movs	r3, #1
 800766a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10b      	bne.n	800768a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	e7fd      	b.n	8007686 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800768a:	f000 fb65 	bl	8007d58 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007692:	f3ef 8211 	mrs	r2, BASEPRI
 8007696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	623a      	str	r2, [r7, #32]
 80076a8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80076aa:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d004      	beq.n	80076be <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80076c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80076c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80076d0:	79fb      	ldrb	r3, [r7, #7]
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d82e      	bhi.n	8007734 <xTaskGenericNotifyFromISR+0xdc>
 80076d6:	a201      	add	r2, pc, #4	@ (adr r2, 80076dc <xTaskGenericNotifyFromISR+0x84>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	08007759 	.word	0x08007759
 80076e0:	080076f1 	.word	0x080076f1
 80076e4:	08007703 	.word	0x08007703
 80076e8:	08007713 	.word	0x08007713
 80076ec:	0800771d 	.word	0x0800771d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	431a      	orrs	r2, r3
 80076fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8007700:	e02d      	b.n	800775e <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007704:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8007710:	e025      	b.n	800775e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800771a:	e020      	b.n	800775e <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800771c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007720:	2b02      	cmp	r3, #2
 8007722:	d004      	beq.n	800772e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800772c:	e017      	b.n	800775e <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800772e:	2300      	movs	r3, #0
 8007730:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007732:	e014      	b.n	800775e <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d00d      	beq.n	800775c <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	61bb      	str	r3, [r7, #24]
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	e7fd      	b.n	8007754 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007758:	bf00      	nop
 800775a:	e000      	b.n	800775e <xTaskGenericNotifyFromISR+0x106>
					break;
 800775c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800775e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007762:	2b01      	cmp	r3, #1
 8007764:	d146      	bne.n	80077f4 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00b      	beq.n	8007786 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	617b      	str	r3, [r7, #20]
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	e7fd      	b.n	8007782 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007786:	4b21      	ldr	r3, [pc, #132]	@ (800780c <xTaskGenericNotifyFromISR+0x1b4>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d11c      	bne.n	80077c8 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007790:	3304      	adds	r3, #4
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fdbd 	bl	8006312 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779c:	2201      	movs	r2, #1
 800779e:	409a      	lsls	r2, r3
 80077a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007810 <xTaskGenericNotifyFromISR+0x1b8>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	4a1a      	ldr	r2, [pc, #104]	@ (8007810 <xTaskGenericNotifyFromISR+0x1b8>)
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ae:	4613      	mov	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4a17      	ldr	r2, [pc, #92]	@ (8007814 <xTaskGenericNotifyFromISR+0x1bc>)
 80077b8:	441a      	add	r2, r3
 80077ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077bc:	3304      	adds	r3, #4
 80077be:	4619      	mov	r1, r3
 80077c0:	4610      	mov	r0, r2
 80077c2:	f7fe fd49 	bl	8006258 <vListInsertEnd>
 80077c6:	e005      	b.n	80077d4 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80077c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ca:	3318      	adds	r3, #24
 80077cc:	4619      	mov	r1, r3
 80077ce:	4812      	ldr	r0, [pc, #72]	@ (8007818 <xTaskGenericNotifyFromISR+0x1c0>)
 80077d0:	f7fe fd42 	bl	8006258 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d8:	4b10      	ldr	r3, [pc, #64]	@ (800781c <xTaskGenericNotifyFromISR+0x1c4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077de:	429a      	cmp	r2, r3
 80077e0:	d908      	bls.n	80077f4 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80077e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80077e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077ea:	2201      	movs	r2, #1
 80077ec:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80077ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007820 <xTaskGenericNotifyFromISR+0x1c8>)
 80077f0:	2201      	movs	r2, #1
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f6:	613b      	str	r3, [r7, #16]
	__asm volatile
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f383 8811 	msr	BASEPRI, r3
}
 80077fe:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007802:	4618      	mov	r0, r3
 8007804:	3738      	adds	r7, #56	@ 0x38
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000b00 	.word	0x20000b00
 8007810:	20000ae0 	.word	0x20000ae0
 8007814:	200009dc 	.word	0x200009dc
 8007818:	20000a98 	.word	0x20000a98
 800781c:	200009d8 	.word	0x200009d8
 8007820:	20000aec 	.word	0x20000aec

08007824 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d102      	bne.n	8007838 <xTaskNotifyStateClear+0x14>
 8007832:	4b0e      	ldr	r3, [pc, #56]	@ (800786c <xTaskNotifyStateClear+0x48>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	e000      	b.n	800783a <xTaskNotifyStateClear+0x16>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800783c:	f000 f9ac 	bl	8007b98 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b02      	cmp	r3, #2
 800784a:	d106      	bne.n	800785a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				xReturn = pdPASS;
 8007854:	2301      	movs	r3, #1
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	e001      	b.n	800785e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800785e:	f000 f9cd 	bl	8007bfc <vPortExitCritical>

		return xReturn;
 8007862:	68fb      	ldr	r3, [r7, #12]
	}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	200009d8 	.word	0x200009d8

08007870 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800787a:	4b29      	ldr	r3, [pc, #164]	@ (8007920 <prvAddCurrentTaskToDelayedList+0xb0>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007880:	4b28      	ldr	r3, [pc, #160]	@ (8007924 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3304      	adds	r3, #4
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fd43 	bl	8006312 <uxListRemove>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10b      	bne.n	80078aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007892:	4b24      	ldr	r3, [pc, #144]	@ (8007924 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007898:	2201      	movs	r2, #1
 800789a:	fa02 f303 	lsl.w	r3, r2, r3
 800789e:	43da      	mvns	r2, r3
 80078a0:	4b21      	ldr	r3, [pc, #132]	@ (8007928 <prvAddCurrentTaskToDelayedList+0xb8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4013      	ands	r3, r2
 80078a6:	4a20      	ldr	r2, [pc, #128]	@ (8007928 <prvAddCurrentTaskToDelayedList+0xb8>)
 80078a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d10a      	bne.n	80078c8 <prvAddCurrentTaskToDelayedList+0x58>
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d007      	beq.n	80078c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078b8:	4b1a      	ldr	r3, [pc, #104]	@ (8007924 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3304      	adds	r3, #4
 80078be:	4619      	mov	r1, r3
 80078c0:	481a      	ldr	r0, [pc, #104]	@ (800792c <prvAddCurrentTaskToDelayedList+0xbc>)
 80078c2:	f7fe fcc9 	bl	8006258 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078c6:	e026      	b.n	8007916 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078d0:	4b14      	ldr	r3, [pc, #80]	@ (8007924 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d209      	bcs.n	80078f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078e0:	4b13      	ldr	r3, [pc, #76]	@ (8007930 <prvAddCurrentTaskToDelayedList+0xc0>)
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007924 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f7fe fcd7 	bl	80062a0 <vListInsert>
}
 80078f2:	e010      	b.n	8007916 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007934 <prvAddCurrentTaskToDelayedList+0xc4>)
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007924 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3304      	adds	r3, #4
 80078fe:	4619      	mov	r1, r3
 8007900:	4610      	mov	r0, r2
 8007902:	f7fe fccd 	bl	80062a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007906:	4b0c      	ldr	r3, [pc, #48]	@ (8007938 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	429a      	cmp	r2, r3
 800790e:	d202      	bcs.n	8007916 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007910:	4a09      	ldr	r2, [pc, #36]	@ (8007938 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	6013      	str	r3, [r2, #0]
}
 8007916:	bf00      	nop
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000adc 	.word	0x20000adc
 8007924:	200009d8 	.word	0x200009d8
 8007928:	20000ae0 	.word	0x20000ae0
 800792c:	20000ac4 	.word	0x20000ac4
 8007930:	20000a94 	.word	0x20000a94
 8007934:	20000a90 	.word	0x20000a90
 8007938:	20000af8 	.word	0x20000af8

0800793c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3b04      	subs	r3, #4
 800794c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3b04      	subs	r3, #4
 800795a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f023 0201 	bic.w	r2, r3, #1
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3b04      	subs	r3, #4
 800796a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800796c:	4a0c      	ldr	r2, [pc, #48]	@ (80079a0 <pxPortInitialiseStack+0x64>)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3b14      	subs	r3, #20
 8007976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3b04      	subs	r3, #4
 8007982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f06f 0202 	mvn.w	r2, #2
 800798a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3b20      	subs	r3, #32
 8007990:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007992:	68fb      	ldr	r3, [r7, #12]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	080079a5 	.word	0x080079a5

080079a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079ae:	4b13      	ldr	r3, [pc, #76]	@ (80079fc <prvTaskExitError+0x58>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b6:	d00b      	beq.n	80079d0 <prvTaskExitError+0x2c>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	60fb      	str	r3, [r7, #12]
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	e7fd      	b.n	80079cc <prvTaskExitError+0x28>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	60bb      	str	r3, [r7, #8]
}
 80079e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079e4:	bf00      	nop
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d0fc      	beq.n	80079e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	20000278 	.word	0x20000278

08007a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a00:	4b07      	ldr	r3, [pc, #28]	@ (8007a20 <pxCurrentTCBConst2>)
 8007a02:	6819      	ldr	r1, [r3, #0]
 8007a04:	6808      	ldr	r0, [r1, #0]
 8007a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0a:	f380 8809 	msr	PSP, r0
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f04f 0000 	mov.w	r0, #0
 8007a16:	f380 8811 	msr	BASEPRI, r0
 8007a1a:	4770      	bx	lr
 8007a1c:	f3af 8000 	nop.w

08007a20 <pxCurrentTCBConst2>:
 8007a20:	200009d8 	.word	0x200009d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop

08007a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a28:	4808      	ldr	r0, [pc, #32]	@ (8007a4c <prvPortStartFirstTask+0x24>)
 8007a2a:	6800      	ldr	r0, [r0, #0]
 8007a2c:	6800      	ldr	r0, [r0, #0]
 8007a2e:	f380 8808 	msr	MSP, r0
 8007a32:	f04f 0000 	mov.w	r0, #0
 8007a36:	f380 8814 	msr	CONTROL, r0
 8007a3a:	b662      	cpsie	i
 8007a3c:	b661      	cpsie	f
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	df00      	svc	0
 8007a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a4a:	bf00      	nop
 8007a4c:	e000ed08 	.word	0xe000ed08

08007a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a56:	4b47      	ldr	r3, [pc, #284]	@ (8007b74 <xPortStartScheduler+0x124>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a47      	ldr	r2, [pc, #284]	@ (8007b78 <xPortStartScheduler+0x128>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d10b      	bne.n	8007a78 <xPortStartScheduler+0x28>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	60fb      	str	r3, [r7, #12]
}
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a78:	4b3e      	ldr	r3, [pc, #248]	@ (8007b74 <xPortStartScheduler+0x124>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8007b7c <xPortStartScheduler+0x12c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d10b      	bne.n	8007a9a <xPortStartScheduler+0x4a>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	613b      	str	r3, [r7, #16]
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop
 8007a98:	e7fd      	b.n	8007a96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a9a:	4b39      	ldr	r3, [pc, #228]	@ (8007b80 <xPortStartScheduler+0x130>)
 8007a9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	22ff      	movs	r2, #255	@ 0xff
 8007aaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ab4:	78fb      	ldrb	r3, [r7, #3]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	4b31      	ldr	r3, [pc, #196]	@ (8007b84 <xPortStartScheduler+0x134>)
 8007ac0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ac2:	4b31      	ldr	r3, [pc, #196]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007ac4:	2207      	movs	r2, #7
 8007ac6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ac8:	e009      	b.n	8007ade <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007aca:	4b2f      	ldr	r3, [pc, #188]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007ad2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ae6:	2b80      	cmp	r3, #128	@ 0x80
 8007ae8:	d0ef      	beq.n	8007aca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007aea:	4b27      	ldr	r3, [pc, #156]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f1c3 0307 	rsb	r3, r3, #7
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d00b      	beq.n	8007b0e <xPortStartScheduler+0xbe>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	60bb      	str	r3, [r7, #8]
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	e7fd      	b.n	8007b0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	4a1c      	ldr	r2, [pc, #112]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b18:	4b1b      	ldr	r3, [pc, #108]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b20:	4a19      	ldr	r2, [pc, #100]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b2c:	4b17      	ldr	r3, [pc, #92]	@ (8007b8c <xPortStartScheduler+0x13c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a16      	ldr	r2, [pc, #88]	@ (8007b8c <xPortStartScheduler+0x13c>)
 8007b32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b38:	4b14      	ldr	r3, [pc, #80]	@ (8007b8c <xPortStartScheduler+0x13c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a13      	ldr	r2, [pc, #76]	@ (8007b8c <xPortStartScheduler+0x13c>)
 8007b3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b44:	f000 f8da 	bl	8007cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b48:	4b11      	ldr	r3, [pc, #68]	@ (8007b90 <xPortStartScheduler+0x140>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b4e:	f000 f8f9 	bl	8007d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b52:	4b10      	ldr	r3, [pc, #64]	@ (8007b94 <xPortStartScheduler+0x144>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a0f      	ldr	r2, [pc, #60]	@ (8007b94 <xPortStartScheduler+0x144>)
 8007b58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007b5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b5e:	f7ff ff63 	bl	8007a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b62:	f7ff fb07 	bl	8007174 <vTaskSwitchContext>
	prvTaskExitError();
 8007b66:	f7ff ff1d 	bl	80079a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	e000ed00 	.word	0xe000ed00
 8007b78:	410fc271 	.word	0x410fc271
 8007b7c:	410fc270 	.word	0x410fc270
 8007b80:	e000e400 	.word	0xe000e400
 8007b84:	20000b04 	.word	0x20000b04
 8007b88:	20000b08 	.word	0x20000b08
 8007b8c:	e000ed20 	.word	0xe000ed20
 8007b90:	20000278 	.word	0x20000278
 8007b94:	e000ef34 	.word	0xe000ef34

08007b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bb2:	4b10      	ldr	r3, [pc, #64]	@ (8007bf4 <vPortEnterCritical+0x5c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8007bf4 <vPortEnterCritical+0x5c>)
 8007bba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf4 <vPortEnterCritical+0x5c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d110      	bne.n	8007be6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf8 <vPortEnterCritical+0x60>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00b      	beq.n	8007be6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	603b      	str	r3, [r7, #0]
}
 8007be0:	bf00      	nop
 8007be2:	bf00      	nop
 8007be4:	e7fd      	b.n	8007be2 <vPortEnterCritical+0x4a>
	}
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20000278 	.word	0x20000278
 8007bf8:	e000ed04 	.word	0xe000ed04

08007bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c02:	4b12      	ldr	r3, [pc, #72]	@ (8007c4c <vPortExitCritical+0x50>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <vPortExitCritical+0x26>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	607b      	str	r3, [r7, #4]
}
 8007c1c:	bf00      	nop
 8007c1e:	bf00      	nop
 8007c20:	e7fd      	b.n	8007c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c22:	4b0a      	ldr	r3, [pc, #40]	@ (8007c4c <vPortExitCritical+0x50>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	4a08      	ldr	r2, [pc, #32]	@ (8007c4c <vPortExitCritical+0x50>)
 8007c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c2c:	4b07      	ldr	r3, [pc, #28]	@ (8007c4c <vPortExitCritical+0x50>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d105      	bne.n	8007c40 <vPortExitCritical+0x44>
 8007c34:	2300      	movs	r3, #0
 8007c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	f383 8811 	msr	BASEPRI, r3
}
 8007c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	20000278 	.word	0x20000278

08007c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c50:	f3ef 8009 	mrs	r0, PSP
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	4b15      	ldr	r3, [pc, #84]	@ (8007cb0 <pxCurrentTCBConst>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	f01e 0f10 	tst.w	lr, #16
 8007c60:	bf08      	it	eq
 8007c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6a:	6010      	str	r0, [r2, #0]
 8007c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c74:	f380 8811 	msr	BASEPRI, r0
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f7ff fa78 	bl	8007174 <vTaskSwitchContext>
 8007c84:	f04f 0000 	mov.w	r0, #0
 8007c88:	f380 8811 	msr	BASEPRI, r0
 8007c8c:	bc09      	pop	{r0, r3}
 8007c8e:	6819      	ldr	r1, [r3, #0]
 8007c90:	6808      	ldr	r0, [r1, #0]
 8007c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c96:	f01e 0f10 	tst.w	lr, #16
 8007c9a:	bf08      	it	eq
 8007c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ca0:	f380 8809 	msr	PSP, r0
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	f3af 8000 	nop.w

08007cb0 <pxCurrentTCBConst>:
 8007cb0:	200009d8 	.word	0x200009d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop

08007cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	607b      	str	r3, [r7, #4]
}
 8007cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cd2:	f7ff f995 	bl	8007000 <xTaskIncrementTick>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d003      	beq.n	8007ce4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cdc:	4b06      	ldr	r3, [pc, #24]	@ (8007cf8 <SysTick_Handler+0x40>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	f383 8811 	msr	BASEPRI, r3
}
 8007cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cf0:	bf00      	nop
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	e000ed04 	.word	0xe000ed04

08007cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d00:	4b0b      	ldr	r3, [pc, #44]	@ (8007d30 <vPortSetupTimerInterrupt+0x34>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d06:	4b0b      	ldr	r3, [pc, #44]	@ (8007d34 <vPortSetupTimerInterrupt+0x38>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d38 <vPortSetupTimerInterrupt+0x3c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a0a      	ldr	r2, [pc, #40]	@ (8007d3c <vPortSetupTimerInterrupt+0x40>)
 8007d12:	fba2 2303 	umull	r2, r3, r2, r3
 8007d16:	099b      	lsrs	r3, r3, #6
 8007d18:	4a09      	ldr	r2, [pc, #36]	@ (8007d40 <vPortSetupTimerInterrupt+0x44>)
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d1e:	4b04      	ldr	r3, [pc, #16]	@ (8007d30 <vPortSetupTimerInterrupt+0x34>)
 8007d20:	2207      	movs	r2, #7
 8007d22:	601a      	str	r2, [r3, #0]
}
 8007d24:	bf00      	nop
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	e000e010 	.word	0xe000e010
 8007d34:	e000e018 	.word	0xe000e018
 8007d38:	2000026c 	.word	0x2000026c
 8007d3c:	10624dd3 	.word	0x10624dd3
 8007d40:	e000e014 	.word	0xe000e014

08007d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007d54 <vPortEnableVFP+0x10>
 8007d48:	6801      	ldr	r1, [r0, #0]
 8007d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d4e:	6001      	str	r1, [r0, #0]
 8007d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d52:	bf00      	nop
 8007d54:	e000ed88 	.word	0xe000ed88

08007d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d5e:	f3ef 8305 	mrs	r3, IPSR
 8007d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b0f      	cmp	r3, #15
 8007d68:	d915      	bls.n	8007d96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d6a:	4a18      	ldr	r2, [pc, #96]	@ (8007dcc <vPortValidateInterruptPriority+0x74>)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4413      	add	r3, r2
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d74:	4b16      	ldr	r3, [pc, #88]	@ (8007dd0 <vPortValidateInterruptPriority+0x78>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	7afa      	ldrb	r2, [r7, #11]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d20b      	bcs.n	8007d96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	607b      	str	r3, [r7, #4]
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	e7fd      	b.n	8007d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d96:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd4 <vPortValidateInterruptPriority+0x7c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd8 <vPortValidateInterruptPriority+0x80>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d90b      	bls.n	8007dbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	603b      	str	r3, [r7, #0]
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	e7fd      	b.n	8007dba <vPortValidateInterruptPriority+0x62>
	}
 8007dbe:	bf00      	nop
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	e000e3f0 	.word	0xe000e3f0
 8007dd0:	20000b04 	.word	0x20000b04
 8007dd4:	e000ed0c 	.word	0xe000ed0c
 8007dd8:	20000b08 	.word	0x20000b08

08007ddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08a      	sub	sp, #40	@ 0x28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007de8:	f7ff f85e 	bl	8006ea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007dec:	4b5c      	ldr	r3, [pc, #368]	@ (8007f60 <pvPortMalloc+0x184>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007df4:	f000 f924 	bl	8008040 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007df8:	4b5a      	ldr	r3, [pc, #360]	@ (8007f64 <pvPortMalloc+0x188>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f040 8095 	bne.w	8007f30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01e      	beq.n	8007e4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e0c:	2208      	movs	r2, #8
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4413      	add	r3, r2
 8007e12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d015      	beq.n	8007e4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f023 0307 	bic.w	r3, r3, #7
 8007e24:	3308      	adds	r3, #8
 8007e26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00b      	beq.n	8007e4a <pvPortMalloc+0x6e>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	617b      	str	r3, [r7, #20]
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop
 8007e48:	e7fd      	b.n	8007e46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d06f      	beq.n	8007f30 <pvPortMalloc+0x154>
 8007e50:	4b45      	ldr	r3, [pc, #276]	@ (8007f68 <pvPortMalloc+0x18c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d86a      	bhi.n	8007f30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e5a:	4b44      	ldr	r3, [pc, #272]	@ (8007f6c <pvPortMalloc+0x190>)
 8007e5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e5e:	4b43      	ldr	r3, [pc, #268]	@ (8007f6c <pvPortMalloc+0x190>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e64:	e004      	b.n	8007e70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d903      	bls.n	8007e82 <pvPortMalloc+0xa6>
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f1      	bne.n	8007e66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e82:	4b37      	ldr	r3, [pc, #220]	@ (8007f60 <pvPortMalloc+0x184>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d051      	beq.n	8007f30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2208      	movs	r2, #8
 8007e92:	4413      	add	r3, r2
 8007e94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	1ad2      	subs	r2, r2, r3
 8007ea6:	2308      	movs	r3, #8
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d920      	bls.n	8007ef0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <pvPortMalloc+0xfc>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	613b      	str	r3, [r7, #16]
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	1ad2      	subs	r2, r2, r3
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eea:	69b8      	ldr	r0, [r7, #24]
 8007eec:	f000 f90a 	bl	8008104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8007f68 <pvPortMalloc+0x18c>)
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	4a1b      	ldr	r2, [pc, #108]	@ (8007f68 <pvPortMalloc+0x18c>)
 8007efc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007efe:	4b1a      	ldr	r3, [pc, #104]	@ (8007f68 <pvPortMalloc+0x18c>)
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b1b      	ldr	r3, [pc, #108]	@ (8007f70 <pvPortMalloc+0x194>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d203      	bcs.n	8007f12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f0a:	4b17      	ldr	r3, [pc, #92]	@ (8007f68 <pvPortMalloc+0x18c>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a18      	ldr	r2, [pc, #96]	@ (8007f70 <pvPortMalloc+0x194>)
 8007f10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	4b13      	ldr	r3, [pc, #76]	@ (8007f64 <pvPortMalloc+0x188>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f26:	4b13      	ldr	r3, [pc, #76]	@ (8007f74 <pvPortMalloc+0x198>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	4a11      	ldr	r2, [pc, #68]	@ (8007f74 <pvPortMalloc+0x198>)
 8007f2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f30:	f7fe ffc8 	bl	8006ec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00b      	beq.n	8007f56 <pvPortMalloc+0x17a>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	60fb      	str	r3, [r7, #12]
}
 8007f50:	bf00      	nop
 8007f52:	bf00      	nop
 8007f54:	e7fd      	b.n	8007f52 <pvPortMalloc+0x176>
	return pvReturn;
 8007f56:	69fb      	ldr	r3, [r7, #28]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3728      	adds	r7, #40	@ 0x28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20005934 	.word	0x20005934
 8007f64:	20005948 	.word	0x20005948
 8007f68:	20005938 	.word	0x20005938
 8007f6c:	2000592c 	.word	0x2000592c
 8007f70:	2000593c 	.word	0x2000593c
 8007f74:	20005940 	.word	0x20005940

08007f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d04f      	beq.n	800802a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f8a:	2308      	movs	r3, #8
 8007f8c:	425b      	negs	r3, r3
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	4413      	add	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	4b25      	ldr	r3, [pc, #148]	@ (8008034 <vPortFree+0xbc>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10b      	bne.n	8007fbe <vPortFree+0x46>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	60fb      	str	r3, [r7, #12]
}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	e7fd      	b.n	8007fba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00b      	beq.n	8007fde <vPortFree+0x66>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	60bb      	str	r3, [r7, #8]
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	e7fd      	b.n	8007fda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	4b14      	ldr	r3, [pc, #80]	@ (8008034 <vPortFree+0xbc>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01e      	beq.n	800802a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d11a      	bne.n	800802a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8008034 <vPortFree+0xbc>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	401a      	ands	r2, r3
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008004:	f7fe ff50 	bl	8006ea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	4b0a      	ldr	r3, [pc, #40]	@ (8008038 <vPortFree+0xc0>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4413      	add	r3, r2
 8008012:	4a09      	ldr	r2, [pc, #36]	@ (8008038 <vPortFree+0xc0>)
 8008014:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008016:	6938      	ldr	r0, [r7, #16]
 8008018:	f000 f874 	bl	8008104 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800801c:	4b07      	ldr	r3, [pc, #28]	@ (800803c <vPortFree+0xc4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3301      	adds	r3, #1
 8008022:	4a06      	ldr	r2, [pc, #24]	@ (800803c <vPortFree+0xc4>)
 8008024:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008026:	f7fe ff4d 	bl	8006ec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800802a:	bf00      	nop
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20005948 	.word	0x20005948
 8008038:	20005938 	.word	0x20005938
 800803c:	20005944 	.word	0x20005944

08008040 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008046:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800804a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800804c:	4b27      	ldr	r3, [pc, #156]	@ (80080ec <prvHeapInit+0xac>)
 800804e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00c      	beq.n	8008074 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3307      	adds	r3, #7
 800805e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0307 	bic.w	r3, r3, #7
 8008066:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	4a1f      	ldr	r2, [pc, #124]	@ (80080ec <prvHeapInit+0xac>)
 8008070:	4413      	add	r3, r2
 8008072:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008078:	4a1d      	ldr	r2, [pc, #116]	@ (80080f0 <prvHeapInit+0xb0>)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800807e:	4b1c      	ldr	r3, [pc, #112]	@ (80080f0 <prvHeapInit+0xb0>)
 8008080:	2200      	movs	r2, #0
 8008082:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	4413      	add	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800808c:	2208      	movs	r2, #8
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	1a9b      	subs	r3, r3, r2
 8008092:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f023 0307 	bic.w	r3, r3, #7
 800809a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4a15      	ldr	r2, [pc, #84]	@ (80080f4 <prvHeapInit+0xb4>)
 80080a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080a2:	4b14      	ldr	r3, [pc, #80]	@ (80080f4 <prvHeapInit+0xb4>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2200      	movs	r2, #0
 80080a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080aa:	4b12      	ldr	r3, [pc, #72]	@ (80080f4 <prvHeapInit+0xb4>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	1ad2      	subs	r2, r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080c0:	4b0c      	ldr	r3, [pc, #48]	@ (80080f4 <prvHeapInit+0xb4>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	4a0a      	ldr	r2, [pc, #40]	@ (80080f8 <prvHeapInit+0xb8>)
 80080ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	4a09      	ldr	r2, [pc, #36]	@ (80080fc <prvHeapInit+0xbc>)
 80080d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080d8:	4b09      	ldr	r3, [pc, #36]	@ (8008100 <prvHeapInit+0xc0>)
 80080da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80080de:	601a      	str	r2, [r3, #0]
}
 80080e0:	bf00      	nop
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	20000b0c 	.word	0x20000b0c
 80080f0:	2000592c 	.word	0x2000592c
 80080f4:	20005934 	.word	0x20005934
 80080f8:	2000593c 	.word	0x2000593c
 80080fc:	20005938 	.word	0x20005938
 8008100:	20005948 	.word	0x20005948

08008104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800810c:	4b28      	ldr	r3, [pc, #160]	@ (80081b0 <prvInsertBlockIntoFreeList+0xac>)
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	e002      	b.n	8008118 <prvInsertBlockIntoFreeList+0x14>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	429a      	cmp	r2, r3
 8008120:	d8f7      	bhi.n	8008112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	4413      	add	r3, r2
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	429a      	cmp	r2, r3
 8008132:	d108      	bne.n	8008146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	441a      	add	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	441a      	add	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	d118      	bne.n	800818c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4b15      	ldr	r3, [pc, #84]	@ (80081b4 <prvInsertBlockIntoFreeList+0xb0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d00d      	beq.n	8008182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	441a      	add	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	e008      	b.n	8008194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008182:	4b0c      	ldr	r3, [pc, #48]	@ (80081b4 <prvInsertBlockIntoFreeList+0xb0>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	e003      	b.n	8008194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	429a      	cmp	r2, r3
 800819a:	d002      	beq.n	80081a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081a2:	bf00      	nop
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	2000592c 	.word	0x2000592c
 80081b4:	20005934 	.word	0x20005934

080081b8 <atof>:
 80081b8:	2100      	movs	r1, #0
 80081ba:	f000 be09 	b.w	8008dd0 <strtod>

080081be <atoi>:
 80081be:	220a      	movs	r2, #10
 80081c0:	2100      	movs	r1, #0
 80081c2:	f000 be8b 	b.w	8008edc <strtol>

080081c6 <sulp>:
 80081c6:	b570      	push	{r4, r5, r6, lr}
 80081c8:	4604      	mov	r4, r0
 80081ca:	460d      	mov	r5, r1
 80081cc:	ec45 4b10 	vmov	d0, r4, r5
 80081d0:	4616      	mov	r6, r2
 80081d2:	f003 fb9d 	bl	800b910 <__ulp>
 80081d6:	ec51 0b10 	vmov	r0, r1, d0
 80081da:	b17e      	cbz	r6, 80081fc <sulp+0x36>
 80081dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80081e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	dd09      	ble.n	80081fc <sulp+0x36>
 80081e8:	051b      	lsls	r3, r3, #20
 80081ea:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80081ee:	2400      	movs	r4, #0
 80081f0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80081f4:	4622      	mov	r2, r4
 80081f6:	462b      	mov	r3, r5
 80081f8:	f7f8 fa0e 	bl	8000618 <__aeabi_dmul>
 80081fc:	ec41 0b10 	vmov	d0, r0, r1
 8008200:	bd70      	pop	{r4, r5, r6, pc}
 8008202:	0000      	movs	r0, r0
 8008204:	0000      	movs	r0, r0
	...

08008208 <_strtod_l>:
 8008208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820c:	b09f      	sub	sp, #124	@ 0x7c
 800820e:	460c      	mov	r4, r1
 8008210:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008212:	2200      	movs	r2, #0
 8008214:	921a      	str	r2, [sp, #104]	@ 0x68
 8008216:	9005      	str	r0, [sp, #20]
 8008218:	f04f 0a00 	mov.w	sl, #0
 800821c:	f04f 0b00 	mov.w	fp, #0
 8008220:	460a      	mov	r2, r1
 8008222:	9219      	str	r2, [sp, #100]	@ 0x64
 8008224:	7811      	ldrb	r1, [r2, #0]
 8008226:	292b      	cmp	r1, #43	@ 0x2b
 8008228:	d04a      	beq.n	80082c0 <_strtod_l+0xb8>
 800822a:	d838      	bhi.n	800829e <_strtod_l+0x96>
 800822c:	290d      	cmp	r1, #13
 800822e:	d832      	bhi.n	8008296 <_strtod_l+0x8e>
 8008230:	2908      	cmp	r1, #8
 8008232:	d832      	bhi.n	800829a <_strtod_l+0x92>
 8008234:	2900      	cmp	r1, #0
 8008236:	d03b      	beq.n	80082b0 <_strtod_l+0xa8>
 8008238:	2200      	movs	r2, #0
 800823a:	920e      	str	r2, [sp, #56]	@ 0x38
 800823c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800823e:	782a      	ldrb	r2, [r5, #0]
 8008240:	2a30      	cmp	r2, #48	@ 0x30
 8008242:	f040 80b2 	bne.w	80083aa <_strtod_l+0x1a2>
 8008246:	786a      	ldrb	r2, [r5, #1]
 8008248:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800824c:	2a58      	cmp	r2, #88	@ 0x58
 800824e:	d16e      	bne.n	800832e <_strtod_l+0x126>
 8008250:	9302      	str	r3, [sp, #8]
 8008252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	ab1a      	add	r3, sp, #104	@ 0x68
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	4a8f      	ldr	r2, [pc, #572]	@ (8008498 <_strtod_l+0x290>)
 800825c:	9805      	ldr	r0, [sp, #20]
 800825e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008260:	a919      	add	r1, sp, #100	@ 0x64
 8008262:	f002 fc4f 	bl	800ab04 <__gethex>
 8008266:	f010 060f 	ands.w	r6, r0, #15
 800826a:	4604      	mov	r4, r0
 800826c:	d005      	beq.n	800827a <_strtod_l+0x72>
 800826e:	2e06      	cmp	r6, #6
 8008270:	d128      	bne.n	80082c4 <_strtod_l+0xbc>
 8008272:	3501      	adds	r5, #1
 8008274:	2300      	movs	r3, #0
 8008276:	9519      	str	r5, [sp, #100]	@ 0x64
 8008278:	930e      	str	r3, [sp, #56]	@ 0x38
 800827a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800827c:	2b00      	cmp	r3, #0
 800827e:	f040 858e 	bne.w	8008d9e <_strtod_l+0xb96>
 8008282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008284:	b1cb      	cbz	r3, 80082ba <_strtod_l+0xb2>
 8008286:	4652      	mov	r2, sl
 8008288:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800828c:	ec43 2b10 	vmov	d0, r2, r3
 8008290:	b01f      	add	sp, #124	@ 0x7c
 8008292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008296:	2920      	cmp	r1, #32
 8008298:	d1ce      	bne.n	8008238 <_strtod_l+0x30>
 800829a:	3201      	adds	r2, #1
 800829c:	e7c1      	b.n	8008222 <_strtod_l+0x1a>
 800829e:	292d      	cmp	r1, #45	@ 0x2d
 80082a0:	d1ca      	bne.n	8008238 <_strtod_l+0x30>
 80082a2:	2101      	movs	r1, #1
 80082a4:	910e      	str	r1, [sp, #56]	@ 0x38
 80082a6:	1c51      	adds	r1, r2, #1
 80082a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80082aa:	7852      	ldrb	r2, [r2, #1]
 80082ac:	2a00      	cmp	r2, #0
 80082ae:	d1c5      	bne.n	800823c <_strtod_l+0x34>
 80082b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80082b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f040 8570 	bne.w	8008d9a <_strtod_l+0xb92>
 80082ba:	4652      	mov	r2, sl
 80082bc:	465b      	mov	r3, fp
 80082be:	e7e5      	b.n	800828c <_strtod_l+0x84>
 80082c0:	2100      	movs	r1, #0
 80082c2:	e7ef      	b.n	80082a4 <_strtod_l+0x9c>
 80082c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082c6:	b13a      	cbz	r2, 80082d8 <_strtod_l+0xd0>
 80082c8:	2135      	movs	r1, #53	@ 0x35
 80082ca:	a81c      	add	r0, sp, #112	@ 0x70
 80082cc:	f003 fc1a 	bl	800bb04 <__copybits>
 80082d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082d2:	9805      	ldr	r0, [sp, #20]
 80082d4:	f002 fff0 	bl	800b2b8 <_Bfree>
 80082d8:	3e01      	subs	r6, #1
 80082da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80082dc:	2e04      	cmp	r6, #4
 80082de:	d806      	bhi.n	80082ee <_strtod_l+0xe6>
 80082e0:	e8df f006 	tbb	[pc, r6]
 80082e4:	201d0314 	.word	0x201d0314
 80082e8:	14          	.byte	0x14
 80082e9:	00          	.byte	0x00
 80082ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80082ee:	05e1      	lsls	r1, r4, #23
 80082f0:	bf48      	it	mi
 80082f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80082f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082fa:	0d1b      	lsrs	r3, r3, #20
 80082fc:	051b      	lsls	r3, r3, #20
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1bb      	bne.n	800827a <_strtod_l+0x72>
 8008302:	f001 fc91 	bl	8009c28 <__errno>
 8008306:	2322      	movs	r3, #34	@ 0x22
 8008308:	6003      	str	r3, [r0, #0]
 800830a:	e7b6      	b.n	800827a <_strtod_l+0x72>
 800830c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008310:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008314:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008318:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800831c:	e7e7      	b.n	80082ee <_strtod_l+0xe6>
 800831e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80084a0 <_strtod_l+0x298>
 8008322:	e7e4      	b.n	80082ee <_strtod_l+0xe6>
 8008324:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008328:	f04f 3aff 	mov.w	sl, #4294967295
 800832c:	e7df      	b.n	80082ee <_strtod_l+0xe6>
 800832e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008330:	1c5a      	adds	r2, r3, #1
 8008332:	9219      	str	r2, [sp, #100]	@ 0x64
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	2b30      	cmp	r3, #48	@ 0x30
 8008338:	d0f9      	beq.n	800832e <_strtod_l+0x126>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d09d      	beq.n	800827a <_strtod_l+0x72>
 800833e:	2301      	movs	r3, #1
 8008340:	2700      	movs	r7, #0
 8008342:	9308      	str	r3, [sp, #32]
 8008344:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008346:	930c      	str	r3, [sp, #48]	@ 0x30
 8008348:	970b      	str	r7, [sp, #44]	@ 0x2c
 800834a:	46b9      	mov	r9, r7
 800834c:	220a      	movs	r2, #10
 800834e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008350:	7805      	ldrb	r5, [r0, #0]
 8008352:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008356:	b2d9      	uxtb	r1, r3
 8008358:	2909      	cmp	r1, #9
 800835a:	d928      	bls.n	80083ae <_strtod_l+0x1a6>
 800835c:	494f      	ldr	r1, [pc, #316]	@ (800849c <_strtod_l+0x294>)
 800835e:	2201      	movs	r2, #1
 8008360:	f001 fb4b 	bl	80099fa <strncmp>
 8008364:	2800      	cmp	r0, #0
 8008366:	d032      	beq.n	80083ce <_strtod_l+0x1c6>
 8008368:	2000      	movs	r0, #0
 800836a:	462a      	mov	r2, r5
 800836c:	900a      	str	r0, [sp, #40]	@ 0x28
 800836e:	464d      	mov	r5, r9
 8008370:	4603      	mov	r3, r0
 8008372:	2a65      	cmp	r2, #101	@ 0x65
 8008374:	d001      	beq.n	800837a <_strtod_l+0x172>
 8008376:	2a45      	cmp	r2, #69	@ 0x45
 8008378:	d114      	bne.n	80083a4 <_strtod_l+0x19c>
 800837a:	b91d      	cbnz	r5, 8008384 <_strtod_l+0x17c>
 800837c:	9a08      	ldr	r2, [sp, #32]
 800837e:	4302      	orrs	r2, r0
 8008380:	d096      	beq.n	80082b0 <_strtod_l+0xa8>
 8008382:	2500      	movs	r5, #0
 8008384:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008386:	1c62      	adds	r2, r4, #1
 8008388:	9219      	str	r2, [sp, #100]	@ 0x64
 800838a:	7862      	ldrb	r2, [r4, #1]
 800838c:	2a2b      	cmp	r2, #43	@ 0x2b
 800838e:	d07a      	beq.n	8008486 <_strtod_l+0x27e>
 8008390:	2a2d      	cmp	r2, #45	@ 0x2d
 8008392:	d07e      	beq.n	8008492 <_strtod_l+0x28a>
 8008394:	f04f 0c00 	mov.w	ip, #0
 8008398:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800839c:	2909      	cmp	r1, #9
 800839e:	f240 8085 	bls.w	80084ac <_strtod_l+0x2a4>
 80083a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80083a4:	f04f 0800 	mov.w	r8, #0
 80083a8:	e0a5      	b.n	80084f6 <_strtod_l+0x2ee>
 80083aa:	2300      	movs	r3, #0
 80083ac:	e7c8      	b.n	8008340 <_strtod_l+0x138>
 80083ae:	f1b9 0f08 	cmp.w	r9, #8
 80083b2:	bfd8      	it	le
 80083b4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80083b6:	f100 0001 	add.w	r0, r0, #1
 80083ba:	bfda      	itte	le
 80083bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80083c0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80083c2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80083c6:	f109 0901 	add.w	r9, r9, #1
 80083ca:	9019      	str	r0, [sp, #100]	@ 0x64
 80083cc:	e7bf      	b.n	800834e <_strtod_l+0x146>
 80083ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80083d4:	785a      	ldrb	r2, [r3, #1]
 80083d6:	f1b9 0f00 	cmp.w	r9, #0
 80083da:	d03b      	beq.n	8008454 <_strtod_l+0x24c>
 80083dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80083de:	464d      	mov	r5, r9
 80083e0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80083e4:	2b09      	cmp	r3, #9
 80083e6:	d912      	bls.n	800840e <_strtod_l+0x206>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e7c2      	b.n	8008372 <_strtod_l+0x16a>
 80083ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80083f2:	785a      	ldrb	r2, [r3, #1]
 80083f4:	3001      	adds	r0, #1
 80083f6:	2a30      	cmp	r2, #48	@ 0x30
 80083f8:	d0f8      	beq.n	80083ec <_strtod_l+0x1e4>
 80083fa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80083fe:	2b08      	cmp	r3, #8
 8008400:	f200 84d2 	bhi.w	8008da8 <_strtod_l+0xba0>
 8008404:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008406:	900a      	str	r0, [sp, #40]	@ 0x28
 8008408:	2000      	movs	r0, #0
 800840a:	930c      	str	r3, [sp, #48]	@ 0x30
 800840c:	4605      	mov	r5, r0
 800840e:	3a30      	subs	r2, #48	@ 0x30
 8008410:	f100 0301 	add.w	r3, r0, #1
 8008414:	d018      	beq.n	8008448 <_strtod_l+0x240>
 8008416:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008418:	4419      	add	r1, r3
 800841a:	910a      	str	r1, [sp, #40]	@ 0x28
 800841c:	462e      	mov	r6, r5
 800841e:	f04f 0e0a 	mov.w	lr, #10
 8008422:	1c71      	adds	r1, r6, #1
 8008424:	eba1 0c05 	sub.w	ip, r1, r5
 8008428:	4563      	cmp	r3, ip
 800842a:	dc15      	bgt.n	8008458 <_strtod_l+0x250>
 800842c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008430:	182b      	adds	r3, r5, r0
 8008432:	2b08      	cmp	r3, #8
 8008434:	f105 0501 	add.w	r5, r5, #1
 8008438:	4405      	add	r5, r0
 800843a:	dc1a      	bgt.n	8008472 <_strtod_l+0x26a>
 800843c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800843e:	230a      	movs	r3, #10
 8008440:	fb03 2301 	mla	r3, r3, r1, r2
 8008444:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008446:	2300      	movs	r3, #0
 8008448:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800844a:	1c51      	adds	r1, r2, #1
 800844c:	9119      	str	r1, [sp, #100]	@ 0x64
 800844e:	7852      	ldrb	r2, [r2, #1]
 8008450:	4618      	mov	r0, r3
 8008452:	e7c5      	b.n	80083e0 <_strtod_l+0x1d8>
 8008454:	4648      	mov	r0, r9
 8008456:	e7ce      	b.n	80083f6 <_strtod_l+0x1ee>
 8008458:	2e08      	cmp	r6, #8
 800845a:	dc05      	bgt.n	8008468 <_strtod_l+0x260>
 800845c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800845e:	fb0e f606 	mul.w	r6, lr, r6
 8008462:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008464:	460e      	mov	r6, r1
 8008466:	e7dc      	b.n	8008422 <_strtod_l+0x21a>
 8008468:	2910      	cmp	r1, #16
 800846a:	bfd8      	it	le
 800846c:	fb0e f707 	mulle.w	r7, lr, r7
 8008470:	e7f8      	b.n	8008464 <_strtod_l+0x25c>
 8008472:	2b0f      	cmp	r3, #15
 8008474:	bfdc      	itt	le
 8008476:	230a      	movle	r3, #10
 8008478:	fb03 2707 	mlale	r7, r3, r7, r2
 800847c:	e7e3      	b.n	8008446 <_strtod_l+0x23e>
 800847e:	2300      	movs	r3, #0
 8008480:	930a      	str	r3, [sp, #40]	@ 0x28
 8008482:	2301      	movs	r3, #1
 8008484:	e77a      	b.n	800837c <_strtod_l+0x174>
 8008486:	f04f 0c00 	mov.w	ip, #0
 800848a:	1ca2      	adds	r2, r4, #2
 800848c:	9219      	str	r2, [sp, #100]	@ 0x64
 800848e:	78a2      	ldrb	r2, [r4, #2]
 8008490:	e782      	b.n	8008398 <_strtod_l+0x190>
 8008492:	f04f 0c01 	mov.w	ip, #1
 8008496:	e7f8      	b.n	800848a <_strtod_l+0x282>
 8008498:	0800d55c 	.word	0x0800d55c
 800849c:	0800d31c 	.word	0x0800d31c
 80084a0:	7ff00000 	.word	0x7ff00000
 80084a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084a6:	1c51      	adds	r1, r2, #1
 80084a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80084aa:	7852      	ldrb	r2, [r2, #1]
 80084ac:	2a30      	cmp	r2, #48	@ 0x30
 80084ae:	d0f9      	beq.n	80084a4 <_strtod_l+0x29c>
 80084b0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80084b4:	2908      	cmp	r1, #8
 80084b6:	f63f af75 	bhi.w	80083a4 <_strtod_l+0x19c>
 80084ba:	3a30      	subs	r2, #48	@ 0x30
 80084bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80084be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084c0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80084c2:	f04f 080a 	mov.w	r8, #10
 80084c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084c8:	1c56      	adds	r6, r2, #1
 80084ca:	9619      	str	r6, [sp, #100]	@ 0x64
 80084cc:	7852      	ldrb	r2, [r2, #1]
 80084ce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80084d2:	f1be 0f09 	cmp.w	lr, #9
 80084d6:	d939      	bls.n	800854c <_strtod_l+0x344>
 80084d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80084da:	1a76      	subs	r6, r6, r1
 80084dc:	2e08      	cmp	r6, #8
 80084de:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80084e2:	dc03      	bgt.n	80084ec <_strtod_l+0x2e4>
 80084e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084e6:	4588      	cmp	r8, r1
 80084e8:	bfa8      	it	ge
 80084ea:	4688      	movge	r8, r1
 80084ec:	f1bc 0f00 	cmp.w	ip, #0
 80084f0:	d001      	beq.n	80084f6 <_strtod_l+0x2ee>
 80084f2:	f1c8 0800 	rsb	r8, r8, #0
 80084f6:	2d00      	cmp	r5, #0
 80084f8:	d14e      	bne.n	8008598 <_strtod_l+0x390>
 80084fa:	9908      	ldr	r1, [sp, #32]
 80084fc:	4308      	orrs	r0, r1
 80084fe:	f47f aebc 	bne.w	800827a <_strtod_l+0x72>
 8008502:	2b00      	cmp	r3, #0
 8008504:	f47f aed4 	bne.w	80082b0 <_strtod_l+0xa8>
 8008508:	2a69      	cmp	r2, #105	@ 0x69
 800850a:	d028      	beq.n	800855e <_strtod_l+0x356>
 800850c:	dc25      	bgt.n	800855a <_strtod_l+0x352>
 800850e:	2a49      	cmp	r2, #73	@ 0x49
 8008510:	d025      	beq.n	800855e <_strtod_l+0x356>
 8008512:	2a4e      	cmp	r2, #78	@ 0x4e
 8008514:	f47f aecc 	bne.w	80082b0 <_strtod_l+0xa8>
 8008518:	499a      	ldr	r1, [pc, #616]	@ (8008784 <_strtod_l+0x57c>)
 800851a:	a819      	add	r0, sp, #100	@ 0x64
 800851c:	f002 fd14 	bl	800af48 <__match>
 8008520:	2800      	cmp	r0, #0
 8008522:	f43f aec5 	beq.w	80082b0 <_strtod_l+0xa8>
 8008526:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	2b28      	cmp	r3, #40	@ 0x28
 800852c:	d12e      	bne.n	800858c <_strtod_l+0x384>
 800852e:	4996      	ldr	r1, [pc, #600]	@ (8008788 <_strtod_l+0x580>)
 8008530:	aa1c      	add	r2, sp, #112	@ 0x70
 8008532:	a819      	add	r0, sp, #100	@ 0x64
 8008534:	f002 fd1c 	bl	800af70 <__hexnan>
 8008538:	2805      	cmp	r0, #5
 800853a:	d127      	bne.n	800858c <_strtod_l+0x384>
 800853c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800853e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008542:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008546:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800854a:	e696      	b.n	800827a <_strtod_l+0x72>
 800854c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800854e:	fb08 2101 	mla	r1, r8, r1, r2
 8008552:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008556:	9209      	str	r2, [sp, #36]	@ 0x24
 8008558:	e7b5      	b.n	80084c6 <_strtod_l+0x2be>
 800855a:	2a6e      	cmp	r2, #110	@ 0x6e
 800855c:	e7da      	b.n	8008514 <_strtod_l+0x30c>
 800855e:	498b      	ldr	r1, [pc, #556]	@ (800878c <_strtod_l+0x584>)
 8008560:	a819      	add	r0, sp, #100	@ 0x64
 8008562:	f002 fcf1 	bl	800af48 <__match>
 8008566:	2800      	cmp	r0, #0
 8008568:	f43f aea2 	beq.w	80082b0 <_strtod_l+0xa8>
 800856c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800856e:	4988      	ldr	r1, [pc, #544]	@ (8008790 <_strtod_l+0x588>)
 8008570:	3b01      	subs	r3, #1
 8008572:	a819      	add	r0, sp, #100	@ 0x64
 8008574:	9319      	str	r3, [sp, #100]	@ 0x64
 8008576:	f002 fce7 	bl	800af48 <__match>
 800857a:	b910      	cbnz	r0, 8008582 <_strtod_l+0x37a>
 800857c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800857e:	3301      	adds	r3, #1
 8008580:	9319      	str	r3, [sp, #100]	@ 0x64
 8008582:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80087a0 <_strtod_l+0x598>
 8008586:	f04f 0a00 	mov.w	sl, #0
 800858a:	e676      	b.n	800827a <_strtod_l+0x72>
 800858c:	4881      	ldr	r0, [pc, #516]	@ (8008794 <_strtod_l+0x58c>)
 800858e:	f001 fb87 	bl	8009ca0 <nan>
 8008592:	ec5b ab10 	vmov	sl, fp, d0
 8008596:	e670      	b.n	800827a <_strtod_l+0x72>
 8008598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800859a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800859c:	eba8 0303 	sub.w	r3, r8, r3
 80085a0:	f1b9 0f00 	cmp.w	r9, #0
 80085a4:	bf08      	it	eq
 80085a6:	46a9      	moveq	r9, r5
 80085a8:	2d10      	cmp	r5, #16
 80085aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ac:	462c      	mov	r4, r5
 80085ae:	bfa8      	it	ge
 80085b0:	2410      	movge	r4, #16
 80085b2:	f7f7 ffb7 	bl	8000524 <__aeabi_ui2d>
 80085b6:	2d09      	cmp	r5, #9
 80085b8:	4682      	mov	sl, r0
 80085ba:	468b      	mov	fp, r1
 80085bc:	dc13      	bgt.n	80085e6 <_strtod_l+0x3de>
 80085be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f43f ae5a 	beq.w	800827a <_strtod_l+0x72>
 80085c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c8:	dd78      	ble.n	80086bc <_strtod_l+0x4b4>
 80085ca:	2b16      	cmp	r3, #22
 80085cc:	dc5f      	bgt.n	800868e <_strtod_l+0x486>
 80085ce:	4972      	ldr	r1, [pc, #456]	@ (8008798 <_strtod_l+0x590>)
 80085d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085d8:	4652      	mov	r2, sl
 80085da:	465b      	mov	r3, fp
 80085dc:	f7f8 f81c 	bl	8000618 <__aeabi_dmul>
 80085e0:	4682      	mov	sl, r0
 80085e2:	468b      	mov	fp, r1
 80085e4:	e649      	b.n	800827a <_strtod_l+0x72>
 80085e6:	4b6c      	ldr	r3, [pc, #432]	@ (8008798 <_strtod_l+0x590>)
 80085e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80085f0:	f7f8 f812 	bl	8000618 <__aeabi_dmul>
 80085f4:	4682      	mov	sl, r0
 80085f6:	4638      	mov	r0, r7
 80085f8:	468b      	mov	fp, r1
 80085fa:	f7f7 ff93 	bl	8000524 <__aeabi_ui2d>
 80085fe:	4602      	mov	r2, r0
 8008600:	460b      	mov	r3, r1
 8008602:	4650      	mov	r0, sl
 8008604:	4659      	mov	r1, fp
 8008606:	f7f7 fe51 	bl	80002ac <__adddf3>
 800860a:	2d0f      	cmp	r5, #15
 800860c:	4682      	mov	sl, r0
 800860e:	468b      	mov	fp, r1
 8008610:	ddd5      	ble.n	80085be <_strtod_l+0x3b6>
 8008612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008614:	1b2c      	subs	r4, r5, r4
 8008616:	441c      	add	r4, r3
 8008618:	2c00      	cmp	r4, #0
 800861a:	f340 8093 	ble.w	8008744 <_strtod_l+0x53c>
 800861e:	f014 030f 	ands.w	r3, r4, #15
 8008622:	d00a      	beq.n	800863a <_strtod_l+0x432>
 8008624:	495c      	ldr	r1, [pc, #368]	@ (8008798 <_strtod_l+0x590>)
 8008626:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800862a:	4652      	mov	r2, sl
 800862c:	465b      	mov	r3, fp
 800862e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008632:	f7f7 fff1 	bl	8000618 <__aeabi_dmul>
 8008636:	4682      	mov	sl, r0
 8008638:	468b      	mov	fp, r1
 800863a:	f034 040f 	bics.w	r4, r4, #15
 800863e:	d073      	beq.n	8008728 <_strtod_l+0x520>
 8008640:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008644:	dd49      	ble.n	80086da <_strtod_l+0x4d2>
 8008646:	2400      	movs	r4, #0
 8008648:	46a0      	mov	r8, r4
 800864a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800864c:	46a1      	mov	r9, r4
 800864e:	9a05      	ldr	r2, [sp, #20]
 8008650:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80087a0 <_strtod_l+0x598>
 8008654:	2322      	movs	r3, #34	@ 0x22
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	f04f 0a00 	mov.w	sl, #0
 800865c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800865e:	2b00      	cmp	r3, #0
 8008660:	f43f ae0b 	beq.w	800827a <_strtod_l+0x72>
 8008664:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008666:	9805      	ldr	r0, [sp, #20]
 8008668:	f002 fe26 	bl	800b2b8 <_Bfree>
 800866c:	9805      	ldr	r0, [sp, #20]
 800866e:	4649      	mov	r1, r9
 8008670:	f002 fe22 	bl	800b2b8 <_Bfree>
 8008674:	9805      	ldr	r0, [sp, #20]
 8008676:	4641      	mov	r1, r8
 8008678:	f002 fe1e 	bl	800b2b8 <_Bfree>
 800867c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800867e:	9805      	ldr	r0, [sp, #20]
 8008680:	f002 fe1a 	bl	800b2b8 <_Bfree>
 8008684:	9805      	ldr	r0, [sp, #20]
 8008686:	4621      	mov	r1, r4
 8008688:	f002 fe16 	bl	800b2b8 <_Bfree>
 800868c:	e5f5      	b.n	800827a <_strtod_l+0x72>
 800868e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008690:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008694:	4293      	cmp	r3, r2
 8008696:	dbbc      	blt.n	8008612 <_strtod_l+0x40a>
 8008698:	4c3f      	ldr	r4, [pc, #252]	@ (8008798 <_strtod_l+0x590>)
 800869a:	f1c5 050f 	rsb	r5, r5, #15
 800869e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80086a2:	4652      	mov	r2, sl
 80086a4:	465b      	mov	r3, fp
 80086a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086aa:	f7f7 ffb5 	bl	8000618 <__aeabi_dmul>
 80086ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b0:	1b5d      	subs	r5, r3, r5
 80086b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80086b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80086ba:	e78f      	b.n	80085dc <_strtod_l+0x3d4>
 80086bc:	3316      	adds	r3, #22
 80086be:	dba8      	blt.n	8008612 <_strtod_l+0x40a>
 80086c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086c2:	eba3 0808 	sub.w	r8, r3, r8
 80086c6:	4b34      	ldr	r3, [pc, #208]	@ (8008798 <_strtod_l+0x590>)
 80086c8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80086cc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80086d0:	4650      	mov	r0, sl
 80086d2:	4659      	mov	r1, fp
 80086d4:	f7f8 f8ca 	bl	800086c <__aeabi_ddiv>
 80086d8:	e782      	b.n	80085e0 <_strtod_l+0x3d8>
 80086da:	2300      	movs	r3, #0
 80086dc:	4f2f      	ldr	r7, [pc, #188]	@ (800879c <_strtod_l+0x594>)
 80086de:	1124      	asrs	r4, r4, #4
 80086e0:	4650      	mov	r0, sl
 80086e2:	4659      	mov	r1, fp
 80086e4:	461e      	mov	r6, r3
 80086e6:	2c01      	cmp	r4, #1
 80086e8:	dc21      	bgt.n	800872e <_strtod_l+0x526>
 80086ea:	b10b      	cbz	r3, 80086f0 <_strtod_l+0x4e8>
 80086ec:	4682      	mov	sl, r0
 80086ee:	468b      	mov	fp, r1
 80086f0:	492a      	ldr	r1, [pc, #168]	@ (800879c <_strtod_l+0x594>)
 80086f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80086f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80086fa:	4652      	mov	r2, sl
 80086fc:	465b      	mov	r3, fp
 80086fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008702:	f7f7 ff89 	bl	8000618 <__aeabi_dmul>
 8008706:	4b26      	ldr	r3, [pc, #152]	@ (80087a0 <_strtod_l+0x598>)
 8008708:	460a      	mov	r2, r1
 800870a:	400b      	ands	r3, r1
 800870c:	4925      	ldr	r1, [pc, #148]	@ (80087a4 <_strtod_l+0x59c>)
 800870e:	428b      	cmp	r3, r1
 8008710:	4682      	mov	sl, r0
 8008712:	d898      	bhi.n	8008646 <_strtod_l+0x43e>
 8008714:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008718:	428b      	cmp	r3, r1
 800871a:	bf86      	itte	hi
 800871c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80087a8 <_strtod_l+0x5a0>
 8008720:	f04f 3aff 	movhi.w	sl, #4294967295
 8008724:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008728:	2300      	movs	r3, #0
 800872a:	9308      	str	r3, [sp, #32]
 800872c:	e076      	b.n	800881c <_strtod_l+0x614>
 800872e:	07e2      	lsls	r2, r4, #31
 8008730:	d504      	bpl.n	800873c <_strtod_l+0x534>
 8008732:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008736:	f7f7 ff6f 	bl	8000618 <__aeabi_dmul>
 800873a:	2301      	movs	r3, #1
 800873c:	3601      	adds	r6, #1
 800873e:	1064      	asrs	r4, r4, #1
 8008740:	3708      	adds	r7, #8
 8008742:	e7d0      	b.n	80086e6 <_strtod_l+0x4de>
 8008744:	d0f0      	beq.n	8008728 <_strtod_l+0x520>
 8008746:	4264      	negs	r4, r4
 8008748:	f014 020f 	ands.w	r2, r4, #15
 800874c:	d00a      	beq.n	8008764 <_strtod_l+0x55c>
 800874e:	4b12      	ldr	r3, [pc, #72]	@ (8008798 <_strtod_l+0x590>)
 8008750:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008754:	4650      	mov	r0, sl
 8008756:	4659      	mov	r1, fp
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f8 f886 	bl	800086c <__aeabi_ddiv>
 8008760:	4682      	mov	sl, r0
 8008762:	468b      	mov	fp, r1
 8008764:	1124      	asrs	r4, r4, #4
 8008766:	d0df      	beq.n	8008728 <_strtod_l+0x520>
 8008768:	2c1f      	cmp	r4, #31
 800876a:	dd1f      	ble.n	80087ac <_strtod_l+0x5a4>
 800876c:	2400      	movs	r4, #0
 800876e:	46a0      	mov	r8, r4
 8008770:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008772:	46a1      	mov	r9, r4
 8008774:	9a05      	ldr	r2, [sp, #20]
 8008776:	2322      	movs	r3, #34	@ 0x22
 8008778:	f04f 0a00 	mov.w	sl, #0
 800877c:	f04f 0b00 	mov.w	fp, #0
 8008780:	6013      	str	r3, [r2, #0]
 8008782:	e76b      	b.n	800865c <_strtod_l+0x454>
 8008784:	0800d32b 	.word	0x0800d32b
 8008788:	0800d548 	.word	0x0800d548
 800878c:	0800d323 	.word	0x0800d323
 8008790:	0800d40a 	.word	0x0800d40a
 8008794:	0800d406 	.word	0x0800d406
 8008798:	0800d6d0 	.word	0x0800d6d0
 800879c:	0800d6a8 	.word	0x0800d6a8
 80087a0:	7ff00000 	.word	0x7ff00000
 80087a4:	7ca00000 	.word	0x7ca00000
 80087a8:	7fefffff 	.word	0x7fefffff
 80087ac:	f014 0310 	ands.w	r3, r4, #16
 80087b0:	bf18      	it	ne
 80087b2:	236a      	movne	r3, #106	@ 0x6a
 80087b4:	4ea9      	ldr	r6, [pc, #676]	@ (8008a5c <_strtod_l+0x854>)
 80087b6:	9308      	str	r3, [sp, #32]
 80087b8:	4650      	mov	r0, sl
 80087ba:	4659      	mov	r1, fp
 80087bc:	2300      	movs	r3, #0
 80087be:	07e7      	lsls	r7, r4, #31
 80087c0:	d504      	bpl.n	80087cc <_strtod_l+0x5c4>
 80087c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087c6:	f7f7 ff27 	bl	8000618 <__aeabi_dmul>
 80087ca:	2301      	movs	r3, #1
 80087cc:	1064      	asrs	r4, r4, #1
 80087ce:	f106 0608 	add.w	r6, r6, #8
 80087d2:	d1f4      	bne.n	80087be <_strtod_l+0x5b6>
 80087d4:	b10b      	cbz	r3, 80087da <_strtod_l+0x5d2>
 80087d6:	4682      	mov	sl, r0
 80087d8:	468b      	mov	fp, r1
 80087da:	9b08      	ldr	r3, [sp, #32]
 80087dc:	b1b3      	cbz	r3, 800880c <_strtod_l+0x604>
 80087de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80087e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	4659      	mov	r1, fp
 80087ea:	dd0f      	ble.n	800880c <_strtod_l+0x604>
 80087ec:	2b1f      	cmp	r3, #31
 80087ee:	dd56      	ble.n	800889e <_strtod_l+0x696>
 80087f0:	2b34      	cmp	r3, #52	@ 0x34
 80087f2:	bfde      	ittt	le
 80087f4:	f04f 33ff 	movle.w	r3, #4294967295
 80087f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80087fc:	4093      	lslle	r3, r2
 80087fe:	f04f 0a00 	mov.w	sl, #0
 8008802:	bfcc      	ite	gt
 8008804:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008808:	ea03 0b01 	andle.w	fp, r3, r1
 800880c:	2200      	movs	r2, #0
 800880e:	2300      	movs	r3, #0
 8008810:	4650      	mov	r0, sl
 8008812:	4659      	mov	r1, fp
 8008814:	f7f8 f968 	bl	8000ae8 <__aeabi_dcmpeq>
 8008818:	2800      	cmp	r0, #0
 800881a:	d1a7      	bne.n	800876c <_strtod_l+0x564>
 800881c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008822:	9805      	ldr	r0, [sp, #20]
 8008824:	462b      	mov	r3, r5
 8008826:	464a      	mov	r2, r9
 8008828:	f002 fdae 	bl	800b388 <__s2b>
 800882c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800882e:	2800      	cmp	r0, #0
 8008830:	f43f af09 	beq.w	8008646 <_strtod_l+0x43e>
 8008834:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008836:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008838:	2a00      	cmp	r2, #0
 800883a:	eba3 0308 	sub.w	r3, r3, r8
 800883e:	bfa8      	it	ge
 8008840:	2300      	movge	r3, #0
 8008842:	9312      	str	r3, [sp, #72]	@ 0x48
 8008844:	2400      	movs	r4, #0
 8008846:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800884a:	9316      	str	r3, [sp, #88]	@ 0x58
 800884c:	46a0      	mov	r8, r4
 800884e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008850:	9805      	ldr	r0, [sp, #20]
 8008852:	6859      	ldr	r1, [r3, #4]
 8008854:	f002 fcf0 	bl	800b238 <_Balloc>
 8008858:	4681      	mov	r9, r0
 800885a:	2800      	cmp	r0, #0
 800885c:	f43f aef7 	beq.w	800864e <_strtod_l+0x446>
 8008860:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	3202      	adds	r2, #2
 8008866:	f103 010c 	add.w	r1, r3, #12
 800886a:	0092      	lsls	r2, r2, #2
 800886c:	300c      	adds	r0, #12
 800886e:	f001 fa08 	bl	8009c82 <memcpy>
 8008872:	ec4b ab10 	vmov	d0, sl, fp
 8008876:	9805      	ldr	r0, [sp, #20]
 8008878:	aa1c      	add	r2, sp, #112	@ 0x70
 800887a:	a91b      	add	r1, sp, #108	@ 0x6c
 800887c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008880:	f003 f8b6 	bl	800b9f0 <__d2b>
 8008884:	901a      	str	r0, [sp, #104]	@ 0x68
 8008886:	2800      	cmp	r0, #0
 8008888:	f43f aee1 	beq.w	800864e <_strtod_l+0x446>
 800888c:	9805      	ldr	r0, [sp, #20]
 800888e:	2101      	movs	r1, #1
 8008890:	f002 fe10 	bl	800b4b4 <__i2b>
 8008894:	4680      	mov	r8, r0
 8008896:	b948      	cbnz	r0, 80088ac <_strtod_l+0x6a4>
 8008898:	f04f 0800 	mov.w	r8, #0
 800889c:	e6d7      	b.n	800864e <_strtod_l+0x446>
 800889e:	f04f 32ff 	mov.w	r2, #4294967295
 80088a2:	fa02 f303 	lsl.w	r3, r2, r3
 80088a6:	ea03 0a0a 	and.w	sl, r3, sl
 80088aa:	e7af      	b.n	800880c <_strtod_l+0x604>
 80088ac:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80088ae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80088b0:	2d00      	cmp	r5, #0
 80088b2:	bfab      	itete	ge
 80088b4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80088b6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80088b8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80088ba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80088bc:	bfac      	ite	ge
 80088be:	18ef      	addge	r7, r5, r3
 80088c0:	1b5e      	sublt	r6, r3, r5
 80088c2:	9b08      	ldr	r3, [sp, #32]
 80088c4:	1aed      	subs	r5, r5, r3
 80088c6:	4415      	add	r5, r2
 80088c8:	4b65      	ldr	r3, [pc, #404]	@ (8008a60 <_strtod_l+0x858>)
 80088ca:	3d01      	subs	r5, #1
 80088cc:	429d      	cmp	r5, r3
 80088ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80088d2:	da50      	bge.n	8008976 <_strtod_l+0x76e>
 80088d4:	1b5b      	subs	r3, r3, r5
 80088d6:	2b1f      	cmp	r3, #31
 80088d8:	eba2 0203 	sub.w	r2, r2, r3
 80088dc:	f04f 0101 	mov.w	r1, #1
 80088e0:	dc3d      	bgt.n	800895e <_strtod_l+0x756>
 80088e2:	fa01 f303 	lsl.w	r3, r1, r3
 80088e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088e8:	2300      	movs	r3, #0
 80088ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80088ec:	18bd      	adds	r5, r7, r2
 80088ee:	9b08      	ldr	r3, [sp, #32]
 80088f0:	42af      	cmp	r7, r5
 80088f2:	4416      	add	r6, r2
 80088f4:	441e      	add	r6, r3
 80088f6:	463b      	mov	r3, r7
 80088f8:	bfa8      	it	ge
 80088fa:	462b      	movge	r3, r5
 80088fc:	42b3      	cmp	r3, r6
 80088fe:	bfa8      	it	ge
 8008900:	4633      	movge	r3, r6
 8008902:	2b00      	cmp	r3, #0
 8008904:	bfc2      	ittt	gt
 8008906:	1aed      	subgt	r5, r5, r3
 8008908:	1af6      	subgt	r6, r6, r3
 800890a:	1aff      	subgt	r7, r7, r3
 800890c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800890e:	2b00      	cmp	r3, #0
 8008910:	dd16      	ble.n	8008940 <_strtod_l+0x738>
 8008912:	4641      	mov	r1, r8
 8008914:	9805      	ldr	r0, [sp, #20]
 8008916:	461a      	mov	r2, r3
 8008918:	f002 fe84 	bl	800b624 <__pow5mult>
 800891c:	4680      	mov	r8, r0
 800891e:	2800      	cmp	r0, #0
 8008920:	d0ba      	beq.n	8008898 <_strtod_l+0x690>
 8008922:	4601      	mov	r1, r0
 8008924:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008926:	9805      	ldr	r0, [sp, #20]
 8008928:	f002 fdda 	bl	800b4e0 <__multiply>
 800892c:	900a      	str	r0, [sp, #40]	@ 0x28
 800892e:	2800      	cmp	r0, #0
 8008930:	f43f ae8d 	beq.w	800864e <_strtod_l+0x446>
 8008934:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008936:	9805      	ldr	r0, [sp, #20]
 8008938:	f002 fcbe 	bl	800b2b8 <_Bfree>
 800893c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800893e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008940:	2d00      	cmp	r5, #0
 8008942:	dc1d      	bgt.n	8008980 <_strtod_l+0x778>
 8008944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	dd23      	ble.n	8008992 <_strtod_l+0x78a>
 800894a:	4649      	mov	r1, r9
 800894c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800894e:	9805      	ldr	r0, [sp, #20]
 8008950:	f002 fe68 	bl	800b624 <__pow5mult>
 8008954:	4681      	mov	r9, r0
 8008956:	b9e0      	cbnz	r0, 8008992 <_strtod_l+0x78a>
 8008958:	f04f 0900 	mov.w	r9, #0
 800895c:	e677      	b.n	800864e <_strtod_l+0x446>
 800895e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008962:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008966:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800896a:	35e2      	adds	r5, #226	@ 0xe2
 800896c:	fa01 f305 	lsl.w	r3, r1, r5
 8008970:	9310      	str	r3, [sp, #64]	@ 0x40
 8008972:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008974:	e7ba      	b.n	80088ec <_strtod_l+0x6e4>
 8008976:	2300      	movs	r3, #0
 8008978:	9310      	str	r3, [sp, #64]	@ 0x40
 800897a:	2301      	movs	r3, #1
 800897c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800897e:	e7b5      	b.n	80088ec <_strtod_l+0x6e4>
 8008980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008982:	9805      	ldr	r0, [sp, #20]
 8008984:	462a      	mov	r2, r5
 8008986:	f002 fea7 	bl	800b6d8 <__lshift>
 800898a:	901a      	str	r0, [sp, #104]	@ 0x68
 800898c:	2800      	cmp	r0, #0
 800898e:	d1d9      	bne.n	8008944 <_strtod_l+0x73c>
 8008990:	e65d      	b.n	800864e <_strtod_l+0x446>
 8008992:	2e00      	cmp	r6, #0
 8008994:	dd07      	ble.n	80089a6 <_strtod_l+0x79e>
 8008996:	4649      	mov	r1, r9
 8008998:	9805      	ldr	r0, [sp, #20]
 800899a:	4632      	mov	r2, r6
 800899c:	f002 fe9c 	bl	800b6d8 <__lshift>
 80089a0:	4681      	mov	r9, r0
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d0d8      	beq.n	8008958 <_strtod_l+0x750>
 80089a6:	2f00      	cmp	r7, #0
 80089a8:	dd08      	ble.n	80089bc <_strtod_l+0x7b4>
 80089aa:	4641      	mov	r1, r8
 80089ac:	9805      	ldr	r0, [sp, #20]
 80089ae:	463a      	mov	r2, r7
 80089b0:	f002 fe92 	bl	800b6d8 <__lshift>
 80089b4:	4680      	mov	r8, r0
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f43f ae49 	beq.w	800864e <_strtod_l+0x446>
 80089bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089be:	9805      	ldr	r0, [sp, #20]
 80089c0:	464a      	mov	r2, r9
 80089c2:	f002 ff11 	bl	800b7e8 <__mdiff>
 80089c6:	4604      	mov	r4, r0
 80089c8:	2800      	cmp	r0, #0
 80089ca:	f43f ae40 	beq.w	800864e <_strtod_l+0x446>
 80089ce:	68c3      	ldr	r3, [r0, #12]
 80089d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089d2:	2300      	movs	r3, #0
 80089d4:	60c3      	str	r3, [r0, #12]
 80089d6:	4641      	mov	r1, r8
 80089d8:	f002 feea 	bl	800b7b0 <__mcmp>
 80089dc:	2800      	cmp	r0, #0
 80089de:	da45      	bge.n	8008a6c <_strtod_l+0x864>
 80089e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089e2:	ea53 030a 	orrs.w	r3, r3, sl
 80089e6:	d16b      	bne.n	8008ac0 <_strtod_l+0x8b8>
 80089e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d167      	bne.n	8008ac0 <_strtod_l+0x8b8>
 80089f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089f4:	0d1b      	lsrs	r3, r3, #20
 80089f6:	051b      	lsls	r3, r3, #20
 80089f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80089fc:	d960      	bls.n	8008ac0 <_strtod_l+0x8b8>
 80089fe:	6963      	ldr	r3, [r4, #20]
 8008a00:	b913      	cbnz	r3, 8008a08 <_strtod_l+0x800>
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	dd5b      	ble.n	8008ac0 <_strtod_l+0x8b8>
 8008a08:	4621      	mov	r1, r4
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	9805      	ldr	r0, [sp, #20]
 8008a0e:	f002 fe63 	bl	800b6d8 <__lshift>
 8008a12:	4641      	mov	r1, r8
 8008a14:	4604      	mov	r4, r0
 8008a16:	f002 fecb 	bl	800b7b0 <__mcmp>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	dd50      	ble.n	8008ac0 <_strtod_l+0x8b8>
 8008a1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a22:	9a08      	ldr	r2, [sp, #32]
 8008a24:	0d1b      	lsrs	r3, r3, #20
 8008a26:	051b      	lsls	r3, r3, #20
 8008a28:	2a00      	cmp	r2, #0
 8008a2a:	d06a      	beq.n	8008b02 <_strtod_l+0x8fa>
 8008a2c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a30:	d867      	bhi.n	8008b02 <_strtod_l+0x8fa>
 8008a32:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008a36:	f67f ae9d 	bls.w	8008774 <_strtod_l+0x56c>
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a64 <_strtod_l+0x85c>)
 8008a3c:	4650      	mov	r0, sl
 8008a3e:	4659      	mov	r1, fp
 8008a40:	2200      	movs	r2, #0
 8008a42:	f7f7 fde9 	bl	8000618 <__aeabi_dmul>
 8008a46:	4b08      	ldr	r3, [pc, #32]	@ (8008a68 <_strtod_l+0x860>)
 8008a48:	400b      	ands	r3, r1
 8008a4a:	4682      	mov	sl, r0
 8008a4c:	468b      	mov	fp, r1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f47f ae08 	bne.w	8008664 <_strtod_l+0x45c>
 8008a54:	9a05      	ldr	r2, [sp, #20]
 8008a56:	2322      	movs	r3, #34	@ 0x22
 8008a58:	6013      	str	r3, [r2, #0]
 8008a5a:	e603      	b.n	8008664 <_strtod_l+0x45c>
 8008a5c:	0800d570 	.word	0x0800d570
 8008a60:	fffffc02 	.word	0xfffffc02
 8008a64:	39500000 	.word	0x39500000
 8008a68:	7ff00000 	.word	0x7ff00000
 8008a6c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008a70:	d165      	bne.n	8008b3e <_strtod_l+0x936>
 8008a72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008a74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a78:	b35a      	cbz	r2, 8008ad2 <_strtod_l+0x8ca>
 8008a7a:	4a9f      	ldr	r2, [pc, #636]	@ (8008cf8 <_strtod_l+0xaf0>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d12b      	bne.n	8008ad8 <_strtod_l+0x8d0>
 8008a80:	9b08      	ldr	r3, [sp, #32]
 8008a82:	4651      	mov	r1, sl
 8008a84:	b303      	cbz	r3, 8008ac8 <_strtod_l+0x8c0>
 8008a86:	4b9d      	ldr	r3, [pc, #628]	@ (8008cfc <_strtod_l+0xaf4>)
 8008a88:	465a      	mov	r2, fp
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008a90:	f04f 32ff 	mov.w	r2, #4294967295
 8008a94:	d81b      	bhi.n	8008ace <_strtod_l+0x8c6>
 8008a96:	0d1b      	lsrs	r3, r3, #20
 8008a98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa0:	4299      	cmp	r1, r3
 8008aa2:	d119      	bne.n	8008ad8 <_strtod_l+0x8d0>
 8008aa4:	4b96      	ldr	r3, [pc, #600]	@ (8008d00 <_strtod_l+0xaf8>)
 8008aa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d102      	bne.n	8008ab2 <_strtod_l+0x8aa>
 8008aac:	3101      	adds	r1, #1
 8008aae:	f43f adce 	beq.w	800864e <_strtod_l+0x446>
 8008ab2:	4b92      	ldr	r3, [pc, #584]	@ (8008cfc <_strtod_l+0xaf4>)
 8008ab4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ab6:	401a      	ands	r2, r3
 8008ab8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008abc:	f04f 0a00 	mov.w	sl, #0
 8008ac0:	9b08      	ldr	r3, [sp, #32]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1b9      	bne.n	8008a3a <_strtod_l+0x832>
 8008ac6:	e5cd      	b.n	8008664 <_strtod_l+0x45c>
 8008ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8008acc:	e7e8      	b.n	8008aa0 <_strtod_l+0x898>
 8008ace:	4613      	mov	r3, r2
 8008ad0:	e7e6      	b.n	8008aa0 <_strtod_l+0x898>
 8008ad2:	ea53 030a 	orrs.w	r3, r3, sl
 8008ad6:	d0a2      	beq.n	8008a1e <_strtod_l+0x816>
 8008ad8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ada:	b1db      	cbz	r3, 8008b14 <_strtod_l+0x90c>
 8008adc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ade:	4213      	tst	r3, r2
 8008ae0:	d0ee      	beq.n	8008ac0 <_strtod_l+0x8b8>
 8008ae2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ae4:	9a08      	ldr	r2, [sp, #32]
 8008ae6:	4650      	mov	r0, sl
 8008ae8:	4659      	mov	r1, fp
 8008aea:	b1bb      	cbz	r3, 8008b1c <_strtod_l+0x914>
 8008aec:	f7ff fb6b 	bl	80081c6 <sulp>
 8008af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008af4:	ec53 2b10 	vmov	r2, r3, d0
 8008af8:	f7f7 fbd8 	bl	80002ac <__adddf3>
 8008afc:	4682      	mov	sl, r0
 8008afe:	468b      	mov	fp, r1
 8008b00:	e7de      	b.n	8008ac0 <_strtod_l+0x8b8>
 8008b02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008b06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b0e:	f04f 3aff 	mov.w	sl, #4294967295
 8008b12:	e7d5      	b.n	8008ac0 <_strtod_l+0x8b8>
 8008b14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b16:	ea13 0f0a 	tst.w	r3, sl
 8008b1a:	e7e1      	b.n	8008ae0 <_strtod_l+0x8d8>
 8008b1c:	f7ff fb53 	bl	80081c6 <sulp>
 8008b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b24:	ec53 2b10 	vmov	r2, r3, d0
 8008b28:	f7f7 fbbe 	bl	80002a8 <__aeabi_dsub>
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2300      	movs	r3, #0
 8008b30:	4682      	mov	sl, r0
 8008b32:	468b      	mov	fp, r1
 8008b34:	f7f7 ffd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d0c1      	beq.n	8008ac0 <_strtod_l+0x8b8>
 8008b3c:	e61a      	b.n	8008774 <_strtod_l+0x56c>
 8008b3e:	4641      	mov	r1, r8
 8008b40:	4620      	mov	r0, r4
 8008b42:	f002 ffad 	bl	800baa0 <__ratio>
 8008b46:	ec57 6b10 	vmov	r6, r7, d0
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b50:	4630      	mov	r0, r6
 8008b52:	4639      	mov	r1, r7
 8008b54:	f7f7 ffdc 	bl	8000b10 <__aeabi_dcmple>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d06f      	beq.n	8008c3c <_strtod_l+0xa34>
 8008b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d17a      	bne.n	8008c58 <_strtod_l+0xa50>
 8008b62:	f1ba 0f00 	cmp.w	sl, #0
 8008b66:	d158      	bne.n	8008c1a <_strtod_l+0xa12>
 8008b68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d15a      	bne.n	8008c28 <_strtod_l+0xa20>
 8008b72:	4b64      	ldr	r3, [pc, #400]	@ (8008d04 <_strtod_l+0xafc>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	4630      	mov	r0, r6
 8008b78:	4639      	mov	r1, r7
 8008b7a:	f7f7 ffbf 	bl	8000afc <__aeabi_dcmplt>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d159      	bne.n	8008c36 <_strtod_l+0xa2e>
 8008b82:	4630      	mov	r0, r6
 8008b84:	4639      	mov	r1, r7
 8008b86:	4b60      	ldr	r3, [pc, #384]	@ (8008d08 <_strtod_l+0xb00>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f7f7 fd45 	bl	8000618 <__aeabi_dmul>
 8008b8e:	4606      	mov	r6, r0
 8008b90:	460f      	mov	r7, r1
 8008b92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008b96:	9606      	str	r6, [sp, #24]
 8008b98:	9307      	str	r3, [sp, #28]
 8008b9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b9e:	4d57      	ldr	r5, [pc, #348]	@ (8008cfc <_strtod_l+0xaf4>)
 8008ba0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ba6:	401d      	ands	r5, r3
 8008ba8:	4b58      	ldr	r3, [pc, #352]	@ (8008d0c <_strtod_l+0xb04>)
 8008baa:	429d      	cmp	r5, r3
 8008bac:	f040 80b2 	bne.w	8008d14 <_strtod_l+0xb0c>
 8008bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008bb6:	ec4b ab10 	vmov	d0, sl, fp
 8008bba:	f002 fea9 	bl	800b910 <__ulp>
 8008bbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bc2:	ec51 0b10 	vmov	r0, r1, d0
 8008bc6:	f7f7 fd27 	bl	8000618 <__aeabi_dmul>
 8008bca:	4652      	mov	r2, sl
 8008bcc:	465b      	mov	r3, fp
 8008bce:	f7f7 fb6d 	bl	80002ac <__adddf3>
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4949      	ldr	r1, [pc, #292]	@ (8008cfc <_strtod_l+0xaf4>)
 8008bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8008d10 <_strtod_l+0xb08>)
 8008bd8:	4019      	ands	r1, r3
 8008bda:	4291      	cmp	r1, r2
 8008bdc:	4682      	mov	sl, r0
 8008bde:	d942      	bls.n	8008c66 <_strtod_l+0xa5e>
 8008be0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008be2:	4b47      	ldr	r3, [pc, #284]	@ (8008d00 <_strtod_l+0xaf8>)
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d103      	bne.n	8008bf0 <_strtod_l+0x9e8>
 8008be8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bea:	3301      	adds	r3, #1
 8008bec:	f43f ad2f 	beq.w	800864e <_strtod_l+0x446>
 8008bf0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008d00 <_strtod_l+0xaf8>
 8008bf4:	f04f 3aff 	mov.w	sl, #4294967295
 8008bf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bfa:	9805      	ldr	r0, [sp, #20]
 8008bfc:	f002 fb5c 	bl	800b2b8 <_Bfree>
 8008c00:	9805      	ldr	r0, [sp, #20]
 8008c02:	4649      	mov	r1, r9
 8008c04:	f002 fb58 	bl	800b2b8 <_Bfree>
 8008c08:	9805      	ldr	r0, [sp, #20]
 8008c0a:	4641      	mov	r1, r8
 8008c0c:	f002 fb54 	bl	800b2b8 <_Bfree>
 8008c10:	9805      	ldr	r0, [sp, #20]
 8008c12:	4621      	mov	r1, r4
 8008c14:	f002 fb50 	bl	800b2b8 <_Bfree>
 8008c18:	e619      	b.n	800884e <_strtod_l+0x646>
 8008c1a:	f1ba 0f01 	cmp.w	sl, #1
 8008c1e:	d103      	bne.n	8008c28 <_strtod_l+0xa20>
 8008c20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	f43f ada6 	beq.w	8008774 <_strtod_l+0x56c>
 8008c28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008cd8 <_strtod_l+0xad0>
 8008c2c:	4f35      	ldr	r7, [pc, #212]	@ (8008d04 <_strtod_l+0xafc>)
 8008c2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c32:	2600      	movs	r6, #0
 8008c34:	e7b1      	b.n	8008b9a <_strtod_l+0x992>
 8008c36:	4f34      	ldr	r7, [pc, #208]	@ (8008d08 <_strtod_l+0xb00>)
 8008c38:	2600      	movs	r6, #0
 8008c3a:	e7aa      	b.n	8008b92 <_strtod_l+0x98a>
 8008c3c:	4b32      	ldr	r3, [pc, #200]	@ (8008d08 <_strtod_l+0xb00>)
 8008c3e:	4630      	mov	r0, r6
 8008c40:	4639      	mov	r1, r7
 8008c42:	2200      	movs	r2, #0
 8008c44:	f7f7 fce8 	bl	8000618 <__aeabi_dmul>
 8008c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d09f      	beq.n	8008b92 <_strtod_l+0x98a>
 8008c52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008c56:	e7a0      	b.n	8008b9a <_strtod_l+0x992>
 8008c58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008ce0 <_strtod_l+0xad8>
 8008c5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c60:	ec57 6b17 	vmov	r6, r7, d7
 8008c64:	e799      	b.n	8008b9a <_strtod_l+0x992>
 8008c66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008c6a:	9b08      	ldr	r3, [sp, #32]
 8008c6c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1c1      	bne.n	8008bf8 <_strtod_l+0x9f0>
 8008c74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c78:	0d1b      	lsrs	r3, r3, #20
 8008c7a:	051b      	lsls	r3, r3, #20
 8008c7c:	429d      	cmp	r5, r3
 8008c7e:	d1bb      	bne.n	8008bf8 <_strtod_l+0x9f0>
 8008c80:	4630      	mov	r0, r6
 8008c82:	4639      	mov	r1, r7
 8008c84:	f7f8 f828 	bl	8000cd8 <__aeabi_d2lz>
 8008c88:	f7f7 fc98 	bl	80005bc <__aeabi_l2d>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 fb08 	bl	80002a8 <__aeabi_dsub>
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ca0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ca6:	ea46 060a 	orr.w	r6, r6, sl
 8008caa:	431e      	orrs	r6, r3
 8008cac:	d06f      	beq.n	8008d8e <_strtod_l+0xb86>
 8008cae:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ce8 <_strtod_l+0xae0>)
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f7f7 ff22 	bl	8000afc <__aeabi_dcmplt>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	f47f acd3 	bne.w	8008664 <_strtod_l+0x45c>
 8008cbe:	a30c      	add	r3, pc, #48	@ (adr r3, 8008cf0 <_strtod_l+0xae8>)
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cc8:	f7f7 ff36 	bl	8000b38 <__aeabi_dcmpgt>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d093      	beq.n	8008bf8 <_strtod_l+0x9f0>
 8008cd0:	e4c8      	b.n	8008664 <_strtod_l+0x45c>
 8008cd2:	bf00      	nop
 8008cd4:	f3af 8000 	nop.w
 8008cd8:	00000000 	.word	0x00000000
 8008cdc:	bff00000 	.word	0xbff00000
 8008ce0:	00000000 	.word	0x00000000
 8008ce4:	3ff00000 	.word	0x3ff00000
 8008ce8:	94a03595 	.word	0x94a03595
 8008cec:	3fdfffff 	.word	0x3fdfffff
 8008cf0:	35afe535 	.word	0x35afe535
 8008cf4:	3fe00000 	.word	0x3fe00000
 8008cf8:	000fffff 	.word	0x000fffff
 8008cfc:	7ff00000 	.word	0x7ff00000
 8008d00:	7fefffff 	.word	0x7fefffff
 8008d04:	3ff00000 	.word	0x3ff00000
 8008d08:	3fe00000 	.word	0x3fe00000
 8008d0c:	7fe00000 	.word	0x7fe00000
 8008d10:	7c9fffff 	.word	0x7c9fffff
 8008d14:	9b08      	ldr	r3, [sp, #32]
 8008d16:	b323      	cbz	r3, 8008d62 <_strtod_l+0xb5a>
 8008d18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008d1c:	d821      	bhi.n	8008d62 <_strtod_l+0xb5a>
 8008d1e:	a328      	add	r3, pc, #160	@ (adr r3, 8008dc0 <_strtod_l+0xbb8>)
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	4630      	mov	r0, r6
 8008d26:	4639      	mov	r1, r7
 8008d28:	f7f7 fef2 	bl	8000b10 <__aeabi_dcmple>
 8008d2c:	b1a0      	cbz	r0, 8008d58 <_strtod_l+0xb50>
 8008d2e:	4639      	mov	r1, r7
 8008d30:	4630      	mov	r0, r6
 8008d32:	f7f7 ff49 	bl	8000bc8 <__aeabi_d2uiz>
 8008d36:	2801      	cmp	r0, #1
 8008d38:	bf38      	it	cc
 8008d3a:	2001      	movcc	r0, #1
 8008d3c:	f7f7 fbf2 	bl	8000524 <__aeabi_ui2d>
 8008d40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d42:	4606      	mov	r6, r0
 8008d44:	460f      	mov	r7, r1
 8008d46:	b9fb      	cbnz	r3, 8008d88 <_strtod_l+0xb80>
 8008d48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d4c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008d4e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008d54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008d5e:	1b5b      	subs	r3, r3, r5
 8008d60:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008d6a:	f002 fdd1 	bl	800b910 <__ulp>
 8008d6e:	4650      	mov	r0, sl
 8008d70:	ec53 2b10 	vmov	r2, r3, d0
 8008d74:	4659      	mov	r1, fp
 8008d76:	f7f7 fc4f 	bl	8000618 <__aeabi_dmul>
 8008d7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d7e:	f7f7 fa95 	bl	80002ac <__adddf3>
 8008d82:	4682      	mov	sl, r0
 8008d84:	468b      	mov	fp, r1
 8008d86:	e770      	b.n	8008c6a <_strtod_l+0xa62>
 8008d88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008d8c:	e7e0      	b.n	8008d50 <_strtod_l+0xb48>
 8008d8e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008dc8 <_strtod_l+0xbc0>)
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f7f7 feb2 	bl	8000afc <__aeabi_dcmplt>
 8008d98:	e798      	b.n	8008ccc <_strtod_l+0xac4>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008da0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	f7ff ba6d 	b.w	8008282 <_strtod_l+0x7a>
 8008da8:	2a65      	cmp	r2, #101	@ 0x65
 8008daa:	f43f ab68 	beq.w	800847e <_strtod_l+0x276>
 8008dae:	2a45      	cmp	r2, #69	@ 0x45
 8008db0:	f43f ab65 	beq.w	800847e <_strtod_l+0x276>
 8008db4:	2301      	movs	r3, #1
 8008db6:	f7ff bba0 	b.w	80084fa <_strtod_l+0x2f2>
 8008dba:	bf00      	nop
 8008dbc:	f3af 8000 	nop.w
 8008dc0:	ffc00000 	.word	0xffc00000
 8008dc4:	41dfffff 	.word	0x41dfffff
 8008dc8:	94a03595 	.word	0x94a03595
 8008dcc:	3fcfffff 	.word	0x3fcfffff

08008dd0 <strtod>:
 8008dd0:	460a      	mov	r2, r1
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	4802      	ldr	r0, [pc, #8]	@ (8008de0 <strtod+0x10>)
 8008dd6:	4b03      	ldr	r3, [pc, #12]	@ (8008de4 <strtod+0x14>)
 8008dd8:	6800      	ldr	r0, [r0, #0]
 8008dda:	f7ff ba15 	b.w	8008208 <_strtod_l>
 8008dde:	bf00      	nop
 8008de0:	200003f4 	.word	0x200003f4
 8008de4:	20000288 	.word	0x20000288

08008de8 <_strtol_l.isra.0>:
 8008de8:	2b24      	cmp	r3, #36	@ 0x24
 8008dea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dee:	4686      	mov	lr, r0
 8008df0:	4690      	mov	r8, r2
 8008df2:	d801      	bhi.n	8008df8 <_strtol_l.isra.0+0x10>
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d106      	bne.n	8008e06 <_strtol_l.isra.0+0x1e>
 8008df8:	f000 ff16 	bl	8009c28 <__errno>
 8008dfc:	2316      	movs	r3, #22
 8008dfe:	6003      	str	r3, [r0, #0]
 8008e00:	2000      	movs	r0, #0
 8008e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e06:	4834      	ldr	r0, [pc, #208]	@ (8008ed8 <_strtol_l.isra.0+0xf0>)
 8008e08:	460d      	mov	r5, r1
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e10:	5d06      	ldrb	r6, [r0, r4]
 8008e12:	f016 0608 	ands.w	r6, r6, #8
 8008e16:	d1f8      	bne.n	8008e0a <_strtol_l.isra.0+0x22>
 8008e18:	2c2d      	cmp	r4, #45	@ 0x2d
 8008e1a:	d110      	bne.n	8008e3e <_strtol_l.isra.0+0x56>
 8008e1c:	782c      	ldrb	r4, [r5, #0]
 8008e1e:	2601      	movs	r6, #1
 8008e20:	1c95      	adds	r5, r2, #2
 8008e22:	f033 0210 	bics.w	r2, r3, #16
 8008e26:	d115      	bne.n	8008e54 <_strtol_l.isra.0+0x6c>
 8008e28:	2c30      	cmp	r4, #48	@ 0x30
 8008e2a:	d10d      	bne.n	8008e48 <_strtol_l.isra.0+0x60>
 8008e2c:	782a      	ldrb	r2, [r5, #0]
 8008e2e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e32:	2a58      	cmp	r2, #88	@ 0x58
 8008e34:	d108      	bne.n	8008e48 <_strtol_l.isra.0+0x60>
 8008e36:	786c      	ldrb	r4, [r5, #1]
 8008e38:	3502      	adds	r5, #2
 8008e3a:	2310      	movs	r3, #16
 8008e3c:	e00a      	b.n	8008e54 <_strtol_l.isra.0+0x6c>
 8008e3e:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e40:	bf04      	itt	eq
 8008e42:	782c      	ldrbeq	r4, [r5, #0]
 8008e44:	1c95      	addeq	r5, r2, #2
 8008e46:	e7ec      	b.n	8008e22 <_strtol_l.isra.0+0x3a>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1f6      	bne.n	8008e3a <_strtol_l.isra.0+0x52>
 8008e4c:	2c30      	cmp	r4, #48	@ 0x30
 8008e4e:	bf14      	ite	ne
 8008e50:	230a      	movne	r3, #10
 8008e52:	2308      	moveq	r3, #8
 8008e54:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008e58:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	fbbc f9f3 	udiv	r9, ip, r3
 8008e62:	4610      	mov	r0, r2
 8008e64:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e68:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008e6c:	2f09      	cmp	r7, #9
 8008e6e:	d80f      	bhi.n	8008e90 <_strtol_l.isra.0+0xa8>
 8008e70:	463c      	mov	r4, r7
 8008e72:	42a3      	cmp	r3, r4
 8008e74:	dd1b      	ble.n	8008eae <_strtol_l.isra.0+0xc6>
 8008e76:	1c57      	adds	r7, r2, #1
 8008e78:	d007      	beq.n	8008e8a <_strtol_l.isra.0+0xa2>
 8008e7a:	4581      	cmp	r9, r0
 8008e7c:	d314      	bcc.n	8008ea8 <_strtol_l.isra.0+0xc0>
 8008e7e:	d101      	bne.n	8008e84 <_strtol_l.isra.0+0x9c>
 8008e80:	45a2      	cmp	sl, r4
 8008e82:	db11      	blt.n	8008ea8 <_strtol_l.isra.0+0xc0>
 8008e84:	fb00 4003 	mla	r0, r0, r3, r4
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e8e:	e7eb      	b.n	8008e68 <_strtol_l.isra.0+0x80>
 8008e90:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008e94:	2f19      	cmp	r7, #25
 8008e96:	d801      	bhi.n	8008e9c <_strtol_l.isra.0+0xb4>
 8008e98:	3c37      	subs	r4, #55	@ 0x37
 8008e9a:	e7ea      	b.n	8008e72 <_strtol_l.isra.0+0x8a>
 8008e9c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008ea0:	2f19      	cmp	r7, #25
 8008ea2:	d804      	bhi.n	8008eae <_strtol_l.isra.0+0xc6>
 8008ea4:	3c57      	subs	r4, #87	@ 0x57
 8008ea6:	e7e4      	b.n	8008e72 <_strtol_l.isra.0+0x8a>
 8008ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8008eac:	e7ed      	b.n	8008e8a <_strtol_l.isra.0+0xa2>
 8008eae:	1c53      	adds	r3, r2, #1
 8008eb0:	d108      	bne.n	8008ec4 <_strtol_l.isra.0+0xdc>
 8008eb2:	2322      	movs	r3, #34	@ 0x22
 8008eb4:	f8ce 3000 	str.w	r3, [lr]
 8008eb8:	4660      	mov	r0, ip
 8008eba:	f1b8 0f00 	cmp.w	r8, #0
 8008ebe:	d0a0      	beq.n	8008e02 <_strtol_l.isra.0+0x1a>
 8008ec0:	1e69      	subs	r1, r5, #1
 8008ec2:	e006      	b.n	8008ed2 <_strtol_l.isra.0+0xea>
 8008ec4:	b106      	cbz	r6, 8008ec8 <_strtol_l.isra.0+0xe0>
 8008ec6:	4240      	negs	r0, r0
 8008ec8:	f1b8 0f00 	cmp.w	r8, #0
 8008ecc:	d099      	beq.n	8008e02 <_strtol_l.isra.0+0x1a>
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	d1f6      	bne.n	8008ec0 <_strtol_l.isra.0+0xd8>
 8008ed2:	f8c8 1000 	str.w	r1, [r8]
 8008ed6:	e794      	b.n	8008e02 <_strtol_l.isra.0+0x1a>
 8008ed8:	0800d599 	.word	0x0800d599

08008edc <strtol>:
 8008edc:	4613      	mov	r3, r2
 8008ede:	460a      	mov	r2, r1
 8008ee0:	4601      	mov	r1, r0
 8008ee2:	4802      	ldr	r0, [pc, #8]	@ (8008eec <strtol+0x10>)
 8008ee4:	6800      	ldr	r0, [r0, #0]
 8008ee6:	f7ff bf7f 	b.w	8008de8 <_strtol_l.isra.0>
 8008eea:	bf00      	nop
 8008eec:	200003f4 	.word	0x200003f4

08008ef0 <__cvt>:
 8008ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef4:	ec57 6b10 	vmov	r6, r7, d0
 8008ef8:	2f00      	cmp	r7, #0
 8008efa:	460c      	mov	r4, r1
 8008efc:	4619      	mov	r1, r3
 8008efe:	463b      	mov	r3, r7
 8008f00:	bfbb      	ittet	lt
 8008f02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f06:	461f      	movlt	r7, r3
 8008f08:	2300      	movge	r3, #0
 8008f0a:	232d      	movlt	r3, #45	@ 0x2d
 8008f0c:	700b      	strb	r3, [r1, #0]
 8008f0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f14:	4691      	mov	r9, r2
 8008f16:	f023 0820 	bic.w	r8, r3, #32
 8008f1a:	bfbc      	itt	lt
 8008f1c:	4632      	movlt	r2, r6
 8008f1e:	4616      	movlt	r6, r2
 8008f20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f24:	d005      	beq.n	8008f32 <__cvt+0x42>
 8008f26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f2a:	d100      	bne.n	8008f2e <__cvt+0x3e>
 8008f2c:	3401      	adds	r4, #1
 8008f2e:	2102      	movs	r1, #2
 8008f30:	e000      	b.n	8008f34 <__cvt+0x44>
 8008f32:	2103      	movs	r1, #3
 8008f34:	ab03      	add	r3, sp, #12
 8008f36:	9301      	str	r3, [sp, #4]
 8008f38:	ab02      	add	r3, sp, #8
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	ec47 6b10 	vmov	d0, r6, r7
 8008f40:	4653      	mov	r3, sl
 8008f42:	4622      	mov	r2, r4
 8008f44:	f000 ff5c 	bl	8009e00 <_dtoa_r>
 8008f48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	d119      	bne.n	8008f84 <__cvt+0x94>
 8008f50:	f019 0f01 	tst.w	r9, #1
 8008f54:	d00e      	beq.n	8008f74 <__cvt+0x84>
 8008f56:	eb00 0904 	add.w	r9, r0, r4
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4630      	mov	r0, r6
 8008f60:	4639      	mov	r1, r7
 8008f62:	f7f7 fdc1 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f66:	b108      	cbz	r0, 8008f6c <__cvt+0x7c>
 8008f68:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f6c:	2230      	movs	r2, #48	@ 0x30
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	454b      	cmp	r3, r9
 8008f72:	d31e      	bcc.n	8008fb2 <__cvt+0xc2>
 8008f74:	9b03      	ldr	r3, [sp, #12]
 8008f76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f78:	1b5b      	subs	r3, r3, r5
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	b004      	add	sp, #16
 8008f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f88:	eb00 0904 	add.w	r9, r0, r4
 8008f8c:	d1e5      	bne.n	8008f5a <__cvt+0x6a>
 8008f8e:	7803      	ldrb	r3, [r0, #0]
 8008f90:	2b30      	cmp	r3, #48	@ 0x30
 8008f92:	d10a      	bne.n	8008faa <__cvt+0xba>
 8008f94:	2200      	movs	r2, #0
 8008f96:	2300      	movs	r3, #0
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4639      	mov	r1, r7
 8008f9c:	f7f7 fda4 	bl	8000ae8 <__aeabi_dcmpeq>
 8008fa0:	b918      	cbnz	r0, 8008faa <__cvt+0xba>
 8008fa2:	f1c4 0401 	rsb	r4, r4, #1
 8008fa6:	f8ca 4000 	str.w	r4, [sl]
 8008faa:	f8da 3000 	ldr.w	r3, [sl]
 8008fae:	4499      	add	r9, r3
 8008fb0:	e7d3      	b.n	8008f5a <__cvt+0x6a>
 8008fb2:	1c59      	adds	r1, r3, #1
 8008fb4:	9103      	str	r1, [sp, #12]
 8008fb6:	701a      	strb	r2, [r3, #0]
 8008fb8:	e7d9      	b.n	8008f6e <__cvt+0x7e>

08008fba <__exponent>:
 8008fba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	bfba      	itte	lt
 8008fc0:	4249      	neglt	r1, r1
 8008fc2:	232d      	movlt	r3, #45	@ 0x2d
 8008fc4:	232b      	movge	r3, #43	@ 0x2b
 8008fc6:	2909      	cmp	r1, #9
 8008fc8:	7002      	strb	r2, [r0, #0]
 8008fca:	7043      	strb	r3, [r0, #1]
 8008fcc:	dd29      	ble.n	8009022 <__exponent+0x68>
 8008fce:	f10d 0307 	add.w	r3, sp, #7
 8008fd2:	461d      	mov	r5, r3
 8008fd4:	270a      	movs	r7, #10
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8008fdc:	fb07 1416 	mls	r4, r7, r6, r1
 8008fe0:	3430      	adds	r4, #48	@ 0x30
 8008fe2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	2c63      	cmp	r4, #99	@ 0x63
 8008fea:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fee:	4631      	mov	r1, r6
 8008ff0:	dcf1      	bgt.n	8008fd6 <__exponent+0x1c>
 8008ff2:	3130      	adds	r1, #48	@ 0x30
 8008ff4:	1e94      	subs	r4, r2, #2
 8008ff6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ffa:	1c41      	adds	r1, r0, #1
 8008ffc:	4623      	mov	r3, r4
 8008ffe:	42ab      	cmp	r3, r5
 8009000:	d30a      	bcc.n	8009018 <__exponent+0x5e>
 8009002:	f10d 0309 	add.w	r3, sp, #9
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	42ac      	cmp	r4, r5
 800900a:	bf88      	it	hi
 800900c:	2300      	movhi	r3, #0
 800900e:	3302      	adds	r3, #2
 8009010:	4403      	add	r3, r0
 8009012:	1a18      	subs	r0, r3, r0
 8009014:	b003      	add	sp, #12
 8009016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009018:	f813 6b01 	ldrb.w	r6, [r3], #1
 800901c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009020:	e7ed      	b.n	8008ffe <__exponent+0x44>
 8009022:	2330      	movs	r3, #48	@ 0x30
 8009024:	3130      	adds	r1, #48	@ 0x30
 8009026:	7083      	strb	r3, [r0, #2]
 8009028:	70c1      	strb	r1, [r0, #3]
 800902a:	1d03      	adds	r3, r0, #4
 800902c:	e7f1      	b.n	8009012 <__exponent+0x58>
	...

08009030 <_printf_float>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	b08d      	sub	sp, #52	@ 0x34
 8009036:	460c      	mov	r4, r1
 8009038:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800903c:	4616      	mov	r6, r2
 800903e:	461f      	mov	r7, r3
 8009040:	4605      	mov	r5, r0
 8009042:	f000 fd49 	bl	8009ad8 <_localeconv_r>
 8009046:	6803      	ldr	r3, [r0, #0]
 8009048:	9304      	str	r3, [sp, #16]
 800904a:	4618      	mov	r0, r3
 800904c:	f7f7 f920 	bl	8000290 <strlen>
 8009050:	2300      	movs	r3, #0
 8009052:	930a      	str	r3, [sp, #40]	@ 0x28
 8009054:	f8d8 3000 	ldr.w	r3, [r8]
 8009058:	9005      	str	r0, [sp, #20]
 800905a:	3307      	adds	r3, #7
 800905c:	f023 0307 	bic.w	r3, r3, #7
 8009060:	f103 0208 	add.w	r2, r3, #8
 8009064:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009068:	f8d4 b000 	ldr.w	fp, [r4]
 800906c:	f8c8 2000 	str.w	r2, [r8]
 8009070:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009074:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009078:	9307      	str	r3, [sp, #28]
 800907a:	f8cd 8018 	str.w	r8, [sp, #24]
 800907e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009086:	4b9c      	ldr	r3, [pc, #624]	@ (80092f8 <_printf_float+0x2c8>)
 8009088:	f04f 32ff 	mov.w	r2, #4294967295
 800908c:	f7f7 fd5e 	bl	8000b4c <__aeabi_dcmpun>
 8009090:	bb70      	cbnz	r0, 80090f0 <_printf_float+0xc0>
 8009092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009096:	4b98      	ldr	r3, [pc, #608]	@ (80092f8 <_printf_float+0x2c8>)
 8009098:	f04f 32ff 	mov.w	r2, #4294967295
 800909c:	f7f7 fd38 	bl	8000b10 <__aeabi_dcmple>
 80090a0:	bb30      	cbnz	r0, 80090f0 <_printf_float+0xc0>
 80090a2:	2200      	movs	r2, #0
 80090a4:	2300      	movs	r3, #0
 80090a6:	4640      	mov	r0, r8
 80090a8:	4649      	mov	r1, r9
 80090aa:	f7f7 fd27 	bl	8000afc <__aeabi_dcmplt>
 80090ae:	b110      	cbz	r0, 80090b6 <_printf_float+0x86>
 80090b0:	232d      	movs	r3, #45	@ 0x2d
 80090b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090b6:	4a91      	ldr	r2, [pc, #580]	@ (80092fc <_printf_float+0x2cc>)
 80090b8:	4b91      	ldr	r3, [pc, #580]	@ (8009300 <_printf_float+0x2d0>)
 80090ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80090be:	bf8c      	ite	hi
 80090c0:	4690      	movhi	r8, r2
 80090c2:	4698      	movls	r8, r3
 80090c4:	2303      	movs	r3, #3
 80090c6:	6123      	str	r3, [r4, #16]
 80090c8:	f02b 0304 	bic.w	r3, fp, #4
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	f04f 0900 	mov.w	r9, #0
 80090d2:	9700      	str	r7, [sp, #0]
 80090d4:	4633      	mov	r3, r6
 80090d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80090d8:	4621      	mov	r1, r4
 80090da:	4628      	mov	r0, r5
 80090dc:	f000 f9d2 	bl	8009484 <_printf_common>
 80090e0:	3001      	adds	r0, #1
 80090e2:	f040 808d 	bne.w	8009200 <_printf_float+0x1d0>
 80090e6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ea:	b00d      	add	sp, #52	@ 0x34
 80090ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f0:	4642      	mov	r2, r8
 80090f2:	464b      	mov	r3, r9
 80090f4:	4640      	mov	r0, r8
 80090f6:	4649      	mov	r1, r9
 80090f8:	f7f7 fd28 	bl	8000b4c <__aeabi_dcmpun>
 80090fc:	b140      	cbz	r0, 8009110 <_printf_float+0xe0>
 80090fe:	464b      	mov	r3, r9
 8009100:	2b00      	cmp	r3, #0
 8009102:	bfbc      	itt	lt
 8009104:	232d      	movlt	r3, #45	@ 0x2d
 8009106:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800910a:	4a7e      	ldr	r2, [pc, #504]	@ (8009304 <_printf_float+0x2d4>)
 800910c:	4b7e      	ldr	r3, [pc, #504]	@ (8009308 <_printf_float+0x2d8>)
 800910e:	e7d4      	b.n	80090ba <_printf_float+0x8a>
 8009110:	6863      	ldr	r3, [r4, #4]
 8009112:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009116:	9206      	str	r2, [sp, #24]
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	d13b      	bne.n	8009194 <_printf_float+0x164>
 800911c:	2306      	movs	r3, #6
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009124:	2300      	movs	r3, #0
 8009126:	6022      	str	r2, [r4, #0]
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	ab0a      	add	r3, sp, #40	@ 0x28
 800912c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009130:	ab09      	add	r3, sp, #36	@ 0x24
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	6861      	ldr	r1, [r4, #4]
 8009136:	ec49 8b10 	vmov	d0, r8, r9
 800913a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800913e:	4628      	mov	r0, r5
 8009140:	f7ff fed6 	bl	8008ef0 <__cvt>
 8009144:	9b06      	ldr	r3, [sp, #24]
 8009146:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009148:	2b47      	cmp	r3, #71	@ 0x47
 800914a:	4680      	mov	r8, r0
 800914c:	d129      	bne.n	80091a2 <_printf_float+0x172>
 800914e:	1cc8      	adds	r0, r1, #3
 8009150:	db02      	blt.n	8009158 <_printf_float+0x128>
 8009152:	6863      	ldr	r3, [r4, #4]
 8009154:	4299      	cmp	r1, r3
 8009156:	dd41      	ble.n	80091dc <_printf_float+0x1ac>
 8009158:	f1aa 0a02 	sub.w	sl, sl, #2
 800915c:	fa5f fa8a 	uxtb.w	sl, sl
 8009160:	3901      	subs	r1, #1
 8009162:	4652      	mov	r2, sl
 8009164:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009168:	9109      	str	r1, [sp, #36]	@ 0x24
 800916a:	f7ff ff26 	bl	8008fba <__exponent>
 800916e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009170:	1813      	adds	r3, r2, r0
 8009172:	2a01      	cmp	r2, #1
 8009174:	4681      	mov	r9, r0
 8009176:	6123      	str	r3, [r4, #16]
 8009178:	dc02      	bgt.n	8009180 <_printf_float+0x150>
 800917a:	6822      	ldr	r2, [r4, #0]
 800917c:	07d2      	lsls	r2, r2, #31
 800917e:	d501      	bpl.n	8009184 <_printf_float+0x154>
 8009180:	3301      	adds	r3, #1
 8009182:	6123      	str	r3, [r4, #16]
 8009184:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009188:	2b00      	cmp	r3, #0
 800918a:	d0a2      	beq.n	80090d2 <_printf_float+0xa2>
 800918c:	232d      	movs	r3, #45	@ 0x2d
 800918e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009192:	e79e      	b.n	80090d2 <_printf_float+0xa2>
 8009194:	9a06      	ldr	r2, [sp, #24]
 8009196:	2a47      	cmp	r2, #71	@ 0x47
 8009198:	d1c2      	bne.n	8009120 <_printf_float+0xf0>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1c0      	bne.n	8009120 <_printf_float+0xf0>
 800919e:	2301      	movs	r3, #1
 80091a0:	e7bd      	b.n	800911e <_printf_float+0xee>
 80091a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80091a6:	d9db      	bls.n	8009160 <_printf_float+0x130>
 80091a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80091ac:	d118      	bne.n	80091e0 <_printf_float+0x1b0>
 80091ae:	2900      	cmp	r1, #0
 80091b0:	6863      	ldr	r3, [r4, #4]
 80091b2:	dd0b      	ble.n	80091cc <_printf_float+0x19c>
 80091b4:	6121      	str	r1, [r4, #16]
 80091b6:	b913      	cbnz	r3, 80091be <_printf_float+0x18e>
 80091b8:	6822      	ldr	r2, [r4, #0]
 80091ba:	07d0      	lsls	r0, r2, #31
 80091bc:	d502      	bpl.n	80091c4 <_printf_float+0x194>
 80091be:	3301      	adds	r3, #1
 80091c0:	440b      	add	r3, r1
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80091c6:	f04f 0900 	mov.w	r9, #0
 80091ca:	e7db      	b.n	8009184 <_printf_float+0x154>
 80091cc:	b913      	cbnz	r3, 80091d4 <_printf_float+0x1a4>
 80091ce:	6822      	ldr	r2, [r4, #0]
 80091d0:	07d2      	lsls	r2, r2, #31
 80091d2:	d501      	bpl.n	80091d8 <_printf_float+0x1a8>
 80091d4:	3302      	adds	r3, #2
 80091d6:	e7f4      	b.n	80091c2 <_printf_float+0x192>
 80091d8:	2301      	movs	r3, #1
 80091da:	e7f2      	b.n	80091c2 <_printf_float+0x192>
 80091dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80091e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091e2:	4299      	cmp	r1, r3
 80091e4:	db05      	blt.n	80091f2 <_printf_float+0x1c2>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	6121      	str	r1, [r4, #16]
 80091ea:	07d8      	lsls	r0, r3, #31
 80091ec:	d5ea      	bpl.n	80091c4 <_printf_float+0x194>
 80091ee:	1c4b      	adds	r3, r1, #1
 80091f0:	e7e7      	b.n	80091c2 <_printf_float+0x192>
 80091f2:	2900      	cmp	r1, #0
 80091f4:	bfd4      	ite	le
 80091f6:	f1c1 0202 	rsble	r2, r1, #2
 80091fa:	2201      	movgt	r2, #1
 80091fc:	4413      	add	r3, r2
 80091fe:	e7e0      	b.n	80091c2 <_printf_float+0x192>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	055a      	lsls	r2, r3, #21
 8009204:	d407      	bmi.n	8009216 <_printf_float+0x1e6>
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	4642      	mov	r2, r8
 800920a:	4631      	mov	r1, r6
 800920c:	4628      	mov	r0, r5
 800920e:	47b8      	blx	r7
 8009210:	3001      	adds	r0, #1
 8009212:	d12b      	bne.n	800926c <_printf_float+0x23c>
 8009214:	e767      	b.n	80090e6 <_printf_float+0xb6>
 8009216:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800921a:	f240 80dd 	bls.w	80093d8 <_printf_float+0x3a8>
 800921e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009222:	2200      	movs	r2, #0
 8009224:	2300      	movs	r3, #0
 8009226:	f7f7 fc5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800922a:	2800      	cmp	r0, #0
 800922c:	d033      	beq.n	8009296 <_printf_float+0x266>
 800922e:	4a37      	ldr	r2, [pc, #220]	@ (800930c <_printf_float+0x2dc>)
 8009230:	2301      	movs	r3, #1
 8009232:	4631      	mov	r1, r6
 8009234:	4628      	mov	r0, r5
 8009236:	47b8      	blx	r7
 8009238:	3001      	adds	r0, #1
 800923a:	f43f af54 	beq.w	80090e6 <_printf_float+0xb6>
 800923e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009242:	4543      	cmp	r3, r8
 8009244:	db02      	blt.n	800924c <_printf_float+0x21c>
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	07d8      	lsls	r0, r3, #31
 800924a:	d50f      	bpl.n	800926c <_printf_float+0x23c>
 800924c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009250:	4631      	mov	r1, r6
 8009252:	4628      	mov	r0, r5
 8009254:	47b8      	blx	r7
 8009256:	3001      	adds	r0, #1
 8009258:	f43f af45 	beq.w	80090e6 <_printf_float+0xb6>
 800925c:	f04f 0900 	mov.w	r9, #0
 8009260:	f108 38ff 	add.w	r8, r8, #4294967295
 8009264:	f104 0a1a 	add.w	sl, r4, #26
 8009268:	45c8      	cmp	r8, r9
 800926a:	dc09      	bgt.n	8009280 <_printf_float+0x250>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	079b      	lsls	r3, r3, #30
 8009270:	f100 8103 	bmi.w	800947a <_printf_float+0x44a>
 8009274:	68e0      	ldr	r0, [r4, #12]
 8009276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009278:	4298      	cmp	r0, r3
 800927a:	bfb8      	it	lt
 800927c:	4618      	movlt	r0, r3
 800927e:	e734      	b.n	80090ea <_printf_float+0xba>
 8009280:	2301      	movs	r3, #1
 8009282:	4652      	mov	r2, sl
 8009284:	4631      	mov	r1, r6
 8009286:	4628      	mov	r0, r5
 8009288:	47b8      	blx	r7
 800928a:	3001      	adds	r0, #1
 800928c:	f43f af2b 	beq.w	80090e6 <_printf_float+0xb6>
 8009290:	f109 0901 	add.w	r9, r9, #1
 8009294:	e7e8      	b.n	8009268 <_printf_float+0x238>
 8009296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009298:	2b00      	cmp	r3, #0
 800929a:	dc39      	bgt.n	8009310 <_printf_float+0x2e0>
 800929c:	4a1b      	ldr	r2, [pc, #108]	@ (800930c <_printf_float+0x2dc>)
 800929e:	2301      	movs	r3, #1
 80092a0:	4631      	mov	r1, r6
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b8      	blx	r7
 80092a6:	3001      	adds	r0, #1
 80092a8:	f43f af1d 	beq.w	80090e6 <_printf_float+0xb6>
 80092ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80092b0:	ea59 0303 	orrs.w	r3, r9, r3
 80092b4:	d102      	bne.n	80092bc <_printf_float+0x28c>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	07d9      	lsls	r1, r3, #31
 80092ba:	d5d7      	bpl.n	800926c <_printf_float+0x23c>
 80092bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092c0:	4631      	mov	r1, r6
 80092c2:	4628      	mov	r0, r5
 80092c4:	47b8      	blx	r7
 80092c6:	3001      	adds	r0, #1
 80092c8:	f43f af0d 	beq.w	80090e6 <_printf_float+0xb6>
 80092cc:	f04f 0a00 	mov.w	sl, #0
 80092d0:	f104 0b1a 	add.w	fp, r4, #26
 80092d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d6:	425b      	negs	r3, r3
 80092d8:	4553      	cmp	r3, sl
 80092da:	dc01      	bgt.n	80092e0 <_printf_float+0x2b0>
 80092dc:	464b      	mov	r3, r9
 80092de:	e793      	b.n	8009208 <_printf_float+0x1d8>
 80092e0:	2301      	movs	r3, #1
 80092e2:	465a      	mov	r2, fp
 80092e4:	4631      	mov	r1, r6
 80092e6:	4628      	mov	r0, r5
 80092e8:	47b8      	blx	r7
 80092ea:	3001      	adds	r0, #1
 80092ec:	f43f aefb 	beq.w	80090e6 <_printf_float+0xb6>
 80092f0:	f10a 0a01 	add.w	sl, sl, #1
 80092f4:	e7ee      	b.n	80092d4 <_printf_float+0x2a4>
 80092f6:	bf00      	nop
 80092f8:	7fefffff 	.word	0x7fefffff
 80092fc:	0800d322 	.word	0x0800d322
 8009300:	0800d31e 	.word	0x0800d31e
 8009304:	0800d32a 	.word	0x0800d32a
 8009308:	0800d326 	.word	0x0800d326
 800930c:	0800d32e 	.word	0x0800d32e
 8009310:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009312:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009316:	4553      	cmp	r3, sl
 8009318:	bfa8      	it	ge
 800931a:	4653      	movge	r3, sl
 800931c:	2b00      	cmp	r3, #0
 800931e:	4699      	mov	r9, r3
 8009320:	dc36      	bgt.n	8009390 <_printf_float+0x360>
 8009322:	f04f 0b00 	mov.w	fp, #0
 8009326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800932a:	f104 021a 	add.w	r2, r4, #26
 800932e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009330:	9306      	str	r3, [sp, #24]
 8009332:	eba3 0309 	sub.w	r3, r3, r9
 8009336:	455b      	cmp	r3, fp
 8009338:	dc31      	bgt.n	800939e <_printf_float+0x36e>
 800933a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800933c:	459a      	cmp	sl, r3
 800933e:	dc3a      	bgt.n	80093b6 <_printf_float+0x386>
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	07da      	lsls	r2, r3, #31
 8009344:	d437      	bmi.n	80093b6 <_printf_float+0x386>
 8009346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009348:	ebaa 0903 	sub.w	r9, sl, r3
 800934c:	9b06      	ldr	r3, [sp, #24]
 800934e:	ebaa 0303 	sub.w	r3, sl, r3
 8009352:	4599      	cmp	r9, r3
 8009354:	bfa8      	it	ge
 8009356:	4699      	movge	r9, r3
 8009358:	f1b9 0f00 	cmp.w	r9, #0
 800935c:	dc33      	bgt.n	80093c6 <_printf_float+0x396>
 800935e:	f04f 0800 	mov.w	r8, #0
 8009362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009366:	f104 0b1a 	add.w	fp, r4, #26
 800936a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800936c:	ebaa 0303 	sub.w	r3, sl, r3
 8009370:	eba3 0309 	sub.w	r3, r3, r9
 8009374:	4543      	cmp	r3, r8
 8009376:	f77f af79 	ble.w	800926c <_printf_float+0x23c>
 800937a:	2301      	movs	r3, #1
 800937c:	465a      	mov	r2, fp
 800937e:	4631      	mov	r1, r6
 8009380:	4628      	mov	r0, r5
 8009382:	47b8      	blx	r7
 8009384:	3001      	adds	r0, #1
 8009386:	f43f aeae 	beq.w	80090e6 <_printf_float+0xb6>
 800938a:	f108 0801 	add.w	r8, r8, #1
 800938e:	e7ec      	b.n	800936a <_printf_float+0x33a>
 8009390:	4642      	mov	r2, r8
 8009392:	4631      	mov	r1, r6
 8009394:	4628      	mov	r0, r5
 8009396:	47b8      	blx	r7
 8009398:	3001      	adds	r0, #1
 800939a:	d1c2      	bne.n	8009322 <_printf_float+0x2f2>
 800939c:	e6a3      	b.n	80090e6 <_printf_float+0xb6>
 800939e:	2301      	movs	r3, #1
 80093a0:	4631      	mov	r1, r6
 80093a2:	4628      	mov	r0, r5
 80093a4:	9206      	str	r2, [sp, #24]
 80093a6:	47b8      	blx	r7
 80093a8:	3001      	adds	r0, #1
 80093aa:	f43f ae9c 	beq.w	80090e6 <_printf_float+0xb6>
 80093ae:	9a06      	ldr	r2, [sp, #24]
 80093b0:	f10b 0b01 	add.w	fp, fp, #1
 80093b4:	e7bb      	b.n	800932e <_printf_float+0x2fe>
 80093b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093ba:	4631      	mov	r1, r6
 80093bc:	4628      	mov	r0, r5
 80093be:	47b8      	blx	r7
 80093c0:	3001      	adds	r0, #1
 80093c2:	d1c0      	bne.n	8009346 <_printf_float+0x316>
 80093c4:	e68f      	b.n	80090e6 <_printf_float+0xb6>
 80093c6:	9a06      	ldr	r2, [sp, #24]
 80093c8:	464b      	mov	r3, r9
 80093ca:	4442      	add	r2, r8
 80093cc:	4631      	mov	r1, r6
 80093ce:	4628      	mov	r0, r5
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	d1c3      	bne.n	800935e <_printf_float+0x32e>
 80093d6:	e686      	b.n	80090e6 <_printf_float+0xb6>
 80093d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80093dc:	f1ba 0f01 	cmp.w	sl, #1
 80093e0:	dc01      	bgt.n	80093e6 <_printf_float+0x3b6>
 80093e2:	07db      	lsls	r3, r3, #31
 80093e4:	d536      	bpl.n	8009454 <_printf_float+0x424>
 80093e6:	2301      	movs	r3, #1
 80093e8:	4642      	mov	r2, r8
 80093ea:	4631      	mov	r1, r6
 80093ec:	4628      	mov	r0, r5
 80093ee:	47b8      	blx	r7
 80093f0:	3001      	adds	r0, #1
 80093f2:	f43f ae78 	beq.w	80090e6 <_printf_float+0xb6>
 80093f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093fa:	4631      	mov	r1, r6
 80093fc:	4628      	mov	r0, r5
 80093fe:	47b8      	blx	r7
 8009400:	3001      	adds	r0, #1
 8009402:	f43f ae70 	beq.w	80090e6 <_printf_float+0xb6>
 8009406:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800940a:	2200      	movs	r2, #0
 800940c:	2300      	movs	r3, #0
 800940e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009412:	f7f7 fb69 	bl	8000ae8 <__aeabi_dcmpeq>
 8009416:	b9c0      	cbnz	r0, 800944a <_printf_float+0x41a>
 8009418:	4653      	mov	r3, sl
 800941a:	f108 0201 	add.w	r2, r8, #1
 800941e:	4631      	mov	r1, r6
 8009420:	4628      	mov	r0, r5
 8009422:	47b8      	blx	r7
 8009424:	3001      	adds	r0, #1
 8009426:	d10c      	bne.n	8009442 <_printf_float+0x412>
 8009428:	e65d      	b.n	80090e6 <_printf_float+0xb6>
 800942a:	2301      	movs	r3, #1
 800942c:	465a      	mov	r2, fp
 800942e:	4631      	mov	r1, r6
 8009430:	4628      	mov	r0, r5
 8009432:	47b8      	blx	r7
 8009434:	3001      	adds	r0, #1
 8009436:	f43f ae56 	beq.w	80090e6 <_printf_float+0xb6>
 800943a:	f108 0801 	add.w	r8, r8, #1
 800943e:	45d0      	cmp	r8, sl
 8009440:	dbf3      	blt.n	800942a <_printf_float+0x3fa>
 8009442:	464b      	mov	r3, r9
 8009444:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009448:	e6df      	b.n	800920a <_printf_float+0x1da>
 800944a:	f04f 0800 	mov.w	r8, #0
 800944e:	f104 0b1a 	add.w	fp, r4, #26
 8009452:	e7f4      	b.n	800943e <_printf_float+0x40e>
 8009454:	2301      	movs	r3, #1
 8009456:	4642      	mov	r2, r8
 8009458:	e7e1      	b.n	800941e <_printf_float+0x3ee>
 800945a:	2301      	movs	r3, #1
 800945c:	464a      	mov	r2, r9
 800945e:	4631      	mov	r1, r6
 8009460:	4628      	mov	r0, r5
 8009462:	47b8      	blx	r7
 8009464:	3001      	adds	r0, #1
 8009466:	f43f ae3e 	beq.w	80090e6 <_printf_float+0xb6>
 800946a:	f108 0801 	add.w	r8, r8, #1
 800946e:	68e3      	ldr	r3, [r4, #12]
 8009470:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009472:	1a5b      	subs	r3, r3, r1
 8009474:	4543      	cmp	r3, r8
 8009476:	dcf0      	bgt.n	800945a <_printf_float+0x42a>
 8009478:	e6fc      	b.n	8009274 <_printf_float+0x244>
 800947a:	f04f 0800 	mov.w	r8, #0
 800947e:	f104 0919 	add.w	r9, r4, #25
 8009482:	e7f4      	b.n	800946e <_printf_float+0x43e>

08009484 <_printf_common>:
 8009484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009488:	4616      	mov	r6, r2
 800948a:	4698      	mov	r8, r3
 800948c:	688a      	ldr	r2, [r1, #8]
 800948e:	690b      	ldr	r3, [r1, #16]
 8009490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009494:	4293      	cmp	r3, r2
 8009496:	bfb8      	it	lt
 8009498:	4613      	movlt	r3, r2
 800949a:	6033      	str	r3, [r6, #0]
 800949c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094a0:	4607      	mov	r7, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	b10a      	cbz	r2, 80094aa <_printf_common+0x26>
 80094a6:	3301      	adds	r3, #1
 80094a8:	6033      	str	r3, [r6, #0]
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	0699      	lsls	r1, r3, #26
 80094ae:	bf42      	ittt	mi
 80094b0:	6833      	ldrmi	r3, [r6, #0]
 80094b2:	3302      	addmi	r3, #2
 80094b4:	6033      	strmi	r3, [r6, #0]
 80094b6:	6825      	ldr	r5, [r4, #0]
 80094b8:	f015 0506 	ands.w	r5, r5, #6
 80094bc:	d106      	bne.n	80094cc <_printf_common+0x48>
 80094be:	f104 0a19 	add.w	sl, r4, #25
 80094c2:	68e3      	ldr	r3, [r4, #12]
 80094c4:	6832      	ldr	r2, [r6, #0]
 80094c6:	1a9b      	subs	r3, r3, r2
 80094c8:	42ab      	cmp	r3, r5
 80094ca:	dc26      	bgt.n	800951a <_printf_common+0x96>
 80094cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094d0:	6822      	ldr	r2, [r4, #0]
 80094d2:	3b00      	subs	r3, #0
 80094d4:	bf18      	it	ne
 80094d6:	2301      	movne	r3, #1
 80094d8:	0692      	lsls	r2, r2, #26
 80094da:	d42b      	bmi.n	8009534 <_printf_common+0xb0>
 80094dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094e0:	4641      	mov	r1, r8
 80094e2:	4638      	mov	r0, r7
 80094e4:	47c8      	blx	r9
 80094e6:	3001      	adds	r0, #1
 80094e8:	d01e      	beq.n	8009528 <_printf_common+0xa4>
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	6922      	ldr	r2, [r4, #16]
 80094ee:	f003 0306 	and.w	r3, r3, #6
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	bf02      	ittt	eq
 80094f6:	68e5      	ldreq	r5, [r4, #12]
 80094f8:	6833      	ldreq	r3, [r6, #0]
 80094fa:	1aed      	subeq	r5, r5, r3
 80094fc:	68a3      	ldr	r3, [r4, #8]
 80094fe:	bf0c      	ite	eq
 8009500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009504:	2500      	movne	r5, #0
 8009506:	4293      	cmp	r3, r2
 8009508:	bfc4      	itt	gt
 800950a:	1a9b      	subgt	r3, r3, r2
 800950c:	18ed      	addgt	r5, r5, r3
 800950e:	2600      	movs	r6, #0
 8009510:	341a      	adds	r4, #26
 8009512:	42b5      	cmp	r5, r6
 8009514:	d11a      	bne.n	800954c <_printf_common+0xc8>
 8009516:	2000      	movs	r0, #0
 8009518:	e008      	b.n	800952c <_printf_common+0xa8>
 800951a:	2301      	movs	r3, #1
 800951c:	4652      	mov	r2, sl
 800951e:	4641      	mov	r1, r8
 8009520:	4638      	mov	r0, r7
 8009522:	47c8      	blx	r9
 8009524:	3001      	adds	r0, #1
 8009526:	d103      	bne.n	8009530 <_printf_common+0xac>
 8009528:	f04f 30ff 	mov.w	r0, #4294967295
 800952c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009530:	3501      	adds	r5, #1
 8009532:	e7c6      	b.n	80094c2 <_printf_common+0x3e>
 8009534:	18e1      	adds	r1, r4, r3
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	2030      	movs	r0, #48	@ 0x30
 800953a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800953e:	4422      	add	r2, r4
 8009540:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009548:	3302      	adds	r3, #2
 800954a:	e7c7      	b.n	80094dc <_printf_common+0x58>
 800954c:	2301      	movs	r3, #1
 800954e:	4622      	mov	r2, r4
 8009550:	4641      	mov	r1, r8
 8009552:	4638      	mov	r0, r7
 8009554:	47c8      	blx	r9
 8009556:	3001      	adds	r0, #1
 8009558:	d0e6      	beq.n	8009528 <_printf_common+0xa4>
 800955a:	3601      	adds	r6, #1
 800955c:	e7d9      	b.n	8009512 <_printf_common+0x8e>
	...

08009560 <_printf_i>:
 8009560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009564:	7e0f      	ldrb	r7, [r1, #24]
 8009566:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009568:	2f78      	cmp	r7, #120	@ 0x78
 800956a:	4691      	mov	r9, r2
 800956c:	4680      	mov	r8, r0
 800956e:	460c      	mov	r4, r1
 8009570:	469a      	mov	sl, r3
 8009572:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009576:	d807      	bhi.n	8009588 <_printf_i+0x28>
 8009578:	2f62      	cmp	r7, #98	@ 0x62
 800957a:	d80a      	bhi.n	8009592 <_printf_i+0x32>
 800957c:	2f00      	cmp	r7, #0
 800957e:	f000 80d1 	beq.w	8009724 <_printf_i+0x1c4>
 8009582:	2f58      	cmp	r7, #88	@ 0x58
 8009584:	f000 80b8 	beq.w	80096f8 <_printf_i+0x198>
 8009588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800958c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009590:	e03a      	b.n	8009608 <_printf_i+0xa8>
 8009592:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009596:	2b15      	cmp	r3, #21
 8009598:	d8f6      	bhi.n	8009588 <_printf_i+0x28>
 800959a:	a101      	add	r1, pc, #4	@ (adr r1, 80095a0 <_printf_i+0x40>)
 800959c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095a0:	080095f9 	.word	0x080095f9
 80095a4:	0800960d 	.word	0x0800960d
 80095a8:	08009589 	.word	0x08009589
 80095ac:	08009589 	.word	0x08009589
 80095b0:	08009589 	.word	0x08009589
 80095b4:	08009589 	.word	0x08009589
 80095b8:	0800960d 	.word	0x0800960d
 80095bc:	08009589 	.word	0x08009589
 80095c0:	08009589 	.word	0x08009589
 80095c4:	08009589 	.word	0x08009589
 80095c8:	08009589 	.word	0x08009589
 80095cc:	0800970b 	.word	0x0800970b
 80095d0:	08009637 	.word	0x08009637
 80095d4:	080096c5 	.word	0x080096c5
 80095d8:	08009589 	.word	0x08009589
 80095dc:	08009589 	.word	0x08009589
 80095e0:	0800972d 	.word	0x0800972d
 80095e4:	08009589 	.word	0x08009589
 80095e8:	08009637 	.word	0x08009637
 80095ec:	08009589 	.word	0x08009589
 80095f0:	08009589 	.word	0x08009589
 80095f4:	080096cd 	.word	0x080096cd
 80095f8:	6833      	ldr	r3, [r6, #0]
 80095fa:	1d1a      	adds	r2, r3, #4
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6032      	str	r2, [r6, #0]
 8009600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009604:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009608:	2301      	movs	r3, #1
 800960a:	e09c      	b.n	8009746 <_printf_i+0x1e6>
 800960c:	6833      	ldr	r3, [r6, #0]
 800960e:	6820      	ldr	r0, [r4, #0]
 8009610:	1d19      	adds	r1, r3, #4
 8009612:	6031      	str	r1, [r6, #0]
 8009614:	0606      	lsls	r6, r0, #24
 8009616:	d501      	bpl.n	800961c <_printf_i+0xbc>
 8009618:	681d      	ldr	r5, [r3, #0]
 800961a:	e003      	b.n	8009624 <_printf_i+0xc4>
 800961c:	0645      	lsls	r5, r0, #25
 800961e:	d5fb      	bpl.n	8009618 <_printf_i+0xb8>
 8009620:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009624:	2d00      	cmp	r5, #0
 8009626:	da03      	bge.n	8009630 <_printf_i+0xd0>
 8009628:	232d      	movs	r3, #45	@ 0x2d
 800962a:	426d      	negs	r5, r5
 800962c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009630:	4858      	ldr	r0, [pc, #352]	@ (8009794 <_printf_i+0x234>)
 8009632:	230a      	movs	r3, #10
 8009634:	e011      	b.n	800965a <_printf_i+0xfa>
 8009636:	6821      	ldr	r1, [r4, #0]
 8009638:	6833      	ldr	r3, [r6, #0]
 800963a:	0608      	lsls	r0, r1, #24
 800963c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009640:	d402      	bmi.n	8009648 <_printf_i+0xe8>
 8009642:	0649      	lsls	r1, r1, #25
 8009644:	bf48      	it	mi
 8009646:	b2ad      	uxthmi	r5, r5
 8009648:	2f6f      	cmp	r7, #111	@ 0x6f
 800964a:	4852      	ldr	r0, [pc, #328]	@ (8009794 <_printf_i+0x234>)
 800964c:	6033      	str	r3, [r6, #0]
 800964e:	bf14      	ite	ne
 8009650:	230a      	movne	r3, #10
 8009652:	2308      	moveq	r3, #8
 8009654:	2100      	movs	r1, #0
 8009656:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800965a:	6866      	ldr	r6, [r4, #4]
 800965c:	60a6      	str	r6, [r4, #8]
 800965e:	2e00      	cmp	r6, #0
 8009660:	db05      	blt.n	800966e <_printf_i+0x10e>
 8009662:	6821      	ldr	r1, [r4, #0]
 8009664:	432e      	orrs	r6, r5
 8009666:	f021 0104 	bic.w	r1, r1, #4
 800966a:	6021      	str	r1, [r4, #0]
 800966c:	d04b      	beq.n	8009706 <_printf_i+0x1a6>
 800966e:	4616      	mov	r6, r2
 8009670:	fbb5 f1f3 	udiv	r1, r5, r3
 8009674:	fb03 5711 	mls	r7, r3, r1, r5
 8009678:	5dc7      	ldrb	r7, [r0, r7]
 800967a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800967e:	462f      	mov	r7, r5
 8009680:	42bb      	cmp	r3, r7
 8009682:	460d      	mov	r5, r1
 8009684:	d9f4      	bls.n	8009670 <_printf_i+0x110>
 8009686:	2b08      	cmp	r3, #8
 8009688:	d10b      	bne.n	80096a2 <_printf_i+0x142>
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	07df      	lsls	r7, r3, #31
 800968e:	d508      	bpl.n	80096a2 <_printf_i+0x142>
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	6861      	ldr	r1, [r4, #4]
 8009694:	4299      	cmp	r1, r3
 8009696:	bfde      	ittt	le
 8009698:	2330      	movle	r3, #48	@ 0x30
 800969a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800969e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096a2:	1b92      	subs	r2, r2, r6
 80096a4:	6122      	str	r2, [r4, #16]
 80096a6:	f8cd a000 	str.w	sl, [sp]
 80096aa:	464b      	mov	r3, r9
 80096ac:	aa03      	add	r2, sp, #12
 80096ae:	4621      	mov	r1, r4
 80096b0:	4640      	mov	r0, r8
 80096b2:	f7ff fee7 	bl	8009484 <_printf_common>
 80096b6:	3001      	adds	r0, #1
 80096b8:	d14a      	bne.n	8009750 <_printf_i+0x1f0>
 80096ba:	f04f 30ff 	mov.w	r0, #4294967295
 80096be:	b004      	add	sp, #16
 80096c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	f043 0320 	orr.w	r3, r3, #32
 80096ca:	6023      	str	r3, [r4, #0]
 80096cc:	4832      	ldr	r0, [pc, #200]	@ (8009798 <_printf_i+0x238>)
 80096ce:	2778      	movs	r7, #120	@ 0x78
 80096d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	6831      	ldr	r1, [r6, #0]
 80096d8:	061f      	lsls	r7, r3, #24
 80096da:	f851 5b04 	ldr.w	r5, [r1], #4
 80096de:	d402      	bmi.n	80096e6 <_printf_i+0x186>
 80096e0:	065f      	lsls	r7, r3, #25
 80096e2:	bf48      	it	mi
 80096e4:	b2ad      	uxthmi	r5, r5
 80096e6:	6031      	str	r1, [r6, #0]
 80096e8:	07d9      	lsls	r1, r3, #31
 80096ea:	bf44      	itt	mi
 80096ec:	f043 0320 	orrmi.w	r3, r3, #32
 80096f0:	6023      	strmi	r3, [r4, #0]
 80096f2:	b11d      	cbz	r5, 80096fc <_printf_i+0x19c>
 80096f4:	2310      	movs	r3, #16
 80096f6:	e7ad      	b.n	8009654 <_printf_i+0xf4>
 80096f8:	4826      	ldr	r0, [pc, #152]	@ (8009794 <_printf_i+0x234>)
 80096fa:	e7e9      	b.n	80096d0 <_printf_i+0x170>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	f023 0320 	bic.w	r3, r3, #32
 8009702:	6023      	str	r3, [r4, #0]
 8009704:	e7f6      	b.n	80096f4 <_printf_i+0x194>
 8009706:	4616      	mov	r6, r2
 8009708:	e7bd      	b.n	8009686 <_printf_i+0x126>
 800970a:	6833      	ldr	r3, [r6, #0]
 800970c:	6825      	ldr	r5, [r4, #0]
 800970e:	6961      	ldr	r1, [r4, #20]
 8009710:	1d18      	adds	r0, r3, #4
 8009712:	6030      	str	r0, [r6, #0]
 8009714:	062e      	lsls	r6, r5, #24
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	d501      	bpl.n	800971e <_printf_i+0x1be>
 800971a:	6019      	str	r1, [r3, #0]
 800971c:	e002      	b.n	8009724 <_printf_i+0x1c4>
 800971e:	0668      	lsls	r0, r5, #25
 8009720:	d5fb      	bpl.n	800971a <_printf_i+0x1ba>
 8009722:	8019      	strh	r1, [r3, #0]
 8009724:	2300      	movs	r3, #0
 8009726:	6123      	str	r3, [r4, #16]
 8009728:	4616      	mov	r6, r2
 800972a:	e7bc      	b.n	80096a6 <_printf_i+0x146>
 800972c:	6833      	ldr	r3, [r6, #0]
 800972e:	1d1a      	adds	r2, r3, #4
 8009730:	6032      	str	r2, [r6, #0]
 8009732:	681e      	ldr	r6, [r3, #0]
 8009734:	6862      	ldr	r2, [r4, #4]
 8009736:	2100      	movs	r1, #0
 8009738:	4630      	mov	r0, r6
 800973a:	f7f6 fd59 	bl	80001f0 <memchr>
 800973e:	b108      	cbz	r0, 8009744 <_printf_i+0x1e4>
 8009740:	1b80      	subs	r0, r0, r6
 8009742:	6060      	str	r0, [r4, #4]
 8009744:	6863      	ldr	r3, [r4, #4]
 8009746:	6123      	str	r3, [r4, #16]
 8009748:	2300      	movs	r3, #0
 800974a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800974e:	e7aa      	b.n	80096a6 <_printf_i+0x146>
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	4632      	mov	r2, r6
 8009754:	4649      	mov	r1, r9
 8009756:	4640      	mov	r0, r8
 8009758:	47d0      	blx	sl
 800975a:	3001      	adds	r0, #1
 800975c:	d0ad      	beq.n	80096ba <_printf_i+0x15a>
 800975e:	6823      	ldr	r3, [r4, #0]
 8009760:	079b      	lsls	r3, r3, #30
 8009762:	d413      	bmi.n	800978c <_printf_i+0x22c>
 8009764:	68e0      	ldr	r0, [r4, #12]
 8009766:	9b03      	ldr	r3, [sp, #12]
 8009768:	4298      	cmp	r0, r3
 800976a:	bfb8      	it	lt
 800976c:	4618      	movlt	r0, r3
 800976e:	e7a6      	b.n	80096be <_printf_i+0x15e>
 8009770:	2301      	movs	r3, #1
 8009772:	4632      	mov	r2, r6
 8009774:	4649      	mov	r1, r9
 8009776:	4640      	mov	r0, r8
 8009778:	47d0      	blx	sl
 800977a:	3001      	adds	r0, #1
 800977c:	d09d      	beq.n	80096ba <_printf_i+0x15a>
 800977e:	3501      	adds	r5, #1
 8009780:	68e3      	ldr	r3, [r4, #12]
 8009782:	9903      	ldr	r1, [sp, #12]
 8009784:	1a5b      	subs	r3, r3, r1
 8009786:	42ab      	cmp	r3, r5
 8009788:	dcf2      	bgt.n	8009770 <_printf_i+0x210>
 800978a:	e7eb      	b.n	8009764 <_printf_i+0x204>
 800978c:	2500      	movs	r5, #0
 800978e:	f104 0619 	add.w	r6, r4, #25
 8009792:	e7f5      	b.n	8009780 <_printf_i+0x220>
 8009794:	0800d330 	.word	0x0800d330
 8009798:	0800d341 	.word	0x0800d341

0800979c <std>:
 800979c:	2300      	movs	r3, #0
 800979e:	b510      	push	{r4, lr}
 80097a0:	4604      	mov	r4, r0
 80097a2:	e9c0 3300 	strd	r3, r3, [r0]
 80097a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097aa:	6083      	str	r3, [r0, #8]
 80097ac:	8181      	strh	r1, [r0, #12]
 80097ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80097b0:	81c2      	strh	r2, [r0, #14]
 80097b2:	6183      	str	r3, [r0, #24]
 80097b4:	4619      	mov	r1, r3
 80097b6:	2208      	movs	r2, #8
 80097b8:	305c      	adds	r0, #92	@ 0x5c
 80097ba:	f000 f916 	bl	80099ea <memset>
 80097be:	4b0d      	ldr	r3, [pc, #52]	@ (80097f4 <std+0x58>)
 80097c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80097c2:	4b0d      	ldr	r3, [pc, #52]	@ (80097f8 <std+0x5c>)
 80097c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097c6:	4b0d      	ldr	r3, [pc, #52]	@ (80097fc <std+0x60>)
 80097c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009800 <std+0x64>)
 80097cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80097ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <std+0x68>)
 80097d0:	6224      	str	r4, [r4, #32]
 80097d2:	429c      	cmp	r4, r3
 80097d4:	d006      	beq.n	80097e4 <std+0x48>
 80097d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097da:	4294      	cmp	r4, r2
 80097dc:	d002      	beq.n	80097e4 <std+0x48>
 80097de:	33d0      	adds	r3, #208	@ 0xd0
 80097e0:	429c      	cmp	r4, r3
 80097e2:	d105      	bne.n	80097f0 <std+0x54>
 80097e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ec:	f000 ba46 	b.w	8009c7c <__retarget_lock_init_recursive>
 80097f0:	bd10      	pop	{r4, pc}
 80097f2:	bf00      	nop
 80097f4:	08009965 	.word	0x08009965
 80097f8:	08009987 	.word	0x08009987
 80097fc:	080099bf 	.word	0x080099bf
 8009800:	080099e3 	.word	0x080099e3
 8009804:	2000594c 	.word	0x2000594c

08009808 <stdio_exit_handler>:
 8009808:	4a02      	ldr	r2, [pc, #8]	@ (8009814 <stdio_exit_handler+0xc>)
 800980a:	4903      	ldr	r1, [pc, #12]	@ (8009818 <stdio_exit_handler+0x10>)
 800980c:	4803      	ldr	r0, [pc, #12]	@ (800981c <stdio_exit_handler+0x14>)
 800980e:	f000 b869 	b.w	80098e4 <_fwalk_sglue>
 8009812:	bf00      	nop
 8009814:	2000027c 	.word	0x2000027c
 8009818:	0800bf5d 	.word	0x0800bf5d
 800981c:	200003f8 	.word	0x200003f8

08009820 <cleanup_stdio>:
 8009820:	6841      	ldr	r1, [r0, #4]
 8009822:	4b0c      	ldr	r3, [pc, #48]	@ (8009854 <cleanup_stdio+0x34>)
 8009824:	4299      	cmp	r1, r3
 8009826:	b510      	push	{r4, lr}
 8009828:	4604      	mov	r4, r0
 800982a:	d001      	beq.n	8009830 <cleanup_stdio+0x10>
 800982c:	f002 fb96 	bl	800bf5c <_fflush_r>
 8009830:	68a1      	ldr	r1, [r4, #8]
 8009832:	4b09      	ldr	r3, [pc, #36]	@ (8009858 <cleanup_stdio+0x38>)
 8009834:	4299      	cmp	r1, r3
 8009836:	d002      	beq.n	800983e <cleanup_stdio+0x1e>
 8009838:	4620      	mov	r0, r4
 800983a:	f002 fb8f 	bl	800bf5c <_fflush_r>
 800983e:	68e1      	ldr	r1, [r4, #12]
 8009840:	4b06      	ldr	r3, [pc, #24]	@ (800985c <cleanup_stdio+0x3c>)
 8009842:	4299      	cmp	r1, r3
 8009844:	d004      	beq.n	8009850 <cleanup_stdio+0x30>
 8009846:	4620      	mov	r0, r4
 8009848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800984c:	f002 bb86 	b.w	800bf5c <_fflush_r>
 8009850:	bd10      	pop	{r4, pc}
 8009852:	bf00      	nop
 8009854:	2000594c 	.word	0x2000594c
 8009858:	200059b4 	.word	0x200059b4
 800985c:	20005a1c 	.word	0x20005a1c

08009860 <global_stdio_init.part.0>:
 8009860:	b510      	push	{r4, lr}
 8009862:	4b0b      	ldr	r3, [pc, #44]	@ (8009890 <global_stdio_init.part.0+0x30>)
 8009864:	4c0b      	ldr	r4, [pc, #44]	@ (8009894 <global_stdio_init.part.0+0x34>)
 8009866:	4a0c      	ldr	r2, [pc, #48]	@ (8009898 <global_stdio_init.part.0+0x38>)
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	4620      	mov	r0, r4
 800986c:	2200      	movs	r2, #0
 800986e:	2104      	movs	r1, #4
 8009870:	f7ff ff94 	bl	800979c <std>
 8009874:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009878:	2201      	movs	r2, #1
 800987a:	2109      	movs	r1, #9
 800987c:	f7ff ff8e 	bl	800979c <std>
 8009880:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009884:	2202      	movs	r2, #2
 8009886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800988a:	2112      	movs	r1, #18
 800988c:	f7ff bf86 	b.w	800979c <std>
 8009890:	20005a84 	.word	0x20005a84
 8009894:	2000594c 	.word	0x2000594c
 8009898:	08009809 	.word	0x08009809

0800989c <__sfp_lock_acquire>:
 800989c:	4801      	ldr	r0, [pc, #4]	@ (80098a4 <__sfp_lock_acquire+0x8>)
 800989e:	f000 b9ee 	b.w	8009c7e <__retarget_lock_acquire_recursive>
 80098a2:	bf00      	nop
 80098a4:	20005a8d 	.word	0x20005a8d

080098a8 <__sfp_lock_release>:
 80098a8:	4801      	ldr	r0, [pc, #4]	@ (80098b0 <__sfp_lock_release+0x8>)
 80098aa:	f000 b9e9 	b.w	8009c80 <__retarget_lock_release_recursive>
 80098ae:	bf00      	nop
 80098b0:	20005a8d 	.word	0x20005a8d

080098b4 <__sinit>:
 80098b4:	b510      	push	{r4, lr}
 80098b6:	4604      	mov	r4, r0
 80098b8:	f7ff fff0 	bl	800989c <__sfp_lock_acquire>
 80098bc:	6a23      	ldr	r3, [r4, #32]
 80098be:	b11b      	cbz	r3, 80098c8 <__sinit+0x14>
 80098c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c4:	f7ff bff0 	b.w	80098a8 <__sfp_lock_release>
 80098c8:	4b04      	ldr	r3, [pc, #16]	@ (80098dc <__sinit+0x28>)
 80098ca:	6223      	str	r3, [r4, #32]
 80098cc:	4b04      	ldr	r3, [pc, #16]	@ (80098e0 <__sinit+0x2c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1f5      	bne.n	80098c0 <__sinit+0xc>
 80098d4:	f7ff ffc4 	bl	8009860 <global_stdio_init.part.0>
 80098d8:	e7f2      	b.n	80098c0 <__sinit+0xc>
 80098da:	bf00      	nop
 80098dc:	08009821 	.word	0x08009821
 80098e0:	20005a84 	.word	0x20005a84

080098e4 <_fwalk_sglue>:
 80098e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e8:	4607      	mov	r7, r0
 80098ea:	4688      	mov	r8, r1
 80098ec:	4614      	mov	r4, r2
 80098ee:	2600      	movs	r6, #0
 80098f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098f4:	f1b9 0901 	subs.w	r9, r9, #1
 80098f8:	d505      	bpl.n	8009906 <_fwalk_sglue+0x22>
 80098fa:	6824      	ldr	r4, [r4, #0]
 80098fc:	2c00      	cmp	r4, #0
 80098fe:	d1f7      	bne.n	80098f0 <_fwalk_sglue+0xc>
 8009900:	4630      	mov	r0, r6
 8009902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009906:	89ab      	ldrh	r3, [r5, #12]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d907      	bls.n	800991c <_fwalk_sglue+0x38>
 800990c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009910:	3301      	adds	r3, #1
 8009912:	d003      	beq.n	800991c <_fwalk_sglue+0x38>
 8009914:	4629      	mov	r1, r5
 8009916:	4638      	mov	r0, r7
 8009918:	47c0      	blx	r8
 800991a:	4306      	orrs	r6, r0
 800991c:	3568      	adds	r5, #104	@ 0x68
 800991e:	e7e9      	b.n	80098f4 <_fwalk_sglue+0x10>

08009920 <siprintf>:
 8009920:	b40e      	push	{r1, r2, r3}
 8009922:	b510      	push	{r4, lr}
 8009924:	b09d      	sub	sp, #116	@ 0x74
 8009926:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009928:	9002      	str	r0, [sp, #8]
 800992a:	9006      	str	r0, [sp, #24]
 800992c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009930:	480a      	ldr	r0, [pc, #40]	@ (800995c <siprintf+0x3c>)
 8009932:	9107      	str	r1, [sp, #28]
 8009934:	9104      	str	r1, [sp, #16]
 8009936:	490a      	ldr	r1, [pc, #40]	@ (8009960 <siprintf+0x40>)
 8009938:	f853 2b04 	ldr.w	r2, [r3], #4
 800993c:	9105      	str	r1, [sp, #20]
 800993e:	2400      	movs	r4, #0
 8009940:	a902      	add	r1, sp, #8
 8009942:	6800      	ldr	r0, [r0, #0]
 8009944:	9301      	str	r3, [sp, #4]
 8009946:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009948:	f002 f988 	bl	800bc5c <_svfiprintf_r>
 800994c:	9b02      	ldr	r3, [sp, #8]
 800994e:	701c      	strb	r4, [r3, #0]
 8009950:	b01d      	add	sp, #116	@ 0x74
 8009952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009956:	b003      	add	sp, #12
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	200003f4 	.word	0x200003f4
 8009960:	ffff0208 	.word	0xffff0208

08009964 <__sread>:
 8009964:	b510      	push	{r4, lr}
 8009966:	460c      	mov	r4, r1
 8009968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800996c:	f000 f938 	bl	8009be0 <_read_r>
 8009970:	2800      	cmp	r0, #0
 8009972:	bfab      	itete	ge
 8009974:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009976:	89a3      	ldrhlt	r3, [r4, #12]
 8009978:	181b      	addge	r3, r3, r0
 800997a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800997e:	bfac      	ite	ge
 8009980:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009982:	81a3      	strhlt	r3, [r4, #12]
 8009984:	bd10      	pop	{r4, pc}

08009986 <__swrite>:
 8009986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800998a:	461f      	mov	r7, r3
 800998c:	898b      	ldrh	r3, [r1, #12]
 800998e:	05db      	lsls	r3, r3, #23
 8009990:	4605      	mov	r5, r0
 8009992:	460c      	mov	r4, r1
 8009994:	4616      	mov	r6, r2
 8009996:	d505      	bpl.n	80099a4 <__swrite+0x1e>
 8009998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999c:	2302      	movs	r3, #2
 800999e:	2200      	movs	r2, #0
 80099a0:	f000 f90c 	bl	8009bbc <_lseek_r>
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099ae:	81a3      	strh	r3, [r4, #12]
 80099b0:	4632      	mov	r2, r6
 80099b2:	463b      	mov	r3, r7
 80099b4:	4628      	mov	r0, r5
 80099b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ba:	f000 b923 	b.w	8009c04 <_write_r>

080099be <__sseek>:
 80099be:	b510      	push	{r4, lr}
 80099c0:	460c      	mov	r4, r1
 80099c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c6:	f000 f8f9 	bl	8009bbc <_lseek_r>
 80099ca:	1c43      	adds	r3, r0, #1
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	bf15      	itete	ne
 80099d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80099d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80099d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80099da:	81a3      	strheq	r3, [r4, #12]
 80099dc:	bf18      	it	ne
 80099de:	81a3      	strhne	r3, [r4, #12]
 80099e0:	bd10      	pop	{r4, pc}

080099e2 <__sclose>:
 80099e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e6:	f000 b87b 	b.w	8009ae0 <_close_r>

080099ea <memset>:
 80099ea:	4402      	add	r2, r0
 80099ec:	4603      	mov	r3, r0
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d100      	bne.n	80099f4 <memset+0xa>
 80099f2:	4770      	bx	lr
 80099f4:	f803 1b01 	strb.w	r1, [r3], #1
 80099f8:	e7f9      	b.n	80099ee <memset+0x4>

080099fa <strncmp>:
 80099fa:	b510      	push	{r4, lr}
 80099fc:	b16a      	cbz	r2, 8009a1a <strncmp+0x20>
 80099fe:	3901      	subs	r1, #1
 8009a00:	1884      	adds	r4, r0, r2
 8009a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a06:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d103      	bne.n	8009a16 <strncmp+0x1c>
 8009a0e:	42a0      	cmp	r0, r4
 8009a10:	d001      	beq.n	8009a16 <strncmp+0x1c>
 8009a12:	2a00      	cmp	r2, #0
 8009a14:	d1f5      	bne.n	8009a02 <strncmp+0x8>
 8009a16:	1ad0      	subs	r0, r2, r3
 8009a18:	bd10      	pop	{r4, pc}
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	e7fc      	b.n	8009a18 <strncmp+0x1e>
	...

08009a20 <strtok>:
 8009a20:	4b16      	ldr	r3, [pc, #88]	@ (8009a7c <strtok+0x5c>)
 8009a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a26:	681f      	ldr	r7, [r3, #0]
 8009a28:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	460e      	mov	r6, r1
 8009a2e:	b9ec      	cbnz	r4, 8009a6c <strtok+0x4c>
 8009a30:	2050      	movs	r0, #80	@ 0x50
 8009a32:	f001 fb39 	bl	800b0a8 <malloc>
 8009a36:	4602      	mov	r2, r0
 8009a38:	6478      	str	r0, [r7, #68]	@ 0x44
 8009a3a:	b920      	cbnz	r0, 8009a46 <strtok+0x26>
 8009a3c:	4b10      	ldr	r3, [pc, #64]	@ (8009a80 <strtok+0x60>)
 8009a3e:	4811      	ldr	r0, [pc, #68]	@ (8009a84 <strtok+0x64>)
 8009a40:	215b      	movs	r1, #91	@ 0x5b
 8009a42:	f000 f935 	bl	8009cb0 <__assert_func>
 8009a46:	e9c0 4400 	strd	r4, r4, [r0]
 8009a4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009a4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009a52:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009a56:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009a5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009a5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009a62:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009a66:	6184      	str	r4, [r0, #24]
 8009a68:	7704      	strb	r4, [r0, #28]
 8009a6a:	6244      	str	r4, [r0, #36]	@ 0x24
 8009a6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4628      	mov	r0, r5
 8009a72:	2301      	movs	r3, #1
 8009a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a78:	f000 b806 	b.w	8009a88 <__strtok_r>
 8009a7c:	200003f4 	.word	0x200003f4
 8009a80:	0800d352 	.word	0x0800d352
 8009a84:	0800d369 	.word	0x0800d369

08009a88 <__strtok_r>:
 8009a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	b908      	cbnz	r0, 8009a92 <__strtok_r+0xa>
 8009a8e:	6814      	ldr	r4, [r2, #0]
 8009a90:	b144      	cbz	r4, 8009aa4 <__strtok_r+0x1c>
 8009a92:	4620      	mov	r0, r4
 8009a94:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009a98:	460f      	mov	r7, r1
 8009a9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009a9e:	b91e      	cbnz	r6, 8009aa8 <__strtok_r+0x20>
 8009aa0:	b965      	cbnz	r5, 8009abc <__strtok_r+0x34>
 8009aa2:	6015      	str	r5, [r2, #0]
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	e005      	b.n	8009ab4 <__strtok_r+0x2c>
 8009aa8:	42b5      	cmp	r5, r6
 8009aaa:	d1f6      	bne.n	8009a9a <__strtok_r+0x12>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1f0      	bne.n	8009a92 <__strtok_r+0xa>
 8009ab0:	6014      	str	r4, [r2, #0]
 8009ab2:	7003      	strb	r3, [r0, #0]
 8009ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ab6:	461c      	mov	r4, r3
 8009ab8:	e00c      	b.n	8009ad4 <__strtok_r+0x4c>
 8009aba:	b91d      	cbnz	r5, 8009ac4 <__strtok_r+0x3c>
 8009abc:	4627      	mov	r7, r4
 8009abe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ac2:	460e      	mov	r6, r1
 8009ac4:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009ac8:	42ab      	cmp	r3, r5
 8009aca:	d1f6      	bne.n	8009aba <__strtok_r+0x32>
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d0f2      	beq.n	8009ab6 <__strtok_r+0x2e>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	703b      	strb	r3, [r7, #0]
 8009ad4:	6014      	str	r4, [r2, #0]
 8009ad6:	e7ed      	b.n	8009ab4 <__strtok_r+0x2c>

08009ad8 <_localeconv_r>:
 8009ad8:	4800      	ldr	r0, [pc, #0]	@ (8009adc <_localeconv_r+0x4>)
 8009ada:	4770      	bx	lr
 8009adc:	20000378 	.word	0x20000378

08009ae0 <_close_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4d06      	ldr	r5, [pc, #24]	@ (8009afc <_close_r+0x1c>)
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	4608      	mov	r0, r1
 8009aea:	602b      	str	r3, [r5, #0]
 8009aec:	f7f8 fc68 	bl	80023c0 <_close>
 8009af0:	1c43      	adds	r3, r0, #1
 8009af2:	d102      	bne.n	8009afa <_close_r+0x1a>
 8009af4:	682b      	ldr	r3, [r5, #0]
 8009af6:	b103      	cbz	r3, 8009afa <_close_r+0x1a>
 8009af8:	6023      	str	r3, [r4, #0]
 8009afa:	bd38      	pop	{r3, r4, r5, pc}
 8009afc:	20005a88 	.word	0x20005a88

08009b00 <_reclaim_reent>:
 8009b00:	4b2d      	ldr	r3, [pc, #180]	@ (8009bb8 <_reclaim_reent+0xb8>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4283      	cmp	r3, r0
 8009b06:	b570      	push	{r4, r5, r6, lr}
 8009b08:	4604      	mov	r4, r0
 8009b0a:	d053      	beq.n	8009bb4 <_reclaim_reent+0xb4>
 8009b0c:	69c3      	ldr	r3, [r0, #28]
 8009b0e:	b31b      	cbz	r3, 8009b58 <_reclaim_reent+0x58>
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	b163      	cbz	r3, 8009b2e <_reclaim_reent+0x2e>
 8009b14:	2500      	movs	r5, #0
 8009b16:	69e3      	ldr	r3, [r4, #28]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	5959      	ldr	r1, [r3, r5]
 8009b1c:	b9b1      	cbnz	r1, 8009b4c <_reclaim_reent+0x4c>
 8009b1e:	3504      	adds	r5, #4
 8009b20:	2d80      	cmp	r5, #128	@ 0x80
 8009b22:	d1f8      	bne.n	8009b16 <_reclaim_reent+0x16>
 8009b24:	69e3      	ldr	r3, [r4, #28]
 8009b26:	4620      	mov	r0, r4
 8009b28:	68d9      	ldr	r1, [r3, #12]
 8009b2a:	f000 ff39 	bl	800a9a0 <_free_r>
 8009b2e:	69e3      	ldr	r3, [r4, #28]
 8009b30:	6819      	ldr	r1, [r3, #0]
 8009b32:	b111      	cbz	r1, 8009b3a <_reclaim_reent+0x3a>
 8009b34:	4620      	mov	r0, r4
 8009b36:	f000 ff33 	bl	800a9a0 <_free_r>
 8009b3a:	69e3      	ldr	r3, [r4, #28]
 8009b3c:	689d      	ldr	r5, [r3, #8]
 8009b3e:	b15d      	cbz	r5, 8009b58 <_reclaim_reent+0x58>
 8009b40:	4629      	mov	r1, r5
 8009b42:	4620      	mov	r0, r4
 8009b44:	682d      	ldr	r5, [r5, #0]
 8009b46:	f000 ff2b 	bl	800a9a0 <_free_r>
 8009b4a:	e7f8      	b.n	8009b3e <_reclaim_reent+0x3e>
 8009b4c:	680e      	ldr	r6, [r1, #0]
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f000 ff26 	bl	800a9a0 <_free_r>
 8009b54:	4631      	mov	r1, r6
 8009b56:	e7e1      	b.n	8009b1c <_reclaim_reent+0x1c>
 8009b58:	6961      	ldr	r1, [r4, #20]
 8009b5a:	b111      	cbz	r1, 8009b62 <_reclaim_reent+0x62>
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	f000 ff1f 	bl	800a9a0 <_free_r>
 8009b62:	69e1      	ldr	r1, [r4, #28]
 8009b64:	b111      	cbz	r1, 8009b6c <_reclaim_reent+0x6c>
 8009b66:	4620      	mov	r0, r4
 8009b68:	f000 ff1a 	bl	800a9a0 <_free_r>
 8009b6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009b6e:	b111      	cbz	r1, 8009b76 <_reclaim_reent+0x76>
 8009b70:	4620      	mov	r0, r4
 8009b72:	f000 ff15 	bl	800a9a0 <_free_r>
 8009b76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b78:	b111      	cbz	r1, 8009b80 <_reclaim_reent+0x80>
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f000 ff10 	bl	800a9a0 <_free_r>
 8009b80:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009b82:	b111      	cbz	r1, 8009b8a <_reclaim_reent+0x8a>
 8009b84:	4620      	mov	r0, r4
 8009b86:	f000 ff0b 	bl	800a9a0 <_free_r>
 8009b8a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009b8c:	b111      	cbz	r1, 8009b94 <_reclaim_reent+0x94>
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f000 ff06 	bl	800a9a0 <_free_r>
 8009b94:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009b96:	b111      	cbz	r1, 8009b9e <_reclaim_reent+0x9e>
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 ff01 	bl	800a9a0 <_free_r>
 8009b9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009ba0:	b111      	cbz	r1, 8009ba8 <_reclaim_reent+0xa8>
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f000 fefc 	bl	800a9a0 <_free_r>
 8009ba8:	6a23      	ldr	r3, [r4, #32]
 8009baa:	b11b      	cbz	r3, 8009bb4 <_reclaim_reent+0xb4>
 8009bac:	4620      	mov	r0, r4
 8009bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bb2:	4718      	bx	r3
 8009bb4:	bd70      	pop	{r4, r5, r6, pc}
 8009bb6:	bf00      	nop
 8009bb8:	200003f4 	.word	0x200003f4

08009bbc <_lseek_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4d07      	ldr	r5, [pc, #28]	@ (8009bdc <_lseek_r+0x20>)
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	4608      	mov	r0, r1
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	602a      	str	r2, [r5, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f7f8 fc1f 	bl	800240e <_lseek>
 8009bd0:	1c43      	adds	r3, r0, #1
 8009bd2:	d102      	bne.n	8009bda <_lseek_r+0x1e>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	b103      	cbz	r3, 8009bda <_lseek_r+0x1e>
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
 8009bdc:	20005a88 	.word	0x20005a88

08009be0 <_read_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d07      	ldr	r5, [pc, #28]	@ (8009c00 <_read_r+0x20>)
 8009be4:	4604      	mov	r4, r0
 8009be6:	4608      	mov	r0, r1
 8009be8:	4611      	mov	r1, r2
 8009bea:	2200      	movs	r2, #0
 8009bec:	602a      	str	r2, [r5, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f7f8 fbad 	bl	800234e <_read>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	d102      	bne.n	8009bfe <_read_r+0x1e>
 8009bf8:	682b      	ldr	r3, [r5, #0]
 8009bfa:	b103      	cbz	r3, 8009bfe <_read_r+0x1e>
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
 8009c00:	20005a88 	.word	0x20005a88

08009c04 <_write_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4d07      	ldr	r5, [pc, #28]	@ (8009c24 <_write_r+0x20>)
 8009c08:	4604      	mov	r4, r0
 8009c0a:	4608      	mov	r0, r1
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	602a      	str	r2, [r5, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	f7f8 fbb8 	bl	8002388 <_write>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_write_r+0x1e>
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_write_r+0x1e>
 8009c20:	6023      	str	r3, [r4, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	20005a88 	.word	0x20005a88

08009c28 <__errno>:
 8009c28:	4b01      	ldr	r3, [pc, #4]	@ (8009c30 <__errno+0x8>)
 8009c2a:	6818      	ldr	r0, [r3, #0]
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	200003f4 	.word	0x200003f4

08009c34 <__libc_init_array>:
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	4d0d      	ldr	r5, [pc, #52]	@ (8009c6c <__libc_init_array+0x38>)
 8009c38:	4c0d      	ldr	r4, [pc, #52]	@ (8009c70 <__libc_init_array+0x3c>)
 8009c3a:	1b64      	subs	r4, r4, r5
 8009c3c:	10a4      	asrs	r4, r4, #2
 8009c3e:	2600      	movs	r6, #0
 8009c40:	42a6      	cmp	r6, r4
 8009c42:	d109      	bne.n	8009c58 <__libc_init_array+0x24>
 8009c44:	4d0b      	ldr	r5, [pc, #44]	@ (8009c74 <__libc_init_array+0x40>)
 8009c46:	4c0c      	ldr	r4, [pc, #48]	@ (8009c78 <__libc_init_array+0x44>)
 8009c48:	f002 fcda 	bl	800c600 <_init>
 8009c4c:	1b64      	subs	r4, r4, r5
 8009c4e:	10a4      	asrs	r4, r4, #2
 8009c50:	2600      	movs	r6, #0
 8009c52:	42a6      	cmp	r6, r4
 8009c54:	d105      	bne.n	8009c62 <__libc_init_array+0x2e>
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
 8009c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c5c:	4798      	blx	r3
 8009c5e:	3601      	adds	r6, #1
 8009c60:	e7ee      	b.n	8009c40 <__libc_init_array+0xc>
 8009c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c66:	4798      	blx	r3
 8009c68:	3601      	adds	r6, #1
 8009c6a:	e7f2      	b.n	8009c52 <__libc_init_array+0x1e>
 8009c6c:	0800d7a0 	.word	0x0800d7a0
 8009c70:	0800d7a0 	.word	0x0800d7a0
 8009c74:	0800d7a0 	.word	0x0800d7a0
 8009c78:	0800d7a4 	.word	0x0800d7a4

08009c7c <__retarget_lock_init_recursive>:
 8009c7c:	4770      	bx	lr

08009c7e <__retarget_lock_acquire_recursive>:
 8009c7e:	4770      	bx	lr

08009c80 <__retarget_lock_release_recursive>:
 8009c80:	4770      	bx	lr

08009c82 <memcpy>:
 8009c82:	440a      	add	r2, r1
 8009c84:	4291      	cmp	r1, r2
 8009c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c8a:	d100      	bne.n	8009c8e <memcpy+0xc>
 8009c8c:	4770      	bx	lr
 8009c8e:	b510      	push	{r4, lr}
 8009c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c98:	4291      	cmp	r1, r2
 8009c9a:	d1f9      	bne.n	8009c90 <memcpy+0xe>
 8009c9c:	bd10      	pop	{r4, pc}
	...

08009ca0 <nan>:
 8009ca0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009ca8 <nan+0x8>
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	00000000 	.word	0x00000000
 8009cac:	7ff80000 	.word	0x7ff80000

08009cb0 <__assert_func>:
 8009cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cb2:	4614      	mov	r4, r2
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4b09      	ldr	r3, [pc, #36]	@ (8009cdc <__assert_func+0x2c>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4605      	mov	r5, r0
 8009cbc:	68d8      	ldr	r0, [r3, #12]
 8009cbe:	b14c      	cbz	r4, 8009cd4 <__assert_func+0x24>
 8009cc0:	4b07      	ldr	r3, [pc, #28]	@ (8009ce0 <__assert_func+0x30>)
 8009cc2:	9100      	str	r1, [sp, #0]
 8009cc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cc8:	4906      	ldr	r1, [pc, #24]	@ (8009ce4 <__assert_func+0x34>)
 8009cca:	462b      	mov	r3, r5
 8009ccc:	f002 f96e 	bl	800bfac <fiprintf>
 8009cd0:	f002 f9a8 	bl	800c024 <abort>
 8009cd4:	4b04      	ldr	r3, [pc, #16]	@ (8009ce8 <__assert_func+0x38>)
 8009cd6:	461c      	mov	r4, r3
 8009cd8:	e7f3      	b.n	8009cc2 <__assert_func+0x12>
 8009cda:	bf00      	nop
 8009cdc:	200003f4 	.word	0x200003f4
 8009ce0:	0800d3cb 	.word	0x0800d3cb
 8009ce4:	0800d3d8 	.word	0x0800d3d8
 8009ce8:	0800d406 	.word	0x0800d406

08009cec <quorem>:
 8009cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf0:	6903      	ldr	r3, [r0, #16]
 8009cf2:	690c      	ldr	r4, [r1, #16]
 8009cf4:	42a3      	cmp	r3, r4
 8009cf6:	4607      	mov	r7, r0
 8009cf8:	db7e      	blt.n	8009df8 <quorem+0x10c>
 8009cfa:	3c01      	subs	r4, #1
 8009cfc:	f101 0814 	add.w	r8, r1, #20
 8009d00:	00a3      	lsls	r3, r4, #2
 8009d02:	f100 0514 	add.w	r5, r0, #20
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d0c:	9301      	str	r3, [sp, #4]
 8009d0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d16:	3301      	adds	r3, #1
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d1e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d22:	d32e      	bcc.n	8009d82 <quorem+0x96>
 8009d24:	f04f 0a00 	mov.w	sl, #0
 8009d28:	46c4      	mov	ip, r8
 8009d2a:	46ae      	mov	lr, r5
 8009d2c:	46d3      	mov	fp, sl
 8009d2e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d32:	b298      	uxth	r0, r3
 8009d34:	fb06 a000 	mla	r0, r6, r0, sl
 8009d38:	0c02      	lsrs	r2, r0, #16
 8009d3a:	0c1b      	lsrs	r3, r3, #16
 8009d3c:	fb06 2303 	mla	r3, r6, r3, r2
 8009d40:	f8de 2000 	ldr.w	r2, [lr]
 8009d44:	b280      	uxth	r0, r0
 8009d46:	b292      	uxth	r2, r2
 8009d48:	1a12      	subs	r2, r2, r0
 8009d4a:	445a      	add	r2, fp
 8009d4c:	f8de 0000 	ldr.w	r0, [lr]
 8009d50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d5a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d5e:	b292      	uxth	r2, r2
 8009d60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d64:	45e1      	cmp	r9, ip
 8009d66:	f84e 2b04 	str.w	r2, [lr], #4
 8009d6a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009d6e:	d2de      	bcs.n	8009d2e <quorem+0x42>
 8009d70:	9b00      	ldr	r3, [sp, #0]
 8009d72:	58eb      	ldr	r3, [r5, r3]
 8009d74:	b92b      	cbnz	r3, 8009d82 <quorem+0x96>
 8009d76:	9b01      	ldr	r3, [sp, #4]
 8009d78:	3b04      	subs	r3, #4
 8009d7a:	429d      	cmp	r5, r3
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	d32f      	bcc.n	8009de0 <quorem+0xf4>
 8009d80:	613c      	str	r4, [r7, #16]
 8009d82:	4638      	mov	r0, r7
 8009d84:	f001 fd14 	bl	800b7b0 <__mcmp>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	db25      	blt.n	8009dd8 <quorem+0xec>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	2000      	movs	r0, #0
 8009d90:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d94:	f8d1 c000 	ldr.w	ip, [r1]
 8009d98:	fa1f fe82 	uxth.w	lr, r2
 8009d9c:	fa1f f38c 	uxth.w	r3, ip
 8009da0:	eba3 030e 	sub.w	r3, r3, lr
 8009da4:	4403      	add	r3, r0
 8009da6:	0c12      	lsrs	r2, r2, #16
 8009da8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009dac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009db6:	45c1      	cmp	r9, r8
 8009db8:	f841 3b04 	str.w	r3, [r1], #4
 8009dbc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009dc0:	d2e6      	bcs.n	8009d90 <quorem+0xa4>
 8009dc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dca:	b922      	cbnz	r2, 8009dd6 <quorem+0xea>
 8009dcc:	3b04      	subs	r3, #4
 8009dce:	429d      	cmp	r5, r3
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	d30b      	bcc.n	8009dec <quorem+0x100>
 8009dd4:	613c      	str	r4, [r7, #16]
 8009dd6:	3601      	adds	r6, #1
 8009dd8:	4630      	mov	r0, r6
 8009dda:	b003      	add	sp, #12
 8009ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de0:	6812      	ldr	r2, [r2, #0]
 8009de2:	3b04      	subs	r3, #4
 8009de4:	2a00      	cmp	r2, #0
 8009de6:	d1cb      	bne.n	8009d80 <quorem+0x94>
 8009de8:	3c01      	subs	r4, #1
 8009dea:	e7c6      	b.n	8009d7a <quorem+0x8e>
 8009dec:	6812      	ldr	r2, [r2, #0]
 8009dee:	3b04      	subs	r3, #4
 8009df0:	2a00      	cmp	r2, #0
 8009df2:	d1ef      	bne.n	8009dd4 <quorem+0xe8>
 8009df4:	3c01      	subs	r4, #1
 8009df6:	e7ea      	b.n	8009dce <quorem+0xe2>
 8009df8:	2000      	movs	r0, #0
 8009dfa:	e7ee      	b.n	8009dda <quorem+0xee>
 8009dfc:	0000      	movs	r0, r0
	...

08009e00 <_dtoa_r>:
 8009e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e04:	69c7      	ldr	r7, [r0, #28]
 8009e06:	b097      	sub	sp, #92	@ 0x5c
 8009e08:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009e0c:	ec55 4b10 	vmov	r4, r5, d0
 8009e10:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009e12:	9107      	str	r1, [sp, #28]
 8009e14:	4681      	mov	r9, r0
 8009e16:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e18:	9311      	str	r3, [sp, #68]	@ 0x44
 8009e1a:	b97f      	cbnz	r7, 8009e3c <_dtoa_r+0x3c>
 8009e1c:	2010      	movs	r0, #16
 8009e1e:	f001 f943 	bl	800b0a8 <malloc>
 8009e22:	4602      	mov	r2, r0
 8009e24:	f8c9 001c 	str.w	r0, [r9, #28]
 8009e28:	b920      	cbnz	r0, 8009e34 <_dtoa_r+0x34>
 8009e2a:	4ba9      	ldr	r3, [pc, #676]	@ (800a0d0 <_dtoa_r+0x2d0>)
 8009e2c:	21ef      	movs	r1, #239	@ 0xef
 8009e2e:	48a9      	ldr	r0, [pc, #676]	@ (800a0d4 <_dtoa_r+0x2d4>)
 8009e30:	f7ff ff3e 	bl	8009cb0 <__assert_func>
 8009e34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e38:	6007      	str	r7, [r0, #0]
 8009e3a:	60c7      	str	r7, [r0, #12]
 8009e3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009e40:	6819      	ldr	r1, [r3, #0]
 8009e42:	b159      	cbz	r1, 8009e5c <_dtoa_r+0x5c>
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	604a      	str	r2, [r1, #4]
 8009e48:	2301      	movs	r3, #1
 8009e4a:	4093      	lsls	r3, r2
 8009e4c:	608b      	str	r3, [r1, #8]
 8009e4e:	4648      	mov	r0, r9
 8009e50:	f001 fa32 	bl	800b2b8 <_Bfree>
 8009e54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	1e2b      	subs	r3, r5, #0
 8009e5e:	bfb9      	ittee	lt
 8009e60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e64:	9305      	strlt	r3, [sp, #20]
 8009e66:	2300      	movge	r3, #0
 8009e68:	6033      	strge	r3, [r6, #0]
 8009e6a:	9f05      	ldr	r7, [sp, #20]
 8009e6c:	4b9a      	ldr	r3, [pc, #616]	@ (800a0d8 <_dtoa_r+0x2d8>)
 8009e6e:	bfbc      	itt	lt
 8009e70:	2201      	movlt	r2, #1
 8009e72:	6032      	strlt	r2, [r6, #0]
 8009e74:	43bb      	bics	r3, r7
 8009e76:	d112      	bne.n	8009e9e <_dtoa_r+0x9e>
 8009e78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009e7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e7e:	6013      	str	r3, [r2, #0]
 8009e80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e84:	4323      	orrs	r3, r4
 8009e86:	f000 855a 	beq.w	800a93e <_dtoa_r+0xb3e>
 8009e8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e8c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a0ec <_dtoa_r+0x2ec>
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f000 855c 	beq.w	800a94e <_dtoa_r+0xb4e>
 8009e96:	f10a 0303 	add.w	r3, sl, #3
 8009e9a:	f000 bd56 	b.w	800a94a <_dtoa_r+0xb4a>
 8009e9e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	ec51 0b17 	vmov	r0, r1, d7
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009eae:	f7f6 fe1b 	bl	8000ae8 <__aeabi_dcmpeq>
 8009eb2:	4680      	mov	r8, r0
 8009eb4:	b158      	cbz	r0, 8009ece <_dtoa_r+0xce>
 8009eb6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009eb8:	2301      	movs	r3, #1
 8009eba:	6013      	str	r3, [r2, #0]
 8009ebc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ebe:	b113      	cbz	r3, 8009ec6 <_dtoa_r+0xc6>
 8009ec0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009ec2:	4b86      	ldr	r3, [pc, #536]	@ (800a0dc <_dtoa_r+0x2dc>)
 8009ec4:	6013      	str	r3, [r2, #0]
 8009ec6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a0f0 <_dtoa_r+0x2f0>
 8009eca:	f000 bd40 	b.w	800a94e <_dtoa_r+0xb4e>
 8009ece:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009ed2:	aa14      	add	r2, sp, #80	@ 0x50
 8009ed4:	a915      	add	r1, sp, #84	@ 0x54
 8009ed6:	4648      	mov	r0, r9
 8009ed8:	f001 fd8a 	bl	800b9f0 <__d2b>
 8009edc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009ee0:	9002      	str	r0, [sp, #8]
 8009ee2:	2e00      	cmp	r6, #0
 8009ee4:	d078      	beq.n	8009fd8 <_dtoa_r+0x1d8>
 8009ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ee8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ef0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009ef4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ef8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009efc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f00:	4619      	mov	r1, r3
 8009f02:	2200      	movs	r2, #0
 8009f04:	4b76      	ldr	r3, [pc, #472]	@ (800a0e0 <_dtoa_r+0x2e0>)
 8009f06:	f7f6 f9cf 	bl	80002a8 <__aeabi_dsub>
 8009f0a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a0b8 <_dtoa_r+0x2b8>)
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	f7f6 fb82 	bl	8000618 <__aeabi_dmul>
 8009f14:	a36a      	add	r3, pc, #424	@ (adr r3, 800a0c0 <_dtoa_r+0x2c0>)
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	f7f6 f9c7 	bl	80002ac <__adddf3>
 8009f1e:	4604      	mov	r4, r0
 8009f20:	4630      	mov	r0, r6
 8009f22:	460d      	mov	r5, r1
 8009f24:	f7f6 fb0e 	bl	8000544 <__aeabi_i2d>
 8009f28:	a367      	add	r3, pc, #412	@ (adr r3, 800a0c8 <_dtoa_r+0x2c8>)
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	f7f6 fb73 	bl	8000618 <__aeabi_dmul>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	4620      	mov	r0, r4
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 f9b7 	bl	80002ac <__adddf3>
 8009f3e:	4604      	mov	r4, r0
 8009f40:	460d      	mov	r5, r1
 8009f42:	f7f6 fe19 	bl	8000b78 <__aeabi_d2iz>
 8009f46:	2200      	movs	r2, #0
 8009f48:	4607      	mov	r7, r0
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	4629      	mov	r1, r5
 8009f50:	f7f6 fdd4 	bl	8000afc <__aeabi_dcmplt>
 8009f54:	b140      	cbz	r0, 8009f68 <_dtoa_r+0x168>
 8009f56:	4638      	mov	r0, r7
 8009f58:	f7f6 faf4 	bl	8000544 <__aeabi_i2d>
 8009f5c:	4622      	mov	r2, r4
 8009f5e:	462b      	mov	r3, r5
 8009f60:	f7f6 fdc2 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f64:	b900      	cbnz	r0, 8009f68 <_dtoa_r+0x168>
 8009f66:	3f01      	subs	r7, #1
 8009f68:	2f16      	cmp	r7, #22
 8009f6a:	d852      	bhi.n	800a012 <_dtoa_r+0x212>
 8009f6c:	4b5d      	ldr	r3, [pc, #372]	@ (800a0e4 <_dtoa_r+0x2e4>)
 8009f6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009f7a:	f7f6 fdbf 	bl	8000afc <__aeabi_dcmplt>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d049      	beq.n	800a016 <_dtoa_r+0x216>
 8009f82:	3f01      	subs	r7, #1
 8009f84:	2300      	movs	r3, #0
 8009f86:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f8a:	1b9b      	subs	r3, r3, r6
 8009f8c:	1e5a      	subs	r2, r3, #1
 8009f8e:	bf45      	ittet	mi
 8009f90:	f1c3 0301 	rsbmi	r3, r3, #1
 8009f94:	9300      	strmi	r3, [sp, #0]
 8009f96:	2300      	movpl	r3, #0
 8009f98:	2300      	movmi	r3, #0
 8009f9a:	9206      	str	r2, [sp, #24]
 8009f9c:	bf54      	ite	pl
 8009f9e:	9300      	strpl	r3, [sp, #0]
 8009fa0:	9306      	strmi	r3, [sp, #24]
 8009fa2:	2f00      	cmp	r7, #0
 8009fa4:	db39      	blt.n	800a01a <_dtoa_r+0x21a>
 8009fa6:	9b06      	ldr	r3, [sp, #24]
 8009fa8:	970d      	str	r7, [sp, #52]	@ 0x34
 8009faa:	443b      	add	r3, r7
 8009fac:	9306      	str	r3, [sp, #24]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	9308      	str	r3, [sp, #32]
 8009fb2:	9b07      	ldr	r3, [sp, #28]
 8009fb4:	2b09      	cmp	r3, #9
 8009fb6:	d863      	bhi.n	800a080 <_dtoa_r+0x280>
 8009fb8:	2b05      	cmp	r3, #5
 8009fba:	bfc4      	itt	gt
 8009fbc:	3b04      	subgt	r3, #4
 8009fbe:	9307      	strgt	r3, [sp, #28]
 8009fc0:	9b07      	ldr	r3, [sp, #28]
 8009fc2:	f1a3 0302 	sub.w	r3, r3, #2
 8009fc6:	bfcc      	ite	gt
 8009fc8:	2400      	movgt	r4, #0
 8009fca:	2401      	movle	r4, #1
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d863      	bhi.n	800a098 <_dtoa_r+0x298>
 8009fd0:	e8df f003 	tbb	[pc, r3]
 8009fd4:	2b375452 	.word	0x2b375452
 8009fd8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009fdc:	441e      	add	r6, r3
 8009fde:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009fe2:	2b20      	cmp	r3, #32
 8009fe4:	bfc1      	itttt	gt
 8009fe6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009fea:	409f      	lslgt	r7, r3
 8009fec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009ff0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009ff4:	bfd6      	itet	le
 8009ff6:	f1c3 0320 	rsble	r3, r3, #32
 8009ffa:	ea47 0003 	orrgt.w	r0, r7, r3
 8009ffe:	fa04 f003 	lslle.w	r0, r4, r3
 800a002:	f7f6 fa8f 	bl	8000524 <__aeabi_ui2d>
 800a006:	2201      	movs	r2, #1
 800a008:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a00c:	3e01      	subs	r6, #1
 800a00e:	9212      	str	r2, [sp, #72]	@ 0x48
 800a010:	e776      	b.n	8009f00 <_dtoa_r+0x100>
 800a012:	2301      	movs	r3, #1
 800a014:	e7b7      	b.n	8009f86 <_dtoa_r+0x186>
 800a016:	9010      	str	r0, [sp, #64]	@ 0x40
 800a018:	e7b6      	b.n	8009f88 <_dtoa_r+0x188>
 800a01a:	9b00      	ldr	r3, [sp, #0]
 800a01c:	1bdb      	subs	r3, r3, r7
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	427b      	negs	r3, r7
 800a022:	9308      	str	r3, [sp, #32]
 800a024:	2300      	movs	r3, #0
 800a026:	930d      	str	r3, [sp, #52]	@ 0x34
 800a028:	e7c3      	b.n	8009fb2 <_dtoa_r+0x1b2>
 800a02a:	2301      	movs	r3, #1
 800a02c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a02e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a030:	eb07 0b03 	add.w	fp, r7, r3
 800a034:	f10b 0301 	add.w	r3, fp, #1
 800a038:	2b01      	cmp	r3, #1
 800a03a:	9303      	str	r3, [sp, #12]
 800a03c:	bfb8      	it	lt
 800a03e:	2301      	movlt	r3, #1
 800a040:	e006      	b.n	800a050 <_dtoa_r+0x250>
 800a042:	2301      	movs	r3, #1
 800a044:	9309      	str	r3, [sp, #36]	@ 0x24
 800a046:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a048:	2b00      	cmp	r3, #0
 800a04a:	dd28      	ble.n	800a09e <_dtoa_r+0x29e>
 800a04c:	469b      	mov	fp, r3
 800a04e:	9303      	str	r3, [sp, #12]
 800a050:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a054:	2100      	movs	r1, #0
 800a056:	2204      	movs	r2, #4
 800a058:	f102 0514 	add.w	r5, r2, #20
 800a05c:	429d      	cmp	r5, r3
 800a05e:	d926      	bls.n	800a0ae <_dtoa_r+0x2ae>
 800a060:	6041      	str	r1, [r0, #4]
 800a062:	4648      	mov	r0, r9
 800a064:	f001 f8e8 	bl	800b238 <_Balloc>
 800a068:	4682      	mov	sl, r0
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d142      	bne.n	800a0f4 <_dtoa_r+0x2f4>
 800a06e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0e8 <_dtoa_r+0x2e8>)
 800a070:	4602      	mov	r2, r0
 800a072:	f240 11af 	movw	r1, #431	@ 0x1af
 800a076:	e6da      	b.n	8009e2e <_dtoa_r+0x2e>
 800a078:	2300      	movs	r3, #0
 800a07a:	e7e3      	b.n	800a044 <_dtoa_r+0x244>
 800a07c:	2300      	movs	r3, #0
 800a07e:	e7d5      	b.n	800a02c <_dtoa_r+0x22c>
 800a080:	2401      	movs	r4, #1
 800a082:	2300      	movs	r3, #0
 800a084:	9307      	str	r3, [sp, #28]
 800a086:	9409      	str	r4, [sp, #36]	@ 0x24
 800a088:	f04f 3bff 	mov.w	fp, #4294967295
 800a08c:	2200      	movs	r2, #0
 800a08e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a092:	2312      	movs	r3, #18
 800a094:	920c      	str	r2, [sp, #48]	@ 0x30
 800a096:	e7db      	b.n	800a050 <_dtoa_r+0x250>
 800a098:	2301      	movs	r3, #1
 800a09a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a09c:	e7f4      	b.n	800a088 <_dtoa_r+0x288>
 800a09e:	f04f 0b01 	mov.w	fp, #1
 800a0a2:	f8cd b00c 	str.w	fp, [sp, #12]
 800a0a6:	465b      	mov	r3, fp
 800a0a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a0ac:	e7d0      	b.n	800a050 <_dtoa_r+0x250>
 800a0ae:	3101      	adds	r1, #1
 800a0b0:	0052      	lsls	r2, r2, #1
 800a0b2:	e7d1      	b.n	800a058 <_dtoa_r+0x258>
 800a0b4:	f3af 8000 	nop.w
 800a0b8:	636f4361 	.word	0x636f4361
 800a0bc:	3fd287a7 	.word	0x3fd287a7
 800a0c0:	8b60c8b3 	.word	0x8b60c8b3
 800a0c4:	3fc68a28 	.word	0x3fc68a28
 800a0c8:	509f79fb 	.word	0x509f79fb
 800a0cc:	3fd34413 	.word	0x3fd34413
 800a0d0:	0800d352 	.word	0x0800d352
 800a0d4:	0800d414 	.word	0x0800d414
 800a0d8:	7ff00000 	.word	0x7ff00000
 800a0dc:	0800d32f 	.word	0x0800d32f
 800a0e0:	3ff80000 	.word	0x3ff80000
 800a0e4:	0800d6d0 	.word	0x0800d6d0
 800a0e8:	0800d46c 	.word	0x0800d46c
 800a0ec:	0800d410 	.word	0x0800d410
 800a0f0:	0800d32e 	.word	0x0800d32e
 800a0f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a0f8:	6018      	str	r0, [r3, #0]
 800a0fa:	9b03      	ldr	r3, [sp, #12]
 800a0fc:	2b0e      	cmp	r3, #14
 800a0fe:	f200 80a1 	bhi.w	800a244 <_dtoa_r+0x444>
 800a102:	2c00      	cmp	r4, #0
 800a104:	f000 809e 	beq.w	800a244 <_dtoa_r+0x444>
 800a108:	2f00      	cmp	r7, #0
 800a10a:	dd33      	ble.n	800a174 <_dtoa_r+0x374>
 800a10c:	4b9c      	ldr	r3, [pc, #624]	@ (800a380 <_dtoa_r+0x580>)
 800a10e:	f007 020f 	and.w	r2, r7, #15
 800a112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a116:	ed93 7b00 	vldr	d7, [r3]
 800a11a:	05f8      	lsls	r0, r7, #23
 800a11c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a120:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a124:	d516      	bpl.n	800a154 <_dtoa_r+0x354>
 800a126:	4b97      	ldr	r3, [pc, #604]	@ (800a384 <_dtoa_r+0x584>)
 800a128:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a12c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a130:	f7f6 fb9c 	bl	800086c <__aeabi_ddiv>
 800a134:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a138:	f004 040f 	and.w	r4, r4, #15
 800a13c:	2603      	movs	r6, #3
 800a13e:	4d91      	ldr	r5, [pc, #580]	@ (800a384 <_dtoa_r+0x584>)
 800a140:	b954      	cbnz	r4, 800a158 <_dtoa_r+0x358>
 800a142:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a146:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a14a:	f7f6 fb8f 	bl	800086c <__aeabi_ddiv>
 800a14e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a152:	e028      	b.n	800a1a6 <_dtoa_r+0x3a6>
 800a154:	2602      	movs	r6, #2
 800a156:	e7f2      	b.n	800a13e <_dtoa_r+0x33e>
 800a158:	07e1      	lsls	r1, r4, #31
 800a15a:	d508      	bpl.n	800a16e <_dtoa_r+0x36e>
 800a15c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a160:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a164:	f7f6 fa58 	bl	8000618 <__aeabi_dmul>
 800a168:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a16c:	3601      	adds	r6, #1
 800a16e:	1064      	asrs	r4, r4, #1
 800a170:	3508      	adds	r5, #8
 800a172:	e7e5      	b.n	800a140 <_dtoa_r+0x340>
 800a174:	f000 80af 	beq.w	800a2d6 <_dtoa_r+0x4d6>
 800a178:	427c      	negs	r4, r7
 800a17a:	4b81      	ldr	r3, [pc, #516]	@ (800a380 <_dtoa_r+0x580>)
 800a17c:	4d81      	ldr	r5, [pc, #516]	@ (800a384 <_dtoa_r+0x584>)
 800a17e:	f004 020f 	and.w	r2, r4, #15
 800a182:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a18e:	f7f6 fa43 	bl	8000618 <__aeabi_dmul>
 800a192:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a196:	1124      	asrs	r4, r4, #4
 800a198:	2300      	movs	r3, #0
 800a19a:	2602      	movs	r6, #2
 800a19c:	2c00      	cmp	r4, #0
 800a19e:	f040 808f 	bne.w	800a2c0 <_dtoa_r+0x4c0>
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1d3      	bne.n	800a14e <_dtoa_r+0x34e>
 800a1a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a1a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 8094 	beq.w	800a2da <_dtoa_r+0x4da>
 800a1b2:	4b75      	ldr	r3, [pc, #468]	@ (800a388 <_dtoa_r+0x588>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7f6 fc9f 	bl	8000afc <__aeabi_dcmplt>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	f000 808b 	beq.w	800a2da <_dtoa_r+0x4da>
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 8087 	beq.w	800a2da <_dtoa_r+0x4da>
 800a1cc:	f1bb 0f00 	cmp.w	fp, #0
 800a1d0:	dd34      	ble.n	800a23c <_dtoa_r+0x43c>
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	4b6d      	ldr	r3, [pc, #436]	@ (800a38c <_dtoa_r+0x58c>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	4629      	mov	r1, r5
 800a1da:	f7f6 fa1d 	bl	8000618 <__aeabi_dmul>
 800a1de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1e2:	f107 38ff 	add.w	r8, r7, #4294967295
 800a1e6:	3601      	adds	r6, #1
 800a1e8:	465c      	mov	r4, fp
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7f6 f9aa 	bl	8000544 <__aeabi_i2d>
 800a1f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1f4:	f7f6 fa10 	bl	8000618 <__aeabi_dmul>
 800a1f8:	4b65      	ldr	r3, [pc, #404]	@ (800a390 <_dtoa_r+0x590>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f7f6 f856 	bl	80002ac <__adddf3>
 800a200:	4605      	mov	r5, r0
 800a202:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a206:	2c00      	cmp	r4, #0
 800a208:	d16a      	bne.n	800a2e0 <_dtoa_r+0x4e0>
 800a20a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a20e:	4b61      	ldr	r3, [pc, #388]	@ (800a394 <_dtoa_r+0x594>)
 800a210:	2200      	movs	r2, #0
 800a212:	f7f6 f849 	bl	80002a8 <__aeabi_dsub>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a21e:	462a      	mov	r2, r5
 800a220:	4633      	mov	r3, r6
 800a222:	f7f6 fc89 	bl	8000b38 <__aeabi_dcmpgt>
 800a226:	2800      	cmp	r0, #0
 800a228:	f040 8298 	bne.w	800a75c <_dtoa_r+0x95c>
 800a22c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a230:	462a      	mov	r2, r5
 800a232:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a236:	f7f6 fc61 	bl	8000afc <__aeabi_dcmplt>
 800a23a:	bb38      	cbnz	r0, 800a28c <_dtoa_r+0x48c>
 800a23c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a240:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a244:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a246:	2b00      	cmp	r3, #0
 800a248:	f2c0 8157 	blt.w	800a4fa <_dtoa_r+0x6fa>
 800a24c:	2f0e      	cmp	r7, #14
 800a24e:	f300 8154 	bgt.w	800a4fa <_dtoa_r+0x6fa>
 800a252:	4b4b      	ldr	r3, [pc, #300]	@ (800a380 <_dtoa_r+0x580>)
 800a254:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a258:	ed93 7b00 	vldr	d7, [r3]
 800a25c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a25e:	2b00      	cmp	r3, #0
 800a260:	ed8d 7b00 	vstr	d7, [sp]
 800a264:	f280 80e5 	bge.w	800a432 <_dtoa_r+0x632>
 800a268:	9b03      	ldr	r3, [sp, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f300 80e1 	bgt.w	800a432 <_dtoa_r+0x632>
 800a270:	d10c      	bne.n	800a28c <_dtoa_r+0x48c>
 800a272:	4b48      	ldr	r3, [pc, #288]	@ (800a394 <_dtoa_r+0x594>)
 800a274:	2200      	movs	r2, #0
 800a276:	ec51 0b17 	vmov	r0, r1, d7
 800a27a:	f7f6 f9cd 	bl	8000618 <__aeabi_dmul>
 800a27e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a282:	f7f6 fc4f 	bl	8000b24 <__aeabi_dcmpge>
 800a286:	2800      	cmp	r0, #0
 800a288:	f000 8266 	beq.w	800a758 <_dtoa_r+0x958>
 800a28c:	2400      	movs	r4, #0
 800a28e:	4625      	mov	r5, r4
 800a290:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a292:	4656      	mov	r6, sl
 800a294:	ea6f 0803 	mvn.w	r8, r3
 800a298:	2700      	movs	r7, #0
 800a29a:	4621      	mov	r1, r4
 800a29c:	4648      	mov	r0, r9
 800a29e:	f001 f80b 	bl	800b2b8 <_Bfree>
 800a2a2:	2d00      	cmp	r5, #0
 800a2a4:	f000 80bd 	beq.w	800a422 <_dtoa_r+0x622>
 800a2a8:	b12f      	cbz	r7, 800a2b6 <_dtoa_r+0x4b6>
 800a2aa:	42af      	cmp	r7, r5
 800a2ac:	d003      	beq.n	800a2b6 <_dtoa_r+0x4b6>
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	4648      	mov	r0, r9
 800a2b2:	f001 f801 	bl	800b2b8 <_Bfree>
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4648      	mov	r0, r9
 800a2ba:	f000 fffd 	bl	800b2b8 <_Bfree>
 800a2be:	e0b0      	b.n	800a422 <_dtoa_r+0x622>
 800a2c0:	07e2      	lsls	r2, r4, #31
 800a2c2:	d505      	bpl.n	800a2d0 <_dtoa_r+0x4d0>
 800a2c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2c8:	f7f6 f9a6 	bl	8000618 <__aeabi_dmul>
 800a2cc:	3601      	adds	r6, #1
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	1064      	asrs	r4, r4, #1
 800a2d2:	3508      	adds	r5, #8
 800a2d4:	e762      	b.n	800a19c <_dtoa_r+0x39c>
 800a2d6:	2602      	movs	r6, #2
 800a2d8:	e765      	b.n	800a1a6 <_dtoa_r+0x3a6>
 800a2da:	9c03      	ldr	r4, [sp, #12]
 800a2dc:	46b8      	mov	r8, r7
 800a2de:	e784      	b.n	800a1ea <_dtoa_r+0x3ea>
 800a2e0:	4b27      	ldr	r3, [pc, #156]	@ (800a380 <_dtoa_r+0x580>)
 800a2e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a2e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a2e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2ec:	4454      	add	r4, sl
 800a2ee:	2900      	cmp	r1, #0
 800a2f0:	d054      	beq.n	800a39c <_dtoa_r+0x59c>
 800a2f2:	4929      	ldr	r1, [pc, #164]	@ (800a398 <_dtoa_r+0x598>)
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	f7f6 fab9 	bl	800086c <__aeabi_ddiv>
 800a2fa:	4633      	mov	r3, r6
 800a2fc:	462a      	mov	r2, r5
 800a2fe:	f7f5 ffd3 	bl	80002a8 <__aeabi_dsub>
 800a302:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a306:	4656      	mov	r6, sl
 800a308:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a30c:	f7f6 fc34 	bl	8000b78 <__aeabi_d2iz>
 800a310:	4605      	mov	r5, r0
 800a312:	f7f6 f917 	bl	8000544 <__aeabi_i2d>
 800a316:	4602      	mov	r2, r0
 800a318:	460b      	mov	r3, r1
 800a31a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a31e:	f7f5 ffc3 	bl	80002a8 <__aeabi_dsub>
 800a322:	3530      	adds	r5, #48	@ 0x30
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a32c:	f806 5b01 	strb.w	r5, [r6], #1
 800a330:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a334:	f7f6 fbe2 	bl	8000afc <__aeabi_dcmplt>
 800a338:	2800      	cmp	r0, #0
 800a33a:	d172      	bne.n	800a422 <_dtoa_r+0x622>
 800a33c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a340:	4911      	ldr	r1, [pc, #68]	@ (800a388 <_dtoa_r+0x588>)
 800a342:	2000      	movs	r0, #0
 800a344:	f7f5 ffb0 	bl	80002a8 <__aeabi_dsub>
 800a348:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a34c:	f7f6 fbd6 	bl	8000afc <__aeabi_dcmplt>
 800a350:	2800      	cmp	r0, #0
 800a352:	f040 80b4 	bne.w	800a4be <_dtoa_r+0x6be>
 800a356:	42a6      	cmp	r6, r4
 800a358:	f43f af70 	beq.w	800a23c <_dtoa_r+0x43c>
 800a35c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a360:	4b0a      	ldr	r3, [pc, #40]	@ (800a38c <_dtoa_r+0x58c>)
 800a362:	2200      	movs	r2, #0
 800a364:	f7f6 f958 	bl	8000618 <__aeabi_dmul>
 800a368:	4b08      	ldr	r3, [pc, #32]	@ (800a38c <_dtoa_r+0x58c>)
 800a36a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a36e:	2200      	movs	r2, #0
 800a370:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a374:	f7f6 f950 	bl	8000618 <__aeabi_dmul>
 800a378:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a37c:	e7c4      	b.n	800a308 <_dtoa_r+0x508>
 800a37e:	bf00      	nop
 800a380:	0800d6d0 	.word	0x0800d6d0
 800a384:	0800d6a8 	.word	0x0800d6a8
 800a388:	3ff00000 	.word	0x3ff00000
 800a38c:	40240000 	.word	0x40240000
 800a390:	401c0000 	.word	0x401c0000
 800a394:	40140000 	.word	0x40140000
 800a398:	3fe00000 	.word	0x3fe00000
 800a39c:	4631      	mov	r1, r6
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f7f6 f93a 	bl	8000618 <__aeabi_dmul>
 800a3a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a3a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a3aa:	4656      	mov	r6, sl
 800a3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3b0:	f7f6 fbe2 	bl	8000b78 <__aeabi_d2iz>
 800a3b4:	4605      	mov	r5, r0
 800a3b6:	f7f6 f8c5 	bl	8000544 <__aeabi_i2d>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	460b      	mov	r3, r1
 800a3be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3c2:	f7f5 ff71 	bl	80002a8 <__aeabi_dsub>
 800a3c6:	3530      	adds	r5, #48	@ 0x30
 800a3c8:	f806 5b01 	strb.w	r5, [r6], #1
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	42a6      	cmp	r6, r4
 800a3d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3d6:	f04f 0200 	mov.w	r2, #0
 800a3da:	d124      	bne.n	800a426 <_dtoa_r+0x626>
 800a3dc:	4baf      	ldr	r3, [pc, #700]	@ (800a69c <_dtoa_r+0x89c>)
 800a3de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a3e2:	f7f5 ff63 	bl	80002ac <__adddf3>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ee:	f7f6 fba3 	bl	8000b38 <__aeabi_dcmpgt>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d163      	bne.n	800a4be <_dtoa_r+0x6be>
 800a3f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a3fa:	49a8      	ldr	r1, [pc, #672]	@ (800a69c <_dtoa_r+0x89c>)
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	f7f5 ff53 	bl	80002a8 <__aeabi_dsub>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a40a:	f7f6 fb77 	bl	8000afc <__aeabi_dcmplt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	f43f af14 	beq.w	800a23c <_dtoa_r+0x43c>
 800a414:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a416:	1e73      	subs	r3, r6, #1
 800a418:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a41a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a41e:	2b30      	cmp	r3, #48	@ 0x30
 800a420:	d0f8      	beq.n	800a414 <_dtoa_r+0x614>
 800a422:	4647      	mov	r7, r8
 800a424:	e03b      	b.n	800a49e <_dtoa_r+0x69e>
 800a426:	4b9e      	ldr	r3, [pc, #632]	@ (800a6a0 <_dtoa_r+0x8a0>)
 800a428:	f7f6 f8f6 	bl	8000618 <__aeabi_dmul>
 800a42c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a430:	e7bc      	b.n	800a3ac <_dtoa_r+0x5ac>
 800a432:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a436:	4656      	mov	r6, sl
 800a438:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a43c:	4620      	mov	r0, r4
 800a43e:	4629      	mov	r1, r5
 800a440:	f7f6 fa14 	bl	800086c <__aeabi_ddiv>
 800a444:	f7f6 fb98 	bl	8000b78 <__aeabi_d2iz>
 800a448:	4680      	mov	r8, r0
 800a44a:	f7f6 f87b 	bl	8000544 <__aeabi_i2d>
 800a44e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a452:	f7f6 f8e1 	bl	8000618 <__aeabi_dmul>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4620      	mov	r0, r4
 800a45c:	4629      	mov	r1, r5
 800a45e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a462:	f7f5 ff21 	bl	80002a8 <__aeabi_dsub>
 800a466:	f806 4b01 	strb.w	r4, [r6], #1
 800a46a:	9d03      	ldr	r5, [sp, #12]
 800a46c:	eba6 040a 	sub.w	r4, r6, sl
 800a470:	42a5      	cmp	r5, r4
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	d133      	bne.n	800a4e0 <_dtoa_r+0x6e0>
 800a478:	f7f5 ff18 	bl	80002ac <__adddf3>
 800a47c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a480:	4604      	mov	r4, r0
 800a482:	460d      	mov	r5, r1
 800a484:	f7f6 fb58 	bl	8000b38 <__aeabi_dcmpgt>
 800a488:	b9c0      	cbnz	r0, 800a4bc <_dtoa_r+0x6bc>
 800a48a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a48e:	4620      	mov	r0, r4
 800a490:	4629      	mov	r1, r5
 800a492:	f7f6 fb29 	bl	8000ae8 <__aeabi_dcmpeq>
 800a496:	b110      	cbz	r0, 800a49e <_dtoa_r+0x69e>
 800a498:	f018 0f01 	tst.w	r8, #1
 800a49c:	d10e      	bne.n	800a4bc <_dtoa_r+0x6bc>
 800a49e:	9902      	ldr	r1, [sp, #8]
 800a4a0:	4648      	mov	r0, r9
 800a4a2:	f000 ff09 	bl	800b2b8 <_Bfree>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	7033      	strb	r3, [r6, #0]
 800a4aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4ac:	3701      	adds	r7, #1
 800a4ae:	601f      	str	r7, [r3, #0]
 800a4b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 824b 	beq.w	800a94e <_dtoa_r+0xb4e>
 800a4b8:	601e      	str	r6, [r3, #0]
 800a4ba:	e248      	b.n	800a94e <_dtoa_r+0xb4e>
 800a4bc:	46b8      	mov	r8, r7
 800a4be:	4633      	mov	r3, r6
 800a4c0:	461e      	mov	r6, r3
 800a4c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4c6:	2a39      	cmp	r2, #57	@ 0x39
 800a4c8:	d106      	bne.n	800a4d8 <_dtoa_r+0x6d8>
 800a4ca:	459a      	cmp	sl, r3
 800a4cc:	d1f8      	bne.n	800a4c0 <_dtoa_r+0x6c0>
 800a4ce:	2230      	movs	r2, #48	@ 0x30
 800a4d0:	f108 0801 	add.w	r8, r8, #1
 800a4d4:	f88a 2000 	strb.w	r2, [sl]
 800a4d8:	781a      	ldrb	r2, [r3, #0]
 800a4da:	3201      	adds	r2, #1
 800a4dc:	701a      	strb	r2, [r3, #0]
 800a4de:	e7a0      	b.n	800a422 <_dtoa_r+0x622>
 800a4e0:	4b6f      	ldr	r3, [pc, #444]	@ (800a6a0 <_dtoa_r+0x8a0>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f7f6 f898 	bl	8000618 <__aeabi_dmul>
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	460d      	mov	r5, r1
 800a4f0:	f7f6 fafa 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d09f      	beq.n	800a438 <_dtoa_r+0x638>
 800a4f8:	e7d1      	b.n	800a49e <_dtoa_r+0x69e>
 800a4fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4fc:	2a00      	cmp	r2, #0
 800a4fe:	f000 80ea 	beq.w	800a6d6 <_dtoa_r+0x8d6>
 800a502:	9a07      	ldr	r2, [sp, #28]
 800a504:	2a01      	cmp	r2, #1
 800a506:	f300 80cd 	bgt.w	800a6a4 <_dtoa_r+0x8a4>
 800a50a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a50c:	2a00      	cmp	r2, #0
 800a50e:	f000 80c1 	beq.w	800a694 <_dtoa_r+0x894>
 800a512:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a516:	9c08      	ldr	r4, [sp, #32]
 800a518:	9e00      	ldr	r6, [sp, #0]
 800a51a:	9a00      	ldr	r2, [sp, #0]
 800a51c:	441a      	add	r2, r3
 800a51e:	9200      	str	r2, [sp, #0]
 800a520:	9a06      	ldr	r2, [sp, #24]
 800a522:	2101      	movs	r1, #1
 800a524:	441a      	add	r2, r3
 800a526:	4648      	mov	r0, r9
 800a528:	9206      	str	r2, [sp, #24]
 800a52a:	f000 ffc3 	bl	800b4b4 <__i2b>
 800a52e:	4605      	mov	r5, r0
 800a530:	b166      	cbz	r6, 800a54c <_dtoa_r+0x74c>
 800a532:	9b06      	ldr	r3, [sp, #24]
 800a534:	2b00      	cmp	r3, #0
 800a536:	dd09      	ble.n	800a54c <_dtoa_r+0x74c>
 800a538:	42b3      	cmp	r3, r6
 800a53a:	9a00      	ldr	r2, [sp, #0]
 800a53c:	bfa8      	it	ge
 800a53e:	4633      	movge	r3, r6
 800a540:	1ad2      	subs	r2, r2, r3
 800a542:	9200      	str	r2, [sp, #0]
 800a544:	9a06      	ldr	r2, [sp, #24]
 800a546:	1af6      	subs	r6, r6, r3
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	9306      	str	r3, [sp, #24]
 800a54c:	9b08      	ldr	r3, [sp, #32]
 800a54e:	b30b      	cbz	r3, 800a594 <_dtoa_r+0x794>
 800a550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 80c6 	beq.w	800a6e4 <_dtoa_r+0x8e4>
 800a558:	2c00      	cmp	r4, #0
 800a55a:	f000 80c0 	beq.w	800a6de <_dtoa_r+0x8de>
 800a55e:	4629      	mov	r1, r5
 800a560:	4622      	mov	r2, r4
 800a562:	4648      	mov	r0, r9
 800a564:	f001 f85e 	bl	800b624 <__pow5mult>
 800a568:	9a02      	ldr	r2, [sp, #8]
 800a56a:	4601      	mov	r1, r0
 800a56c:	4605      	mov	r5, r0
 800a56e:	4648      	mov	r0, r9
 800a570:	f000 ffb6 	bl	800b4e0 <__multiply>
 800a574:	9902      	ldr	r1, [sp, #8]
 800a576:	4680      	mov	r8, r0
 800a578:	4648      	mov	r0, r9
 800a57a:	f000 fe9d 	bl	800b2b8 <_Bfree>
 800a57e:	9b08      	ldr	r3, [sp, #32]
 800a580:	1b1b      	subs	r3, r3, r4
 800a582:	9308      	str	r3, [sp, #32]
 800a584:	f000 80b1 	beq.w	800a6ea <_dtoa_r+0x8ea>
 800a588:	9a08      	ldr	r2, [sp, #32]
 800a58a:	4641      	mov	r1, r8
 800a58c:	4648      	mov	r0, r9
 800a58e:	f001 f849 	bl	800b624 <__pow5mult>
 800a592:	9002      	str	r0, [sp, #8]
 800a594:	2101      	movs	r1, #1
 800a596:	4648      	mov	r0, r9
 800a598:	f000 ff8c 	bl	800b4b4 <__i2b>
 800a59c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a59e:	4604      	mov	r4, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 81d8 	beq.w	800a956 <_dtoa_r+0xb56>
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	4601      	mov	r1, r0
 800a5aa:	4648      	mov	r0, r9
 800a5ac:	f001 f83a 	bl	800b624 <__pow5mult>
 800a5b0:	9b07      	ldr	r3, [sp, #28]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	f300 809f 	bgt.w	800a6f8 <_dtoa_r+0x8f8>
 800a5ba:	9b04      	ldr	r3, [sp, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f040 8097 	bne.w	800a6f0 <_dtoa_r+0x8f0>
 800a5c2:	9b05      	ldr	r3, [sp, #20]
 800a5c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f040 8093 	bne.w	800a6f4 <_dtoa_r+0x8f4>
 800a5ce:	9b05      	ldr	r3, [sp, #20]
 800a5d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a5d4:	0d1b      	lsrs	r3, r3, #20
 800a5d6:	051b      	lsls	r3, r3, #20
 800a5d8:	b133      	cbz	r3, 800a5e8 <_dtoa_r+0x7e8>
 800a5da:	9b00      	ldr	r3, [sp, #0]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	9b06      	ldr	r3, [sp, #24]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	9306      	str	r3, [sp, #24]
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	9308      	str	r3, [sp, #32]
 800a5ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 81b8 	beq.w	800a962 <_dtoa_r+0xb62>
 800a5f2:	6923      	ldr	r3, [r4, #16]
 800a5f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5f8:	6918      	ldr	r0, [r3, #16]
 800a5fa:	f000 ff0f 	bl	800b41c <__hi0bits>
 800a5fe:	f1c0 0020 	rsb	r0, r0, #32
 800a602:	9b06      	ldr	r3, [sp, #24]
 800a604:	4418      	add	r0, r3
 800a606:	f010 001f 	ands.w	r0, r0, #31
 800a60a:	f000 8082 	beq.w	800a712 <_dtoa_r+0x912>
 800a60e:	f1c0 0320 	rsb	r3, r0, #32
 800a612:	2b04      	cmp	r3, #4
 800a614:	dd73      	ble.n	800a6fe <_dtoa_r+0x8fe>
 800a616:	9b00      	ldr	r3, [sp, #0]
 800a618:	f1c0 001c 	rsb	r0, r0, #28
 800a61c:	4403      	add	r3, r0
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	9b06      	ldr	r3, [sp, #24]
 800a622:	4403      	add	r3, r0
 800a624:	4406      	add	r6, r0
 800a626:	9306      	str	r3, [sp, #24]
 800a628:	9b00      	ldr	r3, [sp, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	dd05      	ble.n	800a63a <_dtoa_r+0x83a>
 800a62e:	9902      	ldr	r1, [sp, #8]
 800a630:	461a      	mov	r2, r3
 800a632:	4648      	mov	r0, r9
 800a634:	f001 f850 	bl	800b6d8 <__lshift>
 800a638:	9002      	str	r0, [sp, #8]
 800a63a:	9b06      	ldr	r3, [sp, #24]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	dd05      	ble.n	800a64c <_dtoa_r+0x84c>
 800a640:	4621      	mov	r1, r4
 800a642:	461a      	mov	r2, r3
 800a644:	4648      	mov	r0, r9
 800a646:	f001 f847 	bl	800b6d8 <__lshift>
 800a64a:	4604      	mov	r4, r0
 800a64c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d061      	beq.n	800a716 <_dtoa_r+0x916>
 800a652:	9802      	ldr	r0, [sp, #8]
 800a654:	4621      	mov	r1, r4
 800a656:	f001 f8ab 	bl	800b7b0 <__mcmp>
 800a65a:	2800      	cmp	r0, #0
 800a65c:	da5b      	bge.n	800a716 <_dtoa_r+0x916>
 800a65e:	2300      	movs	r3, #0
 800a660:	9902      	ldr	r1, [sp, #8]
 800a662:	220a      	movs	r2, #10
 800a664:	4648      	mov	r0, r9
 800a666:	f000 fe49 	bl	800b2fc <__multadd>
 800a66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a66c:	9002      	str	r0, [sp, #8]
 800a66e:	f107 38ff 	add.w	r8, r7, #4294967295
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 8177 	beq.w	800a966 <_dtoa_r+0xb66>
 800a678:	4629      	mov	r1, r5
 800a67a:	2300      	movs	r3, #0
 800a67c:	220a      	movs	r2, #10
 800a67e:	4648      	mov	r0, r9
 800a680:	f000 fe3c 	bl	800b2fc <__multadd>
 800a684:	f1bb 0f00 	cmp.w	fp, #0
 800a688:	4605      	mov	r5, r0
 800a68a:	dc6f      	bgt.n	800a76c <_dtoa_r+0x96c>
 800a68c:	9b07      	ldr	r3, [sp, #28]
 800a68e:	2b02      	cmp	r3, #2
 800a690:	dc49      	bgt.n	800a726 <_dtoa_r+0x926>
 800a692:	e06b      	b.n	800a76c <_dtoa_r+0x96c>
 800a694:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a696:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a69a:	e73c      	b.n	800a516 <_dtoa_r+0x716>
 800a69c:	3fe00000 	.word	0x3fe00000
 800a6a0:	40240000 	.word	0x40240000
 800a6a4:	9b03      	ldr	r3, [sp, #12]
 800a6a6:	1e5c      	subs	r4, r3, #1
 800a6a8:	9b08      	ldr	r3, [sp, #32]
 800a6aa:	42a3      	cmp	r3, r4
 800a6ac:	db09      	blt.n	800a6c2 <_dtoa_r+0x8c2>
 800a6ae:	1b1c      	subs	r4, r3, r4
 800a6b0:	9b03      	ldr	r3, [sp, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f6bf af30 	bge.w	800a518 <_dtoa_r+0x718>
 800a6b8:	9b00      	ldr	r3, [sp, #0]
 800a6ba:	9a03      	ldr	r2, [sp, #12]
 800a6bc:	1a9e      	subs	r6, r3, r2
 800a6be:	2300      	movs	r3, #0
 800a6c0:	e72b      	b.n	800a51a <_dtoa_r+0x71a>
 800a6c2:	9b08      	ldr	r3, [sp, #32]
 800a6c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6c6:	9408      	str	r4, [sp, #32]
 800a6c8:	1ae3      	subs	r3, r4, r3
 800a6ca:	441a      	add	r2, r3
 800a6cc:	9e00      	ldr	r6, [sp, #0]
 800a6ce:	9b03      	ldr	r3, [sp, #12]
 800a6d0:	920d      	str	r2, [sp, #52]	@ 0x34
 800a6d2:	2400      	movs	r4, #0
 800a6d4:	e721      	b.n	800a51a <_dtoa_r+0x71a>
 800a6d6:	9c08      	ldr	r4, [sp, #32]
 800a6d8:	9e00      	ldr	r6, [sp, #0]
 800a6da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a6dc:	e728      	b.n	800a530 <_dtoa_r+0x730>
 800a6de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a6e2:	e751      	b.n	800a588 <_dtoa_r+0x788>
 800a6e4:	9a08      	ldr	r2, [sp, #32]
 800a6e6:	9902      	ldr	r1, [sp, #8]
 800a6e8:	e750      	b.n	800a58c <_dtoa_r+0x78c>
 800a6ea:	f8cd 8008 	str.w	r8, [sp, #8]
 800a6ee:	e751      	b.n	800a594 <_dtoa_r+0x794>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	e779      	b.n	800a5e8 <_dtoa_r+0x7e8>
 800a6f4:	9b04      	ldr	r3, [sp, #16]
 800a6f6:	e777      	b.n	800a5e8 <_dtoa_r+0x7e8>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	9308      	str	r3, [sp, #32]
 800a6fc:	e779      	b.n	800a5f2 <_dtoa_r+0x7f2>
 800a6fe:	d093      	beq.n	800a628 <_dtoa_r+0x828>
 800a700:	9a00      	ldr	r2, [sp, #0]
 800a702:	331c      	adds	r3, #28
 800a704:	441a      	add	r2, r3
 800a706:	9200      	str	r2, [sp, #0]
 800a708:	9a06      	ldr	r2, [sp, #24]
 800a70a:	441a      	add	r2, r3
 800a70c:	441e      	add	r6, r3
 800a70e:	9206      	str	r2, [sp, #24]
 800a710:	e78a      	b.n	800a628 <_dtoa_r+0x828>
 800a712:	4603      	mov	r3, r0
 800a714:	e7f4      	b.n	800a700 <_dtoa_r+0x900>
 800a716:	9b03      	ldr	r3, [sp, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	46b8      	mov	r8, r7
 800a71c:	dc20      	bgt.n	800a760 <_dtoa_r+0x960>
 800a71e:	469b      	mov	fp, r3
 800a720:	9b07      	ldr	r3, [sp, #28]
 800a722:	2b02      	cmp	r3, #2
 800a724:	dd1e      	ble.n	800a764 <_dtoa_r+0x964>
 800a726:	f1bb 0f00 	cmp.w	fp, #0
 800a72a:	f47f adb1 	bne.w	800a290 <_dtoa_r+0x490>
 800a72e:	4621      	mov	r1, r4
 800a730:	465b      	mov	r3, fp
 800a732:	2205      	movs	r2, #5
 800a734:	4648      	mov	r0, r9
 800a736:	f000 fde1 	bl	800b2fc <__multadd>
 800a73a:	4601      	mov	r1, r0
 800a73c:	4604      	mov	r4, r0
 800a73e:	9802      	ldr	r0, [sp, #8]
 800a740:	f001 f836 	bl	800b7b0 <__mcmp>
 800a744:	2800      	cmp	r0, #0
 800a746:	f77f ada3 	ble.w	800a290 <_dtoa_r+0x490>
 800a74a:	4656      	mov	r6, sl
 800a74c:	2331      	movs	r3, #49	@ 0x31
 800a74e:	f806 3b01 	strb.w	r3, [r6], #1
 800a752:	f108 0801 	add.w	r8, r8, #1
 800a756:	e59f      	b.n	800a298 <_dtoa_r+0x498>
 800a758:	9c03      	ldr	r4, [sp, #12]
 800a75a:	46b8      	mov	r8, r7
 800a75c:	4625      	mov	r5, r4
 800a75e:	e7f4      	b.n	800a74a <_dtoa_r+0x94a>
 800a760:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a766:	2b00      	cmp	r3, #0
 800a768:	f000 8101 	beq.w	800a96e <_dtoa_r+0xb6e>
 800a76c:	2e00      	cmp	r6, #0
 800a76e:	dd05      	ble.n	800a77c <_dtoa_r+0x97c>
 800a770:	4629      	mov	r1, r5
 800a772:	4632      	mov	r2, r6
 800a774:	4648      	mov	r0, r9
 800a776:	f000 ffaf 	bl	800b6d8 <__lshift>
 800a77a:	4605      	mov	r5, r0
 800a77c:	9b08      	ldr	r3, [sp, #32]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d05c      	beq.n	800a83c <_dtoa_r+0xa3c>
 800a782:	6869      	ldr	r1, [r5, #4]
 800a784:	4648      	mov	r0, r9
 800a786:	f000 fd57 	bl	800b238 <_Balloc>
 800a78a:	4606      	mov	r6, r0
 800a78c:	b928      	cbnz	r0, 800a79a <_dtoa_r+0x99a>
 800a78e:	4b82      	ldr	r3, [pc, #520]	@ (800a998 <_dtoa_r+0xb98>)
 800a790:	4602      	mov	r2, r0
 800a792:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a796:	f7ff bb4a 	b.w	8009e2e <_dtoa_r+0x2e>
 800a79a:	692a      	ldr	r2, [r5, #16]
 800a79c:	3202      	adds	r2, #2
 800a79e:	0092      	lsls	r2, r2, #2
 800a7a0:	f105 010c 	add.w	r1, r5, #12
 800a7a4:	300c      	adds	r0, #12
 800a7a6:	f7ff fa6c 	bl	8009c82 <memcpy>
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4648      	mov	r0, r9
 800a7b0:	f000 ff92 	bl	800b6d8 <__lshift>
 800a7b4:	f10a 0301 	add.w	r3, sl, #1
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	eb0a 030b 	add.w	r3, sl, fp
 800a7be:	9308      	str	r3, [sp, #32]
 800a7c0:	9b04      	ldr	r3, [sp, #16]
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	462f      	mov	r7, r5
 800a7c8:	9306      	str	r3, [sp, #24]
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	9b00      	ldr	r3, [sp, #0]
 800a7ce:	9802      	ldr	r0, [sp, #8]
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	f103 3bff 	add.w	fp, r3, #4294967295
 800a7d6:	f7ff fa89 	bl	8009cec <quorem>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	3330      	adds	r3, #48	@ 0x30
 800a7de:	9003      	str	r0, [sp, #12]
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	9802      	ldr	r0, [sp, #8]
 800a7e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7e6:	f000 ffe3 	bl	800b7b0 <__mcmp>
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	9004      	str	r0, [sp, #16]
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	4648      	mov	r0, r9
 800a7f2:	f000 fff9 	bl	800b7e8 <__mdiff>
 800a7f6:	68c2      	ldr	r2, [r0, #12]
 800a7f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	bb02      	cbnz	r2, 800a840 <_dtoa_r+0xa40>
 800a7fe:	4601      	mov	r1, r0
 800a800:	9802      	ldr	r0, [sp, #8]
 800a802:	f000 ffd5 	bl	800b7b0 <__mcmp>
 800a806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a808:	4602      	mov	r2, r0
 800a80a:	4631      	mov	r1, r6
 800a80c:	4648      	mov	r0, r9
 800a80e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a810:	9309      	str	r3, [sp, #36]	@ 0x24
 800a812:	f000 fd51 	bl	800b2b8 <_Bfree>
 800a816:	9b07      	ldr	r3, [sp, #28]
 800a818:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a81a:	9e00      	ldr	r6, [sp, #0]
 800a81c:	ea42 0103 	orr.w	r1, r2, r3
 800a820:	9b06      	ldr	r3, [sp, #24]
 800a822:	4319      	orrs	r1, r3
 800a824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a826:	d10d      	bne.n	800a844 <_dtoa_r+0xa44>
 800a828:	2b39      	cmp	r3, #57	@ 0x39
 800a82a:	d027      	beq.n	800a87c <_dtoa_r+0xa7c>
 800a82c:	9a04      	ldr	r2, [sp, #16]
 800a82e:	2a00      	cmp	r2, #0
 800a830:	dd01      	ble.n	800a836 <_dtoa_r+0xa36>
 800a832:	9b03      	ldr	r3, [sp, #12]
 800a834:	3331      	adds	r3, #49	@ 0x31
 800a836:	f88b 3000 	strb.w	r3, [fp]
 800a83a:	e52e      	b.n	800a29a <_dtoa_r+0x49a>
 800a83c:	4628      	mov	r0, r5
 800a83e:	e7b9      	b.n	800a7b4 <_dtoa_r+0x9b4>
 800a840:	2201      	movs	r2, #1
 800a842:	e7e2      	b.n	800a80a <_dtoa_r+0xa0a>
 800a844:	9904      	ldr	r1, [sp, #16]
 800a846:	2900      	cmp	r1, #0
 800a848:	db04      	blt.n	800a854 <_dtoa_r+0xa54>
 800a84a:	9807      	ldr	r0, [sp, #28]
 800a84c:	4301      	orrs	r1, r0
 800a84e:	9806      	ldr	r0, [sp, #24]
 800a850:	4301      	orrs	r1, r0
 800a852:	d120      	bne.n	800a896 <_dtoa_r+0xa96>
 800a854:	2a00      	cmp	r2, #0
 800a856:	ddee      	ble.n	800a836 <_dtoa_r+0xa36>
 800a858:	9902      	ldr	r1, [sp, #8]
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	2201      	movs	r2, #1
 800a85e:	4648      	mov	r0, r9
 800a860:	f000 ff3a 	bl	800b6d8 <__lshift>
 800a864:	4621      	mov	r1, r4
 800a866:	9002      	str	r0, [sp, #8]
 800a868:	f000 ffa2 	bl	800b7b0 <__mcmp>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	9b00      	ldr	r3, [sp, #0]
 800a870:	dc02      	bgt.n	800a878 <_dtoa_r+0xa78>
 800a872:	d1e0      	bne.n	800a836 <_dtoa_r+0xa36>
 800a874:	07da      	lsls	r2, r3, #31
 800a876:	d5de      	bpl.n	800a836 <_dtoa_r+0xa36>
 800a878:	2b39      	cmp	r3, #57	@ 0x39
 800a87a:	d1da      	bne.n	800a832 <_dtoa_r+0xa32>
 800a87c:	2339      	movs	r3, #57	@ 0x39
 800a87e:	f88b 3000 	strb.w	r3, [fp]
 800a882:	4633      	mov	r3, r6
 800a884:	461e      	mov	r6, r3
 800a886:	3b01      	subs	r3, #1
 800a888:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a88c:	2a39      	cmp	r2, #57	@ 0x39
 800a88e:	d04e      	beq.n	800a92e <_dtoa_r+0xb2e>
 800a890:	3201      	adds	r2, #1
 800a892:	701a      	strb	r2, [r3, #0]
 800a894:	e501      	b.n	800a29a <_dtoa_r+0x49a>
 800a896:	2a00      	cmp	r2, #0
 800a898:	dd03      	ble.n	800a8a2 <_dtoa_r+0xaa2>
 800a89a:	2b39      	cmp	r3, #57	@ 0x39
 800a89c:	d0ee      	beq.n	800a87c <_dtoa_r+0xa7c>
 800a89e:	3301      	adds	r3, #1
 800a8a0:	e7c9      	b.n	800a836 <_dtoa_r+0xa36>
 800a8a2:	9a00      	ldr	r2, [sp, #0]
 800a8a4:	9908      	ldr	r1, [sp, #32]
 800a8a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a8aa:	428a      	cmp	r2, r1
 800a8ac:	d028      	beq.n	800a900 <_dtoa_r+0xb00>
 800a8ae:	9902      	ldr	r1, [sp, #8]
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	220a      	movs	r2, #10
 800a8b4:	4648      	mov	r0, r9
 800a8b6:	f000 fd21 	bl	800b2fc <__multadd>
 800a8ba:	42af      	cmp	r7, r5
 800a8bc:	9002      	str	r0, [sp, #8]
 800a8be:	f04f 0300 	mov.w	r3, #0
 800a8c2:	f04f 020a 	mov.w	r2, #10
 800a8c6:	4639      	mov	r1, r7
 800a8c8:	4648      	mov	r0, r9
 800a8ca:	d107      	bne.n	800a8dc <_dtoa_r+0xadc>
 800a8cc:	f000 fd16 	bl	800b2fc <__multadd>
 800a8d0:	4607      	mov	r7, r0
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	9b00      	ldr	r3, [sp, #0]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	e777      	b.n	800a7cc <_dtoa_r+0x9cc>
 800a8dc:	f000 fd0e 	bl	800b2fc <__multadd>
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	4607      	mov	r7, r0
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	220a      	movs	r2, #10
 800a8e8:	4648      	mov	r0, r9
 800a8ea:	f000 fd07 	bl	800b2fc <__multadd>
 800a8ee:	4605      	mov	r5, r0
 800a8f0:	e7f0      	b.n	800a8d4 <_dtoa_r+0xad4>
 800a8f2:	f1bb 0f00 	cmp.w	fp, #0
 800a8f6:	bfcc      	ite	gt
 800a8f8:	465e      	movgt	r6, fp
 800a8fa:	2601      	movle	r6, #1
 800a8fc:	4456      	add	r6, sl
 800a8fe:	2700      	movs	r7, #0
 800a900:	9902      	ldr	r1, [sp, #8]
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	2201      	movs	r2, #1
 800a906:	4648      	mov	r0, r9
 800a908:	f000 fee6 	bl	800b6d8 <__lshift>
 800a90c:	4621      	mov	r1, r4
 800a90e:	9002      	str	r0, [sp, #8]
 800a910:	f000 ff4e 	bl	800b7b0 <__mcmp>
 800a914:	2800      	cmp	r0, #0
 800a916:	dcb4      	bgt.n	800a882 <_dtoa_r+0xa82>
 800a918:	d102      	bne.n	800a920 <_dtoa_r+0xb20>
 800a91a:	9b00      	ldr	r3, [sp, #0]
 800a91c:	07db      	lsls	r3, r3, #31
 800a91e:	d4b0      	bmi.n	800a882 <_dtoa_r+0xa82>
 800a920:	4633      	mov	r3, r6
 800a922:	461e      	mov	r6, r3
 800a924:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a928:	2a30      	cmp	r2, #48	@ 0x30
 800a92a:	d0fa      	beq.n	800a922 <_dtoa_r+0xb22>
 800a92c:	e4b5      	b.n	800a29a <_dtoa_r+0x49a>
 800a92e:	459a      	cmp	sl, r3
 800a930:	d1a8      	bne.n	800a884 <_dtoa_r+0xa84>
 800a932:	2331      	movs	r3, #49	@ 0x31
 800a934:	f108 0801 	add.w	r8, r8, #1
 800a938:	f88a 3000 	strb.w	r3, [sl]
 800a93c:	e4ad      	b.n	800a29a <_dtoa_r+0x49a>
 800a93e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a940:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a99c <_dtoa_r+0xb9c>
 800a944:	b11b      	cbz	r3, 800a94e <_dtoa_r+0xb4e>
 800a946:	f10a 0308 	add.w	r3, sl, #8
 800a94a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	4650      	mov	r0, sl
 800a950:	b017      	add	sp, #92	@ 0x5c
 800a952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a956:	9b07      	ldr	r3, [sp, #28]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	f77f ae2e 	ble.w	800a5ba <_dtoa_r+0x7ba>
 800a95e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a960:	9308      	str	r3, [sp, #32]
 800a962:	2001      	movs	r0, #1
 800a964:	e64d      	b.n	800a602 <_dtoa_r+0x802>
 800a966:	f1bb 0f00 	cmp.w	fp, #0
 800a96a:	f77f aed9 	ble.w	800a720 <_dtoa_r+0x920>
 800a96e:	4656      	mov	r6, sl
 800a970:	9802      	ldr	r0, [sp, #8]
 800a972:	4621      	mov	r1, r4
 800a974:	f7ff f9ba 	bl	8009cec <quorem>
 800a978:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a97c:	f806 3b01 	strb.w	r3, [r6], #1
 800a980:	eba6 020a 	sub.w	r2, r6, sl
 800a984:	4593      	cmp	fp, r2
 800a986:	ddb4      	ble.n	800a8f2 <_dtoa_r+0xaf2>
 800a988:	9902      	ldr	r1, [sp, #8]
 800a98a:	2300      	movs	r3, #0
 800a98c:	220a      	movs	r2, #10
 800a98e:	4648      	mov	r0, r9
 800a990:	f000 fcb4 	bl	800b2fc <__multadd>
 800a994:	9002      	str	r0, [sp, #8]
 800a996:	e7eb      	b.n	800a970 <_dtoa_r+0xb70>
 800a998:	0800d46c 	.word	0x0800d46c
 800a99c:	0800d407 	.word	0x0800d407

0800a9a0 <_free_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	2900      	cmp	r1, #0
 800a9a6:	d041      	beq.n	800aa2c <_free_r+0x8c>
 800a9a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9ac:	1f0c      	subs	r4, r1, #4
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	bfb8      	it	lt
 800a9b2:	18e4      	addlt	r4, r4, r3
 800a9b4:	f000 fc34 	bl	800b220 <__malloc_lock>
 800a9b8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa30 <_free_r+0x90>)
 800a9ba:	6813      	ldr	r3, [r2, #0]
 800a9bc:	b933      	cbnz	r3, 800a9cc <_free_r+0x2c>
 800a9be:	6063      	str	r3, [r4, #4]
 800a9c0:	6014      	str	r4, [r2, #0]
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9c8:	f000 bc30 	b.w	800b22c <__malloc_unlock>
 800a9cc:	42a3      	cmp	r3, r4
 800a9ce:	d908      	bls.n	800a9e2 <_free_r+0x42>
 800a9d0:	6820      	ldr	r0, [r4, #0]
 800a9d2:	1821      	adds	r1, r4, r0
 800a9d4:	428b      	cmp	r3, r1
 800a9d6:	bf01      	itttt	eq
 800a9d8:	6819      	ldreq	r1, [r3, #0]
 800a9da:	685b      	ldreq	r3, [r3, #4]
 800a9dc:	1809      	addeq	r1, r1, r0
 800a9de:	6021      	streq	r1, [r4, #0]
 800a9e0:	e7ed      	b.n	800a9be <_free_r+0x1e>
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	b10b      	cbz	r3, 800a9ec <_free_r+0x4c>
 800a9e8:	42a3      	cmp	r3, r4
 800a9ea:	d9fa      	bls.n	800a9e2 <_free_r+0x42>
 800a9ec:	6811      	ldr	r1, [r2, #0]
 800a9ee:	1850      	adds	r0, r2, r1
 800a9f0:	42a0      	cmp	r0, r4
 800a9f2:	d10b      	bne.n	800aa0c <_free_r+0x6c>
 800a9f4:	6820      	ldr	r0, [r4, #0]
 800a9f6:	4401      	add	r1, r0
 800a9f8:	1850      	adds	r0, r2, r1
 800a9fa:	4283      	cmp	r3, r0
 800a9fc:	6011      	str	r1, [r2, #0]
 800a9fe:	d1e0      	bne.n	800a9c2 <_free_r+0x22>
 800aa00:	6818      	ldr	r0, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	6053      	str	r3, [r2, #4]
 800aa06:	4408      	add	r0, r1
 800aa08:	6010      	str	r0, [r2, #0]
 800aa0a:	e7da      	b.n	800a9c2 <_free_r+0x22>
 800aa0c:	d902      	bls.n	800aa14 <_free_r+0x74>
 800aa0e:	230c      	movs	r3, #12
 800aa10:	602b      	str	r3, [r5, #0]
 800aa12:	e7d6      	b.n	800a9c2 <_free_r+0x22>
 800aa14:	6820      	ldr	r0, [r4, #0]
 800aa16:	1821      	adds	r1, r4, r0
 800aa18:	428b      	cmp	r3, r1
 800aa1a:	bf04      	itt	eq
 800aa1c:	6819      	ldreq	r1, [r3, #0]
 800aa1e:	685b      	ldreq	r3, [r3, #4]
 800aa20:	6063      	str	r3, [r4, #4]
 800aa22:	bf04      	itt	eq
 800aa24:	1809      	addeq	r1, r1, r0
 800aa26:	6021      	streq	r1, [r4, #0]
 800aa28:	6054      	str	r4, [r2, #4]
 800aa2a:	e7ca      	b.n	800a9c2 <_free_r+0x22>
 800aa2c:	bd38      	pop	{r3, r4, r5, pc}
 800aa2e:	bf00      	nop
 800aa30:	20005a94 	.word	0x20005a94

0800aa34 <rshift>:
 800aa34:	6903      	ldr	r3, [r0, #16]
 800aa36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa42:	f100 0414 	add.w	r4, r0, #20
 800aa46:	dd45      	ble.n	800aad4 <rshift+0xa0>
 800aa48:	f011 011f 	ands.w	r1, r1, #31
 800aa4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa54:	d10c      	bne.n	800aa70 <rshift+0x3c>
 800aa56:	f100 0710 	add.w	r7, r0, #16
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	42b1      	cmp	r1, r6
 800aa5e:	d334      	bcc.n	800aaca <rshift+0x96>
 800aa60:	1a9b      	subs	r3, r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	1eea      	subs	r2, r5, #3
 800aa66:	4296      	cmp	r6, r2
 800aa68:	bf38      	it	cc
 800aa6a:	2300      	movcc	r3, #0
 800aa6c:	4423      	add	r3, r4
 800aa6e:	e015      	b.n	800aa9c <rshift+0x68>
 800aa70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa74:	f1c1 0820 	rsb	r8, r1, #32
 800aa78:	40cf      	lsrs	r7, r1
 800aa7a:	f105 0e04 	add.w	lr, r5, #4
 800aa7e:	46a1      	mov	r9, r4
 800aa80:	4576      	cmp	r6, lr
 800aa82:	46f4      	mov	ip, lr
 800aa84:	d815      	bhi.n	800aab2 <rshift+0x7e>
 800aa86:	1a9a      	subs	r2, r3, r2
 800aa88:	0092      	lsls	r2, r2, #2
 800aa8a:	3a04      	subs	r2, #4
 800aa8c:	3501      	adds	r5, #1
 800aa8e:	42ae      	cmp	r6, r5
 800aa90:	bf38      	it	cc
 800aa92:	2200      	movcc	r2, #0
 800aa94:	18a3      	adds	r3, r4, r2
 800aa96:	50a7      	str	r7, [r4, r2]
 800aa98:	b107      	cbz	r7, 800aa9c <rshift+0x68>
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	1b1a      	subs	r2, r3, r4
 800aa9e:	42a3      	cmp	r3, r4
 800aaa0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aaa4:	bf08      	it	eq
 800aaa6:	2300      	moveq	r3, #0
 800aaa8:	6102      	str	r2, [r0, #16]
 800aaaa:	bf08      	it	eq
 800aaac:	6143      	streq	r3, [r0, #20]
 800aaae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aab2:	f8dc c000 	ldr.w	ip, [ip]
 800aab6:	fa0c fc08 	lsl.w	ip, ip, r8
 800aaba:	ea4c 0707 	orr.w	r7, ip, r7
 800aabe:	f849 7b04 	str.w	r7, [r9], #4
 800aac2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aac6:	40cf      	lsrs	r7, r1
 800aac8:	e7da      	b.n	800aa80 <rshift+0x4c>
 800aaca:	f851 cb04 	ldr.w	ip, [r1], #4
 800aace:	f847 cf04 	str.w	ip, [r7, #4]!
 800aad2:	e7c3      	b.n	800aa5c <rshift+0x28>
 800aad4:	4623      	mov	r3, r4
 800aad6:	e7e1      	b.n	800aa9c <rshift+0x68>

0800aad8 <__hexdig_fun>:
 800aad8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aadc:	2b09      	cmp	r3, #9
 800aade:	d802      	bhi.n	800aae6 <__hexdig_fun+0xe>
 800aae0:	3820      	subs	r0, #32
 800aae2:	b2c0      	uxtb	r0, r0
 800aae4:	4770      	bx	lr
 800aae6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aaea:	2b05      	cmp	r3, #5
 800aaec:	d801      	bhi.n	800aaf2 <__hexdig_fun+0x1a>
 800aaee:	3847      	subs	r0, #71	@ 0x47
 800aaf0:	e7f7      	b.n	800aae2 <__hexdig_fun+0xa>
 800aaf2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aaf6:	2b05      	cmp	r3, #5
 800aaf8:	d801      	bhi.n	800aafe <__hexdig_fun+0x26>
 800aafa:	3827      	subs	r0, #39	@ 0x27
 800aafc:	e7f1      	b.n	800aae2 <__hexdig_fun+0xa>
 800aafe:	2000      	movs	r0, #0
 800ab00:	4770      	bx	lr
	...

0800ab04 <__gethex>:
 800ab04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab08:	b085      	sub	sp, #20
 800ab0a:	468a      	mov	sl, r1
 800ab0c:	9302      	str	r3, [sp, #8]
 800ab0e:	680b      	ldr	r3, [r1, #0]
 800ab10:	9001      	str	r0, [sp, #4]
 800ab12:	4690      	mov	r8, r2
 800ab14:	1c9c      	adds	r4, r3, #2
 800ab16:	46a1      	mov	r9, r4
 800ab18:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ab1c:	2830      	cmp	r0, #48	@ 0x30
 800ab1e:	d0fa      	beq.n	800ab16 <__gethex+0x12>
 800ab20:	eba9 0303 	sub.w	r3, r9, r3
 800ab24:	f1a3 0b02 	sub.w	fp, r3, #2
 800ab28:	f7ff ffd6 	bl	800aad8 <__hexdig_fun>
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d168      	bne.n	800ac04 <__gethex+0x100>
 800ab32:	49a0      	ldr	r1, [pc, #640]	@ (800adb4 <__gethex+0x2b0>)
 800ab34:	2201      	movs	r2, #1
 800ab36:	4648      	mov	r0, r9
 800ab38:	f7fe ff5f 	bl	80099fa <strncmp>
 800ab3c:	4607      	mov	r7, r0
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d167      	bne.n	800ac12 <__gethex+0x10e>
 800ab42:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ab46:	4626      	mov	r6, r4
 800ab48:	f7ff ffc6 	bl	800aad8 <__hexdig_fun>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d062      	beq.n	800ac16 <__gethex+0x112>
 800ab50:	4623      	mov	r3, r4
 800ab52:	7818      	ldrb	r0, [r3, #0]
 800ab54:	2830      	cmp	r0, #48	@ 0x30
 800ab56:	4699      	mov	r9, r3
 800ab58:	f103 0301 	add.w	r3, r3, #1
 800ab5c:	d0f9      	beq.n	800ab52 <__gethex+0x4e>
 800ab5e:	f7ff ffbb 	bl	800aad8 <__hexdig_fun>
 800ab62:	fab0 f580 	clz	r5, r0
 800ab66:	096d      	lsrs	r5, r5, #5
 800ab68:	f04f 0b01 	mov.w	fp, #1
 800ab6c:	464a      	mov	r2, r9
 800ab6e:	4616      	mov	r6, r2
 800ab70:	3201      	adds	r2, #1
 800ab72:	7830      	ldrb	r0, [r6, #0]
 800ab74:	f7ff ffb0 	bl	800aad8 <__hexdig_fun>
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	d1f8      	bne.n	800ab6e <__gethex+0x6a>
 800ab7c:	498d      	ldr	r1, [pc, #564]	@ (800adb4 <__gethex+0x2b0>)
 800ab7e:	2201      	movs	r2, #1
 800ab80:	4630      	mov	r0, r6
 800ab82:	f7fe ff3a 	bl	80099fa <strncmp>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d13f      	bne.n	800ac0a <__gethex+0x106>
 800ab8a:	b944      	cbnz	r4, 800ab9e <__gethex+0x9a>
 800ab8c:	1c74      	adds	r4, r6, #1
 800ab8e:	4622      	mov	r2, r4
 800ab90:	4616      	mov	r6, r2
 800ab92:	3201      	adds	r2, #1
 800ab94:	7830      	ldrb	r0, [r6, #0]
 800ab96:	f7ff ff9f 	bl	800aad8 <__hexdig_fun>
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d1f8      	bne.n	800ab90 <__gethex+0x8c>
 800ab9e:	1ba4      	subs	r4, r4, r6
 800aba0:	00a7      	lsls	r7, r4, #2
 800aba2:	7833      	ldrb	r3, [r6, #0]
 800aba4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aba8:	2b50      	cmp	r3, #80	@ 0x50
 800abaa:	d13e      	bne.n	800ac2a <__gethex+0x126>
 800abac:	7873      	ldrb	r3, [r6, #1]
 800abae:	2b2b      	cmp	r3, #43	@ 0x2b
 800abb0:	d033      	beq.n	800ac1a <__gethex+0x116>
 800abb2:	2b2d      	cmp	r3, #45	@ 0x2d
 800abb4:	d034      	beq.n	800ac20 <__gethex+0x11c>
 800abb6:	1c71      	adds	r1, r6, #1
 800abb8:	2400      	movs	r4, #0
 800abba:	7808      	ldrb	r0, [r1, #0]
 800abbc:	f7ff ff8c 	bl	800aad8 <__hexdig_fun>
 800abc0:	1e43      	subs	r3, r0, #1
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b18      	cmp	r3, #24
 800abc6:	d830      	bhi.n	800ac2a <__gethex+0x126>
 800abc8:	f1a0 0210 	sub.w	r2, r0, #16
 800abcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800abd0:	f7ff ff82 	bl	800aad8 <__hexdig_fun>
 800abd4:	f100 3cff 	add.w	ip, r0, #4294967295
 800abd8:	fa5f fc8c 	uxtb.w	ip, ip
 800abdc:	f1bc 0f18 	cmp.w	ip, #24
 800abe0:	f04f 030a 	mov.w	r3, #10
 800abe4:	d91e      	bls.n	800ac24 <__gethex+0x120>
 800abe6:	b104      	cbz	r4, 800abea <__gethex+0xe6>
 800abe8:	4252      	negs	r2, r2
 800abea:	4417      	add	r7, r2
 800abec:	f8ca 1000 	str.w	r1, [sl]
 800abf0:	b1ed      	cbz	r5, 800ac2e <__gethex+0x12a>
 800abf2:	f1bb 0f00 	cmp.w	fp, #0
 800abf6:	bf0c      	ite	eq
 800abf8:	2506      	moveq	r5, #6
 800abfa:	2500      	movne	r5, #0
 800abfc:	4628      	mov	r0, r5
 800abfe:	b005      	add	sp, #20
 800ac00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac04:	2500      	movs	r5, #0
 800ac06:	462c      	mov	r4, r5
 800ac08:	e7b0      	b.n	800ab6c <__gethex+0x68>
 800ac0a:	2c00      	cmp	r4, #0
 800ac0c:	d1c7      	bne.n	800ab9e <__gethex+0x9a>
 800ac0e:	4627      	mov	r7, r4
 800ac10:	e7c7      	b.n	800aba2 <__gethex+0x9e>
 800ac12:	464e      	mov	r6, r9
 800ac14:	462f      	mov	r7, r5
 800ac16:	2501      	movs	r5, #1
 800ac18:	e7c3      	b.n	800aba2 <__gethex+0x9e>
 800ac1a:	2400      	movs	r4, #0
 800ac1c:	1cb1      	adds	r1, r6, #2
 800ac1e:	e7cc      	b.n	800abba <__gethex+0xb6>
 800ac20:	2401      	movs	r4, #1
 800ac22:	e7fb      	b.n	800ac1c <__gethex+0x118>
 800ac24:	fb03 0002 	mla	r0, r3, r2, r0
 800ac28:	e7ce      	b.n	800abc8 <__gethex+0xc4>
 800ac2a:	4631      	mov	r1, r6
 800ac2c:	e7de      	b.n	800abec <__gethex+0xe8>
 800ac2e:	eba6 0309 	sub.w	r3, r6, r9
 800ac32:	3b01      	subs	r3, #1
 800ac34:	4629      	mov	r1, r5
 800ac36:	2b07      	cmp	r3, #7
 800ac38:	dc0a      	bgt.n	800ac50 <__gethex+0x14c>
 800ac3a:	9801      	ldr	r0, [sp, #4]
 800ac3c:	f000 fafc 	bl	800b238 <_Balloc>
 800ac40:	4604      	mov	r4, r0
 800ac42:	b940      	cbnz	r0, 800ac56 <__gethex+0x152>
 800ac44:	4b5c      	ldr	r3, [pc, #368]	@ (800adb8 <__gethex+0x2b4>)
 800ac46:	4602      	mov	r2, r0
 800ac48:	21e4      	movs	r1, #228	@ 0xe4
 800ac4a:	485c      	ldr	r0, [pc, #368]	@ (800adbc <__gethex+0x2b8>)
 800ac4c:	f7ff f830 	bl	8009cb0 <__assert_func>
 800ac50:	3101      	adds	r1, #1
 800ac52:	105b      	asrs	r3, r3, #1
 800ac54:	e7ef      	b.n	800ac36 <__gethex+0x132>
 800ac56:	f100 0a14 	add.w	sl, r0, #20
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4655      	mov	r5, sl
 800ac5e:	469b      	mov	fp, r3
 800ac60:	45b1      	cmp	r9, r6
 800ac62:	d337      	bcc.n	800acd4 <__gethex+0x1d0>
 800ac64:	f845 bb04 	str.w	fp, [r5], #4
 800ac68:	eba5 050a 	sub.w	r5, r5, sl
 800ac6c:	10ad      	asrs	r5, r5, #2
 800ac6e:	6125      	str	r5, [r4, #16]
 800ac70:	4658      	mov	r0, fp
 800ac72:	f000 fbd3 	bl	800b41c <__hi0bits>
 800ac76:	016d      	lsls	r5, r5, #5
 800ac78:	f8d8 6000 	ldr.w	r6, [r8]
 800ac7c:	1a2d      	subs	r5, r5, r0
 800ac7e:	42b5      	cmp	r5, r6
 800ac80:	dd54      	ble.n	800ad2c <__gethex+0x228>
 800ac82:	1bad      	subs	r5, r5, r6
 800ac84:	4629      	mov	r1, r5
 800ac86:	4620      	mov	r0, r4
 800ac88:	f000 ff5f 	bl	800bb4a <__any_on>
 800ac8c:	4681      	mov	r9, r0
 800ac8e:	b178      	cbz	r0, 800acb0 <__gethex+0x1ac>
 800ac90:	1e6b      	subs	r3, r5, #1
 800ac92:	1159      	asrs	r1, r3, #5
 800ac94:	f003 021f 	and.w	r2, r3, #31
 800ac98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac9c:	f04f 0901 	mov.w	r9, #1
 800aca0:	fa09 f202 	lsl.w	r2, r9, r2
 800aca4:	420a      	tst	r2, r1
 800aca6:	d003      	beq.n	800acb0 <__gethex+0x1ac>
 800aca8:	454b      	cmp	r3, r9
 800acaa:	dc36      	bgt.n	800ad1a <__gethex+0x216>
 800acac:	f04f 0902 	mov.w	r9, #2
 800acb0:	4629      	mov	r1, r5
 800acb2:	4620      	mov	r0, r4
 800acb4:	f7ff febe 	bl	800aa34 <rshift>
 800acb8:	442f      	add	r7, r5
 800acba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acbe:	42bb      	cmp	r3, r7
 800acc0:	da42      	bge.n	800ad48 <__gethex+0x244>
 800acc2:	9801      	ldr	r0, [sp, #4]
 800acc4:	4621      	mov	r1, r4
 800acc6:	f000 faf7 	bl	800b2b8 <_Bfree>
 800acca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800accc:	2300      	movs	r3, #0
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	25a3      	movs	r5, #163	@ 0xa3
 800acd2:	e793      	b.n	800abfc <__gethex+0xf8>
 800acd4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800acd8:	2a2e      	cmp	r2, #46	@ 0x2e
 800acda:	d012      	beq.n	800ad02 <__gethex+0x1fe>
 800acdc:	2b20      	cmp	r3, #32
 800acde:	d104      	bne.n	800acea <__gethex+0x1e6>
 800ace0:	f845 bb04 	str.w	fp, [r5], #4
 800ace4:	f04f 0b00 	mov.w	fp, #0
 800ace8:	465b      	mov	r3, fp
 800acea:	7830      	ldrb	r0, [r6, #0]
 800acec:	9303      	str	r3, [sp, #12]
 800acee:	f7ff fef3 	bl	800aad8 <__hexdig_fun>
 800acf2:	9b03      	ldr	r3, [sp, #12]
 800acf4:	f000 000f 	and.w	r0, r0, #15
 800acf8:	4098      	lsls	r0, r3
 800acfa:	ea4b 0b00 	orr.w	fp, fp, r0
 800acfe:	3304      	adds	r3, #4
 800ad00:	e7ae      	b.n	800ac60 <__gethex+0x15c>
 800ad02:	45b1      	cmp	r9, r6
 800ad04:	d8ea      	bhi.n	800acdc <__gethex+0x1d8>
 800ad06:	492b      	ldr	r1, [pc, #172]	@ (800adb4 <__gethex+0x2b0>)
 800ad08:	9303      	str	r3, [sp, #12]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	f7fe fe74 	bl	80099fa <strncmp>
 800ad12:	9b03      	ldr	r3, [sp, #12]
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d1e1      	bne.n	800acdc <__gethex+0x1d8>
 800ad18:	e7a2      	b.n	800ac60 <__gethex+0x15c>
 800ad1a:	1ea9      	subs	r1, r5, #2
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 ff14 	bl	800bb4a <__any_on>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d0c2      	beq.n	800acac <__gethex+0x1a8>
 800ad26:	f04f 0903 	mov.w	r9, #3
 800ad2a:	e7c1      	b.n	800acb0 <__gethex+0x1ac>
 800ad2c:	da09      	bge.n	800ad42 <__gethex+0x23e>
 800ad2e:	1b75      	subs	r5, r6, r5
 800ad30:	4621      	mov	r1, r4
 800ad32:	9801      	ldr	r0, [sp, #4]
 800ad34:	462a      	mov	r2, r5
 800ad36:	f000 fccf 	bl	800b6d8 <__lshift>
 800ad3a:	1b7f      	subs	r7, r7, r5
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	f100 0a14 	add.w	sl, r0, #20
 800ad42:	f04f 0900 	mov.w	r9, #0
 800ad46:	e7b8      	b.n	800acba <__gethex+0x1b6>
 800ad48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ad4c:	42bd      	cmp	r5, r7
 800ad4e:	dd6f      	ble.n	800ae30 <__gethex+0x32c>
 800ad50:	1bed      	subs	r5, r5, r7
 800ad52:	42ae      	cmp	r6, r5
 800ad54:	dc34      	bgt.n	800adc0 <__gethex+0x2bc>
 800ad56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d022      	beq.n	800ada4 <__gethex+0x2a0>
 800ad5e:	2b03      	cmp	r3, #3
 800ad60:	d024      	beq.n	800adac <__gethex+0x2a8>
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d115      	bne.n	800ad92 <__gethex+0x28e>
 800ad66:	42ae      	cmp	r6, r5
 800ad68:	d113      	bne.n	800ad92 <__gethex+0x28e>
 800ad6a:	2e01      	cmp	r6, #1
 800ad6c:	d10b      	bne.n	800ad86 <__gethex+0x282>
 800ad6e:	9a02      	ldr	r2, [sp, #8]
 800ad70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ad74:	6013      	str	r3, [r2, #0]
 800ad76:	2301      	movs	r3, #1
 800ad78:	6123      	str	r3, [r4, #16]
 800ad7a:	f8ca 3000 	str.w	r3, [sl]
 800ad7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad80:	2562      	movs	r5, #98	@ 0x62
 800ad82:	601c      	str	r4, [r3, #0]
 800ad84:	e73a      	b.n	800abfc <__gethex+0xf8>
 800ad86:	1e71      	subs	r1, r6, #1
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 fede 	bl	800bb4a <__any_on>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d1ed      	bne.n	800ad6e <__gethex+0x26a>
 800ad92:	9801      	ldr	r0, [sp, #4]
 800ad94:	4621      	mov	r1, r4
 800ad96:	f000 fa8f 	bl	800b2b8 <_Bfree>
 800ad9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	6013      	str	r3, [r2, #0]
 800ada0:	2550      	movs	r5, #80	@ 0x50
 800ada2:	e72b      	b.n	800abfc <__gethex+0xf8>
 800ada4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1f3      	bne.n	800ad92 <__gethex+0x28e>
 800adaa:	e7e0      	b.n	800ad6e <__gethex+0x26a>
 800adac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1dd      	bne.n	800ad6e <__gethex+0x26a>
 800adb2:	e7ee      	b.n	800ad92 <__gethex+0x28e>
 800adb4:	0800d31c 	.word	0x0800d31c
 800adb8:	0800d46c 	.word	0x0800d46c
 800adbc:	0800d47d 	.word	0x0800d47d
 800adc0:	1e6f      	subs	r7, r5, #1
 800adc2:	f1b9 0f00 	cmp.w	r9, #0
 800adc6:	d130      	bne.n	800ae2a <__gethex+0x326>
 800adc8:	b127      	cbz	r7, 800add4 <__gethex+0x2d0>
 800adca:	4639      	mov	r1, r7
 800adcc:	4620      	mov	r0, r4
 800adce:	f000 febc 	bl	800bb4a <__any_on>
 800add2:	4681      	mov	r9, r0
 800add4:	117a      	asrs	r2, r7, #5
 800add6:	2301      	movs	r3, #1
 800add8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800addc:	f007 071f 	and.w	r7, r7, #31
 800ade0:	40bb      	lsls	r3, r7
 800ade2:	4213      	tst	r3, r2
 800ade4:	4629      	mov	r1, r5
 800ade6:	4620      	mov	r0, r4
 800ade8:	bf18      	it	ne
 800adea:	f049 0902 	orrne.w	r9, r9, #2
 800adee:	f7ff fe21 	bl	800aa34 <rshift>
 800adf2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800adf6:	1b76      	subs	r6, r6, r5
 800adf8:	2502      	movs	r5, #2
 800adfa:	f1b9 0f00 	cmp.w	r9, #0
 800adfe:	d047      	beq.n	800ae90 <__gethex+0x38c>
 800ae00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d015      	beq.n	800ae34 <__gethex+0x330>
 800ae08:	2b03      	cmp	r3, #3
 800ae0a:	d017      	beq.n	800ae3c <__gethex+0x338>
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d109      	bne.n	800ae24 <__gethex+0x320>
 800ae10:	f019 0f02 	tst.w	r9, #2
 800ae14:	d006      	beq.n	800ae24 <__gethex+0x320>
 800ae16:	f8da 3000 	ldr.w	r3, [sl]
 800ae1a:	ea49 0903 	orr.w	r9, r9, r3
 800ae1e:	f019 0f01 	tst.w	r9, #1
 800ae22:	d10e      	bne.n	800ae42 <__gethex+0x33e>
 800ae24:	f045 0510 	orr.w	r5, r5, #16
 800ae28:	e032      	b.n	800ae90 <__gethex+0x38c>
 800ae2a:	f04f 0901 	mov.w	r9, #1
 800ae2e:	e7d1      	b.n	800add4 <__gethex+0x2d0>
 800ae30:	2501      	movs	r5, #1
 800ae32:	e7e2      	b.n	800adfa <__gethex+0x2f6>
 800ae34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae36:	f1c3 0301 	rsb	r3, r3, #1
 800ae3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d0f0      	beq.n	800ae24 <__gethex+0x320>
 800ae42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae46:	f104 0314 	add.w	r3, r4, #20
 800ae4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ae4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ae52:	f04f 0c00 	mov.w	ip, #0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ae60:	d01b      	beq.n	800ae9a <__gethex+0x396>
 800ae62:	3201      	adds	r2, #1
 800ae64:	6002      	str	r2, [r0, #0]
 800ae66:	2d02      	cmp	r5, #2
 800ae68:	f104 0314 	add.w	r3, r4, #20
 800ae6c:	d13c      	bne.n	800aee8 <__gethex+0x3e4>
 800ae6e:	f8d8 2000 	ldr.w	r2, [r8]
 800ae72:	3a01      	subs	r2, #1
 800ae74:	42b2      	cmp	r2, r6
 800ae76:	d109      	bne.n	800ae8c <__gethex+0x388>
 800ae78:	1171      	asrs	r1, r6, #5
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae80:	f006 061f 	and.w	r6, r6, #31
 800ae84:	fa02 f606 	lsl.w	r6, r2, r6
 800ae88:	421e      	tst	r6, r3
 800ae8a:	d13a      	bne.n	800af02 <__gethex+0x3fe>
 800ae8c:	f045 0520 	orr.w	r5, r5, #32
 800ae90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae92:	601c      	str	r4, [r3, #0]
 800ae94:	9b02      	ldr	r3, [sp, #8]
 800ae96:	601f      	str	r7, [r3, #0]
 800ae98:	e6b0      	b.n	800abfc <__gethex+0xf8>
 800ae9a:	4299      	cmp	r1, r3
 800ae9c:	f843 cc04 	str.w	ip, [r3, #-4]
 800aea0:	d8d9      	bhi.n	800ae56 <__gethex+0x352>
 800aea2:	68a3      	ldr	r3, [r4, #8]
 800aea4:	459b      	cmp	fp, r3
 800aea6:	db17      	blt.n	800aed8 <__gethex+0x3d4>
 800aea8:	6861      	ldr	r1, [r4, #4]
 800aeaa:	9801      	ldr	r0, [sp, #4]
 800aeac:	3101      	adds	r1, #1
 800aeae:	f000 f9c3 	bl	800b238 <_Balloc>
 800aeb2:	4681      	mov	r9, r0
 800aeb4:	b918      	cbnz	r0, 800aebe <__gethex+0x3ba>
 800aeb6:	4b1a      	ldr	r3, [pc, #104]	@ (800af20 <__gethex+0x41c>)
 800aeb8:	4602      	mov	r2, r0
 800aeba:	2184      	movs	r1, #132	@ 0x84
 800aebc:	e6c5      	b.n	800ac4a <__gethex+0x146>
 800aebe:	6922      	ldr	r2, [r4, #16]
 800aec0:	3202      	adds	r2, #2
 800aec2:	f104 010c 	add.w	r1, r4, #12
 800aec6:	0092      	lsls	r2, r2, #2
 800aec8:	300c      	adds	r0, #12
 800aeca:	f7fe feda 	bl	8009c82 <memcpy>
 800aece:	4621      	mov	r1, r4
 800aed0:	9801      	ldr	r0, [sp, #4]
 800aed2:	f000 f9f1 	bl	800b2b8 <_Bfree>
 800aed6:	464c      	mov	r4, r9
 800aed8:	6923      	ldr	r3, [r4, #16]
 800aeda:	1c5a      	adds	r2, r3, #1
 800aedc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aee0:	6122      	str	r2, [r4, #16]
 800aee2:	2201      	movs	r2, #1
 800aee4:	615a      	str	r2, [r3, #20]
 800aee6:	e7be      	b.n	800ae66 <__gethex+0x362>
 800aee8:	6922      	ldr	r2, [r4, #16]
 800aeea:	455a      	cmp	r2, fp
 800aeec:	dd0b      	ble.n	800af06 <__gethex+0x402>
 800aeee:	2101      	movs	r1, #1
 800aef0:	4620      	mov	r0, r4
 800aef2:	f7ff fd9f 	bl	800aa34 <rshift>
 800aef6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aefa:	3701      	adds	r7, #1
 800aefc:	42bb      	cmp	r3, r7
 800aefe:	f6ff aee0 	blt.w	800acc2 <__gethex+0x1be>
 800af02:	2501      	movs	r5, #1
 800af04:	e7c2      	b.n	800ae8c <__gethex+0x388>
 800af06:	f016 061f 	ands.w	r6, r6, #31
 800af0a:	d0fa      	beq.n	800af02 <__gethex+0x3fe>
 800af0c:	4453      	add	r3, sl
 800af0e:	f1c6 0620 	rsb	r6, r6, #32
 800af12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800af16:	f000 fa81 	bl	800b41c <__hi0bits>
 800af1a:	42b0      	cmp	r0, r6
 800af1c:	dbe7      	blt.n	800aeee <__gethex+0x3ea>
 800af1e:	e7f0      	b.n	800af02 <__gethex+0x3fe>
 800af20:	0800d46c 	.word	0x0800d46c

0800af24 <L_shift>:
 800af24:	f1c2 0208 	rsb	r2, r2, #8
 800af28:	0092      	lsls	r2, r2, #2
 800af2a:	b570      	push	{r4, r5, r6, lr}
 800af2c:	f1c2 0620 	rsb	r6, r2, #32
 800af30:	6843      	ldr	r3, [r0, #4]
 800af32:	6804      	ldr	r4, [r0, #0]
 800af34:	fa03 f506 	lsl.w	r5, r3, r6
 800af38:	432c      	orrs	r4, r5
 800af3a:	40d3      	lsrs	r3, r2
 800af3c:	6004      	str	r4, [r0, #0]
 800af3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800af42:	4288      	cmp	r0, r1
 800af44:	d3f4      	bcc.n	800af30 <L_shift+0xc>
 800af46:	bd70      	pop	{r4, r5, r6, pc}

0800af48 <__match>:
 800af48:	b530      	push	{r4, r5, lr}
 800af4a:	6803      	ldr	r3, [r0, #0]
 800af4c:	3301      	adds	r3, #1
 800af4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af52:	b914      	cbnz	r4, 800af5a <__match+0x12>
 800af54:	6003      	str	r3, [r0, #0]
 800af56:	2001      	movs	r0, #1
 800af58:	bd30      	pop	{r4, r5, pc}
 800af5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800af62:	2d19      	cmp	r5, #25
 800af64:	bf98      	it	ls
 800af66:	3220      	addls	r2, #32
 800af68:	42a2      	cmp	r2, r4
 800af6a:	d0f0      	beq.n	800af4e <__match+0x6>
 800af6c:	2000      	movs	r0, #0
 800af6e:	e7f3      	b.n	800af58 <__match+0x10>

0800af70 <__hexnan>:
 800af70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af74:	680b      	ldr	r3, [r1, #0]
 800af76:	6801      	ldr	r1, [r0, #0]
 800af78:	115e      	asrs	r6, r3, #5
 800af7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af7e:	f013 031f 	ands.w	r3, r3, #31
 800af82:	b087      	sub	sp, #28
 800af84:	bf18      	it	ne
 800af86:	3604      	addne	r6, #4
 800af88:	2500      	movs	r5, #0
 800af8a:	1f37      	subs	r7, r6, #4
 800af8c:	4682      	mov	sl, r0
 800af8e:	4690      	mov	r8, r2
 800af90:	9301      	str	r3, [sp, #4]
 800af92:	f846 5c04 	str.w	r5, [r6, #-4]
 800af96:	46b9      	mov	r9, r7
 800af98:	463c      	mov	r4, r7
 800af9a:	9502      	str	r5, [sp, #8]
 800af9c:	46ab      	mov	fp, r5
 800af9e:	784a      	ldrb	r2, [r1, #1]
 800afa0:	1c4b      	adds	r3, r1, #1
 800afa2:	9303      	str	r3, [sp, #12]
 800afa4:	b342      	cbz	r2, 800aff8 <__hexnan+0x88>
 800afa6:	4610      	mov	r0, r2
 800afa8:	9105      	str	r1, [sp, #20]
 800afaa:	9204      	str	r2, [sp, #16]
 800afac:	f7ff fd94 	bl	800aad8 <__hexdig_fun>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d151      	bne.n	800b058 <__hexnan+0xe8>
 800afb4:	9a04      	ldr	r2, [sp, #16]
 800afb6:	9905      	ldr	r1, [sp, #20]
 800afb8:	2a20      	cmp	r2, #32
 800afba:	d818      	bhi.n	800afee <__hexnan+0x7e>
 800afbc:	9b02      	ldr	r3, [sp, #8]
 800afbe:	459b      	cmp	fp, r3
 800afc0:	dd13      	ble.n	800afea <__hexnan+0x7a>
 800afc2:	454c      	cmp	r4, r9
 800afc4:	d206      	bcs.n	800afd4 <__hexnan+0x64>
 800afc6:	2d07      	cmp	r5, #7
 800afc8:	dc04      	bgt.n	800afd4 <__hexnan+0x64>
 800afca:	462a      	mov	r2, r5
 800afcc:	4649      	mov	r1, r9
 800afce:	4620      	mov	r0, r4
 800afd0:	f7ff ffa8 	bl	800af24 <L_shift>
 800afd4:	4544      	cmp	r4, r8
 800afd6:	d952      	bls.n	800b07e <__hexnan+0x10e>
 800afd8:	2300      	movs	r3, #0
 800afda:	f1a4 0904 	sub.w	r9, r4, #4
 800afde:	f844 3c04 	str.w	r3, [r4, #-4]
 800afe2:	f8cd b008 	str.w	fp, [sp, #8]
 800afe6:	464c      	mov	r4, r9
 800afe8:	461d      	mov	r5, r3
 800afea:	9903      	ldr	r1, [sp, #12]
 800afec:	e7d7      	b.n	800af9e <__hexnan+0x2e>
 800afee:	2a29      	cmp	r2, #41	@ 0x29
 800aff0:	d157      	bne.n	800b0a2 <__hexnan+0x132>
 800aff2:	3102      	adds	r1, #2
 800aff4:	f8ca 1000 	str.w	r1, [sl]
 800aff8:	f1bb 0f00 	cmp.w	fp, #0
 800affc:	d051      	beq.n	800b0a2 <__hexnan+0x132>
 800affe:	454c      	cmp	r4, r9
 800b000:	d206      	bcs.n	800b010 <__hexnan+0xa0>
 800b002:	2d07      	cmp	r5, #7
 800b004:	dc04      	bgt.n	800b010 <__hexnan+0xa0>
 800b006:	462a      	mov	r2, r5
 800b008:	4649      	mov	r1, r9
 800b00a:	4620      	mov	r0, r4
 800b00c:	f7ff ff8a 	bl	800af24 <L_shift>
 800b010:	4544      	cmp	r4, r8
 800b012:	d936      	bls.n	800b082 <__hexnan+0x112>
 800b014:	f1a8 0204 	sub.w	r2, r8, #4
 800b018:	4623      	mov	r3, r4
 800b01a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b01e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b022:	429f      	cmp	r7, r3
 800b024:	d2f9      	bcs.n	800b01a <__hexnan+0xaa>
 800b026:	1b3b      	subs	r3, r7, r4
 800b028:	f023 0303 	bic.w	r3, r3, #3
 800b02c:	3304      	adds	r3, #4
 800b02e:	3401      	adds	r4, #1
 800b030:	3e03      	subs	r6, #3
 800b032:	42b4      	cmp	r4, r6
 800b034:	bf88      	it	hi
 800b036:	2304      	movhi	r3, #4
 800b038:	4443      	add	r3, r8
 800b03a:	2200      	movs	r2, #0
 800b03c:	f843 2b04 	str.w	r2, [r3], #4
 800b040:	429f      	cmp	r7, r3
 800b042:	d2fb      	bcs.n	800b03c <__hexnan+0xcc>
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	b91b      	cbnz	r3, 800b050 <__hexnan+0xe0>
 800b048:	4547      	cmp	r7, r8
 800b04a:	d128      	bne.n	800b09e <__hexnan+0x12e>
 800b04c:	2301      	movs	r3, #1
 800b04e:	603b      	str	r3, [r7, #0]
 800b050:	2005      	movs	r0, #5
 800b052:	b007      	add	sp, #28
 800b054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b058:	3501      	adds	r5, #1
 800b05a:	2d08      	cmp	r5, #8
 800b05c:	f10b 0b01 	add.w	fp, fp, #1
 800b060:	dd06      	ble.n	800b070 <__hexnan+0x100>
 800b062:	4544      	cmp	r4, r8
 800b064:	d9c1      	bls.n	800afea <__hexnan+0x7a>
 800b066:	2300      	movs	r3, #0
 800b068:	f844 3c04 	str.w	r3, [r4, #-4]
 800b06c:	2501      	movs	r5, #1
 800b06e:	3c04      	subs	r4, #4
 800b070:	6822      	ldr	r2, [r4, #0]
 800b072:	f000 000f 	and.w	r0, r0, #15
 800b076:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b07a:	6020      	str	r0, [r4, #0]
 800b07c:	e7b5      	b.n	800afea <__hexnan+0x7a>
 800b07e:	2508      	movs	r5, #8
 800b080:	e7b3      	b.n	800afea <__hexnan+0x7a>
 800b082:	9b01      	ldr	r3, [sp, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d0dd      	beq.n	800b044 <__hexnan+0xd4>
 800b088:	f1c3 0320 	rsb	r3, r3, #32
 800b08c:	f04f 32ff 	mov.w	r2, #4294967295
 800b090:	40da      	lsrs	r2, r3
 800b092:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b096:	4013      	ands	r3, r2
 800b098:	f846 3c04 	str.w	r3, [r6, #-4]
 800b09c:	e7d2      	b.n	800b044 <__hexnan+0xd4>
 800b09e:	3f04      	subs	r7, #4
 800b0a0:	e7d0      	b.n	800b044 <__hexnan+0xd4>
 800b0a2:	2004      	movs	r0, #4
 800b0a4:	e7d5      	b.n	800b052 <__hexnan+0xe2>
	...

0800b0a8 <malloc>:
 800b0a8:	4b02      	ldr	r3, [pc, #8]	@ (800b0b4 <malloc+0xc>)
 800b0aa:	4601      	mov	r1, r0
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	f000 b825 	b.w	800b0fc <_malloc_r>
 800b0b2:	bf00      	nop
 800b0b4:	200003f4 	.word	0x200003f4

0800b0b8 <sbrk_aligned>:
 800b0b8:	b570      	push	{r4, r5, r6, lr}
 800b0ba:	4e0f      	ldr	r6, [pc, #60]	@ (800b0f8 <sbrk_aligned+0x40>)
 800b0bc:	460c      	mov	r4, r1
 800b0be:	6831      	ldr	r1, [r6, #0]
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	b911      	cbnz	r1, 800b0ca <sbrk_aligned+0x12>
 800b0c4:	f000 ff9e 	bl	800c004 <_sbrk_r>
 800b0c8:	6030      	str	r0, [r6, #0]
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	f000 ff99 	bl	800c004 <_sbrk_r>
 800b0d2:	1c43      	adds	r3, r0, #1
 800b0d4:	d103      	bne.n	800b0de <sbrk_aligned+0x26>
 800b0d6:	f04f 34ff 	mov.w	r4, #4294967295
 800b0da:	4620      	mov	r0, r4
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}
 800b0de:	1cc4      	adds	r4, r0, #3
 800b0e0:	f024 0403 	bic.w	r4, r4, #3
 800b0e4:	42a0      	cmp	r0, r4
 800b0e6:	d0f8      	beq.n	800b0da <sbrk_aligned+0x22>
 800b0e8:	1a21      	subs	r1, r4, r0
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f000 ff8a 	bl	800c004 <_sbrk_r>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d1f2      	bne.n	800b0da <sbrk_aligned+0x22>
 800b0f4:	e7ef      	b.n	800b0d6 <sbrk_aligned+0x1e>
 800b0f6:	bf00      	nop
 800b0f8:	20005a90 	.word	0x20005a90

0800b0fc <_malloc_r>:
 800b0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b100:	1ccd      	adds	r5, r1, #3
 800b102:	f025 0503 	bic.w	r5, r5, #3
 800b106:	3508      	adds	r5, #8
 800b108:	2d0c      	cmp	r5, #12
 800b10a:	bf38      	it	cc
 800b10c:	250c      	movcc	r5, #12
 800b10e:	2d00      	cmp	r5, #0
 800b110:	4606      	mov	r6, r0
 800b112:	db01      	blt.n	800b118 <_malloc_r+0x1c>
 800b114:	42a9      	cmp	r1, r5
 800b116:	d904      	bls.n	800b122 <_malloc_r+0x26>
 800b118:	230c      	movs	r3, #12
 800b11a:	6033      	str	r3, [r6, #0]
 800b11c:	2000      	movs	r0, #0
 800b11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b122:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1f8 <_malloc_r+0xfc>
 800b126:	f000 f87b 	bl	800b220 <__malloc_lock>
 800b12a:	f8d8 3000 	ldr.w	r3, [r8]
 800b12e:	461c      	mov	r4, r3
 800b130:	bb44      	cbnz	r4, 800b184 <_malloc_r+0x88>
 800b132:	4629      	mov	r1, r5
 800b134:	4630      	mov	r0, r6
 800b136:	f7ff ffbf 	bl	800b0b8 <sbrk_aligned>
 800b13a:	1c43      	adds	r3, r0, #1
 800b13c:	4604      	mov	r4, r0
 800b13e:	d158      	bne.n	800b1f2 <_malloc_r+0xf6>
 800b140:	f8d8 4000 	ldr.w	r4, [r8]
 800b144:	4627      	mov	r7, r4
 800b146:	2f00      	cmp	r7, #0
 800b148:	d143      	bne.n	800b1d2 <_malloc_r+0xd6>
 800b14a:	2c00      	cmp	r4, #0
 800b14c:	d04b      	beq.n	800b1e6 <_malloc_r+0xea>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	4639      	mov	r1, r7
 800b152:	4630      	mov	r0, r6
 800b154:	eb04 0903 	add.w	r9, r4, r3
 800b158:	f000 ff54 	bl	800c004 <_sbrk_r>
 800b15c:	4581      	cmp	r9, r0
 800b15e:	d142      	bne.n	800b1e6 <_malloc_r+0xea>
 800b160:	6821      	ldr	r1, [r4, #0]
 800b162:	1a6d      	subs	r5, r5, r1
 800b164:	4629      	mov	r1, r5
 800b166:	4630      	mov	r0, r6
 800b168:	f7ff ffa6 	bl	800b0b8 <sbrk_aligned>
 800b16c:	3001      	adds	r0, #1
 800b16e:	d03a      	beq.n	800b1e6 <_malloc_r+0xea>
 800b170:	6823      	ldr	r3, [r4, #0]
 800b172:	442b      	add	r3, r5
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	f8d8 3000 	ldr.w	r3, [r8]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	bb62      	cbnz	r2, 800b1d8 <_malloc_r+0xdc>
 800b17e:	f8c8 7000 	str.w	r7, [r8]
 800b182:	e00f      	b.n	800b1a4 <_malloc_r+0xa8>
 800b184:	6822      	ldr	r2, [r4, #0]
 800b186:	1b52      	subs	r2, r2, r5
 800b188:	d420      	bmi.n	800b1cc <_malloc_r+0xd0>
 800b18a:	2a0b      	cmp	r2, #11
 800b18c:	d917      	bls.n	800b1be <_malloc_r+0xc2>
 800b18e:	1961      	adds	r1, r4, r5
 800b190:	42a3      	cmp	r3, r4
 800b192:	6025      	str	r5, [r4, #0]
 800b194:	bf18      	it	ne
 800b196:	6059      	strne	r1, [r3, #4]
 800b198:	6863      	ldr	r3, [r4, #4]
 800b19a:	bf08      	it	eq
 800b19c:	f8c8 1000 	streq.w	r1, [r8]
 800b1a0:	5162      	str	r2, [r4, r5]
 800b1a2:	604b      	str	r3, [r1, #4]
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f000 f841 	bl	800b22c <__malloc_unlock>
 800b1aa:	f104 000b 	add.w	r0, r4, #11
 800b1ae:	1d23      	adds	r3, r4, #4
 800b1b0:	f020 0007 	bic.w	r0, r0, #7
 800b1b4:	1ac2      	subs	r2, r0, r3
 800b1b6:	bf1c      	itt	ne
 800b1b8:	1a1b      	subne	r3, r3, r0
 800b1ba:	50a3      	strne	r3, [r4, r2]
 800b1bc:	e7af      	b.n	800b11e <_malloc_r+0x22>
 800b1be:	6862      	ldr	r2, [r4, #4]
 800b1c0:	42a3      	cmp	r3, r4
 800b1c2:	bf0c      	ite	eq
 800b1c4:	f8c8 2000 	streq.w	r2, [r8]
 800b1c8:	605a      	strne	r2, [r3, #4]
 800b1ca:	e7eb      	b.n	800b1a4 <_malloc_r+0xa8>
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	6864      	ldr	r4, [r4, #4]
 800b1d0:	e7ae      	b.n	800b130 <_malloc_r+0x34>
 800b1d2:	463c      	mov	r4, r7
 800b1d4:	687f      	ldr	r7, [r7, #4]
 800b1d6:	e7b6      	b.n	800b146 <_malloc_r+0x4a>
 800b1d8:	461a      	mov	r2, r3
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	42a3      	cmp	r3, r4
 800b1de:	d1fb      	bne.n	800b1d8 <_malloc_r+0xdc>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	6053      	str	r3, [r2, #4]
 800b1e4:	e7de      	b.n	800b1a4 <_malloc_r+0xa8>
 800b1e6:	230c      	movs	r3, #12
 800b1e8:	6033      	str	r3, [r6, #0]
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f000 f81e 	bl	800b22c <__malloc_unlock>
 800b1f0:	e794      	b.n	800b11c <_malloc_r+0x20>
 800b1f2:	6005      	str	r5, [r0, #0]
 800b1f4:	e7d6      	b.n	800b1a4 <_malloc_r+0xa8>
 800b1f6:	bf00      	nop
 800b1f8:	20005a94 	.word	0x20005a94

0800b1fc <__ascii_mbtowc>:
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	b901      	cbnz	r1, 800b202 <__ascii_mbtowc+0x6>
 800b200:	a901      	add	r1, sp, #4
 800b202:	b142      	cbz	r2, 800b216 <__ascii_mbtowc+0x1a>
 800b204:	b14b      	cbz	r3, 800b21a <__ascii_mbtowc+0x1e>
 800b206:	7813      	ldrb	r3, [r2, #0]
 800b208:	600b      	str	r3, [r1, #0]
 800b20a:	7812      	ldrb	r2, [r2, #0]
 800b20c:	1e10      	subs	r0, r2, #0
 800b20e:	bf18      	it	ne
 800b210:	2001      	movne	r0, #1
 800b212:	b002      	add	sp, #8
 800b214:	4770      	bx	lr
 800b216:	4610      	mov	r0, r2
 800b218:	e7fb      	b.n	800b212 <__ascii_mbtowc+0x16>
 800b21a:	f06f 0001 	mvn.w	r0, #1
 800b21e:	e7f8      	b.n	800b212 <__ascii_mbtowc+0x16>

0800b220 <__malloc_lock>:
 800b220:	4801      	ldr	r0, [pc, #4]	@ (800b228 <__malloc_lock+0x8>)
 800b222:	f7fe bd2c 	b.w	8009c7e <__retarget_lock_acquire_recursive>
 800b226:	bf00      	nop
 800b228:	20005a8c 	.word	0x20005a8c

0800b22c <__malloc_unlock>:
 800b22c:	4801      	ldr	r0, [pc, #4]	@ (800b234 <__malloc_unlock+0x8>)
 800b22e:	f7fe bd27 	b.w	8009c80 <__retarget_lock_release_recursive>
 800b232:	bf00      	nop
 800b234:	20005a8c 	.word	0x20005a8c

0800b238 <_Balloc>:
 800b238:	b570      	push	{r4, r5, r6, lr}
 800b23a:	69c6      	ldr	r6, [r0, #28]
 800b23c:	4604      	mov	r4, r0
 800b23e:	460d      	mov	r5, r1
 800b240:	b976      	cbnz	r6, 800b260 <_Balloc+0x28>
 800b242:	2010      	movs	r0, #16
 800b244:	f7ff ff30 	bl	800b0a8 <malloc>
 800b248:	4602      	mov	r2, r0
 800b24a:	61e0      	str	r0, [r4, #28]
 800b24c:	b920      	cbnz	r0, 800b258 <_Balloc+0x20>
 800b24e:	4b18      	ldr	r3, [pc, #96]	@ (800b2b0 <_Balloc+0x78>)
 800b250:	4818      	ldr	r0, [pc, #96]	@ (800b2b4 <_Balloc+0x7c>)
 800b252:	216b      	movs	r1, #107	@ 0x6b
 800b254:	f7fe fd2c 	bl	8009cb0 <__assert_func>
 800b258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b25c:	6006      	str	r6, [r0, #0]
 800b25e:	60c6      	str	r6, [r0, #12]
 800b260:	69e6      	ldr	r6, [r4, #28]
 800b262:	68f3      	ldr	r3, [r6, #12]
 800b264:	b183      	cbz	r3, 800b288 <_Balloc+0x50>
 800b266:	69e3      	ldr	r3, [r4, #28]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b26e:	b9b8      	cbnz	r0, 800b2a0 <_Balloc+0x68>
 800b270:	2101      	movs	r1, #1
 800b272:	fa01 f605 	lsl.w	r6, r1, r5
 800b276:	1d72      	adds	r2, r6, #5
 800b278:	0092      	lsls	r2, r2, #2
 800b27a:	4620      	mov	r0, r4
 800b27c:	f000 fed9 	bl	800c032 <_calloc_r>
 800b280:	b160      	cbz	r0, 800b29c <_Balloc+0x64>
 800b282:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b286:	e00e      	b.n	800b2a6 <_Balloc+0x6e>
 800b288:	2221      	movs	r2, #33	@ 0x21
 800b28a:	2104      	movs	r1, #4
 800b28c:	4620      	mov	r0, r4
 800b28e:	f000 fed0 	bl	800c032 <_calloc_r>
 800b292:	69e3      	ldr	r3, [r4, #28]
 800b294:	60f0      	str	r0, [r6, #12]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1e4      	bne.n	800b266 <_Balloc+0x2e>
 800b29c:	2000      	movs	r0, #0
 800b29e:	bd70      	pop	{r4, r5, r6, pc}
 800b2a0:	6802      	ldr	r2, [r0, #0]
 800b2a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2ac:	e7f7      	b.n	800b29e <_Balloc+0x66>
 800b2ae:	bf00      	nop
 800b2b0:	0800d352 	.word	0x0800d352
 800b2b4:	0800d4dd 	.word	0x0800d4dd

0800b2b8 <_Bfree>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	69c6      	ldr	r6, [r0, #28]
 800b2bc:	4605      	mov	r5, r0
 800b2be:	460c      	mov	r4, r1
 800b2c0:	b976      	cbnz	r6, 800b2e0 <_Bfree+0x28>
 800b2c2:	2010      	movs	r0, #16
 800b2c4:	f7ff fef0 	bl	800b0a8 <malloc>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	61e8      	str	r0, [r5, #28]
 800b2cc:	b920      	cbnz	r0, 800b2d8 <_Bfree+0x20>
 800b2ce:	4b09      	ldr	r3, [pc, #36]	@ (800b2f4 <_Bfree+0x3c>)
 800b2d0:	4809      	ldr	r0, [pc, #36]	@ (800b2f8 <_Bfree+0x40>)
 800b2d2:	218f      	movs	r1, #143	@ 0x8f
 800b2d4:	f7fe fcec 	bl	8009cb0 <__assert_func>
 800b2d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2dc:	6006      	str	r6, [r0, #0]
 800b2de:	60c6      	str	r6, [r0, #12]
 800b2e0:	b13c      	cbz	r4, 800b2f2 <_Bfree+0x3a>
 800b2e2:	69eb      	ldr	r3, [r5, #28]
 800b2e4:	6862      	ldr	r2, [r4, #4]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2ec:	6021      	str	r1, [r4, #0]
 800b2ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2f2:	bd70      	pop	{r4, r5, r6, pc}
 800b2f4:	0800d352 	.word	0x0800d352
 800b2f8:	0800d4dd 	.word	0x0800d4dd

0800b2fc <__multadd>:
 800b2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b300:	690d      	ldr	r5, [r1, #16]
 800b302:	4607      	mov	r7, r0
 800b304:	460c      	mov	r4, r1
 800b306:	461e      	mov	r6, r3
 800b308:	f101 0c14 	add.w	ip, r1, #20
 800b30c:	2000      	movs	r0, #0
 800b30e:	f8dc 3000 	ldr.w	r3, [ip]
 800b312:	b299      	uxth	r1, r3
 800b314:	fb02 6101 	mla	r1, r2, r1, r6
 800b318:	0c1e      	lsrs	r6, r3, #16
 800b31a:	0c0b      	lsrs	r3, r1, #16
 800b31c:	fb02 3306 	mla	r3, r2, r6, r3
 800b320:	b289      	uxth	r1, r1
 800b322:	3001      	adds	r0, #1
 800b324:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b328:	4285      	cmp	r5, r0
 800b32a:	f84c 1b04 	str.w	r1, [ip], #4
 800b32e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b332:	dcec      	bgt.n	800b30e <__multadd+0x12>
 800b334:	b30e      	cbz	r6, 800b37a <__multadd+0x7e>
 800b336:	68a3      	ldr	r3, [r4, #8]
 800b338:	42ab      	cmp	r3, r5
 800b33a:	dc19      	bgt.n	800b370 <__multadd+0x74>
 800b33c:	6861      	ldr	r1, [r4, #4]
 800b33e:	4638      	mov	r0, r7
 800b340:	3101      	adds	r1, #1
 800b342:	f7ff ff79 	bl	800b238 <_Balloc>
 800b346:	4680      	mov	r8, r0
 800b348:	b928      	cbnz	r0, 800b356 <__multadd+0x5a>
 800b34a:	4602      	mov	r2, r0
 800b34c:	4b0c      	ldr	r3, [pc, #48]	@ (800b380 <__multadd+0x84>)
 800b34e:	480d      	ldr	r0, [pc, #52]	@ (800b384 <__multadd+0x88>)
 800b350:	21ba      	movs	r1, #186	@ 0xba
 800b352:	f7fe fcad 	bl	8009cb0 <__assert_func>
 800b356:	6922      	ldr	r2, [r4, #16]
 800b358:	3202      	adds	r2, #2
 800b35a:	f104 010c 	add.w	r1, r4, #12
 800b35e:	0092      	lsls	r2, r2, #2
 800b360:	300c      	adds	r0, #12
 800b362:	f7fe fc8e 	bl	8009c82 <memcpy>
 800b366:	4621      	mov	r1, r4
 800b368:	4638      	mov	r0, r7
 800b36a:	f7ff ffa5 	bl	800b2b8 <_Bfree>
 800b36e:	4644      	mov	r4, r8
 800b370:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b374:	3501      	adds	r5, #1
 800b376:	615e      	str	r6, [r3, #20]
 800b378:	6125      	str	r5, [r4, #16]
 800b37a:	4620      	mov	r0, r4
 800b37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b380:	0800d46c 	.word	0x0800d46c
 800b384:	0800d4dd 	.word	0x0800d4dd

0800b388 <__s2b>:
 800b388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b38c:	460c      	mov	r4, r1
 800b38e:	4615      	mov	r5, r2
 800b390:	461f      	mov	r7, r3
 800b392:	2209      	movs	r2, #9
 800b394:	3308      	adds	r3, #8
 800b396:	4606      	mov	r6, r0
 800b398:	fb93 f3f2 	sdiv	r3, r3, r2
 800b39c:	2100      	movs	r1, #0
 800b39e:	2201      	movs	r2, #1
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	db09      	blt.n	800b3b8 <__s2b+0x30>
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f7ff ff47 	bl	800b238 <_Balloc>
 800b3aa:	b940      	cbnz	r0, 800b3be <__s2b+0x36>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	4b19      	ldr	r3, [pc, #100]	@ (800b414 <__s2b+0x8c>)
 800b3b0:	4819      	ldr	r0, [pc, #100]	@ (800b418 <__s2b+0x90>)
 800b3b2:	21d3      	movs	r1, #211	@ 0xd3
 800b3b4:	f7fe fc7c 	bl	8009cb0 <__assert_func>
 800b3b8:	0052      	lsls	r2, r2, #1
 800b3ba:	3101      	adds	r1, #1
 800b3bc:	e7f0      	b.n	800b3a0 <__s2b+0x18>
 800b3be:	9b08      	ldr	r3, [sp, #32]
 800b3c0:	6143      	str	r3, [r0, #20]
 800b3c2:	2d09      	cmp	r5, #9
 800b3c4:	f04f 0301 	mov.w	r3, #1
 800b3c8:	6103      	str	r3, [r0, #16]
 800b3ca:	dd16      	ble.n	800b3fa <__s2b+0x72>
 800b3cc:	f104 0909 	add.w	r9, r4, #9
 800b3d0:	46c8      	mov	r8, r9
 800b3d2:	442c      	add	r4, r5
 800b3d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b3d8:	4601      	mov	r1, r0
 800b3da:	3b30      	subs	r3, #48	@ 0x30
 800b3dc:	220a      	movs	r2, #10
 800b3de:	4630      	mov	r0, r6
 800b3e0:	f7ff ff8c 	bl	800b2fc <__multadd>
 800b3e4:	45a0      	cmp	r8, r4
 800b3e6:	d1f5      	bne.n	800b3d4 <__s2b+0x4c>
 800b3e8:	f1a5 0408 	sub.w	r4, r5, #8
 800b3ec:	444c      	add	r4, r9
 800b3ee:	1b2d      	subs	r5, r5, r4
 800b3f0:	1963      	adds	r3, r4, r5
 800b3f2:	42bb      	cmp	r3, r7
 800b3f4:	db04      	blt.n	800b400 <__s2b+0x78>
 800b3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3fa:	340a      	adds	r4, #10
 800b3fc:	2509      	movs	r5, #9
 800b3fe:	e7f6      	b.n	800b3ee <__s2b+0x66>
 800b400:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b404:	4601      	mov	r1, r0
 800b406:	3b30      	subs	r3, #48	@ 0x30
 800b408:	220a      	movs	r2, #10
 800b40a:	4630      	mov	r0, r6
 800b40c:	f7ff ff76 	bl	800b2fc <__multadd>
 800b410:	e7ee      	b.n	800b3f0 <__s2b+0x68>
 800b412:	bf00      	nop
 800b414:	0800d46c 	.word	0x0800d46c
 800b418:	0800d4dd 	.word	0x0800d4dd

0800b41c <__hi0bits>:
 800b41c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b420:	4603      	mov	r3, r0
 800b422:	bf36      	itet	cc
 800b424:	0403      	lslcc	r3, r0, #16
 800b426:	2000      	movcs	r0, #0
 800b428:	2010      	movcc	r0, #16
 800b42a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b42e:	bf3c      	itt	cc
 800b430:	021b      	lslcc	r3, r3, #8
 800b432:	3008      	addcc	r0, #8
 800b434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b438:	bf3c      	itt	cc
 800b43a:	011b      	lslcc	r3, r3, #4
 800b43c:	3004      	addcc	r0, #4
 800b43e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b442:	bf3c      	itt	cc
 800b444:	009b      	lslcc	r3, r3, #2
 800b446:	3002      	addcc	r0, #2
 800b448:	2b00      	cmp	r3, #0
 800b44a:	db05      	blt.n	800b458 <__hi0bits+0x3c>
 800b44c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b450:	f100 0001 	add.w	r0, r0, #1
 800b454:	bf08      	it	eq
 800b456:	2020      	moveq	r0, #32
 800b458:	4770      	bx	lr

0800b45a <__lo0bits>:
 800b45a:	6803      	ldr	r3, [r0, #0]
 800b45c:	4602      	mov	r2, r0
 800b45e:	f013 0007 	ands.w	r0, r3, #7
 800b462:	d00b      	beq.n	800b47c <__lo0bits+0x22>
 800b464:	07d9      	lsls	r1, r3, #31
 800b466:	d421      	bmi.n	800b4ac <__lo0bits+0x52>
 800b468:	0798      	lsls	r0, r3, #30
 800b46a:	bf49      	itett	mi
 800b46c:	085b      	lsrmi	r3, r3, #1
 800b46e:	089b      	lsrpl	r3, r3, #2
 800b470:	2001      	movmi	r0, #1
 800b472:	6013      	strmi	r3, [r2, #0]
 800b474:	bf5c      	itt	pl
 800b476:	6013      	strpl	r3, [r2, #0]
 800b478:	2002      	movpl	r0, #2
 800b47a:	4770      	bx	lr
 800b47c:	b299      	uxth	r1, r3
 800b47e:	b909      	cbnz	r1, 800b484 <__lo0bits+0x2a>
 800b480:	0c1b      	lsrs	r3, r3, #16
 800b482:	2010      	movs	r0, #16
 800b484:	b2d9      	uxtb	r1, r3
 800b486:	b909      	cbnz	r1, 800b48c <__lo0bits+0x32>
 800b488:	3008      	adds	r0, #8
 800b48a:	0a1b      	lsrs	r3, r3, #8
 800b48c:	0719      	lsls	r1, r3, #28
 800b48e:	bf04      	itt	eq
 800b490:	091b      	lsreq	r3, r3, #4
 800b492:	3004      	addeq	r0, #4
 800b494:	0799      	lsls	r1, r3, #30
 800b496:	bf04      	itt	eq
 800b498:	089b      	lsreq	r3, r3, #2
 800b49a:	3002      	addeq	r0, #2
 800b49c:	07d9      	lsls	r1, r3, #31
 800b49e:	d403      	bmi.n	800b4a8 <__lo0bits+0x4e>
 800b4a0:	085b      	lsrs	r3, r3, #1
 800b4a2:	f100 0001 	add.w	r0, r0, #1
 800b4a6:	d003      	beq.n	800b4b0 <__lo0bits+0x56>
 800b4a8:	6013      	str	r3, [r2, #0]
 800b4aa:	4770      	bx	lr
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	4770      	bx	lr
 800b4b0:	2020      	movs	r0, #32
 800b4b2:	4770      	bx	lr

0800b4b4 <__i2b>:
 800b4b4:	b510      	push	{r4, lr}
 800b4b6:	460c      	mov	r4, r1
 800b4b8:	2101      	movs	r1, #1
 800b4ba:	f7ff febd 	bl	800b238 <_Balloc>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	b928      	cbnz	r0, 800b4ce <__i2b+0x1a>
 800b4c2:	4b05      	ldr	r3, [pc, #20]	@ (800b4d8 <__i2b+0x24>)
 800b4c4:	4805      	ldr	r0, [pc, #20]	@ (800b4dc <__i2b+0x28>)
 800b4c6:	f240 1145 	movw	r1, #325	@ 0x145
 800b4ca:	f7fe fbf1 	bl	8009cb0 <__assert_func>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	6144      	str	r4, [r0, #20]
 800b4d2:	6103      	str	r3, [r0, #16]
 800b4d4:	bd10      	pop	{r4, pc}
 800b4d6:	bf00      	nop
 800b4d8:	0800d46c 	.word	0x0800d46c
 800b4dc:	0800d4dd 	.word	0x0800d4dd

0800b4e0 <__multiply>:
 800b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e4:	4617      	mov	r7, r2
 800b4e6:	690a      	ldr	r2, [r1, #16]
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	bfa8      	it	ge
 800b4ee:	463b      	movge	r3, r7
 800b4f0:	4689      	mov	r9, r1
 800b4f2:	bfa4      	itt	ge
 800b4f4:	460f      	movge	r7, r1
 800b4f6:	4699      	movge	r9, r3
 800b4f8:	693d      	ldr	r5, [r7, #16]
 800b4fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	6879      	ldr	r1, [r7, #4]
 800b502:	eb05 060a 	add.w	r6, r5, sl
 800b506:	42b3      	cmp	r3, r6
 800b508:	b085      	sub	sp, #20
 800b50a:	bfb8      	it	lt
 800b50c:	3101      	addlt	r1, #1
 800b50e:	f7ff fe93 	bl	800b238 <_Balloc>
 800b512:	b930      	cbnz	r0, 800b522 <__multiply+0x42>
 800b514:	4602      	mov	r2, r0
 800b516:	4b41      	ldr	r3, [pc, #260]	@ (800b61c <__multiply+0x13c>)
 800b518:	4841      	ldr	r0, [pc, #260]	@ (800b620 <__multiply+0x140>)
 800b51a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b51e:	f7fe fbc7 	bl	8009cb0 <__assert_func>
 800b522:	f100 0414 	add.w	r4, r0, #20
 800b526:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b52a:	4623      	mov	r3, r4
 800b52c:	2200      	movs	r2, #0
 800b52e:	4573      	cmp	r3, lr
 800b530:	d320      	bcc.n	800b574 <__multiply+0x94>
 800b532:	f107 0814 	add.w	r8, r7, #20
 800b536:	f109 0114 	add.w	r1, r9, #20
 800b53a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b53e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b542:	9302      	str	r3, [sp, #8]
 800b544:	1beb      	subs	r3, r5, r7
 800b546:	3b15      	subs	r3, #21
 800b548:	f023 0303 	bic.w	r3, r3, #3
 800b54c:	3304      	adds	r3, #4
 800b54e:	3715      	adds	r7, #21
 800b550:	42bd      	cmp	r5, r7
 800b552:	bf38      	it	cc
 800b554:	2304      	movcc	r3, #4
 800b556:	9301      	str	r3, [sp, #4]
 800b558:	9b02      	ldr	r3, [sp, #8]
 800b55a:	9103      	str	r1, [sp, #12]
 800b55c:	428b      	cmp	r3, r1
 800b55e:	d80c      	bhi.n	800b57a <__multiply+0x9a>
 800b560:	2e00      	cmp	r6, #0
 800b562:	dd03      	ble.n	800b56c <__multiply+0x8c>
 800b564:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d055      	beq.n	800b618 <__multiply+0x138>
 800b56c:	6106      	str	r6, [r0, #16]
 800b56e:	b005      	add	sp, #20
 800b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	f843 2b04 	str.w	r2, [r3], #4
 800b578:	e7d9      	b.n	800b52e <__multiply+0x4e>
 800b57a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b57e:	f1ba 0f00 	cmp.w	sl, #0
 800b582:	d01f      	beq.n	800b5c4 <__multiply+0xe4>
 800b584:	46c4      	mov	ip, r8
 800b586:	46a1      	mov	r9, r4
 800b588:	2700      	movs	r7, #0
 800b58a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b58e:	f8d9 3000 	ldr.w	r3, [r9]
 800b592:	fa1f fb82 	uxth.w	fp, r2
 800b596:	b29b      	uxth	r3, r3
 800b598:	fb0a 330b 	mla	r3, sl, fp, r3
 800b59c:	443b      	add	r3, r7
 800b59e:	f8d9 7000 	ldr.w	r7, [r9]
 800b5a2:	0c12      	lsrs	r2, r2, #16
 800b5a4:	0c3f      	lsrs	r7, r7, #16
 800b5a6:	fb0a 7202 	mla	r2, sl, r2, r7
 800b5aa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5b4:	4565      	cmp	r5, ip
 800b5b6:	f849 3b04 	str.w	r3, [r9], #4
 800b5ba:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b5be:	d8e4      	bhi.n	800b58a <__multiply+0xaa>
 800b5c0:	9b01      	ldr	r3, [sp, #4]
 800b5c2:	50e7      	str	r7, [r4, r3]
 800b5c4:	9b03      	ldr	r3, [sp, #12]
 800b5c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b5ca:	3104      	adds	r1, #4
 800b5cc:	f1b9 0f00 	cmp.w	r9, #0
 800b5d0:	d020      	beq.n	800b614 <__multiply+0x134>
 800b5d2:	6823      	ldr	r3, [r4, #0]
 800b5d4:	4647      	mov	r7, r8
 800b5d6:	46a4      	mov	ip, r4
 800b5d8:	f04f 0a00 	mov.w	sl, #0
 800b5dc:	f8b7 b000 	ldrh.w	fp, [r7]
 800b5e0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b5e4:	fb09 220b 	mla	r2, r9, fp, r2
 800b5e8:	4452      	add	r2, sl
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5f0:	f84c 3b04 	str.w	r3, [ip], #4
 800b5f4:	f857 3b04 	ldr.w	r3, [r7], #4
 800b5f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5fc:	f8bc 3000 	ldrh.w	r3, [ip]
 800b600:	fb09 330a 	mla	r3, r9, sl, r3
 800b604:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b608:	42bd      	cmp	r5, r7
 800b60a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b60e:	d8e5      	bhi.n	800b5dc <__multiply+0xfc>
 800b610:	9a01      	ldr	r2, [sp, #4]
 800b612:	50a3      	str	r3, [r4, r2]
 800b614:	3404      	adds	r4, #4
 800b616:	e79f      	b.n	800b558 <__multiply+0x78>
 800b618:	3e01      	subs	r6, #1
 800b61a:	e7a1      	b.n	800b560 <__multiply+0x80>
 800b61c:	0800d46c 	.word	0x0800d46c
 800b620:	0800d4dd 	.word	0x0800d4dd

0800b624 <__pow5mult>:
 800b624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b628:	4615      	mov	r5, r2
 800b62a:	f012 0203 	ands.w	r2, r2, #3
 800b62e:	4607      	mov	r7, r0
 800b630:	460e      	mov	r6, r1
 800b632:	d007      	beq.n	800b644 <__pow5mult+0x20>
 800b634:	4c25      	ldr	r4, [pc, #148]	@ (800b6cc <__pow5mult+0xa8>)
 800b636:	3a01      	subs	r2, #1
 800b638:	2300      	movs	r3, #0
 800b63a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b63e:	f7ff fe5d 	bl	800b2fc <__multadd>
 800b642:	4606      	mov	r6, r0
 800b644:	10ad      	asrs	r5, r5, #2
 800b646:	d03d      	beq.n	800b6c4 <__pow5mult+0xa0>
 800b648:	69fc      	ldr	r4, [r7, #28]
 800b64a:	b97c      	cbnz	r4, 800b66c <__pow5mult+0x48>
 800b64c:	2010      	movs	r0, #16
 800b64e:	f7ff fd2b 	bl	800b0a8 <malloc>
 800b652:	4602      	mov	r2, r0
 800b654:	61f8      	str	r0, [r7, #28]
 800b656:	b928      	cbnz	r0, 800b664 <__pow5mult+0x40>
 800b658:	4b1d      	ldr	r3, [pc, #116]	@ (800b6d0 <__pow5mult+0xac>)
 800b65a:	481e      	ldr	r0, [pc, #120]	@ (800b6d4 <__pow5mult+0xb0>)
 800b65c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b660:	f7fe fb26 	bl	8009cb0 <__assert_func>
 800b664:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b668:	6004      	str	r4, [r0, #0]
 800b66a:	60c4      	str	r4, [r0, #12]
 800b66c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b670:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b674:	b94c      	cbnz	r4, 800b68a <__pow5mult+0x66>
 800b676:	f240 2171 	movw	r1, #625	@ 0x271
 800b67a:	4638      	mov	r0, r7
 800b67c:	f7ff ff1a 	bl	800b4b4 <__i2b>
 800b680:	2300      	movs	r3, #0
 800b682:	f8c8 0008 	str.w	r0, [r8, #8]
 800b686:	4604      	mov	r4, r0
 800b688:	6003      	str	r3, [r0, #0]
 800b68a:	f04f 0900 	mov.w	r9, #0
 800b68e:	07eb      	lsls	r3, r5, #31
 800b690:	d50a      	bpl.n	800b6a8 <__pow5mult+0x84>
 800b692:	4631      	mov	r1, r6
 800b694:	4622      	mov	r2, r4
 800b696:	4638      	mov	r0, r7
 800b698:	f7ff ff22 	bl	800b4e0 <__multiply>
 800b69c:	4631      	mov	r1, r6
 800b69e:	4680      	mov	r8, r0
 800b6a0:	4638      	mov	r0, r7
 800b6a2:	f7ff fe09 	bl	800b2b8 <_Bfree>
 800b6a6:	4646      	mov	r6, r8
 800b6a8:	106d      	asrs	r5, r5, #1
 800b6aa:	d00b      	beq.n	800b6c4 <__pow5mult+0xa0>
 800b6ac:	6820      	ldr	r0, [r4, #0]
 800b6ae:	b938      	cbnz	r0, 800b6c0 <__pow5mult+0x9c>
 800b6b0:	4622      	mov	r2, r4
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	4638      	mov	r0, r7
 800b6b6:	f7ff ff13 	bl	800b4e0 <__multiply>
 800b6ba:	6020      	str	r0, [r4, #0]
 800b6bc:	f8c0 9000 	str.w	r9, [r0]
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	e7e4      	b.n	800b68e <__pow5mult+0x6a>
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ca:	bf00      	nop
 800b6cc:	0800d69c 	.word	0x0800d69c
 800b6d0:	0800d352 	.word	0x0800d352
 800b6d4:	0800d4dd 	.word	0x0800d4dd

0800b6d8 <__lshift>:
 800b6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6dc:	460c      	mov	r4, r1
 800b6de:	6849      	ldr	r1, [r1, #4]
 800b6e0:	6923      	ldr	r3, [r4, #16]
 800b6e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6e6:	68a3      	ldr	r3, [r4, #8]
 800b6e8:	4607      	mov	r7, r0
 800b6ea:	4691      	mov	r9, r2
 800b6ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6f0:	f108 0601 	add.w	r6, r8, #1
 800b6f4:	42b3      	cmp	r3, r6
 800b6f6:	db0b      	blt.n	800b710 <__lshift+0x38>
 800b6f8:	4638      	mov	r0, r7
 800b6fa:	f7ff fd9d 	bl	800b238 <_Balloc>
 800b6fe:	4605      	mov	r5, r0
 800b700:	b948      	cbnz	r0, 800b716 <__lshift+0x3e>
 800b702:	4602      	mov	r2, r0
 800b704:	4b28      	ldr	r3, [pc, #160]	@ (800b7a8 <__lshift+0xd0>)
 800b706:	4829      	ldr	r0, [pc, #164]	@ (800b7ac <__lshift+0xd4>)
 800b708:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b70c:	f7fe fad0 	bl	8009cb0 <__assert_func>
 800b710:	3101      	adds	r1, #1
 800b712:	005b      	lsls	r3, r3, #1
 800b714:	e7ee      	b.n	800b6f4 <__lshift+0x1c>
 800b716:	2300      	movs	r3, #0
 800b718:	f100 0114 	add.w	r1, r0, #20
 800b71c:	f100 0210 	add.w	r2, r0, #16
 800b720:	4618      	mov	r0, r3
 800b722:	4553      	cmp	r3, sl
 800b724:	db33      	blt.n	800b78e <__lshift+0xb6>
 800b726:	6920      	ldr	r0, [r4, #16]
 800b728:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b72c:	f104 0314 	add.w	r3, r4, #20
 800b730:	f019 091f 	ands.w	r9, r9, #31
 800b734:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b738:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b73c:	d02b      	beq.n	800b796 <__lshift+0xbe>
 800b73e:	f1c9 0e20 	rsb	lr, r9, #32
 800b742:	468a      	mov	sl, r1
 800b744:	2200      	movs	r2, #0
 800b746:	6818      	ldr	r0, [r3, #0]
 800b748:	fa00 f009 	lsl.w	r0, r0, r9
 800b74c:	4310      	orrs	r0, r2
 800b74e:	f84a 0b04 	str.w	r0, [sl], #4
 800b752:	f853 2b04 	ldr.w	r2, [r3], #4
 800b756:	459c      	cmp	ip, r3
 800b758:	fa22 f20e 	lsr.w	r2, r2, lr
 800b75c:	d8f3      	bhi.n	800b746 <__lshift+0x6e>
 800b75e:	ebac 0304 	sub.w	r3, ip, r4
 800b762:	3b15      	subs	r3, #21
 800b764:	f023 0303 	bic.w	r3, r3, #3
 800b768:	3304      	adds	r3, #4
 800b76a:	f104 0015 	add.w	r0, r4, #21
 800b76e:	4560      	cmp	r0, ip
 800b770:	bf88      	it	hi
 800b772:	2304      	movhi	r3, #4
 800b774:	50ca      	str	r2, [r1, r3]
 800b776:	b10a      	cbz	r2, 800b77c <__lshift+0xa4>
 800b778:	f108 0602 	add.w	r6, r8, #2
 800b77c:	3e01      	subs	r6, #1
 800b77e:	4638      	mov	r0, r7
 800b780:	612e      	str	r6, [r5, #16]
 800b782:	4621      	mov	r1, r4
 800b784:	f7ff fd98 	bl	800b2b8 <_Bfree>
 800b788:	4628      	mov	r0, r5
 800b78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b78e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b792:	3301      	adds	r3, #1
 800b794:	e7c5      	b.n	800b722 <__lshift+0x4a>
 800b796:	3904      	subs	r1, #4
 800b798:	f853 2b04 	ldr.w	r2, [r3], #4
 800b79c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7a0:	459c      	cmp	ip, r3
 800b7a2:	d8f9      	bhi.n	800b798 <__lshift+0xc0>
 800b7a4:	e7ea      	b.n	800b77c <__lshift+0xa4>
 800b7a6:	bf00      	nop
 800b7a8:	0800d46c 	.word	0x0800d46c
 800b7ac:	0800d4dd 	.word	0x0800d4dd

0800b7b0 <__mcmp>:
 800b7b0:	690a      	ldr	r2, [r1, #16]
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	6900      	ldr	r0, [r0, #16]
 800b7b6:	1a80      	subs	r0, r0, r2
 800b7b8:	b530      	push	{r4, r5, lr}
 800b7ba:	d10e      	bne.n	800b7da <__mcmp+0x2a>
 800b7bc:	3314      	adds	r3, #20
 800b7be:	3114      	adds	r1, #20
 800b7c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b7c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b7c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b7cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b7d0:	4295      	cmp	r5, r2
 800b7d2:	d003      	beq.n	800b7dc <__mcmp+0x2c>
 800b7d4:	d205      	bcs.n	800b7e2 <__mcmp+0x32>
 800b7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7da:	bd30      	pop	{r4, r5, pc}
 800b7dc:	42a3      	cmp	r3, r4
 800b7de:	d3f3      	bcc.n	800b7c8 <__mcmp+0x18>
 800b7e0:	e7fb      	b.n	800b7da <__mcmp+0x2a>
 800b7e2:	2001      	movs	r0, #1
 800b7e4:	e7f9      	b.n	800b7da <__mcmp+0x2a>
	...

0800b7e8 <__mdiff>:
 800b7e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	4689      	mov	r9, r1
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	4648      	mov	r0, r9
 800b7f4:	4614      	mov	r4, r2
 800b7f6:	f7ff ffdb 	bl	800b7b0 <__mcmp>
 800b7fa:	1e05      	subs	r5, r0, #0
 800b7fc:	d112      	bne.n	800b824 <__mdiff+0x3c>
 800b7fe:	4629      	mov	r1, r5
 800b800:	4630      	mov	r0, r6
 800b802:	f7ff fd19 	bl	800b238 <_Balloc>
 800b806:	4602      	mov	r2, r0
 800b808:	b928      	cbnz	r0, 800b816 <__mdiff+0x2e>
 800b80a:	4b3f      	ldr	r3, [pc, #252]	@ (800b908 <__mdiff+0x120>)
 800b80c:	f240 2137 	movw	r1, #567	@ 0x237
 800b810:	483e      	ldr	r0, [pc, #248]	@ (800b90c <__mdiff+0x124>)
 800b812:	f7fe fa4d 	bl	8009cb0 <__assert_func>
 800b816:	2301      	movs	r3, #1
 800b818:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b81c:	4610      	mov	r0, r2
 800b81e:	b003      	add	sp, #12
 800b820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b824:	bfbc      	itt	lt
 800b826:	464b      	movlt	r3, r9
 800b828:	46a1      	movlt	r9, r4
 800b82a:	4630      	mov	r0, r6
 800b82c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b830:	bfba      	itte	lt
 800b832:	461c      	movlt	r4, r3
 800b834:	2501      	movlt	r5, #1
 800b836:	2500      	movge	r5, #0
 800b838:	f7ff fcfe 	bl	800b238 <_Balloc>
 800b83c:	4602      	mov	r2, r0
 800b83e:	b918      	cbnz	r0, 800b848 <__mdiff+0x60>
 800b840:	4b31      	ldr	r3, [pc, #196]	@ (800b908 <__mdiff+0x120>)
 800b842:	f240 2145 	movw	r1, #581	@ 0x245
 800b846:	e7e3      	b.n	800b810 <__mdiff+0x28>
 800b848:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b84c:	6926      	ldr	r6, [r4, #16]
 800b84e:	60c5      	str	r5, [r0, #12]
 800b850:	f109 0310 	add.w	r3, r9, #16
 800b854:	f109 0514 	add.w	r5, r9, #20
 800b858:	f104 0e14 	add.w	lr, r4, #20
 800b85c:	f100 0b14 	add.w	fp, r0, #20
 800b860:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b864:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b868:	9301      	str	r3, [sp, #4]
 800b86a:	46d9      	mov	r9, fp
 800b86c:	f04f 0c00 	mov.w	ip, #0
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b876:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b87a:	9301      	str	r3, [sp, #4]
 800b87c:	fa1f f38a 	uxth.w	r3, sl
 800b880:	4619      	mov	r1, r3
 800b882:	b283      	uxth	r3, r0
 800b884:	1acb      	subs	r3, r1, r3
 800b886:	0c00      	lsrs	r0, r0, #16
 800b888:	4463      	add	r3, ip
 800b88a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b88e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b892:	b29b      	uxth	r3, r3
 800b894:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b898:	4576      	cmp	r6, lr
 800b89a:	f849 3b04 	str.w	r3, [r9], #4
 800b89e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8a2:	d8e5      	bhi.n	800b870 <__mdiff+0x88>
 800b8a4:	1b33      	subs	r3, r6, r4
 800b8a6:	3b15      	subs	r3, #21
 800b8a8:	f023 0303 	bic.w	r3, r3, #3
 800b8ac:	3415      	adds	r4, #21
 800b8ae:	3304      	adds	r3, #4
 800b8b0:	42a6      	cmp	r6, r4
 800b8b2:	bf38      	it	cc
 800b8b4:	2304      	movcc	r3, #4
 800b8b6:	441d      	add	r5, r3
 800b8b8:	445b      	add	r3, fp
 800b8ba:	461e      	mov	r6, r3
 800b8bc:	462c      	mov	r4, r5
 800b8be:	4544      	cmp	r4, r8
 800b8c0:	d30e      	bcc.n	800b8e0 <__mdiff+0xf8>
 800b8c2:	f108 0103 	add.w	r1, r8, #3
 800b8c6:	1b49      	subs	r1, r1, r5
 800b8c8:	f021 0103 	bic.w	r1, r1, #3
 800b8cc:	3d03      	subs	r5, #3
 800b8ce:	45a8      	cmp	r8, r5
 800b8d0:	bf38      	it	cc
 800b8d2:	2100      	movcc	r1, #0
 800b8d4:	440b      	add	r3, r1
 800b8d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8da:	b191      	cbz	r1, 800b902 <__mdiff+0x11a>
 800b8dc:	6117      	str	r7, [r2, #16]
 800b8de:	e79d      	b.n	800b81c <__mdiff+0x34>
 800b8e0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b8e4:	46e6      	mov	lr, ip
 800b8e6:	0c08      	lsrs	r0, r1, #16
 800b8e8:	fa1c fc81 	uxtah	ip, ip, r1
 800b8ec:	4471      	add	r1, lr
 800b8ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b8f2:	b289      	uxth	r1, r1
 800b8f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b8f8:	f846 1b04 	str.w	r1, [r6], #4
 800b8fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b900:	e7dd      	b.n	800b8be <__mdiff+0xd6>
 800b902:	3f01      	subs	r7, #1
 800b904:	e7e7      	b.n	800b8d6 <__mdiff+0xee>
 800b906:	bf00      	nop
 800b908:	0800d46c 	.word	0x0800d46c
 800b90c:	0800d4dd 	.word	0x0800d4dd

0800b910 <__ulp>:
 800b910:	b082      	sub	sp, #8
 800b912:	ed8d 0b00 	vstr	d0, [sp]
 800b916:	9a01      	ldr	r2, [sp, #4]
 800b918:	4b0f      	ldr	r3, [pc, #60]	@ (800b958 <__ulp+0x48>)
 800b91a:	4013      	ands	r3, r2
 800b91c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b920:	2b00      	cmp	r3, #0
 800b922:	dc08      	bgt.n	800b936 <__ulp+0x26>
 800b924:	425b      	negs	r3, r3
 800b926:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b92a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b92e:	da04      	bge.n	800b93a <__ulp+0x2a>
 800b930:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b934:	4113      	asrs	r3, r2
 800b936:	2200      	movs	r2, #0
 800b938:	e008      	b.n	800b94c <__ulp+0x3c>
 800b93a:	f1a2 0314 	sub.w	r3, r2, #20
 800b93e:	2b1e      	cmp	r3, #30
 800b940:	bfda      	itte	le
 800b942:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b946:	40da      	lsrle	r2, r3
 800b948:	2201      	movgt	r2, #1
 800b94a:	2300      	movs	r3, #0
 800b94c:	4619      	mov	r1, r3
 800b94e:	4610      	mov	r0, r2
 800b950:	ec41 0b10 	vmov	d0, r0, r1
 800b954:	b002      	add	sp, #8
 800b956:	4770      	bx	lr
 800b958:	7ff00000 	.word	0x7ff00000

0800b95c <__b2d>:
 800b95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b960:	6906      	ldr	r6, [r0, #16]
 800b962:	f100 0814 	add.w	r8, r0, #20
 800b966:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b96a:	1f37      	subs	r7, r6, #4
 800b96c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b970:	4610      	mov	r0, r2
 800b972:	f7ff fd53 	bl	800b41c <__hi0bits>
 800b976:	f1c0 0320 	rsb	r3, r0, #32
 800b97a:	280a      	cmp	r0, #10
 800b97c:	600b      	str	r3, [r1, #0]
 800b97e:	491b      	ldr	r1, [pc, #108]	@ (800b9ec <__b2d+0x90>)
 800b980:	dc15      	bgt.n	800b9ae <__b2d+0x52>
 800b982:	f1c0 0c0b 	rsb	ip, r0, #11
 800b986:	fa22 f30c 	lsr.w	r3, r2, ip
 800b98a:	45b8      	cmp	r8, r7
 800b98c:	ea43 0501 	orr.w	r5, r3, r1
 800b990:	bf34      	ite	cc
 800b992:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b996:	2300      	movcs	r3, #0
 800b998:	3015      	adds	r0, #21
 800b99a:	fa02 f000 	lsl.w	r0, r2, r0
 800b99e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b9a2:	4303      	orrs	r3, r0
 800b9a4:	461c      	mov	r4, r3
 800b9a6:	ec45 4b10 	vmov	d0, r4, r5
 800b9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ae:	45b8      	cmp	r8, r7
 800b9b0:	bf3a      	itte	cc
 800b9b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b9b6:	f1a6 0708 	subcc.w	r7, r6, #8
 800b9ba:	2300      	movcs	r3, #0
 800b9bc:	380b      	subs	r0, #11
 800b9be:	d012      	beq.n	800b9e6 <__b2d+0x8a>
 800b9c0:	f1c0 0120 	rsb	r1, r0, #32
 800b9c4:	fa23 f401 	lsr.w	r4, r3, r1
 800b9c8:	4082      	lsls	r2, r0
 800b9ca:	4322      	orrs	r2, r4
 800b9cc:	4547      	cmp	r7, r8
 800b9ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b9d2:	bf8c      	ite	hi
 800b9d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b9d8:	2200      	movls	r2, #0
 800b9da:	4083      	lsls	r3, r0
 800b9dc:	40ca      	lsrs	r2, r1
 800b9de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	e7de      	b.n	800b9a4 <__b2d+0x48>
 800b9e6:	ea42 0501 	orr.w	r5, r2, r1
 800b9ea:	e7db      	b.n	800b9a4 <__b2d+0x48>
 800b9ec:	3ff00000 	.word	0x3ff00000

0800b9f0 <__d2b>:
 800b9f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9f4:	460f      	mov	r7, r1
 800b9f6:	2101      	movs	r1, #1
 800b9f8:	ec59 8b10 	vmov	r8, r9, d0
 800b9fc:	4616      	mov	r6, r2
 800b9fe:	f7ff fc1b 	bl	800b238 <_Balloc>
 800ba02:	4604      	mov	r4, r0
 800ba04:	b930      	cbnz	r0, 800ba14 <__d2b+0x24>
 800ba06:	4602      	mov	r2, r0
 800ba08:	4b23      	ldr	r3, [pc, #140]	@ (800ba98 <__d2b+0xa8>)
 800ba0a:	4824      	ldr	r0, [pc, #144]	@ (800ba9c <__d2b+0xac>)
 800ba0c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba10:	f7fe f94e 	bl	8009cb0 <__assert_func>
 800ba14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba1c:	b10d      	cbz	r5, 800ba22 <__d2b+0x32>
 800ba1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba22:	9301      	str	r3, [sp, #4]
 800ba24:	f1b8 0300 	subs.w	r3, r8, #0
 800ba28:	d023      	beq.n	800ba72 <__d2b+0x82>
 800ba2a:	4668      	mov	r0, sp
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	f7ff fd14 	bl	800b45a <__lo0bits>
 800ba32:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba36:	b1d0      	cbz	r0, 800ba6e <__d2b+0x7e>
 800ba38:	f1c0 0320 	rsb	r3, r0, #32
 800ba3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba40:	430b      	orrs	r3, r1
 800ba42:	40c2      	lsrs	r2, r0
 800ba44:	6163      	str	r3, [r4, #20]
 800ba46:	9201      	str	r2, [sp, #4]
 800ba48:	9b01      	ldr	r3, [sp, #4]
 800ba4a:	61a3      	str	r3, [r4, #24]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	bf0c      	ite	eq
 800ba50:	2201      	moveq	r2, #1
 800ba52:	2202      	movne	r2, #2
 800ba54:	6122      	str	r2, [r4, #16]
 800ba56:	b1a5      	cbz	r5, 800ba82 <__d2b+0x92>
 800ba58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ba5c:	4405      	add	r5, r0
 800ba5e:	603d      	str	r5, [r7, #0]
 800ba60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ba64:	6030      	str	r0, [r6, #0]
 800ba66:	4620      	mov	r0, r4
 800ba68:	b003      	add	sp, #12
 800ba6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba6e:	6161      	str	r1, [r4, #20]
 800ba70:	e7ea      	b.n	800ba48 <__d2b+0x58>
 800ba72:	a801      	add	r0, sp, #4
 800ba74:	f7ff fcf1 	bl	800b45a <__lo0bits>
 800ba78:	9b01      	ldr	r3, [sp, #4]
 800ba7a:	6163      	str	r3, [r4, #20]
 800ba7c:	3020      	adds	r0, #32
 800ba7e:	2201      	movs	r2, #1
 800ba80:	e7e8      	b.n	800ba54 <__d2b+0x64>
 800ba82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba8a:	6038      	str	r0, [r7, #0]
 800ba8c:	6918      	ldr	r0, [r3, #16]
 800ba8e:	f7ff fcc5 	bl	800b41c <__hi0bits>
 800ba92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba96:	e7e5      	b.n	800ba64 <__d2b+0x74>
 800ba98:	0800d46c 	.word	0x0800d46c
 800ba9c:	0800d4dd 	.word	0x0800d4dd

0800baa0 <__ratio>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	b085      	sub	sp, #20
 800baa6:	e9cd 1000 	strd	r1, r0, [sp]
 800baaa:	a902      	add	r1, sp, #8
 800baac:	f7ff ff56 	bl	800b95c <__b2d>
 800bab0:	9800      	ldr	r0, [sp, #0]
 800bab2:	a903      	add	r1, sp, #12
 800bab4:	ec55 4b10 	vmov	r4, r5, d0
 800bab8:	f7ff ff50 	bl	800b95c <__b2d>
 800babc:	9b01      	ldr	r3, [sp, #4]
 800babe:	6919      	ldr	r1, [r3, #16]
 800bac0:	9b00      	ldr	r3, [sp, #0]
 800bac2:	691b      	ldr	r3, [r3, #16]
 800bac4:	1ac9      	subs	r1, r1, r3
 800bac6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800baca:	1a9b      	subs	r3, r3, r2
 800bacc:	ec5b ab10 	vmov	sl, fp, d0
 800bad0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	bfce      	itee	gt
 800bad8:	462a      	movgt	r2, r5
 800bada:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bade:	465a      	movle	r2, fp
 800bae0:	462f      	mov	r7, r5
 800bae2:	46d9      	mov	r9, fp
 800bae4:	bfcc      	ite	gt
 800bae6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800baea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800baee:	464b      	mov	r3, r9
 800baf0:	4652      	mov	r2, sl
 800baf2:	4620      	mov	r0, r4
 800baf4:	4639      	mov	r1, r7
 800baf6:	f7f4 feb9 	bl	800086c <__aeabi_ddiv>
 800bafa:	ec41 0b10 	vmov	d0, r0, r1
 800bafe:	b005      	add	sp, #20
 800bb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb04 <__copybits>:
 800bb04:	3901      	subs	r1, #1
 800bb06:	b570      	push	{r4, r5, r6, lr}
 800bb08:	1149      	asrs	r1, r1, #5
 800bb0a:	6914      	ldr	r4, [r2, #16]
 800bb0c:	3101      	adds	r1, #1
 800bb0e:	f102 0314 	add.w	r3, r2, #20
 800bb12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb1a:	1f05      	subs	r5, r0, #4
 800bb1c:	42a3      	cmp	r3, r4
 800bb1e:	d30c      	bcc.n	800bb3a <__copybits+0x36>
 800bb20:	1aa3      	subs	r3, r4, r2
 800bb22:	3b11      	subs	r3, #17
 800bb24:	f023 0303 	bic.w	r3, r3, #3
 800bb28:	3211      	adds	r2, #17
 800bb2a:	42a2      	cmp	r2, r4
 800bb2c:	bf88      	it	hi
 800bb2e:	2300      	movhi	r3, #0
 800bb30:	4418      	add	r0, r3
 800bb32:	2300      	movs	r3, #0
 800bb34:	4288      	cmp	r0, r1
 800bb36:	d305      	bcc.n	800bb44 <__copybits+0x40>
 800bb38:	bd70      	pop	{r4, r5, r6, pc}
 800bb3a:	f853 6b04 	ldr.w	r6, [r3], #4
 800bb3e:	f845 6f04 	str.w	r6, [r5, #4]!
 800bb42:	e7eb      	b.n	800bb1c <__copybits+0x18>
 800bb44:	f840 3b04 	str.w	r3, [r0], #4
 800bb48:	e7f4      	b.n	800bb34 <__copybits+0x30>

0800bb4a <__any_on>:
 800bb4a:	f100 0214 	add.w	r2, r0, #20
 800bb4e:	6900      	ldr	r0, [r0, #16]
 800bb50:	114b      	asrs	r3, r1, #5
 800bb52:	4298      	cmp	r0, r3
 800bb54:	b510      	push	{r4, lr}
 800bb56:	db11      	blt.n	800bb7c <__any_on+0x32>
 800bb58:	dd0a      	ble.n	800bb70 <__any_on+0x26>
 800bb5a:	f011 011f 	ands.w	r1, r1, #31
 800bb5e:	d007      	beq.n	800bb70 <__any_on+0x26>
 800bb60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb64:	fa24 f001 	lsr.w	r0, r4, r1
 800bb68:	fa00 f101 	lsl.w	r1, r0, r1
 800bb6c:	428c      	cmp	r4, r1
 800bb6e:	d10b      	bne.n	800bb88 <__any_on+0x3e>
 800bb70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d803      	bhi.n	800bb80 <__any_on+0x36>
 800bb78:	2000      	movs	r0, #0
 800bb7a:	bd10      	pop	{r4, pc}
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	e7f7      	b.n	800bb70 <__any_on+0x26>
 800bb80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb84:	2900      	cmp	r1, #0
 800bb86:	d0f5      	beq.n	800bb74 <__any_on+0x2a>
 800bb88:	2001      	movs	r0, #1
 800bb8a:	e7f6      	b.n	800bb7a <__any_on+0x30>

0800bb8c <__ascii_wctomb>:
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	4608      	mov	r0, r1
 800bb90:	b141      	cbz	r1, 800bba4 <__ascii_wctomb+0x18>
 800bb92:	2aff      	cmp	r2, #255	@ 0xff
 800bb94:	d904      	bls.n	800bba0 <__ascii_wctomb+0x14>
 800bb96:	228a      	movs	r2, #138	@ 0x8a
 800bb98:	601a      	str	r2, [r3, #0]
 800bb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb9e:	4770      	bx	lr
 800bba0:	700a      	strb	r2, [r1, #0]
 800bba2:	2001      	movs	r0, #1
 800bba4:	4770      	bx	lr

0800bba6 <__ssputs_r>:
 800bba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbaa:	688e      	ldr	r6, [r1, #8]
 800bbac:	461f      	mov	r7, r3
 800bbae:	42be      	cmp	r6, r7
 800bbb0:	680b      	ldr	r3, [r1, #0]
 800bbb2:	4682      	mov	sl, r0
 800bbb4:	460c      	mov	r4, r1
 800bbb6:	4690      	mov	r8, r2
 800bbb8:	d82d      	bhi.n	800bc16 <__ssputs_r+0x70>
 800bbba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbbe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bbc2:	d026      	beq.n	800bc12 <__ssputs_r+0x6c>
 800bbc4:	6965      	ldr	r5, [r4, #20]
 800bbc6:	6909      	ldr	r1, [r1, #16]
 800bbc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbcc:	eba3 0901 	sub.w	r9, r3, r1
 800bbd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbd4:	1c7b      	adds	r3, r7, #1
 800bbd6:	444b      	add	r3, r9
 800bbd8:	106d      	asrs	r5, r5, #1
 800bbda:	429d      	cmp	r5, r3
 800bbdc:	bf38      	it	cc
 800bbde:	461d      	movcc	r5, r3
 800bbe0:	0553      	lsls	r3, r2, #21
 800bbe2:	d527      	bpl.n	800bc34 <__ssputs_r+0x8e>
 800bbe4:	4629      	mov	r1, r5
 800bbe6:	f7ff fa89 	bl	800b0fc <_malloc_r>
 800bbea:	4606      	mov	r6, r0
 800bbec:	b360      	cbz	r0, 800bc48 <__ssputs_r+0xa2>
 800bbee:	6921      	ldr	r1, [r4, #16]
 800bbf0:	464a      	mov	r2, r9
 800bbf2:	f7fe f846 	bl	8009c82 <memcpy>
 800bbf6:	89a3      	ldrh	r3, [r4, #12]
 800bbf8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bbfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc00:	81a3      	strh	r3, [r4, #12]
 800bc02:	6126      	str	r6, [r4, #16]
 800bc04:	6165      	str	r5, [r4, #20]
 800bc06:	444e      	add	r6, r9
 800bc08:	eba5 0509 	sub.w	r5, r5, r9
 800bc0c:	6026      	str	r6, [r4, #0]
 800bc0e:	60a5      	str	r5, [r4, #8]
 800bc10:	463e      	mov	r6, r7
 800bc12:	42be      	cmp	r6, r7
 800bc14:	d900      	bls.n	800bc18 <__ssputs_r+0x72>
 800bc16:	463e      	mov	r6, r7
 800bc18:	6820      	ldr	r0, [r4, #0]
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	4641      	mov	r1, r8
 800bc1e:	f000 f9d7 	bl	800bfd0 <memmove>
 800bc22:	68a3      	ldr	r3, [r4, #8]
 800bc24:	1b9b      	subs	r3, r3, r6
 800bc26:	60a3      	str	r3, [r4, #8]
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	4433      	add	r3, r6
 800bc2c:	6023      	str	r3, [r4, #0]
 800bc2e:	2000      	movs	r0, #0
 800bc30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc34:	462a      	mov	r2, r5
 800bc36:	f000 fa10 	bl	800c05a <_realloc_r>
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d1e0      	bne.n	800bc02 <__ssputs_r+0x5c>
 800bc40:	6921      	ldr	r1, [r4, #16]
 800bc42:	4650      	mov	r0, sl
 800bc44:	f7fe feac 	bl	800a9a0 <_free_r>
 800bc48:	230c      	movs	r3, #12
 800bc4a:	f8ca 3000 	str.w	r3, [sl]
 800bc4e:	89a3      	ldrh	r3, [r4, #12]
 800bc50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc54:	81a3      	strh	r3, [r4, #12]
 800bc56:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5a:	e7e9      	b.n	800bc30 <__ssputs_r+0x8a>

0800bc5c <_svfiprintf_r>:
 800bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc60:	4698      	mov	r8, r3
 800bc62:	898b      	ldrh	r3, [r1, #12]
 800bc64:	061b      	lsls	r3, r3, #24
 800bc66:	b09d      	sub	sp, #116	@ 0x74
 800bc68:	4607      	mov	r7, r0
 800bc6a:	460d      	mov	r5, r1
 800bc6c:	4614      	mov	r4, r2
 800bc6e:	d510      	bpl.n	800bc92 <_svfiprintf_r+0x36>
 800bc70:	690b      	ldr	r3, [r1, #16]
 800bc72:	b973      	cbnz	r3, 800bc92 <_svfiprintf_r+0x36>
 800bc74:	2140      	movs	r1, #64	@ 0x40
 800bc76:	f7ff fa41 	bl	800b0fc <_malloc_r>
 800bc7a:	6028      	str	r0, [r5, #0]
 800bc7c:	6128      	str	r0, [r5, #16]
 800bc7e:	b930      	cbnz	r0, 800bc8e <_svfiprintf_r+0x32>
 800bc80:	230c      	movs	r3, #12
 800bc82:	603b      	str	r3, [r7, #0]
 800bc84:	f04f 30ff 	mov.w	r0, #4294967295
 800bc88:	b01d      	add	sp, #116	@ 0x74
 800bc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8e:	2340      	movs	r3, #64	@ 0x40
 800bc90:	616b      	str	r3, [r5, #20]
 800bc92:	2300      	movs	r3, #0
 800bc94:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc96:	2320      	movs	r3, #32
 800bc98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bca0:	2330      	movs	r3, #48	@ 0x30
 800bca2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800be40 <_svfiprintf_r+0x1e4>
 800bca6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bcaa:	f04f 0901 	mov.w	r9, #1
 800bcae:	4623      	mov	r3, r4
 800bcb0:	469a      	mov	sl, r3
 800bcb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcb6:	b10a      	cbz	r2, 800bcbc <_svfiprintf_r+0x60>
 800bcb8:	2a25      	cmp	r2, #37	@ 0x25
 800bcba:	d1f9      	bne.n	800bcb0 <_svfiprintf_r+0x54>
 800bcbc:	ebba 0b04 	subs.w	fp, sl, r4
 800bcc0:	d00b      	beq.n	800bcda <_svfiprintf_r+0x7e>
 800bcc2:	465b      	mov	r3, fp
 800bcc4:	4622      	mov	r2, r4
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	4638      	mov	r0, r7
 800bcca:	f7ff ff6c 	bl	800bba6 <__ssputs_r>
 800bcce:	3001      	adds	r0, #1
 800bcd0:	f000 80a7 	beq.w	800be22 <_svfiprintf_r+0x1c6>
 800bcd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcd6:	445a      	add	r2, fp
 800bcd8:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcda:	f89a 3000 	ldrb.w	r3, [sl]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f000 809f 	beq.w	800be22 <_svfiprintf_r+0x1c6>
 800bce4:	2300      	movs	r3, #0
 800bce6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcee:	f10a 0a01 	add.w	sl, sl, #1
 800bcf2:	9304      	str	r3, [sp, #16]
 800bcf4:	9307      	str	r3, [sp, #28]
 800bcf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcfa:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcfc:	4654      	mov	r4, sl
 800bcfe:	2205      	movs	r2, #5
 800bd00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd04:	484e      	ldr	r0, [pc, #312]	@ (800be40 <_svfiprintf_r+0x1e4>)
 800bd06:	f7f4 fa73 	bl	80001f0 <memchr>
 800bd0a:	9a04      	ldr	r2, [sp, #16]
 800bd0c:	b9d8      	cbnz	r0, 800bd46 <_svfiprintf_r+0xea>
 800bd0e:	06d0      	lsls	r0, r2, #27
 800bd10:	bf44      	itt	mi
 800bd12:	2320      	movmi	r3, #32
 800bd14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd18:	0711      	lsls	r1, r2, #28
 800bd1a:	bf44      	itt	mi
 800bd1c:	232b      	movmi	r3, #43	@ 0x2b
 800bd1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd22:	f89a 3000 	ldrb.w	r3, [sl]
 800bd26:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd28:	d015      	beq.n	800bd56 <_svfiprintf_r+0xfa>
 800bd2a:	9a07      	ldr	r2, [sp, #28]
 800bd2c:	4654      	mov	r4, sl
 800bd2e:	2000      	movs	r0, #0
 800bd30:	f04f 0c0a 	mov.w	ip, #10
 800bd34:	4621      	mov	r1, r4
 800bd36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd3a:	3b30      	subs	r3, #48	@ 0x30
 800bd3c:	2b09      	cmp	r3, #9
 800bd3e:	d94b      	bls.n	800bdd8 <_svfiprintf_r+0x17c>
 800bd40:	b1b0      	cbz	r0, 800bd70 <_svfiprintf_r+0x114>
 800bd42:	9207      	str	r2, [sp, #28]
 800bd44:	e014      	b.n	800bd70 <_svfiprintf_r+0x114>
 800bd46:	eba0 0308 	sub.w	r3, r0, r8
 800bd4a:	fa09 f303 	lsl.w	r3, r9, r3
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	9304      	str	r3, [sp, #16]
 800bd52:	46a2      	mov	sl, r4
 800bd54:	e7d2      	b.n	800bcfc <_svfiprintf_r+0xa0>
 800bd56:	9b03      	ldr	r3, [sp, #12]
 800bd58:	1d19      	adds	r1, r3, #4
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	9103      	str	r1, [sp, #12]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	bfbb      	ittet	lt
 800bd62:	425b      	neglt	r3, r3
 800bd64:	f042 0202 	orrlt.w	r2, r2, #2
 800bd68:	9307      	strge	r3, [sp, #28]
 800bd6a:	9307      	strlt	r3, [sp, #28]
 800bd6c:	bfb8      	it	lt
 800bd6e:	9204      	strlt	r2, [sp, #16]
 800bd70:	7823      	ldrb	r3, [r4, #0]
 800bd72:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd74:	d10a      	bne.n	800bd8c <_svfiprintf_r+0x130>
 800bd76:	7863      	ldrb	r3, [r4, #1]
 800bd78:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd7a:	d132      	bne.n	800bde2 <_svfiprintf_r+0x186>
 800bd7c:	9b03      	ldr	r3, [sp, #12]
 800bd7e:	1d1a      	adds	r2, r3, #4
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	9203      	str	r2, [sp, #12]
 800bd84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd88:	3402      	adds	r4, #2
 800bd8a:	9305      	str	r3, [sp, #20]
 800bd8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800be50 <_svfiprintf_r+0x1f4>
 800bd90:	7821      	ldrb	r1, [r4, #0]
 800bd92:	2203      	movs	r2, #3
 800bd94:	4650      	mov	r0, sl
 800bd96:	f7f4 fa2b 	bl	80001f0 <memchr>
 800bd9a:	b138      	cbz	r0, 800bdac <_svfiprintf_r+0x150>
 800bd9c:	9b04      	ldr	r3, [sp, #16]
 800bd9e:	eba0 000a 	sub.w	r0, r0, sl
 800bda2:	2240      	movs	r2, #64	@ 0x40
 800bda4:	4082      	lsls	r2, r0
 800bda6:	4313      	orrs	r3, r2
 800bda8:	3401      	adds	r4, #1
 800bdaa:	9304      	str	r3, [sp, #16]
 800bdac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb0:	4824      	ldr	r0, [pc, #144]	@ (800be44 <_svfiprintf_r+0x1e8>)
 800bdb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdb6:	2206      	movs	r2, #6
 800bdb8:	f7f4 fa1a 	bl	80001f0 <memchr>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d036      	beq.n	800be2e <_svfiprintf_r+0x1d2>
 800bdc0:	4b21      	ldr	r3, [pc, #132]	@ (800be48 <_svfiprintf_r+0x1ec>)
 800bdc2:	bb1b      	cbnz	r3, 800be0c <_svfiprintf_r+0x1b0>
 800bdc4:	9b03      	ldr	r3, [sp, #12]
 800bdc6:	3307      	adds	r3, #7
 800bdc8:	f023 0307 	bic.w	r3, r3, #7
 800bdcc:	3308      	adds	r3, #8
 800bdce:	9303      	str	r3, [sp, #12]
 800bdd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdd2:	4433      	add	r3, r6
 800bdd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdd6:	e76a      	b.n	800bcae <_svfiprintf_r+0x52>
 800bdd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bddc:	460c      	mov	r4, r1
 800bdde:	2001      	movs	r0, #1
 800bde0:	e7a8      	b.n	800bd34 <_svfiprintf_r+0xd8>
 800bde2:	2300      	movs	r3, #0
 800bde4:	3401      	adds	r4, #1
 800bde6:	9305      	str	r3, [sp, #20]
 800bde8:	4619      	mov	r1, r3
 800bdea:	f04f 0c0a 	mov.w	ip, #10
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdf4:	3a30      	subs	r2, #48	@ 0x30
 800bdf6:	2a09      	cmp	r2, #9
 800bdf8:	d903      	bls.n	800be02 <_svfiprintf_r+0x1a6>
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d0c6      	beq.n	800bd8c <_svfiprintf_r+0x130>
 800bdfe:	9105      	str	r1, [sp, #20]
 800be00:	e7c4      	b.n	800bd8c <_svfiprintf_r+0x130>
 800be02:	fb0c 2101 	mla	r1, ip, r1, r2
 800be06:	4604      	mov	r4, r0
 800be08:	2301      	movs	r3, #1
 800be0a:	e7f0      	b.n	800bdee <_svfiprintf_r+0x192>
 800be0c:	ab03      	add	r3, sp, #12
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	462a      	mov	r2, r5
 800be12:	4b0e      	ldr	r3, [pc, #56]	@ (800be4c <_svfiprintf_r+0x1f0>)
 800be14:	a904      	add	r1, sp, #16
 800be16:	4638      	mov	r0, r7
 800be18:	f7fd f90a 	bl	8009030 <_printf_float>
 800be1c:	1c42      	adds	r2, r0, #1
 800be1e:	4606      	mov	r6, r0
 800be20:	d1d6      	bne.n	800bdd0 <_svfiprintf_r+0x174>
 800be22:	89ab      	ldrh	r3, [r5, #12]
 800be24:	065b      	lsls	r3, r3, #25
 800be26:	f53f af2d 	bmi.w	800bc84 <_svfiprintf_r+0x28>
 800be2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be2c:	e72c      	b.n	800bc88 <_svfiprintf_r+0x2c>
 800be2e:	ab03      	add	r3, sp, #12
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	462a      	mov	r2, r5
 800be34:	4b05      	ldr	r3, [pc, #20]	@ (800be4c <_svfiprintf_r+0x1f0>)
 800be36:	a904      	add	r1, sp, #16
 800be38:	4638      	mov	r0, r7
 800be3a:	f7fd fb91 	bl	8009560 <_printf_i>
 800be3e:	e7ed      	b.n	800be1c <_svfiprintf_r+0x1c0>
 800be40:	0800d536 	.word	0x0800d536
 800be44:	0800d540 	.word	0x0800d540
 800be48:	08009031 	.word	0x08009031
 800be4c:	0800bba7 	.word	0x0800bba7
 800be50:	0800d53c 	.word	0x0800d53c

0800be54 <__sflush_r>:
 800be54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5c:	0716      	lsls	r6, r2, #28
 800be5e:	4605      	mov	r5, r0
 800be60:	460c      	mov	r4, r1
 800be62:	d454      	bmi.n	800bf0e <__sflush_r+0xba>
 800be64:	684b      	ldr	r3, [r1, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	dc02      	bgt.n	800be70 <__sflush_r+0x1c>
 800be6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	dd48      	ble.n	800bf02 <__sflush_r+0xae>
 800be70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be72:	2e00      	cmp	r6, #0
 800be74:	d045      	beq.n	800bf02 <__sflush_r+0xae>
 800be76:	2300      	movs	r3, #0
 800be78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be7c:	682f      	ldr	r7, [r5, #0]
 800be7e:	6a21      	ldr	r1, [r4, #32]
 800be80:	602b      	str	r3, [r5, #0]
 800be82:	d030      	beq.n	800bee6 <__sflush_r+0x92>
 800be84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	0759      	lsls	r1, r3, #29
 800be8a:	d505      	bpl.n	800be98 <__sflush_r+0x44>
 800be8c:	6863      	ldr	r3, [r4, #4]
 800be8e:	1ad2      	subs	r2, r2, r3
 800be90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be92:	b10b      	cbz	r3, 800be98 <__sflush_r+0x44>
 800be94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be96:	1ad2      	subs	r2, r2, r3
 800be98:	2300      	movs	r3, #0
 800be9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be9c:	6a21      	ldr	r1, [r4, #32]
 800be9e:	4628      	mov	r0, r5
 800bea0:	47b0      	blx	r6
 800bea2:	1c43      	adds	r3, r0, #1
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	d106      	bne.n	800beb6 <__sflush_r+0x62>
 800bea8:	6829      	ldr	r1, [r5, #0]
 800beaa:	291d      	cmp	r1, #29
 800beac:	d82b      	bhi.n	800bf06 <__sflush_r+0xb2>
 800beae:	4a2a      	ldr	r2, [pc, #168]	@ (800bf58 <__sflush_r+0x104>)
 800beb0:	40ca      	lsrs	r2, r1
 800beb2:	07d6      	lsls	r6, r2, #31
 800beb4:	d527      	bpl.n	800bf06 <__sflush_r+0xb2>
 800beb6:	2200      	movs	r2, #0
 800beb8:	6062      	str	r2, [r4, #4]
 800beba:	04d9      	lsls	r1, r3, #19
 800bebc:	6922      	ldr	r2, [r4, #16]
 800bebe:	6022      	str	r2, [r4, #0]
 800bec0:	d504      	bpl.n	800becc <__sflush_r+0x78>
 800bec2:	1c42      	adds	r2, r0, #1
 800bec4:	d101      	bne.n	800beca <__sflush_r+0x76>
 800bec6:	682b      	ldr	r3, [r5, #0]
 800bec8:	b903      	cbnz	r3, 800becc <__sflush_r+0x78>
 800beca:	6560      	str	r0, [r4, #84]	@ 0x54
 800becc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bece:	602f      	str	r7, [r5, #0]
 800bed0:	b1b9      	cbz	r1, 800bf02 <__sflush_r+0xae>
 800bed2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bed6:	4299      	cmp	r1, r3
 800bed8:	d002      	beq.n	800bee0 <__sflush_r+0x8c>
 800beda:	4628      	mov	r0, r5
 800bedc:	f7fe fd60 	bl	800a9a0 <_free_r>
 800bee0:	2300      	movs	r3, #0
 800bee2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bee4:	e00d      	b.n	800bf02 <__sflush_r+0xae>
 800bee6:	2301      	movs	r3, #1
 800bee8:	4628      	mov	r0, r5
 800beea:	47b0      	blx	r6
 800beec:	4602      	mov	r2, r0
 800beee:	1c50      	adds	r0, r2, #1
 800bef0:	d1c9      	bne.n	800be86 <__sflush_r+0x32>
 800bef2:	682b      	ldr	r3, [r5, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d0c6      	beq.n	800be86 <__sflush_r+0x32>
 800bef8:	2b1d      	cmp	r3, #29
 800befa:	d001      	beq.n	800bf00 <__sflush_r+0xac>
 800befc:	2b16      	cmp	r3, #22
 800befe:	d11e      	bne.n	800bf3e <__sflush_r+0xea>
 800bf00:	602f      	str	r7, [r5, #0]
 800bf02:	2000      	movs	r0, #0
 800bf04:	e022      	b.n	800bf4c <__sflush_r+0xf8>
 800bf06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf0a:	b21b      	sxth	r3, r3
 800bf0c:	e01b      	b.n	800bf46 <__sflush_r+0xf2>
 800bf0e:	690f      	ldr	r7, [r1, #16]
 800bf10:	2f00      	cmp	r7, #0
 800bf12:	d0f6      	beq.n	800bf02 <__sflush_r+0xae>
 800bf14:	0793      	lsls	r3, r2, #30
 800bf16:	680e      	ldr	r6, [r1, #0]
 800bf18:	bf08      	it	eq
 800bf1a:	694b      	ldreq	r3, [r1, #20]
 800bf1c:	600f      	str	r7, [r1, #0]
 800bf1e:	bf18      	it	ne
 800bf20:	2300      	movne	r3, #0
 800bf22:	eba6 0807 	sub.w	r8, r6, r7
 800bf26:	608b      	str	r3, [r1, #8]
 800bf28:	f1b8 0f00 	cmp.w	r8, #0
 800bf2c:	dde9      	ble.n	800bf02 <__sflush_r+0xae>
 800bf2e:	6a21      	ldr	r1, [r4, #32]
 800bf30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf32:	4643      	mov	r3, r8
 800bf34:	463a      	mov	r2, r7
 800bf36:	4628      	mov	r0, r5
 800bf38:	47b0      	blx	r6
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	dc08      	bgt.n	800bf50 <__sflush_r+0xfc>
 800bf3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf46:	81a3      	strh	r3, [r4, #12]
 800bf48:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf50:	4407      	add	r7, r0
 800bf52:	eba8 0800 	sub.w	r8, r8, r0
 800bf56:	e7e7      	b.n	800bf28 <__sflush_r+0xd4>
 800bf58:	20400001 	.word	0x20400001

0800bf5c <_fflush_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	690b      	ldr	r3, [r1, #16]
 800bf60:	4605      	mov	r5, r0
 800bf62:	460c      	mov	r4, r1
 800bf64:	b913      	cbnz	r3, 800bf6c <_fflush_r+0x10>
 800bf66:	2500      	movs	r5, #0
 800bf68:	4628      	mov	r0, r5
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	b118      	cbz	r0, 800bf76 <_fflush_r+0x1a>
 800bf6e:	6a03      	ldr	r3, [r0, #32]
 800bf70:	b90b      	cbnz	r3, 800bf76 <_fflush_r+0x1a>
 800bf72:	f7fd fc9f 	bl	80098b4 <__sinit>
 800bf76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d0f3      	beq.n	800bf66 <_fflush_r+0xa>
 800bf7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf80:	07d0      	lsls	r0, r2, #31
 800bf82:	d404      	bmi.n	800bf8e <_fflush_r+0x32>
 800bf84:	0599      	lsls	r1, r3, #22
 800bf86:	d402      	bmi.n	800bf8e <_fflush_r+0x32>
 800bf88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf8a:	f7fd fe78 	bl	8009c7e <__retarget_lock_acquire_recursive>
 800bf8e:	4628      	mov	r0, r5
 800bf90:	4621      	mov	r1, r4
 800bf92:	f7ff ff5f 	bl	800be54 <__sflush_r>
 800bf96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf98:	07da      	lsls	r2, r3, #31
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	d4e4      	bmi.n	800bf68 <_fflush_r+0xc>
 800bf9e:	89a3      	ldrh	r3, [r4, #12]
 800bfa0:	059b      	lsls	r3, r3, #22
 800bfa2:	d4e1      	bmi.n	800bf68 <_fflush_r+0xc>
 800bfa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfa6:	f7fd fe6b 	bl	8009c80 <__retarget_lock_release_recursive>
 800bfaa:	e7dd      	b.n	800bf68 <_fflush_r+0xc>

0800bfac <fiprintf>:
 800bfac:	b40e      	push	{r1, r2, r3}
 800bfae:	b503      	push	{r0, r1, lr}
 800bfb0:	4601      	mov	r1, r0
 800bfb2:	ab03      	add	r3, sp, #12
 800bfb4:	4805      	ldr	r0, [pc, #20]	@ (800bfcc <fiprintf+0x20>)
 800bfb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfba:	6800      	ldr	r0, [r0, #0]
 800bfbc:	9301      	str	r3, [sp, #4]
 800bfbe:	f000 f8a3 	bl	800c108 <_vfiprintf_r>
 800bfc2:	b002      	add	sp, #8
 800bfc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfc8:	b003      	add	sp, #12
 800bfca:	4770      	bx	lr
 800bfcc:	200003f4 	.word	0x200003f4

0800bfd0 <memmove>:
 800bfd0:	4288      	cmp	r0, r1
 800bfd2:	b510      	push	{r4, lr}
 800bfd4:	eb01 0402 	add.w	r4, r1, r2
 800bfd8:	d902      	bls.n	800bfe0 <memmove+0x10>
 800bfda:	4284      	cmp	r4, r0
 800bfdc:	4623      	mov	r3, r4
 800bfde:	d807      	bhi.n	800bff0 <memmove+0x20>
 800bfe0:	1e43      	subs	r3, r0, #1
 800bfe2:	42a1      	cmp	r1, r4
 800bfe4:	d008      	beq.n	800bff8 <memmove+0x28>
 800bfe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfee:	e7f8      	b.n	800bfe2 <memmove+0x12>
 800bff0:	4402      	add	r2, r0
 800bff2:	4601      	mov	r1, r0
 800bff4:	428a      	cmp	r2, r1
 800bff6:	d100      	bne.n	800bffa <memmove+0x2a>
 800bff8:	bd10      	pop	{r4, pc}
 800bffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c002:	e7f7      	b.n	800bff4 <memmove+0x24>

0800c004 <_sbrk_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	4d06      	ldr	r5, [pc, #24]	@ (800c020 <_sbrk_r+0x1c>)
 800c008:	2300      	movs	r3, #0
 800c00a:	4604      	mov	r4, r0
 800c00c:	4608      	mov	r0, r1
 800c00e:	602b      	str	r3, [r5, #0]
 800c010:	f7f6 fa0a 	bl	8002428 <_sbrk>
 800c014:	1c43      	adds	r3, r0, #1
 800c016:	d102      	bne.n	800c01e <_sbrk_r+0x1a>
 800c018:	682b      	ldr	r3, [r5, #0]
 800c01a:	b103      	cbz	r3, 800c01e <_sbrk_r+0x1a>
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	bd38      	pop	{r3, r4, r5, pc}
 800c020:	20005a88 	.word	0x20005a88

0800c024 <abort>:
 800c024:	b508      	push	{r3, lr}
 800c026:	2006      	movs	r0, #6
 800c028:	f000 fa42 	bl	800c4b0 <raise>
 800c02c:	2001      	movs	r0, #1
 800c02e:	f7f6 f983 	bl	8002338 <_exit>

0800c032 <_calloc_r>:
 800c032:	b570      	push	{r4, r5, r6, lr}
 800c034:	fba1 5402 	umull	r5, r4, r1, r2
 800c038:	b934      	cbnz	r4, 800c048 <_calloc_r+0x16>
 800c03a:	4629      	mov	r1, r5
 800c03c:	f7ff f85e 	bl	800b0fc <_malloc_r>
 800c040:	4606      	mov	r6, r0
 800c042:	b928      	cbnz	r0, 800c050 <_calloc_r+0x1e>
 800c044:	4630      	mov	r0, r6
 800c046:	bd70      	pop	{r4, r5, r6, pc}
 800c048:	220c      	movs	r2, #12
 800c04a:	6002      	str	r2, [r0, #0]
 800c04c:	2600      	movs	r6, #0
 800c04e:	e7f9      	b.n	800c044 <_calloc_r+0x12>
 800c050:	462a      	mov	r2, r5
 800c052:	4621      	mov	r1, r4
 800c054:	f7fd fcc9 	bl	80099ea <memset>
 800c058:	e7f4      	b.n	800c044 <_calloc_r+0x12>

0800c05a <_realloc_r>:
 800c05a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c05e:	4607      	mov	r7, r0
 800c060:	4614      	mov	r4, r2
 800c062:	460d      	mov	r5, r1
 800c064:	b921      	cbnz	r1, 800c070 <_realloc_r+0x16>
 800c066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c06a:	4611      	mov	r1, r2
 800c06c:	f7ff b846 	b.w	800b0fc <_malloc_r>
 800c070:	b92a      	cbnz	r2, 800c07e <_realloc_r+0x24>
 800c072:	f7fe fc95 	bl	800a9a0 <_free_r>
 800c076:	4625      	mov	r5, r4
 800c078:	4628      	mov	r0, r5
 800c07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c07e:	f000 fa33 	bl	800c4e8 <_malloc_usable_size_r>
 800c082:	4284      	cmp	r4, r0
 800c084:	4606      	mov	r6, r0
 800c086:	d802      	bhi.n	800c08e <_realloc_r+0x34>
 800c088:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c08c:	d8f4      	bhi.n	800c078 <_realloc_r+0x1e>
 800c08e:	4621      	mov	r1, r4
 800c090:	4638      	mov	r0, r7
 800c092:	f7ff f833 	bl	800b0fc <_malloc_r>
 800c096:	4680      	mov	r8, r0
 800c098:	b908      	cbnz	r0, 800c09e <_realloc_r+0x44>
 800c09a:	4645      	mov	r5, r8
 800c09c:	e7ec      	b.n	800c078 <_realloc_r+0x1e>
 800c09e:	42b4      	cmp	r4, r6
 800c0a0:	4622      	mov	r2, r4
 800c0a2:	4629      	mov	r1, r5
 800c0a4:	bf28      	it	cs
 800c0a6:	4632      	movcs	r2, r6
 800c0a8:	f7fd fdeb 	bl	8009c82 <memcpy>
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	f7fe fc76 	bl	800a9a0 <_free_r>
 800c0b4:	e7f1      	b.n	800c09a <_realloc_r+0x40>

0800c0b6 <__sfputc_r>:
 800c0b6:	6893      	ldr	r3, [r2, #8]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	b410      	push	{r4}
 800c0be:	6093      	str	r3, [r2, #8]
 800c0c0:	da08      	bge.n	800c0d4 <__sfputc_r+0x1e>
 800c0c2:	6994      	ldr	r4, [r2, #24]
 800c0c4:	42a3      	cmp	r3, r4
 800c0c6:	db01      	blt.n	800c0cc <__sfputc_r+0x16>
 800c0c8:	290a      	cmp	r1, #10
 800c0ca:	d103      	bne.n	800c0d4 <__sfputc_r+0x1e>
 800c0cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0d0:	f000 b932 	b.w	800c338 <__swbuf_r>
 800c0d4:	6813      	ldr	r3, [r2, #0]
 800c0d6:	1c58      	adds	r0, r3, #1
 800c0d8:	6010      	str	r0, [r2, #0]
 800c0da:	7019      	strb	r1, [r3, #0]
 800c0dc:	4608      	mov	r0, r1
 800c0de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <__sfputs_r>:
 800c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e6:	4606      	mov	r6, r0
 800c0e8:	460f      	mov	r7, r1
 800c0ea:	4614      	mov	r4, r2
 800c0ec:	18d5      	adds	r5, r2, r3
 800c0ee:	42ac      	cmp	r4, r5
 800c0f0:	d101      	bne.n	800c0f6 <__sfputs_r+0x12>
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	e007      	b.n	800c106 <__sfputs_r+0x22>
 800c0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0fa:	463a      	mov	r2, r7
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7ff ffda 	bl	800c0b6 <__sfputc_r>
 800c102:	1c43      	adds	r3, r0, #1
 800c104:	d1f3      	bne.n	800c0ee <__sfputs_r+0xa>
 800c106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c108 <_vfiprintf_r>:
 800c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10c:	460d      	mov	r5, r1
 800c10e:	b09d      	sub	sp, #116	@ 0x74
 800c110:	4614      	mov	r4, r2
 800c112:	4698      	mov	r8, r3
 800c114:	4606      	mov	r6, r0
 800c116:	b118      	cbz	r0, 800c120 <_vfiprintf_r+0x18>
 800c118:	6a03      	ldr	r3, [r0, #32]
 800c11a:	b90b      	cbnz	r3, 800c120 <_vfiprintf_r+0x18>
 800c11c:	f7fd fbca 	bl	80098b4 <__sinit>
 800c120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c122:	07d9      	lsls	r1, r3, #31
 800c124:	d405      	bmi.n	800c132 <_vfiprintf_r+0x2a>
 800c126:	89ab      	ldrh	r3, [r5, #12]
 800c128:	059a      	lsls	r2, r3, #22
 800c12a:	d402      	bmi.n	800c132 <_vfiprintf_r+0x2a>
 800c12c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c12e:	f7fd fda6 	bl	8009c7e <__retarget_lock_acquire_recursive>
 800c132:	89ab      	ldrh	r3, [r5, #12]
 800c134:	071b      	lsls	r3, r3, #28
 800c136:	d501      	bpl.n	800c13c <_vfiprintf_r+0x34>
 800c138:	692b      	ldr	r3, [r5, #16]
 800c13a:	b99b      	cbnz	r3, 800c164 <_vfiprintf_r+0x5c>
 800c13c:	4629      	mov	r1, r5
 800c13e:	4630      	mov	r0, r6
 800c140:	f000 f938 	bl	800c3b4 <__swsetup_r>
 800c144:	b170      	cbz	r0, 800c164 <_vfiprintf_r+0x5c>
 800c146:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c148:	07dc      	lsls	r4, r3, #31
 800c14a:	d504      	bpl.n	800c156 <_vfiprintf_r+0x4e>
 800c14c:	f04f 30ff 	mov.w	r0, #4294967295
 800c150:	b01d      	add	sp, #116	@ 0x74
 800c152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c156:	89ab      	ldrh	r3, [r5, #12]
 800c158:	0598      	lsls	r0, r3, #22
 800c15a:	d4f7      	bmi.n	800c14c <_vfiprintf_r+0x44>
 800c15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c15e:	f7fd fd8f 	bl	8009c80 <__retarget_lock_release_recursive>
 800c162:	e7f3      	b.n	800c14c <_vfiprintf_r+0x44>
 800c164:	2300      	movs	r3, #0
 800c166:	9309      	str	r3, [sp, #36]	@ 0x24
 800c168:	2320      	movs	r3, #32
 800c16a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c16e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c172:	2330      	movs	r3, #48	@ 0x30
 800c174:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c324 <_vfiprintf_r+0x21c>
 800c178:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c17c:	f04f 0901 	mov.w	r9, #1
 800c180:	4623      	mov	r3, r4
 800c182:	469a      	mov	sl, r3
 800c184:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c188:	b10a      	cbz	r2, 800c18e <_vfiprintf_r+0x86>
 800c18a:	2a25      	cmp	r2, #37	@ 0x25
 800c18c:	d1f9      	bne.n	800c182 <_vfiprintf_r+0x7a>
 800c18e:	ebba 0b04 	subs.w	fp, sl, r4
 800c192:	d00b      	beq.n	800c1ac <_vfiprintf_r+0xa4>
 800c194:	465b      	mov	r3, fp
 800c196:	4622      	mov	r2, r4
 800c198:	4629      	mov	r1, r5
 800c19a:	4630      	mov	r0, r6
 800c19c:	f7ff ffa2 	bl	800c0e4 <__sfputs_r>
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	f000 80a7 	beq.w	800c2f4 <_vfiprintf_r+0x1ec>
 800c1a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1a8:	445a      	add	r2, fp
 800c1aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f000 809f 	beq.w	800c2f4 <_vfiprintf_r+0x1ec>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1c0:	f10a 0a01 	add.w	sl, sl, #1
 800c1c4:	9304      	str	r3, [sp, #16]
 800c1c6:	9307      	str	r3, [sp, #28]
 800c1c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1ce:	4654      	mov	r4, sl
 800c1d0:	2205      	movs	r2, #5
 800c1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1d6:	4853      	ldr	r0, [pc, #332]	@ (800c324 <_vfiprintf_r+0x21c>)
 800c1d8:	f7f4 f80a 	bl	80001f0 <memchr>
 800c1dc:	9a04      	ldr	r2, [sp, #16]
 800c1de:	b9d8      	cbnz	r0, 800c218 <_vfiprintf_r+0x110>
 800c1e0:	06d1      	lsls	r1, r2, #27
 800c1e2:	bf44      	itt	mi
 800c1e4:	2320      	movmi	r3, #32
 800c1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1ea:	0713      	lsls	r3, r2, #28
 800c1ec:	bf44      	itt	mi
 800c1ee:	232b      	movmi	r3, #43	@ 0x2b
 800c1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c1f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1fa:	d015      	beq.n	800c228 <_vfiprintf_r+0x120>
 800c1fc:	9a07      	ldr	r2, [sp, #28]
 800c1fe:	4654      	mov	r4, sl
 800c200:	2000      	movs	r0, #0
 800c202:	f04f 0c0a 	mov.w	ip, #10
 800c206:	4621      	mov	r1, r4
 800c208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c20c:	3b30      	subs	r3, #48	@ 0x30
 800c20e:	2b09      	cmp	r3, #9
 800c210:	d94b      	bls.n	800c2aa <_vfiprintf_r+0x1a2>
 800c212:	b1b0      	cbz	r0, 800c242 <_vfiprintf_r+0x13a>
 800c214:	9207      	str	r2, [sp, #28]
 800c216:	e014      	b.n	800c242 <_vfiprintf_r+0x13a>
 800c218:	eba0 0308 	sub.w	r3, r0, r8
 800c21c:	fa09 f303 	lsl.w	r3, r9, r3
 800c220:	4313      	orrs	r3, r2
 800c222:	9304      	str	r3, [sp, #16]
 800c224:	46a2      	mov	sl, r4
 800c226:	e7d2      	b.n	800c1ce <_vfiprintf_r+0xc6>
 800c228:	9b03      	ldr	r3, [sp, #12]
 800c22a:	1d19      	adds	r1, r3, #4
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	9103      	str	r1, [sp, #12]
 800c230:	2b00      	cmp	r3, #0
 800c232:	bfbb      	ittet	lt
 800c234:	425b      	neglt	r3, r3
 800c236:	f042 0202 	orrlt.w	r2, r2, #2
 800c23a:	9307      	strge	r3, [sp, #28]
 800c23c:	9307      	strlt	r3, [sp, #28]
 800c23e:	bfb8      	it	lt
 800c240:	9204      	strlt	r2, [sp, #16]
 800c242:	7823      	ldrb	r3, [r4, #0]
 800c244:	2b2e      	cmp	r3, #46	@ 0x2e
 800c246:	d10a      	bne.n	800c25e <_vfiprintf_r+0x156>
 800c248:	7863      	ldrb	r3, [r4, #1]
 800c24a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c24c:	d132      	bne.n	800c2b4 <_vfiprintf_r+0x1ac>
 800c24e:	9b03      	ldr	r3, [sp, #12]
 800c250:	1d1a      	adds	r2, r3, #4
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	9203      	str	r2, [sp, #12]
 800c256:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c25a:	3402      	adds	r4, #2
 800c25c:	9305      	str	r3, [sp, #20]
 800c25e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c334 <_vfiprintf_r+0x22c>
 800c262:	7821      	ldrb	r1, [r4, #0]
 800c264:	2203      	movs	r2, #3
 800c266:	4650      	mov	r0, sl
 800c268:	f7f3 ffc2 	bl	80001f0 <memchr>
 800c26c:	b138      	cbz	r0, 800c27e <_vfiprintf_r+0x176>
 800c26e:	9b04      	ldr	r3, [sp, #16]
 800c270:	eba0 000a 	sub.w	r0, r0, sl
 800c274:	2240      	movs	r2, #64	@ 0x40
 800c276:	4082      	lsls	r2, r0
 800c278:	4313      	orrs	r3, r2
 800c27a:	3401      	adds	r4, #1
 800c27c:	9304      	str	r3, [sp, #16]
 800c27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c282:	4829      	ldr	r0, [pc, #164]	@ (800c328 <_vfiprintf_r+0x220>)
 800c284:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c288:	2206      	movs	r2, #6
 800c28a:	f7f3 ffb1 	bl	80001f0 <memchr>
 800c28e:	2800      	cmp	r0, #0
 800c290:	d03f      	beq.n	800c312 <_vfiprintf_r+0x20a>
 800c292:	4b26      	ldr	r3, [pc, #152]	@ (800c32c <_vfiprintf_r+0x224>)
 800c294:	bb1b      	cbnz	r3, 800c2de <_vfiprintf_r+0x1d6>
 800c296:	9b03      	ldr	r3, [sp, #12]
 800c298:	3307      	adds	r3, #7
 800c29a:	f023 0307 	bic.w	r3, r3, #7
 800c29e:	3308      	adds	r3, #8
 800c2a0:	9303      	str	r3, [sp, #12]
 800c2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2a4:	443b      	add	r3, r7
 800c2a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2a8:	e76a      	b.n	800c180 <_vfiprintf_r+0x78>
 800c2aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ae:	460c      	mov	r4, r1
 800c2b0:	2001      	movs	r0, #1
 800c2b2:	e7a8      	b.n	800c206 <_vfiprintf_r+0xfe>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	3401      	adds	r4, #1
 800c2b8:	9305      	str	r3, [sp, #20]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	f04f 0c0a 	mov.w	ip, #10
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2c6:	3a30      	subs	r2, #48	@ 0x30
 800c2c8:	2a09      	cmp	r2, #9
 800c2ca:	d903      	bls.n	800c2d4 <_vfiprintf_r+0x1cc>
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d0c6      	beq.n	800c25e <_vfiprintf_r+0x156>
 800c2d0:	9105      	str	r1, [sp, #20]
 800c2d2:	e7c4      	b.n	800c25e <_vfiprintf_r+0x156>
 800c2d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2d8:	4604      	mov	r4, r0
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e7f0      	b.n	800c2c0 <_vfiprintf_r+0x1b8>
 800c2de:	ab03      	add	r3, sp, #12
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	462a      	mov	r2, r5
 800c2e4:	4b12      	ldr	r3, [pc, #72]	@ (800c330 <_vfiprintf_r+0x228>)
 800c2e6:	a904      	add	r1, sp, #16
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	f7fc fea1 	bl	8009030 <_printf_float>
 800c2ee:	4607      	mov	r7, r0
 800c2f0:	1c78      	adds	r0, r7, #1
 800c2f2:	d1d6      	bne.n	800c2a2 <_vfiprintf_r+0x19a>
 800c2f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2f6:	07d9      	lsls	r1, r3, #31
 800c2f8:	d405      	bmi.n	800c306 <_vfiprintf_r+0x1fe>
 800c2fa:	89ab      	ldrh	r3, [r5, #12]
 800c2fc:	059a      	lsls	r2, r3, #22
 800c2fe:	d402      	bmi.n	800c306 <_vfiprintf_r+0x1fe>
 800c300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c302:	f7fd fcbd 	bl	8009c80 <__retarget_lock_release_recursive>
 800c306:	89ab      	ldrh	r3, [r5, #12]
 800c308:	065b      	lsls	r3, r3, #25
 800c30a:	f53f af1f 	bmi.w	800c14c <_vfiprintf_r+0x44>
 800c30e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c310:	e71e      	b.n	800c150 <_vfiprintf_r+0x48>
 800c312:	ab03      	add	r3, sp, #12
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	462a      	mov	r2, r5
 800c318:	4b05      	ldr	r3, [pc, #20]	@ (800c330 <_vfiprintf_r+0x228>)
 800c31a:	a904      	add	r1, sp, #16
 800c31c:	4630      	mov	r0, r6
 800c31e:	f7fd f91f 	bl	8009560 <_printf_i>
 800c322:	e7e4      	b.n	800c2ee <_vfiprintf_r+0x1e6>
 800c324:	0800d536 	.word	0x0800d536
 800c328:	0800d540 	.word	0x0800d540
 800c32c:	08009031 	.word	0x08009031
 800c330:	0800c0e5 	.word	0x0800c0e5
 800c334:	0800d53c 	.word	0x0800d53c

0800c338 <__swbuf_r>:
 800c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33a:	460e      	mov	r6, r1
 800c33c:	4614      	mov	r4, r2
 800c33e:	4605      	mov	r5, r0
 800c340:	b118      	cbz	r0, 800c34a <__swbuf_r+0x12>
 800c342:	6a03      	ldr	r3, [r0, #32]
 800c344:	b90b      	cbnz	r3, 800c34a <__swbuf_r+0x12>
 800c346:	f7fd fab5 	bl	80098b4 <__sinit>
 800c34a:	69a3      	ldr	r3, [r4, #24]
 800c34c:	60a3      	str	r3, [r4, #8]
 800c34e:	89a3      	ldrh	r3, [r4, #12]
 800c350:	071a      	lsls	r2, r3, #28
 800c352:	d501      	bpl.n	800c358 <__swbuf_r+0x20>
 800c354:	6923      	ldr	r3, [r4, #16]
 800c356:	b943      	cbnz	r3, 800c36a <__swbuf_r+0x32>
 800c358:	4621      	mov	r1, r4
 800c35a:	4628      	mov	r0, r5
 800c35c:	f000 f82a 	bl	800c3b4 <__swsetup_r>
 800c360:	b118      	cbz	r0, 800c36a <__swbuf_r+0x32>
 800c362:	f04f 37ff 	mov.w	r7, #4294967295
 800c366:	4638      	mov	r0, r7
 800c368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	6922      	ldr	r2, [r4, #16]
 800c36e:	1a98      	subs	r0, r3, r2
 800c370:	6963      	ldr	r3, [r4, #20]
 800c372:	b2f6      	uxtb	r6, r6
 800c374:	4283      	cmp	r3, r0
 800c376:	4637      	mov	r7, r6
 800c378:	dc05      	bgt.n	800c386 <__swbuf_r+0x4e>
 800c37a:	4621      	mov	r1, r4
 800c37c:	4628      	mov	r0, r5
 800c37e:	f7ff fded 	bl	800bf5c <_fflush_r>
 800c382:	2800      	cmp	r0, #0
 800c384:	d1ed      	bne.n	800c362 <__swbuf_r+0x2a>
 800c386:	68a3      	ldr	r3, [r4, #8]
 800c388:	3b01      	subs	r3, #1
 800c38a:	60a3      	str	r3, [r4, #8]
 800c38c:	6823      	ldr	r3, [r4, #0]
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	6022      	str	r2, [r4, #0]
 800c392:	701e      	strb	r6, [r3, #0]
 800c394:	6962      	ldr	r2, [r4, #20]
 800c396:	1c43      	adds	r3, r0, #1
 800c398:	429a      	cmp	r2, r3
 800c39a:	d004      	beq.n	800c3a6 <__swbuf_r+0x6e>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	07db      	lsls	r3, r3, #31
 800c3a0:	d5e1      	bpl.n	800c366 <__swbuf_r+0x2e>
 800c3a2:	2e0a      	cmp	r6, #10
 800c3a4:	d1df      	bne.n	800c366 <__swbuf_r+0x2e>
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	f7ff fdd7 	bl	800bf5c <_fflush_r>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d0d9      	beq.n	800c366 <__swbuf_r+0x2e>
 800c3b2:	e7d6      	b.n	800c362 <__swbuf_r+0x2a>

0800c3b4 <__swsetup_r>:
 800c3b4:	b538      	push	{r3, r4, r5, lr}
 800c3b6:	4b29      	ldr	r3, [pc, #164]	@ (800c45c <__swsetup_r+0xa8>)
 800c3b8:	4605      	mov	r5, r0
 800c3ba:	6818      	ldr	r0, [r3, #0]
 800c3bc:	460c      	mov	r4, r1
 800c3be:	b118      	cbz	r0, 800c3c8 <__swsetup_r+0x14>
 800c3c0:	6a03      	ldr	r3, [r0, #32]
 800c3c2:	b90b      	cbnz	r3, 800c3c8 <__swsetup_r+0x14>
 800c3c4:	f7fd fa76 	bl	80098b4 <__sinit>
 800c3c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3cc:	0719      	lsls	r1, r3, #28
 800c3ce:	d422      	bmi.n	800c416 <__swsetup_r+0x62>
 800c3d0:	06da      	lsls	r2, r3, #27
 800c3d2:	d407      	bmi.n	800c3e4 <__swsetup_r+0x30>
 800c3d4:	2209      	movs	r2, #9
 800c3d6:	602a      	str	r2, [r5, #0]
 800c3d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3dc:	81a3      	strh	r3, [r4, #12]
 800c3de:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e2:	e033      	b.n	800c44c <__swsetup_r+0x98>
 800c3e4:	0758      	lsls	r0, r3, #29
 800c3e6:	d512      	bpl.n	800c40e <__swsetup_r+0x5a>
 800c3e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3ea:	b141      	cbz	r1, 800c3fe <__swsetup_r+0x4a>
 800c3ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3f0:	4299      	cmp	r1, r3
 800c3f2:	d002      	beq.n	800c3fa <__swsetup_r+0x46>
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	f7fe fad3 	bl	800a9a0 <_free_r>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3fe:	89a3      	ldrh	r3, [r4, #12]
 800c400:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c404:	81a3      	strh	r3, [r4, #12]
 800c406:	2300      	movs	r3, #0
 800c408:	6063      	str	r3, [r4, #4]
 800c40a:	6923      	ldr	r3, [r4, #16]
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	f043 0308 	orr.w	r3, r3, #8
 800c414:	81a3      	strh	r3, [r4, #12]
 800c416:	6923      	ldr	r3, [r4, #16]
 800c418:	b94b      	cbnz	r3, 800c42e <__swsetup_r+0x7a>
 800c41a:	89a3      	ldrh	r3, [r4, #12]
 800c41c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c424:	d003      	beq.n	800c42e <__swsetup_r+0x7a>
 800c426:	4621      	mov	r1, r4
 800c428:	4628      	mov	r0, r5
 800c42a:	f000 f88b 	bl	800c544 <__smakebuf_r>
 800c42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c432:	f013 0201 	ands.w	r2, r3, #1
 800c436:	d00a      	beq.n	800c44e <__swsetup_r+0x9a>
 800c438:	2200      	movs	r2, #0
 800c43a:	60a2      	str	r2, [r4, #8]
 800c43c:	6962      	ldr	r2, [r4, #20]
 800c43e:	4252      	negs	r2, r2
 800c440:	61a2      	str	r2, [r4, #24]
 800c442:	6922      	ldr	r2, [r4, #16]
 800c444:	b942      	cbnz	r2, 800c458 <__swsetup_r+0xa4>
 800c446:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c44a:	d1c5      	bne.n	800c3d8 <__swsetup_r+0x24>
 800c44c:	bd38      	pop	{r3, r4, r5, pc}
 800c44e:	0799      	lsls	r1, r3, #30
 800c450:	bf58      	it	pl
 800c452:	6962      	ldrpl	r2, [r4, #20]
 800c454:	60a2      	str	r2, [r4, #8]
 800c456:	e7f4      	b.n	800c442 <__swsetup_r+0x8e>
 800c458:	2000      	movs	r0, #0
 800c45a:	e7f7      	b.n	800c44c <__swsetup_r+0x98>
 800c45c:	200003f4 	.word	0x200003f4

0800c460 <_raise_r>:
 800c460:	291f      	cmp	r1, #31
 800c462:	b538      	push	{r3, r4, r5, lr}
 800c464:	4605      	mov	r5, r0
 800c466:	460c      	mov	r4, r1
 800c468:	d904      	bls.n	800c474 <_raise_r+0x14>
 800c46a:	2316      	movs	r3, #22
 800c46c:	6003      	str	r3, [r0, #0]
 800c46e:	f04f 30ff 	mov.w	r0, #4294967295
 800c472:	bd38      	pop	{r3, r4, r5, pc}
 800c474:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c476:	b112      	cbz	r2, 800c47e <_raise_r+0x1e>
 800c478:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c47c:	b94b      	cbnz	r3, 800c492 <_raise_r+0x32>
 800c47e:	4628      	mov	r0, r5
 800c480:	f000 f830 	bl	800c4e4 <_getpid_r>
 800c484:	4622      	mov	r2, r4
 800c486:	4601      	mov	r1, r0
 800c488:	4628      	mov	r0, r5
 800c48a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c48e:	f000 b817 	b.w	800c4c0 <_kill_r>
 800c492:	2b01      	cmp	r3, #1
 800c494:	d00a      	beq.n	800c4ac <_raise_r+0x4c>
 800c496:	1c59      	adds	r1, r3, #1
 800c498:	d103      	bne.n	800c4a2 <_raise_r+0x42>
 800c49a:	2316      	movs	r3, #22
 800c49c:	6003      	str	r3, [r0, #0]
 800c49e:	2001      	movs	r0, #1
 800c4a0:	e7e7      	b.n	800c472 <_raise_r+0x12>
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	4798      	blx	r3
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	e7e0      	b.n	800c472 <_raise_r+0x12>

0800c4b0 <raise>:
 800c4b0:	4b02      	ldr	r3, [pc, #8]	@ (800c4bc <raise+0xc>)
 800c4b2:	4601      	mov	r1, r0
 800c4b4:	6818      	ldr	r0, [r3, #0]
 800c4b6:	f7ff bfd3 	b.w	800c460 <_raise_r>
 800c4ba:	bf00      	nop
 800c4bc:	200003f4 	.word	0x200003f4

0800c4c0 <_kill_r>:
 800c4c0:	b538      	push	{r3, r4, r5, lr}
 800c4c2:	4d07      	ldr	r5, [pc, #28]	@ (800c4e0 <_kill_r+0x20>)
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	4608      	mov	r0, r1
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	602b      	str	r3, [r5, #0]
 800c4ce:	f7f5 ff23 	bl	8002318 <_kill>
 800c4d2:	1c43      	adds	r3, r0, #1
 800c4d4:	d102      	bne.n	800c4dc <_kill_r+0x1c>
 800c4d6:	682b      	ldr	r3, [r5, #0]
 800c4d8:	b103      	cbz	r3, 800c4dc <_kill_r+0x1c>
 800c4da:	6023      	str	r3, [r4, #0]
 800c4dc:	bd38      	pop	{r3, r4, r5, pc}
 800c4de:	bf00      	nop
 800c4e0:	20005a88 	.word	0x20005a88

0800c4e4 <_getpid_r>:
 800c4e4:	f7f5 bf10 	b.w	8002308 <_getpid>

0800c4e8 <_malloc_usable_size_r>:
 800c4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ec:	1f18      	subs	r0, r3, #4
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	bfbc      	itt	lt
 800c4f2:	580b      	ldrlt	r3, [r1, r0]
 800c4f4:	18c0      	addlt	r0, r0, r3
 800c4f6:	4770      	bx	lr

0800c4f8 <__swhatbuf_r>:
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c500:	2900      	cmp	r1, #0
 800c502:	b096      	sub	sp, #88	@ 0x58
 800c504:	4615      	mov	r5, r2
 800c506:	461e      	mov	r6, r3
 800c508:	da0d      	bge.n	800c526 <__swhatbuf_r+0x2e>
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c510:	f04f 0100 	mov.w	r1, #0
 800c514:	bf14      	ite	ne
 800c516:	2340      	movne	r3, #64	@ 0x40
 800c518:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c51c:	2000      	movs	r0, #0
 800c51e:	6031      	str	r1, [r6, #0]
 800c520:	602b      	str	r3, [r5, #0]
 800c522:	b016      	add	sp, #88	@ 0x58
 800c524:	bd70      	pop	{r4, r5, r6, pc}
 800c526:	466a      	mov	r2, sp
 800c528:	f000 f848 	bl	800c5bc <_fstat_r>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	dbec      	blt.n	800c50a <__swhatbuf_r+0x12>
 800c530:	9901      	ldr	r1, [sp, #4]
 800c532:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c536:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c53a:	4259      	negs	r1, r3
 800c53c:	4159      	adcs	r1, r3
 800c53e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c542:	e7eb      	b.n	800c51c <__swhatbuf_r+0x24>

0800c544 <__smakebuf_r>:
 800c544:	898b      	ldrh	r3, [r1, #12]
 800c546:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c548:	079d      	lsls	r5, r3, #30
 800c54a:	4606      	mov	r6, r0
 800c54c:	460c      	mov	r4, r1
 800c54e:	d507      	bpl.n	800c560 <__smakebuf_r+0x1c>
 800c550:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	6123      	str	r3, [r4, #16]
 800c558:	2301      	movs	r3, #1
 800c55a:	6163      	str	r3, [r4, #20]
 800c55c:	b003      	add	sp, #12
 800c55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c560:	ab01      	add	r3, sp, #4
 800c562:	466a      	mov	r2, sp
 800c564:	f7ff ffc8 	bl	800c4f8 <__swhatbuf_r>
 800c568:	9f00      	ldr	r7, [sp, #0]
 800c56a:	4605      	mov	r5, r0
 800c56c:	4639      	mov	r1, r7
 800c56e:	4630      	mov	r0, r6
 800c570:	f7fe fdc4 	bl	800b0fc <_malloc_r>
 800c574:	b948      	cbnz	r0, 800c58a <__smakebuf_r+0x46>
 800c576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c57a:	059a      	lsls	r2, r3, #22
 800c57c:	d4ee      	bmi.n	800c55c <__smakebuf_r+0x18>
 800c57e:	f023 0303 	bic.w	r3, r3, #3
 800c582:	f043 0302 	orr.w	r3, r3, #2
 800c586:	81a3      	strh	r3, [r4, #12]
 800c588:	e7e2      	b.n	800c550 <__smakebuf_r+0xc>
 800c58a:	89a3      	ldrh	r3, [r4, #12]
 800c58c:	6020      	str	r0, [r4, #0]
 800c58e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c592:	81a3      	strh	r3, [r4, #12]
 800c594:	9b01      	ldr	r3, [sp, #4]
 800c596:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c59a:	b15b      	cbz	r3, 800c5b4 <__smakebuf_r+0x70>
 800c59c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f000 f81d 	bl	800c5e0 <_isatty_r>
 800c5a6:	b128      	cbz	r0, 800c5b4 <__smakebuf_r+0x70>
 800c5a8:	89a3      	ldrh	r3, [r4, #12]
 800c5aa:	f023 0303 	bic.w	r3, r3, #3
 800c5ae:	f043 0301 	orr.w	r3, r3, #1
 800c5b2:	81a3      	strh	r3, [r4, #12]
 800c5b4:	89a3      	ldrh	r3, [r4, #12]
 800c5b6:	431d      	orrs	r5, r3
 800c5b8:	81a5      	strh	r5, [r4, #12]
 800c5ba:	e7cf      	b.n	800c55c <__smakebuf_r+0x18>

0800c5bc <_fstat_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	4d07      	ldr	r5, [pc, #28]	@ (800c5dc <_fstat_r+0x20>)
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	4608      	mov	r0, r1
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	602b      	str	r3, [r5, #0]
 800c5ca:	f7f5 ff05 	bl	80023d8 <_fstat>
 800c5ce:	1c43      	adds	r3, r0, #1
 800c5d0:	d102      	bne.n	800c5d8 <_fstat_r+0x1c>
 800c5d2:	682b      	ldr	r3, [r5, #0]
 800c5d4:	b103      	cbz	r3, 800c5d8 <_fstat_r+0x1c>
 800c5d6:	6023      	str	r3, [r4, #0]
 800c5d8:	bd38      	pop	{r3, r4, r5, pc}
 800c5da:	bf00      	nop
 800c5dc:	20005a88 	.word	0x20005a88

0800c5e0 <_isatty_r>:
 800c5e0:	b538      	push	{r3, r4, r5, lr}
 800c5e2:	4d06      	ldr	r5, [pc, #24]	@ (800c5fc <_isatty_r+0x1c>)
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	4608      	mov	r0, r1
 800c5ea:	602b      	str	r3, [r5, #0]
 800c5ec:	f7f5 ff04 	bl	80023f8 <_isatty>
 800c5f0:	1c43      	adds	r3, r0, #1
 800c5f2:	d102      	bne.n	800c5fa <_isatty_r+0x1a>
 800c5f4:	682b      	ldr	r3, [r5, #0]
 800c5f6:	b103      	cbz	r3, 800c5fa <_isatty_r+0x1a>
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	bd38      	pop	{r3, r4, r5, pc}
 800c5fc:	20005a88 	.word	0x20005a88

0800c600 <_init>:
 800c600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c602:	bf00      	nop
 800c604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c606:	bc08      	pop	{r3}
 800c608:	469e      	mov	lr, r3
 800c60a:	4770      	bx	lr

0800c60c <_fini>:
 800c60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60e:	bf00      	nop
 800c610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c612:	bc08      	pop	{r3}
 800c614:	469e      	mov	lr, r3
 800c616:	4770      	bx	lr
