
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000728c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800741c  0800741c  0000841c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007634  08007634  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007634  08007634  00008634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800763c  0800763c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800763c  0800763c  0000863c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007640  08007640  00008640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007644  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055b0  20000060  080076a4  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005610  080076a4  00009610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001920a  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003baa  00000000  00000000  0002229a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00025e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108f  00000000  00000000  000273b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029901  00000000  00000000  0002843f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a219  00000000  00000000  00051d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcede  00000000  00000000  0006bf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168e37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d44  00000000  00000000  00168e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0016ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007404 	.word	0x08007404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007404 	.word	0x08007404

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4a07      	ldr	r2, [pc, #28]	@ (80005f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <vApplicationGetIdleTaskMemory+0x30>)
 80005e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000084 	.word	0x20000084
 80005fc:	20000124 	.word	0x20000124

08000600 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b08e      	sub	sp, #56	@ 0x38
 8000604:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <MX_FREERTOS_Init+0x58>)
 8000608:	f107 041c 	add.w	r4, r7, #28
 800060c:	461d      	mov	r5, r3
 800060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 f9b2 	bl	800498a <osThreadCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0c      	ldr	r2, [pc, #48]	@ (800065c <MX_FREERTOS_Init+0x5c>)
 800062a:	6013      	str	r3, [r2, #0]

  /* definition and creation of IHM_Task */
  osThreadDef(IHM_Task, Start_IHM_Task, osPriorityIdle, 0, 1024);
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_FREERTOS_Init+0x60>)
 800062e:	463c      	mov	r4, r7
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IHM_TaskHandle = osThreadCreate(osThread(IHM_Task), NULL);
 800063e:	463b      	mov	r3, r7
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 f9a1 	bl	800498a <osThreadCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a06      	ldr	r2, [pc, #24]	@ (8000664 <MX_FREERTOS_Init+0x64>)
 800064c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800064e:	bf00      	nop
 8000650:	3738      	adds	r7, #56	@ 0x38
 8000652:	46bd      	mov	sp, r7
 8000654:	bdb0      	pop	{r4, r5, r7, pc}
 8000656:	bf00      	nop
 8000658:	08007428 	.word	0x08007428
 800065c:	2000007c 	.word	0x2000007c
 8000660:	08007450 	.word	0x08007450
 8000664:	20000080 	.word	0x20000080

08000668 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f004 f9d6 	bl	8004a22 <osDelay>
 8000676:	e7fb      	b.n	8000670 <StartDefaultTask+0x8>

08000678 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b2b      	ldr	r3, [pc, #172]	@ (800073c <MX_GPIO_Init+0xc4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a2a      	ldr	r2, [pc, #168]	@ (800073c <MX_GPIO_Init+0xc4>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b28      	ldr	r3, [pc, #160]	@ (800073c <MX_GPIO_Init+0xc4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	4b25      	ldr	r3, [pc, #148]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a24      	ldr	r2, [pc, #144]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b22      	ldr	r3, [pc, #136]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a1e      	ldr	r2, [pc, #120]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	4a18      	ldr	r2, [pc, #96]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_GPIO_Init+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2120      	movs	r1, #32
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f6:	f000 ff0f 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000700:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	480b      	ldr	r0, [pc, #44]	@ (8000740 <MX_GPIO_Init+0xc8>)
 8000712:	f000 fd57 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000716:	2320      	movs	r3, #32
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000730:	f000 fd48 	bl	80011c4 <HAL_GPIO_Init>

}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	@ 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	48000800 	.word	0x48000800

08000744 <Start_IHM_Task>:
const size_t xMessageBufferSizeBytes = 100;
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
uint8_t processing =0;

void Start_IHM_Task(void const * argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_IHM_Task */
	char *msg = "IHM Task Running\r\n";
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <Start_IHM_Task+0x6c>)
 800074e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f7ff fd47 	bl	80001e4 <strlen>
 8000756:	4603      	mov	r3, r0
 8000758:	b29a      	uxth	r2, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	68f9      	ldr	r1, [r7, #12]
 8000760:	4814      	ldr	r0, [pc, #80]	@ (80007b4 <Start_IHM_Task+0x70>)
 8000762:	f002 fd57 	bl	8003214 <HAL_UART_Transmit>
	AfficherMenuPrincipal();
 8000766:	f000 f82d 	bl	80007c4 <AfficherMenuPrincipal>
	MessageBufferHandle = xMessageBufferCreate(xMessageBufferSizeBytes);
 800076a:	2364      	movs	r3, #100	@ 0x64
 800076c:	2201      	movs	r2, #1
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f004 fa1e 	bl	8004bb2 <xStreamBufferGenericCreate>
 8000776:	4603      	mov	r3, r0
 8000778:	4a0f      	ldr	r2, [pc, #60]	@ (80007b8 <Start_IHM_Task+0x74>)
 800077a:	6013      	str	r3, [r2, #0]
	if( MessageBufferHandle != NULL )
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <Start_IHM_Task+0x74>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d105      	bne.n	8000790 <Start_IHM_Task+0x4c>
	{
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 8000784:	2364      	movs	r3, #100	@ 0x64
 8000786:	2222      	movs	r2, #34	@ 0x22
 8000788:	490c      	ldr	r1, [pc, #48]	@ (80007bc <Start_IHM_Task+0x78>)
 800078a:	480a      	ldr	r0, [pc, #40]	@ (80007b4 <Start_IHM_Task+0x70>)
 800078c:	f002 fd42 	bl	8003214 <HAL_UART_Transmit>
	}

	/* Infinite loop */
	for(;;)
	{
		xMessageBufferReceive( MessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <Start_IHM_Task+0x74>)
 8000792:	6818      	ldr	r0, [r3, #0]
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	2240      	movs	r2, #64	@ 0x40
 800079a:	4909      	ldr	r1, [pc, #36]	@ (80007c0 <Start_IHM_Task+0x7c>)
 800079c:	f004 fb4b 	bl	8004e36 <xStreamBufferReceive>
		processMessage(received_data);
 80007a0:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <Start_IHM_Task+0x7c>)
 80007a2:	f000 f8df 	bl	8000964 <processMessage>
		osDelay(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f004 f93b 	bl	8004a22 <osDelay>
		xMessageBufferReceive( MessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 80007ac:	bf00      	nop
 80007ae:	e7ef      	b.n	8000790 <Start_IHM_Task+0x4c>
 80007b0:	0800746c 	.word	0x0800746c
 80007b4:	200004c8 	.word	0x200004c8
 80007b8:	2000046c 	.word	0x2000046c
 80007bc:	08007480 	.word	0x08007480
 80007c0:	2000042c 	.word	0x2000042c

080007c4 <AfficherMenuPrincipal>:
	}
	/* USER CODE END Start_IHM_Task */
}
// Fonction pour afficher le menu principal complet
void AfficherMenuPrincipal(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	// Afficher tout le menu une seule fois
	sprintf((char*)txBuffer,"*************** Menu Principal ***************\r\n");
 80007c8:	491f      	ldr	r1, [pc, #124]	@ (8000848 <AfficherMenuPrincipal+0x84>)
 80007ca:	4820      	ldr	r0, [pc, #128]	@ (800084c <AfficherMenuPrincipal+0x88>)
 80007cc:	f006 f91c 	bl	8006a08 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80007d0:	481e      	ldr	r0, [pc, #120]	@ (800084c <AfficherMenuPrincipal+0x88>)
 80007d2:	f7ff fd07 	bl	80001e4 <strlen>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b29a      	uxth	r2, r3
 80007da:	2364      	movs	r3, #100	@ 0x64
 80007dc:	491b      	ldr	r1, [pc, #108]	@ (800084c <AfficherMenuPrincipal+0x88>)
 80007de:	481c      	ldr	r0, [pc, #112]	@ (8000850 <AfficherMenuPrincipal+0x8c>)
 80007e0:	f002 fd18 	bl	8003214 <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "Pour modifier LORA, écrire : lora\r\n");
 80007e4:	491b      	ldr	r1, [pc, #108]	@ (8000854 <AfficherMenuPrincipal+0x90>)
 80007e6:	4819      	ldr	r0, [pc, #100]	@ (800084c <AfficherMenuPrincipal+0x88>)
 80007e8:	f006 f90e 	bl	8006a08 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80007ec:	4817      	ldr	r0, [pc, #92]	@ (800084c <AfficherMenuPrincipal+0x88>)
 80007ee:	f7ff fcf9 	bl	80001e4 <strlen>
 80007f2:	4603      	mov	r3, r0
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	2364      	movs	r3, #100	@ 0x64
 80007f8:	4914      	ldr	r1, [pc, #80]	@ (800084c <AfficherMenuPrincipal+0x88>)
 80007fa:	4815      	ldr	r0, [pc, #84]	@ (8000850 <AfficherMenuPrincipal+0x8c>)
 80007fc:	f002 fd0a 	bl	8003214 <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "Pour modifier GPS, écrire : GPS\r\n");
 8000800:	4915      	ldr	r1, [pc, #84]	@ (8000858 <AfficherMenuPrincipal+0x94>)
 8000802:	4812      	ldr	r0, [pc, #72]	@ (800084c <AfficherMenuPrincipal+0x88>)
 8000804:	f006 f900 	bl	8006a08 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8000808:	4810      	ldr	r0, [pc, #64]	@ (800084c <AfficherMenuPrincipal+0x88>)
 800080a:	f7ff fceb 	bl	80001e4 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	b29a      	uxth	r2, r3
 8000812:	2364      	movs	r3, #100	@ 0x64
 8000814:	490d      	ldr	r1, [pc, #52]	@ (800084c <AfficherMenuPrincipal+0x88>)
 8000816:	480e      	ldr	r0, [pc, #56]	@ (8000850 <AfficherMenuPrincipal+0x8c>)
 8000818:	f002 fcfc 	bl	8003214 <HAL_UART_Transmit>

	sprintf((char*)txBuffer, "Pour quitter, écrire : exit\r\n");
 800081c:	490f      	ldr	r1, [pc, #60]	@ (800085c <AfficherMenuPrincipal+0x98>)
 800081e:	480b      	ldr	r0, [pc, #44]	@ (800084c <AfficherMenuPrincipal+0x88>)
 8000820:	f006 f8f2 	bl	8006a08 <siprintf>
	HAL_UART_Transmit(&huart2,txBuffer, strlen((char*)txBuffer), 100);
 8000824:	4809      	ldr	r0, [pc, #36]	@ (800084c <AfficherMenuPrincipal+0x88>)
 8000826:	f7ff fcdd 	bl	80001e4 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29a      	uxth	r2, r3
 800082e:	2364      	movs	r3, #100	@ 0x64
 8000830:	4906      	ldr	r1, [pc, #24]	@ (800084c <AfficherMenuPrincipal+0x88>)
 8000832:	4807      	ldr	r0, [pc, #28]	@ (8000850 <AfficherMenuPrincipal+0x8c>)
 8000834:	f002 fcee 	bl	8003214 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	4909      	ldr	r1, [pc, #36]	@ (8000860 <AfficherMenuPrincipal+0x9c>)
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <AfficherMenuPrincipal+0x8c>)
 800083e:	f002 fd73 	bl	8003328 <HAL_UART_Receive_IT>

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	080074a4 	.word	0x080074a4
 800084c:	200003a8 	.word	0x200003a8
 8000850:	200004c8 	.word	0x200004c8
 8000854:	080074d8 	.word	0x080074d8
 8000858:	08007500 	.word	0x08007500
 800085c:	08007524 	.word	0x08007524
 8000860:	200003a4 	.word	0x200003a4

08000864 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	if (!processing)
 800086c:	4b32      	ldr	r3, [pc, #200]	@ (8000938 <HAL_UART_RxCpltCallback+0xd4>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d157      	bne.n	8000924 <HAL_UART_RxCpltCallback+0xc0>
	{ if ((rxByte == '\r')||(rxByte=='\n'))
 8000874:	4b31      	ldr	r3, [pc, #196]	@ (800093c <HAL_UART_RxCpltCallback+0xd8>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b0d      	cmp	r3, #13
 800087a:	d003      	beq.n	8000884 <HAL_UART_RxCpltCallback+0x20>
 800087c:	4b2f      	ldr	r3, [pc, #188]	@ (800093c <HAL_UART_RxCpltCallback+0xd8>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b0a      	cmp	r3, #10
 8000882:	d13c      	bne.n	80008fe <HAL_UART_RxCpltCallback+0x9a>
	{   if (rxIndex!=0)
 8000884:	4b2e      	ldr	r3, [pc, #184]	@ (8000940 <HAL_UART_RxCpltCallback+0xdc>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d04b      	beq.n	8000924 <HAL_UART_RxCpltCallback+0xc0>
	{
		processing=1;
 800088c:	4b2a      	ldr	r3, [pc, #168]	@ (8000938 <HAL_UART_RxCpltCallback+0xd4>)
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]
		memcpy(new_buff,rxBuffer,rxIndex);
 8000892:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <HAL_UART_RxCpltCallback+0xdc>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	492a      	ldr	r1, [pc, #168]	@ (8000944 <HAL_UART_RxCpltCallback+0xe0>)
 800089a:	482b      	ldr	r0, [pc, #172]	@ (8000948 <HAL_UART_RxCpltCallback+0xe4>)
 800089c:	f006 f968 	bl	8006b70 <memcpy>
		rxBuffer[rxIndex] = '\0';
 80008a0:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <HAL_UART_RxCpltCallback+0xdc>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <HAL_UART_RxCpltCallback+0xe0>)
 80008a8:	2100      	movs	r1, #0
 80008aa:	5499      	strb	r1, [r3, r2]
		xBytesSent=xMessageBufferSendFromISR(MessageBufferHandle,new_buff,strlen((char*)new_buff),&xHigherPriorityTaskWoken);
 80008ac:	4b27      	ldr	r3, [pc, #156]	@ (800094c <HAL_UART_RxCpltCallback+0xe8>)
 80008ae:	681c      	ldr	r4, [r3, #0]
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <HAL_UART_RxCpltCallback+0xe4>)
 80008b2:	f7ff fc97 	bl	80001e4 <strlen>
 80008b6:	4602      	mov	r2, r0
 80008b8:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <HAL_UART_RxCpltCallback+0xec>)
 80008ba:	4923      	ldr	r1, [pc, #140]	@ (8000948 <HAL_UART_RxCpltCallback+0xe4>)
 80008bc:	4620      	mov	r0, r4
 80008be:	f004 fa0a 	bl	8004cd6 <xStreamBufferSendFromISR>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <HAL_UART_RxCpltCallback+0xf0>)
 80008c8:	701a      	strb	r2, [r3, #0]
		//The number of bytes actually written to the message buffer.  If the
		// * message buffer didn't have enough free space for the message to be stored
		// * then 0 is returned, otherwise xDataLengthBytes is returned.
		if( xBytesSent != strlen((char*)new_buff))
 80008ca:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <HAL_UART_RxCpltCallback+0xf0>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461c      	mov	r4, r3
 80008d0:	481d      	ldr	r0, [pc, #116]	@ (8000948 <HAL_UART_RxCpltCallback+0xe4>)
 80008d2:	f7ff fc87 	bl	80001e4 <strlen>
 80008d6:	4603      	mov	r3, r0
 80008d8:	429c      	cmp	r4, r3
 80008da:	d006      	beq.n	80008ea <HAL_UART_RxCpltCallback+0x86>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)"Error Length Message Buffer\r\n",29,100);
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	221d      	movs	r2, #29
 80008e0:	491d      	ldr	r1, [pc, #116]	@ (8000958 <HAL_UART_RxCpltCallback+0xf4>)
 80008e2:	481e      	ldr	r0, [pc, #120]	@ (800095c <HAL_UART_RxCpltCallback+0xf8>)
 80008e4:	f002 fc96 	bl	8003214 <HAL_UART_Transmit>
 80008e8:	e005      	b.n	80008f6 <HAL_UART_RxCpltCallback+0x92>
			// The string could not be added to the message buffer because there was
			// not enough free space in the buffer.
		}
		else {HAL_UART_Transmit(&huart2, (uint8_t *)"Message sent\r\n",14,100);}
 80008ea:	2364      	movs	r3, #100	@ 0x64
 80008ec:	220e      	movs	r2, #14
 80008ee:	491c      	ldr	r1, [pc, #112]	@ (8000960 <HAL_UART_RxCpltCallback+0xfc>)
 80008f0:	481a      	ldr	r0, [pc, #104]	@ (800095c <HAL_UART_RxCpltCallback+0xf8>)
 80008f2:	f002 fc8f 	bl	8003214 <HAL_UART_Transmit>
		//processing=1;
		rxIndex = 0;}
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <HAL_UART_RxCpltCallback+0xdc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
	{   if (rxIndex!=0)
 80008fc:	e012      	b.n	8000924 <HAL_UART_RxCpltCallback+0xc0>
	}


	else {
		if (rxIndex < RX_BUFFER_SIZE-1) {
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <HAL_UART_RxCpltCallback+0xdc>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b3e      	cmp	r3, #62	@ 0x3e
 8000904:	d80b      	bhi.n	800091e <HAL_UART_RxCpltCallback+0xba>
			rxBuffer[rxIndex++] = rxByte;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <HAL_UART_RxCpltCallback+0xdc>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	b2d1      	uxtb	r1, r2
 800090e:	4a0c      	ldr	r2, [pc, #48]	@ (8000940 <HAL_UART_RxCpltCallback+0xdc>)
 8000910:	7011      	strb	r1, [r2, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <HAL_UART_RxCpltCallback+0xd8>)
 8000916:	7819      	ldrb	r1, [r3, #0]
 8000918:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <HAL_UART_RxCpltCallback+0xe0>)
 800091a:	5499      	strb	r1, [r3, r2]
 800091c:	e002      	b.n	8000924 <HAL_UART_RxCpltCallback+0xc0>
		}

		else {
			rxIndex=0;
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <HAL_UART_RxCpltCallback+0xdc>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
		}
	}
	}
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8000924:	2201      	movs	r2, #1
 8000926:	4905      	ldr	r1, [pc, #20]	@ (800093c <HAL_UART_RxCpltCallback+0xd8>)
 8000928:	480c      	ldr	r0, [pc, #48]	@ (800095c <HAL_UART_RxCpltCallback+0xf8>)
 800092a:	f002 fcfd 	bl	8003328 <HAL_UART_Receive_IT>

}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bd90      	pop	{r4, r7, pc}
 8000936:	bf00      	nop
 8000938:	20000474 	.word	0x20000474
 800093c:	200003a4 	.word	0x200003a4
 8000940:	200003a5 	.word	0x200003a5
 8000944:	20000324 	.word	0x20000324
 8000948:	20000364 	.word	0x20000364
 800094c:	2000046c 	.word	0x2000046c
 8000950:	20000470 	.word	0x20000470
 8000954:	20000428 	.word	0x20000428
 8000958:	08007544 	.word	0x08007544
 800095c:	200004c8 	.word	0x200004c8
 8000960:	08007564 	.word	0x08007564

08000964 <processMessage>:
void processMessage(uint8_t *rxBuffer) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	if (strcmp((char*)rxBuffer, "SET") == 0) {
 800096c:	4914      	ldr	r1, [pc, #80]	@ (80009c0 <processMessage+0x5c>)
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fc2e 	bl	80001d0 <strcmp>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d106      	bne.n	8000988 <processMessage+0x24>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Success\r\n", 9, 100);
 800097a:	2364      	movs	r3, #100	@ 0x64
 800097c:	2209      	movs	r2, #9
 800097e:	4911      	ldr	r1, [pc, #68]	@ (80009c4 <processMessage+0x60>)
 8000980:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <processMessage+0x64>)
 8000982:	f002 fc47 	bl	8003214 <HAL_UART_Transmit>
 8000986:	e013      	b.n	80009b0 <processMessage+0x4c>

	} else if (strcmp((char*)rxBuffer, "exit") == 0) {
 8000988:	4910      	ldr	r1, [pc, #64]	@ (80009cc <processMessage+0x68>)
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fc20 	bl	80001d0 <strcmp>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d106      	bne.n	80009a4 <processMessage+0x40>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Exiting...\r\n", 13, 100);
 8000996:	2364      	movs	r3, #100	@ 0x64
 8000998:	220d      	movs	r2, #13
 800099a:	490d      	ldr	r1, [pc, #52]	@ (80009d0 <processMessage+0x6c>)
 800099c:	480a      	ldr	r0, [pc, #40]	@ (80009c8 <processMessage+0x64>)
 800099e:	f002 fc39 	bl	8003214 <HAL_UART_Transmit>
 80009a2:	e005      	b.n	80009b0 <processMessage+0x4c>

	} else {
		HAL_UART_Transmit(&huart2, (uint8_t*)"Unvalid command\r\n", 19, 100);
 80009a4:	2364      	movs	r3, #100	@ 0x64
 80009a6:	2213      	movs	r2, #19
 80009a8:	490a      	ldr	r1, [pc, #40]	@ (80009d4 <processMessage+0x70>)
 80009aa:	4807      	ldr	r0, [pc, #28]	@ (80009c8 <processMessage+0x64>)
 80009ac:	f002 fc32 	bl	8003214 <HAL_UART_Transmit>
	}
	processing=0;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <processMessage+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	08007574 	.word	0x08007574
 80009c4:	08007578 	.word	0x08007578
 80009c8:	200004c8 	.word	0x200004c8
 80009cc:	08007584 	.word	0x08007584
 80009d0:	0800758c 	.word	0x0800758c
 80009d4:	0800759c 	.word	0x0800759c
 80009d8:	20000474 	.word	0x20000474

080009dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e0:	f000 fa4e 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f80a 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f7ff fe46 	bl	8000678 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009ec:	f000 f98a 	bl	8000d04 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80009f0:	f7ff fe06 	bl	8000600 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009f4:	f003 ffc2 	bl	800497c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <main+0x1c>

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b096      	sub	sp, #88	@ 0x58
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2244      	movs	r2, #68	@ 0x44
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f006 f81e 	bl	8006a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	463b      	mov	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a1e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a22:	f000 fd9f 	bl	8001564 <HAL_PWREx_ControlVoltageScaling>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a2c:	f000 f84a 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a30:	2302      	movs	r3, #2
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a42:	2302      	movs	r3, #2
 8000a44:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a46:	2301      	movs	r3, #1
 8000a48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fdd6 	bl	8001610 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a6a:	f000 f82b 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	230f      	movs	r3, #15
 8000a70:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2303      	movs	r3, #3
 8000a74:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a82:	463b      	mov	r3, r7
 8000a84:	2104      	movs	r1, #4
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f99e 	bl	8001dc8 <HAL_RCC_ClockConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a92:	f000 f817 	bl	8000ac4 <Error_Handler>
  }
}
 8000a96:	bf00      	nop
 8000a98:	3758      	adds	r7, #88	@ 0x58
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d101      	bne.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ab2:	f000 fa05 	bl	8000ec0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40001000 	.word	0x40001000

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ada:	4a10      	ldr	r2, [pc, #64]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	210f      	movs	r1, #15
 8000b0a:	f06f 0001 	mvn.w	r0, #1
 8000b0e:	f000 faaf 	bl	8001070 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	@ 0x38
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b2e:	4b34      	ldr	r3, [pc, #208]	@ (8000c00 <HAL_InitTick+0xe0>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b32:	4a33      	ldr	r2, [pc, #204]	@ (8000c00 <HAL_InitTick+0xe0>)
 8000b34:	f043 0310 	orr.w	r3, r3, #16
 8000b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b3a:	4b31      	ldr	r3, [pc, #196]	@ (8000c00 <HAL_InitTick+0xe0>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b46:	f107 0210 	add.w	r2, r7, #16
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fafd 	bl	8002150 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d103      	bne.n	8000b68 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b60:	f001 faca 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8000b64:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b66:	e004      	b.n	8000b72 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b68:	f001 fac6 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b74:	4a23      	ldr	r2, [pc, #140]	@ (8000c04 <HAL_InitTick+0xe4>)
 8000b76:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7a:	0c9b      	lsrs	r3, r3, #18
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b80:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000b82:	4a22      	ldr	r2, [pc, #136]	@ (8000c0c <HAL_InitTick+0xec>)
 8000b84:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b86:	4b20      	ldr	r3, [pc, #128]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000b88:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b8c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b92:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ba6:	4818      	ldr	r0, [pc, #96]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000ba8:	f002 f820 	bl	8002bec <HAL_TIM_Base_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d11b      	bne.n	8000bf2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bba:	4813      	ldr	r0, [pc, #76]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000bbc:	f002 f878 	bl	8002cb0 <HAL_TIM_Base_Start_IT>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bc6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d111      	bne.n	8000bf2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bce:	2036      	movs	r0, #54	@ 0x36
 8000bd0:	f000 fa6a 	bl	80010a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d808      	bhi.n	8000bec <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	2036      	movs	r0, #54	@ 0x36
 8000be0:	f000 fa46 	bl	8001070 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <HAL_InitTick+0xf0>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e002      	b.n	8000bf2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bf2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3738      	adds	r7, #56	@ 0x38
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	431bde83 	.word	0x431bde83
 8000c08:	20000478 	.word	0x20000478
 8000c0c:	40001000 	.word	0x40001000
 8000c10:	20000004 	.word	0x20000004

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c50:	4802      	ldr	r0, [pc, #8]	@ (8000c5c <USART2_IRQHandler+0x10>)
 8000c52:	f002 fbb5 	bl	80033c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200004c8 	.word	0x200004c8

08000c60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <TIM6_DAC_IRQHandler+0x10>)
 8000c66:	f002 f893 	bl	8002d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000478 	.word	0x20000478

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	@ (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	@ (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f005 ff38 	bl	8006b18 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20018000 	.word	0x20018000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	200004c4 	.word	0x200004c4
 8000cdc:	20005610 	.word	0x20005610

08000ce0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d0a:	4a15      	ldr	r2, [pc, #84]	@ (8000d60 <MX_USART2_UART_Init+0x5c>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_USART2_UART_Init+0x58>)
 8000d48:	f002 fa16 	bl	8003178 <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d52:	f7ff feb7 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200004c8 	.word	0x200004c8
 8000d60:	40004400 	.word	0x40004400

08000d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0ac      	sub	sp, #176	@ 0xb0
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2288      	movs	r2, #136	@ 0x88
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f005 fe61 	bl	8006a4c <memset>
  if(uartHandle->Instance==USART2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a25      	ldr	r2, [pc, #148]	@ (8000e24 <HAL_UART_MspInit+0xc0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d143      	bne.n	8000e1c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fa67 	bl	8002274 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dac:	f7ff fe8a 	bl	8000ac4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <HAL_UART_MspInit+0xc4>)
 8000db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e28 <HAL_UART_MspInit+0xc4>)
 8000db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <HAL_UART_MspInit+0xc4>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <HAL_UART_MspInit+0xc4>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dcc:	4a16      	ldr	r2, [pc, #88]	@ (8000e28 <HAL_UART_MspInit+0xc4>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd4:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <HAL_UART_MspInit+0xc4>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000de0:	230c      	movs	r3, #12
 8000de2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e08:	f000 f9dc 	bl	80011c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2105      	movs	r1, #5
 8000e10:	2026      	movs	r0, #38	@ 0x26
 8000e12:	f000 f92d 	bl	8001070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e16:	2026      	movs	r0, #38	@ 0x26
 8000e18:	f000 f946 	bl	80010a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	37b0      	adds	r7, #176	@ 0xb0
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40004400 	.word	0x40004400
 8000e28:	40021000 	.word	0x40021000

08000e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e30:	f7ff ff56 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <LoopForever+0xe>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e78 <LoopForever+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f005 fe63 	bl	8006b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5e:	f7ff fdbd 	bl	80009dc <main>

08000e62 <LoopForever>:

LoopForever:
    b LoopForever
 8000e62:	e7fe      	b.n	8000e62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e70:	08007644 	.word	0x08007644
  ldr r2, =_sbss
 8000e74:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e78:	20005610 	.word	0x20005610

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <HAL_Init+0x3c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ebc <HAL_Init+0x3c>)
 8000e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 f8df 	bl	800105a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9c:	200f      	movs	r0, #15
 8000e9e:	f7ff fe3f 	bl	8000b20 <HAL_InitTick>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	e001      	b.n	8000eb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eae:	f7ff fe0f 	bl	8000ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000550 	.word	0x20000550

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000550 	.word	0x20000550

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	@ (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	@ (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	@ (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	@ 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	@ 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff4c 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001082:	f7ff ff61 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 8001086:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	6978      	ldr	r0, [r7, #20]
 800108e:	f7ff ffb1 	bl	8000ff4 <NVIC_EncodePriority>
 8001092:	4602      	mov	r2, r0
 8001094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff80 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff54 	bl	8000f64 <__NVIC_EnableIRQ>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d008      	beq.n	80010ee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2204      	movs	r2, #4
 80010e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e022      	b.n	8001134 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 020e 	bic.w	r2, r2, #14
 80010fc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0201 	bic.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001112:	f003 021c 	and.w	r2, r3, #28
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	2101      	movs	r1, #1
 800111c:	fa01 f202 	lsl.w	r2, r1, r2
 8001120:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d005      	beq.n	8001164 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2204      	movs	r2, #4
 800115c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	e029      	b.n	80011b8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 020e 	bic.w	r2, r2, #14
 8001172:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001188:	f003 021c 	and.w	r2, r3, #28
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	2101      	movs	r1, #1
 8001192:	fa01 f202 	lsl.w	r2, r1, r2
 8001196:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	4798      	blx	r3
    }
  }
  return status;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	e17f      	b.n	80014d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2101      	movs	r1, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8171 	beq.w	80014ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d005      	beq.n	8001204 <HAL_GPIO_Init+0x40>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d130      	bne.n	8001266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800123a:	2201      	movs	r2, #1
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	f003 0201 	and.w	r2, r3, #1
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b03      	cmp	r3, #3
 8001270:	d118      	bne.n	80012a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001278:	2201      	movs	r2, #1
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	08db      	lsrs	r3, r3, #3
 800128e:	f003 0201 	and.w	r2, r3, #1
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d017      	beq.n	80012e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d123      	bne.n	8001334 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	08da      	lsrs	r2, r3, #3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3208      	adds	r2, #8
 80012f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	6939      	ldr	r1, [r7, #16]
 8001330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80ac 	beq.w	80014ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b5f      	ldr	r3, [pc, #380]	@ (80014f4 <HAL_GPIO_Init+0x330>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137a:	4a5e      	ldr	r2, [pc, #376]	@ (80014f4 <HAL_GPIO_Init+0x330>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6613      	str	r3, [r2, #96]	@ 0x60
 8001382:	4b5c      	ldr	r3, [pc, #368]	@ (80014f4 <HAL_GPIO_Init+0x330>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800138e:	4a5a      	ldr	r2, [pc, #360]	@ (80014f8 <HAL_GPIO_Init+0x334>)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013b8:	d025      	beq.n	8001406 <HAL_GPIO_Init+0x242>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4f      	ldr	r2, [pc, #316]	@ (80014fc <HAL_GPIO_Init+0x338>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d01f      	beq.n	8001402 <HAL_GPIO_Init+0x23e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001500 <HAL_GPIO_Init+0x33c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d019      	beq.n	80013fe <HAL_GPIO_Init+0x23a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001504 <HAL_GPIO_Init+0x340>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x236>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001508 <HAL_GPIO_Init+0x344>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00d      	beq.n	80013f6 <HAL_GPIO_Init+0x232>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4b      	ldr	r2, [pc, #300]	@ (800150c <HAL_GPIO_Init+0x348>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x22e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001510 <HAL_GPIO_Init+0x34c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_GPIO_Init+0x22a>
 80013ea:	2306      	movs	r3, #6
 80013ec:	e00c      	b.n	8001408 <HAL_GPIO_Init+0x244>
 80013ee:	2307      	movs	r3, #7
 80013f0:	e00a      	b.n	8001408 <HAL_GPIO_Init+0x244>
 80013f2:	2305      	movs	r3, #5
 80013f4:	e008      	b.n	8001408 <HAL_GPIO_Init+0x244>
 80013f6:	2304      	movs	r3, #4
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x244>
 80013fa:	2303      	movs	r3, #3
 80013fc:	e004      	b.n	8001408 <HAL_GPIO_Init+0x244>
 80013fe:	2302      	movs	r3, #2
 8001400:	e002      	b.n	8001408 <HAL_GPIO_Init+0x244>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x244>
 8001406:	2300      	movs	r3, #0
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	f002 0203 	and.w	r2, r2, #3
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	4093      	lsls	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001418:	4937      	ldr	r1, [pc, #220]	@ (80014f8 <HAL_GPIO_Init+0x334>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001426:	4b3b      	ldr	r3, [pc, #236]	@ (8001514 <HAL_GPIO_Init+0x350>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800144a:	4a32      	ldr	r2, [pc, #200]	@ (8001514 <HAL_GPIO_Init+0x350>)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001450:	4b30      	ldr	r3, [pc, #192]	@ (8001514 <HAL_GPIO_Init+0x350>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001474:	4a27      	ldr	r2, [pc, #156]	@ (8001514 <HAL_GPIO_Init+0x350>)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800147a:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <HAL_GPIO_Init+0x350>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800149e:	4a1d      	ldr	r2, [pc, #116]	@ (8001514 <HAL_GPIO_Init+0x350>)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <HAL_GPIO_Init+0x350>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014c8:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <HAL_GPIO_Init+0x350>)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa22 f303 	lsr.w	r3, r2, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f47f ae78 	bne.w	80011d4 <HAL_GPIO_Init+0x10>
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000
 80014fc:	48000400 	.word	0x48000400
 8001500:	48000800 	.word	0x48000800
 8001504:	48000c00 	.word	0x48000c00
 8001508:	48001000 	.word	0x48001000
 800150c:	48001400 	.word	0x48001400
 8001510:	48001800 	.word	0x48001800
 8001514:	40010400 	.word	0x40010400

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001534:	e002      	b.n	800153c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <HAL_PWREx_GetVoltageRange+0x18>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40007000 	.word	0x40007000

08001564 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001572:	d130      	bne.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001574:	4b23      	ldr	r3, [pc, #140]	@ (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800157c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001580:	d038      	beq.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800158a:	4a1e      	ldr	r2, [pc, #120]	@ (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001590:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001592:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2232      	movs	r2, #50	@ 0x32
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	4a1b      	ldr	r2, [pc, #108]	@ (800160c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	0c9b      	lsrs	r3, r3, #18
 80015a4:	3301      	adds	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a8:	e002      	b.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015bc:	d102      	bne.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f2      	bne.n	80015aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015d0:	d110      	bne.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e00f      	b.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015e2:	d007      	beq.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015e4:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015ec:	4a05      	ldr	r2, [pc, #20]	@ (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40007000 	.word	0x40007000
 8001608:	20000000 	.word	0x20000000
 800160c:	431bde83 	.word	0x431bde83

08001610 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e3ca      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001622:	4b97      	ldr	r3, [pc, #604]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800162c:	4b94      	ldr	r3, [pc, #592]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 80e4 	beq.w	800180c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_RCC_OscConfig+0x4a>
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b0c      	cmp	r3, #12
 800164e:	f040 808b 	bne.w	8001768 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b01      	cmp	r3, #1
 8001656:	f040 8087 	bne.w	8001768 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800165a:	4b89      	ldr	r3, [pc, #548]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_RCC_OscConfig+0x62>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e3a2      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1a      	ldr	r2, [r3, #32]
 8001676:	4b82      	ldr	r3, [pc, #520]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <HAL_RCC_OscConfig+0x7c>
 8001682:	4b7f      	ldr	r3, [pc, #508]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800168a:	e005      	b.n	8001698 <HAL_RCC_OscConfig+0x88>
 800168c:	4b7c      	ldr	r3, [pc, #496]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001698:	4293      	cmp	r3, r2
 800169a:	d223      	bcs.n	80016e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fd87 	bl	80021b4 <RCC_SetFlashLatencyFromMSIRange>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e383      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b0:	4b73      	ldr	r3, [pc, #460]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a72      	ldr	r2, [pc, #456]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b70      	ldr	r3, [pc, #448]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	496d      	ldr	r1, [pc, #436]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	4968      	ldr	r1, [pc, #416]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	604b      	str	r3, [r1, #4]
 80016e2:	e025      	b.n	8001730 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e4:	4b66      	ldr	r3, [pc, #408]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a65      	ldr	r2, [pc, #404]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b63      	ldr	r3, [pc, #396]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4960      	ldr	r1, [pc, #384]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001702:	4b5f      	ldr	r3, [pc, #380]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	495b      	ldr	r1, [pc, #364]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d109      	bne.n	8001730 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fd47 	bl	80021b4 <RCC_SetFlashLatencyFromMSIRange>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e343      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001730:	f000 fc4a 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8001734:	4602      	mov	r2, r0
 8001736:	4b52      	ldr	r3, [pc, #328]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	091b      	lsrs	r3, r3, #4
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	4950      	ldr	r1, [pc, #320]	@ (8001884 <HAL_RCC_OscConfig+0x274>)
 8001742:	5ccb      	ldrb	r3, [r1, r3]
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
 800174c:	4a4e      	ldr	r2, [pc, #312]	@ (8001888 <HAL_RCC_OscConfig+0x278>)
 800174e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001750:	4b4e      	ldr	r3, [pc, #312]	@ (800188c <HAL_RCC_OscConfig+0x27c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff f9e3 	bl	8000b20 <HAL_InitTick>
 800175a:	4603      	mov	r3, r0
 800175c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d052      	beq.n	800180a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	e327      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d032      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001770:	4b43      	ldr	r3, [pc, #268]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a42      	ldr	r2, [pc, #264]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800177c:	f7ff fbb4 	bl	8000ee8 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001784:	f7ff fbb0 	bl	8000ee8 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e310      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001796:	4b3a      	ldr	r3, [pc, #232]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a2:	4b37      	ldr	r3, [pc, #220]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a36      	ldr	r2, [pc, #216]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b34      	ldr	r3, [pc, #208]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4931      	ldr	r1, [pc, #196]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	492c      	ldr	r1, [pc, #176]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
 80017d4:	e01a      	b.n	800180c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a29      	ldr	r2, [pc, #164]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fb81 	bl	8000ee8 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ea:	f7ff fb7d 	bl	8000ee8 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e2dd      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017fc:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x1da>
 8001808:	e000      	b.n	800180c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800180a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d074      	beq.n	8001902 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b08      	cmp	r3, #8
 800181c:	d005      	beq.n	800182a <HAL_RCC_OscConfig+0x21a>
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2b0c      	cmp	r3, #12
 8001822:	d10e      	bne.n	8001842 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d10b      	bne.n	8001842 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d064      	beq.n	8001900 <HAL_RCC_OscConfig+0x2f0>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d160      	bne.n	8001900 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e2ba      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x24a>
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0b      	ldr	r2, [pc, #44]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e026      	b.n	80018a8 <HAL_RCC_OscConfig+0x298>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001862:	d115      	bne.n	8001890 <HAL_RCC_OscConfig+0x280>
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 800186a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b03      	ldr	r3, [pc, #12]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a02      	ldr	r2, [pc, #8]	@ (8001880 <HAL_RCC_OscConfig+0x270>)
 8001876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e014      	b.n	80018a8 <HAL_RCC_OscConfig+0x298>
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	080075b8 	.word	0x080075b8
 8001888:	20000000 	.word	0x20000000
 800188c:	20000004 	.word	0x20000004
 8001890:	4ba0      	ldr	r3, [pc, #640]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a9f      	ldr	r2, [pc, #636]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b9d      	ldr	r3, [pc, #628]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a9c      	ldr	r2, [pc, #624]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb1a 	bl	8000ee8 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fb16 	bl	8000ee8 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	@ 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e276      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ca:	4b92      	ldr	r3, [pc, #584]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x2a8>
 80018d6:	e014      	b.n	8001902 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fb06 	bl	8000ee8 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fb02 	bl	8000ee8 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	@ 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e262      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018f2:	4b88      	ldr	r3, [pc, #544]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2d0>
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d060      	beq.n	80019d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	2b04      	cmp	r3, #4
 8001912:	d005      	beq.n	8001920 <HAL_RCC_OscConfig+0x310>
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2b0c      	cmp	r3, #12
 8001918:	d119      	bne.n	800194e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d116      	bne.n	800194e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001920:	4b7c      	ldr	r3, [pc, #496]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_OscConfig+0x328>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e23f      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001938:	4b76      	ldr	r3, [pc, #472]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	061b      	lsls	r3, r3, #24
 8001946:	4973      	ldr	r1, [pc, #460]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800194c:	e040      	b.n	80019d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d023      	beq.n	800199e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001956:	4b6f      	ldr	r3, [pc, #444]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a6e      	ldr	r2, [pc, #440]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 800195c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001962:	f7ff fac1 	bl	8000ee8 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196a:	f7ff fabd 	bl	8000ee8 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e21d      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800197c:	4b65      	ldr	r3, [pc, #404]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b62      	ldr	r3, [pc, #392]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	061b      	lsls	r3, r3, #24
 8001996:	495f      	ldr	r1, [pc, #380]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
 800199c:	e018      	b.n	80019d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 80019a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff fa9d 	bl	8000ee8 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff fa99 	bl	8000ee8 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1f9      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c4:	4b53      	ldr	r3, [pc, #332]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f0      	bne.n	80019b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d03c      	beq.n	8001a56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01c      	beq.n	8001a1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 80019e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f4:	f7ff fa78 	bl	8000ee8 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fc:	f7ff fa74 	bl	8000ee8 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e1d4      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a0e:	4b41      	ldr	r3, [pc, #260]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0ef      	beq.n	80019fc <HAL_RCC_OscConfig+0x3ec>
 8001a1c:	e01b      	b.n	8001a56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a24:	4a3b      	ldr	r2, [pc, #236]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fa5b 	bl	8000ee8 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a36:	f7ff fa57 	bl	8000ee8 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e1b7      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a48:	4b32      	ldr	r3, [pc, #200]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1ef      	bne.n	8001a36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80a6 	beq.w	8001bb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a68:	4b2a      	ldr	r3, [pc, #168]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10d      	bne.n	8001a90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a74:	4b27      	ldr	r3, [pc, #156]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a78:	4a26      	ldr	r2, [pc, #152]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a80:	4b24      	ldr	r3, [pc, #144]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a90:	4b21      	ldr	r3, [pc, #132]	@ (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d118      	bne.n	8001ace <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fa1e 	bl	8000ee8 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab0:	f7ff fa1a 	bl	8000ee8 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e17a      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_RCC_OscConfig+0x508>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d108      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4d8>
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001adc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ae6:	e029      	b.n	8001b3c <HAL_RCC_OscConfig+0x52c>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b05      	cmp	r3, #5
 8001aee:	d115      	bne.n	8001b1c <HAL_RCC_OscConfig+0x50c>
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af6:	4a07      	ldr	r2, [pc, #28]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b00:	4b04      	ldr	r3, [pc, #16]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b06:	4a03      	ldr	r2, [pc, #12]	@ (8001b14 <HAL_RCC_OscConfig+0x504>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b10:	e014      	b.n	8001b3c <HAL_RCC_OscConfig+0x52c>
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	4b9c      	ldr	r3, [pc, #624]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b22:	4a9b      	ldr	r2, [pc, #620]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b2c:	4b98      	ldr	r3, [pc, #608]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b32:	4a97      	ldr	r2, [pc, #604]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d016      	beq.n	8001b72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff f9d0 	bl	8000ee8 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4c:	f7ff f9cc 	bl	8000ee8 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e12a      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b62:	4b8b      	ldr	r3, [pc, #556]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0ed      	beq.n	8001b4c <HAL_RCC_OscConfig+0x53c>
 8001b70:	e015      	b.n	8001b9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff f9b9 	bl	8000ee8 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b78:	e00a      	b.n	8001b90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7a:	f7ff f9b5 	bl	8000ee8 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e113      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b90:	4b7f      	ldr	r3, [pc, #508]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1ed      	bne.n	8001b7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d105      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba4:	4b7a      	ldr	r3, [pc, #488]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba8:	4a79      	ldr	r2, [pc, #484]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001baa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80fe 	beq.w	8001db6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	f040 80d0 	bne.w	8001d64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bc4:	4b72      	ldr	r3, [pc, #456]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0203 	and.w	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d130      	bne.n	8001c3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	3b01      	subs	r3, #1
 8001be4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d127      	bne.n	8001c3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d11f      	bne.n	8001c3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c04:	2a07      	cmp	r2, #7
 8001c06:	bf14      	ite	ne
 8001c08:	2201      	movne	r2, #1
 8001c0a:	2200      	moveq	r2, #0
 8001c0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d113      	bne.n	8001c3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	085b      	lsrs	r3, r3, #1
 8001c32:	3b01      	subs	r3, #1
 8001c34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d06e      	beq.n	8001d18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	d069      	beq.n	8001d14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c40:	4b53      	ldr	r3, [pc, #332]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c4c:	4b50      	ldr	r3, [pc, #320]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0ad      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a4b      	ldr	r2, [pc, #300]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c68:	f7ff f93e 	bl	8000ee8 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f93a 	bl	8000ee8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e09a      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c82:	4b43      	ldr	r3, [pc, #268]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c8e:	4b40      	ldr	r3, [pc, #256]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	4b40      	ldr	r3, [pc, #256]	@ (8001d94 <HAL_RCC_OscConfig+0x784>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c9e:	3a01      	subs	r2, #1
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	4311      	orrs	r1, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ca8:	0212      	lsls	r2, r2, #8
 8001caa:	4311      	orrs	r1, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001cb0:	0852      	lsrs	r2, r2, #1
 8001cb2:	3a01      	subs	r2, #1
 8001cb4:	0552      	lsls	r2, r2, #21
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cbc:	0852      	lsrs	r2, r2, #1
 8001cbe:	3a01      	subs	r2, #1
 8001cc0:	0652      	lsls	r2, r2, #25
 8001cc2:	4311      	orrs	r1, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cc8:	0912      	lsrs	r2, r2, #4
 8001cca:	0452      	lsls	r2, r2, #17
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	4930      	ldr	r1, [pc, #192]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2d      	ldr	r2, [pc, #180]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4a2a      	ldr	r2, [pc, #168]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001ce6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cec:	f7ff f8fc 	bl	8000ee8 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff f8f8 	bl	8000ee8 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e058      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d06:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d12:	e050      	b.n	8001db6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e04f      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d18:	4b1d      	ldr	r3, [pc, #116]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d148      	bne.n	8001db6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d24:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d30:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a16      	ldr	r2, [pc, #88]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001d36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d3c:	f7ff f8d4 	bl	8000ee8 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff f8d0 	bl	8000ee8 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e030      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d56:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x734>
 8001d62:	e028      	b.n	8001db6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d023      	beq.n	8001db2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <HAL_RCC_OscConfig+0x780>)
 8001d70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff f8b7 	bl	8000ee8 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7c:	e00c      	b.n	8001d98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff f8b3 	bl	8000ee8 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d905      	bls.n	8001d98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e013      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
 8001d90:	40021000 	.word	0x40021000
 8001d94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d98:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <HAL_RCC_OscConfig+0x7b0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1ec      	bne.n	8001d7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_RCC_OscConfig+0x7b0>)
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	4905      	ldr	r1, [pc, #20]	@ (8001dc0 <HAL_RCC_OscConfig+0x7b0>)
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_RCC_OscConfig+0x7b4>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
 8001db0:	e001      	b.n	8001db6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	feeefffc 	.word	0xfeeefffc

08001dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0e7      	b.n	8001fac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b75      	ldr	r3, [pc, #468]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d910      	bls.n	8001e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b72      	ldr	r3, [pc, #456]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 0207 	bic.w	r2, r3, #7
 8001df2:	4970      	ldr	r1, [pc, #448]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b6e      	ldr	r3, [pc, #440]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0cf      	b.n	8001fac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d010      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	4b66      	ldr	r3, [pc, #408]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d908      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e28:	4b63      	ldr	r3, [pc, #396]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	4960      	ldr	r1, [pc, #384]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d04c      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d121      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0a6      	b.n	8001fac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e66:	4b54      	ldr	r3, [pc, #336]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d115      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e09a      	b.n	8001fac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e08e      	b.n	8001fac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e086      	b.n	8001fac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e9e:	4b46      	ldr	r3, [pc, #280]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f023 0203 	bic.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4943      	ldr	r1, [pc, #268]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb0:	f7ff f81a 	bl	8000ee8 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7ff f816 	bl	8000ee8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e06e      	b.n	8001fac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 020c 	and.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1eb      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d010      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	4b31      	ldr	r3, [pc, #196]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d208      	bcs.n	8001f0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	492b      	ldr	r1, [pc, #172]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0e:	4b29      	ldr	r3, [pc, #164]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d210      	bcs.n	8001f3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1c:	4b25      	ldr	r3, [pc, #148]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 0207 	bic.w	r2, r3, #7
 8001f24:	4923      	ldr	r1, [pc, #140]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2c:	4b21      	ldr	r3, [pc, #132]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e036      	b.n	8001fac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d008      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	4918      	ldr	r1, [pc, #96]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d009      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f68:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4910      	ldr	r1, [pc, #64]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f7c:	f000 f824 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	091b      	lsrs	r3, r3, #4
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	490b      	ldr	r1, [pc, #44]	@ (8001fbc <HAL_RCC_ClockConfig+0x1f4>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
 8001f98:	4a09      	ldr	r2, [pc, #36]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1fc>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fdbd 	bl	8000b20 <HAL_InitTick>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001faa:	7afb      	ldrb	r3, [r7, #11]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	080075b8 	.word	0x080075b8
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	@ 0x24
 8001fcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x34>
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d121      	bne.n	800203a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d11e      	bne.n	800203a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ffc:	4b34      	ldr	r3, [pc, #208]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d107      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002008:	4b31      	ldr	r3, [pc, #196]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800200a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	e005      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002018:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002024:	4a2b      	ldr	r2, [pc, #172]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10d      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d102      	bne.n	8002046 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002040:	4b25      	ldr	r3, [pc, #148]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	e004      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d101      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800204c:	4b23      	ldr	r3, [pc, #140]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x114>)
 800204e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d134      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002056:	4b1e      	ldr	r3, [pc, #120]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d003      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0xa6>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d003      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0xac>
 800206c:	e005      	b.n	800207a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800206e:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002070:	617b      	str	r3, [r7, #20]
      break;
 8002072:	e005      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002076:	617b      	str	r3, [r7, #20]
      break;
 8002078:	e002      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	617b      	str	r3, [r7, #20]
      break;
 800207e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002080:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	3301      	adds	r3, #1
 800208c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	fb03 f202 	mul.w	r2, r3, r2
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020a6:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	0e5b      	lsrs	r3, r3, #25
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	3301      	adds	r3, #1
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020c0:	69bb      	ldr	r3, [r7, #24]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	@ 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	080075d0 	.word	0x080075d0
 80020d8:	00f42400 	.word	0x00f42400
 80020dc:	007a1200 	.word	0x007a1200

080020e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000000 	.word	0x20000000

080020f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020fc:	f7ff fff0 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4904      	ldr	r1, [pc, #16]	@ (8002120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	080075c8 	.word	0x080075c8

08002124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002128:	f7ff ffda 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	0adb      	lsrs	r3, r3, #11
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4904      	ldr	r1, [pc, #16]	@ (800214c <HAL_RCC_GetPCLK2Freq+0x28>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000
 800214c:	080075c8 	.word	0x080075c8

08002150 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	220f      	movs	r2, #15
 800215e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0203 	and.w	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800216c:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002184:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002192:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <HAL_RCC_GetClockConfig+0x60>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0207 	and.w	r2, r3, #7
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40022000 	.word	0x40022000

080021b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021c0:	4b2a      	ldr	r3, [pc, #168]	@ (800226c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021cc:	f7ff f9bc 	bl	8001548 <HAL_PWREx_GetVoltageRange>
 80021d0:	6178      	str	r0, [r7, #20]
 80021d2:	e014      	b.n	80021fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	4b25      	ldr	r3, [pc, #148]	@ (800226c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d8:	4a24      	ldr	r2, [pc, #144]	@ (800226c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021de:	6593      	str	r3, [r2, #88]	@ 0x58
 80021e0:	4b22      	ldr	r3, [pc, #136]	@ (800226c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021ec:	f7ff f9ac 	bl	8001548 <HAL_PWREx_GetVoltageRange>
 80021f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021f2:	4b1e      	ldr	r3, [pc, #120]	@ (800226c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f6:	4a1d      	ldr	r2, [pc, #116]	@ (800226c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002204:	d10b      	bne.n	800221e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b80      	cmp	r3, #128	@ 0x80
 800220a:	d919      	bls.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002210:	d902      	bls.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002212:	2302      	movs	r3, #2
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	e013      	b.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002218:	2301      	movs	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e010      	b.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b80      	cmp	r3, #128	@ 0x80
 8002222:	d902      	bls.n	800222a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002224:	2303      	movs	r3, #3
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	e00a      	b.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b80      	cmp	r3, #128	@ 0x80
 800222e:	d102      	bne.n	8002236 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002230:	2302      	movs	r3, #2
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	e004      	b.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b70      	cmp	r3, #112	@ 0x70
 800223a:	d101      	bne.n	8002240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800223c:	2301      	movs	r3, #1
 800223e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 0207 	bic.w	r2, r3, #7
 8002248:	4909      	ldr	r1, [pc, #36]	@ (8002270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002250:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	429a      	cmp	r2, r3
 800225c:	d001      	beq.n	8002262 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	40022000 	.word	0x40022000

08002274 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800227c:	2300      	movs	r3, #0
 800227e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002280:	2300      	movs	r3, #0
 8002282:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800228c:	2b00      	cmp	r3, #0
 800228e:	d041      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002294:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002298:	d02a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800229a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800229e:	d824      	bhi.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022a4:	d008      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022aa:	d81e      	bhi.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022b4:	d010      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022b6:	e018      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022b8:	4b86      	ldr	r3, [pc, #536]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a85      	ldr	r2, [pc, #532]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c4:	e015      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 fabb 	bl	8002848 <RCCEx_PLLSAI1_Config>
 80022d2:	4603      	mov	r3, r0
 80022d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022d6:	e00c      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3320      	adds	r3, #32
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fba6 	bl	8002a30 <RCCEx_PLLSAI2_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e8:	e003      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	74fb      	strb	r3, [r7, #19]
      break;
 80022ee:	e000      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022f2:	7cfb      	ldrb	r3, [r7, #19]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10b      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022f8:	4b76      	ldr	r3, [pc, #472]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002306:	4973      	ldr	r1, [pc, #460]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800230e:	e001      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d041      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002324:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002328:	d02a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800232a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800232e:	d824      	bhi.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002330:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002334:	d008      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002336:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800233a:	d81e      	bhi.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002344:	d010      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002346:	e018      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002348:	4b62      	ldr	r3, [pc, #392]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a61      	ldr	r2, [pc, #388]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002352:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002354:	e015      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3304      	adds	r3, #4
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fa73 	bl	8002848 <RCCEx_PLLSAI1_Config>
 8002362:	4603      	mov	r3, r0
 8002364:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002366:	e00c      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3320      	adds	r3, #32
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f000 fb5e 	bl	8002a30 <RCCEx_PLLSAI2_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002378:	e003      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	74fb      	strb	r3, [r7, #19]
      break;
 800237e:	e000      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002382:	7cfb      	ldrb	r3, [r7, #19]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10b      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002388:	4b52      	ldr	r3, [pc, #328]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002396:	494f      	ldr	r1, [pc, #316]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800239e:	e001      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a0 	beq.w	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023b6:	4b47      	ldr	r3, [pc, #284]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023c6:	2300      	movs	r3, #0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00d      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023cc:	4b41      	ldr	r3, [pc, #260]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d0:	4a40      	ldr	r2, [pc, #256]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023d8:	4b3e      	ldr	r3, [pc, #248]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e4:	2301      	movs	r3, #1
 80023e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023e8:	4b3b      	ldr	r3, [pc, #236]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a3a      	ldr	r2, [pc, #232]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023f4:	f7fe fd78 	bl	8000ee8 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023fa:	e009      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fc:	f7fe fd74 	bl	8000ee8 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d902      	bls.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	74fb      	strb	r3, [r7, #19]
        break;
 800240e:	e005      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002410:	4b31      	ldr	r3, [pc, #196]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ef      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d15c      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002422:	4b2c      	ldr	r3, [pc, #176]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002428:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800242c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01f      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	d019      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002440:	4b24      	ldr	r3, [pc, #144]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800244a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800244c:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002452:	4a20      	ldr	r2, [pc, #128]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800245c:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002462:	4a1c      	ldr	r2, [pc, #112]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800246c:	4a19      	ldr	r2, [pc, #100]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d016      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7fe fd33 	bl	8000ee8 <HAL_GetTick>
 8002482:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002484:	e00b      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7fe fd2f 	bl	8000ee8 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002494:	4293      	cmp	r3, r2
 8002496:	d902      	bls.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	74fb      	strb	r3, [r7, #19]
            break;
 800249c:	e006      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249e:	4b0d      	ldr	r3, [pc, #52]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ec      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10c      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024b2:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024c2:	4904      	ldr	r1, [pc, #16]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024ca:	e009      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024cc:	7cfb      	ldrb	r3, [r7, #19]
 80024ce:	74bb      	strb	r3, [r7, #18]
 80024d0:	e006      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024e0:	7c7b      	ldrb	r3, [r7, #17]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d105      	bne.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4b9e      	ldr	r3, [pc, #632]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ea:	4a9d      	ldr	r2, [pc, #628]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024fe:	4b98      	ldr	r3, [pc, #608]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002504:	f023 0203 	bic.w	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250c:	4994      	ldr	r1, [pc, #592]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00a      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002520:	4b8f      	ldr	r3, [pc, #572]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002526:	f023 020c 	bic.w	r2, r3, #12
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252e:	498c      	ldr	r1, [pc, #560]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002530:	4313      	orrs	r3, r2
 8002532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002542:	4b87      	ldr	r3, [pc, #540]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002548:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	4983      	ldr	r1, [pc, #524]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00a      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002564:	4b7e      	ldr	r3, [pc, #504]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	497b      	ldr	r1, [pc, #492]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0310 	and.w	r3, r3, #16
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002586:	4b76      	ldr	r3, [pc, #472]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002594:	4972      	ldr	r1, [pc, #456]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025a8:	4b6d      	ldr	r3, [pc, #436]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b6:	496a      	ldr	r1, [pc, #424]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ca:	4b65      	ldr	r3, [pc, #404]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d8:	4961      	ldr	r1, [pc, #388]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fa:	4959      	ldr	r1, [pc, #356]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800260e:	4b54      	ldr	r3, [pc, #336]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002614:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800261c:	4950      	ldr	r1, [pc, #320]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002630:	4b4b      	ldr	r3, [pc, #300]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002636:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263e:	4948      	ldr	r1, [pc, #288]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002652:	4b43      	ldr	r3, [pc, #268]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002658:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	493f      	ldr	r1, [pc, #252]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d028      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002674:	4b3a      	ldr	r3, [pc, #232]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002682:	4937      	ldr	r1, [pc, #220]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800268e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002692:	d106      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002694:	4b32      	ldr	r3, [pc, #200]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a31      	ldr	r2, [pc, #196]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800269e:	60d3      	str	r3, [r2, #12]
 80026a0:	e011      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026aa:	d10c      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	2101      	movs	r1, #1
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f8c8 	bl	8002848 <RCCEx_PLLSAI1_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d028      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026d2:	4b23      	ldr	r3, [pc, #140]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e0:	491f      	ldr	r1, [pc, #124]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026f0:	d106      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026fc:	60d3      	str	r3, [r2, #12]
 80026fe:	e011      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002704:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002708:	d10c      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	2101      	movs	r1, #1
 8002710:	4618      	mov	r0, r3
 8002712:	f000 f899 	bl	8002848 <RCCEx_PLLSAI1_Config>
 8002716:	4603      	mov	r3, r0
 8002718:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002720:	7cfb      	ldrb	r3, [r7, #19]
 8002722:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d02b      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002736:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273e:	4908      	ldr	r1, [pc, #32]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800274a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800274e:	d109      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002750:	4b03      	ldr	r3, [pc, #12]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a02      	ldr	r2, [pc, #8]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800275a:	60d3      	str	r3, [r2, #12]
 800275c:	e014      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002768:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800276c:	d10c      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3304      	adds	r3, #4
 8002772:	2101      	movs	r1, #1
 8002774:	4618      	mov	r0, r3
 8002776:	f000 f867 	bl	8002848 <RCCEx_PLLSAI1_Config>
 800277a:	4603      	mov	r3, r0
 800277c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d02f      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002794:	4b2b      	ldr	r3, [pc, #172]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027a2:	4928      	ldr	r1, [pc, #160]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	2102      	movs	r1, #2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f844 	bl	8002848 <RCCEx_PLLSAI1_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d014      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027ca:	7cfb      	ldrb	r3, [r7, #19]
 80027cc:	74bb      	strb	r3, [r7, #18]
 80027ce:	e011      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3320      	adds	r3, #32
 80027de:	2102      	movs	r1, #2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 f925 	bl	8002a30 <RCCEx_PLLSAI2_Config>
 80027e6:	4603      	mov	r3, r0
 80027e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ea:	7cfb      	ldrb	r3, [r7, #19]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002800:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002806:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800280e:	490d      	ldr	r1, [pc, #52]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002822:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002828:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002832:	4904      	ldr	r1, [pc, #16]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800283a:	7cbb      	ldrb	r3, [r7, #18]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000

08002848 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002856:	4b75      	ldr	r3, [pc, #468]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d018      	beq.n	8002894 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002862:	4b72      	ldr	r3, [pc, #456]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0203 	and.w	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d10d      	bne.n	800288e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
       ||
 8002876:	2b00      	cmp	r3, #0
 8002878:	d009      	beq.n	800288e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800287a:	4b6c      	ldr	r3, [pc, #432]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	091b      	lsrs	r3, r3, #4
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
       ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d047      	beq.n	800291e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	e044      	b.n	800291e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d018      	beq.n	80028ce <RCCEx_PLLSAI1_Config+0x86>
 800289c:	2b03      	cmp	r3, #3
 800289e:	d825      	bhi.n	80028ec <RCCEx_PLLSAI1_Config+0xa4>
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d002      	beq.n	80028aa <RCCEx_PLLSAI1_Config+0x62>
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d009      	beq.n	80028bc <RCCEx_PLLSAI1_Config+0x74>
 80028a8:	e020      	b.n	80028ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028aa:	4b60      	ldr	r3, [pc, #384]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d11d      	bne.n	80028f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ba:	e01a      	b.n	80028f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028bc:	4b5b      	ldr	r3, [pc, #364]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d116      	bne.n	80028f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028cc:	e013      	b.n	80028f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ce:	4b57      	ldr	r3, [pc, #348]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10f      	bne.n	80028fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028da:	4b54      	ldr	r3, [pc, #336]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ea:	e006      	b.n	80028fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
      break;
 80028f0:	e004      	b.n	80028fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028f2:	bf00      	nop
 80028f4:	e002      	b.n	80028fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028f6:	bf00      	nop
 80028f8:	e000      	b.n	80028fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10d      	bne.n	800291e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002902:	4b4a      	ldr	r3, [pc, #296]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	430b      	orrs	r3, r1
 8002918:	4944      	ldr	r1, [pc, #272]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d17d      	bne.n	8002a20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002924:	4b41      	ldr	r3, [pc, #260]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a40      	ldr	r2, [pc, #256]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 800292a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800292e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002930:	f7fe fada 	bl	8000ee8 <HAL_GetTick>
 8002934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002936:	e009      	b.n	800294c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002938:	f7fe fad6 	bl	8000ee8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d902      	bls.n	800294c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	73fb      	strb	r3, [r7, #15]
        break;
 800294a:	e005      	b.n	8002958 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800294c:	4b37      	ldr	r3, [pc, #220]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ef      	bne.n	8002938 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d160      	bne.n	8002a20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d111      	bne.n	8002988 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002964:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800296c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6892      	ldr	r2, [r2, #8]
 8002974:	0211      	lsls	r1, r2, #8
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68d2      	ldr	r2, [r2, #12]
 800297a:	0912      	lsrs	r2, r2, #4
 800297c:	0452      	lsls	r2, r2, #17
 800297e:	430a      	orrs	r2, r1
 8002980:	492a      	ldr	r1, [pc, #168]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	610b      	str	r3, [r1, #16]
 8002986:	e027      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d112      	bne.n	80029b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800298e:	4b27      	ldr	r3, [pc, #156]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002996:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6892      	ldr	r2, [r2, #8]
 800299e:	0211      	lsls	r1, r2, #8
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6912      	ldr	r2, [r2, #16]
 80029a4:	0852      	lsrs	r2, r2, #1
 80029a6:	3a01      	subs	r2, #1
 80029a8:	0552      	lsls	r2, r2, #21
 80029aa:	430a      	orrs	r2, r1
 80029ac:	491f      	ldr	r1, [pc, #124]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	610b      	str	r3, [r1, #16]
 80029b2:	e011      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029b4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6892      	ldr	r2, [r2, #8]
 80029c4:	0211      	lsls	r1, r2, #8
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6952      	ldr	r2, [r2, #20]
 80029ca:	0852      	lsrs	r2, r2, #1
 80029cc:	3a01      	subs	r2, #1
 80029ce:	0652      	lsls	r2, r2, #25
 80029d0:	430a      	orrs	r2, r1
 80029d2:	4916      	ldr	r1, [pc, #88]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a13      	ldr	r2, [pc, #76]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fa80 	bl	8000ee8 <HAL_GetTick>
 80029e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ea:	e009      	b.n	8002a00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029ec:	f7fe fa7c 	bl	8000ee8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d902      	bls.n	8002a00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	73fb      	strb	r3, [r7, #15]
          break;
 80029fe:	e005      	b.n	8002a0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a00:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ef      	beq.n	80029ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a12:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	4904      	ldr	r1, [pc, #16]	@ (8002a2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000

08002a30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d018      	beq.n	8002a7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a4a:	4b67      	ldr	r3, [pc, #412]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0203 	and.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d10d      	bne.n	8002a76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a62:	4b61      	ldr	r3, [pc, #388]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
       ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d047      	beq.n	8002b06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
 8002a7a:	e044      	b.n	8002b06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d018      	beq.n	8002ab6 <RCCEx_PLLSAI2_Config+0x86>
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d825      	bhi.n	8002ad4 <RCCEx_PLLSAI2_Config+0xa4>
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d002      	beq.n	8002a92 <RCCEx_PLLSAI2_Config+0x62>
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d009      	beq.n	8002aa4 <RCCEx_PLLSAI2_Config+0x74>
 8002a90:	e020      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a92:	4b55      	ldr	r3, [pc, #340]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d11d      	bne.n	8002ada <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa2:	e01a      	b.n	8002ada <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aa4:	4b50      	ldr	r3, [pc, #320]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d116      	bne.n	8002ade <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab4:	e013      	b.n	8002ade <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ac2:	4b49      	ldr	r3, [pc, #292]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ad2:	e006      	b.n	8002ae2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad8:	e004      	b.n	8002ae4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ae2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10d      	bne.n	8002b06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aea:	4b3f      	ldr	r3, [pc, #252]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	430b      	orrs	r3, r1
 8002b00:	4939      	ldr	r1, [pc, #228]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d167      	bne.n	8002bdc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b0c:	4b36      	ldr	r3, [pc, #216]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a35      	ldr	r2, [pc, #212]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b18:	f7fe f9e6 	bl	8000ee8 <HAL_GetTick>
 8002b1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b1e:	e009      	b.n	8002b34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b20:	f7fe f9e2 	bl	8000ee8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d902      	bls.n	8002b34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	73fb      	strb	r3, [r7, #15]
        break;
 8002b32:	e005      	b.n	8002b40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b34:	4b2c      	ldr	r3, [pc, #176]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1ef      	bne.n	8002b20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d14a      	bne.n	8002bdc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d111      	bne.n	8002b70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b4c:	4b26      	ldr	r3, [pc, #152]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6892      	ldr	r2, [r2, #8]
 8002b5c:	0211      	lsls	r1, r2, #8
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68d2      	ldr	r2, [r2, #12]
 8002b62:	0912      	lsrs	r2, r2, #4
 8002b64:	0452      	lsls	r2, r2, #17
 8002b66:	430a      	orrs	r2, r1
 8002b68:	491f      	ldr	r1, [pc, #124]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	614b      	str	r3, [r1, #20]
 8002b6e:	e011      	b.n	8002b94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b70:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6892      	ldr	r2, [r2, #8]
 8002b80:	0211      	lsls	r1, r2, #8
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6912      	ldr	r2, [r2, #16]
 8002b86:	0852      	lsrs	r2, r2, #1
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	0652      	lsls	r2, r2, #25
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	4916      	ldr	r1, [pc, #88]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b94:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a13      	ldr	r2, [pc, #76]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe f9a2 	bl	8000ee8 <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ba6:	e009      	b.n	8002bbc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ba8:	f7fe f99e 	bl	8000ee8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d902      	bls.n	8002bbc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	73fb      	strb	r3, [r7, #15]
          break;
 8002bba:	e005      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ef      	beq.n	8002ba8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	4904      	ldr	r1, [pc, #16]	@ (8002be8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000

08002bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e049      	b.n	8002c92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f841 	bl	8002c9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f000 f9e0 	bl	8002ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d001      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e04f      	b.n	8002d68 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a23      	ldr	r2, [pc, #140]	@ (8002d74 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01d      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x76>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cf2:	d018      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x76>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d78 <HAL_TIM_Base_Start_IT+0xc8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x76>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1e      	ldr	r2, [pc, #120]	@ (8002d7c <HAL_TIM_Base_Start_IT+0xcc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x76>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x76>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1b      	ldr	r2, [pc, #108]	@ (8002d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_TIM_Base_Start_IT+0x76>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a19      	ldr	r2, [pc, #100]	@ (8002d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d115      	bne.n	8002d52 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d015      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0xb4>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d3e:	d011      	beq.n	8002d64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d50:	e008      	b.n	8002d64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e000      	b.n	8002d66 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	40013400 	.word	0x40013400
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	00010007 	.word	0x00010007

08002d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d020      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01b      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0202 	mvn.w	r2, #2
 8002dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f8e9 	bl	8002fb2 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8db 	bl	8002f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f8ec 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d020      	beq.n	8002e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01b      	beq.n	8002e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0204 	mvn.w	r2, #4
 8002e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8c3 	bl	8002fb2 <HAL_TIM_IC_CaptureCallback>
 8002e2c:	e005      	b.n	8002e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8b5 	bl	8002f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f8c6 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d020      	beq.n	8002e8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01b      	beq.n	8002e8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0208 	mvn.w	r2, #8
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2204      	movs	r2, #4
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f89d 	bl	8002fb2 <HAL_TIM_IC_CaptureCallback>
 8002e78:	e005      	b.n	8002e86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f88f 	bl	8002f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f8a0 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d020      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01b      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0210 	mvn.w	r2, #16
 8002ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2208      	movs	r2, #8
 8002eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f877 	bl	8002fb2 <HAL_TIM_IC_CaptureCallback>
 8002ec4:	e005      	b.n	8002ed2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f869 	bl	8002f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f87a 	bl	8002fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00c      	beq.n	8002efc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0201 	mvn.w	r2, #1
 8002ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fdd2 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d104      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00c      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f913 	bl	8003150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00c      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f90b 	bl	8003164 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00c      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f834 	bl	8002fda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00c      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f06f 0220 	mvn.w	r2, #32
 8002f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f8d3 	bl	800313c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a46      	ldr	r2, [pc, #280]	@ (800311c <TIM_Base_SetConfig+0x12c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d013      	beq.n	8003030 <TIM_Base_SetConfig+0x40>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300e:	d00f      	beq.n	8003030 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a43      	ldr	r2, [pc, #268]	@ (8003120 <TIM_Base_SetConfig+0x130>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00b      	beq.n	8003030 <TIM_Base_SetConfig+0x40>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a42      	ldr	r2, [pc, #264]	@ (8003124 <TIM_Base_SetConfig+0x134>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d007      	beq.n	8003030 <TIM_Base_SetConfig+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a41      	ldr	r2, [pc, #260]	@ (8003128 <TIM_Base_SetConfig+0x138>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d003      	beq.n	8003030 <TIM_Base_SetConfig+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a40      	ldr	r2, [pc, #256]	@ (800312c <TIM_Base_SetConfig+0x13c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d108      	bne.n	8003042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a35      	ldr	r2, [pc, #212]	@ (800311c <TIM_Base_SetConfig+0x12c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01f      	beq.n	800308a <TIM_Base_SetConfig+0x9a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003050:	d01b      	beq.n	800308a <TIM_Base_SetConfig+0x9a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a32      	ldr	r2, [pc, #200]	@ (8003120 <TIM_Base_SetConfig+0x130>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d017      	beq.n	800308a <TIM_Base_SetConfig+0x9a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a31      	ldr	r2, [pc, #196]	@ (8003124 <TIM_Base_SetConfig+0x134>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <TIM_Base_SetConfig+0x9a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a30      	ldr	r2, [pc, #192]	@ (8003128 <TIM_Base_SetConfig+0x138>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00f      	beq.n	800308a <TIM_Base_SetConfig+0x9a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a2f      	ldr	r2, [pc, #188]	@ (800312c <TIM_Base_SetConfig+0x13c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00b      	beq.n	800308a <TIM_Base_SetConfig+0x9a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a2e      	ldr	r2, [pc, #184]	@ (8003130 <TIM_Base_SetConfig+0x140>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d007      	beq.n	800308a <TIM_Base_SetConfig+0x9a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2d      	ldr	r2, [pc, #180]	@ (8003134 <TIM_Base_SetConfig+0x144>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d003      	beq.n	800308a <TIM_Base_SetConfig+0x9a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a2c      	ldr	r2, [pc, #176]	@ (8003138 <TIM_Base_SetConfig+0x148>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a16      	ldr	r2, [pc, #88]	@ (800311c <TIM_Base_SetConfig+0x12c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00f      	beq.n	80030e8 <TIM_Base_SetConfig+0xf8>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a18      	ldr	r2, [pc, #96]	@ (800312c <TIM_Base_SetConfig+0x13c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00b      	beq.n	80030e8 <TIM_Base_SetConfig+0xf8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a17      	ldr	r2, [pc, #92]	@ (8003130 <TIM_Base_SetConfig+0x140>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d007      	beq.n	80030e8 <TIM_Base_SetConfig+0xf8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a16      	ldr	r2, [pc, #88]	@ (8003134 <TIM_Base_SetConfig+0x144>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <TIM_Base_SetConfig+0xf8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a15      	ldr	r2, [pc, #84]	@ (8003138 <TIM_Base_SetConfig+0x148>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d103      	bne.n	80030f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d105      	bne.n	800310e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f023 0201 	bic.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	611a      	str	r2, [r3, #16]
  }
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40012c00 	.word	0x40012c00
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800
 8003128:	40000c00 	.word	0x40000c00
 800312c:	40013400 	.word	0x40013400
 8003130:	40014000 	.word	0x40014000
 8003134:	40014400 	.word	0x40014400
 8003138:	40014800 	.word	0x40014800

0800313c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e040      	b.n	800320c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fde2 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2224      	movs	r2, #36	@ 0x24
 80031a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fedc 	bl	8003f7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fc21 	bl	8003a0c <UART_SetConfig>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e01b      	b.n	800320c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 ff5b 	bl	80040c0 <UART_CheckIdleState>
 800320a:	4603      	mov	r3, r0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	@ 0x28
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003228:	2b20      	cmp	r3, #32
 800322a:	d177      	bne.n	800331c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_UART_Transmit+0x24>
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e070      	b.n	800331e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2221      	movs	r2, #33	@ 0x21
 8003248:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800324a:	f7fd fe4d 	bl	8000ee8 <HAL_GetTick>
 800324e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	88fa      	ldrh	r2, [r7, #6]
 8003254:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	88fa      	ldrh	r2, [r7, #6]
 800325c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003268:	d108      	bne.n	800327c <HAL_UART_Transmit+0x68>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e003      	b.n	8003284 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003284:	e02f      	b.n	80032e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2200      	movs	r2, #0
 800328e:	2180      	movs	r1, #128	@ 0x80
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 ffbd 	bl	8004210 <UART_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d004      	beq.n	80032a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e03b      	b.n	800331e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10b      	bne.n	80032c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	881a      	ldrh	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b8:	b292      	uxth	r2, r2
 80032ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	3302      	adds	r3, #2
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	e007      	b.n	80032d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3301      	adds	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1c9      	bne.n	8003286 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2140      	movs	r1, #64	@ 0x40
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 ff87 	bl	8004210 <UART_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d004      	beq.n	8003312 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e005      	b.n	800331e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	e000      	b.n	800331e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800331c:	2302      	movs	r3, #2
  }
}
 800331e:	4618      	mov	r0, r3
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	@ 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	4613      	mov	r3, r2
 8003334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800333c:	2b20      	cmp	r3, #32
 800333e:	d137      	bne.n	80033b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_UART_Receive_IT+0x24>
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e030      	b.n	80033b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a18      	ldr	r2, [pc, #96]	@ (80033bc <HAL_UART_Receive_IT+0x94>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d01f      	beq.n	80033a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d018      	beq.n	80033a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	613b      	str	r3, [r7, #16]
   return(result);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338c:	623b      	str	r3, [r7, #32]
 800338e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003390:	69f9      	ldr	r1, [r7, #28]
 8003392:	6a3a      	ldr	r2, [r7, #32]
 8003394:	e841 2300 	strex	r3, r2, [r1]
 8003398:	61bb      	str	r3, [r7, #24]
   return(result);
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e6      	bne.n	800336e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	461a      	mov	r2, r3
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 ffa0 	bl	80042ec <UART_Start_Receive_IT>
 80033ac:	4603      	mov	r3, r0
 80033ae:	e000      	b.n	80033b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033b0:	2302      	movs	r3, #2
  }
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3728      	adds	r7, #40	@ 0x28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40008000 	.word	0x40008000

080033c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b0ba      	sub	sp, #232	@ 0xe8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80033ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80033ee:	4013      	ands	r3, r2
 80033f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80033f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d115      	bne.n	8003428 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80033fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00f      	beq.n	8003428 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d009      	beq.n	8003428 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 82ca 	beq.w	80039b2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4798      	blx	r3
      }
      return;
 8003426:	e2c4      	b.n	80039b2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 8117 	beq.w	8003660 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800343e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003442:	4b85      	ldr	r3, [pc, #532]	@ (8003658 <HAL_UART_IRQHandler+0x298>)
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 810a 	beq.w	8003660 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800344c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d011      	beq.n	800347c <HAL_UART_IRQHandler+0xbc>
 8003458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800345c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00b      	beq.n	800347c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2201      	movs	r2, #1
 800346a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800347c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d011      	beq.n	80034ac <HAL_UART_IRQHandler+0xec>
 8003488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00b      	beq.n	80034ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2202      	movs	r2, #2
 800349a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034a2:	f043 0204 	orr.w	r2, r3, #4
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d011      	beq.n	80034dc <HAL_UART_IRQHandler+0x11c>
 80034b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00b      	beq.n	80034dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2204      	movs	r2, #4
 80034ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034d2:	f043 0202 	orr.w	r2, r3, #2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80034f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00b      	beq.n	8003518 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2208      	movs	r2, #8
 8003506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800350e:	f043 0208 	orr.w	r2, r3, #8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800351c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003520:	2b00      	cmp	r3, #0
 8003522:	d012      	beq.n	800354a <HAL_UART_IRQHandler+0x18a>
 8003524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003528:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00c      	beq.n	800354a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003538:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 8230 	beq.w	80039b6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00d      	beq.n	800357e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003584:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003592:	2b40      	cmp	r3, #64	@ 0x40
 8003594:	d005      	beq.n	80035a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800359a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d04f      	beq.n	8003642 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 ff68 	bl	8004478 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b2:	2b40      	cmp	r3, #64	@ 0x40
 80035b4:	d141      	bne.n	800363a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3308      	adds	r3, #8
 80035bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3308      	adds	r3, #8
 80035de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1d9      	bne.n	80035b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003606:	2b00      	cmp	r3, #0
 8003608:	d013      	beq.n	8003632 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360e:	4a13      	ldr	r2, [pc, #76]	@ (800365c <HAL_UART_IRQHandler+0x29c>)
 8003610:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd fd92 	bl	8001140 <HAL_DMA_Abort_IT>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d017      	beq.n	8003652 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800362c:	4610      	mov	r0, r2
 800362e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003630:	e00f      	b.n	8003652 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f9d4 	bl	80039e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003638:	e00b      	b.n	8003652 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f9d0 	bl	80039e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003640:	e007      	b.n	8003652 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f9cc 	bl	80039e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003650:	e1b1      	b.n	80039b6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003652:	bf00      	nop
    return;
 8003654:	e1af      	b.n	80039b6 <HAL_UART_IRQHandler+0x5f6>
 8003656:	bf00      	nop
 8003658:	04000120 	.word	0x04000120
 800365c:	08004541 	.word	0x08004541

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003664:	2b01      	cmp	r3, #1
 8003666:	f040 816a 	bne.w	800393e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800366a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8163 	beq.w	800393e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 815c 	beq.w	800393e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2210      	movs	r2, #16
 800368c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003698:	2b40      	cmp	r3, #64	@ 0x40
 800369a:	f040 80d4 	bne.w	8003846 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80ad 	beq.w	800380e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036be:	429a      	cmp	r2, r3
 80036c0:	f080 80a5 	bcs.w	800380e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f040 8086 	bne.w	80037ec <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800370a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800370e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003716:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1da      	bne.n	80036e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3308      	adds	r3, #8
 8003730:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800373a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3308      	adds	r3, #8
 800374a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800374e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003752:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003756:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003760:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e1      	bne.n	800372a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3308      	adds	r3, #8
 800376c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800377c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3308      	adds	r3, #8
 8003786:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800378a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800378c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003790:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003798:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e3      	bne.n	8003766 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037bc:	f023 0310 	bic.w	r3, r3, #16
 80037c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e4      	bne.n	80037ac <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fc6c 	bl	80010c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	b29b      	uxth	r3, r3
 8003804:	4619      	mov	r1, r3
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8f4 	bl	80039f4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800380c:	e0d5      	b.n	80039ba <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003814:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003818:	429a      	cmp	r2, r3
 800381a:	f040 80ce 	bne.w	80039ba <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b20      	cmp	r3, #32
 800382c:	f040 80c5 	bne.w	80039ba <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800383c:	4619      	mov	r1, r3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f8d8 	bl	80039f4 <HAL_UARTEx_RxEventCallback>
      return;
 8003844:	e0b9      	b.n	80039ba <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003852:	b29b      	uxth	r3, r3
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80ab 	beq.w	80039be <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80a6 	beq.w	80039be <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003882:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003886:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003894:	647b      	str	r3, [r7, #68]	@ 0x44
 8003896:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800389a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e4      	bne.n	8003872 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3308      	adds	r3, #8
 80038ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	623b      	str	r3, [r7, #32]
   return(result);
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3308      	adds	r3, #8
 80038c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80038ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e3      	bne.n	80038a8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	e853 3f00 	ldrex	r3, [r3]
 8003900:	60fb      	str	r3, [r7, #12]
   return(result);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f023 0310 	bic.w	r3, r3, #16
 8003908:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	69b9      	ldr	r1, [r7, #24]
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	617b      	str	r3, [r7, #20]
   return(result);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e4      	bne.n	80038f4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003930:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f85c 	bl	80039f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800393c:	e03f      	b.n	80039be <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800393e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00e      	beq.n	8003968 <HAL_UART_IRQHandler+0x5a8>
 800394a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800394e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800395e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 ffe9 	bl	8004938 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003966:	e02d      	b.n	80039c4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800396c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00e      	beq.n	8003992 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01c      	beq.n	80039c2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
    }
    return;
 8003990:	e017      	b.n	80039c2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <HAL_UART_IRQHandler+0x604>
 800399e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00c      	beq.n	80039c4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fdde 	bl	800456c <UART_EndTransmit_IT>
    return;
 80039b0:	e008      	b.n	80039c4 <HAL_UART_IRQHandler+0x604>
      return;
 80039b2:	bf00      	nop
 80039b4:	e006      	b.n	80039c4 <HAL_UART_IRQHandler+0x604>
    return;
 80039b6:	bf00      	nop
 80039b8:	e004      	b.n	80039c4 <HAL_UART_IRQHandler+0x604>
      return;
 80039ba:	bf00      	nop
 80039bc:	e002      	b.n	80039c4 <HAL_UART_IRQHandler+0x604>
      return;
 80039be:	bf00      	nop
 80039c0:	e000      	b.n	80039c4 <HAL_UART_IRQHandler+0x604>
    return;
 80039c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80039c4:	37e8      	adds	r7, #232	@ 0xe8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop

080039cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a10:	b08a      	sub	sp, #40	@ 0x28
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4ba4      	ldr	r3, [pc, #656]	@ (8003ccc <UART_SetConfig+0x2c0>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a99      	ldr	r2, [pc, #612]	@ (8003cd0 <UART_SetConfig+0x2c4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a74:	4313      	orrs	r3, r2
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a90      	ldr	r2, [pc, #576]	@ (8003cd4 <UART_SetConfig+0x2c8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d126      	bne.n	8003ae4 <UART_SetConfig+0xd8>
 8003a96:	4b90      	ldr	r3, [pc, #576]	@ (8003cd8 <UART_SetConfig+0x2cc>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d81b      	bhi.n	8003adc <UART_SetConfig+0xd0>
 8003aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aac <UART_SetConfig+0xa0>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003abd 	.word	0x08003abd
 8003ab0:	08003acd 	.word	0x08003acd
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003ad5 	.word	0x08003ad5
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ac2:	e116      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aca:	e112      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003acc:	2304      	movs	r3, #4
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad2:	e10e      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003ad4:	2308      	movs	r3, #8
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ada:	e10a      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003adc:	2310      	movs	r3, #16
 8003ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae2:	e106      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a7c      	ldr	r2, [pc, #496]	@ (8003cdc <UART_SetConfig+0x2d0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d138      	bne.n	8003b60 <UART_SetConfig+0x154>
 8003aee:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd8 <UART_SetConfig+0x2cc>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b0c      	cmp	r3, #12
 8003afa:	d82d      	bhi.n	8003b58 <UART_SetConfig+0x14c>
 8003afc:	a201      	add	r2, pc, #4	@ (adr r2, 8003b04 <UART_SetConfig+0xf8>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b39 	.word	0x08003b39
 8003b08:	08003b59 	.word	0x08003b59
 8003b0c:	08003b59 	.word	0x08003b59
 8003b10:	08003b59 	.word	0x08003b59
 8003b14:	08003b49 	.word	0x08003b49
 8003b18:	08003b59 	.word	0x08003b59
 8003b1c:	08003b59 	.word	0x08003b59
 8003b20:	08003b59 	.word	0x08003b59
 8003b24:	08003b41 	.word	0x08003b41
 8003b28:	08003b59 	.word	0x08003b59
 8003b2c:	08003b59 	.word	0x08003b59
 8003b30:	08003b59 	.word	0x08003b59
 8003b34:	08003b51 	.word	0x08003b51
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3e:	e0d8      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b40:	2302      	movs	r3, #2
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b46:	e0d4      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4e:	e0d0      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b50:	2308      	movs	r3, #8
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b56:	e0cc      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b5e:	e0c8      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5e      	ldr	r2, [pc, #376]	@ (8003ce0 <UART_SetConfig+0x2d4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d125      	bne.n	8003bb6 <UART_SetConfig+0x1aa>
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd8 <UART_SetConfig+0x2cc>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b74:	2b30      	cmp	r3, #48	@ 0x30
 8003b76:	d016      	beq.n	8003ba6 <UART_SetConfig+0x19a>
 8003b78:	2b30      	cmp	r3, #48	@ 0x30
 8003b7a:	d818      	bhi.n	8003bae <UART_SetConfig+0x1a2>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d00a      	beq.n	8003b96 <UART_SetConfig+0x18a>
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d814      	bhi.n	8003bae <UART_SetConfig+0x1a2>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <UART_SetConfig+0x182>
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d008      	beq.n	8003b9e <UART_SetConfig+0x192>
 8003b8c:	e00f      	b.n	8003bae <UART_SetConfig+0x1a2>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b94:	e0ad      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b96:	2302      	movs	r3, #2
 8003b98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9c:	e0a9      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003b9e:	2304      	movs	r3, #4
 8003ba0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba4:	e0a5      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bac:	e0a1      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003bae:	2310      	movs	r3, #16
 8003bb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bb4:	e09d      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ce4 <UART_SetConfig+0x2d8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d125      	bne.n	8003c0c <UART_SetConfig+0x200>
 8003bc0:	4b45      	ldr	r3, [pc, #276]	@ (8003cd8 <UART_SetConfig+0x2cc>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003bca:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bcc:	d016      	beq.n	8003bfc <UART_SetConfig+0x1f0>
 8003bce:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bd0:	d818      	bhi.n	8003c04 <UART_SetConfig+0x1f8>
 8003bd2:	2b80      	cmp	r3, #128	@ 0x80
 8003bd4:	d00a      	beq.n	8003bec <UART_SetConfig+0x1e0>
 8003bd6:	2b80      	cmp	r3, #128	@ 0x80
 8003bd8:	d814      	bhi.n	8003c04 <UART_SetConfig+0x1f8>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <UART_SetConfig+0x1d8>
 8003bde:	2b40      	cmp	r3, #64	@ 0x40
 8003be0:	d008      	beq.n	8003bf4 <UART_SetConfig+0x1e8>
 8003be2:	e00f      	b.n	8003c04 <UART_SetConfig+0x1f8>
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bea:	e082      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003bec:	2302      	movs	r3, #2
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bf2:	e07e      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bfa:	e07a      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c02:	e076      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c04:	2310      	movs	r3, #16
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0a:	e072      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a35      	ldr	r2, [pc, #212]	@ (8003ce8 <UART_SetConfig+0x2dc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d12a      	bne.n	8003c6c <UART_SetConfig+0x260>
 8003c16:	4b30      	ldr	r3, [pc, #192]	@ (8003cd8 <UART_SetConfig+0x2cc>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c24:	d01a      	beq.n	8003c5c <UART_SetConfig+0x250>
 8003c26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c2a:	d81b      	bhi.n	8003c64 <UART_SetConfig+0x258>
 8003c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c30:	d00c      	beq.n	8003c4c <UART_SetConfig+0x240>
 8003c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c36:	d815      	bhi.n	8003c64 <UART_SetConfig+0x258>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <UART_SetConfig+0x238>
 8003c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c40:	d008      	beq.n	8003c54 <UART_SetConfig+0x248>
 8003c42:	e00f      	b.n	8003c64 <UART_SetConfig+0x258>
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c4a:	e052      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c52:	e04e      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c54:	2304      	movs	r3, #4
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c5a:	e04a      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c62:	e046      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c64:	2310      	movs	r3, #16
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6a:	e042      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a17      	ldr	r2, [pc, #92]	@ (8003cd0 <UART_SetConfig+0x2c4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d13a      	bne.n	8003cec <UART_SetConfig+0x2e0>
 8003c76:	4b18      	ldr	r3, [pc, #96]	@ (8003cd8 <UART_SetConfig+0x2cc>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c84:	d01a      	beq.n	8003cbc <UART_SetConfig+0x2b0>
 8003c86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c8a:	d81b      	bhi.n	8003cc4 <UART_SetConfig+0x2b8>
 8003c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c90:	d00c      	beq.n	8003cac <UART_SetConfig+0x2a0>
 8003c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c96:	d815      	bhi.n	8003cc4 <UART_SetConfig+0x2b8>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <UART_SetConfig+0x298>
 8003c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca0:	d008      	beq.n	8003cb4 <UART_SetConfig+0x2a8>
 8003ca2:	e00f      	b.n	8003cc4 <UART_SetConfig+0x2b8>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003caa:	e022      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003cac:	2302      	movs	r3, #2
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb2:	e01e      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cba:	e01a      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc2:	e016      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cca:	e012      	b.n	8003cf2 <UART_SetConfig+0x2e6>
 8003ccc:	efff69f3 	.word	0xefff69f3
 8003cd0:	40008000 	.word	0x40008000
 8003cd4:	40013800 	.word	0x40013800
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40004400 	.word	0x40004400
 8003ce0:	40004800 	.word	0x40004800
 8003ce4:	40004c00 	.word	0x40004c00
 8003ce8:	40005000 	.word	0x40005000
 8003cec:	2310      	movs	r3, #16
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a9f      	ldr	r2, [pc, #636]	@ (8003f74 <UART_SetConfig+0x568>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d17a      	bne.n	8003df2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d824      	bhi.n	8003d4e <UART_SetConfig+0x342>
 8003d04:	a201      	add	r2, pc, #4	@ (adr r2, 8003d0c <UART_SetConfig+0x300>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d31 	.word	0x08003d31
 8003d10:	08003d4f 	.word	0x08003d4f
 8003d14:	08003d39 	.word	0x08003d39
 8003d18:	08003d4f 	.word	0x08003d4f
 8003d1c:	08003d3f 	.word	0x08003d3f
 8003d20:	08003d4f 	.word	0x08003d4f
 8003d24:	08003d4f 	.word	0x08003d4f
 8003d28:	08003d4f 	.word	0x08003d4f
 8003d2c:	08003d47 	.word	0x08003d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d30:	f7fe f9e2 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8003d34:	61f8      	str	r0, [r7, #28]
        break;
 8003d36:	e010      	b.n	8003d5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d38:	4b8f      	ldr	r3, [pc, #572]	@ (8003f78 <UART_SetConfig+0x56c>)
 8003d3a:	61fb      	str	r3, [r7, #28]
        break;
 8003d3c:	e00d      	b.n	8003d5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3e:	f7fe f943 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8003d42:	61f8      	str	r0, [r7, #28]
        break;
 8003d44:	e009      	b.n	8003d5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d4a:	61fb      	str	r3, [r7, #28]
        break;
 8003d4c:	e005      	b.n	8003d5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80fb 	beq.w	8003f58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4413      	add	r3, r2
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d305      	bcc.n	8003d7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d903      	bls.n	8003d86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d84:	e0e8      	b.n	8003f58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	461c      	mov	r4, r3
 8003d8c:	4615      	mov	r5, r2
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	022b      	lsls	r3, r5, #8
 8003d98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d9c:	0222      	lsls	r2, r4, #8
 8003d9e:	68f9      	ldr	r1, [r7, #12]
 8003da0:	6849      	ldr	r1, [r1, #4]
 8003da2:	0849      	lsrs	r1, r1, #1
 8003da4:	2000      	movs	r0, #0
 8003da6:	4688      	mov	r8, r1
 8003da8:	4681      	mov	r9, r0
 8003daa:	eb12 0a08 	adds.w	sl, r2, r8
 8003dae:	eb43 0b09 	adc.w	fp, r3, r9
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	603b      	str	r3, [r7, #0]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dc0:	4650      	mov	r0, sl
 8003dc2:	4659      	mov	r1, fp
 8003dc4:	f7fc fa6c 	bl	80002a0 <__aeabi_uldivmod>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4613      	mov	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd6:	d308      	bcc.n	8003dea <UART_SetConfig+0x3de>
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dde:	d204      	bcs.n	8003dea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	60da      	str	r2, [r3, #12]
 8003de8:	e0b6      	b.n	8003f58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003df0:	e0b2      	b.n	8003f58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dfa:	d15e      	bne.n	8003eba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d828      	bhi.n	8003e56 <UART_SetConfig+0x44a>
 8003e04:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <UART_SetConfig+0x400>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e31 	.word	0x08003e31
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e41 	.word	0x08003e41
 8003e18:	08003e57 	.word	0x08003e57
 8003e1c:	08003e47 	.word	0x08003e47
 8003e20:	08003e57 	.word	0x08003e57
 8003e24:	08003e57 	.word	0x08003e57
 8003e28:	08003e57 	.word	0x08003e57
 8003e2c:	08003e4f 	.word	0x08003e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e30:	f7fe f962 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8003e34:	61f8      	str	r0, [r7, #28]
        break;
 8003e36:	e014      	b.n	8003e62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e38:	f7fe f974 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 8003e3c:	61f8      	str	r0, [r7, #28]
        break;
 8003e3e:	e010      	b.n	8003e62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e40:	4b4d      	ldr	r3, [pc, #308]	@ (8003f78 <UART_SetConfig+0x56c>)
 8003e42:	61fb      	str	r3, [r7, #28]
        break;
 8003e44:	e00d      	b.n	8003e62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e46:	f7fe f8bf 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8003e4a:	61f8      	str	r0, [r7, #28]
        break;
 8003e4c:	e009      	b.n	8003e62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e52:	61fb      	str	r3, [r7, #28]
        break;
 8003e54:	e005      	b.n	8003e62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d077      	beq.n	8003f58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	005a      	lsls	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	441a      	add	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b0f      	cmp	r3, #15
 8003e82:	d916      	bls.n	8003eb2 <UART_SetConfig+0x4a6>
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e8a:	d212      	bcs.n	8003eb2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f023 030f 	bic.w	r3, r3, #15
 8003e94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	8afb      	ldrh	r3, [r7, #22]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	8afa      	ldrh	r2, [r7, #22]
 8003eae:	60da      	str	r2, [r3, #12]
 8003eb0:	e052      	b.n	8003f58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003eb8:	e04e      	b.n	8003f58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d827      	bhi.n	8003f12 <UART_SetConfig+0x506>
 8003ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <UART_SetConfig+0x4bc>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003eed 	.word	0x08003eed
 8003ecc:	08003ef5 	.word	0x08003ef5
 8003ed0:	08003efd 	.word	0x08003efd
 8003ed4:	08003f13 	.word	0x08003f13
 8003ed8:	08003f03 	.word	0x08003f03
 8003edc:	08003f13 	.word	0x08003f13
 8003ee0:	08003f13 	.word	0x08003f13
 8003ee4:	08003f13 	.word	0x08003f13
 8003ee8:	08003f0b 	.word	0x08003f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eec:	f7fe f904 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8003ef0:	61f8      	str	r0, [r7, #28]
        break;
 8003ef2:	e014      	b.n	8003f1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef4:	f7fe f916 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 8003ef8:	61f8      	str	r0, [r7, #28]
        break;
 8003efa:	e010      	b.n	8003f1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003efc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f78 <UART_SetConfig+0x56c>)
 8003efe:	61fb      	str	r3, [r7, #28]
        break;
 8003f00:	e00d      	b.n	8003f1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f02:	f7fe f861 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8003f06:	61f8      	str	r0, [r7, #28]
        break;
 8003f08:	e009      	b.n	8003f1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f0e:	61fb      	str	r3, [r7, #28]
        break;
 8003f10:	e005      	b.n	8003f1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f1c:	bf00      	nop
    }

    if (pclk != 0U)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d019      	beq.n	8003f58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	085a      	lsrs	r2, r3, #1
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	441a      	add	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b0f      	cmp	r3, #15
 8003f3c:	d909      	bls.n	8003f52 <UART_SetConfig+0x546>
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f44:	d205      	bcs.n	8003f52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60da      	str	r2, [r3, #12]
 8003f50:	e002      	b.n	8003f58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3728      	adds	r7, #40	@ 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f72:	bf00      	nop
 8003f74:	40008000 	.word	0x40008000
 8003f78:	00f42400 	.word	0x00f42400

08003f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01a      	beq.n	8004092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800407a:	d10a      	bne.n	8004092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  }
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b098      	sub	sp, #96	@ 0x60
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040d0:	f7fc ff0a 	bl	8000ee8 <HAL_GetTick>
 80040d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d12e      	bne.n	8004142 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ec:	2200      	movs	r2, #0
 80040ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f88c 	bl	8004210 <UART_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d021      	beq.n	8004142 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800410c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800410e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004112:	653b      	str	r3, [r7, #80]	@ 0x50
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800411c:	647b      	str	r3, [r7, #68]	@ 0x44
 800411e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800412a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e6      	bne.n	80040fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e062      	b.n	8004208 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b04      	cmp	r3, #4
 800414e:	d149      	bne.n	80041e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004150:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004158:	2200      	movs	r2, #0
 800415a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f856 	bl	8004210 <UART_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d03c      	beq.n	80041e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	623b      	str	r3, [r7, #32]
   return(result);
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004188:	633b      	str	r3, [r7, #48]	@ 0x30
 800418a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800418e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e6      	bne.n	800416a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3308      	adds	r3, #8
 80041a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3308      	adds	r3, #8
 80041ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041bc:	61fa      	str	r2, [r7, #28]
 80041be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	617b      	str	r3, [r7, #20]
   return(result);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e5      	bne.n	800419c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e011      	b.n	8004208 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3758      	adds	r7, #88	@ 0x58
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004220:	e04f      	b.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d04b      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fc fe5d 	bl	8000ee8 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <UART_WaitOnFlagUntilTimeout+0x30>
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e04e      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d037      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b80      	cmp	r3, #128	@ 0x80
 8004256:	d034      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b40      	cmp	r3, #64	@ 0x40
 800425c:	d031      	beq.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d110      	bne.n	800428e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2208      	movs	r2, #8
 8004272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f8ff 	bl	8004478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2208      	movs	r2, #8
 800427e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e029      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800429c:	d111      	bne.n	80042c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f8e5 	bl	8004478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e00f      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d0a0      	beq.n	8004222 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b097      	sub	sp, #92	@ 0x5c
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	4613      	mov	r3, r2
 80042f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	88fa      	ldrh	r2, [r7, #6]
 8004304:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431e:	d10e      	bne.n	800433e <UART_Start_Receive_IT+0x52>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d105      	bne.n	8004334 <UART_Start_Receive_IT+0x48>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800432e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004332:	e02d      	b.n	8004390 <UART_Start_Receive_IT+0xa4>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	22ff      	movs	r2, #255	@ 0xff
 8004338:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800433c:	e028      	b.n	8004390 <UART_Start_Receive_IT+0xa4>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <UART_Start_Receive_IT+0x76>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d104      	bne.n	8004358 <UART_Start_Receive_IT+0x6c>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	22ff      	movs	r2, #255	@ 0xff
 8004352:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004356:	e01b      	b.n	8004390 <UART_Start_Receive_IT+0xa4>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	227f      	movs	r2, #127	@ 0x7f
 800435c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004360:	e016      	b.n	8004390 <UART_Start_Receive_IT+0xa4>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800436a:	d10d      	bne.n	8004388 <UART_Start_Receive_IT+0x9c>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d104      	bne.n	800437e <UART_Start_Receive_IT+0x92>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	227f      	movs	r2, #127	@ 0x7f
 8004378:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800437c:	e008      	b.n	8004390 <UART_Start_Receive_IT+0xa4>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	223f      	movs	r2, #63	@ 0x3f
 8004382:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004386:	e003      	b.n	8004390 <UART_Start_Receive_IT+0xa4>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2222      	movs	r2, #34	@ 0x22
 800439c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3308      	adds	r3, #8
 80043a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80043c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80043c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80043ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e5      	bne.n	80043a0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043dc:	d107      	bne.n	80043ee <UART_Start_Receive_IT+0x102>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d103      	bne.n	80043ee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a21      	ldr	r2, [pc, #132]	@ (8004470 <UART_Start_Receive_IT+0x184>)
 80043ea:	669a      	str	r2, [r3, #104]	@ 0x68
 80043ec:	e002      	b.n	80043f4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a20      	ldr	r2, [pc, #128]	@ (8004474 <UART_Start_Receive_IT+0x188>)
 80043f2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d019      	beq.n	8004430 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004410:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800441a:	637b      	str	r3, [r7, #52]	@ 0x34
 800441c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004420:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e6      	bne.n	80043fc <UART_Start_Receive_IT+0x110>
 800442e:	e018      	b.n	8004462 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	613b      	str	r3, [r7, #16]
   return(result);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f043 0320 	orr.w	r3, r3, #32
 8004444:	653b      	str	r3, [r7, #80]	@ 0x50
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800444e:	623b      	str	r3, [r7, #32]
 8004450:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	69f9      	ldr	r1, [r7, #28]
 8004454:	6a3a      	ldr	r2, [r7, #32]
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	61bb      	str	r3, [r7, #24]
   return(result);
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e6      	bne.n	8004430 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	375c      	adds	r7, #92	@ 0x5c
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	0800477d 	.word	0x0800477d
 8004474:	080045c1 	.word	0x080045c1

08004478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004478:	b480      	push	{r7}
 800447a:	b095      	sub	sp, #84	@ 0x54
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800448e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004494:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800449e:	643b      	str	r3, [r7, #64]	@ 0x40
 80044a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e6      	bne.n	8004480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3308      	adds	r3, #8
 80044b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e5      	bne.n	80044b2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d118      	bne.n	8004520 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f023 0310 	bic.w	r3, r3, #16
 8004502:	647b      	str	r3, [r7, #68]	@ 0x44
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6979      	ldr	r1, [r7, #20]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	613b      	str	r3, [r7, #16]
   return(result);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e6      	bne.n	80044ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004534:	bf00      	nop
 8004536:	3754      	adds	r7, #84	@ 0x54
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff fa3e 	bl	80039e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	60bb      	str	r3, [r7, #8]
   return(result);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	6979      	ldr	r1, [r7, #20]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	613b      	str	r3, [r7, #16]
   return(result);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e6      	bne.n	8004574 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff fa0a 	bl	80039cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045b8:	bf00      	nop
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b09c      	sub	sp, #112	@ 0x70
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80045ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045d8:	2b22      	cmp	r3, #34	@ 0x22
 80045da:	f040 80be 	bne.w	800475a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80045e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80045ec:	b2d9      	uxtb	r1, r3
 80045ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f8:	400a      	ands	r2, r1
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	f040 80a3 	bne.w	800476e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004638:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800463c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004646:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004648:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800464c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e6      	bne.n	8004628 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3308      	adds	r3, #8
 8004660:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800466a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	667b      	str	r3, [r7, #100]	@ 0x64
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3308      	adds	r3, #8
 8004678:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800467a:	647a      	str	r2, [r7, #68]	@ 0x44
 800467c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e5      	bne.n	800465a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a34      	ldr	r2, [pc, #208]	@ (8004778 <UART_RxISR_8BIT+0x1b8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d01f      	beq.n	80046ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d018      	beq.n	80046ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	623b      	str	r3, [r7, #32]
   return(result);
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80046da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e6      	bne.n	80046ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d12e      	bne.n	8004752 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60fb      	str	r3, [r7, #12]
   return(result);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	69b9      	ldr	r1, [r7, #24]
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	617b      	str	r3, [r7, #20]
   return(result);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e6      	bne.n	80046fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b10      	cmp	r3, #16
 8004738:	d103      	bne.n	8004742 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2210      	movs	r2, #16
 8004740:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004748:	4619      	mov	r1, r3
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff f952 	bl	80039f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004750:	e00d      	b.n	800476e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc f886 	bl	8000864 <HAL_UART_RxCpltCallback>
}
 8004758:	e009      	b.n	800476e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	8b1b      	ldrh	r3, [r3, #24]
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0208 	orr.w	r2, r2, #8
 800476a:	b292      	uxth	r2, r2
 800476c:	831a      	strh	r2, [r3, #24]
}
 800476e:	bf00      	nop
 8004770:	3770      	adds	r7, #112	@ 0x70
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40008000 	.word	0x40008000

0800477c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b09c      	sub	sp, #112	@ 0x70
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800478a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004794:	2b22      	cmp	r3, #34	@ 0x22
 8004796:	f040 80be 	bne.w	8004916 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80047a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80047aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80047ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80047b2:	4013      	ands	r3, r2
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047be:	1c9a      	adds	r2, r3, #2
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 80a3 	bne.w	800492a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80047f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004802:	657b      	str	r3, [r7, #84]	@ 0x54
 8004804:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004808:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e6      	bne.n	80047e4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3308      	adds	r3, #8
 800481c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	663b      	str	r3, [r7, #96]	@ 0x60
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3308      	adds	r3, #8
 8004834:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004836:	643a      	str	r2, [r7, #64]	@ 0x40
 8004838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800483c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e5      	bne.n	8004816 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a34      	ldr	r2, [pc, #208]	@ (8004934 <UART_RxISR_16BIT+0x1b8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d01f      	beq.n	80048a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d018      	beq.n	80048a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	61fb      	str	r3, [r7, #28]
   return(result);
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800488a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004896:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800489a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800489c:	e841 2300 	strex	r3, r2, [r1]
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1e6      	bne.n	8004876 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d12e      	bne.n	800490e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f023 0310 	bic.w	r3, r3, #16
 80048ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6979      	ldr	r1, [r7, #20]
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	613b      	str	r3, [r7, #16]
   return(result);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e6      	bne.n	80048b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d103      	bne.n	80048fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2210      	movs	r2, #16
 80048fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff f874 	bl	80039f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800490c:	e00d      	b.n	800492a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fb ffa8 	bl	8000864 <HAL_UART_RxCpltCallback>
}
 8004914:	e009      	b.n	800492a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	8b1b      	ldrh	r3, [r3, #24]
 800491c:	b29a      	uxth	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0208 	orr.w	r2, r2, #8
 8004926:	b292      	uxth	r2, r2
 8004928:	831a      	strh	r2, [r3, #24]
}
 800492a:	bf00      	nop
 800492c:	3770      	adds	r7, #112	@ 0x70
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40008000 	.word	0x40008000

08004938 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800495a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800495e:	2b84      	cmp	r3, #132	@ 0x84
 8004960:	d005      	beq.n	800496e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004962:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	3303      	adds	r3, #3
 800496c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800496e:	68fb      	ldr	r3, [r7, #12]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004980:	f000 fe4e 	bl	8005620 <vTaskStartScheduler>
  
  return osOK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	bd80      	pop	{r7, pc}

0800498a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800498a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498c:	b089      	sub	sp, #36	@ 0x24
 800498e:	af04      	add	r7, sp, #16
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <osThreadCreate+0x54>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01c      	beq.n	80049de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685c      	ldr	r4, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691e      	ldr	r6, [r3, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff ffc8 	bl	800494c <makeFreeRtosPriority>
 80049bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049c6:	9202      	str	r2, [sp, #8]
 80049c8:	9301      	str	r3, [sp, #4]
 80049ca:	9100      	str	r1, [sp, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	4632      	mov	r2, r6
 80049d0:	4629      	mov	r1, r5
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 fc3f 	bl	8005256 <xTaskCreateStatic>
 80049d8:	4603      	mov	r3, r0
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e01c      	b.n	8004a18 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685c      	ldr	r4, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff ffaa 	bl	800494c <makeFreeRtosPriority>
 80049f8:	4602      	mov	r2, r0
 80049fa:	f107 030c 	add.w	r3, r7, #12
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	9200      	str	r2, [sp, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	4632      	mov	r2, r6
 8004a06:	4629      	mov	r1, r5
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f000 fc84 	bl	8005316 <xTaskCreate>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d001      	beq.n	8004a18 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e000      	b.n	8004a1a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a18:	68fb      	ldr	r3, [r7, #12]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <osDelay+0x16>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	e000      	b.n	8004a3a <osDelay+0x18>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fdba 	bl	80055b4 <vTaskDelay>
  
  return osOK;
 8004a40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f103 0208 	add.w	r2, r3, #8
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f103 0208 	add.w	r2, r3, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f103 0208 	add.w	r2, r3, #8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	601a      	str	r2, [r3, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b02:	d103      	bne.n	8004b0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	e00c      	b.n	8004b26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e002      	b.n	8004b1a <vListInsert+0x2e>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d2f6      	bcs.n	8004b14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	601a      	str	r2, [r3, #0]
}
 8004b52:	bf00      	nop
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6892      	ldr	r2, [r2, #8]
 8004b74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6852      	ldr	r2, [r2, #4]
 8004b7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d103      	bne.n	8004b92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	1e5a      	subs	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b08c      	sub	sp, #48	@ 0x30
 8004bb6:	af02      	add	r7, sp, #8
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d111      	bne.n	8004be8 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d81d      	bhi.n	8004c0c <xStreamBufferGenericCreate+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	e7fd      	b.n	8004be4 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	61bb      	str	r3, [r7, #24]
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d90b      	bls.n	8004c2c <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	617b      	str	r3, [r7, #20]
}
 8004c26:	bf00      	nop
 8004c28:	bf00      	nop
 8004c2a:	e7fd      	b.n	8004c28 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8004c32:	2301      	movs	r3, #1
 8004c34:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3320      	adds	r3, #32
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 fcf3 	bl	800662c <pvPortMalloc>
 8004c46:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f103 0120 	add.w	r1, r3, #32
 8004c54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	6a38      	ldr	r0, [r7, #32]
 8004c60:	f000 fac5 	bl	80051ee <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8004c64:	6a3b      	ldr	r3, [r7, #32]
	}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3728      	adds	r7, #40	@ 0x28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b087      	sub	sp, #28
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10b      	bne.n	8004c98 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	60fb      	str	r3, [r7, #12]
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d304      	bcc.n	8004cc8 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8004cc8:	697b      	ldr	r3, [r7, #20]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b090      	sub	sp, #64	@ 0x40
 8004cda:	af02      	add	r7, sp, #8
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10b      	bne.n	8004d0a <xStreamBufferSendFromISR+0x34>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	623b      	str	r3, [r7, #32]
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	e7fd      	b.n	8004d06 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <xStreamBufferSendFromISR+0x52>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	61fb      	str	r3, [r7, #28]
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2a:	7f1b      	ldrb	r3, [r3, #28]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d36:	3304      	adds	r3, #4
 8004d38:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004d3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d3c:	f7ff ff97 	bl	8004c6e <xStreamBufferSpacesAvailable>
 8004d40:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8004d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d4e:	f000 f835 	bl	8004dbc <prvWriteMessageToBuffer>
 8004d52:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8004d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d02b      	beq.n	8004db2 <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8004d5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d5c:	f000 fa27 	bl	80051ae <prvBytesInBuffer>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d323      	bcc.n	8004db2 <xStreamBufferSendFromISR+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d6a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	61ba      	str	r2, [r7, #24]
 8004d80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d82:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <xStreamBufferSendFromISR+0xd0>
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d90:	6918      	ldr	r0, [r3, #16]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	2300      	movs	r3, #0
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	f001 f882 	bl	8005ea4 <xTaskGenericNotifyFromISR>
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	2200      	movs	r2, #0
 8004da4:	611a      	str	r2, [r3, #16]
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004db0:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8004db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3738      	adds	r7, #56	@ 0x38
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e01d      	b.n	8004e12 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	7f1b      	ldrb	r3, [r3, #28]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d108      	bne.n	8004df4 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8004de2:	2301      	movs	r3, #1
 8004de4:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	4293      	cmp	r3, r2
 8004dec:	bf28      	it	cs
 8004dee:	4613      	movcs	r3, r2
 8004df0:	607b      	str	r3, [r7, #4]
 8004df2:	e00e      	b.n	8004e12 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d308      	bcc.n	8004e0e <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004e00:	1d3b      	adds	r3, r7, #4
 8004e02:	2204      	movs	r2, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f8df 	bl	8004fca <prvWriteBytesToBuffer>
 8004e0c:	e001      	b.n	8004e12 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f8d3 	bl	8004fca <prvWriteBytesToBuffer>
 8004e24:	6138      	str	r0, [r7, #16]
 8004e26:	e001      	b.n	8004e2c <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8004e2c:	693b      	ldr	r3, [r7, #16]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b08e      	sub	sp, #56	@ 0x38
 8004e3a:	af02      	add	r7, sp, #8
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10b      	bne.n	8004e6a <xStreamBufferReceive+0x34>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	61fb      	str	r3, [r7, #28]
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	e7fd      	b.n	8004e66 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <xStreamBufferReceive+0x52>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	61bb      	str	r3, [r7, #24]
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	7f1b      	ldrb	r3, [r3, #28]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004e94:	2304      	movs	r3, #4
 8004e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e98:	e001      	b.n	8004e9e <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d035      	beq.n	8004f10 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8004ea4:	f001 faa0 	bl	80063e8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004ea8:	6a38      	ldr	r0, [r7, #32]
 8004eaa:	f000 f980 	bl	80051ae <prvBytesInBuffer>
 8004eae:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004eb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d817      	bhi.n	8004ee8 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8004eb8:	2000      	movs	r0, #0
 8004eba:	f001 f8d9 	bl	8006070 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <xStreamBufferReceive+0xa8>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	617b      	str	r3, [r7, #20]
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	e7fd      	b.n	8004eda <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8004ede:	f000 feaf 	bl	8005c40 <xTaskGetCurrentTaskHandle>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004ee8:	f001 fab0 	bl	800644c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004eec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d811      	bhi.n	8004f18 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2100      	movs	r1, #0
 8004efa:	2000      	movs	r0, #0
 8004efc:	f000 feb0 	bl	8005c60 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	2200      	movs	r2, #0
 8004f04:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004f06:	6a38      	ldr	r0, [r7, #32]
 8004f08:	f000 f951 	bl	80051ae <prvBytesInBuffer>
 8004f0c:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004f0e:	e003      	b.n	8004f18 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004f10:	6a38      	ldr	r0, [r7, #32]
 8004f12:	f000 f94c 	bl	80051ae <prvBytesInBuffer>
 8004f16:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8004f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d91d      	bls.n	8004f5c <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	6a38      	ldr	r0, [r7, #32]
 8004f2c:	f000 f81b 	bl	8004f66 <prvReadMessageFromBuffer>
 8004f30:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8004f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d011      	beq.n	8004f5c <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8004f38:	f000 fbdc 	bl	80056f4 <vTaskSuspendAll>
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d009      	beq.n	8004f58 <xStreamBufferReceive+0x122>
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	6958      	ldr	r0, [r3, #20]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	f000 fee7 	bl	8005d20 <xTaskGenericNotify>
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	2200      	movs	r2, #0
 8004f56:	615a      	str	r2, [r3, #20]
 8004f58:	f000 fbda 	bl	8005710 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8004f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3730      	adds	r7, #48	@ 0x30
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b088      	sub	sp, #32
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
 8004f72:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8004f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d019      	beq.n	8004fae <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8004f80:	f107 0110 	add.w	r1, r7, #16
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f893 	bl	80050b4 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d907      	bls.n	8004fb2 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	e001      	b.n	8004fb2 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f87b 	bl	80050b4 <prvReadBytesFromBuffer>
 8004fbe:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8004fc0:	697b      	ldr	r3, [r7, #20]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3720      	adds	r7, #32
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b08a      	sub	sp, #40	@ 0x28
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10b      	bne.n	8004ff4 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	61fb      	str	r3, [r7, #28]
}
 8004fee:	bf00      	nop
 8004ff0:	bf00      	nop
 8004ff2:	e7fd      	b.n	8004ff0 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4293      	cmp	r3, r2
 8005006:	bf28      	it	cs
 8005008:	4613      	movcs	r3, r2
 800500a:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800500c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	441a      	add	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	429a      	cmp	r2, r3
 8005018:	d90b      	bls.n	8005032 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	61bb      	str	r3, [r7, #24]
}
 800502c:	bf00      	nop
 800502e:	bf00      	nop
 8005030:	e7fd      	b.n	800502e <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	4413      	add	r3, r2
 800503a:	6a3a      	ldr	r2, [r7, #32]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	4618      	mov	r0, r3
 8005040:	f001 fd96 	bl	8006b70 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	429a      	cmp	r2, r3
 800504a:	d91d      	bls.n	8005088 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	1ad2      	subs	r2, r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	429a      	cmp	r2, r3
 8005058:	d90b      	bls.n	8005072 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	617b      	str	r3, [r7, #20]
}
 800506c:	bf00      	nop
 800506e:	bf00      	nop
 8005070:	e7fd      	b.n	800506e <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6998      	ldr	r0, [r3, #24]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	18d1      	adds	r1, r2, r3
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	461a      	mov	r2, r3
 8005084:	f001 fd74 	bl	8006b70 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8005088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005096:	429a      	cmp	r2, r3
 8005098:	d304      	bcc.n	80050a4 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a8:	605a      	str	r2, [r3, #4]

	return xCount;
 80050aa:	687b      	ldr	r3, [r7, #4]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3728      	adds	r7, #40	@ 0x28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	@ 0x28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	4293      	cmp	r3, r2
 80050c8:	bf28      	it	cs
 80050ca:	4613      	movcs	r3, r2
 80050cc:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d067      	beq.n	80051a4 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	6a3a      	ldr	r2, [r7, #32]
 80050e4:	4293      	cmp	r3, r2
 80050e6:	bf28      	it	cs
 80050e8:	4613      	movcs	r3, r2
 80050ea:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d90b      	bls.n	800510c <prvReadBytesFromBuffer+0x58>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	61bb      	str	r3, [r7, #24]
}
 8005106:	bf00      	nop
 8005108:	bf00      	nop
 800510a:	e7fd      	b.n	8005108 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800510c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	441a      	add	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	d90b      	bls.n	8005132 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	617b      	str	r3, [r7, #20]
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	e7fd      	b.n	800512e <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	4413      	add	r3, r2
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	4619      	mov	r1, r3
 800513e:	68b8      	ldr	r0, [r7, #8]
 8005140:	f001 fd16 	bl	8006b70 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8005144:	6a3a      	ldr	r2, [r7, #32]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	429a      	cmp	r2, r3
 800514a:	d91a      	bls.n	8005182 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800514c:	6a3a      	ldr	r2, [r7, #32]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d90b      	bls.n	800516c <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	613b      	str	r3, [r7, #16]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	18d0      	adds	r0, r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6999      	ldr	r1, [r3, #24]
 8005176:	6a3a      	ldr	r2, [r7, #32]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	461a      	mov	r2, r3
 800517e:	f001 fcf7 	bl	8006b70 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8005182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	4413      	add	r3, r2
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005190:	429a      	cmp	r2, r3
 8005192:	d304      	bcc.n	800519e <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a2:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80051a4:	6a3b      	ldr	r3, [r7, #32]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3728      	adds	r7, #40	@ 0x28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4413      	add	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d304      	bcc.n	80051e0 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80051e0:	68fb      	ldr	r3, [r7, #12]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b086      	sub	sp, #24
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80051fc:	2355      	movs	r3, #85	@ 0x55
 80051fe:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6979      	ldr	r1, [r7, #20]
 8005204:	68b8      	ldr	r0, [r7, #8]
 8005206:	f001 fc21 	bl	8006a4c <memset>
 800520a:	4602      	mov	r2, r0
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4293      	cmp	r3, r2
 8005210:	d00b      	beq.n	800522a <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	613b      	str	r3, [r7, #16]
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	e7fd      	b.n	8005226 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800522a:	2220      	movs	r2, #32
 800522c:	2100      	movs	r1, #0
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f001 fc0c 	bl	8006a4c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f897 2020 	ldrb.w	r2, [r7, #32]
 800524c:	771a      	strb	r2, [r3, #28]
}
 800524e:	bf00      	nop
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005256:	b580      	push	{r7, lr}
 8005258:	b08e      	sub	sp, #56	@ 0x38
 800525a:	af04      	add	r7, sp, #16
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	607a      	str	r2, [r7, #4]
 8005262:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <xTaskCreateStatic+0x2c>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	623b      	str	r3, [r7, #32]
}
 800527c:	bf00      	nop
 800527e:	bf00      	nop
 8005280:	e7fd      	b.n	800527e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10b      	bne.n	80052a0 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	61fb      	str	r3, [r7, #28]
}
 800529a:	bf00      	nop
 800529c:	bf00      	nop
 800529e:	e7fd      	b.n	800529c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052a0:	23a0      	movs	r3, #160	@ 0xa0
 80052a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80052a8:	d00b      	beq.n	80052c2 <xTaskCreateStatic+0x6c>
	__asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	61bb      	str	r3, [r7, #24]
}
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
 80052c0:	e7fd      	b.n	80052be <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01e      	beq.n	8005308 <xTaskCreateStatic+0xb2>
 80052ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01b      	beq.n	8005308 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052d8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052e2:	2300      	movs	r3, #0
 80052e4:	9303      	str	r3, [sp, #12]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	9302      	str	r3, [sp, #8]
 80052ea:	f107 0314 	add.w	r3, r7, #20
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f850 	bl	80053a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005300:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005302:	f000 f8ed 	bl	80054e0 <prvAddNewTaskToReadyList>
 8005306:	e001      	b.n	800530c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800530c:	697b      	ldr	r3, [r7, #20]
	}
 800530e:	4618      	mov	r0, r3
 8005310:	3728      	adds	r7, #40	@ 0x28
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005316:	b580      	push	{r7, lr}
 8005318:	b08c      	sub	sp, #48	@ 0x30
 800531a:	af04      	add	r7, sp, #16
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	4613      	mov	r3, r2
 8005324:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4618      	mov	r0, r3
 800532c:	f001 f97e 	bl	800662c <pvPortMalloc>
 8005330:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00e      	beq.n	8005356 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005338:	20a0      	movs	r0, #160	@ 0xa0
 800533a:	f001 f977 	bl	800662c <pvPortMalloc>
 800533e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	631a      	str	r2, [r3, #48]	@ 0x30
 800534c:	e005      	b.n	800535a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800534e:	6978      	ldr	r0, [r7, #20]
 8005350:	f001 fa3a 	bl	80067c8 <vPortFree>
 8005354:	e001      	b.n	800535a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d017      	beq.n	8005390 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005368:	88fa      	ldrh	r2, [r7, #6]
 800536a:	2300      	movs	r3, #0
 800536c:	9303      	str	r3, [sp, #12]
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	9302      	str	r3, [sp, #8]
 8005372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f80e 	bl	80053a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005384:	69f8      	ldr	r0, [r7, #28]
 8005386:	f000 f8ab 	bl	80054e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800538a:	2301      	movs	r3, #1
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e002      	b.n	8005396 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005390:	f04f 33ff 	mov.w	r3, #4294967295
 8005394:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005396:	69bb      	ldr	r3, [r7, #24]
	}
 8005398:	4618      	mov	r0, r3
 800539a:	3720      	adds	r7, #32
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053b8:	3b01      	subs	r3, #1
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f023 0307 	bic.w	r3, r3, #7
 80053c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <prvInitialiseNewTask+0x4a>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	617b      	str	r3, [r7, #20]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01f      	beq.n	8005430 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	e012      	b.n	800541c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	7819      	ldrb	r1, [r3, #0]
 80053fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	4413      	add	r3, r2
 8005404:	3334      	adds	r3, #52	@ 0x34
 8005406:	460a      	mov	r2, r1
 8005408:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d006      	beq.n	8005424 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3301      	adds	r3, #1
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b0f      	cmp	r3, #15
 8005420:	d9e9      	bls.n	80053f6 <prvInitialiseNewTask+0x56>
 8005422:	e000      	b.n	8005426 <prvInitialiseNewTask+0x86>
			{
				break;
 8005424:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800542e:	e003      	b.n	8005438 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543a:	2b06      	cmp	r3, #6
 800543c:	d901      	bls.n	8005442 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800543e:	2306      	movs	r3, #6
 8005440:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005446:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800544c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	2200      	movs	r2, #0
 8005452:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	3304      	adds	r3, #4
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff fb16 	bl	8004a8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	3318      	adds	r3, #24
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fb11 	bl	8004a8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800546c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	f1c3 0207 	rsb	r2, r3, #7
 8005474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005476:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800547c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	2200      	movs	r2, #0
 8005482:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005488:	2200      	movs	r2, #0
 800548a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	334c      	adds	r3, #76	@ 0x4c
 8005492:	224c      	movs	r2, #76	@ 0x4c
 8005494:	2100      	movs	r1, #0
 8005496:	4618      	mov	r0, r3
 8005498:	f001 fad8 	bl	8006a4c <memset>
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	4a0d      	ldr	r2, [pc, #52]	@ (80054d4 <prvInitialiseNewTask+0x134>)
 80054a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	4a0c      	ldr	r2, [pc, #48]	@ (80054d8 <prvInitialiseNewTask+0x138>)
 80054a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	4a0c      	ldr	r2, [pc, #48]	@ (80054dc <prvInitialiseNewTask+0x13c>)
 80054ac:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	68f9      	ldr	r1, [r7, #12]
 80054b2:	69b8      	ldr	r0, [r7, #24]
 80054b4:	f000 fe68 	bl	8006188 <pxPortInitialiseStack>
 80054b8:	4602      	mov	r2, r0
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054ca:	bf00      	nop
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	200054c8 	.word	0x200054c8
 80054d8:	20005530 	.word	0x20005530
 80054dc:	20005598 	.word	0x20005598

080054e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054e8:	f000 ff7e 	bl	80063e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005598 <prvAddNewTaskToReadyList+0xb8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3301      	adds	r3, #1
 80054f2:	4a29      	ldr	r2, [pc, #164]	@ (8005598 <prvAddNewTaskToReadyList+0xb8>)
 80054f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054f6:	4b29      	ldr	r3, [pc, #164]	@ (800559c <prvAddNewTaskToReadyList+0xbc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054fe:	4a27      	ldr	r2, [pc, #156]	@ (800559c <prvAddNewTaskToReadyList+0xbc>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005504:	4b24      	ldr	r3, [pc, #144]	@ (8005598 <prvAddNewTaskToReadyList+0xb8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d110      	bne.n	800552e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800550c:	f000 fad4 	bl	8005ab8 <prvInitialiseTaskLists>
 8005510:	e00d      	b.n	800552e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005512:	4b23      	ldr	r3, [pc, #140]	@ (80055a0 <prvAddNewTaskToReadyList+0xc0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800551a:	4b20      	ldr	r3, [pc, #128]	@ (800559c <prvAddNewTaskToReadyList+0xbc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005524:	429a      	cmp	r2, r3
 8005526:	d802      	bhi.n	800552e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005528:	4a1c      	ldr	r2, [pc, #112]	@ (800559c <prvAddNewTaskToReadyList+0xbc>)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800552e:	4b1d      	ldr	r3, [pc, #116]	@ (80055a4 <prvAddNewTaskToReadyList+0xc4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3301      	adds	r3, #1
 8005534:	4a1b      	ldr	r2, [pc, #108]	@ (80055a4 <prvAddNewTaskToReadyList+0xc4>)
 8005536:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	2201      	movs	r2, #1
 800553e:	409a      	lsls	r2, r3
 8005540:	4b19      	ldr	r3, [pc, #100]	@ (80055a8 <prvAddNewTaskToReadyList+0xc8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4313      	orrs	r3, r2
 8005546:	4a18      	ldr	r2, [pc, #96]	@ (80055a8 <prvAddNewTaskToReadyList+0xc8>)
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4a15      	ldr	r2, [pc, #84]	@ (80055ac <prvAddNewTaskToReadyList+0xcc>)
 8005558:	441a      	add	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3304      	adds	r3, #4
 800555e:	4619      	mov	r1, r3
 8005560:	4610      	mov	r0, r2
 8005562:	f7ff fa9f 	bl	8004aa4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005566:	f000 ff71 	bl	800644c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800556a:	4b0d      	ldr	r3, [pc, #52]	@ (80055a0 <prvAddNewTaskToReadyList+0xc0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00e      	beq.n	8005590 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005572:	4b0a      	ldr	r3, [pc, #40]	@ (800559c <prvAddNewTaskToReadyList+0xbc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557c:	429a      	cmp	r2, r3
 800557e:	d207      	bcs.n	8005590 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005580:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <prvAddNewTaskToReadyList+0xd0>)
 8005582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	20000654 	.word	0x20000654
 800559c:	20000554 	.word	0x20000554
 80055a0:	20000660 	.word	0x20000660
 80055a4:	20000670 	.word	0x20000670
 80055a8:	2000065c 	.word	0x2000065c
 80055ac:	20000558 	.word	0x20000558
 80055b0:	e000ed04 	.word	0xe000ed04

080055b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d018      	beq.n	80055f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055c6:	4b14      	ldr	r3, [pc, #80]	@ (8005618 <vTaskDelay+0x64>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <vTaskDelay+0x32>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	60bb      	str	r3, [r7, #8]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055e6:	f000 f885 	bl	80056f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055ea:	2100      	movs	r1, #0
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fd65 	bl	80060bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055f2:	f000 f88d 	bl	8005710 <xTaskResumeAll>
 80055f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d107      	bne.n	800560e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80055fe:	4b07      	ldr	r3, [pc, #28]	@ (800561c <vTaskDelay+0x68>)
 8005600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	2000067c 	.word	0x2000067c
 800561c:	e000ed04 	.word	0xe000ed04

08005620 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08a      	sub	sp, #40	@ 0x28
 8005624:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800562e:	463a      	mov	r2, r7
 8005630:	1d39      	adds	r1, r7, #4
 8005632:	f107 0308 	add.w	r3, r7, #8
 8005636:	4618      	mov	r0, r3
 8005638:	f7fa ffc8 	bl	80005cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	9202      	str	r2, [sp, #8]
 8005644:	9301      	str	r3, [sp, #4]
 8005646:	2300      	movs	r3, #0
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	2300      	movs	r3, #0
 800564c:	460a      	mov	r2, r1
 800564e:	4921      	ldr	r1, [pc, #132]	@ (80056d4 <vTaskStartScheduler+0xb4>)
 8005650:	4821      	ldr	r0, [pc, #132]	@ (80056d8 <vTaskStartScheduler+0xb8>)
 8005652:	f7ff fe00 	bl	8005256 <xTaskCreateStatic>
 8005656:	4603      	mov	r3, r0
 8005658:	4a20      	ldr	r2, [pc, #128]	@ (80056dc <vTaskStartScheduler+0xbc>)
 800565a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800565c:	4b1f      	ldr	r3, [pc, #124]	@ (80056dc <vTaskStartScheduler+0xbc>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005664:	2301      	movs	r3, #1
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e001      	b.n	800566e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d11b      	bne.n	80056ac <vTaskStartScheduler+0x8c>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	613b      	str	r3, [r7, #16]
}
 8005686:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005688:	4b15      	ldr	r3, [pc, #84]	@ (80056e0 <vTaskStartScheduler+0xc0>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	334c      	adds	r3, #76	@ 0x4c
 800568e:	4a15      	ldr	r2, [pc, #84]	@ (80056e4 <vTaskStartScheduler+0xc4>)
 8005690:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005692:	4b15      	ldr	r3, [pc, #84]	@ (80056e8 <vTaskStartScheduler+0xc8>)
 8005694:	f04f 32ff 	mov.w	r2, #4294967295
 8005698:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800569a:	4b14      	ldr	r3, [pc, #80]	@ (80056ec <vTaskStartScheduler+0xcc>)
 800569c:	2201      	movs	r2, #1
 800569e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056a0:	4b13      	ldr	r3, [pc, #76]	@ (80056f0 <vTaskStartScheduler+0xd0>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056a6:	f000 fdfb 	bl	80062a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056aa:	e00f      	b.n	80056cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d10b      	bne.n	80056cc <vTaskStartScheduler+0xac>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	60fb      	str	r3, [r7, #12]
}
 80056c6:	bf00      	nop
 80056c8:	bf00      	nop
 80056ca:	e7fd      	b.n	80056c8 <vTaskStartScheduler+0xa8>
}
 80056cc:	bf00      	nop
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	080075b0 	.word	0x080075b0
 80056d8:	08005a89 	.word	0x08005a89
 80056dc:	20000678 	.word	0x20000678
 80056e0:	20000554 	.word	0x20000554
 80056e4:	20000010 	.word	0x20000010
 80056e8:	20000674 	.word	0x20000674
 80056ec:	20000660 	.word	0x20000660
 80056f0:	20000658 	.word	0x20000658

080056f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80056f8:	4b04      	ldr	r3, [pc, #16]	@ (800570c <vTaskSuspendAll+0x18>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3301      	adds	r3, #1
 80056fe:	4a03      	ldr	r2, [pc, #12]	@ (800570c <vTaskSuspendAll+0x18>)
 8005700:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005702:	bf00      	nop
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	2000067c 	.word	0x2000067c

08005710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800571e:	4b42      	ldr	r3, [pc, #264]	@ (8005828 <xTaskResumeAll+0x118>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10b      	bne.n	800573e <xTaskResumeAll+0x2e>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	603b      	str	r3, [r7, #0]
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	e7fd      	b.n	800573a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800573e:	f000 fe53 	bl	80063e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005742:	4b39      	ldr	r3, [pc, #228]	@ (8005828 <xTaskResumeAll+0x118>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3b01      	subs	r3, #1
 8005748:	4a37      	ldr	r2, [pc, #220]	@ (8005828 <xTaskResumeAll+0x118>)
 800574a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800574c:	4b36      	ldr	r3, [pc, #216]	@ (8005828 <xTaskResumeAll+0x118>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d161      	bne.n	8005818 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005754:	4b35      	ldr	r3, [pc, #212]	@ (800582c <xTaskResumeAll+0x11c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d05d      	beq.n	8005818 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800575c:	e02e      	b.n	80057bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800575e:	4b34      	ldr	r3, [pc, #208]	@ (8005830 <xTaskResumeAll+0x120>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3318      	adds	r3, #24
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff f9f7 	bl	8004b5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3304      	adds	r3, #4
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff f9f2 	bl	8004b5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	2201      	movs	r2, #1
 8005780:	409a      	lsls	r2, r3
 8005782:	4b2c      	ldr	r3, [pc, #176]	@ (8005834 <xTaskResumeAll+0x124>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4313      	orrs	r3, r2
 8005788:	4a2a      	ldr	r2, [pc, #168]	@ (8005834 <xTaskResumeAll+0x124>)
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4a27      	ldr	r2, [pc, #156]	@ (8005838 <xTaskResumeAll+0x128>)
 800579a:	441a      	add	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f7ff f97e 	bl	8004aa4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ac:	4b23      	ldr	r3, [pc, #140]	@ (800583c <xTaskResumeAll+0x12c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d302      	bcc.n	80057bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057b6:	4b22      	ldr	r3, [pc, #136]	@ (8005840 <xTaskResumeAll+0x130>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005830 <xTaskResumeAll+0x120>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1cc      	bne.n	800575e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057ca:	f000 fa19 	bl	8005c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005844 <xTaskResumeAll+0x134>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d010      	beq.n	80057fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057da:	f000 f837 	bl	800584c <xTaskIncrementTick>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80057e4:	4b16      	ldr	r3, [pc, #88]	@ (8005840 <xTaskResumeAll+0x130>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f1      	bne.n	80057da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80057f6:	4b13      	ldr	r3, [pc, #76]	@ (8005844 <xTaskResumeAll+0x134>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057fc:	4b10      	ldr	r3, [pc, #64]	@ (8005840 <xTaskResumeAll+0x130>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d009      	beq.n	8005818 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005808:	4b0f      	ldr	r3, [pc, #60]	@ (8005848 <xTaskResumeAll+0x138>)
 800580a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005818:	f000 fe18 	bl	800644c <vPortExitCritical>

	return xAlreadyYielded;
 800581c:	68bb      	ldr	r3, [r7, #8]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	2000067c 	.word	0x2000067c
 800582c:	20000654 	.word	0x20000654
 8005830:	20000614 	.word	0x20000614
 8005834:	2000065c 	.word	0x2000065c
 8005838:	20000558 	.word	0x20000558
 800583c:	20000554 	.word	0x20000554
 8005840:	20000668 	.word	0x20000668
 8005844:	20000664 	.word	0x20000664
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005852:	2300      	movs	r3, #0
 8005854:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005856:	4b4f      	ldr	r3, [pc, #316]	@ (8005994 <xTaskIncrementTick+0x148>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f040 808f 	bne.w	800597e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005860:	4b4d      	ldr	r3, [pc, #308]	@ (8005998 <xTaskIncrementTick+0x14c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3301      	adds	r3, #1
 8005866:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005868:	4a4b      	ldr	r2, [pc, #300]	@ (8005998 <xTaskIncrementTick+0x14c>)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d121      	bne.n	80058b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005874:	4b49      	ldr	r3, [pc, #292]	@ (800599c <xTaskIncrementTick+0x150>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <xTaskIncrementTick+0x4a>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	603b      	str	r3, [r7, #0]
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	e7fd      	b.n	8005892 <xTaskIncrementTick+0x46>
 8005896:	4b41      	ldr	r3, [pc, #260]	@ (800599c <xTaskIncrementTick+0x150>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	4b40      	ldr	r3, [pc, #256]	@ (80059a0 <xTaskIncrementTick+0x154>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a3e      	ldr	r2, [pc, #248]	@ (800599c <xTaskIncrementTick+0x150>)
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	4a3e      	ldr	r2, [pc, #248]	@ (80059a0 <xTaskIncrementTick+0x154>)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	4b3e      	ldr	r3, [pc, #248]	@ (80059a4 <xTaskIncrementTick+0x158>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3301      	adds	r3, #1
 80058b0:	4a3c      	ldr	r2, [pc, #240]	@ (80059a4 <xTaskIncrementTick+0x158>)
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	f000 f9a4 	bl	8005c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058b8:	4b3b      	ldr	r3, [pc, #236]	@ (80059a8 <xTaskIncrementTick+0x15c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d348      	bcc.n	8005954 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058c2:	4b36      	ldr	r3, [pc, #216]	@ (800599c <xTaskIncrementTick+0x150>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d104      	bne.n	80058d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058cc:	4b36      	ldr	r3, [pc, #216]	@ (80059a8 <xTaskIncrementTick+0x15c>)
 80058ce:	f04f 32ff 	mov.w	r2, #4294967295
 80058d2:	601a      	str	r2, [r3, #0]
					break;
 80058d4:	e03e      	b.n	8005954 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d6:	4b31      	ldr	r3, [pc, #196]	@ (800599c <xTaskIncrementTick+0x150>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d203      	bcs.n	80058f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058ee:	4a2e      	ldr	r2, [pc, #184]	@ (80059a8 <xTaskIncrementTick+0x15c>)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058f4:	e02e      	b.n	8005954 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	3304      	adds	r3, #4
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff f92f 	bl	8004b5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005904:	2b00      	cmp	r3, #0
 8005906:	d004      	beq.n	8005912 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	3318      	adds	r3, #24
 800590c:	4618      	mov	r0, r3
 800590e:	f7ff f926 	bl	8004b5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005916:	2201      	movs	r2, #1
 8005918:	409a      	lsls	r2, r3
 800591a:	4b24      	ldr	r3, [pc, #144]	@ (80059ac <xTaskIncrementTick+0x160>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4313      	orrs	r3, r2
 8005920:	4a22      	ldr	r2, [pc, #136]	@ (80059ac <xTaskIncrementTick+0x160>)
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4a1f      	ldr	r2, [pc, #124]	@ (80059b0 <xTaskIncrementTick+0x164>)
 8005932:	441a      	add	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f7ff f8b2 	bl	8004aa4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005944:	4b1b      	ldr	r3, [pc, #108]	@ (80059b4 <xTaskIncrementTick+0x168>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594a:	429a      	cmp	r2, r3
 800594c:	d3b9      	bcc.n	80058c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800594e:	2301      	movs	r3, #1
 8005950:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005952:	e7b6      	b.n	80058c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005954:	4b17      	ldr	r3, [pc, #92]	@ (80059b4 <xTaskIncrementTick+0x168>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595a:	4915      	ldr	r1, [pc, #84]	@ (80059b0 <xTaskIncrementTick+0x164>)
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d901      	bls.n	8005970 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800596c:	2301      	movs	r3, #1
 800596e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005970:	4b11      	ldr	r3, [pc, #68]	@ (80059b8 <xTaskIncrementTick+0x16c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005978:	2301      	movs	r3, #1
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e004      	b.n	8005988 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800597e:	4b0f      	ldr	r3, [pc, #60]	@ (80059bc <xTaskIncrementTick+0x170>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	4a0d      	ldr	r2, [pc, #52]	@ (80059bc <xTaskIncrementTick+0x170>)
 8005986:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005988:	697b      	ldr	r3, [r7, #20]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	2000067c 	.word	0x2000067c
 8005998:	20000658 	.word	0x20000658
 800599c:	2000060c 	.word	0x2000060c
 80059a0:	20000610 	.word	0x20000610
 80059a4:	2000066c 	.word	0x2000066c
 80059a8:	20000674 	.word	0x20000674
 80059ac:	2000065c 	.word	0x2000065c
 80059b0:	20000558 	.word	0x20000558
 80059b4:	20000554 	.word	0x20000554
 80059b8:	20000668 	.word	0x20000668
 80059bc:	20000664 	.word	0x20000664

080059c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a70 <vTaskSwitchContext+0xb0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059ce:	4b29      	ldr	r3, [pc, #164]	@ (8005a74 <vTaskSwitchContext+0xb4>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059d4:	e045      	b.n	8005a62 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80059d6:	4b27      	ldr	r3, [pc, #156]	@ (8005a74 <vTaskSwitchContext+0xb4>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059dc:	4b26      	ldr	r3, [pc, #152]	@ (8005a78 <vTaskSwitchContext+0xb8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	fab3 f383 	clz	r3, r3
 80059e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80059ea:	7afb      	ldrb	r3, [r7, #11]
 80059ec:	f1c3 031f 	rsb	r3, r3, #31
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	4922      	ldr	r1, [pc, #136]	@ (8005a7c <vTaskSwitchContext+0xbc>)
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10b      	bne.n	8005a1e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	607b      	str	r3, [r7, #4]
}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	e7fd      	b.n	8005a1a <vTaskSwitchContext+0x5a>
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4a14      	ldr	r2, [pc, #80]	@ (8005a7c <vTaskSwitchContext+0xbc>)
 8005a2a:	4413      	add	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	605a      	str	r2, [r3, #4]
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d104      	bne.n	8005a4e <vTaskSwitchContext+0x8e>
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	605a      	str	r2, [r3, #4]
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4a0a      	ldr	r2, [pc, #40]	@ (8005a80 <vTaskSwitchContext+0xc0>)
 8005a56:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a58:	4b09      	ldr	r3, [pc, #36]	@ (8005a80 <vTaskSwitchContext+0xc0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	334c      	adds	r3, #76	@ 0x4c
 8005a5e:	4a09      	ldr	r2, [pc, #36]	@ (8005a84 <vTaskSwitchContext+0xc4>)
 8005a60:	6013      	str	r3, [r2, #0]
}
 8005a62:	bf00      	nop
 8005a64:	371c      	adds	r7, #28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	2000067c 	.word	0x2000067c
 8005a74:	20000668 	.word	0x20000668
 8005a78:	2000065c 	.word	0x2000065c
 8005a7c:	20000558 	.word	0x20000558
 8005a80:	20000554 	.word	0x20000554
 8005a84:	20000010 	.word	0x20000010

08005a88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a90:	f000 f852 	bl	8005b38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a94:	4b06      	ldr	r3, [pc, #24]	@ (8005ab0 <prvIdleTask+0x28>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d9f9      	bls.n	8005a90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a9c:	4b05      	ldr	r3, [pc, #20]	@ (8005ab4 <prvIdleTask+0x2c>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005aac:	e7f0      	b.n	8005a90 <prvIdleTask+0x8>
 8005aae:	bf00      	nop
 8005ab0:	20000558 	.word	0x20000558
 8005ab4:	e000ed04 	.word	0xe000ed04

08005ab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005abe:	2300      	movs	r3, #0
 8005ac0:	607b      	str	r3, [r7, #4]
 8005ac2:	e00c      	b.n	8005ade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4a12      	ldr	r2, [pc, #72]	@ (8005b18 <prvInitialiseTaskLists+0x60>)
 8005ad0:	4413      	add	r3, r2
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe ffb9 	bl	8004a4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3301      	adds	r3, #1
 8005adc:	607b      	str	r3, [r7, #4]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b06      	cmp	r3, #6
 8005ae2:	d9ef      	bls.n	8005ac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ae4:	480d      	ldr	r0, [pc, #52]	@ (8005b1c <prvInitialiseTaskLists+0x64>)
 8005ae6:	f7fe ffb0 	bl	8004a4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005aea:	480d      	ldr	r0, [pc, #52]	@ (8005b20 <prvInitialiseTaskLists+0x68>)
 8005aec:	f7fe ffad 	bl	8004a4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005af0:	480c      	ldr	r0, [pc, #48]	@ (8005b24 <prvInitialiseTaskLists+0x6c>)
 8005af2:	f7fe ffaa 	bl	8004a4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005af6:	480c      	ldr	r0, [pc, #48]	@ (8005b28 <prvInitialiseTaskLists+0x70>)
 8005af8:	f7fe ffa7 	bl	8004a4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005afc:	480b      	ldr	r0, [pc, #44]	@ (8005b2c <prvInitialiseTaskLists+0x74>)
 8005afe:	f7fe ffa4 	bl	8004a4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b02:	4b0b      	ldr	r3, [pc, #44]	@ (8005b30 <prvInitialiseTaskLists+0x78>)
 8005b04:	4a05      	ldr	r2, [pc, #20]	@ (8005b1c <prvInitialiseTaskLists+0x64>)
 8005b06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b08:	4b0a      	ldr	r3, [pc, #40]	@ (8005b34 <prvInitialiseTaskLists+0x7c>)
 8005b0a:	4a05      	ldr	r2, [pc, #20]	@ (8005b20 <prvInitialiseTaskLists+0x68>)
 8005b0c:	601a      	str	r2, [r3, #0]
}
 8005b0e:	bf00      	nop
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000558 	.word	0x20000558
 8005b1c:	200005e4 	.word	0x200005e4
 8005b20:	200005f8 	.word	0x200005f8
 8005b24:	20000614 	.word	0x20000614
 8005b28:	20000628 	.word	0x20000628
 8005b2c:	20000640 	.word	0x20000640
 8005b30:	2000060c 	.word	0x2000060c
 8005b34:	20000610 	.word	0x20000610

08005b38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b3e:	e019      	b.n	8005b74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b40:	f000 fc52 	bl	80063e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b44:	4b10      	ldr	r3, [pc, #64]	@ (8005b88 <prvCheckTasksWaitingTermination+0x50>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff f804 	bl	8004b5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b56:	4b0d      	ldr	r3, [pc, #52]	@ (8005b8c <prvCheckTasksWaitingTermination+0x54>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8005b8c <prvCheckTasksWaitingTermination+0x54>)
 8005b5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b60:	4b0b      	ldr	r3, [pc, #44]	@ (8005b90 <prvCheckTasksWaitingTermination+0x58>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	4a0a      	ldr	r2, [pc, #40]	@ (8005b90 <prvCheckTasksWaitingTermination+0x58>)
 8005b68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b6a:	f000 fc6f 	bl	800644c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f810 	bl	8005b94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b74:	4b06      	ldr	r3, [pc, #24]	@ (8005b90 <prvCheckTasksWaitingTermination+0x58>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e1      	bne.n	8005b40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000628 	.word	0x20000628
 8005b8c:	20000654 	.word	0x20000654
 8005b90:	2000063c 	.word	0x2000063c

08005b94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	334c      	adds	r3, #76	@ 0x4c
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 ff5b 	bl	8006a5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d108      	bne.n	8005bc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fe07 	bl	80067c8 <vPortFree>
				vPortFree( pxTCB );
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fe04 	bl	80067c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bc0:	e019      	b.n	8005bf6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d103      	bne.n	8005bd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fdfb 	bl	80067c8 <vPortFree>
	}
 8005bd2:	e010      	b.n	8005bf6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d00b      	beq.n	8005bf6 <prvDeleteTCB+0x62>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	60fb      	str	r3, [r7, #12]
}
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	e7fd      	b.n	8005bf2 <prvDeleteTCB+0x5e>
	}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c06:	4b0c      	ldr	r3, [pc, #48]	@ (8005c38 <prvResetNextTaskUnblockTime+0x38>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d104      	bne.n	8005c1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c10:	4b0a      	ldr	r3, [pc, #40]	@ (8005c3c <prvResetNextTaskUnblockTime+0x3c>)
 8005c12:	f04f 32ff 	mov.w	r2, #4294967295
 8005c16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c18:	e008      	b.n	8005c2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1a:	4b07      	ldr	r3, [pc, #28]	@ (8005c38 <prvResetNextTaskUnblockTime+0x38>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4a04      	ldr	r2, [pc, #16]	@ (8005c3c <prvResetNextTaskUnblockTime+0x3c>)
 8005c2a:	6013      	str	r3, [r2, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	2000060c 	.word	0x2000060c
 8005c3c:	20000674 	.word	0x20000674

08005c40 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005c46:	4b05      	ldr	r3, [pc, #20]	@ (8005c5c <xTaskGetCurrentTaskHandle+0x1c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005c4c:	687b      	ldr	r3, [r7, #4]
	}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20000554 	.word	0x20000554

08005c60 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005c6e:	f000 fbbb 	bl	80063e8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005c72:	4b29      	ldr	r3, [pc, #164]	@ (8005d18 <xTaskNotifyWait+0xb8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d01c      	beq.n	8005cba <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005c80:	4b25      	ldr	r3, [pc, #148]	@ (8005d18 <xTaskNotifyWait+0xb8>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	43d2      	mvns	r2, r2
 8005c8c:	400a      	ands	r2, r1
 8005c8e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005c92:	4b21      	ldr	r3, [pc, #132]	@ (8005d18 <xTaskNotifyWait+0xb8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00b      	beq.n	8005cba <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	6838      	ldr	r0, [r7, #0]
 8005ca6:	f000 fa09 	bl	80060bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005caa:	4b1c      	ldr	r3, [pc, #112]	@ (8005d1c <xTaskNotifyWait+0xbc>)
 8005cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005cba:	f000 fbc7 	bl	800644c <vPortExitCritical>

		taskENTER_CRITICAL();
 8005cbe:	f000 fb93 	bl	80063e8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005cc8:	4b13      	ldr	r3, [pc, #76]	@ (8005d18 <xTaskNotifyWait+0xb8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005cd4:	4b10      	ldr	r3, [pc, #64]	@ (8005d18 <xTaskNotifyWait+0xb8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d002      	beq.n	8005ce8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	e00a      	b.n	8005cfe <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d18 <xTaskNotifyWait+0xb8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	43d2      	mvns	r2, r2
 8005cf4:	400a      	ands	r2, r1
 8005cf6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cfe:	4b06      	ldr	r3, [pc, #24]	@ (8005d18 <xTaskNotifyWait+0xb8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8005d08:	f000 fba0 	bl	800644c <vPortExitCritical>

		return xReturn;
 8005d0c:	697b      	ldr	r3, [r7, #20]
	}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20000554 	.word	0x20000554
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	@ 0x28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005d30:	2301      	movs	r3, #1
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10b      	bne.n	8005d52 <xTaskGenericNotify+0x32>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	61bb      	str	r3, [r7, #24]
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	e7fd      	b.n	8005d4e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005d56:	f000 fb47 	bl	80063e8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d004      	beq.n	8005d6a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005d70:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d82e      	bhi.n	8005dde <xTaskGenericNotify+0xbe>
 8005d80:	a201      	add	r2, pc, #4	@ (adr r2, 8005d88 <xTaskGenericNotify+0x68>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005e03 	.word	0x08005e03
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005daf 	.word	0x08005daf
 8005d94:	08005dbf 	.word	0x08005dbf
 8005d98:	08005dc9 	.word	0x08005dc9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8005dac:	e02c      	b.n	8005e08 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8005dbc:	e024      	b.n	8005e08 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8005dc6:	e01f      	b.n	8005e08 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005dc8:	7ffb      	ldrb	r3, [r7, #31]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d004      	beq.n	8005dd8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005dd6:	e017      	b.n	8005e08 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8005ddc:	e014      	b.n	8005e08 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de8:	d00d      	beq.n	8005e06 <xTaskGenericNotify+0xe6>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	617b      	str	r3, [r7, #20]
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	e7fd      	b.n	8005dfe <xTaskGenericNotify+0xde>
					break;
 8005e02:	bf00      	nop
 8005e04:	e000      	b.n	8005e08 <xTaskGenericNotify+0xe8>

					break;
 8005e06:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005e08:	7ffb      	ldrb	r3, [r7, #31]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d13a      	bne.n	8005e84 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	3304      	adds	r3, #4
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe fea3 	bl	8004b5e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	409a      	lsls	r2, r3
 8005e20:	4b1c      	ldr	r3, [pc, #112]	@ (8005e94 <xTaskGenericNotify+0x174>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	4a1b      	ldr	r2, [pc, #108]	@ (8005e94 <xTaskGenericNotify+0x174>)
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e2e:	4613      	mov	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4a18      	ldr	r2, [pc, #96]	@ (8005e98 <xTaskGenericNotify+0x178>)
 8005e38:	441a      	add	r2, r3
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f7fe fe2f 	bl	8004aa4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00b      	beq.n	8005e66 <xTaskGenericNotify+0x146>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	613b      	str	r3, [r7, #16]
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	e7fd      	b.n	8005e62 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e9c <xTaskGenericNotify+0x17c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d907      	bls.n	8005e84 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005e74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea0 <xTaskGenericNotify+0x180>)
 8005e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005e84:	f000 fae2 	bl	800644c <vPortExitCritical>

		return xReturn;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3728      	adds	r7, #40	@ 0x28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	2000065c 	.word	0x2000065c
 8005e98:	20000558 	.word	0x20000558
 8005e9c:	20000554 	.word	0x20000554
 8005ea0:	e000ed04 	.word	0xe000ed04

08005ea4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08e      	sub	sp, #56	@ 0x38
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10b      	bne.n	8005ed6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	e7fd      	b.n	8005ed2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ed6:	f000 fb67 	bl	80065a8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8005ede:	f3ef 8211 	mrs	r2, BASEPRI
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	623a      	str	r2, [r7, #32]
 8005ef4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005ef6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f02:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8005f10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d82e      	bhi.n	8005f80 <xTaskGenericNotifyFromISR+0xdc>
 8005f22:	a201      	add	r2, pc, #4	@ (adr r2, 8005f28 <xTaskGenericNotifyFromISR+0x84>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005fa5 	.word	0x08005fa5
 8005f2c:	08005f3d 	.word	0x08005f3d
 8005f30:	08005f4f 	.word	0x08005f4f
 8005f34:	08005f5f 	.word	0x08005f5f
 8005f38:	08005f69 	.word	0x08005f69
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f48:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8005f4c:	e02d      	b.n	8005faa <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f58:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8005f5c:	e025      	b.n	8005faa <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8005f66:	e020      	b.n	8005faa <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005f68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d004      	beq.n	8005f7a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005f78:	e017      	b.n	8005faa <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8005f7e:	e014      	b.n	8005faa <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8a:	d00d      	beq.n	8005fa8 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	61bb      	str	r3, [r7, #24]
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	e7fd      	b.n	8005fa0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8005fa4:	bf00      	nop
 8005fa6:	e000      	b.n	8005faa <xTaskGenericNotifyFromISR+0x106>
					break;
 8005fa8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005faa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d146      	bne.n	8006040 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00b      	beq.n	8005fd2 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	617b      	str	r3, [r7, #20]
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	e7fd      	b.n	8005fce <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd2:	4b21      	ldr	r3, [pc, #132]	@ (8006058 <xTaskGenericNotifyFromISR+0x1b4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d11c      	bne.n	8006014 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fdbd 	bl	8004b5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe8:	2201      	movs	r2, #1
 8005fea:	409a      	lsls	r2, r3
 8005fec:	4b1b      	ldr	r3, [pc, #108]	@ (800605c <xTaskGenericNotifyFromISR+0x1b8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	4a1a      	ldr	r2, [pc, #104]	@ (800605c <xTaskGenericNotifyFromISR+0x1b8>)
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4a17      	ldr	r2, [pc, #92]	@ (8006060 <xTaskGenericNotifyFromISR+0x1bc>)
 8006004:	441a      	add	r2, r3
 8006006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006008:	3304      	adds	r3, #4
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	f7fe fd49 	bl	8004aa4 <vListInsertEnd>
 8006012:	e005      	b.n	8006020 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006016:	3318      	adds	r3, #24
 8006018:	4619      	mov	r1, r3
 800601a:	4812      	ldr	r0, [pc, #72]	@ (8006064 <xTaskGenericNotifyFromISR+0x1c0>)
 800601c:	f7fe fd42 	bl	8004aa4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006024:	4b10      	ldr	r3, [pc, #64]	@ (8006068 <xTaskGenericNotifyFromISR+0x1c4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602a:	429a      	cmp	r2, r3
 800602c:	d908      	bls.n	8006040 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800602e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800603a:	4b0c      	ldr	r3, [pc, #48]	@ (800606c <xTaskGenericNotifyFromISR+0x1c8>)
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006042:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f383 8811 	msr	BASEPRI, r3
}
 800604a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800604c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800604e:	4618      	mov	r0, r3
 8006050:	3738      	adds	r7, #56	@ 0x38
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	2000067c 	.word	0x2000067c
 800605c:	2000065c 	.word	0x2000065c
 8006060:	20000558 	.word	0x20000558
 8006064:	20000614 	.word	0x20000614
 8006068:	20000554 	.word	0x20000554
 800606c:	20000668 	.word	0x20000668

08006070 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d102      	bne.n	8006084 <xTaskNotifyStateClear+0x14>
 800607e:	4b0e      	ldr	r3, [pc, #56]	@ (80060b8 <xTaskNotifyStateClear+0x48>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	e000      	b.n	8006086 <xTaskNotifyStateClear+0x16>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8006088:	f000 f9ae 	bl	80063e8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d106      	bne.n	80060a6 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				xReturn = pdPASS;
 80060a0:	2301      	movs	r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e001      	b.n	80060aa <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80060aa:	f000 f9cf 	bl	800644c <vPortExitCritical>

		return xReturn;
 80060ae:	68fb      	ldr	r3, [r7, #12]
	}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000554 	.word	0x20000554

080060bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060c6:	4b29      	ldr	r3, [pc, #164]	@ (800616c <prvAddCurrentTaskToDelayedList+0xb0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060cc:	4b28      	ldr	r3, [pc, #160]	@ (8006170 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fe fd43 	bl	8004b5e <uxListRemove>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10b      	bne.n	80060f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80060de:	4b24      	ldr	r3, [pc, #144]	@ (8006170 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e4:	2201      	movs	r2, #1
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	43da      	mvns	r2, r3
 80060ec:	4b21      	ldr	r3, [pc, #132]	@ (8006174 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4013      	ands	r3, r2
 80060f2:	4a20      	ldr	r2, [pc, #128]	@ (8006174 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d10a      	bne.n	8006114 <prvAddCurrentTaskToDelayedList+0x58>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d007      	beq.n	8006114 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006104:	4b1a      	ldr	r3, [pc, #104]	@ (8006170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3304      	adds	r3, #4
 800610a:	4619      	mov	r1, r3
 800610c:	481a      	ldr	r0, [pc, #104]	@ (8006178 <prvAddCurrentTaskToDelayedList+0xbc>)
 800610e:	f7fe fcc9 	bl	8004aa4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006112:	e026      	b.n	8006162 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4413      	add	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800611c:	4b14      	ldr	r3, [pc, #80]	@ (8006170 <prvAddCurrentTaskToDelayedList+0xb4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	429a      	cmp	r2, r3
 800612a:	d209      	bcs.n	8006140 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800612c:	4b13      	ldr	r3, [pc, #76]	@ (800617c <prvAddCurrentTaskToDelayedList+0xc0>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	4b0f      	ldr	r3, [pc, #60]	@ (8006170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3304      	adds	r3, #4
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f7fe fcd7 	bl	8004aec <vListInsert>
}
 800613e:	e010      	b.n	8006162 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006140:	4b0f      	ldr	r3, [pc, #60]	@ (8006180 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	4b0a      	ldr	r3, [pc, #40]	@ (8006170 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3304      	adds	r3, #4
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7fe fccd 	bl	8004aec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006152:	4b0c      	ldr	r3, [pc, #48]	@ (8006184 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	429a      	cmp	r2, r3
 800615a:	d202      	bcs.n	8006162 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800615c:	4a09      	ldr	r2, [pc, #36]	@ (8006184 <prvAddCurrentTaskToDelayedList+0xc8>)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6013      	str	r3, [r2, #0]
}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000658 	.word	0x20000658
 8006170:	20000554 	.word	0x20000554
 8006174:	2000065c 	.word	0x2000065c
 8006178:	20000640 	.word	0x20000640
 800617c:	20000610 	.word	0x20000610
 8006180:	2000060c 	.word	0x2000060c
 8006184:	20000674 	.word	0x20000674

08006188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3b04      	subs	r3, #4
 8006198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3b04      	subs	r3, #4
 80061a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3b04      	subs	r3, #4
 80061b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061b8:	4a0c      	ldr	r2, [pc, #48]	@ (80061ec <pxPortInitialiseStack+0x64>)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	3b14      	subs	r3, #20
 80061c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3b04      	subs	r3, #4
 80061ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f06f 0202 	mvn.w	r2, #2
 80061d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3b20      	subs	r3, #32
 80061dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061de:	68fb      	ldr	r3, [r7, #12]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	080061f1 	.word	0x080061f1

080061f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061fa:	4b13      	ldr	r3, [pc, #76]	@ (8006248 <prvTaskExitError+0x58>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d00b      	beq.n	800621c <prvTaskExitError+0x2c>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	60fb      	str	r3, [r7, #12]
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	e7fd      	b.n	8006218 <prvTaskExitError+0x28>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	60bb      	str	r3, [r7, #8]
}
 800622e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006230:	bf00      	nop
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0fc      	beq.n	8006232 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	2000000c 	.word	0x2000000c
 800624c:	00000000 	.word	0x00000000

08006250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006250:	4b07      	ldr	r3, [pc, #28]	@ (8006270 <pxCurrentTCBConst2>)
 8006252:	6819      	ldr	r1, [r3, #0]
 8006254:	6808      	ldr	r0, [r1, #0]
 8006256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625a:	f380 8809 	msr	PSP, r0
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f04f 0000 	mov.w	r0, #0
 8006266:	f380 8811 	msr	BASEPRI, r0
 800626a:	4770      	bx	lr
 800626c:	f3af 8000 	nop.w

08006270 <pxCurrentTCBConst2>:
 8006270:	20000554 	.word	0x20000554
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop

08006278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006278:	4808      	ldr	r0, [pc, #32]	@ (800629c <prvPortStartFirstTask+0x24>)
 800627a:	6800      	ldr	r0, [r0, #0]
 800627c:	6800      	ldr	r0, [r0, #0]
 800627e:	f380 8808 	msr	MSP, r0
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8814 	msr	CONTROL, r0
 800628a:	b662      	cpsie	i
 800628c:	b661      	cpsie	f
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	df00      	svc	0
 8006298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800629a:	bf00      	nop
 800629c:	e000ed08 	.word	0xe000ed08

080062a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062a6:	4b47      	ldr	r3, [pc, #284]	@ (80063c4 <xPortStartScheduler+0x124>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a47      	ldr	r2, [pc, #284]	@ (80063c8 <xPortStartScheduler+0x128>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d10b      	bne.n	80062c8 <xPortStartScheduler+0x28>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	60fb      	str	r3, [r7, #12]
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062c8:	4b3e      	ldr	r3, [pc, #248]	@ (80063c4 <xPortStartScheduler+0x124>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3f      	ldr	r2, [pc, #252]	@ (80063cc <xPortStartScheduler+0x12c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d10b      	bne.n	80062ea <xPortStartScheduler+0x4a>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	613b      	str	r3, [r7, #16]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062ea:	4b39      	ldr	r3, [pc, #228]	@ (80063d0 <xPortStartScheduler+0x130>)
 80062ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	22ff      	movs	r2, #255	@ 0xff
 80062fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800630c:	b2da      	uxtb	r2, r3
 800630e:	4b31      	ldr	r3, [pc, #196]	@ (80063d4 <xPortStartScheduler+0x134>)
 8006310:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006312:	4b31      	ldr	r3, [pc, #196]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006314:	2207      	movs	r2, #7
 8006316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006318:	e009      	b.n	800632e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800631a:	4b2f      	ldr	r3, [pc, #188]	@ (80063d8 <xPortStartScheduler+0x138>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3b01      	subs	r3, #1
 8006320:	4a2d      	ldr	r2, [pc, #180]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	b2db      	uxtb	r3, r3
 800632c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006336:	2b80      	cmp	r3, #128	@ 0x80
 8006338:	d0ef      	beq.n	800631a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800633a:	4b27      	ldr	r3, [pc, #156]	@ (80063d8 <xPortStartScheduler+0x138>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f1c3 0307 	rsb	r3, r3, #7
 8006342:	2b04      	cmp	r3, #4
 8006344:	d00b      	beq.n	800635e <xPortStartScheduler+0xbe>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	60bb      	str	r3, [r7, #8]
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	e7fd      	b.n	800635a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800635e:	4b1e      	ldr	r3, [pc, #120]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	4a1c      	ldr	r2, [pc, #112]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006368:	4b1b      	ldr	r3, [pc, #108]	@ (80063d8 <xPortStartScheduler+0x138>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006370:	4a19      	ldr	r2, [pc, #100]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800637c:	4b17      	ldr	r3, [pc, #92]	@ (80063dc <xPortStartScheduler+0x13c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a16      	ldr	r2, [pc, #88]	@ (80063dc <xPortStartScheduler+0x13c>)
 8006382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006388:	4b14      	ldr	r3, [pc, #80]	@ (80063dc <xPortStartScheduler+0x13c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a13      	ldr	r2, [pc, #76]	@ (80063dc <xPortStartScheduler+0x13c>)
 800638e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006394:	f000 f8da 	bl	800654c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006398:	4b11      	ldr	r3, [pc, #68]	@ (80063e0 <xPortStartScheduler+0x140>)
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800639e:	f000 f8f9 	bl	8006594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063a2:	4b10      	ldr	r3, [pc, #64]	@ (80063e4 <xPortStartScheduler+0x144>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a0f      	ldr	r2, [pc, #60]	@ (80063e4 <xPortStartScheduler+0x144>)
 80063a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80063ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063ae:	f7ff ff63 	bl	8006278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063b2:	f7ff fb05 	bl	80059c0 <vTaskSwitchContext>
	prvTaskExitError();
 80063b6:	f7ff ff1b 	bl	80061f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	e000ed00 	.word	0xe000ed00
 80063c8:	410fc271 	.word	0x410fc271
 80063cc:	410fc270 	.word	0x410fc270
 80063d0:	e000e400 	.word	0xe000e400
 80063d4:	20000680 	.word	0x20000680
 80063d8:	20000684 	.word	0x20000684
 80063dc:	e000ed20 	.word	0xe000ed20
 80063e0:	2000000c 	.word	0x2000000c
 80063e4:	e000ef34 	.word	0xe000ef34

080063e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
}
 8006400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006402:	4b10      	ldr	r3, [pc, #64]	@ (8006444 <vPortEnterCritical+0x5c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3301      	adds	r3, #1
 8006408:	4a0e      	ldr	r2, [pc, #56]	@ (8006444 <vPortEnterCritical+0x5c>)
 800640a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800640c:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <vPortEnterCritical+0x5c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d110      	bne.n	8006436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006414:	4b0c      	ldr	r3, [pc, #48]	@ (8006448 <vPortEnterCritical+0x60>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <vPortEnterCritical+0x4e>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	603b      	str	r3, [r7, #0]
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	e7fd      	b.n	8006432 <vPortEnterCritical+0x4a>
	}
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	2000000c 	.word	0x2000000c
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006452:	4b12      	ldr	r3, [pc, #72]	@ (800649c <vPortExitCritical+0x50>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <vPortExitCritical+0x26>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	607b      	str	r3, [r7, #4]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006472:	4b0a      	ldr	r3, [pc, #40]	@ (800649c <vPortExitCritical+0x50>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3b01      	subs	r3, #1
 8006478:	4a08      	ldr	r2, [pc, #32]	@ (800649c <vPortExitCritical+0x50>)
 800647a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800647c:	4b07      	ldr	r3, [pc, #28]	@ (800649c <vPortExitCritical+0x50>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <vPortExitCritical+0x44>
 8006484:	2300      	movs	r3, #0
 8006486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f383 8811 	msr	BASEPRI, r3
}
 800648e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	2000000c 	.word	0x2000000c

080064a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064a0:	f3ef 8009 	mrs	r0, PSP
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	4b15      	ldr	r3, [pc, #84]	@ (8006500 <pxCurrentTCBConst>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	f01e 0f10 	tst.w	lr, #16
 80064b0:	bf08      	it	eq
 80064b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ba:	6010      	str	r0, [r2, #0]
 80064bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064c4:	f380 8811 	msr	BASEPRI, r0
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f7ff fa76 	bl	80059c0 <vTaskSwitchContext>
 80064d4:	f04f 0000 	mov.w	r0, #0
 80064d8:	f380 8811 	msr	BASEPRI, r0
 80064dc:	bc09      	pop	{r0, r3}
 80064de:	6819      	ldr	r1, [r3, #0]
 80064e0:	6808      	ldr	r0, [r1, #0]
 80064e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e6:	f01e 0f10 	tst.w	lr, #16
 80064ea:	bf08      	it	eq
 80064ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064f0:	f380 8809 	msr	PSP, r0
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	f3af 8000 	nop.w

08006500 <pxCurrentTCBConst>:
 8006500:	20000554 	.word	0x20000554
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	607b      	str	r3, [r7, #4]
}
 8006520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006522:	f7ff f993 	bl	800584c <xTaskIncrementTick>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800652c:	4b06      	ldr	r3, [pc, #24]	@ (8006548 <SysTick_Handler+0x40>)
 800652e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f383 8811 	msr	BASEPRI, r3
}
 800653e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006550:	4b0b      	ldr	r3, [pc, #44]	@ (8006580 <vPortSetupTimerInterrupt+0x34>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006556:	4b0b      	ldr	r3, [pc, #44]	@ (8006584 <vPortSetupTimerInterrupt+0x38>)
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800655c:	4b0a      	ldr	r3, [pc, #40]	@ (8006588 <vPortSetupTimerInterrupt+0x3c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0a      	ldr	r2, [pc, #40]	@ (800658c <vPortSetupTimerInterrupt+0x40>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	099b      	lsrs	r3, r3, #6
 8006568:	4a09      	ldr	r2, [pc, #36]	@ (8006590 <vPortSetupTimerInterrupt+0x44>)
 800656a:	3b01      	subs	r3, #1
 800656c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800656e:	4b04      	ldr	r3, [pc, #16]	@ (8006580 <vPortSetupTimerInterrupt+0x34>)
 8006570:	2207      	movs	r2, #7
 8006572:	601a      	str	r2, [r3, #0]
}
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	e000e010 	.word	0xe000e010
 8006584:	e000e018 	.word	0xe000e018
 8006588:	20000000 	.word	0x20000000
 800658c:	10624dd3 	.word	0x10624dd3
 8006590:	e000e014 	.word	0xe000e014

08006594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80065a4 <vPortEnableVFP+0x10>
 8006598:	6801      	ldr	r1, [r0, #0]
 800659a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800659e:	6001      	str	r1, [r0, #0]
 80065a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065a2:	bf00      	nop
 80065a4:	e000ed88 	.word	0xe000ed88

080065a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ae:	f3ef 8305 	mrs	r3, IPSR
 80065b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b0f      	cmp	r3, #15
 80065b8:	d915      	bls.n	80065e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065ba:	4a18      	ldr	r2, [pc, #96]	@ (800661c <vPortValidateInterruptPriority+0x74>)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065c4:	4b16      	ldr	r3, [pc, #88]	@ (8006620 <vPortValidateInterruptPriority+0x78>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	7afa      	ldrb	r2, [r7, #11]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d20b      	bcs.n	80065e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	607b      	str	r3, [r7, #4]
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	e7fd      	b.n	80065e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006624 <vPortValidateInterruptPriority+0x7c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80065ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006628 <vPortValidateInterruptPriority+0x80>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d90b      	bls.n	800660e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	603b      	str	r3, [r7, #0]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <vPortValidateInterruptPriority+0x62>
	}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	e000e3f0 	.word	0xe000e3f0
 8006620:	20000680 	.word	0x20000680
 8006624:	e000ed0c 	.word	0xe000ed0c
 8006628:	20000684 	.word	0x20000684

0800662c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08a      	sub	sp, #40	@ 0x28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006634:	2300      	movs	r3, #0
 8006636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006638:	f7ff f85c 	bl	80056f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800663c:	4b5c      	ldr	r3, [pc, #368]	@ (80067b0 <pvPortMalloc+0x184>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006644:	f000 f924 	bl	8006890 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006648:	4b5a      	ldr	r3, [pc, #360]	@ (80067b4 <pvPortMalloc+0x188>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 8095 	bne.w	8006780 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01e      	beq.n	800669a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800665c:	2208      	movs	r2, #8
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4413      	add	r3, r2
 8006662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	2b00      	cmp	r3, #0
 800666c:	d015      	beq.n	800669a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f023 0307 	bic.w	r3, r3, #7
 8006674:	3308      	adds	r3, #8
 8006676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <pvPortMalloc+0x6e>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	617b      	str	r3, [r7, #20]
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d06f      	beq.n	8006780 <pvPortMalloc+0x154>
 80066a0:	4b45      	ldr	r3, [pc, #276]	@ (80067b8 <pvPortMalloc+0x18c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d86a      	bhi.n	8006780 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066aa:	4b44      	ldr	r3, [pc, #272]	@ (80067bc <pvPortMalloc+0x190>)
 80066ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066ae:	4b43      	ldr	r3, [pc, #268]	@ (80067bc <pvPortMalloc+0x190>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066b4:	e004      	b.n	80066c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d903      	bls.n	80066d2 <pvPortMalloc+0xa6>
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1f1      	bne.n	80066b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066d2:	4b37      	ldr	r3, [pc, #220]	@ (80067b0 <pvPortMalloc+0x184>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066d8:	429a      	cmp	r2, r3
 80066da:	d051      	beq.n	8006780 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2208      	movs	r2, #8
 80066e2:	4413      	add	r3, r2
 80066e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	1ad2      	subs	r2, r2, r3
 80066f6:	2308      	movs	r3, #8
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d920      	bls.n	8006740 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4413      	add	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <pvPortMalloc+0xfc>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	613b      	str	r3, [r7, #16]
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	e7fd      	b.n	8006724 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	1ad2      	subs	r2, r2, r3
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800673a:	69b8      	ldr	r0, [r7, #24]
 800673c:	f000 f90a 	bl	8006954 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006740:	4b1d      	ldr	r3, [pc, #116]	@ (80067b8 <pvPortMalloc+0x18c>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	4a1b      	ldr	r2, [pc, #108]	@ (80067b8 <pvPortMalloc+0x18c>)
 800674c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800674e:	4b1a      	ldr	r3, [pc, #104]	@ (80067b8 <pvPortMalloc+0x18c>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b1b      	ldr	r3, [pc, #108]	@ (80067c0 <pvPortMalloc+0x194>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d203      	bcs.n	8006762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800675a:	4b17      	ldr	r3, [pc, #92]	@ (80067b8 <pvPortMalloc+0x18c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a18      	ldr	r2, [pc, #96]	@ (80067c0 <pvPortMalloc+0x194>)
 8006760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	4b13      	ldr	r3, [pc, #76]	@ (80067b4 <pvPortMalloc+0x188>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	431a      	orrs	r2, r3
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006776:	4b13      	ldr	r3, [pc, #76]	@ (80067c4 <pvPortMalloc+0x198>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3301      	adds	r3, #1
 800677c:	4a11      	ldr	r2, [pc, #68]	@ (80067c4 <pvPortMalloc+0x198>)
 800677e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006780:	f7fe ffc6 	bl	8005710 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <pvPortMalloc+0x17a>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	60fb      	str	r3, [r7, #12]
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	e7fd      	b.n	80067a2 <pvPortMalloc+0x176>
	return pvReturn;
 80067a6:	69fb      	ldr	r3, [r7, #28]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3728      	adds	r7, #40	@ 0x28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	200054b0 	.word	0x200054b0
 80067b4:	200054c4 	.word	0x200054c4
 80067b8:	200054b4 	.word	0x200054b4
 80067bc:	200054a8 	.word	0x200054a8
 80067c0:	200054b8 	.word	0x200054b8
 80067c4:	200054bc 	.word	0x200054bc

080067c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d04f      	beq.n	800687a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067da:	2308      	movs	r3, #8
 80067dc:	425b      	negs	r3, r3
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4413      	add	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	4b25      	ldr	r3, [pc, #148]	@ (8006884 <vPortFree+0xbc>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <vPortFree+0x46>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	60fb      	str	r3, [r7, #12]
}
 8006808:	bf00      	nop
 800680a:	bf00      	nop
 800680c:	e7fd      	b.n	800680a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <vPortFree+0x66>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	60bb      	str	r3, [r7, #8]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	4b14      	ldr	r3, [pc, #80]	@ (8006884 <vPortFree+0xbc>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4013      	ands	r3, r2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01e      	beq.n	800687a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11a      	bne.n	800687a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	4b0e      	ldr	r3, [pc, #56]	@ (8006884 <vPortFree+0xbc>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	43db      	mvns	r3, r3
 800684e:	401a      	ands	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006854:	f7fe ff4e 	bl	80056f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	4b0a      	ldr	r3, [pc, #40]	@ (8006888 <vPortFree+0xc0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4413      	add	r3, r2
 8006862:	4a09      	ldr	r2, [pc, #36]	@ (8006888 <vPortFree+0xc0>)
 8006864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006866:	6938      	ldr	r0, [r7, #16]
 8006868:	f000 f874 	bl	8006954 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800686c:	4b07      	ldr	r3, [pc, #28]	@ (800688c <vPortFree+0xc4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	4a06      	ldr	r2, [pc, #24]	@ (800688c <vPortFree+0xc4>)
 8006874:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006876:	f7fe ff4b 	bl	8005710 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800687a:	bf00      	nop
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	200054c4 	.word	0x200054c4
 8006888:	200054b4 	.word	0x200054b4
 800688c:	200054c0 	.word	0x200054c0

08006890 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006896:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800689a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800689c:	4b27      	ldr	r3, [pc, #156]	@ (800693c <prvHeapInit+0xac>)
 800689e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00c      	beq.n	80068c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3307      	adds	r3, #7
 80068ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0307 	bic.w	r3, r3, #7
 80068b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	4a1f      	ldr	r2, [pc, #124]	@ (800693c <prvHeapInit+0xac>)
 80068c0:	4413      	add	r3, r2
 80068c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006940 <prvHeapInit+0xb0>)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006940 <prvHeapInit+0xb0>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	4413      	add	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068dc:	2208      	movs	r2, #8
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	1a9b      	subs	r3, r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4a15      	ldr	r2, [pc, #84]	@ (8006944 <prvHeapInit+0xb4>)
 80068f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068f2:	4b14      	ldr	r3, [pc, #80]	@ (8006944 <prvHeapInit+0xb4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2200      	movs	r2, #0
 80068f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068fa:	4b12      	ldr	r3, [pc, #72]	@ (8006944 <prvHeapInit+0xb4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	1ad2      	subs	r2, r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006910:	4b0c      	ldr	r3, [pc, #48]	@ (8006944 <prvHeapInit+0xb4>)
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	4a0a      	ldr	r2, [pc, #40]	@ (8006948 <prvHeapInit+0xb8>)
 800691e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4a09      	ldr	r2, [pc, #36]	@ (800694c <prvHeapInit+0xbc>)
 8006926:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006928:	4b09      	ldr	r3, [pc, #36]	@ (8006950 <prvHeapInit+0xc0>)
 800692a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800692e:	601a      	str	r2, [r3, #0]
}
 8006930:	bf00      	nop
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	20000688 	.word	0x20000688
 8006940:	200054a8 	.word	0x200054a8
 8006944:	200054b0 	.word	0x200054b0
 8006948:	200054b8 	.word	0x200054b8
 800694c:	200054b4 	.word	0x200054b4
 8006950:	200054c4 	.word	0x200054c4

08006954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800695c:	4b28      	ldr	r3, [pc, #160]	@ (8006a00 <prvInsertBlockIntoFreeList+0xac>)
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	e002      	b.n	8006968 <prvInsertBlockIntoFreeList+0x14>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	429a      	cmp	r2, r3
 8006970:	d8f7      	bhi.n	8006962 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	4413      	add	r3, r2
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	429a      	cmp	r2, r3
 8006982:	d108      	bne.n	8006996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	441a      	add	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	441a      	add	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d118      	bne.n	80069dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	4b15      	ldr	r3, [pc, #84]	@ (8006a04 <prvInsertBlockIntoFreeList+0xb0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d00d      	beq.n	80069d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	441a      	add	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e008      	b.n	80069e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a04 <prvInsertBlockIntoFreeList+0xb0>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	e003      	b.n	80069e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d002      	beq.n	80069f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	200054a8 	.word	0x200054a8
 8006a04:	200054b0 	.word	0x200054b0

08006a08 <siprintf>:
 8006a08:	b40e      	push	{r1, r2, r3}
 8006a0a:	b510      	push	{r4, lr}
 8006a0c:	b09d      	sub	sp, #116	@ 0x74
 8006a0e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006a10:	9002      	str	r0, [sp, #8]
 8006a12:	9006      	str	r0, [sp, #24]
 8006a14:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a18:	480a      	ldr	r0, [pc, #40]	@ (8006a44 <siprintf+0x3c>)
 8006a1a:	9107      	str	r1, [sp, #28]
 8006a1c:	9104      	str	r1, [sp, #16]
 8006a1e:	490a      	ldr	r1, [pc, #40]	@ (8006a48 <siprintf+0x40>)
 8006a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a24:	9105      	str	r1, [sp, #20]
 8006a26:	2400      	movs	r4, #0
 8006a28:	a902      	add	r1, sp, #8
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	9301      	str	r3, [sp, #4]
 8006a2e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006a30:	f000 fa00 	bl	8006e34 <_svfiprintf_r>
 8006a34:	9b02      	ldr	r3, [sp, #8]
 8006a36:	701c      	strb	r4, [r3, #0]
 8006a38:	b01d      	add	sp, #116	@ 0x74
 8006a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a3e:	b003      	add	sp, #12
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000010 	.word	0x20000010
 8006a48:	ffff0208 	.word	0xffff0208

08006a4c <memset>:
 8006a4c:	4402      	add	r2, r0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d100      	bne.n	8006a56 <memset+0xa>
 8006a54:	4770      	bx	lr
 8006a56:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5a:	e7f9      	b.n	8006a50 <memset+0x4>

08006a5c <_reclaim_reent>:
 8006a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8006b14 <_reclaim_reent+0xb8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4283      	cmp	r3, r0
 8006a62:	b570      	push	{r4, r5, r6, lr}
 8006a64:	4604      	mov	r4, r0
 8006a66:	d053      	beq.n	8006b10 <_reclaim_reent+0xb4>
 8006a68:	69c3      	ldr	r3, [r0, #28]
 8006a6a:	b31b      	cbz	r3, 8006ab4 <_reclaim_reent+0x58>
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	b163      	cbz	r3, 8006a8a <_reclaim_reent+0x2e>
 8006a70:	2500      	movs	r5, #0
 8006a72:	69e3      	ldr	r3, [r4, #28]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	5959      	ldr	r1, [r3, r5]
 8006a78:	b9b1      	cbnz	r1, 8006aa8 <_reclaim_reent+0x4c>
 8006a7a:	3504      	adds	r5, #4
 8006a7c:	2d80      	cmp	r5, #128	@ 0x80
 8006a7e:	d1f8      	bne.n	8006a72 <_reclaim_reent+0x16>
 8006a80:	69e3      	ldr	r3, [r4, #28]
 8006a82:	4620      	mov	r0, r4
 8006a84:	68d9      	ldr	r1, [r3, #12]
 8006a86:	f000 f881 	bl	8006b8c <_free_r>
 8006a8a:	69e3      	ldr	r3, [r4, #28]
 8006a8c:	6819      	ldr	r1, [r3, #0]
 8006a8e:	b111      	cbz	r1, 8006a96 <_reclaim_reent+0x3a>
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 f87b 	bl	8006b8c <_free_r>
 8006a96:	69e3      	ldr	r3, [r4, #28]
 8006a98:	689d      	ldr	r5, [r3, #8]
 8006a9a:	b15d      	cbz	r5, 8006ab4 <_reclaim_reent+0x58>
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	682d      	ldr	r5, [r5, #0]
 8006aa2:	f000 f873 	bl	8006b8c <_free_r>
 8006aa6:	e7f8      	b.n	8006a9a <_reclaim_reent+0x3e>
 8006aa8:	680e      	ldr	r6, [r1, #0]
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f000 f86e 	bl	8006b8c <_free_r>
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	e7e1      	b.n	8006a78 <_reclaim_reent+0x1c>
 8006ab4:	6961      	ldr	r1, [r4, #20]
 8006ab6:	b111      	cbz	r1, 8006abe <_reclaim_reent+0x62>
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 f867 	bl	8006b8c <_free_r>
 8006abe:	69e1      	ldr	r1, [r4, #28]
 8006ac0:	b111      	cbz	r1, 8006ac8 <_reclaim_reent+0x6c>
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 f862 	bl	8006b8c <_free_r>
 8006ac8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006aca:	b111      	cbz	r1, 8006ad2 <_reclaim_reent+0x76>
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 f85d 	bl	8006b8c <_free_r>
 8006ad2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ad4:	b111      	cbz	r1, 8006adc <_reclaim_reent+0x80>
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f000 f858 	bl	8006b8c <_free_r>
 8006adc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006ade:	b111      	cbz	r1, 8006ae6 <_reclaim_reent+0x8a>
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 f853 	bl	8006b8c <_free_r>
 8006ae6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006ae8:	b111      	cbz	r1, 8006af0 <_reclaim_reent+0x94>
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 f84e 	bl	8006b8c <_free_r>
 8006af0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006af2:	b111      	cbz	r1, 8006afa <_reclaim_reent+0x9e>
 8006af4:	4620      	mov	r0, r4
 8006af6:	f000 f849 	bl	8006b8c <_free_r>
 8006afa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006afc:	b111      	cbz	r1, 8006b04 <_reclaim_reent+0xa8>
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 f844 	bl	8006b8c <_free_r>
 8006b04:	6a23      	ldr	r3, [r4, #32]
 8006b06:	b11b      	cbz	r3, 8006b10 <_reclaim_reent+0xb4>
 8006b08:	4620      	mov	r0, r4
 8006b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b0e:	4718      	bx	r3
 8006b10:	bd70      	pop	{r4, r5, r6, pc}
 8006b12:	bf00      	nop
 8006b14:	20000010 	.word	0x20000010

08006b18 <__errno>:
 8006b18:	4b01      	ldr	r3, [pc, #4]	@ (8006b20 <__errno+0x8>)
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20000010 	.word	0x20000010

08006b24 <__libc_init_array>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	4d0d      	ldr	r5, [pc, #52]	@ (8006b5c <__libc_init_array+0x38>)
 8006b28:	4c0d      	ldr	r4, [pc, #52]	@ (8006b60 <__libc_init_array+0x3c>)
 8006b2a:	1b64      	subs	r4, r4, r5
 8006b2c:	10a4      	asrs	r4, r4, #2
 8006b2e:	2600      	movs	r6, #0
 8006b30:	42a6      	cmp	r6, r4
 8006b32:	d109      	bne.n	8006b48 <__libc_init_array+0x24>
 8006b34:	4d0b      	ldr	r5, [pc, #44]	@ (8006b64 <__libc_init_array+0x40>)
 8006b36:	4c0c      	ldr	r4, [pc, #48]	@ (8006b68 <__libc_init_array+0x44>)
 8006b38:	f000 fc64 	bl	8007404 <_init>
 8006b3c:	1b64      	subs	r4, r4, r5
 8006b3e:	10a4      	asrs	r4, r4, #2
 8006b40:	2600      	movs	r6, #0
 8006b42:	42a6      	cmp	r6, r4
 8006b44:	d105      	bne.n	8006b52 <__libc_init_array+0x2e>
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4c:	4798      	blx	r3
 8006b4e:	3601      	adds	r6, #1
 8006b50:	e7ee      	b.n	8006b30 <__libc_init_array+0xc>
 8006b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b56:	4798      	blx	r3
 8006b58:	3601      	adds	r6, #1
 8006b5a:	e7f2      	b.n	8006b42 <__libc_init_array+0x1e>
 8006b5c:	0800763c 	.word	0x0800763c
 8006b60:	0800763c 	.word	0x0800763c
 8006b64:	0800763c 	.word	0x0800763c
 8006b68:	08007640 	.word	0x08007640

08006b6c <__retarget_lock_acquire_recursive>:
 8006b6c:	4770      	bx	lr

08006b6e <__retarget_lock_release_recursive>:
 8006b6e:	4770      	bx	lr

08006b70 <memcpy>:
 8006b70:	440a      	add	r2, r1
 8006b72:	4291      	cmp	r1, r2
 8006b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b78:	d100      	bne.n	8006b7c <memcpy+0xc>
 8006b7a:	4770      	bx	lr
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b86:	4291      	cmp	r1, r2
 8006b88:	d1f9      	bne.n	8006b7e <memcpy+0xe>
 8006b8a:	bd10      	pop	{r4, pc}

08006b8c <_free_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4605      	mov	r5, r0
 8006b90:	2900      	cmp	r1, #0
 8006b92:	d041      	beq.n	8006c18 <_free_r+0x8c>
 8006b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b98:	1f0c      	subs	r4, r1, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bfb8      	it	lt
 8006b9e:	18e4      	addlt	r4, r4, r3
 8006ba0:	f000 f8e0 	bl	8006d64 <__malloc_lock>
 8006ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8006c1c <_free_r+0x90>)
 8006ba6:	6813      	ldr	r3, [r2, #0]
 8006ba8:	b933      	cbnz	r3, 8006bb8 <_free_r+0x2c>
 8006baa:	6063      	str	r3, [r4, #4]
 8006bac:	6014      	str	r4, [r2, #0]
 8006bae:	4628      	mov	r0, r5
 8006bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bb4:	f000 b8dc 	b.w	8006d70 <__malloc_unlock>
 8006bb8:	42a3      	cmp	r3, r4
 8006bba:	d908      	bls.n	8006bce <_free_r+0x42>
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	1821      	adds	r1, r4, r0
 8006bc0:	428b      	cmp	r3, r1
 8006bc2:	bf01      	itttt	eq
 8006bc4:	6819      	ldreq	r1, [r3, #0]
 8006bc6:	685b      	ldreq	r3, [r3, #4]
 8006bc8:	1809      	addeq	r1, r1, r0
 8006bca:	6021      	streq	r1, [r4, #0]
 8006bcc:	e7ed      	b.n	8006baa <_free_r+0x1e>
 8006bce:	461a      	mov	r2, r3
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	b10b      	cbz	r3, 8006bd8 <_free_r+0x4c>
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	d9fa      	bls.n	8006bce <_free_r+0x42>
 8006bd8:	6811      	ldr	r1, [r2, #0]
 8006bda:	1850      	adds	r0, r2, r1
 8006bdc:	42a0      	cmp	r0, r4
 8006bde:	d10b      	bne.n	8006bf8 <_free_r+0x6c>
 8006be0:	6820      	ldr	r0, [r4, #0]
 8006be2:	4401      	add	r1, r0
 8006be4:	1850      	adds	r0, r2, r1
 8006be6:	4283      	cmp	r3, r0
 8006be8:	6011      	str	r1, [r2, #0]
 8006bea:	d1e0      	bne.n	8006bae <_free_r+0x22>
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	6053      	str	r3, [r2, #4]
 8006bf2:	4408      	add	r0, r1
 8006bf4:	6010      	str	r0, [r2, #0]
 8006bf6:	e7da      	b.n	8006bae <_free_r+0x22>
 8006bf8:	d902      	bls.n	8006c00 <_free_r+0x74>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	602b      	str	r3, [r5, #0]
 8006bfe:	e7d6      	b.n	8006bae <_free_r+0x22>
 8006c00:	6820      	ldr	r0, [r4, #0]
 8006c02:	1821      	adds	r1, r4, r0
 8006c04:	428b      	cmp	r3, r1
 8006c06:	bf04      	itt	eq
 8006c08:	6819      	ldreq	r1, [r3, #0]
 8006c0a:	685b      	ldreq	r3, [r3, #4]
 8006c0c:	6063      	str	r3, [r4, #4]
 8006c0e:	bf04      	itt	eq
 8006c10:	1809      	addeq	r1, r1, r0
 8006c12:	6021      	streq	r1, [r4, #0]
 8006c14:	6054      	str	r4, [r2, #4]
 8006c16:	e7ca      	b.n	8006bae <_free_r+0x22>
 8006c18:	bd38      	pop	{r3, r4, r5, pc}
 8006c1a:	bf00      	nop
 8006c1c:	2000560c 	.word	0x2000560c

08006c20 <sbrk_aligned>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	4e0f      	ldr	r6, [pc, #60]	@ (8006c60 <sbrk_aligned+0x40>)
 8006c24:	460c      	mov	r4, r1
 8006c26:	6831      	ldr	r1, [r6, #0]
 8006c28:	4605      	mov	r5, r0
 8006c2a:	b911      	cbnz	r1, 8006c32 <sbrk_aligned+0x12>
 8006c2c:	f000 fba4 	bl	8007378 <_sbrk_r>
 8006c30:	6030      	str	r0, [r6, #0]
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 fb9f 	bl	8007378 <_sbrk_r>
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	d103      	bne.n	8006c46 <sbrk_aligned+0x26>
 8006c3e:	f04f 34ff 	mov.w	r4, #4294967295
 8006c42:	4620      	mov	r0, r4
 8006c44:	bd70      	pop	{r4, r5, r6, pc}
 8006c46:	1cc4      	adds	r4, r0, #3
 8006c48:	f024 0403 	bic.w	r4, r4, #3
 8006c4c:	42a0      	cmp	r0, r4
 8006c4e:	d0f8      	beq.n	8006c42 <sbrk_aligned+0x22>
 8006c50:	1a21      	subs	r1, r4, r0
 8006c52:	4628      	mov	r0, r5
 8006c54:	f000 fb90 	bl	8007378 <_sbrk_r>
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d1f2      	bne.n	8006c42 <sbrk_aligned+0x22>
 8006c5c:	e7ef      	b.n	8006c3e <sbrk_aligned+0x1e>
 8006c5e:	bf00      	nop
 8006c60:	20005608 	.word	0x20005608

08006c64 <_malloc_r>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	1ccd      	adds	r5, r1, #3
 8006c6a:	f025 0503 	bic.w	r5, r5, #3
 8006c6e:	3508      	adds	r5, #8
 8006c70:	2d0c      	cmp	r5, #12
 8006c72:	bf38      	it	cc
 8006c74:	250c      	movcc	r5, #12
 8006c76:	2d00      	cmp	r5, #0
 8006c78:	4606      	mov	r6, r0
 8006c7a:	db01      	blt.n	8006c80 <_malloc_r+0x1c>
 8006c7c:	42a9      	cmp	r1, r5
 8006c7e:	d904      	bls.n	8006c8a <_malloc_r+0x26>
 8006c80:	230c      	movs	r3, #12
 8006c82:	6033      	str	r3, [r6, #0]
 8006c84:	2000      	movs	r0, #0
 8006c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d60 <_malloc_r+0xfc>
 8006c8e:	f000 f869 	bl	8006d64 <__malloc_lock>
 8006c92:	f8d8 3000 	ldr.w	r3, [r8]
 8006c96:	461c      	mov	r4, r3
 8006c98:	bb44      	cbnz	r4, 8006cec <_malloc_r+0x88>
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	4630      	mov	r0, r6
 8006c9e:	f7ff ffbf 	bl	8006c20 <sbrk_aligned>
 8006ca2:	1c43      	adds	r3, r0, #1
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	d158      	bne.n	8006d5a <_malloc_r+0xf6>
 8006ca8:	f8d8 4000 	ldr.w	r4, [r8]
 8006cac:	4627      	mov	r7, r4
 8006cae:	2f00      	cmp	r7, #0
 8006cb0:	d143      	bne.n	8006d3a <_malloc_r+0xd6>
 8006cb2:	2c00      	cmp	r4, #0
 8006cb4:	d04b      	beq.n	8006d4e <_malloc_r+0xea>
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	4639      	mov	r1, r7
 8006cba:	4630      	mov	r0, r6
 8006cbc:	eb04 0903 	add.w	r9, r4, r3
 8006cc0:	f000 fb5a 	bl	8007378 <_sbrk_r>
 8006cc4:	4581      	cmp	r9, r0
 8006cc6:	d142      	bne.n	8006d4e <_malloc_r+0xea>
 8006cc8:	6821      	ldr	r1, [r4, #0]
 8006cca:	1a6d      	subs	r5, r5, r1
 8006ccc:	4629      	mov	r1, r5
 8006cce:	4630      	mov	r0, r6
 8006cd0:	f7ff ffa6 	bl	8006c20 <sbrk_aligned>
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d03a      	beq.n	8006d4e <_malloc_r+0xea>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	442b      	add	r3, r5
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	f8d8 3000 	ldr.w	r3, [r8]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	bb62      	cbnz	r2, 8006d40 <_malloc_r+0xdc>
 8006ce6:	f8c8 7000 	str.w	r7, [r8]
 8006cea:	e00f      	b.n	8006d0c <_malloc_r+0xa8>
 8006cec:	6822      	ldr	r2, [r4, #0]
 8006cee:	1b52      	subs	r2, r2, r5
 8006cf0:	d420      	bmi.n	8006d34 <_malloc_r+0xd0>
 8006cf2:	2a0b      	cmp	r2, #11
 8006cf4:	d917      	bls.n	8006d26 <_malloc_r+0xc2>
 8006cf6:	1961      	adds	r1, r4, r5
 8006cf8:	42a3      	cmp	r3, r4
 8006cfa:	6025      	str	r5, [r4, #0]
 8006cfc:	bf18      	it	ne
 8006cfe:	6059      	strne	r1, [r3, #4]
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	bf08      	it	eq
 8006d04:	f8c8 1000 	streq.w	r1, [r8]
 8006d08:	5162      	str	r2, [r4, r5]
 8006d0a:	604b      	str	r3, [r1, #4]
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f000 f82f 	bl	8006d70 <__malloc_unlock>
 8006d12:	f104 000b 	add.w	r0, r4, #11
 8006d16:	1d23      	adds	r3, r4, #4
 8006d18:	f020 0007 	bic.w	r0, r0, #7
 8006d1c:	1ac2      	subs	r2, r0, r3
 8006d1e:	bf1c      	itt	ne
 8006d20:	1a1b      	subne	r3, r3, r0
 8006d22:	50a3      	strne	r3, [r4, r2]
 8006d24:	e7af      	b.n	8006c86 <_malloc_r+0x22>
 8006d26:	6862      	ldr	r2, [r4, #4]
 8006d28:	42a3      	cmp	r3, r4
 8006d2a:	bf0c      	ite	eq
 8006d2c:	f8c8 2000 	streq.w	r2, [r8]
 8006d30:	605a      	strne	r2, [r3, #4]
 8006d32:	e7eb      	b.n	8006d0c <_malloc_r+0xa8>
 8006d34:	4623      	mov	r3, r4
 8006d36:	6864      	ldr	r4, [r4, #4]
 8006d38:	e7ae      	b.n	8006c98 <_malloc_r+0x34>
 8006d3a:	463c      	mov	r4, r7
 8006d3c:	687f      	ldr	r7, [r7, #4]
 8006d3e:	e7b6      	b.n	8006cae <_malloc_r+0x4a>
 8006d40:	461a      	mov	r2, r3
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	42a3      	cmp	r3, r4
 8006d46:	d1fb      	bne.n	8006d40 <_malloc_r+0xdc>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	6053      	str	r3, [r2, #4]
 8006d4c:	e7de      	b.n	8006d0c <_malloc_r+0xa8>
 8006d4e:	230c      	movs	r3, #12
 8006d50:	6033      	str	r3, [r6, #0]
 8006d52:	4630      	mov	r0, r6
 8006d54:	f000 f80c 	bl	8006d70 <__malloc_unlock>
 8006d58:	e794      	b.n	8006c84 <_malloc_r+0x20>
 8006d5a:	6005      	str	r5, [r0, #0]
 8006d5c:	e7d6      	b.n	8006d0c <_malloc_r+0xa8>
 8006d5e:	bf00      	nop
 8006d60:	2000560c 	.word	0x2000560c

08006d64 <__malloc_lock>:
 8006d64:	4801      	ldr	r0, [pc, #4]	@ (8006d6c <__malloc_lock+0x8>)
 8006d66:	f7ff bf01 	b.w	8006b6c <__retarget_lock_acquire_recursive>
 8006d6a:	bf00      	nop
 8006d6c:	20005604 	.word	0x20005604

08006d70 <__malloc_unlock>:
 8006d70:	4801      	ldr	r0, [pc, #4]	@ (8006d78 <__malloc_unlock+0x8>)
 8006d72:	f7ff befc 	b.w	8006b6e <__retarget_lock_release_recursive>
 8006d76:	bf00      	nop
 8006d78:	20005604 	.word	0x20005604

08006d7c <__ssputs_r>:
 8006d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d80:	688e      	ldr	r6, [r1, #8]
 8006d82:	461f      	mov	r7, r3
 8006d84:	42be      	cmp	r6, r7
 8006d86:	680b      	ldr	r3, [r1, #0]
 8006d88:	4682      	mov	sl, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	4690      	mov	r8, r2
 8006d8e:	d82d      	bhi.n	8006dec <__ssputs_r+0x70>
 8006d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d98:	d026      	beq.n	8006de8 <__ssputs_r+0x6c>
 8006d9a:	6965      	ldr	r5, [r4, #20]
 8006d9c:	6909      	ldr	r1, [r1, #16]
 8006d9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006da2:	eba3 0901 	sub.w	r9, r3, r1
 8006da6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006daa:	1c7b      	adds	r3, r7, #1
 8006dac:	444b      	add	r3, r9
 8006dae:	106d      	asrs	r5, r5, #1
 8006db0:	429d      	cmp	r5, r3
 8006db2:	bf38      	it	cc
 8006db4:	461d      	movcc	r5, r3
 8006db6:	0553      	lsls	r3, r2, #21
 8006db8:	d527      	bpl.n	8006e0a <__ssputs_r+0x8e>
 8006dba:	4629      	mov	r1, r5
 8006dbc:	f7ff ff52 	bl	8006c64 <_malloc_r>
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	b360      	cbz	r0, 8006e1e <__ssputs_r+0xa2>
 8006dc4:	6921      	ldr	r1, [r4, #16]
 8006dc6:	464a      	mov	r2, r9
 8006dc8:	f7ff fed2 	bl	8006b70 <memcpy>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	6126      	str	r6, [r4, #16]
 8006dda:	6165      	str	r5, [r4, #20]
 8006ddc:	444e      	add	r6, r9
 8006dde:	eba5 0509 	sub.w	r5, r5, r9
 8006de2:	6026      	str	r6, [r4, #0]
 8006de4:	60a5      	str	r5, [r4, #8]
 8006de6:	463e      	mov	r6, r7
 8006de8:	42be      	cmp	r6, r7
 8006dea:	d900      	bls.n	8006dee <__ssputs_r+0x72>
 8006dec:	463e      	mov	r6, r7
 8006dee:	6820      	ldr	r0, [r4, #0]
 8006df0:	4632      	mov	r2, r6
 8006df2:	4641      	mov	r1, r8
 8006df4:	f000 faa6 	bl	8007344 <memmove>
 8006df8:	68a3      	ldr	r3, [r4, #8]
 8006dfa:	1b9b      	subs	r3, r3, r6
 8006dfc:	60a3      	str	r3, [r4, #8]
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	4433      	add	r3, r6
 8006e02:	6023      	str	r3, [r4, #0]
 8006e04:	2000      	movs	r0, #0
 8006e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0a:	462a      	mov	r2, r5
 8006e0c:	f000 fac4 	bl	8007398 <_realloc_r>
 8006e10:	4606      	mov	r6, r0
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d1e0      	bne.n	8006dd8 <__ssputs_r+0x5c>
 8006e16:	6921      	ldr	r1, [r4, #16]
 8006e18:	4650      	mov	r0, sl
 8006e1a:	f7ff feb7 	bl	8006b8c <_free_r>
 8006e1e:	230c      	movs	r3, #12
 8006e20:	f8ca 3000 	str.w	r3, [sl]
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e2a:	81a3      	strh	r3, [r4, #12]
 8006e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e30:	e7e9      	b.n	8006e06 <__ssputs_r+0x8a>
	...

08006e34 <_svfiprintf_r>:
 8006e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e38:	4698      	mov	r8, r3
 8006e3a:	898b      	ldrh	r3, [r1, #12]
 8006e3c:	061b      	lsls	r3, r3, #24
 8006e3e:	b09d      	sub	sp, #116	@ 0x74
 8006e40:	4607      	mov	r7, r0
 8006e42:	460d      	mov	r5, r1
 8006e44:	4614      	mov	r4, r2
 8006e46:	d510      	bpl.n	8006e6a <_svfiprintf_r+0x36>
 8006e48:	690b      	ldr	r3, [r1, #16]
 8006e4a:	b973      	cbnz	r3, 8006e6a <_svfiprintf_r+0x36>
 8006e4c:	2140      	movs	r1, #64	@ 0x40
 8006e4e:	f7ff ff09 	bl	8006c64 <_malloc_r>
 8006e52:	6028      	str	r0, [r5, #0]
 8006e54:	6128      	str	r0, [r5, #16]
 8006e56:	b930      	cbnz	r0, 8006e66 <_svfiprintf_r+0x32>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	b01d      	add	sp, #116	@ 0x74
 8006e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e66:	2340      	movs	r3, #64	@ 0x40
 8006e68:	616b      	str	r3, [r5, #20]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e6e:	2320      	movs	r3, #32
 8006e70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e78:	2330      	movs	r3, #48	@ 0x30
 8006e7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007018 <_svfiprintf_r+0x1e4>
 8006e7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e82:	f04f 0901 	mov.w	r9, #1
 8006e86:	4623      	mov	r3, r4
 8006e88:	469a      	mov	sl, r3
 8006e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e8e:	b10a      	cbz	r2, 8006e94 <_svfiprintf_r+0x60>
 8006e90:	2a25      	cmp	r2, #37	@ 0x25
 8006e92:	d1f9      	bne.n	8006e88 <_svfiprintf_r+0x54>
 8006e94:	ebba 0b04 	subs.w	fp, sl, r4
 8006e98:	d00b      	beq.n	8006eb2 <_svfiprintf_r+0x7e>
 8006e9a:	465b      	mov	r3, fp
 8006e9c:	4622      	mov	r2, r4
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	f7ff ff6b 	bl	8006d7c <__ssputs_r>
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f000 80a7 	beq.w	8006ffa <_svfiprintf_r+0x1c6>
 8006eac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eae:	445a      	add	r2, fp
 8006eb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 809f 	beq.w	8006ffa <_svfiprintf_r+0x1c6>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ec6:	f10a 0a01 	add.w	sl, sl, #1
 8006eca:	9304      	str	r3, [sp, #16]
 8006ecc:	9307      	str	r3, [sp, #28]
 8006ece:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ed2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ed4:	4654      	mov	r4, sl
 8006ed6:	2205      	movs	r2, #5
 8006ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006edc:	484e      	ldr	r0, [pc, #312]	@ (8007018 <_svfiprintf_r+0x1e4>)
 8006ede:	f7f9 f98f 	bl	8000200 <memchr>
 8006ee2:	9a04      	ldr	r2, [sp, #16]
 8006ee4:	b9d8      	cbnz	r0, 8006f1e <_svfiprintf_r+0xea>
 8006ee6:	06d0      	lsls	r0, r2, #27
 8006ee8:	bf44      	itt	mi
 8006eea:	2320      	movmi	r3, #32
 8006eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ef0:	0711      	lsls	r1, r2, #28
 8006ef2:	bf44      	itt	mi
 8006ef4:	232b      	movmi	r3, #43	@ 0x2b
 8006ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006efa:	f89a 3000 	ldrb.w	r3, [sl]
 8006efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f00:	d015      	beq.n	8006f2e <_svfiprintf_r+0xfa>
 8006f02:	9a07      	ldr	r2, [sp, #28]
 8006f04:	4654      	mov	r4, sl
 8006f06:	2000      	movs	r0, #0
 8006f08:	f04f 0c0a 	mov.w	ip, #10
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f12:	3b30      	subs	r3, #48	@ 0x30
 8006f14:	2b09      	cmp	r3, #9
 8006f16:	d94b      	bls.n	8006fb0 <_svfiprintf_r+0x17c>
 8006f18:	b1b0      	cbz	r0, 8006f48 <_svfiprintf_r+0x114>
 8006f1a:	9207      	str	r2, [sp, #28]
 8006f1c:	e014      	b.n	8006f48 <_svfiprintf_r+0x114>
 8006f1e:	eba0 0308 	sub.w	r3, r0, r8
 8006f22:	fa09 f303 	lsl.w	r3, r9, r3
 8006f26:	4313      	orrs	r3, r2
 8006f28:	9304      	str	r3, [sp, #16]
 8006f2a:	46a2      	mov	sl, r4
 8006f2c:	e7d2      	b.n	8006ed4 <_svfiprintf_r+0xa0>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	1d19      	adds	r1, r3, #4
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	9103      	str	r1, [sp, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	bfbb      	ittet	lt
 8006f3a:	425b      	neglt	r3, r3
 8006f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f40:	9307      	strge	r3, [sp, #28]
 8006f42:	9307      	strlt	r3, [sp, #28]
 8006f44:	bfb8      	it	lt
 8006f46:	9204      	strlt	r2, [sp, #16]
 8006f48:	7823      	ldrb	r3, [r4, #0]
 8006f4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f4c:	d10a      	bne.n	8006f64 <_svfiprintf_r+0x130>
 8006f4e:	7863      	ldrb	r3, [r4, #1]
 8006f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f52:	d132      	bne.n	8006fba <_svfiprintf_r+0x186>
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	1d1a      	adds	r2, r3, #4
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	9203      	str	r2, [sp, #12]
 8006f5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f60:	3402      	adds	r4, #2
 8006f62:	9305      	str	r3, [sp, #20]
 8006f64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007028 <_svfiprintf_r+0x1f4>
 8006f68:	7821      	ldrb	r1, [r4, #0]
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	f7f9 f947 	bl	8000200 <memchr>
 8006f72:	b138      	cbz	r0, 8006f84 <_svfiprintf_r+0x150>
 8006f74:	9b04      	ldr	r3, [sp, #16]
 8006f76:	eba0 000a 	sub.w	r0, r0, sl
 8006f7a:	2240      	movs	r2, #64	@ 0x40
 8006f7c:	4082      	lsls	r2, r0
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	3401      	adds	r4, #1
 8006f82:	9304      	str	r3, [sp, #16]
 8006f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f88:	4824      	ldr	r0, [pc, #144]	@ (800701c <_svfiprintf_r+0x1e8>)
 8006f8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f8e:	2206      	movs	r2, #6
 8006f90:	f7f9 f936 	bl	8000200 <memchr>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d036      	beq.n	8007006 <_svfiprintf_r+0x1d2>
 8006f98:	4b21      	ldr	r3, [pc, #132]	@ (8007020 <_svfiprintf_r+0x1ec>)
 8006f9a:	bb1b      	cbnz	r3, 8006fe4 <_svfiprintf_r+0x1b0>
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	3307      	adds	r3, #7
 8006fa0:	f023 0307 	bic.w	r3, r3, #7
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	9303      	str	r3, [sp, #12]
 8006fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006faa:	4433      	add	r3, r6
 8006fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fae:	e76a      	b.n	8006e86 <_svfiprintf_r+0x52>
 8006fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	e7a8      	b.n	8006f0c <_svfiprintf_r+0xd8>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	3401      	adds	r4, #1
 8006fbe:	9305      	str	r3, [sp, #20]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	f04f 0c0a 	mov.w	ip, #10
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fcc:	3a30      	subs	r2, #48	@ 0x30
 8006fce:	2a09      	cmp	r2, #9
 8006fd0:	d903      	bls.n	8006fda <_svfiprintf_r+0x1a6>
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0c6      	beq.n	8006f64 <_svfiprintf_r+0x130>
 8006fd6:	9105      	str	r1, [sp, #20]
 8006fd8:	e7c4      	b.n	8006f64 <_svfiprintf_r+0x130>
 8006fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fde:	4604      	mov	r4, r0
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e7f0      	b.n	8006fc6 <_svfiprintf_r+0x192>
 8006fe4:	ab03      	add	r3, sp, #12
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	462a      	mov	r2, r5
 8006fea:	4b0e      	ldr	r3, [pc, #56]	@ (8007024 <_svfiprintf_r+0x1f0>)
 8006fec:	a904      	add	r1, sp, #16
 8006fee:	4638      	mov	r0, r7
 8006ff0:	f3af 8000 	nop.w
 8006ff4:	1c42      	adds	r2, r0, #1
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	d1d6      	bne.n	8006fa8 <_svfiprintf_r+0x174>
 8006ffa:	89ab      	ldrh	r3, [r5, #12]
 8006ffc:	065b      	lsls	r3, r3, #25
 8006ffe:	f53f af2d 	bmi.w	8006e5c <_svfiprintf_r+0x28>
 8007002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007004:	e72c      	b.n	8006e60 <_svfiprintf_r+0x2c>
 8007006:	ab03      	add	r3, sp, #12
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	462a      	mov	r2, r5
 800700c:	4b05      	ldr	r3, [pc, #20]	@ (8007024 <_svfiprintf_r+0x1f0>)
 800700e:	a904      	add	r1, sp, #16
 8007010:	4638      	mov	r0, r7
 8007012:	f000 f879 	bl	8007108 <_printf_i>
 8007016:	e7ed      	b.n	8006ff4 <_svfiprintf_r+0x1c0>
 8007018:	08007600 	.word	0x08007600
 800701c:	0800760a 	.word	0x0800760a
 8007020:	00000000 	.word	0x00000000
 8007024:	08006d7d 	.word	0x08006d7d
 8007028:	08007606 	.word	0x08007606

0800702c <_printf_common>:
 800702c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	4616      	mov	r6, r2
 8007032:	4698      	mov	r8, r3
 8007034:	688a      	ldr	r2, [r1, #8]
 8007036:	690b      	ldr	r3, [r1, #16]
 8007038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800703c:	4293      	cmp	r3, r2
 800703e:	bfb8      	it	lt
 8007040:	4613      	movlt	r3, r2
 8007042:	6033      	str	r3, [r6, #0]
 8007044:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007048:	4607      	mov	r7, r0
 800704a:	460c      	mov	r4, r1
 800704c:	b10a      	cbz	r2, 8007052 <_printf_common+0x26>
 800704e:	3301      	adds	r3, #1
 8007050:	6033      	str	r3, [r6, #0]
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	0699      	lsls	r1, r3, #26
 8007056:	bf42      	ittt	mi
 8007058:	6833      	ldrmi	r3, [r6, #0]
 800705a:	3302      	addmi	r3, #2
 800705c:	6033      	strmi	r3, [r6, #0]
 800705e:	6825      	ldr	r5, [r4, #0]
 8007060:	f015 0506 	ands.w	r5, r5, #6
 8007064:	d106      	bne.n	8007074 <_printf_common+0x48>
 8007066:	f104 0a19 	add.w	sl, r4, #25
 800706a:	68e3      	ldr	r3, [r4, #12]
 800706c:	6832      	ldr	r2, [r6, #0]
 800706e:	1a9b      	subs	r3, r3, r2
 8007070:	42ab      	cmp	r3, r5
 8007072:	dc26      	bgt.n	80070c2 <_printf_common+0x96>
 8007074:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007078:	6822      	ldr	r2, [r4, #0]
 800707a:	3b00      	subs	r3, #0
 800707c:	bf18      	it	ne
 800707e:	2301      	movne	r3, #1
 8007080:	0692      	lsls	r2, r2, #26
 8007082:	d42b      	bmi.n	80070dc <_printf_common+0xb0>
 8007084:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007088:	4641      	mov	r1, r8
 800708a:	4638      	mov	r0, r7
 800708c:	47c8      	blx	r9
 800708e:	3001      	adds	r0, #1
 8007090:	d01e      	beq.n	80070d0 <_printf_common+0xa4>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	6922      	ldr	r2, [r4, #16]
 8007096:	f003 0306 	and.w	r3, r3, #6
 800709a:	2b04      	cmp	r3, #4
 800709c:	bf02      	ittt	eq
 800709e:	68e5      	ldreq	r5, [r4, #12]
 80070a0:	6833      	ldreq	r3, [r6, #0]
 80070a2:	1aed      	subeq	r5, r5, r3
 80070a4:	68a3      	ldr	r3, [r4, #8]
 80070a6:	bf0c      	ite	eq
 80070a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070ac:	2500      	movne	r5, #0
 80070ae:	4293      	cmp	r3, r2
 80070b0:	bfc4      	itt	gt
 80070b2:	1a9b      	subgt	r3, r3, r2
 80070b4:	18ed      	addgt	r5, r5, r3
 80070b6:	2600      	movs	r6, #0
 80070b8:	341a      	adds	r4, #26
 80070ba:	42b5      	cmp	r5, r6
 80070bc:	d11a      	bne.n	80070f4 <_printf_common+0xc8>
 80070be:	2000      	movs	r0, #0
 80070c0:	e008      	b.n	80070d4 <_printf_common+0xa8>
 80070c2:	2301      	movs	r3, #1
 80070c4:	4652      	mov	r2, sl
 80070c6:	4641      	mov	r1, r8
 80070c8:	4638      	mov	r0, r7
 80070ca:	47c8      	blx	r9
 80070cc:	3001      	adds	r0, #1
 80070ce:	d103      	bne.n	80070d8 <_printf_common+0xac>
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295
 80070d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d8:	3501      	adds	r5, #1
 80070da:	e7c6      	b.n	800706a <_printf_common+0x3e>
 80070dc:	18e1      	adds	r1, r4, r3
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	2030      	movs	r0, #48	@ 0x30
 80070e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070e6:	4422      	add	r2, r4
 80070e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070f0:	3302      	adds	r3, #2
 80070f2:	e7c7      	b.n	8007084 <_printf_common+0x58>
 80070f4:	2301      	movs	r3, #1
 80070f6:	4622      	mov	r2, r4
 80070f8:	4641      	mov	r1, r8
 80070fa:	4638      	mov	r0, r7
 80070fc:	47c8      	blx	r9
 80070fe:	3001      	adds	r0, #1
 8007100:	d0e6      	beq.n	80070d0 <_printf_common+0xa4>
 8007102:	3601      	adds	r6, #1
 8007104:	e7d9      	b.n	80070ba <_printf_common+0x8e>
	...

08007108 <_printf_i>:
 8007108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800710c:	7e0f      	ldrb	r7, [r1, #24]
 800710e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007110:	2f78      	cmp	r7, #120	@ 0x78
 8007112:	4691      	mov	r9, r2
 8007114:	4680      	mov	r8, r0
 8007116:	460c      	mov	r4, r1
 8007118:	469a      	mov	sl, r3
 800711a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800711e:	d807      	bhi.n	8007130 <_printf_i+0x28>
 8007120:	2f62      	cmp	r7, #98	@ 0x62
 8007122:	d80a      	bhi.n	800713a <_printf_i+0x32>
 8007124:	2f00      	cmp	r7, #0
 8007126:	f000 80d1 	beq.w	80072cc <_printf_i+0x1c4>
 800712a:	2f58      	cmp	r7, #88	@ 0x58
 800712c:	f000 80b8 	beq.w	80072a0 <_printf_i+0x198>
 8007130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007134:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007138:	e03a      	b.n	80071b0 <_printf_i+0xa8>
 800713a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800713e:	2b15      	cmp	r3, #21
 8007140:	d8f6      	bhi.n	8007130 <_printf_i+0x28>
 8007142:	a101      	add	r1, pc, #4	@ (adr r1, 8007148 <_printf_i+0x40>)
 8007144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007148:	080071a1 	.word	0x080071a1
 800714c:	080071b5 	.word	0x080071b5
 8007150:	08007131 	.word	0x08007131
 8007154:	08007131 	.word	0x08007131
 8007158:	08007131 	.word	0x08007131
 800715c:	08007131 	.word	0x08007131
 8007160:	080071b5 	.word	0x080071b5
 8007164:	08007131 	.word	0x08007131
 8007168:	08007131 	.word	0x08007131
 800716c:	08007131 	.word	0x08007131
 8007170:	08007131 	.word	0x08007131
 8007174:	080072b3 	.word	0x080072b3
 8007178:	080071df 	.word	0x080071df
 800717c:	0800726d 	.word	0x0800726d
 8007180:	08007131 	.word	0x08007131
 8007184:	08007131 	.word	0x08007131
 8007188:	080072d5 	.word	0x080072d5
 800718c:	08007131 	.word	0x08007131
 8007190:	080071df 	.word	0x080071df
 8007194:	08007131 	.word	0x08007131
 8007198:	08007131 	.word	0x08007131
 800719c:	08007275 	.word	0x08007275
 80071a0:	6833      	ldr	r3, [r6, #0]
 80071a2:	1d1a      	adds	r2, r3, #4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6032      	str	r2, [r6, #0]
 80071a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071b0:	2301      	movs	r3, #1
 80071b2:	e09c      	b.n	80072ee <_printf_i+0x1e6>
 80071b4:	6833      	ldr	r3, [r6, #0]
 80071b6:	6820      	ldr	r0, [r4, #0]
 80071b8:	1d19      	adds	r1, r3, #4
 80071ba:	6031      	str	r1, [r6, #0]
 80071bc:	0606      	lsls	r6, r0, #24
 80071be:	d501      	bpl.n	80071c4 <_printf_i+0xbc>
 80071c0:	681d      	ldr	r5, [r3, #0]
 80071c2:	e003      	b.n	80071cc <_printf_i+0xc4>
 80071c4:	0645      	lsls	r5, r0, #25
 80071c6:	d5fb      	bpl.n	80071c0 <_printf_i+0xb8>
 80071c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071cc:	2d00      	cmp	r5, #0
 80071ce:	da03      	bge.n	80071d8 <_printf_i+0xd0>
 80071d0:	232d      	movs	r3, #45	@ 0x2d
 80071d2:	426d      	negs	r5, r5
 80071d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071d8:	4858      	ldr	r0, [pc, #352]	@ (800733c <_printf_i+0x234>)
 80071da:	230a      	movs	r3, #10
 80071dc:	e011      	b.n	8007202 <_printf_i+0xfa>
 80071de:	6821      	ldr	r1, [r4, #0]
 80071e0:	6833      	ldr	r3, [r6, #0]
 80071e2:	0608      	lsls	r0, r1, #24
 80071e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071e8:	d402      	bmi.n	80071f0 <_printf_i+0xe8>
 80071ea:	0649      	lsls	r1, r1, #25
 80071ec:	bf48      	it	mi
 80071ee:	b2ad      	uxthmi	r5, r5
 80071f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80071f2:	4852      	ldr	r0, [pc, #328]	@ (800733c <_printf_i+0x234>)
 80071f4:	6033      	str	r3, [r6, #0]
 80071f6:	bf14      	ite	ne
 80071f8:	230a      	movne	r3, #10
 80071fa:	2308      	moveq	r3, #8
 80071fc:	2100      	movs	r1, #0
 80071fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007202:	6866      	ldr	r6, [r4, #4]
 8007204:	60a6      	str	r6, [r4, #8]
 8007206:	2e00      	cmp	r6, #0
 8007208:	db05      	blt.n	8007216 <_printf_i+0x10e>
 800720a:	6821      	ldr	r1, [r4, #0]
 800720c:	432e      	orrs	r6, r5
 800720e:	f021 0104 	bic.w	r1, r1, #4
 8007212:	6021      	str	r1, [r4, #0]
 8007214:	d04b      	beq.n	80072ae <_printf_i+0x1a6>
 8007216:	4616      	mov	r6, r2
 8007218:	fbb5 f1f3 	udiv	r1, r5, r3
 800721c:	fb03 5711 	mls	r7, r3, r1, r5
 8007220:	5dc7      	ldrb	r7, [r0, r7]
 8007222:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007226:	462f      	mov	r7, r5
 8007228:	42bb      	cmp	r3, r7
 800722a:	460d      	mov	r5, r1
 800722c:	d9f4      	bls.n	8007218 <_printf_i+0x110>
 800722e:	2b08      	cmp	r3, #8
 8007230:	d10b      	bne.n	800724a <_printf_i+0x142>
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	07df      	lsls	r7, r3, #31
 8007236:	d508      	bpl.n	800724a <_printf_i+0x142>
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	6861      	ldr	r1, [r4, #4]
 800723c:	4299      	cmp	r1, r3
 800723e:	bfde      	ittt	le
 8007240:	2330      	movle	r3, #48	@ 0x30
 8007242:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007246:	f106 36ff 	addle.w	r6, r6, #4294967295
 800724a:	1b92      	subs	r2, r2, r6
 800724c:	6122      	str	r2, [r4, #16]
 800724e:	f8cd a000 	str.w	sl, [sp]
 8007252:	464b      	mov	r3, r9
 8007254:	aa03      	add	r2, sp, #12
 8007256:	4621      	mov	r1, r4
 8007258:	4640      	mov	r0, r8
 800725a:	f7ff fee7 	bl	800702c <_printf_common>
 800725e:	3001      	adds	r0, #1
 8007260:	d14a      	bne.n	80072f8 <_printf_i+0x1f0>
 8007262:	f04f 30ff 	mov.w	r0, #4294967295
 8007266:	b004      	add	sp, #16
 8007268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	f043 0320 	orr.w	r3, r3, #32
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	4832      	ldr	r0, [pc, #200]	@ (8007340 <_printf_i+0x238>)
 8007276:	2778      	movs	r7, #120	@ 0x78
 8007278:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	6831      	ldr	r1, [r6, #0]
 8007280:	061f      	lsls	r7, r3, #24
 8007282:	f851 5b04 	ldr.w	r5, [r1], #4
 8007286:	d402      	bmi.n	800728e <_printf_i+0x186>
 8007288:	065f      	lsls	r7, r3, #25
 800728a:	bf48      	it	mi
 800728c:	b2ad      	uxthmi	r5, r5
 800728e:	6031      	str	r1, [r6, #0]
 8007290:	07d9      	lsls	r1, r3, #31
 8007292:	bf44      	itt	mi
 8007294:	f043 0320 	orrmi.w	r3, r3, #32
 8007298:	6023      	strmi	r3, [r4, #0]
 800729a:	b11d      	cbz	r5, 80072a4 <_printf_i+0x19c>
 800729c:	2310      	movs	r3, #16
 800729e:	e7ad      	b.n	80071fc <_printf_i+0xf4>
 80072a0:	4826      	ldr	r0, [pc, #152]	@ (800733c <_printf_i+0x234>)
 80072a2:	e7e9      	b.n	8007278 <_printf_i+0x170>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	f023 0320 	bic.w	r3, r3, #32
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	e7f6      	b.n	800729c <_printf_i+0x194>
 80072ae:	4616      	mov	r6, r2
 80072b0:	e7bd      	b.n	800722e <_printf_i+0x126>
 80072b2:	6833      	ldr	r3, [r6, #0]
 80072b4:	6825      	ldr	r5, [r4, #0]
 80072b6:	6961      	ldr	r1, [r4, #20]
 80072b8:	1d18      	adds	r0, r3, #4
 80072ba:	6030      	str	r0, [r6, #0]
 80072bc:	062e      	lsls	r6, r5, #24
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	d501      	bpl.n	80072c6 <_printf_i+0x1be>
 80072c2:	6019      	str	r1, [r3, #0]
 80072c4:	e002      	b.n	80072cc <_printf_i+0x1c4>
 80072c6:	0668      	lsls	r0, r5, #25
 80072c8:	d5fb      	bpl.n	80072c2 <_printf_i+0x1ba>
 80072ca:	8019      	strh	r1, [r3, #0]
 80072cc:	2300      	movs	r3, #0
 80072ce:	6123      	str	r3, [r4, #16]
 80072d0:	4616      	mov	r6, r2
 80072d2:	e7bc      	b.n	800724e <_printf_i+0x146>
 80072d4:	6833      	ldr	r3, [r6, #0]
 80072d6:	1d1a      	adds	r2, r3, #4
 80072d8:	6032      	str	r2, [r6, #0]
 80072da:	681e      	ldr	r6, [r3, #0]
 80072dc:	6862      	ldr	r2, [r4, #4]
 80072de:	2100      	movs	r1, #0
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7f8 ff8d 	bl	8000200 <memchr>
 80072e6:	b108      	cbz	r0, 80072ec <_printf_i+0x1e4>
 80072e8:	1b80      	subs	r0, r0, r6
 80072ea:	6060      	str	r0, [r4, #4]
 80072ec:	6863      	ldr	r3, [r4, #4]
 80072ee:	6123      	str	r3, [r4, #16]
 80072f0:	2300      	movs	r3, #0
 80072f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072f6:	e7aa      	b.n	800724e <_printf_i+0x146>
 80072f8:	6923      	ldr	r3, [r4, #16]
 80072fa:	4632      	mov	r2, r6
 80072fc:	4649      	mov	r1, r9
 80072fe:	4640      	mov	r0, r8
 8007300:	47d0      	blx	sl
 8007302:	3001      	adds	r0, #1
 8007304:	d0ad      	beq.n	8007262 <_printf_i+0x15a>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	079b      	lsls	r3, r3, #30
 800730a:	d413      	bmi.n	8007334 <_printf_i+0x22c>
 800730c:	68e0      	ldr	r0, [r4, #12]
 800730e:	9b03      	ldr	r3, [sp, #12]
 8007310:	4298      	cmp	r0, r3
 8007312:	bfb8      	it	lt
 8007314:	4618      	movlt	r0, r3
 8007316:	e7a6      	b.n	8007266 <_printf_i+0x15e>
 8007318:	2301      	movs	r3, #1
 800731a:	4632      	mov	r2, r6
 800731c:	4649      	mov	r1, r9
 800731e:	4640      	mov	r0, r8
 8007320:	47d0      	blx	sl
 8007322:	3001      	adds	r0, #1
 8007324:	d09d      	beq.n	8007262 <_printf_i+0x15a>
 8007326:	3501      	adds	r5, #1
 8007328:	68e3      	ldr	r3, [r4, #12]
 800732a:	9903      	ldr	r1, [sp, #12]
 800732c:	1a5b      	subs	r3, r3, r1
 800732e:	42ab      	cmp	r3, r5
 8007330:	dcf2      	bgt.n	8007318 <_printf_i+0x210>
 8007332:	e7eb      	b.n	800730c <_printf_i+0x204>
 8007334:	2500      	movs	r5, #0
 8007336:	f104 0619 	add.w	r6, r4, #25
 800733a:	e7f5      	b.n	8007328 <_printf_i+0x220>
 800733c:	08007611 	.word	0x08007611
 8007340:	08007622 	.word	0x08007622

08007344 <memmove>:
 8007344:	4288      	cmp	r0, r1
 8007346:	b510      	push	{r4, lr}
 8007348:	eb01 0402 	add.w	r4, r1, r2
 800734c:	d902      	bls.n	8007354 <memmove+0x10>
 800734e:	4284      	cmp	r4, r0
 8007350:	4623      	mov	r3, r4
 8007352:	d807      	bhi.n	8007364 <memmove+0x20>
 8007354:	1e43      	subs	r3, r0, #1
 8007356:	42a1      	cmp	r1, r4
 8007358:	d008      	beq.n	800736c <memmove+0x28>
 800735a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800735e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007362:	e7f8      	b.n	8007356 <memmove+0x12>
 8007364:	4402      	add	r2, r0
 8007366:	4601      	mov	r1, r0
 8007368:	428a      	cmp	r2, r1
 800736a:	d100      	bne.n	800736e <memmove+0x2a>
 800736c:	bd10      	pop	{r4, pc}
 800736e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007376:	e7f7      	b.n	8007368 <memmove+0x24>

08007378 <_sbrk_r>:
 8007378:	b538      	push	{r3, r4, r5, lr}
 800737a:	4d06      	ldr	r5, [pc, #24]	@ (8007394 <_sbrk_r+0x1c>)
 800737c:	2300      	movs	r3, #0
 800737e:	4604      	mov	r4, r0
 8007380:	4608      	mov	r0, r1
 8007382:	602b      	str	r3, [r5, #0]
 8007384:	f7f9 fc76 	bl	8000c74 <_sbrk>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d102      	bne.n	8007392 <_sbrk_r+0x1a>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	b103      	cbz	r3, 8007392 <_sbrk_r+0x1a>
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	20005600 	.word	0x20005600

08007398 <_realloc_r>:
 8007398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739c:	4607      	mov	r7, r0
 800739e:	4614      	mov	r4, r2
 80073a0:	460d      	mov	r5, r1
 80073a2:	b921      	cbnz	r1, 80073ae <_realloc_r+0x16>
 80073a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073a8:	4611      	mov	r1, r2
 80073aa:	f7ff bc5b 	b.w	8006c64 <_malloc_r>
 80073ae:	b92a      	cbnz	r2, 80073bc <_realloc_r+0x24>
 80073b0:	f7ff fbec 	bl	8006b8c <_free_r>
 80073b4:	4625      	mov	r5, r4
 80073b6:	4628      	mov	r0, r5
 80073b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073bc:	f000 f81a 	bl	80073f4 <_malloc_usable_size_r>
 80073c0:	4284      	cmp	r4, r0
 80073c2:	4606      	mov	r6, r0
 80073c4:	d802      	bhi.n	80073cc <_realloc_r+0x34>
 80073c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073ca:	d8f4      	bhi.n	80073b6 <_realloc_r+0x1e>
 80073cc:	4621      	mov	r1, r4
 80073ce:	4638      	mov	r0, r7
 80073d0:	f7ff fc48 	bl	8006c64 <_malloc_r>
 80073d4:	4680      	mov	r8, r0
 80073d6:	b908      	cbnz	r0, 80073dc <_realloc_r+0x44>
 80073d8:	4645      	mov	r5, r8
 80073da:	e7ec      	b.n	80073b6 <_realloc_r+0x1e>
 80073dc:	42b4      	cmp	r4, r6
 80073de:	4622      	mov	r2, r4
 80073e0:	4629      	mov	r1, r5
 80073e2:	bf28      	it	cs
 80073e4:	4632      	movcs	r2, r6
 80073e6:	f7ff fbc3 	bl	8006b70 <memcpy>
 80073ea:	4629      	mov	r1, r5
 80073ec:	4638      	mov	r0, r7
 80073ee:	f7ff fbcd 	bl	8006b8c <_free_r>
 80073f2:	e7f1      	b.n	80073d8 <_realloc_r+0x40>

080073f4 <_malloc_usable_size_r>:
 80073f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f8:	1f18      	subs	r0, r3, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfbc      	itt	lt
 80073fe:	580b      	ldrlt	r3, [r1, r0]
 8007400:	18c0      	addlt	r0, r0, r3
 8007402:	4770      	bx	lr

08007404 <_init>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	bf00      	nop
 8007408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740a:	bc08      	pop	{r3}
 800740c:	469e      	mov	lr, r3
 800740e:	4770      	bx	lr

08007410 <_fini>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	bf00      	nop
 8007414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007416:	bc08      	pop	{r3}
 8007418:	469e      	mov	lr, r3
 800741a:	4770      	bx	lr
