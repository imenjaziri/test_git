
Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b38  0800d630  0800d630  0000e630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f168  0800f168  00011480  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f168  0800f168  00010168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f170  0800f170  00011480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f170  0800f170  00010170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f174  0800f174  00010174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000480  20000000  0800f178  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000056f4  20000480  0800f5f8  00011480  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005b74  0800f5f8  00011b74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011480  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a659  00000000  00000000  000114b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e19  00000000  00000000  0002bb09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  0002f928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000121f  00000000  00000000  00031080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7bb  00000000  00000000  0003229f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b88c  00000000  00000000  0005ca5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffa73  00000000  00000000  000782e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177d59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000767c  00000000  00000000  00177d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0017f418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000480 	.word	0x20000480
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d618 	.word	0x0800d618

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000484 	.word	0x20000484
 80001cc:	0800d618 	.word	0x0800d618

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a07      	ldr	r2, [pc, #28]	@ (800106c <vApplicationGetIdleTaskMemory+0x2c>)
 8001050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4a06      	ldr	r2, [pc, #24]	@ (8001070 <vApplicationGetIdleTaskMemory+0x30>)
 8001056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200004a4 	.word	0x200004a4
 8001070:	20000544 	.word	0x20000544

08001074 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	b08e      	sub	sp, #56	@ 0x38
 8001078:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <MX_FREERTOS_Init+0x58>)
 800107c:	f107 041c 	add.w	r4, r7, #28
 8001080:	461d      	mov	r5, r3
 8001082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001086:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800108a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f006 f854 	bl	8007142 <osThreadCreate>
 800109a:	4603      	mov	r3, r0
 800109c:	4a0c      	ldr	r2, [pc, #48]	@ (80010d0 <MX_FREERTOS_Init+0x5c>)
 800109e:	6013      	str	r3, [r2, #0]

  /* definition and creation of IHM_Task */
  osThreadDef(IHM_Task, Start_IHM_Task, osPriorityIdle, 0, 1024);
 80010a0:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_FREERTOS_Init+0x60>)
 80010a2:	463c      	mov	r4, r7
 80010a4:	461d      	mov	r5, r3
 80010a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IHM_TaskHandle = osThreadCreate(osThread(IHM_Task), NULL);
 80010b2:	463b      	mov	r3, r7
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f006 f843 	bl	8007142 <osThreadCreate>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <MX_FREERTOS_Init+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010c2:	bf00      	nop
 80010c4:	3738      	adds	r7, #56	@ 0x38
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	0800d63c 	.word	0x0800d63c
 80010d0:	2000049c 	.word	0x2000049c
 80010d4:	0800d664 	.word	0x0800d664
 80010d8:	200004a0 	.word	0x200004a0

080010dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f006 f878 	bl	80071da <osDelay>
 80010ea:	e7fb      	b.n	80010e4 <StartDefaultTask+0x8>

080010ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	4a2a      	ldr	r2, [pc, #168]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110e:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a24      	ldr	r2, [pc, #144]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <MX_GPIO_Init+0xc4>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2120      	movs	r1, #32
 8001166:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116a:	f002 fdb1 	bl	8003cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800116e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001174:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480b      	ldr	r0, [pc, #44]	@ (80011b4 <MX_GPIO_Init+0xc8>)
 8001186:	f002 fbf9 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800118a:	2320      	movs	r3, #32
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a4:	f002 fbea 	bl	800397c <HAL_GPIO_Init>

}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	@ 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000800 	.word	0x48000800

080011b8 <UpperCase>:


}SENSORS;
SENSORS SensorsValues={27.5f,26.0f,0.5f,0.6f,10.0f,50.5f,1.4f,0.7f,5.8f,7.2f};
//Useful functions for the code
void UpperCase(char *str){
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	while (*str)
 80011c0:	e015      	b.n	80011ee <UpperCase+0x36>
	{
		*str=toupper(*str);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <UpperCase+0x4c>)
 80011ce:	4413      	add	r3, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d102      	bne.n	80011e0 <UpperCase+0x28>
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	3b20      	subs	r3, #32
 80011de:	e000      	b.n	80011e2 <UpperCase+0x2a>
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	701a      	strb	r2, [r3, #0]
		str++;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3301      	adds	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
	while (*str)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1e5      	bne.n	80011c2 <UpperCase+0xa>
	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	0800ef68 	.word	0x0800ef68

08001208 <Start_IHM_Task>:

void Start_IHM_Task(void const * argument)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_IHM_Task */
	MainMenu();
 8001210:	f000 f8e2 	bl	80013d8 <MainMenu>
	MessageBufferHandle = xMessageBufferCreate(xMessageBufferSizeBytes);
 8001214:	2364      	movs	r3, #100	@ 0x64
 8001216:	2201      	movs	r2, #1
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f006 f8a5 	bl	800736a <xStreamBufferGenericCreate>
 8001220:	4603      	mov	r3, r0
 8001222:	4a15      	ldr	r2, [pc, #84]	@ (8001278 <Start_IHM_Task+0x70>)
 8001224:	6013      	str	r3, [r2, #0]
	if( MessageBufferHandle != NULL )
 8001226:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <Start_IHM_Task+0x70>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d105      	bne.n	800123a <Start_IHM_Task+0x32>
	{
	}
	else
	{
		HAL_UART_Transmit(&huart2,(uint8_t*)"Error in MessageBuffer Creation\r\n", 34, 100);
 800122e:	2364      	movs	r3, #100	@ 0x64
 8001230:	2222      	movs	r2, #34	@ 0x22
 8001232:	4912      	ldr	r1, [pc, #72]	@ (800127c <Start_IHM_Task+0x74>)
 8001234:	4812      	ldr	r0, [pc, #72]	@ (8001280 <Start_IHM_Task+0x78>)
 8001236:	f004 fbc9 	bl	80059cc <HAL_UART_Transmit>
	}

	/* Infinite loop */
	for(;;)
	{
		xMessageBufferReceive( MessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <Start_IHM_Task+0x70>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	2240      	movs	r2, #64	@ 0x40
 8001244:	490f      	ldr	r1, [pc, #60]	@ (8001284 <Start_IHM_Task+0x7c>)
 8001246:	f006 f9d2 	bl	80075ee <xStreamBufferReceive>
		memset(new_buff,0,sizeof(new_buff));
 800124a:	2240      	movs	r2, #64	@ 0x40
 800124c:	2100      	movs	r1, #0
 800124e:	480e      	ldr	r0, [pc, #56]	@ (8001288 <Start_IHM_Task+0x80>)
 8001250:	f009 fbd7 	bl	800aa02 <memset>
		UpperCase((char*)received_data);
 8001254:	480b      	ldr	r0, [pc, #44]	@ (8001284 <Start_IHM_Task+0x7c>)
 8001256:	f7ff ffaf 	bl	80011b8 <UpperCase>
		tokenization((char*)received_data);
 800125a:	480a      	ldr	r0, [pc, #40]	@ (8001284 <Start_IHM_Task+0x7c>)
 800125c:	f000 f912 	bl	8001484 <tokenization>
		ParseCommand();
 8001260:	f000 f93e 	bl	80014e0 <ParseCommand>
		memset(received_data,0,sizeof(received_data));
 8001264:	2240      	movs	r2, #64	@ 0x40
 8001266:	2100      	movs	r1, #0
 8001268:	4806      	ldr	r0, [pc, #24]	@ (8001284 <Start_IHM_Task+0x7c>)
 800126a:	f009 fbca 	bl	800aa02 <memset>
		osDelay(1);
 800126e:	2001      	movs	r0, #1
 8001270:	f005 ffb3 	bl	80071da <osDelay>
		xMessageBufferReceive( MessageBufferHandle, received_data, sizeof(received_data), portMAX_DELAY);
 8001274:	bf00      	nop
 8001276:	e7e0      	b.n	800123a <Start_IHM_Task+0x32>
 8001278:	2000088c 	.word	0x2000088c
 800127c:	0800d680 	.word	0x0800d680
 8001280:	20000a28 	.word	0x20000a28
 8001284:	2000084c 	.word	0x2000084c
 8001288:	20000784 	.word	0x20000784

0800128c <HAL_UART_RxCpltCallback>:
}

// Fonction pour afficher le menu principal complet


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if (!processing)
 8001294:	4b44      	ldr	r3, [pc, #272]	@ (80013a8 <HAL_UART_RxCpltCallback+0x11c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d17b      	bne.n	8001394 <HAL_UART_RxCpltCallback+0x108>
	{ if ((rxByte == '\r')||(rxByte=='\n'))
 800129c:	4b43      	ldr	r3, [pc, #268]	@ (80013ac <HAL_UART_RxCpltCallback+0x120>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b0d      	cmp	r3, #13
 80012a2:	d003      	beq.n	80012ac <HAL_UART_RxCpltCallback+0x20>
 80012a4:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <HAL_UART_RxCpltCallback+0x120>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b0a      	cmp	r3, #10
 80012aa:	d13a      	bne.n	8001322 <HAL_UART_RxCpltCallback+0x96>
	{   if (rxIndex!=0)
 80012ac:	4b40      	ldr	r3, [pc, #256]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d06f      	beq.n	8001394 <HAL_UART_RxCpltCallback+0x108>
	{
		processing=1;
 80012b4:	4b3c      	ldr	r3, [pc, #240]	@ (80013a8 <HAL_UART_RxCpltCallback+0x11c>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
		rxBuffer[rxIndex] = '\0';
 80012ba:	4b3d      	ldr	r3, [pc, #244]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	4b3c      	ldr	r3, [pc, #240]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 80012c2:	2100      	movs	r1, #0
 80012c4:	5499      	strb	r1, [r3, r2]
		memcpy(new_buff,rxBuffer,rxIndex);
 80012c6:	4b3a      	ldr	r3, [pc, #232]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	4939      	ldr	r1, [pc, #228]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 80012ce:	483a      	ldr	r0, [pc, #232]	@ (80013b8 <HAL_UART_RxCpltCallback+0x12c>)
 80012d0:	f009 fce3 	bl	800ac9a <memcpy>
		xBytesSent=xMessageBufferSendFromISR(MessageBufferHandle,new_buff,strlen((char*)new_buff),&xHigherPriorityTaskWoken);
 80012d4:	4b39      	ldr	r3, [pc, #228]	@ (80013bc <HAL_UART_RxCpltCallback+0x130>)
 80012d6:	681c      	ldr	r4, [r3, #0]
 80012d8:	4837      	ldr	r0, [pc, #220]	@ (80013b8 <HAL_UART_RxCpltCallback+0x12c>)
 80012da:	f7fe ffd9 	bl	8000290 <strlen>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b37      	ldr	r3, [pc, #220]	@ (80013c0 <HAL_UART_RxCpltCallback+0x134>)
 80012e2:	4935      	ldr	r1, [pc, #212]	@ (80013b8 <HAL_UART_RxCpltCallback+0x12c>)
 80012e4:	4620      	mov	r0, r4
 80012e6:	f006 f8d2 	bl	800748e <xStreamBufferSendFromISR>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b35      	ldr	r3, [pc, #212]	@ (80013c4 <HAL_UART_RxCpltCallback+0x138>)
 80012f0:	701a      	strb	r2, [r3, #0]
		//The number of bytes actually written to the message buffer.  If the
		// * message buffer didn't have enough free space for the message to be stored
		// * then 0 is returned, otherwise xDataLengthBytes is returned.
		if( xBytesSent != strlen((char*)new_buff))
 80012f2:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <HAL_UART_RxCpltCallback+0x138>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461c      	mov	r4, r3
 80012f8:	482f      	ldr	r0, [pc, #188]	@ (80013b8 <HAL_UART_RxCpltCallback+0x12c>)
 80012fa:	f7fe ffc9 	bl	8000290 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	429c      	cmp	r4, r3
 8001302:	d005      	beq.n	8001310 <HAL_UART_RxCpltCallback+0x84>
		{
			HAL_UART_Transmit(&huart2, (const uint8_t *)"Message sent !=buffer data\r\n",26,100);
 8001304:	2364      	movs	r3, #100	@ 0x64
 8001306:	221a      	movs	r2, #26
 8001308:	492f      	ldr	r1, [pc, #188]	@ (80013c8 <HAL_UART_RxCpltCallback+0x13c>)
 800130a:	4830      	ldr	r0, [pc, #192]	@ (80013cc <HAL_UART_RxCpltCallback+0x140>)
 800130c:	f004 fb5e 	bl	80059cc <HAL_UART_Transmit>
		}
		memset(rxBuffer,0,sizeof(rxBuffer));
 8001310:	2240      	movs	r2, #64	@ 0x40
 8001312:	2100      	movs	r1, #0
 8001314:	4827      	ldr	r0, [pc, #156]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 8001316:	f009 fb74 	bl	800aa02 <memset>
		rxIndex = 0;}
 800131a:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
	{   if (rxIndex!=0)
 8001320:	e038      	b.n	8001394 <HAL_UART_RxCpltCallback+0x108>
	}

	else { if (rxIndex > 0){
 8001322:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d021      	beq.n	800136e <HAL_UART_RxCpltCallback+0xe2>

		if (rxByte == '\b') {
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <HAL_UART_RxCpltCallback+0x120>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b08      	cmp	r3, #8
 8001330:	d11d      	bne.n	800136e <HAL_UART_RxCpltCallback+0xe2>
			rxBuffer[rxIndex]=' ';
 8001332:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 800133a:	2120      	movs	r1, #32
 800133c:	5499      	strb	r1, [r3, r2]
			rxIndex=rxIndex-1;
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001348:	701a      	strb	r2, [r3, #0]
			rxBuffer[rxIndex]=' ';
 800134a:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 8001352:	2120      	movs	r1, #32
 8001354:	5499      	strb	r1, [r3, r2]
			retour=rxIndex-1;
 8001356:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	3b01      	subs	r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <HAL_UART_RxCpltCallback+0x144>)
 8001360:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(huart, (uint8_t *)" \b", 2, 100);
 8001362:	2364      	movs	r3, #100	@ 0x64
 8001364:	2202      	movs	r2, #2
 8001366:	491b      	ldr	r1, [pc, #108]	@ (80013d4 <HAL_UART_RxCpltCallback+0x148>)
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f004 fb2f 	bl	80059cc <HAL_UART_Transmit>
			//{rxBuffer[i]=rxBuffer[retour++];
			//if (i==retour)
			//rxBuffer[i]='\0';}
		}
	}
	if (rxIndex < RX_BUFFER_SIZE-1) {
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b3e      	cmp	r3, #62	@ 0x3e
 8001374:	d80b      	bhi.n	800138e <HAL_UART_RxCpltCallback+0x102>

		rxBuffer[rxIndex++] = rxByte;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	b2d1      	uxtb	r1, r2
 800137e:	4a0c      	ldr	r2, [pc, #48]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001380:	7011      	strb	r1, [r2, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_UART_RxCpltCallback+0x120>)
 8001386:	7819      	ldrb	r1, [r3, #0]
 8001388:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_UART_RxCpltCallback+0x128>)
 800138a:	5499      	strb	r1, [r3, r2]
 800138c:	e002      	b.n	8001394 <HAL_UART_RxCpltCallback+0x108>
	}
	else {
		rxIndex=0;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <HAL_UART_RxCpltCallback+0x124>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
	}
	}
	}
	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	4905      	ldr	r1, [pc, #20]	@ (80013ac <HAL_UART_RxCpltCallback+0x120>)
 8001398:	480c      	ldr	r0, [pc, #48]	@ (80013cc <HAL_UART_RxCpltCallback+0x140>)
 800139a:	f004 fba1 	bl	8005ae0 <HAL_UART_Receive_IT>
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000894 	.word	0x20000894
 80013ac:	200007c4 	.word	0x200007c4
 80013b0:	200007c5 	.word	0x200007c5
 80013b4:	20000744 	.word	0x20000744
 80013b8:	20000784 	.word	0x20000784
 80013bc:	2000088c 	.word	0x2000088c
 80013c0:	20000890 	.word	0x20000890
 80013c4:	20000848 	.word	0x20000848
 80013c8:	0800d6a4 	.word	0x0800d6a4
 80013cc:	20000a28 	.word	0x20000a28
 80013d0:	20000895 	.word	0x20000895
 80013d4:	0800d6c4 	.word	0x0800d6c4

080013d8 <MainMenu>:
		//SystemConfig Menu
		{"SAVE",(char*)":TO SAVE MODIFIED PARAMETERS PERMANENTLY WRITE SAVE",Save_f,SysConfig_Menu},
		{"RESTORE",(char*)":TO RESTORE OLD PARAMETERS WRITE RESTORE",Restore_f,SysConfig_Menu},

};
void MainMenu(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
	// Afficher tout le menu une seule fois
	currentMenu=Main_Menu;
 80013de:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <MainMenu+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;30;107m----------------Main Menu---------------\033[0m\n \r\n");
 80013e4:	4921      	ldr	r1, [pc, #132]	@ (800146c <MainMenu+0x94>)
 80013e6:	4822      	ldr	r0, [pc, #136]	@ (8001470 <MainMenu+0x98>)
 80013e8:	f009 faa6 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80013ec:	4820      	ldr	r0, [pc, #128]	@ (8001470 <MainMenu+0x98>)
 80013ee:	f7fe ff4f 	bl	8000290 <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	2364      	movs	r3, #100	@ 0x64
 80013f8:	491d      	ldr	r1, [pc, #116]	@ (8001470 <MainMenu+0x98>)
 80013fa:	481e      	ldr	r0, [pc, #120]	@ (8001474 <MainMenu+0x9c>)
 80013fc:	f004 fae6 	bl	80059cc <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001400:	2300      	movs	r3, #0
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	e023      	b.n	800144e <MainMenu+0x76>
	{if (cmd_list[l].MenuIndex==Main_Menu)
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a1b      	ldr	r2, [pc, #108]	@ (8001478 <MainMenu+0xa0>)
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	4413      	add	r3, r2
 800140e:	330c      	adds	r3, #12
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d118      	bne.n	8001448 <MainMenu+0x70>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4a17      	ldr	r2, [pc, #92]	@ (8001478 <MainMenu+0xa0>)
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4413      	add	r3, r2
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4915      	ldr	r1, [pc, #84]	@ (8001478 <MainMenu+0xa0>)
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	440b      	add	r3, r1
 8001428:	3304      	adds	r3, #4
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4913      	ldr	r1, [pc, #76]	@ (800147c <MainMenu+0xa4>)
 800142e:	4810      	ldr	r0, [pc, #64]	@ (8001470 <MainMenu+0x98>)
 8001430:	f009 fa82 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001434:	480e      	ldr	r0, [pc, #56]	@ (8001470 <MainMenu+0x98>)
 8001436:	f7fe ff2b 	bl	8000290 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	2364      	movs	r3, #100	@ 0x64
 8001440:	490b      	ldr	r1, [pc, #44]	@ (8001470 <MainMenu+0x98>)
 8001442:	480c      	ldr	r0, [pc, #48]	@ (8001474 <MainMenu+0x9c>)
 8001444:	f004 fac2 	bl	80059cc <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	3301      	adds	r3, #1
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b25      	cmp	r3, #37	@ 0x25
 8001452:	d9d8      	bls.n	8001406 <MainMenu+0x2e>
	}
	}

	HAL_UART_Receive_IT(&huart2, &rxByte, 1);
 8001454:	2201      	movs	r2, #1
 8001456:	490a      	ldr	r1, [pc, #40]	@ (8001480 <MainMenu+0xa8>)
 8001458:	4806      	ldr	r0, [pc, #24]	@ (8001474 <MainMenu+0x9c>)
 800145a:	f004 fb41 	bl	8005ae0 <HAL_UART_Receive_IT>

}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200009d4 	.word	0x200009d4
 800146c:	0800df5c 	.word	0x0800df5c
 8001470:	200007c8 	.word	0x200007c8
 8001474:	20000a28 	.word	0x20000a28
 8001478:	20000044 	.word	0x20000044
 800147c:	0800df98 	.word	0x0800df98
 8001480:	200007c4 	.word	0x200007c4

08001484 <tokenization>:
void tokenization(char *str) //function to tokenize input string
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	tokens[0]=strtok(str," ");
 800148c:	4912      	ldr	r1, [pc, #72]	@ (80014d8 <tokenization+0x54>)
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f009 fad2 	bl	800aa38 <strtok>
 8001494:	4603      	mov	r3, r0
 8001496:	4a11      	ldr	r2, [pc, #68]	@ (80014dc <tokenization+0x58>)
 8001498:	6013      	str	r3, [r2, #0]
	for (uint8_t i=1; i<10;i++)
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e011      	b.n	80014c4 <tokenization+0x40>
	{   tokens[i]=strtok(NULL," ");
 80014a0:	7bfc      	ldrb	r4, [r7, #15]
 80014a2:	490d      	ldr	r1, [pc, #52]	@ (80014d8 <tokenization+0x54>)
 80014a4:	2000      	movs	r0, #0
 80014a6:	f009 fac7 	bl	800aa38 <strtok>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a0b      	ldr	r2, [pc, #44]	@ (80014dc <tokenization+0x58>)
 80014ae:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (tokens[i]==NULL)
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	4a09      	ldr	r2, [pc, #36]	@ (80014dc <tokenization+0x58>)
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <tokenization+0x48>
	for (uint8_t i=1; i<10;i++)
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	3301      	adds	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b09      	cmp	r3, #9
 80014c8:	d9ea      	bls.n	80014a0 <tokenization+0x1c>
		break;
	}
}
 80014ca:	e000      	b.n	80014ce <tokenization+0x4a>
		break;
 80014cc:	bf00      	nop
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd90      	pop	{r4, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	0800dfa4 	.word	0x0800dfa4
 80014dc:	20000898 	.word	0x20000898

080014e0 <ParseCommand>:
uint8_t cl_elements=sizeof(cmd_list)/sizeof(cmd_list[0]);
void ParseCommand() {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
	uint8_t c=0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	71fb      	strb	r3, [r7, #7]
	uint8_t correspond=0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	71bb      	strb	r3, [r7, #6]
	uint8_t true=0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	717b      	strb	r3, [r7, #5]
	uint8_t goback=0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	713b      	strb	r3, [r7, #4]
	if (strcmp(tokens[0],"..")==0)
 80014f6:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <ParseCommand+0xcc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	492d      	ldr	r1, [pc, #180]	@ (80015b0 <ParseCommand+0xd0>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe fe67 	bl	80001d0 <strcmp>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d135      	bne.n	8001574 <ParseCommand+0x94>
	{MainMenu();
 8001508:	f7ff ff66 	bl	80013d8 <MainMenu>
	goback=1;}
 800150c:	2301      	movs	r3, #1
 800150e:	713b      	strb	r3, [r7, #4]
	while (c<cl_elements)
 8001510:	e030      	b.n	8001574 <ParseCommand+0x94>
	{if (strcmp(tokens[0], cmd_list[c].Name)== 0)
 8001512:	4b26      	ldr	r3, [pc, #152]	@ (80015ac <ParseCommand+0xcc>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4926      	ldr	r1, [pc, #152]	@ (80015b4 <ParseCommand+0xd4>)
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	440b      	add	r3, r1
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f7fe fe54 	bl	80001d0 <strcmp>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d11f      	bne.n	800156e <ParseCommand+0x8e>
	{ true=1;
 800152e:	2301      	movs	r3, #1
 8001530:	717b      	strb	r3, [r7, #5]
	if (currentMenu==cmd_list[c].MenuIndex)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4a1f      	ldr	r2, [pc, #124]	@ (80015b4 <ParseCommand+0xd4>)
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	4413      	add	r3, r2
 800153a:	330c      	adds	r3, #12
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <ParseCommand+0xd8>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d10c      	bne.n	8001560 <ParseCommand+0x80>
	{cmd_list[c].handler(tokens[1]);
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4a1a      	ldr	r2, [pc, #104]	@ (80015b4 <ParseCommand+0xd4>)
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	3308      	adds	r3, #8
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <ParseCommand+0xcc>)
 8001554:	6852      	ldr	r2, [r2, #4]
 8001556:	4610      	mov	r0, r2
 8001558:	4798      	blx	r3
	correspond=1;}
 800155a:	2301      	movs	r3, #1
 800155c:	71bb      	strb	r3, [r7, #6]
	else HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong Menu\r\n",strlen("Wrong Menu\r\n"),100);
	break;
 800155e:	e00e      	b.n	800157e <ParseCommand+0x9e>
	else HAL_UART_Transmit(&huart2, (uint8_t*)"Wrong Menu\r\n",strlen("Wrong Menu\r\n"),100);
 8001560:	2364      	movs	r3, #100	@ 0x64
 8001562:	220c      	movs	r2, #12
 8001564:	4915      	ldr	r1, [pc, #84]	@ (80015bc <ParseCommand+0xdc>)
 8001566:	4816      	ldr	r0, [pc, #88]	@ (80015c0 <ParseCommand+0xe0>)
 8001568:	f004 fa30 	bl	80059cc <HAL_UART_Transmit>
	break;
 800156c:	e007      	b.n	800157e <ParseCommand+0x9e>
	}
	c++;
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	3301      	adds	r3, #1
 8001572:	71fb      	strb	r3, [r7, #7]
	while (c<cl_elements)
 8001574:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <ParseCommand+0xe4>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	79fa      	ldrb	r2, [r7, #7]
 800157a:	429a      	cmp	r2, r3
 800157c:	d3c9      	bcc.n	8001512 <ParseCommand+0x32>
	}
	if (true==0 && correspond==0 && goback==0)
 800157e:	797b      	ldrb	r3, [r7, #5]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10b      	bne.n	800159c <ParseCommand+0xbc>
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d108      	bne.n	800159c <ParseCommand+0xbc>
 800158a:	793b      	ldrb	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <ParseCommand+0xbc>
		HAL_UART_Transmit(&huart2, (uint8_t*)"COMMAND ERROR\r\n",16,100);
 8001590:	2364      	movs	r3, #100	@ 0x64
 8001592:	2210      	movs	r2, #16
 8001594:	490c      	ldr	r1, [pc, #48]	@ (80015c8 <ParseCommand+0xe8>)
 8001596:	480a      	ldr	r0, [pc, #40]	@ (80015c0 <ParseCommand+0xe0>)
 8001598:	f004 fa18 	bl	80059cc <HAL_UART_Transmit>

	processing=0;
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <ParseCommand+0xec>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000898 	.word	0x20000898
 80015b0:	0800dfa8 	.word	0x0800dfa8
 80015b4:	20000044 	.word	0x20000044
 80015b8:	200009d4 	.word	0x200009d4
 80015bc:	0800dfac 	.word	0x0800dfac
 80015c0:	20000a28 	.word	0x20000a28
 80015c4:	200002a4 	.word	0x200002a4
 80015c8:	0800dfbc 	.word	0x0800dfbc
 80015cc:	20000894 	.word	0x20000894

080015d0 <LoraMenu>:

/*//////////////////////////////////////////////LORA MENU\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
void LoraMenu(char* arg){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

	currentMenu=Lora_Menu;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <LoraMenu+0x88>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;38;2;25;25;112;107m--------------- LORA Menu ---------------\033[0m\n \r\n");
 80015de:	491f      	ldr	r1, [pc, #124]	@ (800165c <LoraMenu+0x8c>)
 80015e0:	481f      	ldr	r0, [pc, #124]	@ (8001660 <LoraMenu+0x90>)
 80015e2:	f009 f9a9 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80015e6:	481e      	ldr	r0, [pc, #120]	@ (8001660 <LoraMenu+0x90>)
 80015e8:	f7fe fe52 	bl	8000290 <strlen>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	2364      	movs	r3, #100	@ 0x64
 80015f2:	491b      	ldr	r1, [pc, #108]	@ (8001660 <LoraMenu+0x90>)
 80015f4:	481b      	ldr	r0, [pc, #108]	@ (8001664 <LoraMenu+0x94>)
 80015f6:	f004 f9e9 	bl	80059cc <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e023      	b.n	8001648 <LoraMenu+0x78>
	{if (cmd_list[l].MenuIndex==Lora_Menu)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	4a19      	ldr	r2, [pc, #100]	@ (8001668 <LoraMenu+0x98>)
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	330c      	adds	r3, #12
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d118      	bne.n	8001642 <LoraMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	4a15      	ldr	r2, [pc, #84]	@ (8001668 <LoraMenu+0x98>)
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	4413      	add	r3, r2
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	4912      	ldr	r1, [pc, #72]	@ (8001668 <LoraMenu+0x98>)
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	440b      	add	r3, r1
 8001622:	3304      	adds	r3, #4
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4911      	ldr	r1, [pc, #68]	@ (800166c <LoraMenu+0x9c>)
 8001628:	480d      	ldr	r0, [pc, #52]	@ (8001660 <LoraMenu+0x90>)
 800162a:	f009 f985 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 800162e:	480c      	ldr	r0, [pc, #48]	@ (8001660 <LoraMenu+0x90>)
 8001630:	f7fe fe2e 	bl	8000290 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	2364      	movs	r3, #100	@ 0x64
 800163a:	4909      	ldr	r1, [pc, #36]	@ (8001660 <LoraMenu+0x90>)
 800163c:	4809      	ldr	r0, [pc, #36]	@ (8001664 <LoraMenu+0x94>)
 800163e:	f004 f9c5 	bl	80059cc <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	3301      	adds	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b25      	cmp	r3, #37	@ 0x25
 800164c:	d9d8      	bls.n	8001600 <LoraMenu+0x30>
	}
	}
}
 800164e:	bf00      	nop
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200009d4 	.word	0x200009d4
 800165c:	0800dfcc 	.word	0x0800dfcc
 8001660:	200007c8 	.word	0x200007c8
 8001664:	20000a28 	.word	0x20000a28
 8001668:	20000044 	.word	0x20000044
 800166c:	0800df98 	.word	0x0800df98

08001670 <SetSF_f>:
void SetSF_f(char* arg){
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	uint8_t success = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]

	if (tokens[1] != NULL && strlen(tokens[1]) < 3) {
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <SetSF_f+0x84>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d024      	beq.n	80016ce <SetSF_f+0x5e>
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <SetSF_f+0x84>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fe01 	bl	8000290 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	2b02      	cmp	r3, #2
 8001692:	d81c      	bhi.n	80016ce <SetSF_f+0x5e>
		int sf_new_value = atoi(tokens[1]);
 8001694:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <SetSF_f+0x84>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4618      	mov	r0, r3
 800169a:	f007 fd98 	bl	80091ce <atoi>
 800169e:	60b8      	str	r0, [r7, #8]

		if (sf_new_value >= MIN_SF && sf_new_value <= MAX_SF) {
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	dd13      	ble.n	80016ce <SetSF_f+0x5e>
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b0c      	cmp	r3, #12
 80016aa:	dc10      	bgt.n	80016ce <SetSF_f+0x5e>
			sprintf((char*)cmd_buff, "SF VALUE SET TO %d SUCCESSFULLY\r\n", sf_new_value);
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	4912      	ldr	r1, [pc, #72]	@ (80016f8 <SetSF_f+0x88>)
 80016b0:	4812      	ldr	r0, [pc, #72]	@ (80016fc <SetSF_f+0x8c>)
 80016b2:	f009 f941 	bl	800a938 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80016b6:	4811      	ldr	r0, [pc, #68]	@ (80016fc <SetSF_f+0x8c>)
 80016b8:	f7fe fdea 	bl	8000290 <strlen>
 80016bc:	4603      	mov	r3, r0
 80016be:	b29a      	uxth	r2, r3
 80016c0:	2364      	movs	r3, #100	@ 0x64
 80016c2:	490e      	ldr	r1, [pc, #56]	@ (80016fc <SetSF_f+0x8c>)
 80016c4:	480e      	ldr	r0, [pc, #56]	@ (8001700 <SetSF_f+0x90>)
 80016c6:	f004 f981 	bl	80059cc <HAL_UART_Transmit>
			success = 1;
 80016ca:	2301      	movs	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (success==0) {
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <SetSF_f+0x70>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 80016d4:	2364      	movs	r3, #100	@ 0x64
 80016d6:	2210      	movs	r2, #16
 80016d8:	490a      	ldr	r1, [pc, #40]	@ (8001704 <SetSF_f+0x94>)
 80016da:	4809      	ldr	r0, [pc, #36]	@ (8001700 <SetSF_f+0x90>)
 80016dc:	f004 f976 	bl	80059cc <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));  // always clear at the end
 80016e0:	22b4      	movs	r2, #180	@ 0xb4
 80016e2:	2100      	movs	r1, #0
 80016e4:	4805      	ldr	r0, [pc, #20]	@ (80016fc <SetSF_f+0x8c>)
 80016e6:	f009 f98c 	bl	800aa02 <memset>
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000898 	.word	0x20000898
 80016f8:	0800e018 	.word	0x0800e018
 80016fc:	200008c4 	.word	0x200008c4
 8001700:	20000a28 	.word	0x20000a28
 8001704:	0800e03c 	.word	0x0800e03c

08001708 <GetSF_f>:
	LoraValues.sf_l=0x0C;
}

}*/
void GetSF_f(char* arg)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"SF VALUE IS %d \r\nNote: DEFAULT VALUE IS %d",Sf_New_Value,LoraValues.sf_l);
 8001710:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <GetSF_f+0x40>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <GetSF_f+0x44>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	490d      	ldr	r1, [pc, #52]	@ (8001750 <GetSF_f+0x48>)
 800171c:	480d      	ldr	r0, [pc, #52]	@ (8001754 <GetSF_f+0x4c>)
 800171e:	f009 f90b 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001722:	480c      	ldr	r0, [pc, #48]	@ (8001754 <GetSF_f+0x4c>)
 8001724:	f7fe fdb4 	bl	8000290 <strlen>
 8001728:	4603      	mov	r3, r0
 800172a:	b29a      	uxth	r2, r3
 800172c:	2364      	movs	r3, #100	@ 0x64
 800172e:	4909      	ldr	r1, [pc, #36]	@ (8001754 <GetSF_f+0x4c>)
 8001730:	4809      	ldr	r0, [pc, #36]	@ (8001758 <GetSF_f+0x50>)
 8001732:	f004 f94b 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001736:	22b4      	movs	r2, #180	@ 0xb4
 8001738:	2100      	movs	r1, #0
 800173a:	4806      	ldr	r0, [pc, #24]	@ (8001754 <GetSF_f+0x4c>)
 800173c:	f009 f961 	bl	800aa02 <memset>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200008c0 	.word	0x200008c0
 800174c:	20000004 	.word	0x20000004
 8001750:	0800e04c 	.word	0x0800e04c
 8001754:	200008c4 	.word	0x200008c4
 8001758:	20000a28 	.word	0x20000a28

0800175c <SetCR_f>:
void SetCR_f(char* arg)
{   uint8_t cr_flag=0;
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b089      	sub	sp, #36	@ 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	2300      	movs	r3, #0
 8001766:	77fb      	strb	r3, [r7, #31]
char* CR_Values[]={"1","2","3","4"};
 8001768:	4b28      	ldr	r3, [pc, #160]	@ (800180c <SetCR_f+0xb0>)
 800176a:	f107 040c 	add.w	r4, r7, #12
 800176e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001770:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
for (uint8_t cr=0 ; cr<sizeof(CR_Values) / sizeof(CR_Values[0]);cr++)
 8001774:	2300      	movs	r3, #0
 8001776:	77bb      	strb	r3, [r7, #30]
 8001778:	e037      	b.n	80017ea <SetCR_f+0x8e>
{if (tokens[1]!=NULL &&
 800177a:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <SetCR_f+0xb4>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d030      	beq.n	80017e4 <SetCR_f+0x88>
		strcmp(tokens[1],CR_Values[cr])==0)
 8001782:	4b23      	ldr	r3, [pc, #140]	@ (8001810 <SetCR_f+0xb4>)
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	7fbb      	ldrb	r3, [r7, #30]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	3320      	adds	r3, #32
 800178c:	443b      	add	r3, r7
 800178e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f7fe fd1b 	bl	80001d0 <strcmp>
 800179a:	4603      	mov	r3, r0
{if (tokens[1]!=NULL &&
 800179c:	2b00      	cmp	r3, #0
 800179e:	d121      	bne.n	80017e4 <SetCR_f+0x88>
{Cr_New_Value=atoi(tokens[1]);
 80017a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001810 <SetCR_f+0xb4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f007 fd12 	bl	80091ce <atoi>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <SetCR_f+0xb8>)
 80017b0:	701a      	strb	r2, [r3, #0]
cr_flag=1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	77fb      	strb	r3, [r7, #31]
sprintf((char*)cmd_buff, "CR VALUE SET TO %d SUCCESSFULLY\r\n", Cr_New_Value);
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <SetCR_f+0xb8>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	4916      	ldr	r1, [pc, #88]	@ (8001818 <SetCR_f+0xbc>)
 80017be:	4817      	ldr	r0, [pc, #92]	@ (800181c <SetCR_f+0xc0>)
 80017c0:	f009 f8ba 	bl	800a938 <siprintf>
HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80017c4:	4815      	ldr	r0, [pc, #84]	@ (800181c <SetCR_f+0xc0>)
 80017c6:	f7fe fd63 	bl	8000290 <strlen>
 80017ca:	4603      	mov	r3, r0
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	2364      	movs	r3, #100	@ 0x64
 80017d0:	4912      	ldr	r1, [pc, #72]	@ (800181c <SetCR_f+0xc0>)
 80017d2:	4813      	ldr	r0, [pc, #76]	@ (8001820 <SetCR_f+0xc4>)
 80017d4:	f004 f8fa 	bl	80059cc <HAL_UART_Transmit>
memset(cmd_buff,0,sizeof(cmd_buff));
 80017d8:	22b4      	movs	r2, #180	@ 0xb4
 80017da:	2100      	movs	r1, #0
 80017dc:	480f      	ldr	r0, [pc, #60]	@ (800181c <SetCR_f+0xc0>)
 80017de:	f009 f910 	bl	800aa02 <memset>
break;
 80017e2:	e005      	b.n	80017f0 <SetCR_f+0x94>
for (uint8_t cr=0 ; cr<sizeof(CR_Values) / sizeof(CR_Values[0]);cr++)
 80017e4:	7fbb      	ldrb	r3, [r7, #30]
 80017e6:	3301      	adds	r3, #1
 80017e8:	77bb      	strb	r3, [r7, #30]
 80017ea:	7fbb      	ldrb	r3, [r7, #30]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d9c4      	bls.n	800177a <SetCR_f+0x1e>
}
}

if (cr_flag==0)
 80017f0:	7ffb      	ldrb	r3, [r7, #31]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d105      	bne.n	8001802 <SetCR_f+0xa6>
	HAL_UART_Transmit(&huart2,(const uint8_t*)"WRONG CR VALUE\r\n",strlen("WRONG CR VALUE\r\n"), 100);
 80017f6:	2364      	movs	r3, #100	@ 0x64
 80017f8:	2210      	movs	r2, #16
 80017fa:	490a      	ldr	r1, [pc, #40]	@ (8001824 <SetCR_f+0xc8>)
 80017fc:	4808      	ldr	r0, [pc, #32]	@ (8001820 <SetCR_f+0xc4>)
 80017fe:	f004 f8e5 	bl	80059cc <HAL_UART_Transmit>
}
 8001802:	bf00      	nop
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	0800e0c0 	.word	0x0800e0c0
 8001810:	20000898 	.word	0x20000898
 8001814:	20000978 	.word	0x20000978
 8001818:	0800e078 	.word	0x0800e078
 800181c:	200008c4 	.word	0x200008c4
 8001820:	20000a28 	.word	0x20000a28
 8001824:	0800e09c 	.word	0x0800e09c

08001828 <GetCR_f>:

void GetCR_f(char* arg)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"CR VALUE IS %d \r\nNote:DEFAULTVALUE IS : %d\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Cr_New_Value,LoraValues.cr_l);
 8001830:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <GetCR_f+0x40>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <GetCR_f+0x44>)
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	490d      	ldr	r1, [pc, #52]	@ (8001870 <GetCR_f+0x48>)
 800183c:	480d      	ldr	r0, [pc, #52]	@ (8001874 <GetCR_f+0x4c>)
 800183e:	f009 f87b 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001842:	480c      	ldr	r0, [pc, #48]	@ (8001874 <GetCR_f+0x4c>)
 8001844:	f7fe fd24 	bl	8000290 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	2364      	movs	r3, #100	@ 0x64
 800184e:	4909      	ldr	r1, [pc, #36]	@ (8001874 <GetCR_f+0x4c>)
 8001850:	4809      	ldr	r0, [pc, #36]	@ (8001878 <GetCR_f+0x50>)
 8001852:	f004 f8bb 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001856:	22b4      	movs	r2, #180	@ 0xb4
 8001858:	2100      	movs	r1, #0
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <GetCR_f+0x4c>)
 800185c:	f009 f8d1 	bl	800aa02 <memset>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000978 	.word	0x20000978
 800186c:	20000004 	.word	0x20000004
 8001870:	0800e0d0 	.word	0x0800e0d0
 8001874:	200008c4 	.word	0x200008c4
 8001878:	20000a28 	.word	0x20000a28

0800187c <SetBW_f>:
void SetBW_f(char* arg)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	uint8_t bw_flag=0;
 8001884:	2300      	movs	r3, #0
 8001886:	75fb      	strb	r3, [r7, #23]
	char* BW_Values[]={"4","5","6"};
 8001888:	4a28      	ldr	r2, [pc, #160]	@ (800192c <SetBW_f+0xb0>)
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001890:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for (uint8_t bw=0 ; bw<sizeof(BW_Values) / sizeof(BW_Values[0]);bw++)
 8001894:	2300      	movs	r3, #0
 8001896:	75bb      	strb	r3, [r7, #22]
 8001898:	e037      	b.n	800190a <SetBW_f+0x8e>
	{if (tokens[1]!=NULL &&
 800189a:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <SetBW_f+0xb4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d030      	beq.n	8001904 <SetBW_f+0x88>
			strcmp(tokens[1],BW_Values[bw])==0)
 80018a2:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <SetBW_f+0xb4>)
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	7dbb      	ldrb	r3, [r7, #22]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	3318      	adds	r3, #24
 80018ac:	443b      	add	r3, r7
 80018ae:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80018b2:	4619      	mov	r1, r3
 80018b4:	4610      	mov	r0, r2
 80018b6:	f7fe fc8b 	bl	80001d0 <strcmp>
 80018ba:	4603      	mov	r3, r0
	{if (tokens[1]!=NULL &&
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d121      	bne.n	8001904 <SetBW_f+0x88>
	{Bw_New_Value=atoi(tokens[1]);
 80018c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <SetBW_f+0xb4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f007 fc82 	bl	80091ce <atoi>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <SetBW_f+0xb8>)
 80018d0:	701a      	strb	r2, [r3, #0]
	bw_flag=1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75fb      	strb	r3, [r7, #23]
	sprintf((char*)cmd_buff, "BW VALUE SET TO %d SUCCESSFULLY\r\n", Bw_New_Value);
 80018d6:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <SetBW_f+0xb8>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4916      	ldr	r1, [pc, #88]	@ (8001938 <SetBW_f+0xbc>)
 80018de:	4817      	ldr	r0, [pc, #92]	@ (800193c <SetBW_f+0xc0>)
 80018e0:	f009 f82a 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80018e4:	4815      	ldr	r0, [pc, #84]	@ (800193c <SetBW_f+0xc0>)
 80018e6:	f7fe fcd3 	bl	8000290 <strlen>
 80018ea:	4603      	mov	r3, r0
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	2364      	movs	r3, #100	@ 0x64
 80018f0:	4912      	ldr	r1, [pc, #72]	@ (800193c <SetBW_f+0xc0>)
 80018f2:	4813      	ldr	r0, [pc, #76]	@ (8001940 <SetBW_f+0xc4>)
 80018f4:	f004 f86a 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80018f8:	22b4      	movs	r2, #180	@ 0xb4
 80018fa:	2100      	movs	r1, #0
 80018fc:	480f      	ldr	r0, [pc, #60]	@ (800193c <SetBW_f+0xc0>)
 80018fe:	f009 f880 	bl	800aa02 <memset>
	break;
 8001902:	e005      	b.n	8001910 <SetBW_f+0x94>
	for (uint8_t bw=0 ; bw<sizeof(BW_Values) / sizeof(BW_Values[0]);bw++)
 8001904:	7dbb      	ldrb	r3, [r7, #22]
 8001906:	3301      	adds	r3, #1
 8001908:	75bb      	strb	r3, [r7, #22]
 800190a:	7dbb      	ldrb	r3, [r7, #22]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d9c4      	bls.n	800189a <SetBW_f+0x1e>
	}
	}

	if (bw_flag==0)
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <SetBW_f+0xa6>
		HAL_UART_Transmit(&huart2,(const uint8_t*)"WRONG BW VALUE\r\n",strlen("WRONG CR VALUE\r\n"), 100);
 8001916:	2364      	movs	r3, #100	@ 0x64
 8001918:	2210      	movs	r2, #16
 800191a:	490a      	ldr	r1, [pc, #40]	@ (8001944 <SetBW_f+0xc8>)
 800191c:	4808      	ldr	r0, [pc, #32]	@ (8001940 <SetBW_f+0xc4>)
 800191e:	f004 f855 	bl	80059cc <HAL_UART_Transmit>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	0800e164 	.word	0x0800e164
 8001930:	20000898 	.word	0x20000898
 8001934:	20000979 	.word	0x20000979
 8001938:	0800e124 	.word	0x0800e124
 800193c:	200008c4 	.word	0x200008c4
 8001940:	20000a28 	.word	0x20000a28
 8001944:	0800e148 	.word	0x0800e148

08001948 <GetBW_f>:
void GetBW_f(char* arg)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"BW VALUE IS : %d \r\nNote:DEFAULT VALUE IS : %d\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Bw_New_Value,LoraValues.bw_l);
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <GetBW_f+0x40>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <GetBW_f+0x44>)
 8001958:	789b      	ldrb	r3, [r3, #2]
 800195a:	490d      	ldr	r1, [pc, #52]	@ (8001990 <GetBW_f+0x48>)
 800195c:	480d      	ldr	r0, [pc, #52]	@ (8001994 <GetBW_f+0x4c>)
 800195e:	f008 ffeb 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001962:	480c      	ldr	r0, [pc, #48]	@ (8001994 <GetBW_f+0x4c>)
 8001964:	f7fe fc94 	bl	8000290 <strlen>
 8001968:	4603      	mov	r3, r0
 800196a:	b29a      	uxth	r2, r3
 800196c:	2364      	movs	r3, #100	@ 0x64
 800196e:	4909      	ldr	r1, [pc, #36]	@ (8001994 <GetBW_f+0x4c>)
 8001970:	4809      	ldr	r0, [pc, #36]	@ (8001998 <GetBW_f+0x50>)
 8001972:	f004 f82b 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001976:	22b4      	movs	r2, #180	@ 0xb4
 8001978:	2100      	movs	r1, #0
 800197a:	4806      	ldr	r0, [pc, #24]	@ (8001994 <GetBW_f+0x4c>)
 800197c:	f009 f841 	bl	800aa02 <memset>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000979 	.word	0x20000979
 800198c:	20000004 	.word	0x20000004
 8001990:	0800e170 	.word	0x0800e170
 8001994:	200008c4 	.word	0x200008c4
 8001998:	20000a28 	.word	0x20000a28

0800199c <GPSMenu>:


/*//////////////////////////////////////////////GPS MENU\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

void GPSMenu(char* arg){
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	currentMenu=GPS_Menu;
 80019a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <GPSMenu+0x88>)
 80019a6:	2202      	movs	r2, #2
 80019a8:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;34;107m-----------------GPS Menu---------------\033[0m\n \r\n");
 80019aa:	491f      	ldr	r1, [pc, #124]	@ (8001a28 <GPSMenu+0x8c>)
 80019ac:	481f      	ldr	r0, [pc, #124]	@ (8001a2c <GPSMenu+0x90>)
 80019ae:	f008 ffc3 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80019b2:	481e      	ldr	r0, [pc, #120]	@ (8001a2c <GPSMenu+0x90>)
 80019b4:	f7fe fc6c 	bl	8000290 <strlen>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	2364      	movs	r3, #100	@ 0x64
 80019be:	491b      	ldr	r1, [pc, #108]	@ (8001a2c <GPSMenu+0x90>)
 80019c0:	481b      	ldr	r0, [pc, #108]	@ (8001a30 <GPSMenu+0x94>)
 80019c2:	f004 f803 	bl	80059cc <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
 80019ca:	e023      	b.n	8001a14 <GPSMenu+0x78>
	{if (cmd_list[l].MenuIndex==GPS_Menu)
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <GPSMenu+0x98>)
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4413      	add	r3, r2
 80019d4:	330c      	adds	r3, #12
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d118      	bne.n	8001a0e <GPSMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	4a15      	ldr	r2, [pc, #84]	@ (8001a34 <GPSMenu+0x98>)
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4413      	add	r3, r2
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	4912      	ldr	r1, [pc, #72]	@ (8001a34 <GPSMenu+0x98>)
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	440b      	add	r3, r1
 80019ee:	3304      	adds	r3, #4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4911      	ldr	r1, [pc, #68]	@ (8001a38 <GPSMenu+0x9c>)
 80019f4:	480d      	ldr	r0, [pc, #52]	@ (8001a2c <GPSMenu+0x90>)
 80019f6:	f008 ff9f 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80019fa:	480c      	ldr	r0, [pc, #48]	@ (8001a2c <GPSMenu+0x90>)
 80019fc:	f7fe fc48 	bl	8000290 <strlen>
 8001a00:	4603      	mov	r3, r0
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	2364      	movs	r3, #100	@ 0x64
 8001a06:	4909      	ldr	r1, [pc, #36]	@ (8001a2c <GPSMenu+0x90>)
 8001a08:	4809      	ldr	r0, [pc, #36]	@ (8001a30 <GPSMenu+0x94>)
 8001a0a:	f003 ffdf 	bl	80059cc <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	3301      	adds	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b25      	cmp	r3, #37	@ 0x25
 8001a18:	d9d8      	bls.n	80019cc <GPSMenu+0x30>
	}
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200009d4 	.word	0x200009d4
 8001a28:	0800e1c8 	.word	0x0800e1c8
 8001a2c:	200007c8 	.word	0x200007c8
 8001a30:	20000a28 	.word	0x20000a28
 8001a34:	20000044 	.word	0x20000044
 8001a38:	0800df98 	.word	0x0800df98

08001a3c <SetAltGPS_f>:

void SetAltGPS_f(char* arg){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	uint8_t gpsalt_flag = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 12) {
 8001a48:	4b2d      	ldr	r3, [pc, #180]	@ (8001b00 <SetAltGPS_f+0xc4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d052      	beq.n	8001af6 <SetAltGPS_f+0xba>
 8001a50:	4b2b      	ldr	r3, [pc, #172]	@ (8001b00 <SetAltGPS_f+0xc4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fc1b 	bl	8000290 <strlen>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b0b      	cmp	r3, #11
 8001a5e:	d84a      	bhi.n	8001af6 <SetAltGPS_f+0xba>
		AltGps_New_Value = atoi(tokens[1]);
 8001a60:	4b27      	ldr	r3, [pc, #156]	@ (8001b00 <SetAltGPS_f+0xc4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f007 fbb2 	bl	80091ce <atoi>
 8001a6a:	ee07 0a90 	vmov	s15, r0
 8001a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a72:	4b24      	ldr	r3, [pc, #144]	@ (8001b04 <SetAltGPS_f+0xc8>)
 8001a74:	edc3 7a00 	vstr	s15, [r3]
		if (TimeGps_New_Value >MIN_GPS_ALT && TimeGps_New_Value <MAX_GPS_ALT){
 8001a78:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <SetAltGPS_f+0xcc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a84:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001b0c <SetAltGPS_f+0xd0>
 8001a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a90:	dd23      	ble.n	8001ada <SetAltGPS_f+0x9e>
 8001a92:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <SetAltGPS_f+0xcc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a9e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001b10 <SetAltGPS_f+0xd4>
 8001aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	d516      	bpl.n	8001ada <SetAltGPS_f+0x9e>
			sprintf((char*)cmd_buff, "GPS ALTITUDE VALUE SET TO %.2f SUCCESSFULLY\r\n", AltGps_New_Value);
 8001aac:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <SetAltGPS_f+0xc8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd59 	bl	8000568 <__aeabi_f2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4916      	ldr	r1, [pc, #88]	@ (8001b14 <SetAltGPS_f+0xd8>)
 8001abc:	4816      	ldr	r0, [pc, #88]	@ (8001b18 <SetAltGPS_f+0xdc>)
 8001abe:	f008 ff3b 	bl	800a938 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001ac2:	4815      	ldr	r0, [pc, #84]	@ (8001b18 <SetAltGPS_f+0xdc>)
 8001ac4:	f7fe fbe4 	bl	8000290 <strlen>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	2364      	movs	r3, #100	@ 0x64
 8001ace:	4912      	ldr	r1, [pc, #72]	@ (8001b18 <SetAltGPS_f+0xdc>)
 8001ad0:	4812      	ldr	r0, [pc, #72]	@ (8001b1c <SetAltGPS_f+0xe0>)
 8001ad2:	f003 ff7b 	bl	80059cc <HAL_UART_Transmit>
			gpsalt_flag = 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
		}


		if (gpsalt_flag==0) {
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <SetAltGPS_f+0xb0>
			HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8001ae0:	2364      	movs	r3, #100	@ 0x64
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	490e      	ldr	r1, [pc, #56]	@ (8001b20 <SetAltGPS_f+0xe4>)
 8001ae6:	480d      	ldr	r0, [pc, #52]	@ (8001b1c <SetAltGPS_f+0xe0>)
 8001ae8:	f003 ff70 	bl	80059cc <HAL_UART_Transmit>
		}

		memset(cmd_buff, 0, sizeof(cmd_buff));
 8001aec:	22b4      	movs	r2, #180	@ 0xb4
 8001aee:	2100      	movs	r1, #0
 8001af0:	4809      	ldr	r0, [pc, #36]	@ (8001b18 <SetAltGPS_f+0xdc>)
 8001af2:	f008 ff86 	bl	800aa02 <memset>

	}
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000898 	.word	0x20000898
 8001b04:	20000980 	.word	0x20000980
 8001b08:	2000097c 	.word	0x2000097c
 8001b0c:	c3d70000 	.word	0xc3d70000
 8001b10:	463b8000 	.word	0x463b8000
 8001b14:	0800e204 	.word	0x0800e204
 8001b18:	200008c4 	.word	0x200008c4
 8001b1c:	20000a28 	.word	0x20000a28
 8001b20:	0800e03c 	.word	0x0800e03c

08001b24 <GetAltGPS_f>:
void GetAltGPS_f(char* arg){
 8001b24:	b5b0      	push	{r4, r5, r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"GPS ALTITUDE VALUE IS : %.2f \r\nGPS ALTITUDE  DEFAULT VALUE IS : %.2f\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",AltGps_New_Value,Gps.alt_gps);
 8001b2c:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <GetAltGPS_f+0x5c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd19 	bl	8000568 <__aeabi_f2d>
 8001b36:	4604      	mov	r4, r0
 8001b38:	460d      	mov	r5, r1
 8001b3a:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <GetAltGPS_f+0x60>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fd12 	bl	8000568 <__aeabi_f2d>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9cd 2300 	strd	r2, r3, [sp]
 8001b4c:	4622      	mov	r2, r4
 8001b4e:	462b      	mov	r3, r5
 8001b50:	490d      	ldr	r1, [pc, #52]	@ (8001b88 <GetAltGPS_f+0x64>)
 8001b52:	480e      	ldr	r0, [pc, #56]	@ (8001b8c <GetAltGPS_f+0x68>)
 8001b54:	f008 fef0 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001b58:	480c      	ldr	r0, [pc, #48]	@ (8001b8c <GetAltGPS_f+0x68>)
 8001b5a:	f7fe fb99 	bl	8000290 <strlen>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	2364      	movs	r3, #100	@ 0x64
 8001b64:	4909      	ldr	r1, [pc, #36]	@ (8001b8c <GetAltGPS_f+0x68>)
 8001b66:	480a      	ldr	r0, [pc, #40]	@ (8001b90 <GetAltGPS_f+0x6c>)
 8001b68:	f003 ff30 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001b6c:	22b4      	movs	r2, #180	@ 0xb4
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4806      	ldr	r0, [pc, #24]	@ (8001b8c <GetAltGPS_f+0x68>)
 8001b72:	f008 ff46 	bl	800aa02 <memset>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000980 	.word	0x20000980
 8001b84:	20000008 	.word	0x20000008
 8001b88:	0800e234 	.word	0x0800e234
 8001b8c:	200008c4 	.word	0x200008c4
 8001b90:	20000a28 	.word	0x20000a28

08001b94 <SetLatGPS_f>:
void SetLatGPS_f(char* arg){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	uint8_t gpslat_flag = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 12) {
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c50 <SetLatGPS_f+0xbc>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d04f      	beq.n	8001c48 <SetLatGPS_f+0xb4>
 8001ba8:	4b29      	ldr	r3, [pc, #164]	@ (8001c50 <SetLatGPS_f+0xbc>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fb6f 	bl	8000290 <strlen>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b0b      	cmp	r3, #11
 8001bb6:	d847      	bhi.n	8001c48 <SetLatGPS_f+0xb4>
		LatGps_New_Value = atoi(tokens[1]);
 8001bb8:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <SetLatGPS_f+0xbc>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f007 fb06 	bl	80091ce <atoi>
 8001bc2:	ee07 0a90 	vmov	s15, r0
 8001bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bca:	4b22      	ldr	r3, [pc, #136]	@ (8001c54 <SetLatGPS_f+0xc0>)
 8001bcc:	edc3 7a00 	vstr	s15, [r3]
		if (LatGps_New_Value >MIN_GPS_LAT && TimeGps_New_Value <MAX_GPS_LAT){
 8001bd0:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <SetLatGPS_f+0xc0>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001c58 <SetLatGPS_f+0xc4>
 8001bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be2:	dd23      	ble.n	8001c2c <SetLatGPS_f+0x98>
 8001be4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <SetLatGPS_f+0xc8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001c60 <SetLatGPS_f+0xcc>
 8001bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	d516      	bpl.n	8001c2c <SetLatGPS_f+0x98>
			sprintf((char*)cmd_buff, "GPS LATITUDE VALUE SET TO %.2f SUCCESSFULLY\r\n", LatGps_New_Value);
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <SetLatGPS_f+0xc0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcb0 	bl	8000568 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4915      	ldr	r1, [pc, #84]	@ (8001c64 <SetLatGPS_f+0xd0>)
 8001c0e:	4816      	ldr	r0, [pc, #88]	@ (8001c68 <SetLatGPS_f+0xd4>)
 8001c10:	f008 fe92 	bl	800a938 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001c14:	4814      	ldr	r0, [pc, #80]	@ (8001c68 <SetLatGPS_f+0xd4>)
 8001c16:	f7fe fb3b 	bl	8000290 <strlen>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	2364      	movs	r3, #100	@ 0x64
 8001c20:	4911      	ldr	r1, [pc, #68]	@ (8001c68 <SetLatGPS_f+0xd4>)
 8001c22:	4812      	ldr	r0, [pc, #72]	@ (8001c6c <SetLatGPS_f+0xd8>)
 8001c24:	f003 fed2 	bl	80059cc <HAL_UART_Transmit>
			gpslat_flag = 1;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
		}


		if (gpslat_flag==0) {
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d105      	bne.n	8001c3e <SetLatGPS_f+0xaa>
			HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8001c32:	2364      	movs	r3, #100	@ 0x64
 8001c34:	2210      	movs	r2, #16
 8001c36:	490e      	ldr	r1, [pc, #56]	@ (8001c70 <SetLatGPS_f+0xdc>)
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <SetLatGPS_f+0xd8>)
 8001c3a:	f003 fec7 	bl	80059cc <HAL_UART_Transmit>
		}

		memset(cmd_buff, 0, sizeof(cmd_buff));
 8001c3e:	22b4      	movs	r2, #180	@ 0xb4
 8001c40:	2100      	movs	r1, #0
 8001c42:	4809      	ldr	r0, [pc, #36]	@ (8001c68 <SetLatGPS_f+0xd4>)
 8001c44:	f008 fedd 	bl	800aa02 <memset>

	}
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000898 	.word	0x20000898
 8001c54:	20000984 	.word	0x20000984
 8001c58:	c2b40000 	.word	0xc2b40000
 8001c5c:	2000097c 	.word	0x2000097c
 8001c60:	42b40000 	.word	0x42b40000
 8001c64:	0800e2a4 	.word	0x0800e2a4
 8001c68:	200008c4 	.word	0x200008c4
 8001c6c:	20000a28 	.word	0x20000a28
 8001c70:	0800e03c 	.word	0x0800e03c

08001c74 <GetLatGPS_f>:
void GetLatGPS_f(char* arg){
 8001c74:	b5b0      	push	{r4, r5, r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"GPS LATITUDE VALUE IS : %.2f \r\nGPS LATITUDE  DEFAULT VALUE IS : %.2f\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",LatGps_New_Value,Gps.lat_gps);
 8001c7c:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <GetLatGPS_f+0x5c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc71 	bl	8000568 <__aeabi_f2d>
 8001c86:	4604      	mov	r4, r0
 8001c88:	460d      	mov	r5, r1
 8001c8a:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <GetLatGPS_f+0x60>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc6a 	bl	8000568 <__aeabi_f2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	e9cd 2300 	strd	r2, r3, [sp]
 8001c9c:	4622      	mov	r2, r4
 8001c9e:	462b      	mov	r3, r5
 8001ca0:	490d      	ldr	r1, [pc, #52]	@ (8001cd8 <GetLatGPS_f+0x64>)
 8001ca2:	480e      	ldr	r0, [pc, #56]	@ (8001cdc <GetLatGPS_f+0x68>)
 8001ca4:	f008 fe48 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001ca8:	480c      	ldr	r0, [pc, #48]	@ (8001cdc <GetLatGPS_f+0x68>)
 8001caa:	f7fe faf1 	bl	8000290 <strlen>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	2364      	movs	r3, #100	@ 0x64
 8001cb4:	4909      	ldr	r1, [pc, #36]	@ (8001cdc <GetLatGPS_f+0x68>)
 8001cb6:	480a      	ldr	r0, [pc, #40]	@ (8001ce0 <GetLatGPS_f+0x6c>)
 8001cb8:	f003 fe88 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001cbc:	22b4      	movs	r2, #180	@ 0xb4
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4806      	ldr	r0, [pc, #24]	@ (8001cdc <GetLatGPS_f+0x68>)
 8001cc2:	f008 fe9e 	bl	800aa02 <memset>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000984 	.word	0x20000984
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	0800e2d4 	.word	0x0800e2d4
 8001cdc:	200008c4 	.word	0x200008c4
 8001ce0:	20000a28 	.word	0x20000a28

08001ce4 <SetTimeGPS_f>:
void SetTimeGPS_f(char* arg){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	uint8_t gpstime_flag = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 12) {
 8001cf0:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <SetTimeGPS_f+0x94>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d03a      	beq.n	8001d6e <SetTimeGPS_f+0x8a>
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <SetTimeGPS_f+0x94>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fac7 	bl	8000290 <strlen>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b0b      	cmp	r3, #11
 8001d06:	d832      	bhi.n	8001d6e <SetTimeGPS_f+0x8a>
		TimeGps_New_Value = atol(tokens[1]);
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <SetTimeGPS_f+0x94>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f007 fa62 	bl	80091d6 <atol>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <SetTimeGPS_f+0x98>)
 8001d18:	601a      	str	r2, [r3, #0]
		if (TimeGps_New_Value >MIN_GPS_TIME && TimeGps_New_Value <MAX_GPS_TIME){
 8001d1a:	4b18      	ldr	r3, [pc, #96]	@ (8001d7c <SetTimeGPS_f+0x98>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d017      	beq.n	8001d52 <SetTimeGPS_f+0x6e>
 8001d22:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <SetTimeGPS_f+0x98>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a16      	ldr	r2, [pc, #88]	@ (8001d80 <SetTimeGPS_f+0x9c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d812      	bhi.n	8001d52 <SetTimeGPS_f+0x6e>
			sprintf((char*)cmd_buff, "GPS TIME VALUE SET TO %lu SUCCESSFULLY\r\n", TimeGps_New_Value);
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <SetTimeGPS_f+0x98>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4914      	ldr	r1, [pc, #80]	@ (8001d84 <SetTimeGPS_f+0xa0>)
 8001d34:	4814      	ldr	r0, [pc, #80]	@ (8001d88 <SetTimeGPS_f+0xa4>)
 8001d36:	f008 fdff 	bl	800a938 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8001d3a:	4813      	ldr	r0, [pc, #76]	@ (8001d88 <SetTimeGPS_f+0xa4>)
 8001d3c:	f7fe faa8 	bl	8000290 <strlen>
 8001d40:	4603      	mov	r3, r0
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	2364      	movs	r3, #100	@ 0x64
 8001d46:	4910      	ldr	r1, [pc, #64]	@ (8001d88 <SetTimeGPS_f+0xa4>)
 8001d48:	4810      	ldr	r0, [pc, #64]	@ (8001d8c <SetTimeGPS_f+0xa8>)
 8001d4a:	f003 fe3f 	bl	80059cc <HAL_UART_Transmit>
			gpstime_flag = 1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
		}


		if (gpstime_flag==0) {
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <SetTimeGPS_f+0x80>
			HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8001d58:	2364      	movs	r3, #100	@ 0x64
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <SetTimeGPS_f+0xac>)
 8001d5e:	480b      	ldr	r0, [pc, #44]	@ (8001d8c <SetTimeGPS_f+0xa8>)
 8001d60:	f003 fe34 	bl	80059cc <HAL_UART_Transmit>
		}

		memset(cmd_buff, 0, sizeof(cmd_buff));
 8001d64:	22b4      	movs	r2, #180	@ 0xb4
 8001d66:	2100      	movs	r1, #0
 8001d68:	4807      	ldr	r0, [pc, #28]	@ (8001d88 <SetTimeGPS_f+0xa4>)
 8001d6a:	f008 fe4a 	bl	800aa02 <memset>

	}
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000898 	.word	0x20000898
 8001d7c:	2000097c 	.word	0x2000097c
 8001d80:	01680bb6 	.word	0x01680bb6
 8001d84:	0800e344 	.word	0x0800e344
 8001d88:	200008c4 	.word	0x200008c4
 8001d8c:	20000a28 	.word	0x20000a28
 8001d90:	0800e03c 	.word	0x0800e03c

08001d94 <GetTimeGPS_f>:
void GetTimeGPS_f(char* arg){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"GPS TIME VALUE IS : %lu \r\nGPS TIME  DEFAULT VALUE IS : %lu\r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",TimeGps_New_Value,Gps.time_gps);
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <GetTimeGPS_f+0x40>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd8 <GetTimeGPS_f+0x44>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	490d      	ldr	r1, [pc, #52]	@ (8001ddc <GetTimeGPS_f+0x48>)
 8001da6:	480e      	ldr	r0, [pc, #56]	@ (8001de0 <GetTimeGPS_f+0x4c>)
 8001da8:	f008 fdc6 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001dac:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <GetTimeGPS_f+0x4c>)
 8001dae:	f7fe fa6f 	bl	8000290 <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	2364      	movs	r3, #100	@ 0x64
 8001db8:	4909      	ldr	r1, [pc, #36]	@ (8001de0 <GetTimeGPS_f+0x4c>)
 8001dba:	480a      	ldr	r0, [pc, #40]	@ (8001de4 <GetTimeGPS_f+0x50>)
 8001dbc:	f003 fe06 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001dc0:	22b4      	movs	r2, #180	@ 0xb4
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4806      	ldr	r0, [pc, #24]	@ (8001de0 <GetTimeGPS_f+0x4c>)
 8001dc6:	f008 fe1c 	bl	800aa02 <memset>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000097c 	.word	0x2000097c
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	0800e370 	.word	0x0800e370
 8001de0:	200008c4 	.word	0x200008c4
 8001de4:	20000a28 	.word	0x20000a28

08001de8 <SensorsMenu>:

/*////////////////////////////////////////////// SENSORS MENU\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

void SensorsMenu(char* arg){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	currentMenu=Sensors_Menu;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <SensorsMenu+0x88>)
 8001df2:	2203      	movs	r2, #3
 8001df4:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"\033[1;32;107m--------------Sensors Menu---------------\033[0m\n \r\n");
 8001df6:	491f      	ldr	r1, [pc, #124]	@ (8001e74 <SensorsMenu+0x8c>)
 8001df8:	481f      	ldr	r0, [pc, #124]	@ (8001e78 <SensorsMenu+0x90>)
 8001dfa:	f008 fd9d 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001dfe:	481e      	ldr	r0, [pc, #120]	@ (8001e78 <SensorsMenu+0x90>)
 8001e00:	f7fe fa46 	bl	8000290 <strlen>
 8001e04:	4603      	mov	r3, r0
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	2364      	movs	r3, #100	@ 0x64
 8001e0a:	491b      	ldr	r1, [pc, #108]	@ (8001e78 <SensorsMenu+0x90>)
 8001e0c:	481b      	ldr	r0, [pc, #108]	@ (8001e7c <SensorsMenu+0x94>)
 8001e0e:	f003 fddd 	bl	80059cc <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
 8001e16:	e023      	b.n	8001e60 <SensorsMenu+0x78>
	{if (cmd_list[l].MenuIndex==Sensors_Menu)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <SensorsMenu+0x98>)
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	4413      	add	r3, r2
 8001e20:	330c      	adds	r3, #12
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d118      	bne.n	8001e5a <SensorsMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	4a15      	ldr	r2, [pc, #84]	@ (8001e80 <SensorsMenu+0x98>)
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	4413      	add	r3, r2
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	4912      	ldr	r1, [pc, #72]	@ (8001e80 <SensorsMenu+0x98>)
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	440b      	add	r3, r1
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4911      	ldr	r1, [pc, #68]	@ (8001e84 <SensorsMenu+0x9c>)
 8001e40:	480d      	ldr	r0, [pc, #52]	@ (8001e78 <SensorsMenu+0x90>)
 8001e42:	f008 fd79 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8001e46:	480c      	ldr	r0, [pc, #48]	@ (8001e78 <SensorsMenu+0x90>)
 8001e48:	f7fe fa22 	bl	8000290 <strlen>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	2364      	movs	r3, #100	@ 0x64
 8001e52:	4909      	ldr	r1, [pc, #36]	@ (8001e78 <SensorsMenu+0x90>)
 8001e54:	4809      	ldr	r0, [pc, #36]	@ (8001e7c <SensorsMenu+0x94>)
 8001e56:	f003 fdb9 	bl	80059cc <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b25      	cmp	r3, #37	@ 0x25
 8001e64:	d9d8      	bls.n	8001e18 <SensorsMenu+0x30>
	}
	}
}
 8001e66:	bf00      	nop
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	200009d4 	.word	0x200009d4
 8001e74:	0800e3d4 	.word	0x0800e3d4
 8001e78:	200007c8 	.word	0x200007c8
 8001e7c:	20000a28 	.word	0x20000a28
 8001e80:	20000044 	.word	0x20000044
 8001e84:	0800df98 	.word	0x0800df98

08001e88 <GetSoilTemp_f>:

void GetSoilTemp_f(char* arg){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"SOIL TEMPERATURE VALUE IS : %.2f \r\n",SensorsValues.SoilTemp_s);
 8001e90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <GetSoilTemp_f+0x44>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb67 	bl	8000568 <__aeabi_f2d>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	490c      	ldr	r1, [pc, #48]	@ (8001ed0 <GetSoilTemp_f+0x48>)
 8001ea0:	480c      	ldr	r0, [pc, #48]	@ (8001ed4 <GetSoilTemp_f+0x4c>)
 8001ea2:	f008 fd49 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001ea6:	480b      	ldr	r0, [pc, #44]	@ (8001ed4 <GetSoilTemp_f+0x4c>)
 8001ea8:	f7fe f9f2 	bl	8000290 <strlen>
 8001eac:	4603      	mov	r3, r0
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	2364      	movs	r3, #100	@ 0x64
 8001eb2:	4908      	ldr	r1, [pc, #32]	@ (8001ed4 <GetSoilTemp_f+0x4c>)
 8001eb4:	4808      	ldr	r0, [pc, #32]	@ (8001ed8 <GetSoilTemp_f+0x50>)
 8001eb6:	f003 fd89 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001eba:	22b4      	movs	r2, #180	@ 0xb4
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <GetSoilTemp_f+0x4c>)
 8001ec0:	f008 fd9f 	bl	800aa02 <memset>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000014 	.word	0x20000014
 8001ed0:	0800e414 	.word	0x0800e414
 8001ed4:	200008c4 	.word	0x200008c4
 8001ed8:	20000a28 	.word	0x20000a28

08001edc <GetAirTemp_f>:

void GetAirTemp_f(char* arg){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"AIR TEMPERATURE VALUE IS : %.2f°C",SensorsValues.AirTemp_s);
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <GetAirTemp_f+0x44>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fb3d 	bl	8000568 <__aeabi_f2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	490c      	ldr	r1, [pc, #48]	@ (8001f24 <GetAirTemp_f+0x48>)
 8001ef4:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <GetAirTemp_f+0x4c>)
 8001ef6:	f008 fd1f 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001efa:	480b      	ldr	r0, [pc, #44]	@ (8001f28 <GetAirTemp_f+0x4c>)
 8001efc:	f7fe f9c8 	bl	8000290 <strlen>
 8001f00:	4603      	mov	r3, r0
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	2364      	movs	r3, #100	@ 0x64
 8001f06:	4908      	ldr	r1, [pc, #32]	@ (8001f28 <GetAirTemp_f+0x4c>)
 8001f08:	4808      	ldr	r0, [pc, #32]	@ (8001f2c <GetAirTemp_f+0x50>)
 8001f0a:	f003 fd5f 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001f0e:	22b4      	movs	r2, #180	@ 0xb4
 8001f10:	2100      	movs	r1, #0
 8001f12:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <GetAirTemp_f+0x4c>)
 8001f14:	f008 fd75 	bl	800aa02 <memset>
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000014 	.word	0x20000014
 8001f24:	0800e438 	.word	0x0800e438
 8001f28:	200008c4 	.word	0x200008c4
 8001f2c:	20000a28 	.word	0x20000a28

08001f30 <GetRelativeHumidity_f>:

void GetRelativeHumidity_f(char* arg){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"RELATIVE HUMIDITY VALUE IS : %.2f \r\n",SensorsValues.RelativeHumidity_s);
 8001f38:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <GetRelativeHumidity_f+0x44>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fb13 	bl	8000568 <__aeabi_f2d>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	490c      	ldr	r1, [pc, #48]	@ (8001f78 <GetRelativeHumidity_f+0x48>)
 8001f48:	480c      	ldr	r0, [pc, #48]	@ (8001f7c <GetRelativeHumidity_f+0x4c>)
 8001f4a:	f008 fcf5 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001f4e:	480b      	ldr	r0, [pc, #44]	@ (8001f7c <GetRelativeHumidity_f+0x4c>)
 8001f50:	f7fe f99e 	bl	8000290 <strlen>
 8001f54:	4603      	mov	r3, r0
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	2364      	movs	r3, #100	@ 0x64
 8001f5a:	4908      	ldr	r1, [pc, #32]	@ (8001f7c <GetRelativeHumidity_f+0x4c>)
 8001f5c:	4808      	ldr	r0, [pc, #32]	@ (8001f80 <GetRelativeHumidity_f+0x50>)
 8001f5e:	f003 fd35 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001f62:	22b4      	movs	r2, #180	@ 0xb4
 8001f64:	2100      	movs	r1, #0
 8001f66:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <GetRelativeHumidity_f+0x4c>)
 8001f68:	f008 fd4b 	bl	800aa02 <memset>
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000014 	.word	0x20000014
 8001f78:	0800e45c 	.word	0x0800e45c
 8001f7c:	200008c4 	.word	0x200008c4
 8001f80:	20000a28 	.word	0x20000a28

08001f84 <GetSoilHumidity_f>:

void GetSoilHumidity_f(char* arg){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"SOIL HUMIDITY VALUE IS : %.2f",SensorsValues.SoilHumidity_s);
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <GetSoilHumidity_f+0x44>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fae9 	bl	8000568 <__aeabi_f2d>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	490c      	ldr	r1, [pc, #48]	@ (8001fcc <GetSoilHumidity_f+0x48>)
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <GetSoilHumidity_f+0x4c>)
 8001f9e:	f008 fccb 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001fa2:	480b      	ldr	r0, [pc, #44]	@ (8001fd0 <GetSoilHumidity_f+0x4c>)
 8001fa4:	f7fe f974 	bl	8000290 <strlen>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	2364      	movs	r3, #100	@ 0x64
 8001fae:	4908      	ldr	r1, [pc, #32]	@ (8001fd0 <GetSoilHumidity_f+0x4c>)
 8001fb0:	4808      	ldr	r0, [pc, #32]	@ (8001fd4 <GetSoilHumidity_f+0x50>)
 8001fb2:	f003 fd0b 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8001fb6:	22b4      	movs	r2, #180	@ 0xb4
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <GetSoilHumidity_f+0x4c>)
 8001fbc:	f008 fd21 	bl	800aa02 <memset>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000014 	.word	0x20000014
 8001fcc:	0800e484 	.word	0x0800e484
 8001fd0:	200008c4 	.word	0x200008c4
 8001fd4:	20000a28 	.word	0x20000a28

08001fd8 <GetWindSpeed_f>:

void GetWindSpeed_f(char* arg){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"WIND SPEED VALUE IS : %.2f IN Km/h\r",SensorsValues.WindSpeed_s);
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <GetWindSpeed_f+0x44>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fabf 	bl	8000568 <__aeabi_f2d>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	490c      	ldr	r1, [pc, #48]	@ (8002020 <GetWindSpeed_f+0x48>)
 8001ff0:	480c      	ldr	r0, [pc, #48]	@ (8002024 <GetWindSpeed_f+0x4c>)
 8001ff2:	f008 fca1 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8001ff6:	480b      	ldr	r0, [pc, #44]	@ (8002024 <GetWindSpeed_f+0x4c>)
 8001ff8:	f7fe f94a 	bl	8000290 <strlen>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	2364      	movs	r3, #100	@ 0x64
 8002002:	4908      	ldr	r1, [pc, #32]	@ (8002024 <GetWindSpeed_f+0x4c>)
 8002004:	4808      	ldr	r0, [pc, #32]	@ (8002028 <GetWindSpeed_f+0x50>)
 8002006:	f003 fce1 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 800200a:	22b4      	movs	r2, #180	@ 0xb4
 800200c:	2100      	movs	r1, #0
 800200e:	4805      	ldr	r0, [pc, #20]	@ (8002024 <GetWindSpeed_f+0x4c>)
 8002010:	f008 fcf7 	bl	800aa02 <memset>
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000014 	.word	0x20000014
 8002020:	0800e4a4 	.word	0x0800e4a4
 8002024:	200008c4 	.word	0x200008c4
 8002028:	20000a28 	.word	0x20000a28

0800202c <SetRadiation_f>:
void SetRadiation_f(char* arg){
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	uint8_t radiation_flag = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8002038:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <SetRadiation_f+0xbc>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d040      	beq.n	80020c2 <SetRadiation_f+0x96>
 8002040:	4b29      	ldr	r3, [pc, #164]	@ (80020e8 <SetRadiation_f+0xbc>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe f923 	bl	8000290 <strlen>
 800204a:	4603      	mov	r3, r0
 800204c:	2b04      	cmp	r3, #4
 800204e:	d838      	bhi.n	80020c2 <SetRadiation_f+0x96>
		Radiation_New_Value = atof(tokens[1]);
 8002050:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <SetRadiation_f+0xbc>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4618      	mov	r0, r3
 8002056:	f007 f8b7 	bl	80091c8 <atof>
 800205a:	ec53 2b10 	vmov	r2, r3, d0
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f7fe fdd1 	bl	8000c08 <__aeabi_d2f>
 8002066:	4603      	mov	r3, r0
 8002068:	4a20      	ldr	r2, [pc, #128]	@ (80020ec <SetRadiation_f+0xc0>)
 800206a:	6013      	str	r3, [r2, #0]

		if (Radiation_New_Value >= MIN_RADIATION && Radiation_New_Value <= MAX_RADIATION) {
 800206c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ec <SetRadiation_f+0xc0>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207e:	db20      	blt.n	80020c2 <SetRadiation_f+0x96>
 8002080:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <SetRadiation_f+0xc0>)
 8002082:	edd3 7a00 	vldr	s15, [r3]
 8002086:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80020f0 <SetRadiation_f+0xc4>
 800208a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d816      	bhi.n	80020c2 <SetRadiation_f+0x96>
			sprintf((char*)cmd_buff, "RADIATION VALUE SET TO %.2f SUCCESSFULLY\r\n", Radiation_New_Value);
 8002094:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <SetRadiation_f+0xc0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fa65 	bl	8000568 <__aeabi_f2d>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4914      	ldr	r1, [pc, #80]	@ (80020f4 <SetRadiation_f+0xc8>)
 80020a4:	4814      	ldr	r0, [pc, #80]	@ (80020f8 <SetRadiation_f+0xcc>)
 80020a6:	f008 fc47 	bl	800a938 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80020aa:	4813      	ldr	r0, [pc, #76]	@ (80020f8 <SetRadiation_f+0xcc>)
 80020ac:	f7fe f8f0 	bl	8000290 <strlen>
 80020b0:	4603      	mov	r3, r0
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	2364      	movs	r3, #100	@ 0x64
 80020b6:	4910      	ldr	r1, [pc, #64]	@ (80020f8 <SetRadiation_f+0xcc>)
 80020b8:	4810      	ldr	r0, [pc, #64]	@ (80020fc <SetRadiation_f+0xd0>)
 80020ba:	f003 fc87 	bl	80059cc <HAL_UART_Transmit>
			radiation_flag = 1;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (radiation_flag==0) {
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <SetRadiation_f+0xa8>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 80020c8:	2364      	movs	r3, #100	@ 0x64
 80020ca:	2210      	movs	r2, #16
 80020cc:	490c      	ldr	r1, [pc, #48]	@ (8002100 <SetRadiation_f+0xd4>)
 80020ce:	480b      	ldr	r0, [pc, #44]	@ (80020fc <SetRadiation_f+0xd0>)
 80020d0:	f003 fc7c 	bl	80059cc <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 80020d4:	22b4      	movs	r2, #180	@ 0xb4
 80020d6:	2100      	movs	r1, #0
 80020d8:	4807      	ldr	r0, [pc, #28]	@ (80020f8 <SetRadiation_f+0xcc>)
 80020da:	f008 fc92 	bl	800aa02 <memset>
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000898 	.word	0x20000898
 80020ec:	2000098c 	.word	0x2000098c
 80020f0:	42200000 	.word	0x42200000
 80020f4:	0800e4c8 	.word	0x0800e4c8
 80020f8:	200008c4 	.word	0x200008c4
 80020fc:	20000a28 	.word	0x20000a28
 8002100:	0800e03c 	.word	0x0800e03c

08002104 <GetRadiation_f>:
void GetRadiation_f(char* arg){
 8002104:	b5b0      	push	{r4, r5, r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af02      	add	r7, sp, #8
 800210a:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"RADIATION VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Radiation_New_Value,SensorsValues.Radiation_s);
 800210c:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <GetRadiation_f+0x5c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fa29 	bl	8000568 <__aeabi_f2d>
 8002116:	4604      	mov	r4, r0
 8002118:	460d      	mov	r5, r1
 800211a:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <GetRadiation_f+0x60>)
 800211c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa22 	bl	8000568 <__aeabi_f2d>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	e9cd 2300 	strd	r2, r3, [sp]
 800212c:	4622      	mov	r2, r4
 800212e:	462b      	mov	r3, r5
 8002130:	490d      	ldr	r1, [pc, #52]	@ (8002168 <GetRadiation_f+0x64>)
 8002132:	480e      	ldr	r0, [pc, #56]	@ (800216c <GetRadiation_f+0x68>)
 8002134:	f008 fc00 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002138:	480c      	ldr	r0, [pc, #48]	@ (800216c <GetRadiation_f+0x68>)
 800213a:	f7fe f8a9 	bl	8000290 <strlen>
 800213e:	4603      	mov	r3, r0
 8002140:	b29a      	uxth	r2, r3
 8002142:	2364      	movs	r3, #100	@ 0x64
 8002144:	4909      	ldr	r1, [pc, #36]	@ (800216c <GetRadiation_f+0x68>)
 8002146:	480a      	ldr	r0, [pc, #40]	@ (8002170 <GetRadiation_f+0x6c>)
 8002148:	f003 fc40 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 800214c:	22b4      	movs	r2, #180	@ 0xb4
 800214e:	2100      	movs	r1, #0
 8002150:	4806      	ldr	r0, [pc, #24]	@ (800216c <GetRadiation_f+0x68>)
 8002152:	f008 fc56 	bl	800aa02 <memset>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bdb0      	pop	{r4, r5, r7, pc}
 800215e:	bf00      	nop
 8002160:	2000098c 	.word	0x2000098c
 8002164:	20000014 	.word	0x20000014
 8002168:	0800e4f4 	.word	0x0800e4f4
 800216c:	200008c4 	.word	0x200008c4
 8002170:	20000a28 	.word	0x20000a28

08002174 <SetKc_f>:
void SetKc_f(char* arg){
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	uint8_t kc_flag = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8002180:	4b27      	ldr	r3, [pc, #156]	@ (8002220 <SetKc_f+0xac>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d038      	beq.n	80021fa <SetKc_f+0x86>
 8002188:	4b25      	ldr	r3, [pc, #148]	@ (8002220 <SetKc_f+0xac>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f87f 	bl	8000290 <strlen>
 8002192:	4603      	mov	r3, r0
 8002194:	2b04      	cmp	r3, #4
 8002196:	d830      	bhi.n	80021fa <SetKc_f+0x86>
		Kc_New_Value = atof(tokens[1]);
 8002198:	4b21      	ldr	r3, [pc, #132]	@ (8002220 <SetKc_f+0xac>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	f007 f813 	bl	80091c8 <atof>
 80021a2:	ec53 2b10 	vmov	r2, r3, d0
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7fe fd2d 	bl	8000c08 <__aeabi_d2f>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002224 <SetKc_f+0xb0>)
 80021b2:	6013      	str	r3, [r2, #0]

		if (RelativeHumidity_New_Value >= MIN_KC && Sf_New_Value <= MAX_KP) {
 80021b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002228 <SetKc_f+0xb4>)
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	db1a      	blt.n	80021fa <SetKc_f+0x86>
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <SetKc_f+0xb8>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d816      	bhi.n	80021fa <SetKc_f+0x86>
			sprintf((char*)cmd_buff, "Kc VALUE SET TO %.2f SUCCESSFULLY\r\n", Kc_New_Value);
 80021cc:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <SetKc_f+0xb0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f9c9 	bl	8000568 <__aeabi_f2d>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4915      	ldr	r1, [pc, #84]	@ (8002230 <SetKc_f+0xbc>)
 80021dc:	4815      	ldr	r0, [pc, #84]	@ (8002234 <SetKc_f+0xc0>)
 80021de:	f008 fbab 	bl	800a938 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80021e2:	4814      	ldr	r0, [pc, #80]	@ (8002234 <SetKc_f+0xc0>)
 80021e4:	f7fe f854 	bl	8000290 <strlen>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	2364      	movs	r3, #100	@ 0x64
 80021ee:	4911      	ldr	r1, [pc, #68]	@ (8002234 <SetKc_f+0xc0>)
 80021f0:	4811      	ldr	r0, [pc, #68]	@ (8002238 <SetKc_f+0xc4>)
 80021f2:	f003 fbeb 	bl	80059cc <HAL_UART_Transmit>
			kc_flag = 1;
 80021f6:	2301      	movs	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (kc_flag==0) {
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <SetKc_f+0x98>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8002200:	2364      	movs	r3, #100	@ 0x64
 8002202:	2210      	movs	r2, #16
 8002204:	490d      	ldr	r1, [pc, #52]	@ (800223c <SetKc_f+0xc8>)
 8002206:	480c      	ldr	r0, [pc, #48]	@ (8002238 <SetKc_f+0xc4>)
 8002208:	f003 fbe0 	bl	80059cc <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 800220c:	22b4      	movs	r2, #180	@ 0xb4
 800220e:	2100      	movs	r1, #0
 8002210:	4808      	ldr	r0, [pc, #32]	@ (8002234 <SetKc_f+0xc0>)
 8002212:	f008 fbf6 	bl	800aa02 <memset>
}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000898 	.word	0x20000898
 8002224:	20000990 	.word	0x20000990
 8002228:	20000988 	.word	0x20000988
 800222c:	200008c0 	.word	0x200008c0
 8002230:	0800e558 	.word	0x0800e558
 8002234:	200008c4 	.word	0x200008c4
 8002238:	20000a28 	.word	0x20000a28
 800223c:	0800e03c 	.word	0x0800e03c

08002240 <GetKc_f>:
void GetKc_f(char* arg){
 8002240:	b5b0      	push	{r4, r5, r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af02      	add	r7, sp, #8
 8002246:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"KC VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Kc_New_Value,SensorsValues.Kc);
 8002248:	4b14      	ldr	r3, [pc, #80]	@ (800229c <GetKc_f+0x5c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f98b 	bl	8000568 <__aeabi_f2d>
 8002252:	4604      	mov	r4, r0
 8002254:	460d      	mov	r5, r1
 8002256:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <GetKc_f+0x60>)
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f984 	bl	8000568 <__aeabi_f2d>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	e9cd 2300 	strd	r2, r3, [sp]
 8002268:	4622      	mov	r2, r4
 800226a:	462b      	mov	r3, r5
 800226c:	490d      	ldr	r1, [pc, #52]	@ (80022a4 <GetKc_f+0x64>)
 800226e:	480e      	ldr	r0, [pc, #56]	@ (80022a8 <GetKc_f+0x68>)
 8002270:	f008 fb62 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002274:	480c      	ldr	r0, [pc, #48]	@ (80022a8 <GetKc_f+0x68>)
 8002276:	f7fe f80b 	bl	8000290 <strlen>
 800227a:	4603      	mov	r3, r0
 800227c:	b29a      	uxth	r2, r3
 800227e:	2364      	movs	r3, #100	@ 0x64
 8002280:	4909      	ldr	r1, [pc, #36]	@ (80022a8 <GetKc_f+0x68>)
 8002282:	480a      	ldr	r0, [pc, #40]	@ (80022ac <GetKc_f+0x6c>)
 8002284:	f003 fba2 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002288:	22b4      	movs	r2, #180	@ 0xb4
 800228a:	2100      	movs	r1, #0
 800228c:	4806      	ldr	r0, [pc, #24]	@ (80022a8 <GetKc_f+0x68>)
 800228e:	f008 fbb8 	bl	800aa02 <memset>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bdb0      	pop	{r4, r5, r7, pc}
 800229a:	bf00      	nop
 800229c:	20000990 	.word	0x20000990
 80022a0:	20000014 	.word	0x20000014
 80022a4:	0800e57c 	.word	0x0800e57c
 80022a8:	200008c4 	.word	0x200008c4
 80022ac:	20000a28 	.word	0x20000a28

080022b0 <SetKp_f>:
void SetKp_f(char* arg){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	uint8_t kp_flag = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 80022bc:	4b27      	ldr	r3, [pc, #156]	@ (800235c <SetKp_f+0xac>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d038      	beq.n	8002336 <SetKp_f+0x86>
 80022c4:	4b25      	ldr	r3, [pc, #148]	@ (800235c <SetKp_f+0xac>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fd ffe1 	bl	8000290 <strlen>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d830      	bhi.n	8002336 <SetKp_f+0x86>
		Kp_New_Value = atof(tokens[1]);
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <SetKp_f+0xac>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4618      	mov	r0, r3
 80022da:	f006 ff75 	bl	80091c8 <atof>
 80022de:	ec53 2b10 	vmov	r2, r3, d0
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7fe fc8f 	bl	8000c08 <__aeabi_d2f>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002360 <SetKp_f+0xb0>)
 80022ee:	6013      	str	r3, [r2, #0]

		if (Kp_New_Value >= MIN_KP && Sf_New_Value <= MAX_KP) {
 80022f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <SetKp_f+0xb0>)
 80022f2:	edd3 7a00 	vldr	s15, [r3]
 80022f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fe:	db1a      	blt.n	8002336 <SetKp_f+0x86>
 8002300:	4b18      	ldr	r3, [pc, #96]	@ (8002364 <SetKp_f+0xb4>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d816      	bhi.n	8002336 <SetKp_f+0x86>
			sprintf((char*)cmd_buff, "Kp VALUE SET TO %.2f SUCCESSFULLY\r\n", Kp_New_Value);
 8002308:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <SetKp_f+0xb0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe f92b 	bl	8000568 <__aeabi_f2d>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4914      	ldr	r1, [pc, #80]	@ (8002368 <SetKp_f+0xb8>)
 8002318:	4814      	ldr	r0, [pc, #80]	@ (800236c <SetKp_f+0xbc>)
 800231a:	f008 fb0d 	bl	800a938 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 800231e:	4813      	ldr	r0, [pc, #76]	@ (800236c <SetKp_f+0xbc>)
 8002320:	f7fd ffb6 	bl	8000290 <strlen>
 8002324:	4603      	mov	r3, r0
 8002326:	b29a      	uxth	r2, r3
 8002328:	2364      	movs	r3, #100	@ 0x64
 800232a:	4910      	ldr	r1, [pc, #64]	@ (800236c <SetKp_f+0xbc>)
 800232c:	4810      	ldr	r0, [pc, #64]	@ (8002370 <SetKp_f+0xc0>)
 800232e:	f003 fb4d 	bl	80059cc <HAL_UART_Transmit>
			kp_flag = 1;
 8002332:	2301      	movs	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (kp_flag==0) {
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <SetKp_f+0x98>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 800233c:	2364      	movs	r3, #100	@ 0x64
 800233e:	2210      	movs	r2, #16
 8002340:	490c      	ldr	r1, [pc, #48]	@ (8002374 <SetKp_f+0xc4>)
 8002342:	480b      	ldr	r0, [pc, #44]	@ (8002370 <SetKp_f+0xc0>)
 8002344:	f003 fb42 	bl	80059cc <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 8002348:	22b4      	movs	r2, #180	@ 0xb4
 800234a:	2100      	movs	r1, #0
 800234c:	4807      	ldr	r0, [pc, #28]	@ (800236c <SetKp_f+0xbc>)
 800234e:	f008 fb58 	bl	800aa02 <memset>
}
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000898 	.word	0x20000898
 8002360:	20000994 	.word	0x20000994
 8002364:	200008c0 	.word	0x200008c0
 8002368:	0800e5d8 	.word	0x0800e5d8
 800236c:	200008c4 	.word	0x200008c4
 8002370:	20000a28 	.word	0x20000a28
 8002374:	0800e03c 	.word	0x0800e03c

08002378 <GetKp_f>:
void GetKp_f(char* arg){
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af02      	add	r7, sp, #8
 800237e:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"KP VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Kp_New_Value,SensorsValues.Kp);
 8002380:	4b14      	ldr	r3, [pc, #80]	@ (80023d4 <GetKp_f+0x5c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f8ef 	bl	8000568 <__aeabi_f2d>
 800238a:	4604      	mov	r4, r0
 800238c:	460d      	mov	r5, r1
 800238e:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <GetKp_f+0x60>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f8e8 	bl	8000568 <__aeabi_f2d>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	e9cd 2300 	strd	r2, r3, [sp]
 80023a0:	4622      	mov	r2, r4
 80023a2:	462b      	mov	r3, r5
 80023a4:	490d      	ldr	r1, [pc, #52]	@ (80023dc <GetKp_f+0x64>)
 80023a6:	480e      	ldr	r0, [pc, #56]	@ (80023e0 <GetKp_f+0x68>)
 80023a8:	f008 fac6 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 80023ac:	480c      	ldr	r0, [pc, #48]	@ (80023e0 <GetKp_f+0x68>)
 80023ae:	f7fd ff6f 	bl	8000290 <strlen>
 80023b2:	4603      	mov	r3, r0
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	2364      	movs	r3, #100	@ 0x64
 80023b8:	4909      	ldr	r1, [pc, #36]	@ (80023e0 <GetKp_f+0x68>)
 80023ba:	480a      	ldr	r0, [pc, #40]	@ (80023e4 <GetKp_f+0x6c>)
 80023bc:	f003 fb06 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80023c0:	22b4      	movs	r2, #180	@ 0xb4
 80023c2:	2100      	movs	r1, #0
 80023c4:	4806      	ldr	r0, [pc, #24]	@ (80023e0 <GetKp_f+0x68>)
 80023c6:	f008 fb1c 	bl	800aa02 <memset>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bdb0      	pop	{r4, r5, r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000994 	.word	0x20000994
 80023d8:	20000014 	.word	0x20000014
 80023dc:	0800e5fc 	.word	0x0800e5fc
 80023e0:	200008c4 	.word	0x200008c4
 80023e4:	20000a28 	.word	0x20000a28

080023e8 <SetET0_f>:
void SetET0_f(char* arg){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	uint8_t et0_flag = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 80023f4:	4b2a      	ldr	r3, [pc, #168]	@ (80024a0 <SetET0_f+0xb8>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03e      	beq.n	800247a <SetET0_f+0x92>
 80023fc:	4b28      	ldr	r3, [pc, #160]	@ (80024a0 <SetET0_f+0xb8>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fd ff45 	bl	8000290 <strlen>
 8002406:	4603      	mov	r3, r0
 8002408:	2b04      	cmp	r3, #4
 800240a:	d836      	bhi.n	800247a <SetET0_f+0x92>
		Et0_New_Value = atof(tokens[1]);
 800240c:	4b24      	ldr	r3, [pc, #144]	@ (80024a0 <SetET0_f+0xb8>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4618      	mov	r0, r3
 8002412:	f006 fed9 	bl	80091c8 <atof>
 8002416:	ec53 2b10 	vmov	r2, r3, d0
 800241a:	4610      	mov	r0, r2
 800241c:	4619      	mov	r1, r3
 800241e:	f7fe fbf3 	bl	8000c08 <__aeabi_d2f>
 8002422:	4603      	mov	r3, r0
 8002424:	4a1f      	ldr	r2, [pc, #124]	@ (80024a4 <SetET0_f+0xbc>)
 8002426:	6013      	str	r3, [r2, #0]

		if (Et0_New_Value >= MIN_ET0 && Et0_New_Value <= MAX_ET0) {
 8002428:	4b1e      	ldr	r3, [pc, #120]	@ (80024a4 <SetET0_f+0xbc>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002436:	db20      	blt.n	800247a <SetET0_f+0x92>
 8002438:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <SetET0_f+0xbc>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	d816      	bhi.n	800247a <SetET0_f+0x92>
			sprintf((char*)cmd_buff, "ET0 VALUE SET TO %.2f SUCCESSFULLY\r\n", Et0_New_Value);
 800244c:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <SetET0_f+0xbc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f889 	bl	8000568 <__aeabi_f2d>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4913      	ldr	r1, [pc, #76]	@ (80024a8 <SetET0_f+0xc0>)
 800245c:	4813      	ldr	r0, [pc, #76]	@ (80024ac <SetET0_f+0xc4>)
 800245e:	f008 fa6b 	bl	800a938 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002462:	4812      	ldr	r0, [pc, #72]	@ (80024ac <SetET0_f+0xc4>)
 8002464:	f7fd ff14 	bl	8000290 <strlen>
 8002468:	4603      	mov	r3, r0
 800246a:	b29a      	uxth	r2, r3
 800246c:	2364      	movs	r3, #100	@ 0x64
 800246e:	490f      	ldr	r1, [pc, #60]	@ (80024ac <SetET0_f+0xc4>)
 8002470:	480f      	ldr	r0, [pc, #60]	@ (80024b0 <SetET0_f+0xc8>)
 8002472:	f003 faab 	bl	80059cc <HAL_UART_Transmit>
			et0_flag = 1;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (et0_flag==0) {
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <SetET0_f+0xa4>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8002480:	2364      	movs	r3, #100	@ 0x64
 8002482:	2210      	movs	r2, #16
 8002484:	490b      	ldr	r1, [pc, #44]	@ (80024b4 <SetET0_f+0xcc>)
 8002486:	480a      	ldr	r0, [pc, #40]	@ (80024b0 <SetET0_f+0xc8>)
 8002488:	f003 faa0 	bl	80059cc <HAL_UART_Transmit>
	}

	memset(cmd_buff, 0, sizeof(cmd_buff));
 800248c:	22b4      	movs	r2, #180	@ 0xb4
 800248e:	2100      	movs	r1, #0
 8002490:	4806      	ldr	r0, [pc, #24]	@ (80024ac <SetET0_f+0xc4>)
 8002492:	f008 fab6 	bl	800aa02 <memset>
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000898 	.word	0x20000898
 80024a4:	20000998 	.word	0x20000998
 80024a8:	0800e658 	.word	0x0800e658
 80024ac:	200008c4 	.word	0x200008c4
 80024b0:	20000a28 	.word	0x20000a28
 80024b4:	0800e03c 	.word	0x0800e03c

080024b8 <GetET0_f>:
void GetET0_f(char* arg){
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af02      	add	r7, sp, #8
 80024be:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"ET0 VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Et0_New_Value,SensorsValues.ET0);
 80024c0:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <GetET0_f+0x5c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f84f 	bl	8000568 <__aeabi_f2d>
 80024ca:	4604      	mov	r4, r0
 80024cc:	460d      	mov	r5, r1
 80024ce:	4b12      	ldr	r3, [pc, #72]	@ (8002518 <GetET0_f+0x60>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f848 	bl	8000568 <__aeabi_f2d>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	e9cd 2300 	strd	r2, r3, [sp]
 80024e0:	4622      	mov	r2, r4
 80024e2:	462b      	mov	r3, r5
 80024e4:	490d      	ldr	r1, [pc, #52]	@ (800251c <GetET0_f+0x64>)
 80024e6:	480e      	ldr	r0, [pc, #56]	@ (8002520 <GetET0_f+0x68>)
 80024e8:	f008 fa26 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 80024ec:	480c      	ldr	r0, [pc, #48]	@ (8002520 <GetET0_f+0x68>)
 80024ee:	f7fd fecf 	bl	8000290 <strlen>
 80024f2:	4603      	mov	r3, r0
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	2364      	movs	r3, #100	@ 0x64
 80024f8:	4909      	ldr	r1, [pc, #36]	@ (8002520 <GetET0_f+0x68>)
 80024fa:	480a      	ldr	r0, [pc, #40]	@ (8002524 <GetET0_f+0x6c>)
 80024fc:	f003 fa66 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002500:	22b4      	movs	r2, #180	@ 0xb4
 8002502:	2100      	movs	r1, #0
 8002504:	4806      	ldr	r0, [pc, #24]	@ (8002520 <GetET0_f+0x68>)
 8002506:	f008 fa7c 	bl	800aa02 <memset>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bdb0      	pop	{r4, r5, r7, pc}
 8002512:	bf00      	nop
 8002514:	20000998 	.word	0x20000998
 8002518:	20000014 	.word	0x20000014
 800251c:	0800e680 	.word	0x0800e680
 8002520:	200008c4 	.word	0x200008c4
 8002524:	20000a28 	.word	0x20000a28

08002528 <SetETC_f>:

void SetETC_f(char* arg){
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	uint8_t etc_flag = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8002534:	4b2a      	ldr	r3, [pc, #168]	@ (80025e0 <SetETC_f+0xb8>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d03e      	beq.n	80025ba <SetETC_f+0x92>
 800253c:	4b28      	ldr	r3, [pc, #160]	@ (80025e0 <SetETC_f+0xb8>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fd fea5 	bl	8000290 <strlen>
 8002546:	4603      	mov	r3, r0
 8002548:	2b04      	cmp	r3, #4
 800254a:	d836      	bhi.n	80025ba <SetETC_f+0x92>
		Etc_New_Value = atof(tokens[1]);
 800254c:	4b24      	ldr	r3, [pc, #144]	@ (80025e0 <SetETC_f+0xb8>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4618      	mov	r0, r3
 8002552:	f006 fe39 	bl	80091c8 <atof>
 8002556:	ec53 2b10 	vmov	r2, r3, d0
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	f7fe fb53 	bl	8000c08 <__aeabi_d2f>
 8002562:	4603      	mov	r3, r0
 8002564:	4a1f      	ldr	r2, [pc, #124]	@ (80025e4 <SetETC_f+0xbc>)
 8002566:	6013      	str	r3, [r2, #0]
		if (Etc_New_Value >= MIN_ETC && Etc_New_Value <= MAX_ETC) {
 8002568:	4b1e      	ldr	r3, [pc, #120]	@ (80025e4 <SetETC_f+0xbc>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002576:	db20      	blt.n	80025ba <SetETC_f+0x92>
 8002578:	4b1a      	ldr	r3, [pc, #104]	@ (80025e4 <SetETC_f+0xbc>)
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258a:	d816      	bhi.n	80025ba <SetETC_f+0x92>
			sprintf((char*)cmd_buff, "ETC VALUE SET TO %.2f SUCCESSFULLY\r\n", Etc_New_Value);
 800258c:	4b15      	ldr	r3, [pc, #84]	@ (80025e4 <SetETC_f+0xbc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fd ffe9 	bl	8000568 <__aeabi_f2d>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4913      	ldr	r1, [pc, #76]	@ (80025e8 <SetETC_f+0xc0>)
 800259c:	4813      	ldr	r0, [pc, #76]	@ (80025ec <SetETC_f+0xc4>)
 800259e:	f008 f9cb 	bl	800a938 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80025a2:	4812      	ldr	r0, [pc, #72]	@ (80025ec <SetETC_f+0xc4>)
 80025a4:	f7fd fe74 	bl	8000290 <strlen>
 80025a8:	4603      	mov	r3, r0
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	2364      	movs	r3, #100	@ 0x64
 80025ae:	490f      	ldr	r1, [pc, #60]	@ (80025ec <SetETC_f+0xc4>)
 80025b0:	480f      	ldr	r0, [pc, #60]	@ (80025f0 <SetETC_f+0xc8>)
 80025b2:	f003 fa0b 	bl	80059cc <HAL_UART_Transmit>
			etc_flag = 1;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (etc_flag==0) {
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <SetETC_f+0xa4>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 80025c0:	2364      	movs	r3, #100	@ 0x64
 80025c2:	2210      	movs	r2, #16
 80025c4:	490b      	ldr	r1, [pc, #44]	@ (80025f4 <SetETC_f+0xcc>)
 80025c6:	480a      	ldr	r0, [pc, #40]	@ (80025f0 <SetETC_f+0xc8>)
 80025c8:	f003 fa00 	bl	80059cc <HAL_UART_Transmit>
	}
	memset(cmd_buff, 0, sizeof(cmd_buff));
 80025cc:	22b4      	movs	r2, #180	@ 0xb4
 80025ce:	2100      	movs	r1, #0
 80025d0:	4806      	ldr	r0, [pc, #24]	@ (80025ec <SetETC_f+0xc4>)
 80025d2:	f008 fa16 	bl	800aa02 <memset>
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000898 	.word	0x20000898
 80025e4:	2000099c 	.word	0x2000099c
 80025e8:	0800e6dc 	.word	0x0800e6dc
 80025ec:	200008c4 	.word	0x200008c4
 80025f0:	20000a28 	.word	0x20000a28
 80025f4:	0800e03c 	.word	0x0800e03c

080025f8 <GetETC_f>:

void GetETC_f(char* arg){
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"ETC VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Etc_New_Value,SensorsValues.ETc);
 8002600:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <GetETC_f+0x5c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd ffaf 	bl	8000568 <__aeabi_f2d>
 800260a:	4604      	mov	r4, r0
 800260c:	460d      	mov	r5, r1
 800260e:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <GetETC_f+0x60>)
 8002610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ffa8 	bl	8000568 <__aeabi_f2d>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9cd 2300 	strd	r2, r3, [sp]
 8002620:	4622      	mov	r2, r4
 8002622:	462b      	mov	r3, r5
 8002624:	490d      	ldr	r1, [pc, #52]	@ (800265c <GetETC_f+0x64>)
 8002626:	480e      	ldr	r0, [pc, #56]	@ (8002660 <GetETC_f+0x68>)
 8002628:	f008 f986 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 800262c:	480c      	ldr	r0, [pc, #48]	@ (8002660 <GetETC_f+0x68>)
 800262e:	f7fd fe2f 	bl	8000290 <strlen>
 8002632:	4603      	mov	r3, r0
 8002634:	b29a      	uxth	r2, r3
 8002636:	2364      	movs	r3, #100	@ 0x64
 8002638:	4909      	ldr	r1, [pc, #36]	@ (8002660 <GetETC_f+0x68>)
 800263a:	480a      	ldr	r0, [pc, #40]	@ (8002664 <GetETC_f+0x6c>)
 800263c:	f003 f9c6 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002640:	22b4      	movs	r2, #180	@ 0xb4
 8002642:	2100      	movs	r1, #0
 8002644:	4806      	ldr	r0, [pc, #24]	@ (8002660 <GetETC_f+0x68>)
 8002646:	f008 f9dc 	bl	800aa02 <memset>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bdb0      	pop	{r4, r5, r7, pc}
 8002652:	bf00      	nop
 8002654:	2000099c 	.word	0x2000099c
 8002658:	20000014 	.word	0x20000014
 800265c:	0800e704 	.word	0x0800e704
 8002660:	200008c4 	.word	0x200008c4
 8002664:	20000a28 	.word	0x20000a28

08002668 <SetETCadj_f>:

void SetETCadj_f(char* arg){
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	uint8_t etcadj_flag = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8002674:	4b2a      	ldr	r3, [pc, #168]	@ (8002720 <SetETCadj_f+0xb8>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d03f      	beq.n	80026fc <SetETCadj_f+0x94>
 800267c:	4b28      	ldr	r3, [pc, #160]	@ (8002720 <SetETCadj_f+0xb8>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd fe05 	bl	8000290 <strlen>
 8002686:	4603      	mov	r3, r0
 8002688:	2b04      	cmp	r3, #4
 800268a:	d837      	bhi.n	80026fc <SetETCadj_f+0x94>
		EtcAdj_New_Value = atof(tokens[1]);
 800268c:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <SetETCadj_f+0xb8>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	f006 fd99 	bl	80091c8 <atof>
 8002696:	ec53 2b10 	vmov	r2, r3, d0
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	f7fe fab3 	bl	8000c08 <__aeabi_d2f>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002724 <SetETCadj_f+0xbc>)
 80026a6:	6013      	str	r3, [r2, #0]
		if (EtcAdj_New_Value >= 0 && EtcAdj_New_Value <= Old_Default_ETC) {
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <SetETCadj_f+0xbc>)
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b6:	db21      	blt.n	80026fc <SetETCadj_f+0x94>
 80026b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <SetETCadj_f+0xbc>)
 80026ba:	ed93 7a00 	vldr	s14, [r3]
 80026be:	4b1a      	ldr	r3, [pc, #104]	@ (8002728 <SetETCadj_f+0xc0>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026cc:	d816      	bhi.n	80026fc <SetETCadj_f+0x94>
			sprintf((char*)cmd_buff, "ETC ADJ VALUE SET TO %.2f SUCCESSFULLY\r\n", EtcAdj_New_Value);
 80026ce:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <SetETCadj_f+0xbc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff48 	bl	8000568 <__aeabi_f2d>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4913      	ldr	r1, [pc, #76]	@ (800272c <SetETCadj_f+0xc4>)
 80026de:	4814      	ldr	r0, [pc, #80]	@ (8002730 <SetETCadj_f+0xc8>)
 80026e0:	f008 f92a 	bl	800a938 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 80026e4:	4812      	ldr	r0, [pc, #72]	@ (8002730 <SetETCadj_f+0xc8>)
 80026e6:	f7fd fdd3 	bl	8000290 <strlen>
 80026ea:	4603      	mov	r3, r0
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	2364      	movs	r3, #100	@ 0x64
 80026f0:	490f      	ldr	r1, [pc, #60]	@ (8002730 <SetETCadj_f+0xc8>)
 80026f2:	4810      	ldr	r0, [pc, #64]	@ (8002734 <SetETCadj_f+0xcc>)
 80026f4:	f003 f96a 	bl	80059cc <HAL_UART_Transmit>
			etcadj_flag = 1;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (etcadj_flag==0) {
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d105      	bne.n	800270e <SetETCadj_f+0xa6>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 8002702:	2364      	movs	r3, #100	@ 0x64
 8002704:	2210      	movs	r2, #16
 8002706:	490c      	ldr	r1, [pc, #48]	@ (8002738 <SetETCadj_f+0xd0>)
 8002708:	480a      	ldr	r0, [pc, #40]	@ (8002734 <SetETCadj_f+0xcc>)
 800270a:	f003 f95f 	bl	80059cc <HAL_UART_Transmit>
	}
	memset(cmd_buff, 0, sizeof(cmd_buff));
 800270e:	22b4      	movs	r2, #180	@ 0xb4
 8002710:	2100      	movs	r1, #0
 8002712:	4807      	ldr	r0, [pc, #28]	@ (8002730 <SetETCadj_f+0xc8>)
 8002714:	f008 f975 	bl	800aa02 <memset>
}
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000898 	.word	0x20000898
 8002724:	200009a0 	.word	0x200009a0
 8002728:	200009bc 	.word	0x200009bc
 800272c:	0800e760 	.word	0x0800e760
 8002730:	200008c4 	.word	0x200008c4
 8002734:	20000a28 	.word	0x20000a28
 8002738:	0800e03c 	.word	0x0800e03c

0800273c <GetETCadj_f>:

void GetETCadj_f(char* arg){
 800273c:	b5b0      	push	{r4, r5, r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af02      	add	r7, sp, #8
 8002742:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"ETC ADJ VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",EtcAdj_New_Value,SensorsValues.ETcAdj);
 8002744:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <GetETCadj_f+0x5c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd ff0d 	bl	8000568 <__aeabi_f2d>
 800274e:	4604      	mov	r4, r0
 8002750:	460d      	mov	r5, r1
 8002752:	4b12      	ldr	r3, [pc, #72]	@ (800279c <GetETCadj_f+0x60>)
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	4618      	mov	r0, r3
 8002758:	f7fd ff06 	bl	8000568 <__aeabi_f2d>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	e9cd 2300 	strd	r2, r3, [sp]
 8002764:	4622      	mov	r2, r4
 8002766:	462b      	mov	r3, r5
 8002768:	490d      	ldr	r1, [pc, #52]	@ (80027a0 <GetETCadj_f+0x64>)
 800276a:	480e      	ldr	r0, [pc, #56]	@ (80027a4 <GetETCadj_f+0x68>)
 800276c:	f008 f8e4 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002770:	480c      	ldr	r0, [pc, #48]	@ (80027a4 <GetETCadj_f+0x68>)
 8002772:	f7fd fd8d 	bl	8000290 <strlen>
 8002776:	4603      	mov	r3, r0
 8002778:	b29a      	uxth	r2, r3
 800277a:	2364      	movs	r3, #100	@ 0x64
 800277c:	4909      	ldr	r1, [pc, #36]	@ (80027a4 <GetETCadj_f+0x68>)
 800277e:	480a      	ldr	r0, [pc, #40]	@ (80027a8 <GetETCadj_f+0x6c>)
 8002780:	f003 f924 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002784:	22b4      	movs	r2, #180	@ 0xb4
 8002786:	2100      	movs	r1, #0
 8002788:	4806      	ldr	r0, [pc, #24]	@ (80027a4 <GetETCadj_f+0x68>)
 800278a:	f008 f93a 	bl	800aa02 <memset>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bdb0      	pop	{r4, r5, r7, pc}
 8002796:	bf00      	nop
 8002798:	200009a0 	.word	0x200009a0
 800279c:	20000014 	.word	0x20000014
 80027a0:	0800e78c 	.word	0x0800e78c
 80027a4:	200008c4 	.word	0x200008c4
 80027a8:	20000a28 	.word	0x20000a28

080027ac <GetAirPressure_f>:
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
	}
	memset(cmd_buff, 0, sizeof(cmd_buff));
}

void GetAirPressure_f(char* arg){
 80027ac:	b5b0      	push	{r4, r5, r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"AIR PRESSURE VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",AirPressure_New_Value,SensorsValues.AirPressure_s);
 80027b4:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <GetAirPressure_f+0x5c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fed5 	bl	8000568 <__aeabi_f2d>
 80027be:	4604      	mov	r4, r0
 80027c0:	460d      	mov	r5, r1
 80027c2:	4b12      	ldr	r3, [pc, #72]	@ (800280c <GetAirPressure_f+0x60>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fece 	bl	8000568 <__aeabi_f2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	e9cd 2300 	strd	r2, r3, [sp]
 80027d4:	4622      	mov	r2, r4
 80027d6:	462b      	mov	r3, r5
 80027d8:	490d      	ldr	r1, [pc, #52]	@ (8002810 <GetAirPressure_f+0x64>)
 80027da:	480e      	ldr	r0, [pc, #56]	@ (8002814 <GetAirPressure_f+0x68>)
 80027dc:	f008 f8ac 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 80027e0:	480c      	ldr	r0, [pc, #48]	@ (8002814 <GetAirPressure_f+0x68>)
 80027e2:	f7fd fd55 	bl	8000290 <strlen>
 80027e6:	4603      	mov	r3, r0
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	2364      	movs	r3, #100	@ 0x64
 80027ec:	4909      	ldr	r1, [pc, #36]	@ (8002814 <GetAirPressure_f+0x68>)
 80027ee:	480a      	ldr	r0, [pc, #40]	@ (8002818 <GetAirPressure_f+0x6c>)
 80027f0:	f003 f8ec 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 80027f4:	22b4      	movs	r2, #180	@ 0xb4
 80027f6:	2100      	movs	r1, #0
 80027f8:	4806      	ldr	r0, [pc, #24]	@ (8002814 <GetAirPressure_f+0x68>)
 80027fa:	f008 f902 	bl	800aa02 <memset>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bdb0      	pop	{r4, r5, r7, pc}
 8002806:	bf00      	nop
 8002808:	200009a4 	.word	0x200009a4
 800280c:	20000014 	.word	0x20000014
 8002810:	0800e81c 	.word	0x0800e81c
 8002814:	200008c4 	.word	0x200008c4
 8002818:	20000a28 	.word	0x20000a28

0800281c <SetHeigh_f>:

void SetHeigh_f(char* arg){
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	uint8_t height_flag = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	73fb      	strb	r3, [r7, #15]
	if (tokens[1] != NULL && strlen(tokens[1]) < 5) {
 8002828:	4b2a      	ldr	r3, [pc, #168]	@ (80028d4 <SetHeigh_f+0xb8>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d03e      	beq.n	80028ae <SetHeigh_f+0x92>
 8002830:	4b28      	ldr	r3, [pc, #160]	@ (80028d4 <SetHeigh_f+0xb8>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd fd2b 	bl	8000290 <strlen>
 800283a:	4603      	mov	r3, r0
 800283c:	2b04      	cmp	r3, #4
 800283e:	d836      	bhi.n	80028ae <SetHeigh_f+0x92>
		Height_New_Value = atof(tokens[1]);
 8002840:	4b24      	ldr	r3, [pc, #144]	@ (80028d4 <SetHeigh_f+0xb8>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4618      	mov	r0, r3
 8002846:	f006 fcbf 	bl	80091c8 <atof>
 800284a:	ec53 2b10 	vmov	r2, r3, d0
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f7fe f9d9 	bl	8000c08 <__aeabi_d2f>
 8002856:	4603      	mov	r3, r0
 8002858:	4a1f      	ldr	r2, [pc, #124]	@ (80028d8 <SetHeigh_f+0xbc>)
 800285a:	6013      	str	r3, [r2, #0]
		if (Height_New_Value >= 0.0f && Height_New_Value <= 5000.0f) {
 800285c:	4b1e      	ldr	r3, [pc, #120]	@ (80028d8 <SetHeigh_f+0xbc>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286a:	db20      	blt.n	80028ae <SetHeigh_f+0x92>
 800286c:	4b1a      	ldr	r3, [pc, #104]	@ (80028d8 <SetHeigh_f+0xbc>)
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80028dc <SetHeigh_f+0xc0>
 8002876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800287a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287e:	d816      	bhi.n	80028ae <SetHeigh_f+0x92>
			sprintf((char*)cmd_buff, "HEIGHT VALUE SET TO %.2f SUCCESSFULLY\r\n", Height_New_Value);
 8002880:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <SetHeigh_f+0xbc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fe6f 	bl	8000568 <__aeabi_f2d>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4914      	ldr	r1, [pc, #80]	@ (80028e0 <SetHeigh_f+0xc4>)
 8002890:	4814      	ldr	r0, [pc, #80]	@ (80028e4 <SetHeigh_f+0xc8>)
 8002892:	f008 f851 	bl	800a938 <siprintf>
			HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002896:	4813      	ldr	r0, [pc, #76]	@ (80028e4 <SetHeigh_f+0xc8>)
 8002898:	f7fd fcfa 	bl	8000290 <strlen>
 800289c:	4603      	mov	r3, r0
 800289e:	b29a      	uxth	r2, r3
 80028a0:	2364      	movs	r3, #100	@ 0x64
 80028a2:	4910      	ldr	r1, [pc, #64]	@ (80028e4 <SetHeigh_f+0xc8>)
 80028a4:	4810      	ldr	r0, [pc, #64]	@ (80028e8 <SetHeigh_f+0xcc>)
 80028a6:	f003 f891 	bl	80059cc <HAL_UART_Transmit>
			height_flag = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (height_flag==0) {
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <SetHeigh_f+0xa4>
		HAL_UART_Transmit(&huart2, (const uint8_t*)"INVALID VALUE\r\n", 16, 100);
 80028b4:	2364      	movs	r3, #100	@ 0x64
 80028b6:	2210      	movs	r2, #16
 80028b8:	490c      	ldr	r1, [pc, #48]	@ (80028ec <SetHeigh_f+0xd0>)
 80028ba:	480b      	ldr	r0, [pc, #44]	@ (80028e8 <SetHeigh_f+0xcc>)
 80028bc:	f003 f886 	bl	80059cc <HAL_UART_Transmit>
	}
	memset(cmd_buff, 0, sizeof(cmd_buff));
 80028c0:	22b4      	movs	r2, #180	@ 0xb4
 80028c2:	2100      	movs	r1, #0
 80028c4:	4807      	ldr	r0, [pc, #28]	@ (80028e4 <SetHeigh_f+0xc8>)
 80028c6:	f008 f89c 	bl	800aa02 <memset>
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000898 	.word	0x20000898
 80028d8:	200009a8 	.word	0x200009a8
 80028dc:	459c4000 	.word	0x459c4000
 80028e0:	0800e880 	.word	0x0800e880
 80028e4:	200008c4 	.word	0x200008c4
 80028e8:	20000a28 	.word	0x20000a28
 80028ec:	0800e03c 	.word	0x0800e03c

080028f0 <GetHeigh_f>:

void GetHeigh_f(char* arg){
 80028f0:	b5b0      	push	{r4, r5, r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	6078      	str	r0, [r7, #4]
	sprintf((char*)cmd_buff,"HEIGHT VALUE IS : %.2f\r\nNote:DEFAULT VALUE IS : %.2f \r\n TO CHANGE DEFAULT VALUE GO TO SYSCONF",Height_New_Value,SensorsValues.AirPressure_s);
 80028f8:	4b14      	ldr	r3, [pc, #80]	@ (800294c <GetHeigh_f+0x5c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fd fe33 	bl	8000568 <__aeabi_f2d>
 8002902:	4604      	mov	r4, r0
 8002904:	460d      	mov	r5, r1
 8002906:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <GetHeigh_f+0x60>)
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fe2c 	bl	8000568 <__aeabi_f2d>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	e9cd 2300 	strd	r2, r3, [sp]
 8002918:	4622      	mov	r2, r4
 800291a:	462b      	mov	r3, r5
 800291c:	490d      	ldr	r1, [pc, #52]	@ (8002954 <GetHeigh_f+0x64>)
 800291e:	480e      	ldr	r0, [pc, #56]	@ (8002958 <GetHeigh_f+0x68>)
 8002920:	f008 f80a 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2,cmd_buff,strlen((char*)cmd_buff), 100);
 8002924:	480c      	ldr	r0, [pc, #48]	@ (8002958 <GetHeigh_f+0x68>)
 8002926:	f7fd fcb3 	bl	8000290 <strlen>
 800292a:	4603      	mov	r3, r0
 800292c:	b29a      	uxth	r2, r3
 800292e:	2364      	movs	r3, #100	@ 0x64
 8002930:	4909      	ldr	r1, [pc, #36]	@ (8002958 <GetHeigh_f+0x68>)
 8002932:	480a      	ldr	r0, [pc, #40]	@ (800295c <GetHeigh_f+0x6c>)
 8002934:	f003 f84a 	bl	80059cc <HAL_UART_Transmit>
	memset(cmd_buff,0,sizeof(cmd_buff));
 8002938:	22b4      	movs	r2, #180	@ 0xb4
 800293a:	2100      	movs	r1, #0
 800293c:	4806      	ldr	r0, [pc, #24]	@ (8002958 <GetHeigh_f+0x68>)
 800293e:	f008 f860 	bl	800aa02 <memset>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bdb0      	pop	{r4, r5, r7, pc}
 800294a:	bf00      	nop
 800294c:	200009a8 	.word	0x200009a8
 8002950:	20000014 	.word	0x20000014
 8002954:	0800e8a8 	.word	0x0800e8a8
 8002958:	200008c4 	.word	0x200008c4
 800295c:	20000a28 	.word	0x20000a28

08002960 <SysConfigMenu>:

void SysConfigMenu(char* arg){
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	currentMenu=SysConfig_Menu;
 8002968:	4b1f      	ldr	r3, [pc, #124]	@ (80029e8 <SysConfigMenu+0x88>)
 800296a:	2204      	movs	r2, #4
 800296c:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"------------------ SYSTEM CONFIGURATION MENU -----------------\r\n");
 800296e:	491f      	ldr	r1, [pc, #124]	@ (80029ec <SysConfigMenu+0x8c>)
 8002970:	481f      	ldr	r0, [pc, #124]	@ (80029f0 <SysConfigMenu+0x90>)
 8002972:	f007 ffe1 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002976:	481e      	ldr	r0, [pc, #120]	@ (80029f0 <SysConfigMenu+0x90>)
 8002978:	f7fd fc8a 	bl	8000290 <strlen>
 800297c:	4603      	mov	r3, r0
 800297e:	b29a      	uxth	r2, r3
 8002980:	2364      	movs	r3, #100	@ 0x64
 8002982:	491b      	ldr	r1, [pc, #108]	@ (80029f0 <SysConfigMenu+0x90>)
 8002984:	481b      	ldr	r0, [pc, #108]	@ (80029f4 <SysConfigMenu+0x94>)
 8002986:	f003 f821 	bl	80059cc <HAL_UART_Transmit>

	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	e023      	b.n	80029d8 <SysConfigMenu+0x78>
	{if (cmd_list[l].MenuIndex==SysConfig_Menu)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	4a19      	ldr	r2, [pc, #100]	@ (80029f8 <SysConfigMenu+0x98>)
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	4413      	add	r3, r2
 8002998:	330c      	adds	r3, #12
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d118      	bne.n	80029d2 <SysConfigMenu+0x72>
	{sprintf((char*)txBuffer,"%s %s \r\n",cmd_list[l].Name, cmd_list[l].helper);
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	4a15      	ldr	r2, [pc, #84]	@ (80029f8 <SysConfigMenu+0x98>)
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	4413      	add	r3, r2
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	4912      	ldr	r1, [pc, #72]	@ (80029f8 <SysConfigMenu+0x98>)
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	440b      	add	r3, r1
 80029b2:	3304      	adds	r3, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4911      	ldr	r1, [pc, #68]	@ (80029fc <SysConfigMenu+0x9c>)
 80029b8:	480d      	ldr	r0, [pc, #52]	@ (80029f0 <SysConfigMenu+0x90>)
 80029ba:	f007 ffbd 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 80029be:	480c      	ldr	r0, [pc, #48]	@ (80029f0 <SysConfigMenu+0x90>)
 80029c0:	f7fd fc66 	bl	8000290 <strlen>
 80029c4:	4603      	mov	r3, r0
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	2364      	movs	r3, #100	@ 0x64
 80029ca:	4909      	ldr	r1, [pc, #36]	@ (80029f0 <SysConfigMenu+0x90>)
 80029cc:	4809      	ldr	r0, [pc, #36]	@ (80029f4 <SysConfigMenu+0x94>)
 80029ce:	f002 fffd 	bl	80059cc <HAL_UART_Transmit>
	for (uint8_t l=0;l<sizeof(cmd_list)/sizeof(cmd_list[0]);l++)
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	3301      	adds	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b25      	cmp	r3, #37	@ 0x25
 80029dc:	d9d8      	bls.n	8002990 <SysConfigMenu+0x30>
	}
	}

}
 80029de:	bf00      	nop
 80029e0:	bf00      	nop
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	200009d4 	.word	0x200009d4
 80029ec:	0800e908 	.word	0x0800e908
 80029f0:	200007c8 	.word	0x200007c8
 80029f4:	20000a28 	.word	0x20000a28
 80029f8:	20000044 	.word	0x20000044
 80029fc:	0800df98 	.word	0x0800df98

08002a00 <Save_f>:
void Save_f(char* arg){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	//Saving Lora Values
	Old_Default_Sf=LoraValues.sf_l;
 8002a08:	4ba2      	ldr	r3, [pc, #648]	@ (8002c94 <Save_f+0x294>)
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	4ba2      	ldr	r3, [pc, #648]	@ (8002c98 <Save_f+0x298>)
 8002a0e:	701a      	strb	r2, [r3, #0]
	LoraValues.sf_l=Sf_New_Value;
 8002a10:	4ba2      	ldr	r3, [pc, #648]	@ (8002c9c <Save_f+0x29c>)
 8002a12:	781a      	ldrb	r2, [r3, #0]
 8002a14:	4b9f      	ldr	r3, [pc, #636]	@ (8002c94 <Save_f+0x294>)
 8002a16:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"The default SF Value is now %d\r\n",LoraValues.sf_l);
 8002a18:	4b9e      	ldr	r3, [pc, #632]	@ (8002c94 <Save_f+0x294>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	49a0      	ldr	r1, [pc, #640]	@ (8002ca0 <Save_f+0x2a0>)
 8002a20:	48a0      	ldr	r0, [pc, #640]	@ (8002ca4 <Save_f+0x2a4>)
 8002a22:	f007 ff89 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002a26:	489f      	ldr	r0, [pc, #636]	@ (8002ca4 <Save_f+0x2a4>)
 8002a28:	f7fd fc32 	bl	8000290 <strlen>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	2364      	movs	r3, #100	@ 0x64
 8002a32:	499c      	ldr	r1, [pc, #624]	@ (8002ca4 <Save_f+0x2a4>)
 8002a34:	489c      	ldr	r0, [pc, #624]	@ (8002ca8 <Save_f+0x2a8>)
 8002a36:	f002 ffc9 	bl	80059cc <HAL_UART_Transmit>
	Old_Default_Bw=LoraValues.bw_l;
 8002a3a:	4b96      	ldr	r3, [pc, #600]	@ (8002c94 <Save_f+0x294>)
 8002a3c:	789a      	ldrb	r2, [r3, #2]
 8002a3e:	4b9b      	ldr	r3, [pc, #620]	@ (8002cac <Save_f+0x2ac>)
 8002a40:	701a      	strb	r2, [r3, #0]
	LoraValues.bw_l=Bw_New_Value;
 8002a42:	4b9b      	ldr	r3, [pc, #620]	@ (8002cb0 <Save_f+0x2b0>)
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	4b93      	ldr	r3, [pc, #588]	@ (8002c94 <Save_f+0x294>)
 8002a48:	709a      	strb	r2, [r3, #2]
	sprintf((char*)txBuffer,"The default Bandwidth Value is now %d\r\n",LoraValues.bw_l);
 8002a4a:	4b92      	ldr	r3, [pc, #584]	@ (8002c94 <Save_f+0x294>)
 8002a4c:	789b      	ldrb	r3, [r3, #2]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4998      	ldr	r1, [pc, #608]	@ (8002cb4 <Save_f+0x2b4>)
 8002a52:	4894      	ldr	r0, [pc, #592]	@ (8002ca4 <Save_f+0x2a4>)
 8002a54:	f007 ff70 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002a58:	4892      	ldr	r0, [pc, #584]	@ (8002ca4 <Save_f+0x2a4>)
 8002a5a:	f7fd fc19 	bl	8000290 <strlen>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	2364      	movs	r3, #100	@ 0x64
 8002a64:	498f      	ldr	r1, [pc, #572]	@ (8002ca4 <Save_f+0x2a4>)
 8002a66:	4890      	ldr	r0, [pc, #576]	@ (8002ca8 <Save_f+0x2a8>)
 8002a68:	f002 ffb0 	bl	80059cc <HAL_UART_Transmit>
	Old_Default_Cr=LoraValues.cr_l;
 8002a6c:	4b89      	ldr	r3, [pc, #548]	@ (8002c94 <Save_f+0x294>)
 8002a6e:	785a      	ldrb	r2, [r3, #1]
 8002a70:	4b91      	ldr	r3, [pc, #580]	@ (8002cb8 <Save_f+0x2b8>)
 8002a72:	701a      	strb	r2, [r3, #0]
	LoraValues.cr_l=Cr_New_Value;
 8002a74:	4b91      	ldr	r3, [pc, #580]	@ (8002cbc <Save_f+0x2bc>)
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	4b86      	ldr	r3, [pc, #536]	@ (8002c94 <Save_f+0x294>)
 8002a7a:	705a      	strb	r2, [r3, #1]
	sprintf((char*)txBuffer,"The default CR buffer is now %d\r\n",LoraValues.cr_l);
 8002a7c:	4b85      	ldr	r3, [pc, #532]	@ (8002c94 <Save_f+0x294>)
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	461a      	mov	r2, r3
 8002a82:	498f      	ldr	r1, [pc, #572]	@ (8002cc0 <Save_f+0x2c0>)
 8002a84:	4887      	ldr	r0, [pc, #540]	@ (8002ca4 <Save_f+0x2a4>)
 8002a86:	f007 ff57 	bl	800a938 <siprintf>

	//Saving GPS Values
	 Old_Default_AltGPS=Gps.alt_gps ;
 8002a8a:	4b8e      	ldr	r3, [pc, #568]	@ (8002cc4 <Save_f+0x2c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a8e      	ldr	r2, [pc, #568]	@ (8002cc8 <Save_f+0x2c8>)
 8002a90:	6013      	str	r3, [r2, #0]
	sprintf((char*)cmd_buff, "The default GPS ALTITUDE is now %.2f\r\n",Gps.alt_gps);
 8002a92:	4b8c      	ldr	r3, [pc, #560]	@ (8002cc4 <Save_f+0x2c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fd66 	bl	8000568 <__aeabi_f2d>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	498a      	ldr	r1, [pc, #552]	@ (8002ccc <Save_f+0x2cc>)
 8002aa2:	488b      	ldr	r0, [pc, #556]	@ (8002cd0 <Save_f+0x2d0>)
 8002aa4:	f007 ff48 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002aa8:	4889      	ldr	r0, [pc, #548]	@ (8002cd0 <Save_f+0x2d0>)
 8002aaa:	f7fd fbf1 	bl	8000290 <strlen>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	2364      	movs	r3, #100	@ 0x64
 8002ab4:	4986      	ldr	r1, [pc, #536]	@ (8002cd0 <Save_f+0x2d0>)
 8002ab6:	487c      	ldr	r0, [pc, #496]	@ (8002ca8 <Save_f+0x2a8>)
 8002ab8:	f002 ff88 	bl	80059cc <HAL_UART_Transmit>

	Old_Default_LatGPS=Gps.lat_gps ;
 8002abc:	4b81      	ldr	r3, [pc, #516]	@ (8002cc4 <Save_f+0x2c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a84      	ldr	r2, [pc, #528]	@ (8002cd4 <Save_f+0x2d4>)
 8002ac2:	6013      	str	r3, [r2, #0]
	sprintf((char*)cmd_buff, "The default GPS LATITUDE is now %.2f\r\n",Gps.lat_gps);
 8002ac4:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc4 <Save_f+0x2c4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fd4d 	bl	8000568 <__aeabi_f2d>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4981      	ldr	r1, [pc, #516]	@ (8002cd8 <Save_f+0x2d8>)
 8002ad4:	487e      	ldr	r0, [pc, #504]	@ (8002cd0 <Save_f+0x2d0>)
 8002ad6:	f007 ff2f 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002ada:	487d      	ldr	r0, [pc, #500]	@ (8002cd0 <Save_f+0x2d0>)
 8002adc:	f7fd fbd8 	bl	8000290 <strlen>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	2364      	movs	r3, #100	@ 0x64
 8002ae6:	497a      	ldr	r1, [pc, #488]	@ (8002cd0 <Save_f+0x2d0>)
 8002ae8:	486f      	ldr	r0, [pc, #444]	@ (8002ca8 <Save_f+0x2a8>)
 8002aea:	f002 ff6f 	bl	80059cc <HAL_UART_Transmit>

	Old_Default_TimeGPS=Gps.time_gps ;
 8002aee:	4b75      	ldr	r3, [pc, #468]	@ (8002cc4 <Save_f+0x2c4>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afa:	4b78      	ldr	r3, [pc, #480]	@ (8002cdc <Save_f+0x2dc>)
 8002afc:	edc3 7a00 	vstr	s15, [r3]
	sprintf((char*)cmd_buff, "The default GPS TIME is now %lu\r\n",Gps.time_gps);
 8002b00:	4b70      	ldr	r3, [pc, #448]	@ (8002cc4 <Save_f+0x2c4>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4976      	ldr	r1, [pc, #472]	@ (8002ce0 <Save_f+0x2e0>)
 8002b08:	4871      	ldr	r0, [pc, #452]	@ (8002cd0 <Save_f+0x2d0>)
 8002b0a:	f007 ff15 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002b0e:	4870      	ldr	r0, [pc, #448]	@ (8002cd0 <Save_f+0x2d0>)
 8002b10:	f7fd fbbe 	bl	8000290 <strlen>
 8002b14:	4603      	mov	r3, r0
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	2364      	movs	r3, #100	@ 0x64
 8002b1a:	496d      	ldr	r1, [pc, #436]	@ (8002cd0 <Save_f+0x2d0>)
 8002b1c:	4862      	ldr	r0, [pc, #392]	@ (8002ca8 <Save_f+0x2a8>)
 8002b1e:	f002 ff55 	bl	80059cc <HAL_UART_Transmit>

	//Saving Sensors Values

	Old_Default_Radiation = SensorsValues.Radiation_s;
 8002b22:	4b70      	ldr	r3, [pc, #448]	@ (8002ce4 <Save_f+0x2e4>)
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	4a70      	ldr	r2, [pc, #448]	@ (8002ce8 <Save_f+0x2e8>)
 8002b28:	6013      	str	r3, [r2, #0]
	SensorsValues.Radiation_s = Radiation_New_Value;
 8002b2a:	4b70      	ldr	r3, [pc, #448]	@ (8002cec <Save_f+0x2ec>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a6d      	ldr	r2, [pc, #436]	@ (8002ce4 <Save_f+0x2e4>)
 8002b30:	6253      	str	r3, [r2, #36]	@ 0x24
	sprintf((char*)txBuffer, "The default Radiation is now %.2f\r\n", SensorsValues.Radiation_s);
 8002b32:	4b6c      	ldr	r3, [pc, #432]	@ (8002ce4 <Save_f+0x2e4>)
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd16 	bl	8000568 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	496b      	ldr	r1, [pc, #428]	@ (8002cf0 <Save_f+0x2f0>)
 8002b42:	4858      	ldr	r0, [pc, #352]	@ (8002ca4 <Save_f+0x2a4>)
 8002b44:	f007 fef8 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002b48:	4856      	ldr	r0, [pc, #344]	@ (8002ca4 <Save_f+0x2a4>)
 8002b4a:	f7fd fba1 	bl	8000290 <strlen>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	2364      	movs	r3, #100	@ 0x64
 8002b54:	4953      	ldr	r1, [pc, #332]	@ (8002ca4 <Save_f+0x2a4>)
 8002b56:	4854      	ldr	r0, [pc, #336]	@ (8002ca8 <Save_f+0x2a8>)
 8002b58:	f002 ff38 	bl	80059cc <HAL_UART_Transmit>

	Old_Default_KC = SensorsValues.Kc;
 8002b5c:	4b61      	ldr	r3, [pc, #388]	@ (8002ce4 <Save_f+0x2e4>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	4a64      	ldr	r2, [pc, #400]	@ (8002cf4 <Save_f+0x2f4>)
 8002b62:	6013      	str	r3, [r2, #0]
	SensorsValues.Kc = Kc_New_Value;
 8002b64:	4b64      	ldr	r3, [pc, #400]	@ (8002cf8 <Save_f+0x2f8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a5e      	ldr	r2, [pc, #376]	@ (8002ce4 <Save_f+0x2e4>)
 8002b6a:	6193      	str	r3, [r2, #24]
	sprintf((char*)txBuffer, "The default Kc value is now %.2f\r\n", SensorsValues.Kc);
 8002b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ce4 <Save_f+0x2e4>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fcf9 	bl	8000568 <__aeabi_f2d>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4960      	ldr	r1, [pc, #384]	@ (8002cfc <Save_f+0x2fc>)
 8002b7c:	4849      	ldr	r0, [pc, #292]	@ (8002ca4 <Save_f+0x2a4>)
 8002b7e:	f007 fedb 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002b82:	4848      	ldr	r0, [pc, #288]	@ (8002ca4 <Save_f+0x2a4>)
 8002b84:	f7fd fb84 	bl	8000290 <strlen>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	2364      	movs	r3, #100	@ 0x64
 8002b8e:	4945      	ldr	r1, [pc, #276]	@ (8002ca4 <Save_f+0x2a4>)
 8002b90:	4845      	ldr	r0, [pc, #276]	@ (8002ca8 <Save_f+0x2a8>)
 8002b92:	f002 ff1b 	bl	80059cc <HAL_UART_Transmit>

	Old_Default_KP = SensorsValues.Kp;
 8002b96:	4b53      	ldr	r3, [pc, #332]	@ (8002ce4 <Save_f+0x2e4>)
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	4a59      	ldr	r2, [pc, #356]	@ (8002d00 <Save_f+0x300>)
 8002b9c:	6013      	str	r3, [r2, #0]
	SensorsValues.Kp = Kp_New_Value;
 8002b9e:	4b59      	ldr	r3, [pc, #356]	@ (8002d04 <Save_f+0x304>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a50      	ldr	r2, [pc, #320]	@ (8002ce4 <Save_f+0x2e4>)
 8002ba4:	61d3      	str	r3, [r2, #28]
	sprintf((char*)txBuffer, "The default Kp value is now %.2f\r\n", SensorsValues.Kp);
 8002ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8002ce4 <Save_f+0x2e4>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fd fcdc 	bl	8000568 <__aeabi_f2d>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4954      	ldr	r1, [pc, #336]	@ (8002d08 <Save_f+0x308>)
 8002bb6:	483b      	ldr	r0, [pc, #236]	@ (8002ca4 <Save_f+0x2a4>)
 8002bb8:	f007 febe 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002bbc:	4839      	ldr	r0, [pc, #228]	@ (8002ca4 <Save_f+0x2a4>)
 8002bbe:	f7fd fb67 	bl	8000290 <strlen>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	2364      	movs	r3, #100	@ 0x64
 8002bc8:	4936      	ldr	r1, [pc, #216]	@ (8002ca4 <Save_f+0x2a4>)
 8002bca:	4837      	ldr	r0, [pc, #220]	@ (8002ca8 <Save_f+0x2a8>)
 8002bcc:	f002 fefe 	bl	80059cc <HAL_UART_Transmit>

	Old_Default_ET0 = SensorsValues.ET0;
 8002bd0:	4b44      	ldr	r3, [pc, #272]	@ (8002ce4 <Save_f+0x2e4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a4d      	ldr	r2, [pc, #308]	@ (8002d0c <Save_f+0x30c>)
 8002bd6:	6013      	str	r3, [r2, #0]
	SensorsValues.ET0 = Et0_New_Value;
 8002bd8:	4b4d      	ldr	r3, [pc, #308]	@ (8002d10 <Save_f+0x310>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a41      	ldr	r2, [pc, #260]	@ (8002ce4 <Save_f+0x2e4>)
 8002bde:	6213      	str	r3, [r2, #32]
	sprintf((char*)txBuffer, "The default ET0 value is now %.2f\r\n", SensorsValues.ET0);
 8002be0:	4b40      	ldr	r3, [pc, #256]	@ (8002ce4 <Save_f+0x2e4>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fcbf 	bl	8000568 <__aeabi_f2d>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4949      	ldr	r1, [pc, #292]	@ (8002d14 <Save_f+0x314>)
 8002bf0:	482c      	ldr	r0, [pc, #176]	@ (8002ca4 <Save_f+0x2a4>)
 8002bf2:	f007 fea1 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002bf6:	482b      	ldr	r0, [pc, #172]	@ (8002ca4 <Save_f+0x2a4>)
 8002bf8:	f7fd fb4a 	bl	8000290 <strlen>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	2364      	movs	r3, #100	@ 0x64
 8002c02:	4928      	ldr	r1, [pc, #160]	@ (8002ca4 <Save_f+0x2a4>)
 8002c04:	4828      	ldr	r0, [pc, #160]	@ (8002ca8 <Save_f+0x2a8>)
 8002c06:	f002 fee1 	bl	80059cc <HAL_UART_Transmit>

	Old_Default_ETC = SensorsValues.ETc;
 8002c0a:	4b36      	ldr	r3, [pc, #216]	@ (8002ce4 <Save_f+0x2e4>)
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0e:	4a42      	ldr	r2, [pc, #264]	@ (8002d18 <Save_f+0x318>)
 8002c10:	6013      	str	r3, [r2, #0]
	SensorsValues.ETc = Etc_New_Value;
 8002c12:	4b42      	ldr	r3, [pc, #264]	@ (8002d1c <Save_f+0x31c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a33      	ldr	r2, [pc, #204]	@ (8002ce4 <Save_f+0x2e4>)
 8002c18:	6293      	str	r3, [r2, #40]	@ 0x28
	sprintf((char*)txBuffer, "The default ETc value is now %.2f\r\n", SensorsValues.ETc);
 8002c1a:	4b32      	ldr	r3, [pc, #200]	@ (8002ce4 <Save_f+0x2e4>)
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fca2 	bl	8000568 <__aeabi_f2d>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	493d      	ldr	r1, [pc, #244]	@ (8002d20 <Save_f+0x320>)
 8002c2a:	481e      	ldr	r0, [pc, #120]	@ (8002ca4 <Save_f+0x2a4>)
 8002c2c:	f007 fe84 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002c30:	481c      	ldr	r0, [pc, #112]	@ (8002ca4 <Save_f+0x2a4>)
 8002c32:	f7fd fb2d 	bl	8000290 <strlen>
 8002c36:	4603      	mov	r3, r0
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	2364      	movs	r3, #100	@ 0x64
 8002c3c:	4919      	ldr	r1, [pc, #100]	@ (8002ca4 <Save_f+0x2a4>)
 8002c3e:	481a      	ldr	r0, [pc, #104]	@ (8002ca8 <Save_f+0x2a8>)
 8002c40:	f002 fec4 	bl	80059cc <HAL_UART_Transmit>

	Old_Default_ETCadj = SensorsValues.ETcAdj;
 8002c44:	4b27      	ldr	r3, [pc, #156]	@ (8002ce4 <Save_f+0x2e4>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c48:	4a36      	ldr	r2, [pc, #216]	@ (8002d24 <Save_f+0x324>)
 8002c4a:	6013      	str	r3, [r2, #0]
	SensorsValues.ETcAdj = EtcAdj_New_Value;
 8002c4c:	4b36      	ldr	r3, [pc, #216]	@ (8002d28 <Save_f+0x328>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a24      	ldr	r2, [pc, #144]	@ (8002ce4 <Save_f+0x2e4>)
 8002c52:	62d3      	str	r3, [r2, #44]	@ 0x2c
	sprintf((char*)txBuffer, "The default ETcAdj value is now %.2f\r\n", SensorsValues.ETcAdj);
 8002c54:	4b23      	ldr	r3, [pc, #140]	@ (8002ce4 <Save_f+0x2e4>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fc85 	bl	8000568 <__aeabi_f2d>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4932      	ldr	r1, [pc, #200]	@ (8002d2c <Save_f+0x32c>)
 8002c64:	480f      	ldr	r0, [pc, #60]	@ (8002ca4 <Save_f+0x2a4>)
 8002c66:	f007 fe67 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002c6a:	480e      	ldr	r0, [pc, #56]	@ (8002ca4 <Save_f+0x2a4>)
 8002c6c:	f7fd fb10 	bl	8000290 <strlen>
 8002c70:	4603      	mov	r3, r0
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	2364      	movs	r3, #100	@ 0x64
 8002c76:	490b      	ldr	r1, [pc, #44]	@ (8002ca4 <Save_f+0x2a4>)
 8002c78:	480b      	ldr	r0, [pc, #44]	@ (8002ca8 <Save_f+0x2a8>)
 8002c7a:	f002 fea7 	bl	80059cc <HAL_UART_Transmit>

	Old_Default_Heigh = Height_New_Value;
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d30 <Save_f+0x330>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2c      	ldr	r2, [pc, #176]	@ (8002d34 <Save_f+0x334>)
 8002c84:	6013      	str	r3, [r2, #0]
	sprintf((char*)txBuffer, "The default Height is now %.2f\r\n", Old_Default_Heigh);
 8002c86:	4b2b      	ldr	r3, [pc, #172]	@ (8002d34 <Save_f+0x334>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fc6c 	bl	8000568 <__aeabi_f2d>
 8002c90:	e052      	b.n	8002d38 <Save_f+0x338>
 8002c92:	bf00      	nop
 8002c94:	20000004 	.word	0x20000004
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	200008c0 	.word	0x200008c0
 8002ca0:	0800e94c 	.word	0x0800e94c
 8002ca4:	200007c8 	.word	0x200007c8
 8002ca8:	20000a28 	.word	0x20000a28
 8002cac:	20000001 	.word	0x20000001
 8002cb0:	20000979 	.word	0x20000979
 8002cb4:	0800e970 	.word	0x0800e970
 8002cb8:	20000002 	.word	0x20000002
 8002cbc:	20000978 	.word	0x20000978
 8002cc0:	0800e998 	.word	0x0800e998
 8002cc4:	20000008 	.word	0x20000008
 8002cc8:	200009cc 	.word	0x200009cc
 8002ccc:	0800e9bc 	.word	0x0800e9bc
 8002cd0:	200008c4 	.word	0x200008c4
 8002cd4:	200009d0 	.word	0x200009d0
 8002cd8:	0800e9e4 	.word	0x0800e9e4
 8002cdc:	200009c8 	.word	0x200009c8
 8002ce0:	0800ea0c 	.word	0x0800ea0c
 8002ce4:	20000014 	.word	0x20000014
 8002ce8:	200009ac 	.word	0x200009ac
 8002cec:	2000098c 	.word	0x2000098c
 8002cf0:	0800ea30 	.word	0x0800ea30
 8002cf4:	200009b0 	.word	0x200009b0
 8002cf8:	20000990 	.word	0x20000990
 8002cfc:	0800ea54 	.word	0x0800ea54
 8002d00:	200009b4 	.word	0x200009b4
 8002d04:	20000994 	.word	0x20000994
 8002d08:	0800ea78 	.word	0x0800ea78
 8002d0c:	200009b8 	.word	0x200009b8
 8002d10:	20000998 	.word	0x20000998
 8002d14:	0800ea9c 	.word	0x0800ea9c
 8002d18:	200009bc 	.word	0x200009bc
 8002d1c:	2000099c 	.word	0x2000099c
 8002d20:	0800eac0 	.word	0x0800eac0
 8002d24:	200009c0 	.word	0x200009c0
 8002d28:	200009a0 	.word	0x200009a0
 8002d2c:	0800eae4 	.word	0x0800eae4
 8002d30:	200009a8 	.word	0x200009a8
 8002d34:	200009c4 	.word	0x200009c4
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4908      	ldr	r1, [pc, #32]	@ (8002d60 <Save_f+0x360>)
 8002d3e:	4809      	ldr	r0, [pc, #36]	@ (8002d64 <Save_f+0x364>)
 8002d40:	f007 fdfa 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002d44:	4807      	ldr	r0, [pc, #28]	@ (8002d64 <Save_f+0x364>)
 8002d46:	f7fd faa3 	bl	8000290 <strlen>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	2364      	movs	r3, #100	@ 0x64
 8002d50:	4904      	ldr	r1, [pc, #16]	@ (8002d64 <Save_f+0x364>)
 8002d52:	4805      	ldr	r0, [pc, #20]	@ (8002d68 <Save_f+0x368>)
 8002d54:	f002 fe3a 	bl	80059cc <HAL_UART_Transmit>

}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	0800eb0c 	.word	0x0800eb0c
 8002d64:	200007c8 	.word	0x200007c8
 8002d68:	20000a28 	.word	0x20000a28

08002d6c <Restore_f>:
void Restore_f(char* arg){
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	//Restoring Lora Values
	LoraValues.sf_l=Old_Default_Sf;
 8002d74:	4b9e      	ldr	r3, [pc, #632]	@ (8002ff0 <Restore_f+0x284>)
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	4b9e      	ldr	r3, [pc, #632]	@ (8002ff4 <Restore_f+0x288>)
 8002d7a:	701a      	strb	r2, [r3, #0]
	sprintf((char*)txBuffer,"SF value restored to %d\r\n",LoraValues.sf_l);
 8002d7c:	4b9d      	ldr	r3, [pc, #628]	@ (8002ff4 <Restore_f+0x288>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	499d      	ldr	r1, [pc, #628]	@ (8002ff8 <Restore_f+0x28c>)
 8002d84:	489d      	ldr	r0, [pc, #628]	@ (8002ffc <Restore_f+0x290>)
 8002d86:	f007 fdd7 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002d8a:	489c      	ldr	r0, [pc, #624]	@ (8002ffc <Restore_f+0x290>)
 8002d8c:	f7fd fa80 	bl	8000290 <strlen>
 8002d90:	4603      	mov	r3, r0
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	2364      	movs	r3, #100	@ 0x64
 8002d96:	4999      	ldr	r1, [pc, #612]	@ (8002ffc <Restore_f+0x290>)
 8002d98:	4899      	ldr	r0, [pc, #612]	@ (8003000 <Restore_f+0x294>)
 8002d9a:	f002 fe17 	bl	80059cc <HAL_UART_Transmit>
	LoraValues.bw_l=Old_Default_Bw;
 8002d9e:	4b99      	ldr	r3, [pc, #612]	@ (8003004 <Restore_f+0x298>)
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	4b94      	ldr	r3, [pc, #592]	@ (8002ff4 <Restore_f+0x288>)
 8002da4:	709a      	strb	r2, [r3, #2]
	sprintf((char*)txBuffer,"BW value restored to %d\r\n",LoraValues.bw_l);
 8002da6:	4b93      	ldr	r3, [pc, #588]	@ (8002ff4 <Restore_f+0x288>)
 8002da8:	789b      	ldrb	r3, [r3, #2]
 8002daa:	461a      	mov	r2, r3
 8002dac:	4996      	ldr	r1, [pc, #600]	@ (8003008 <Restore_f+0x29c>)
 8002dae:	4893      	ldr	r0, [pc, #588]	@ (8002ffc <Restore_f+0x290>)
 8002db0:	f007 fdc2 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002db4:	4891      	ldr	r0, [pc, #580]	@ (8002ffc <Restore_f+0x290>)
 8002db6:	f7fd fa6b 	bl	8000290 <strlen>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	2364      	movs	r3, #100	@ 0x64
 8002dc0:	498e      	ldr	r1, [pc, #568]	@ (8002ffc <Restore_f+0x290>)
 8002dc2:	488f      	ldr	r0, [pc, #572]	@ (8003000 <Restore_f+0x294>)
 8002dc4:	f002 fe02 	bl	80059cc <HAL_UART_Transmit>
	LoraValues.cr_l=Old_Default_Cr;
 8002dc8:	4b90      	ldr	r3, [pc, #576]	@ (800300c <Restore_f+0x2a0>)
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	4b89      	ldr	r3, [pc, #548]	@ (8002ff4 <Restore_f+0x288>)
 8002dce:	705a      	strb	r2, [r3, #1]
	sprintf((char*)txBuffer,"CR value restored to %d\r\n",LoraValues.cr_l);
 8002dd0:	4b88      	ldr	r3, [pc, #544]	@ (8002ff4 <Restore_f+0x288>)
 8002dd2:	785b      	ldrb	r3, [r3, #1]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	498e      	ldr	r1, [pc, #568]	@ (8003010 <Restore_f+0x2a4>)
 8002dd8:	4888      	ldr	r0, [pc, #544]	@ (8002ffc <Restore_f+0x290>)
 8002dda:	f007 fdad 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, txBuffer, strlen((char*)txBuffer), 100);
 8002dde:	4887      	ldr	r0, [pc, #540]	@ (8002ffc <Restore_f+0x290>)
 8002de0:	f7fd fa56 	bl	8000290 <strlen>
 8002de4:	4603      	mov	r3, r0
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	2364      	movs	r3, #100	@ 0x64
 8002dea:	4984      	ldr	r1, [pc, #528]	@ (8002ffc <Restore_f+0x290>)
 8002dec:	4884      	ldr	r0, [pc, #528]	@ (8003000 <Restore_f+0x294>)
 8002dee:	f002 fded 	bl	80059cc <HAL_UART_Transmit>

	//Restoring GPS Values
	Gps.alt_gps = Old_Default_AltGPS;
 8002df2:	4b88      	ldr	r3, [pc, #544]	@ (8003014 <Restore_f+0x2a8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a88      	ldr	r2, [pc, #544]	@ (8003018 <Restore_f+0x2ac>)
 8002df8:	6013      	str	r3, [r2, #0]
	sprintf((char*)cmd_buff, "GPS ALTITUDE restored to %.2f\r\n",Gps.alt_gps);
 8002dfa:	4b87      	ldr	r3, [pc, #540]	@ (8003018 <Restore_f+0x2ac>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fbb2 	bl	8000568 <__aeabi_f2d>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4984      	ldr	r1, [pc, #528]	@ (800301c <Restore_f+0x2b0>)
 8002e0a:	4885      	ldr	r0, [pc, #532]	@ (8003020 <Restore_f+0x2b4>)
 8002e0c:	f007 fd94 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002e10:	4883      	ldr	r0, [pc, #524]	@ (8003020 <Restore_f+0x2b4>)
 8002e12:	f7fd fa3d 	bl	8000290 <strlen>
 8002e16:	4603      	mov	r3, r0
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	2364      	movs	r3, #100	@ 0x64
 8002e1c:	4980      	ldr	r1, [pc, #512]	@ (8003020 <Restore_f+0x2b4>)
 8002e1e:	4878      	ldr	r0, [pc, #480]	@ (8003000 <Restore_f+0x294>)
 8002e20:	f002 fdd4 	bl	80059cc <HAL_UART_Transmit>

	Gps.lat_gps = Old_Default_LatGPS;
 8002e24:	4b7f      	ldr	r3, [pc, #508]	@ (8003024 <Restore_f+0x2b8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a7b      	ldr	r2, [pc, #492]	@ (8003018 <Restore_f+0x2ac>)
 8002e2a:	6053      	str	r3, [r2, #4]
	sprintf((char*)cmd_buff, "GPS LATITUDE restored to %.2f\r\n",Gps.lat_gps);
 8002e2c:	4b7a      	ldr	r3, [pc, #488]	@ (8003018 <Restore_f+0x2ac>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fb99 	bl	8000568 <__aeabi_f2d>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	497b      	ldr	r1, [pc, #492]	@ (8003028 <Restore_f+0x2bc>)
 8002e3c:	4878      	ldr	r0, [pc, #480]	@ (8003020 <Restore_f+0x2b4>)
 8002e3e:	f007 fd7b 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002e42:	4877      	ldr	r0, [pc, #476]	@ (8003020 <Restore_f+0x2b4>)
 8002e44:	f7fd fa24 	bl	8000290 <strlen>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	2364      	movs	r3, #100	@ 0x64
 8002e4e:	4974      	ldr	r1, [pc, #464]	@ (8003020 <Restore_f+0x2b4>)
 8002e50:	486b      	ldr	r0, [pc, #428]	@ (8003000 <Restore_f+0x294>)
 8002e52:	f002 fdbb 	bl	80059cc <HAL_UART_Transmit>

	Gps.time_gps = Old_Default_TimeGPS;
 8002e56:	4b75      	ldr	r3, [pc, #468]	@ (800302c <Restore_f+0x2c0>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e60:	ee17 2a90 	vmov	r2, s15
 8002e64:	4b6c      	ldr	r3, [pc, #432]	@ (8003018 <Restore_f+0x2ac>)
 8002e66:	609a      	str	r2, [r3, #8]
	sprintf((char*)cmd_buff, "GPS TIME restored to %lu\r\n",Gps.time_gps);
 8002e68:	4b6b      	ldr	r3, [pc, #428]	@ (8003018 <Restore_f+0x2ac>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4970      	ldr	r1, [pc, #448]	@ (8003030 <Restore_f+0x2c4>)
 8002e70:	486b      	ldr	r0, [pc, #428]	@ (8003020 <Restore_f+0x2b4>)
 8002e72:	f007 fd61 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002e76:	486a      	ldr	r0, [pc, #424]	@ (8003020 <Restore_f+0x2b4>)
 8002e78:	f7fd fa0a 	bl	8000290 <strlen>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	2364      	movs	r3, #100	@ 0x64
 8002e82:	4967      	ldr	r1, [pc, #412]	@ (8003020 <Restore_f+0x2b4>)
 8002e84:	485e      	ldr	r0, [pc, #376]	@ (8003000 <Restore_f+0x294>)
 8002e86:	f002 fda1 	bl	80059cc <HAL_UART_Transmit>
	//Restoring Sensors Values

	SensorsValues.Radiation_s = Old_Default_Radiation;
 8002e8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003034 <Restore_f+0x2c8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a6a      	ldr	r2, [pc, #424]	@ (8003038 <Restore_f+0x2cc>)
 8002e90:	6253      	str	r3, [r2, #36]	@ 0x24
	sprintf((char*)cmd_buff, "Radiation restored to %.2f\r\n", SensorsValues.Radiation_s);
 8002e92:	4b69      	ldr	r3, [pc, #420]	@ (8003038 <Restore_f+0x2cc>)
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd fb66 	bl	8000568 <__aeabi_f2d>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4966      	ldr	r1, [pc, #408]	@ (800303c <Restore_f+0x2d0>)
 8002ea2:	485f      	ldr	r0, [pc, #380]	@ (8003020 <Restore_f+0x2b4>)
 8002ea4:	f007 fd48 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002ea8:	485d      	ldr	r0, [pc, #372]	@ (8003020 <Restore_f+0x2b4>)
 8002eaa:	f7fd f9f1 	bl	8000290 <strlen>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	2364      	movs	r3, #100	@ 0x64
 8002eb4:	495a      	ldr	r1, [pc, #360]	@ (8003020 <Restore_f+0x2b4>)
 8002eb6:	4852      	ldr	r0, [pc, #328]	@ (8003000 <Restore_f+0x294>)
 8002eb8:	f002 fd88 	bl	80059cc <HAL_UART_Transmit>

	SensorsValues.Kc = Old_Default_KC;
 8002ebc:	4b60      	ldr	r3, [pc, #384]	@ (8003040 <Restore_f+0x2d4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a5d      	ldr	r2, [pc, #372]	@ (8003038 <Restore_f+0x2cc>)
 8002ec2:	6193      	str	r3, [r2, #24]
	sprintf((char*)cmd_buff, "Kc restored to %.2f\r\n", SensorsValues.Kc);
 8002ec4:	4b5c      	ldr	r3, [pc, #368]	@ (8003038 <Restore_f+0x2cc>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd fb4d 	bl	8000568 <__aeabi_f2d>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	495c      	ldr	r1, [pc, #368]	@ (8003044 <Restore_f+0x2d8>)
 8002ed4:	4852      	ldr	r0, [pc, #328]	@ (8003020 <Restore_f+0x2b4>)
 8002ed6:	f007 fd2f 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002eda:	4851      	ldr	r0, [pc, #324]	@ (8003020 <Restore_f+0x2b4>)
 8002edc:	f7fd f9d8 	bl	8000290 <strlen>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	2364      	movs	r3, #100	@ 0x64
 8002ee6:	494e      	ldr	r1, [pc, #312]	@ (8003020 <Restore_f+0x2b4>)
 8002ee8:	4845      	ldr	r0, [pc, #276]	@ (8003000 <Restore_f+0x294>)
 8002eea:	f002 fd6f 	bl	80059cc <HAL_UART_Transmit>

	SensorsValues.Kp = Old_Default_KP;
 8002eee:	4b56      	ldr	r3, [pc, #344]	@ (8003048 <Restore_f+0x2dc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a51      	ldr	r2, [pc, #324]	@ (8003038 <Restore_f+0x2cc>)
 8002ef4:	61d3      	str	r3, [r2, #28]
	sprintf((char*)cmd_buff, "Kp restored to %.2f\r\n", SensorsValues.Kp);
 8002ef6:	4b50      	ldr	r3, [pc, #320]	@ (8003038 <Restore_f+0x2cc>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fb34 	bl	8000568 <__aeabi_f2d>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4951      	ldr	r1, [pc, #324]	@ (800304c <Restore_f+0x2e0>)
 8002f06:	4846      	ldr	r0, [pc, #280]	@ (8003020 <Restore_f+0x2b4>)
 8002f08:	f007 fd16 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002f0c:	4844      	ldr	r0, [pc, #272]	@ (8003020 <Restore_f+0x2b4>)
 8002f0e:	f7fd f9bf 	bl	8000290 <strlen>
 8002f12:	4603      	mov	r3, r0
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	2364      	movs	r3, #100	@ 0x64
 8002f18:	4941      	ldr	r1, [pc, #260]	@ (8003020 <Restore_f+0x2b4>)
 8002f1a:	4839      	ldr	r0, [pc, #228]	@ (8003000 <Restore_f+0x294>)
 8002f1c:	f002 fd56 	bl	80059cc <HAL_UART_Transmit>

	SensorsValues.ET0 = Old_Default_ET0;
 8002f20:	4b4b      	ldr	r3, [pc, #300]	@ (8003050 <Restore_f+0x2e4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a44      	ldr	r2, [pc, #272]	@ (8003038 <Restore_f+0x2cc>)
 8002f26:	6213      	str	r3, [r2, #32]
	sprintf((char*)cmd_buff, "ET0 restored to %.2f\r\n", SensorsValues.ET0);
 8002f28:	4b43      	ldr	r3, [pc, #268]	@ (8003038 <Restore_f+0x2cc>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fb1b 	bl	8000568 <__aeabi_f2d>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4947      	ldr	r1, [pc, #284]	@ (8003054 <Restore_f+0x2e8>)
 8002f38:	4839      	ldr	r0, [pc, #228]	@ (8003020 <Restore_f+0x2b4>)
 8002f3a:	f007 fcfd 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002f3e:	4838      	ldr	r0, [pc, #224]	@ (8003020 <Restore_f+0x2b4>)
 8002f40:	f7fd f9a6 	bl	8000290 <strlen>
 8002f44:	4603      	mov	r3, r0
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	2364      	movs	r3, #100	@ 0x64
 8002f4a:	4935      	ldr	r1, [pc, #212]	@ (8003020 <Restore_f+0x2b4>)
 8002f4c:	482c      	ldr	r0, [pc, #176]	@ (8003000 <Restore_f+0x294>)
 8002f4e:	f002 fd3d 	bl	80059cc <HAL_UART_Transmit>

	SensorsValues.ETc = Old_Default_ETC;
 8002f52:	4b41      	ldr	r3, [pc, #260]	@ (8003058 <Restore_f+0x2ec>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a38      	ldr	r2, [pc, #224]	@ (8003038 <Restore_f+0x2cc>)
 8002f58:	6293      	str	r3, [r2, #40]	@ 0x28
	sprintf((char*)cmd_buff, "ETC restored to %.2f\r\n", SensorsValues.ETc);
 8002f5a:	4b37      	ldr	r3, [pc, #220]	@ (8003038 <Restore_f+0x2cc>)
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd fb02 	bl	8000568 <__aeabi_f2d>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	493c      	ldr	r1, [pc, #240]	@ (800305c <Restore_f+0x2f0>)
 8002f6a:	482d      	ldr	r0, [pc, #180]	@ (8003020 <Restore_f+0x2b4>)
 8002f6c:	f007 fce4 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002f70:	482b      	ldr	r0, [pc, #172]	@ (8003020 <Restore_f+0x2b4>)
 8002f72:	f7fd f98d 	bl	8000290 <strlen>
 8002f76:	4603      	mov	r3, r0
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	2364      	movs	r3, #100	@ 0x64
 8002f7c:	4928      	ldr	r1, [pc, #160]	@ (8003020 <Restore_f+0x2b4>)
 8002f7e:	4820      	ldr	r0, [pc, #128]	@ (8003000 <Restore_f+0x294>)
 8002f80:	f002 fd24 	bl	80059cc <HAL_UART_Transmit>

	SensorsValues.ETcAdj = Old_Default_ETCadj;
 8002f84:	4b36      	ldr	r3, [pc, #216]	@ (8003060 <Restore_f+0x2f4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a2b      	ldr	r2, [pc, #172]	@ (8003038 <Restore_f+0x2cc>)
 8002f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	sprintf((char*)cmd_buff, "ETC Adjusted restored to %.2f\r\n", SensorsValues.ETcAdj);
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003038 <Restore_f+0x2cc>)
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fae9 	bl	8000568 <__aeabi_f2d>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4932      	ldr	r1, [pc, #200]	@ (8003064 <Restore_f+0x2f8>)
 8002f9c:	4820      	ldr	r0, [pc, #128]	@ (8003020 <Restore_f+0x2b4>)
 8002f9e:	f007 fccb 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002fa2:	481f      	ldr	r0, [pc, #124]	@ (8003020 <Restore_f+0x2b4>)
 8002fa4:	f7fd f974 	bl	8000290 <strlen>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	2364      	movs	r3, #100	@ 0x64
 8002fae:	491c      	ldr	r1, [pc, #112]	@ (8003020 <Restore_f+0x2b4>)
 8002fb0:	4813      	ldr	r0, [pc, #76]	@ (8003000 <Restore_f+0x294>)
 8002fb2:	f002 fd0b 	bl	80059cc <HAL_UART_Transmit>

	Height_New_Value = Old_Default_Heigh;
 8002fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003068 <Restore_f+0x2fc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a2c      	ldr	r2, [pc, #176]	@ (800306c <Restore_f+0x300>)
 8002fbc:	6013      	str	r3, [r2, #0]
	sprintf((char*)cmd_buff, "Height restored to %.2f\r\n", Height_New_Value);
 8002fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800306c <Restore_f+0x300>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fad0 	bl	8000568 <__aeabi_f2d>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4928      	ldr	r1, [pc, #160]	@ (8003070 <Restore_f+0x304>)
 8002fce:	4814      	ldr	r0, [pc, #80]	@ (8003020 <Restore_f+0x2b4>)
 8002fd0:	f007 fcb2 	bl	800a938 <siprintf>
	HAL_UART_Transmit(&huart2, cmd_buff, strlen((char*)cmd_buff), 100);
 8002fd4:	4812      	ldr	r0, [pc, #72]	@ (8003020 <Restore_f+0x2b4>)
 8002fd6:	f7fd f95b 	bl	8000290 <strlen>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	2364      	movs	r3, #100	@ 0x64
 8002fe0:	490f      	ldr	r1, [pc, #60]	@ (8003020 <Restore_f+0x2b4>)
 8002fe2:	4807      	ldr	r0, [pc, #28]	@ (8003000 <Restore_f+0x294>)
 8002fe4:	f002 fcf2 	bl	80059cc <HAL_UART_Transmit>

}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	20000004 	.word	0x20000004
 8002ff8:	0800eb30 	.word	0x0800eb30
 8002ffc:	200007c8 	.word	0x200007c8
 8003000:	20000a28 	.word	0x20000a28
 8003004:	20000001 	.word	0x20000001
 8003008:	0800eb4c 	.word	0x0800eb4c
 800300c:	20000002 	.word	0x20000002
 8003010:	0800eb68 	.word	0x0800eb68
 8003014:	200009cc 	.word	0x200009cc
 8003018:	20000008 	.word	0x20000008
 800301c:	0800eb84 	.word	0x0800eb84
 8003020:	200008c4 	.word	0x200008c4
 8003024:	200009d0 	.word	0x200009d0
 8003028:	0800eba4 	.word	0x0800eba4
 800302c:	200009c8 	.word	0x200009c8
 8003030:	0800ebc4 	.word	0x0800ebc4
 8003034:	200009ac 	.word	0x200009ac
 8003038:	20000014 	.word	0x20000014
 800303c:	0800ebe0 	.word	0x0800ebe0
 8003040:	200009b0 	.word	0x200009b0
 8003044:	0800ec00 	.word	0x0800ec00
 8003048:	200009b4 	.word	0x200009b4
 800304c:	0800ec18 	.word	0x0800ec18
 8003050:	200009b8 	.word	0x200009b8
 8003054:	0800ec30 	.word	0x0800ec30
 8003058:	200009bc 	.word	0x200009bc
 800305c:	0800ec48 	.word	0x0800ec48
 8003060:	200009c0 	.word	0x200009c0
 8003064:	0800ec60 	.word	0x0800ec60
 8003068:	200009c4 	.word	0x200009c4
 800306c:	200009a8 	.word	0x200009a8
 8003070:	0800ec80 	.word	0x0800ec80

08003074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003078:	f000 fade 	bl	8003638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800307c:	f000 f80a 	bl	8003094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003080:	f7fe f834 	bl	80010ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003084:	f000 fa1a 	bl	80034bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003088:	f7fd fff4 	bl	8001074 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800308c:	f004 f852 	bl	8007134 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <main+0x1c>

08003094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b096      	sub	sp, #88	@ 0x58
 8003098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800309a:	f107 0314 	add.w	r3, r7, #20
 800309e:	2244      	movs	r2, #68	@ 0x44
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f007 fcad 	bl	800aa02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030a8:	463b      	mov	r3, r7
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	605a      	str	r2, [r3, #4]
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	60da      	str	r2, [r3, #12]
 80030b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80030b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80030ba:	f000 fe2f 	bl	8003d1c <HAL_PWREx_ControlVoltageScaling>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80030c4:	f000 f84a 	bl	800315c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030c8:	2302      	movs	r3, #2
 80030ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030d2:	2310      	movs	r3, #16
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030d6:	2302      	movs	r3, #2
 80030d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030da:	2302      	movs	r3, #2
 80030dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80030de:	2301      	movs	r3, #1
 80030e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80030e2:	230a      	movs	r3, #10
 80030e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80030e6:	2307      	movs	r3, #7
 80030e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80030ea:	2302      	movs	r3, #2
 80030ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80030ee:	2302      	movs	r3, #2
 80030f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030f2:	f107 0314 	add.w	r3, r7, #20
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fe66 	bl	8003dc8 <HAL_RCC_OscConfig>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003102:	f000 f82b 	bl	800315c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003106:	230f      	movs	r3, #15
 8003108:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800310a:	2303      	movs	r3, #3
 800310c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800311a:	463b      	mov	r3, r7
 800311c:	2104      	movs	r1, #4
 800311e:	4618      	mov	r0, r3
 8003120:	f001 fa2e 	bl	8004580 <HAL_RCC_ClockConfig>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800312a:	f000 f817 	bl	800315c <Error_Handler>
  }
}
 800312e:	bf00      	nop
 8003130:	3758      	adds	r7, #88	@ 0x58
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800314a:	f000 fa95 	bl	8003678 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40001000 	.word	0x40001000

0800315c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003160:	b672      	cpsid	i
}
 8003162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <Error_Handler+0x8>

08003168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316e:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <HAL_MspInit+0x4c>)
 8003170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003172:	4a10      	ldr	r2, [pc, #64]	@ (80031b4 <HAL_MspInit+0x4c>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6613      	str	r3, [r2, #96]	@ 0x60
 800317a:	4b0e      	ldr	r3, [pc, #56]	@ (80031b4 <HAL_MspInit+0x4c>)
 800317c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003186:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_MspInit+0x4c>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <HAL_MspInit+0x4c>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003190:	6593      	str	r3, [r2, #88]	@ 0x58
 8003192:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <HAL_MspInit+0x4c>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	210f      	movs	r1, #15
 80031a2:	f06f 0001 	mvn.w	r0, #1
 80031a6:	f000 fb3f 	bl	8003828 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08e      	sub	sp, #56	@ 0x38
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80031c6:	4b34      	ldr	r3, [pc, #208]	@ (8003298 <HAL_InitTick+0xe0>)
 80031c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ca:	4a33      	ldr	r2, [pc, #204]	@ (8003298 <HAL_InitTick+0xe0>)
 80031cc:	f043 0310 	orr.w	r3, r3, #16
 80031d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d2:	4b31      	ldr	r3, [pc, #196]	@ (8003298 <HAL_InitTick+0xe0>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031de:	f107 0210 	add.w	r2, r7, #16
 80031e2:	f107 0314 	add.w	r3, r7, #20
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f001 fb8d 	bl	8004908 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80031f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d103      	bne.n	8003200 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80031f8:	f001 fb5a 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 80031fc:	6378      	str	r0, [r7, #52]	@ 0x34
 80031fe:	e004      	b.n	800320a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003200:	f001 fb56 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 8003204:	4603      	mov	r3, r0
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800320a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320c:	4a23      	ldr	r2, [pc, #140]	@ (800329c <HAL_InitTick+0xe4>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0c9b      	lsrs	r3, r3, #18
 8003214:	3b01      	subs	r3, #1
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003218:	4b21      	ldr	r3, [pc, #132]	@ (80032a0 <HAL_InitTick+0xe8>)
 800321a:	4a22      	ldr	r2, [pc, #136]	@ (80032a4 <HAL_InitTick+0xec>)
 800321c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800321e:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <HAL_InitTick+0xe8>)
 8003220:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003224:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003226:	4a1e      	ldr	r2, [pc, #120]	@ (80032a0 <HAL_InitTick+0xe8>)
 8003228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800322c:	4b1c      	ldr	r3, [pc, #112]	@ (80032a0 <HAL_InitTick+0xe8>)
 800322e:	2200      	movs	r2, #0
 8003230:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003232:	4b1b      	ldr	r3, [pc, #108]	@ (80032a0 <HAL_InitTick+0xe8>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003238:	4b19      	ldr	r3, [pc, #100]	@ (80032a0 <HAL_InitTick+0xe8>)
 800323a:	2200      	movs	r2, #0
 800323c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800323e:	4818      	ldr	r0, [pc, #96]	@ (80032a0 <HAL_InitTick+0xe8>)
 8003240:	f002 f8b0 	bl	80053a4 <HAL_TIM_Base_Init>
 8003244:	4603      	mov	r3, r0
 8003246:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800324a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800324e:	2b00      	cmp	r3, #0
 8003250:	d11b      	bne.n	800328a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003252:	4813      	ldr	r0, [pc, #76]	@ (80032a0 <HAL_InitTick+0xe8>)
 8003254:	f002 f908 	bl	8005468 <HAL_TIM_Base_Start_IT>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800325e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003262:	2b00      	cmp	r3, #0
 8003264:	d111      	bne.n	800328a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003266:	2036      	movs	r0, #54	@ 0x36
 8003268:	f000 fafa 	bl	8003860 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b0f      	cmp	r3, #15
 8003270:	d808      	bhi.n	8003284 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003272:	2200      	movs	r2, #0
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	2036      	movs	r0, #54	@ 0x36
 8003278:	f000 fad6 	bl	8003828 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800327c:	4a0a      	ldr	r2, [pc, #40]	@ (80032a8 <HAL_InitTick+0xf0>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e002      	b.n	800328a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800328a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800328e:	4618      	mov	r0, r3
 8003290:	3738      	adds	r7, #56	@ 0x38
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	431bde83 	.word	0x431bde83
 80032a0:	200009d8 	.word	0x200009d8
 80032a4:	40001000 	.word	0x40001000
 80032a8:	200002ac 	.word	0x200002ac

080032ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <NMI_Handler+0x4>

080032b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <HardFault_Handler+0x4>

080032bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032c0:	bf00      	nop
 80032c2:	e7fd      	b.n	80032c0 <MemManage_Handler+0x4>

080032c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032c8:	bf00      	nop
 80032ca:	e7fd      	b.n	80032c8 <BusFault_Handler+0x4>

080032cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <UsageFault_Handler+0x4>

080032d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032e8:	4802      	ldr	r0, [pc, #8]	@ (80032f4 <USART2_IRQHandler+0x10>)
 80032ea:	f002 fc45 	bl	8005b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000a28 	.word	0x20000a28

080032f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032fc:	4802      	ldr	r0, [pc, #8]	@ (8003308 <TIM6_DAC_IRQHandler+0x10>)
 80032fe:	f002 f923 	bl	8005548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200009d8 	.word	0x200009d8

0800330c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return 1;
 8003310:	2301      	movs	r3, #1
}
 8003312:	4618      	mov	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <_kill>:

int _kill(int pid, int sig)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003326:	f007 fc8b 	bl	800ac40 <__errno>
 800332a:	4603      	mov	r3, r0
 800332c:	2216      	movs	r2, #22
 800332e:	601a      	str	r2, [r3, #0]
  return -1;
 8003330:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <_exit>:

void _exit (int status)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003344:	f04f 31ff 	mov.w	r1, #4294967295
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ffe7 	bl	800331c <_kill>
  while (1) {}    /* Make sure we hang here */
 800334e:	bf00      	nop
 8003350:	e7fd      	b.n	800334e <_exit+0x12>

08003352 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e00a      	b.n	800337a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003364:	f3af 8000 	nop.w
 8003368:	4601      	mov	r1, r0
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	60ba      	str	r2, [r7, #8]
 8003370:	b2ca      	uxtb	r2, r1
 8003372:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3301      	adds	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	429a      	cmp	r2, r3
 8003380:	dbf0      	blt.n	8003364 <_read+0x12>
  }

  return len;
 8003382:	687b      	ldr	r3, [r7, #4]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	e009      	b.n	80033b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	60ba      	str	r2, [r7, #8]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3301      	adds	r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	dbf1      	blt.n	800339e <_write+0x12>
  }
  return len;
 80033ba:	687b      	ldr	r3, [r7, #4]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_close>:

int _close(int file)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033ec:	605a      	str	r2, [r3, #4]
  return 0;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <_isatty>:

int _isatty(int file)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003404:	2301      	movs	r3, #1
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003412:	b480      	push	{r7}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003434:	4a14      	ldr	r2, [pc, #80]	@ (8003488 <_sbrk+0x5c>)
 8003436:	4b15      	ldr	r3, [pc, #84]	@ (800348c <_sbrk+0x60>)
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003440:	4b13      	ldr	r3, [pc, #76]	@ (8003490 <_sbrk+0x64>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <_sbrk+0x64>)
 800344a:	4a12      	ldr	r2, [pc, #72]	@ (8003494 <_sbrk+0x68>)
 800344c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800344e:	4b10      	ldr	r3, [pc, #64]	@ (8003490 <_sbrk+0x64>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	429a      	cmp	r2, r3
 800345a:	d207      	bcs.n	800346c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800345c:	f007 fbf0 	bl	800ac40 <__errno>
 8003460:	4603      	mov	r3, r0
 8003462:	220c      	movs	r2, #12
 8003464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295
 800346a:	e009      	b.n	8003480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800346c:	4b08      	ldr	r3, [pc, #32]	@ (8003490 <_sbrk+0x64>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003472:	4b07      	ldr	r3, [pc, #28]	@ (8003490 <_sbrk+0x64>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	4a05      	ldr	r2, [pc, #20]	@ (8003490 <_sbrk+0x64>)
 800347c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800347e:	68fb      	ldr	r3, [r7, #12]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20018000 	.word	0x20018000
 800348c:	00000400 	.word	0x00000400
 8003490:	20000a24 	.word	0x20000a24
 8003494:	20005b78 	.word	0x20005b78

08003498 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800349c:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <SystemInit+0x20>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a2:	4a05      	ldr	r2, [pc, #20]	@ (80034b8 <SystemInit+0x20>)
 80034a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034c0:	4b14      	ldr	r3, [pc, #80]	@ (8003514 <MX_USART2_UART_Init+0x58>)
 80034c2:	4a15      	ldr	r2, [pc, #84]	@ (8003518 <MX_USART2_UART_Init+0x5c>)
 80034c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80034c6:	4b13      	ldr	r3, [pc, #76]	@ (8003514 <MX_USART2_UART_Init+0x58>)
 80034c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034ce:	4b11      	ldr	r3, [pc, #68]	@ (8003514 <MX_USART2_UART_Init+0x58>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003514 <MX_USART2_UART_Init+0x58>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034da:	4b0e      	ldr	r3, [pc, #56]	@ (8003514 <MX_USART2_UART_Init+0x58>)
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003514 <MX_USART2_UART_Init+0x58>)
 80034e2:	220c      	movs	r2, #12
 80034e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <MX_USART2_UART_Init+0x58>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034ec:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <MX_USART2_UART_Init+0x58>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034f2:	4b08      	ldr	r3, [pc, #32]	@ (8003514 <MX_USART2_UART_Init+0x58>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034f8:	4b06      	ldr	r3, [pc, #24]	@ (8003514 <MX_USART2_UART_Init+0x58>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034fe:	4805      	ldr	r0, [pc, #20]	@ (8003514 <MX_USART2_UART_Init+0x58>)
 8003500:	f002 fa16 	bl	8005930 <HAL_UART_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800350a:	f7ff fe27 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000a28 	.word	0x20000a28
 8003518:	40004400 	.word	0x40004400

0800351c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b0ac      	sub	sp, #176	@ 0xb0
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	2288      	movs	r2, #136	@ 0x88
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f007 fa60 	bl	800aa02 <memset>
  if(uartHandle->Instance==USART2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a25      	ldr	r2, [pc, #148]	@ (80035dc <HAL_UART_MspInit+0xc0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d143      	bne.n	80035d4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800354c:	2302      	movs	r3, #2
 800354e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003550:	2300      	movs	r3, #0
 8003552:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4618      	mov	r0, r3
 800355a:	f001 fa67 	bl	8004a2c <HAL_RCCEx_PeriphCLKConfig>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003564:	f7ff fdfa 	bl	800315c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003568:	4b1d      	ldr	r3, [pc, #116]	@ (80035e0 <HAL_UART_MspInit+0xc4>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356c:	4a1c      	ldr	r2, [pc, #112]	@ (80035e0 <HAL_UART_MspInit+0xc4>)
 800356e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003572:	6593      	str	r3, [r2, #88]	@ 0x58
 8003574:	4b1a      	ldr	r3, [pc, #104]	@ (80035e0 <HAL_UART_MspInit+0xc4>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003580:	4b17      	ldr	r3, [pc, #92]	@ (80035e0 <HAL_UART_MspInit+0xc4>)
 8003582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003584:	4a16      	ldr	r2, [pc, #88]	@ (80035e0 <HAL_UART_MspInit+0xc4>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800358c:	4b14      	ldr	r3, [pc, #80]	@ (80035e0 <HAL_UART_MspInit+0xc4>)
 800358e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003598:	230c      	movs	r3, #12
 800359a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359e:	2302      	movs	r3, #2
 80035a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035aa:	2303      	movs	r3, #3
 80035ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035b0:	2307      	movs	r3, #7
 80035b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035ba:	4619      	mov	r1, r3
 80035bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035c0:	f000 f9dc 	bl	800397c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80035c4:	2200      	movs	r2, #0
 80035c6:	2105      	movs	r1, #5
 80035c8:	2026      	movs	r0, #38	@ 0x26
 80035ca:	f000 f92d 	bl	8003828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035ce:	2026      	movs	r0, #38	@ 0x26
 80035d0:	f000 f946 	bl	8003860 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80035d4:	bf00      	nop
 80035d6:	37b0      	adds	r7, #176	@ 0xb0
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40004400 	.word	0x40004400
 80035e0:	40021000 	.word	0x40021000

080035e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800361c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035e8:	f7ff ff56 	bl	8003498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035ec:	480c      	ldr	r0, [pc, #48]	@ (8003620 <LoopForever+0x6>)
  ldr r1, =_edata
 80035ee:	490d      	ldr	r1, [pc, #52]	@ (8003624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003628 <LoopForever+0xe>)
  movs r3, #0
 80035f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f4:	e002      	b.n	80035fc <LoopCopyDataInit>

080035f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035fa:	3304      	adds	r3, #4

080035fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003600:	d3f9      	bcc.n	80035f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003602:	4a0a      	ldr	r2, [pc, #40]	@ (800362c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003604:	4c0a      	ldr	r4, [pc, #40]	@ (8003630 <LoopForever+0x16>)
  movs r3, #0
 8003606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003608:	e001      	b.n	800360e <LoopFillZerobss>

0800360a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800360a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800360c:	3204      	adds	r2, #4

0800360e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800360e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003610:	d3fb      	bcc.n	800360a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003612:	f007 fb1b 	bl	800ac4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003616:	f7ff fd2d 	bl	8003074 <main>

0800361a <LoopForever>:

LoopForever:
    b LoopForever
 800361a:	e7fe      	b.n	800361a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800361c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003624:	20000480 	.word	0x20000480
  ldr r2, =_sidata
 8003628:	0800f178 	.word	0x0800f178
  ldr r2, =_sbss
 800362c:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 8003630:	20005b74 	.word	0x20005b74

08003634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003634:	e7fe      	b.n	8003634 <ADC1_2_IRQHandler>
	...

08003638 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003642:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <HAL_Init+0x3c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a0b      	ldr	r2, [pc, #44]	@ (8003674 <HAL_Init+0x3c>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800364c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800364e:	2003      	movs	r0, #3
 8003650:	f000 f8df 	bl	8003812 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003654:	200f      	movs	r0, #15
 8003656:	f7ff fdaf 	bl	80031b8 <HAL_InitTick>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	71fb      	strb	r3, [r7, #7]
 8003664:	e001      	b.n	800366a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003666:	f7ff fd7f 	bl	8003168 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800366a:	79fb      	ldrb	r3, [r7, #7]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40022000 	.word	0x40022000

08003678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800367c:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <HAL_IncTick+0x20>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_IncTick+0x24>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4413      	add	r3, r2
 8003688:	4a04      	ldr	r2, [pc, #16]	@ (800369c <HAL_IncTick+0x24>)
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	200002b0 	.word	0x200002b0
 800369c:	20000ab0 	.word	0x20000ab0

080036a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return uwTick;
 80036a4:	4b03      	ldr	r3, [pc, #12]	@ (80036b4 <HAL_GetTick+0x14>)
 80036a6:	681b      	ldr	r3, [r3, #0]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	20000ab0 	.word	0x20000ab0

080036b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c8:	4b0c      	ldr	r3, [pc, #48]	@ (80036fc <__NVIC_SetPriorityGrouping+0x44>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036d4:	4013      	ands	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ea:	4a04      	ldr	r2, [pc, #16]	@ (80036fc <__NVIC_SetPriorityGrouping+0x44>)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	60d3      	str	r3, [r2, #12]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003704:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <__NVIC_GetPriorityGrouping+0x18>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	0a1b      	lsrs	r3, r3, #8
 800370a:	f003 0307 	and.w	r3, r3, #7
}
 800370e:	4618      	mov	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	2b00      	cmp	r3, #0
 800372c:	db0b      	blt.n	8003746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	f003 021f 	and.w	r2, r3, #31
 8003734:	4907      	ldr	r1, [pc, #28]	@ (8003754 <__NVIC_EnableIRQ+0x38>)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2001      	movs	r0, #1
 800373e:	fa00 f202 	lsl.w	r2, r0, r2
 8003742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	e000e100 	.word	0xe000e100

08003758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	2b00      	cmp	r3, #0
 800376a:	db0a      	blt.n	8003782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	490c      	ldr	r1, [pc, #48]	@ (80037a4 <__NVIC_SetPriority+0x4c>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	0112      	lsls	r2, r2, #4
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	440b      	add	r3, r1
 800377c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003780:	e00a      	b.n	8003798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4908      	ldr	r1, [pc, #32]	@ (80037a8 <__NVIC_SetPriority+0x50>)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	3b04      	subs	r3, #4
 8003790:	0112      	lsls	r2, r2, #4
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	440b      	add	r3, r1
 8003796:	761a      	strb	r2, [r3, #24]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	e000e100 	.word	0xe000e100
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	@ 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f1c3 0307 	rsb	r3, r3, #7
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	bf28      	it	cs
 80037ca:	2304      	movcs	r3, #4
 80037cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d902      	bls.n	80037dc <NVIC_EncodePriority+0x30>
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3b03      	subs	r3, #3
 80037da:	e000      	b.n	80037de <NVIC_EncodePriority+0x32>
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e0:	f04f 32ff 	mov.w	r2, #4294967295
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	401a      	ands	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f4:	f04f 31ff 	mov.w	r1, #4294967295
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	43d9      	mvns	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003804:	4313      	orrs	r3, r2
         );
}
 8003806:	4618      	mov	r0, r3
 8003808:	3724      	adds	r7, #36	@ 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ff4c 	bl	80036b8 <__NVIC_SetPriorityGrouping>
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800383a:	f7ff ff61 	bl	8003700 <__NVIC_GetPriorityGrouping>
 800383e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	6978      	ldr	r0, [r7, #20]
 8003846:	f7ff ffb1 	bl	80037ac <NVIC_EncodePriority>
 800384a:	4602      	mov	r2, r0
 800384c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff ff80 	bl	8003758 <__NVIC_SetPriority>
}
 8003858:	bf00      	nop
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ff54 	bl	800371c <__NVIC_EnableIRQ>
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d008      	beq.n	80038a6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2204      	movs	r2, #4
 8003898:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e022      	b.n	80038ec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 020e 	bic.w	r2, r2, #14
 80038b4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ca:	f003 021c 	and.w	r2, r3, #28
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	2101      	movs	r1, #1
 80038d4:	fa01 f202 	lsl.w	r2, r1, r2
 80038d8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d005      	beq.n	800391c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2204      	movs	r2, #4
 8003914:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
 800391a:	e029      	b.n	8003970 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 020e 	bic.w	r2, r2, #14
 800392a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003940:	f003 021c 	and.w	r2, r3, #28
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f202 	lsl.w	r2, r1, r2
 800394e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
    }
  }
  return status;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398a:	e17f      	b.n	8003c8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	4013      	ands	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8171 	beq.w	8003c86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d005      	beq.n	80039bc <HAL_GPIO_Init+0x40>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 0303 	and.w	r3, r3, #3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d130      	bne.n	8003a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039f2:	2201      	movs	r2, #1
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	f003 0201 	and.w	r2, r3, #1
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d118      	bne.n	8003a5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a30:	2201      	movs	r2, #1
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	08db      	lsrs	r3, r3, #3
 8003a46:	f003 0201 	and.w	r2, r3, #1
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d017      	beq.n	8003a98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	2203      	movs	r2, #3
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d123      	bne.n	8003aec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	08da      	lsrs	r2, r3, #3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3208      	adds	r2, #8
 8003aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	220f      	movs	r2, #15
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	08da      	lsrs	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3208      	adds	r2, #8
 8003ae6:	6939      	ldr	r1, [r7, #16]
 8003ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	2203      	movs	r2, #3
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0203 	and.w	r2, r3, #3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80ac 	beq.w	8003c86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2e:	4b5f      	ldr	r3, [pc, #380]	@ (8003cac <HAL_GPIO_Init+0x330>)
 8003b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b32:	4a5e      	ldr	r2, [pc, #376]	@ (8003cac <HAL_GPIO_Init+0x330>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b3a:	4b5c      	ldr	r3, [pc, #368]	@ (8003cac <HAL_GPIO_Init+0x330>)
 8003b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b46:	4a5a      	ldr	r2, [pc, #360]	@ (8003cb0 <HAL_GPIO_Init+0x334>)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b70:	d025      	beq.n	8003bbe <HAL_GPIO_Init+0x242>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a4f      	ldr	r2, [pc, #316]	@ (8003cb4 <HAL_GPIO_Init+0x338>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01f      	beq.n	8003bba <HAL_GPIO_Init+0x23e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a4e      	ldr	r2, [pc, #312]	@ (8003cb8 <HAL_GPIO_Init+0x33c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d019      	beq.n	8003bb6 <HAL_GPIO_Init+0x23a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4d      	ldr	r2, [pc, #308]	@ (8003cbc <HAL_GPIO_Init+0x340>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_GPIO_Init+0x236>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a4c      	ldr	r2, [pc, #304]	@ (8003cc0 <HAL_GPIO_Init+0x344>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00d      	beq.n	8003bae <HAL_GPIO_Init+0x232>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4b      	ldr	r2, [pc, #300]	@ (8003cc4 <HAL_GPIO_Init+0x348>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <HAL_GPIO_Init+0x22e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a4a      	ldr	r2, [pc, #296]	@ (8003cc8 <HAL_GPIO_Init+0x34c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <HAL_GPIO_Init+0x22a>
 8003ba2:	2306      	movs	r3, #6
 8003ba4:	e00c      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003ba6:	2307      	movs	r3, #7
 8003ba8:	e00a      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003baa:	2305      	movs	r3, #5
 8003bac:	e008      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bae:	2304      	movs	r3, #4
 8003bb0:	e006      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e004      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e002      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_GPIO_Init+0x244>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	f002 0203 	and.w	r2, r2, #3
 8003bc6:	0092      	lsls	r2, r2, #2
 8003bc8:	4093      	lsls	r3, r2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bd0:	4937      	ldr	r1, [pc, #220]	@ (8003cb0 <HAL_GPIO_Init+0x334>)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bde:	4b3b      	ldr	r3, [pc, #236]	@ (8003ccc <HAL_GPIO_Init+0x350>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c02:	4a32      	ldr	r2, [pc, #200]	@ (8003ccc <HAL_GPIO_Init+0x350>)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c08:	4b30      	ldr	r3, [pc, #192]	@ (8003ccc <HAL_GPIO_Init+0x350>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4013      	ands	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c2c:	4a27      	ldr	r2, [pc, #156]	@ (8003ccc <HAL_GPIO_Init+0x350>)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c32:	4b26      	ldr	r3, [pc, #152]	@ (8003ccc <HAL_GPIO_Init+0x350>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c56:	4a1d      	ldr	r2, [pc, #116]	@ (8003ccc <HAL_GPIO_Init+0x350>)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ccc <HAL_GPIO_Init+0x350>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c80:	4a12      	ldr	r2, [pc, #72]	@ (8003ccc <HAL_GPIO_Init+0x350>)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa22 f303 	lsr.w	r3, r2, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f47f ae78 	bne.w	800398c <HAL_GPIO_Init+0x10>
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	48000400 	.word	0x48000400
 8003cb8:	48000800 	.word	0x48000800
 8003cbc:	48000c00 	.word	0x48000c00
 8003cc0:	48001000 	.word	0x48001000
 8003cc4:	48001400 	.word	0x48001400
 8003cc8:	48001800 	.word	0x48001800
 8003ccc:	40010400 	.word	0x40010400

08003cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ce0:	787b      	ldrb	r3, [r7, #1]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cec:	e002      	b.n	8003cf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cee:	887a      	ldrh	r2, [r7, #2]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d04:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40007000 	.word	0x40007000

08003d1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d2a:	d130      	bne.n	8003d8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d2c:	4b23      	ldr	r3, [pc, #140]	@ (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d38:	d038      	beq.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d3a:	4b20      	ldr	r3, [pc, #128]	@ (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d42:	4a1e      	ldr	r2, [pc, #120]	@ (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2232      	movs	r2, #50	@ 0x32
 8003d50:	fb02 f303 	mul.w	r3, r2, r3
 8003d54:	4a1b      	ldr	r2, [pc, #108]	@ (8003dc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	0c9b      	lsrs	r3, r3, #18
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d60:	e002      	b.n	8003d68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d68:	4b14      	ldr	r3, [pc, #80]	@ (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d74:	d102      	bne.n	8003d7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f2      	bne.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d88:	d110      	bne.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e00f      	b.n	8003dae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9a:	d007      	beq.n	8003dac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d9c:	4b07      	ldr	r3, [pc, #28]	@ (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003da4:	4a05      	ldr	r2, [pc, #20]	@ (8003dbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003daa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40007000 	.word	0x40007000
 8003dc0:	200002a8 	.word	0x200002a8
 8003dc4:	431bde83 	.word	0x431bde83

08003dc8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e3ca      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dda:	4b97      	ldr	r3, [pc, #604]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003de4:	4b94      	ldr	r3, [pc, #592]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80e4 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_RCC_OscConfig+0x4a>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	f040 808b 	bne.w	8003f20 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	f040 8087 	bne.w	8003f20 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e12:	4b89      	ldr	r3, [pc, #548]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_RCC_OscConfig+0x62>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e3a2      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1a      	ldr	r2, [r3, #32]
 8003e2e:	4b82      	ldr	r3, [pc, #520]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d004      	beq.n	8003e44 <HAL_RCC_OscConfig+0x7c>
 8003e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e42:	e005      	b.n	8003e50 <HAL_RCC_OscConfig+0x88>
 8003e44:	4b7c      	ldr	r3, [pc, #496]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4a:	091b      	lsrs	r3, r3, #4
 8003e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d223      	bcs.n	8003e9c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fd87 	bl	800496c <RCC_SetFlashLatencyFromMSIRange>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e383      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e68:	4b73      	ldr	r3, [pc, #460]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a72      	ldr	r2, [pc, #456]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	f043 0308 	orr.w	r3, r3, #8
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b70      	ldr	r3, [pc, #448]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	496d      	ldr	r1, [pc, #436]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e86:	4b6c      	ldr	r3, [pc, #432]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	4968      	ldr	r1, [pc, #416]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]
 8003e9a:	e025      	b.n	8003ee8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e9c:	4b66      	ldr	r3, [pc, #408]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a65      	ldr	r2, [pc, #404]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003ea2:	f043 0308 	orr.w	r3, r3, #8
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b63      	ldr	r3, [pc, #396]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	4960      	ldr	r1, [pc, #384]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eba:	4b5f      	ldr	r3, [pc, #380]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	495b      	ldr	r1, [pc, #364]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d109      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fd47 	bl	800496c <RCC_SetFlashLatencyFromMSIRange>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e343      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ee8:	f000 fc4a 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b52      	ldr	r3, [pc, #328]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	4950      	ldr	r1, [pc, #320]	@ (800403c <HAL_RCC_OscConfig+0x274>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
 8003f04:	4a4e      	ldr	r2, [pc, #312]	@ (8004040 <HAL_RCC_OscConfig+0x278>)
 8003f06:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f08:	4b4e      	ldr	r3, [pc, #312]	@ (8004044 <HAL_RCC_OscConfig+0x27c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff f953 	bl	80031b8 <HAL_InitTick>
 8003f12:	4603      	mov	r3, r0
 8003f14:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d052      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	e327      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d032      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f28:	4b43      	ldr	r3, [pc, #268]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a42      	ldr	r2, [pc, #264]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f34:	f7ff fbb4 	bl	80036a0 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f3c:	f7ff fbb0 	bl	80036a0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e310      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f5a:	4b37      	ldr	r3, [pc, #220]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a36      	ldr	r2, [pc, #216]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f60:	f043 0308 	orr.w	r3, r3, #8
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	4b34      	ldr	r3, [pc, #208]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	4931      	ldr	r1, [pc, #196]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f78:	4b2f      	ldr	r3, [pc, #188]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	492c      	ldr	r1, [pc, #176]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]
 8003f8c:	e01a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a29      	ldr	r2, [pc, #164]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f9a:	f7ff fb81 	bl	80036a0 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fa2:	f7ff fb7d 	bl	80036a0 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e2dd      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fb4:	4b20      	ldr	r3, [pc, #128]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x1da>
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fc2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d074      	beq.n	80040ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d005      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x21a>
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b0c      	cmp	r3, #12
 8003fda:	d10e      	bne.n	8003ffa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d10b      	bne.n	8003ffa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe2:	4b15      	ldr	r3, [pc, #84]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d064      	beq.n	80040b8 <HAL_RCC_OscConfig+0x2f0>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d160      	bne.n	80040b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e2ba      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x24a>
 8004004:	4b0c      	ldr	r3, [pc, #48]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0b      	ldr	r2, [pc, #44]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 800400a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	e026      	b.n	8004060 <HAL_RCC_OscConfig+0x298>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800401a:	d115      	bne.n	8004048 <HAL_RCC_OscConfig+0x280>
 800401c:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a05      	ldr	r2, [pc, #20]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 8004022:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b03      	ldr	r3, [pc, #12]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a02      	ldr	r2, [pc, #8]	@ (8004038 <HAL_RCC_OscConfig+0x270>)
 800402e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	e014      	b.n	8004060 <HAL_RCC_OscConfig+0x298>
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
 800403c:	0800eca4 	.word	0x0800eca4
 8004040:	200002a8 	.word	0x200002a8
 8004044:	200002ac 	.word	0x200002ac
 8004048:	4ba0      	ldr	r3, [pc, #640]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a9f      	ldr	r2, [pc, #636]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 800404e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b9d      	ldr	r3, [pc, #628]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a9c      	ldr	r2, [pc, #624]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 800405a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800405e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7ff fb1a 	bl	80036a0 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004070:	f7ff fb16 	bl	80036a0 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	@ 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e276      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004082:	4b92      	ldr	r3, [pc, #584]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x2a8>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7ff fb06 	bl	80036a0 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004098:	f7ff fb02 	bl	80036a0 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	@ 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e262      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040aa:	4b88      	ldr	r3, [pc, #544]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x2d0>
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d060      	beq.n	8004188 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_OscConfig+0x310>
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b0c      	cmp	r3, #12
 80040d0:	d119      	bne.n	8004106 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d116      	bne.n	8004106 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d8:	4b7c      	ldr	r3, [pc, #496]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_OscConfig+0x328>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e23f      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f0:	4b76      	ldr	r3, [pc, #472]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	061b      	lsls	r3, r3, #24
 80040fe:	4973      	ldr	r1, [pc, #460]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004104:	e040      	b.n	8004188 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d023      	beq.n	8004156 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800410e:	4b6f      	ldr	r3, [pc, #444]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a6e      	ldr	r2, [pc, #440]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411a:	f7ff fac1 	bl	80036a0 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004122:	f7ff fabd 	bl	80036a0 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e21d      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004134:	4b65      	ldr	r3, [pc, #404]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f0      	beq.n	8004122 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004140:	4b62      	ldr	r3, [pc, #392]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	061b      	lsls	r3, r3, #24
 800414e:	495f      	ldr	r1, [pc, #380]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004150:	4313      	orrs	r3, r2
 8004152:	604b      	str	r3, [r1, #4]
 8004154:	e018      	b.n	8004188 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004156:	4b5d      	ldr	r3, [pc, #372]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a5c      	ldr	r2, [pc, #368]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 800415c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004162:	f7ff fa9d 	bl	80036a0 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416a:	f7ff fa99 	bl	80036a0 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e1f9      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800417c:	4b53      	ldr	r3, [pc, #332]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f0      	bne.n	800416a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d03c      	beq.n	800420e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01c      	beq.n	80041d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800419c:	4b4b      	ldr	r3, [pc, #300]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 800419e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a2:	4a4a      	ldr	r2, [pc, #296]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 80041a4:	f043 0301 	orr.w	r3, r3, #1
 80041a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ac:	f7ff fa78 	bl	80036a0 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b4:	f7ff fa74 	bl	80036a0 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e1d4      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041c6:	4b41      	ldr	r3, [pc, #260]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 80041c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ef      	beq.n	80041b4 <HAL_RCC_OscConfig+0x3ec>
 80041d4:	e01b      	b.n	800420e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d6:	4b3d      	ldr	r3, [pc, #244]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 80041d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041dc:	4a3b      	ldr	r2, [pc, #236]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e6:	f7ff fa5b 	bl	80036a0 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ee:	f7ff fa57 	bl	80036a0 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e1b7      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004200:	4b32      	ldr	r3, [pc, #200]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1ef      	bne.n	80041ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 80a6 	beq.w	8004368 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421c:	2300      	movs	r3, #0
 800421e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004220:	4b2a      	ldr	r3, [pc, #168]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422c:	4b27      	ldr	r3, [pc, #156]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 800422e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004230:	4a26      	ldr	r2, [pc, #152]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004236:	6593      	str	r3, [r2, #88]	@ 0x58
 8004238:	4b24      	ldr	r3, [pc, #144]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 800423a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004244:	2301      	movs	r3, #1
 8004246:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004248:	4b21      	ldr	r3, [pc, #132]	@ (80042d0 <HAL_RCC_OscConfig+0x508>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d118      	bne.n	8004286 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004254:	4b1e      	ldr	r3, [pc, #120]	@ (80042d0 <HAL_RCC_OscConfig+0x508>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1d      	ldr	r2, [pc, #116]	@ (80042d0 <HAL_RCC_OscConfig+0x508>)
 800425a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800425e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004260:	f7ff fa1e 	bl	80036a0 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004268:	f7ff fa1a 	bl	80036a0 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e17a      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800427a:	4b15      	ldr	r3, [pc, #84]	@ (80042d0 <HAL_RCC_OscConfig+0x508>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d108      	bne.n	80042a0 <HAL_RCC_OscConfig+0x4d8>
 800428e:	4b0f      	ldr	r3, [pc, #60]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004294:	4a0d      	ldr	r2, [pc, #52]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800429e:	e029      	b.n	80042f4 <HAL_RCC_OscConfig+0x52c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b05      	cmp	r3, #5
 80042a6:	d115      	bne.n	80042d4 <HAL_RCC_OscConfig+0x50c>
 80042a8:	4b08      	ldr	r3, [pc, #32]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ae:	4a07      	ldr	r2, [pc, #28]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 80042b0:	f043 0304 	orr.w	r3, r3, #4
 80042b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042b8:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042be:	4a03      	ldr	r2, [pc, #12]	@ (80042cc <HAL_RCC_OscConfig+0x504>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042c8:	e014      	b.n	80042f4 <HAL_RCC_OscConfig+0x52c>
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40007000 	.word	0x40007000
 80042d4:	4b9c      	ldr	r3, [pc, #624]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042da:	4a9b      	ldr	r2, [pc, #620]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80042e4:	4b98      	ldr	r3, [pc, #608]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ea:	4a97      	ldr	r2, [pc, #604]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 80042ec:	f023 0304 	bic.w	r3, r3, #4
 80042f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d016      	beq.n	800432a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fc:	f7ff f9d0 	bl	80036a0 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004302:	e00a      	b.n	800431a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004304:	f7ff f9cc 	bl	80036a0 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e12a      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800431a:	4b8b      	ldr	r3, [pc, #556]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ed      	beq.n	8004304 <HAL_RCC_OscConfig+0x53c>
 8004328:	e015      	b.n	8004356 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432a:	f7ff f9b9 	bl	80036a0 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7ff f9b5 	bl	80036a0 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e113      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004348:	4b7f      	ldr	r3, [pc, #508]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1ed      	bne.n	8004332 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004356:	7ffb      	ldrb	r3, [r7, #31]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d105      	bne.n	8004368 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800435c:	4b7a      	ldr	r3, [pc, #488]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 800435e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004360:	4a79      	ldr	r2, [pc, #484]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 8004362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004366:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80fe 	beq.w	800456e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	2b02      	cmp	r3, #2
 8004378:	f040 80d0 	bne.w	800451c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800437c:	4b72      	ldr	r3, [pc, #456]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f003 0203 	and.w	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	429a      	cmp	r2, r3
 800438e:	d130      	bne.n	80043f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	3b01      	subs	r3, #1
 800439c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800439e:	429a      	cmp	r2, r3
 80043a0:	d127      	bne.n	80043f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d11f      	bne.n	80043f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043bc:	2a07      	cmp	r2, #7
 80043be:	bf14      	ite	ne
 80043c0:	2201      	movne	r2, #1
 80043c2:	2200      	moveq	r2, #0
 80043c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d113      	bne.n	80043f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	3b01      	subs	r3, #1
 80043d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d109      	bne.n	80043f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	3b01      	subs	r3, #1
 80043ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d06e      	beq.n	80044d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b0c      	cmp	r3, #12
 80043f6:	d069      	beq.n	80044cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043f8:	4b53      	ldr	r3, [pc, #332]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004404:	4b50      	ldr	r3, [pc, #320]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e0ad      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004414:	4b4c      	ldr	r3, [pc, #304]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a4b      	ldr	r2, [pc, #300]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 800441a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800441e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004420:	f7ff f93e 	bl	80036a0 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7ff f93a 	bl	80036a0 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e09a      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800443a:	4b43      	ldr	r3, [pc, #268]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004446:	4b40      	ldr	r3, [pc, #256]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	4b40      	ldr	r3, [pc, #256]	@ (800454c <HAL_RCC_OscConfig+0x784>)
 800444c:	4013      	ands	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004456:	3a01      	subs	r2, #1
 8004458:	0112      	lsls	r2, r2, #4
 800445a:	4311      	orrs	r1, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004460:	0212      	lsls	r2, r2, #8
 8004462:	4311      	orrs	r1, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004468:	0852      	lsrs	r2, r2, #1
 800446a:	3a01      	subs	r2, #1
 800446c:	0552      	lsls	r2, r2, #21
 800446e:	4311      	orrs	r1, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004474:	0852      	lsrs	r2, r2, #1
 8004476:	3a01      	subs	r2, #1
 8004478:	0652      	lsls	r2, r2, #25
 800447a:	4311      	orrs	r1, r2
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004480:	0912      	lsrs	r2, r2, #4
 8004482:	0452      	lsls	r2, r2, #17
 8004484:	430a      	orrs	r2, r1
 8004486:	4930      	ldr	r1, [pc, #192]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 8004488:	4313      	orrs	r3, r2
 800448a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800448c:	4b2e      	ldr	r3, [pc, #184]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a2d      	ldr	r2, [pc, #180]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 8004492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004496:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004498:	4b2b      	ldr	r3, [pc, #172]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4a2a      	ldr	r2, [pc, #168]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 800449e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044a4:	f7ff f8fc 	bl	80036a0 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ac:	f7ff f8f8 	bl	80036a0 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e058      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044be:	4b22      	ldr	r3, [pc, #136]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044ca:	e050      	b.n	800456e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e04f      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d148      	bne.n	800456e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a19      	ldr	r2, [pc, #100]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 80044e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044e8:	4b17      	ldr	r3, [pc, #92]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	4a16      	ldr	r2, [pc, #88]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 80044ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044f4:	f7ff f8d4 	bl	80036a0 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044fc:	f7ff f8d0 	bl	80036a0 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e030      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450e:	4b0e      	ldr	r3, [pc, #56]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x734>
 800451a:	e028      	b.n	800456e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d023      	beq.n	800456a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004522:	4b09      	ldr	r3, [pc, #36]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a08      	ldr	r2, [pc, #32]	@ (8004548 <HAL_RCC_OscConfig+0x780>)
 8004528:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800452c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452e:	f7ff f8b7 	bl	80036a0 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004534:	e00c      	b.n	8004550 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004536:	f7ff f8b3 	bl	80036a0 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d905      	bls.n	8004550 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e013      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
 8004548:	40021000 	.word	0x40021000
 800454c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004550:	4b09      	ldr	r3, [pc, #36]	@ (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ec      	bne.n	8004536 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800455c:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <HAL_RCC_OscConfig+0x7b0>)
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	4905      	ldr	r1, [pc, #20]	@ (8004578 <HAL_RCC_OscConfig+0x7b0>)
 8004562:	4b06      	ldr	r3, [pc, #24]	@ (800457c <HAL_RCC_OscConfig+0x7b4>)
 8004564:	4013      	ands	r3, r2
 8004566:	60cb      	str	r3, [r1, #12]
 8004568:	e001      	b.n	800456e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000
 800457c:	feeefffc 	.word	0xfeeefffc

08004580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0e7      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004594:	4b75      	ldr	r3, [pc, #468]	@ (800476c <HAL_RCC_ClockConfig+0x1ec>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d910      	bls.n	80045c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b72      	ldr	r3, [pc, #456]	@ (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 0207 	bic.w	r2, r3, #7
 80045aa:	4970      	ldr	r1, [pc, #448]	@ (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b6e      	ldr	r3, [pc, #440]	@ (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0cf      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d010      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	4b66      	ldr	r3, [pc, #408]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045dc:	429a      	cmp	r2, r3
 80045de:	d908      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e0:	4b63      	ldr	r3, [pc, #396]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4960      	ldr	r1, [pc, #384]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d04c      	beq.n	8004698 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b03      	cmp	r3, #3
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004606:	4b5a      	ldr	r3, [pc, #360]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d121      	bne.n	8004656 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e0a6      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800461e:	4b54      	ldr	r3, [pc, #336]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d115      	bne.n	8004656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e09a      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d107      	bne.n	8004646 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004636:	4b4e      	ldr	r3, [pc, #312]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e08e      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004646:	4b4a      	ldr	r3, [pc, #296]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e086      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004656:	4b46      	ldr	r3, [pc, #280]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f023 0203 	bic.w	r2, r3, #3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4943      	ldr	r1, [pc, #268]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004664:	4313      	orrs	r3, r2
 8004666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004668:	f7ff f81a 	bl	80036a0 <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466e:	e00a      	b.n	8004686 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004670:	f7ff f816 	bl	80036a0 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e06e      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004686:	4b3a      	ldr	r3, [pc, #232]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 020c 	and.w	r2, r3, #12
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	429a      	cmp	r2, r3
 8004696:	d1eb      	bne.n	8004670 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d010      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	4b31      	ldr	r3, [pc, #196]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d208      	bcs.n	80046c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	492b      	ldr	r1, [pc, #172]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046c6:	4b29      	ldr	r3, [pc, #164]	@ (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d210      	bcs.n	80046f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d4:	4b25      	ldr	r3, [pc, #148]	@ (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f023 0207 	bic.w	r2, r3, #7
 80046dc:	4923      	ldr	r1, [pc, #140]	@ (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e4:	4b21      	ldr	r3, [pc, #132]	@ (800476c <HAL_RCC_ClockConfig+0x1ec>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d001      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e036      	b.n	8004764 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004702:	4b1b      	ldr	r3, [pc, #108]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	4918      	ldr	r1, [pc, #96]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004710:	4313      	orrs	r3, r2
 8004712:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d009      	beq.n	8004734 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004720:	4b13      	ldr	r3, [pc, #76]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4910      	ldr	r1, [pc, #64]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004734:	f000 f824 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b0d      	ldr	r3, [pc, #52]	@ (8004770 <HAL_RCC_ClockConfig+0x1f0>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	490b      	ldr	r1, [pc, #44]	@ (8004774 <HAL_RCC_ClockConfig+0x1f4>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
 8004750:	4a09      	ldr	r2, [pc, #36]	@ (8004778 <HAL_RCC_ClockConfig+0x1f8>)
 8004752:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004754:	4b09      	ldr	r3, [pc, #36]	@ (800477c <HAL_RCC_ClockConfig+0x1fc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fd2d 	bl	80031b8 <HAL_InitTick>
 800475e:	4603      	mov	r3, r0
 8004760:	72fb      	strb	r3, [r7, #11]

  return status;
 8004762:	7afb      	ldrb	r3, [r7, #11]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40022000 	.word	0x40022000
 8004770:	40021000 	.word	0x40021000
 8004774:	0800eca4 	.word	0x0800eca4
 8004778:	200002a8 	.word	0x200002a8
 800477c:	200002ac 	.word	0x200002ac

08004780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	@ 0x24
 8004784:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	2300      	movs	r3, #0
 800478c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800478e:	4b3e      	ldr	r3, [pc, #248]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004798:	4b3b      	ldr	r3, [pc, #236]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x34>
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b0c      	cmp	r3, #12
 80047ac:	d121      	bne.n	80047f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d11e      	bne.n	80047f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047b4:	4b34      	ldr	r3, [pc, #208]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047c0:	4b31      	ldr	r3, [pc, #196]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047c6:	0a1b      	lsrs	r3, r3, #8
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e005      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047dc:	4a2b      	ldr	r2, [pc, #172]	@ (800488c <HAL_RCC_GetSysClockFreq+0x10c>)
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10d      	bne.n	8004808 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047f0:	e00a      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d102      	bne.n	80047fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047f8:	4b25      	ldr	r3, [pc, #148]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x110>)
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	e004      	b.n	8004808 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d101      	bne.n	8004808 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004804:	4b23      	ldr	r3, [pc, #140]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x114>)
 8004806:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b0c      	cmp	r3, #12
 800480c:	d134      	bne.n	8004878 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800480e:	4b1e      	ldr	r3, [pc, #120]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d003      	beq.n	8004826 <HAL_RCC_GetSysClockFreq+0xa6>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d003      	beq.n	800482c <HAL_RCC_GetSysClockFreq+0xac>
 8004824:	e005      	b.n	8004832 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004826:	4b1a      	ldr	r3, [pc, #104]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x110>)
 8004828:	617b      	str	r3, [r7, #20]
      break;
 800482a:	e005      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800482c:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x114>)
 800482e:	617b      	str	r3, [r7, #20]
      break;
 8004830:	e002      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	617b      	str	r3, [r7, #20]
      break;
 8004836:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004838:	4b13      	ldr	r3, [pc, #76]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	3301      	adds	r3, #1
 8004844:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	fb03 f202 	mul.w	r2, r3, r2
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800485e:	4b0a      	ldr	r3, [pc, #40]	@ (8004888 <HAL_RCC_GetSysClockFreq+0x108>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	0e5b      	lsrs	r3, r3, #25
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	3301      	adds	r3, #1
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004878:	69bb      	ldr	r3, [r7, #24]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3724      	adds	r7, #36	@ 0x24
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
 800488c:	0800ecbc 	.word	0x0800ecbc
 8004890:	00f42400 	.word	0x00f42400
 8004894:	007a1200 	.word	0x007a1200

08004898 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800489c:	4b03      	ldr	r3, [pc, #12]	@ (80048ac <HAL_RCC_GetHCLKFreq+0x14>)
 800489e:	681b      	ldr	r3, [r3, #0]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	200002a8 	.word	0x200002a8

080048b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048b4:	f7ff fff0 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4904      	ldr	r1, [pc, #16]	@ (80048d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	0800ecb4 	.word	0x0800ecb4

080048dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048e0:	f7ff ffda 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	0adb      	lsrs	r3, r3, #11
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	4904      	ldr	r1, [pc, #16]	@ (8004904 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048f2:	5ccb      	ldrb	r3, [r1, r3]
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40021000 	.word	0x40021000
 8004904:	0800ecb4 	.word	0x0800ecb4

08004908 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	220f      	movs	r2, #15
 8004916:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004918:	4b12      	ldr	r3, [pc, #72]	@ (8004964 <HAL_RCC_GetClockConfig+0x5c>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0203 	and.w	r2, r3, #3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004924:	4b0f      	ldr	r3, [pc, #60]	@ (8004964 <HAL_RCC_GetClockConfig+0x5c>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004930:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <HAL_RCC_GetClockConfig+0x5c>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800493c:	4b09      	ldr	r3, [pc, #36]	@ (8004964 <HAL_RCC_GetClockConfig+0x5c>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	08db      	lsrs	r3, r3, #3
 8004942:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800494a:	4b07      	ldr	r3, [pc, #28]	@ (8004968 <HAL_RCC_GetClockConfig+0x60>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0207 	and.w	r2, r3, #7
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	601a      	str	r2, [r3, #0]
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000
 8004968:	40022000 	.word	0x40022000

0800496c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004978:	4b2a      	ldr	r3, [pc, #168]	@ (8004a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800497a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004984:	f7ff f9bc 	bl	8003d00 <HAL_PWREx_GetVoltageRange>
 8004988:	6178      	str	r0, [r7, #20]
 800498a:	e014      	b.n	80049b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800498c:	4b25      	ldr	r3, [pc, #148]	@ (8004a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800498e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004990:	4a24      	ldr	r2, [pc, #144]	@ (8004a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004996:	6593      	str	r3, [r2, #88]	@ 0x58
 8004998:	4b22      	ldr	r3, [pc, #136]	@ (8004a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049a4:	f7ff f9ac 	bl	8003d00 <HAL_PWREx_GetVoltageRange>
 80049a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004a24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049bc:	d10b      	bne.n	80049d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b80      	cmp	r3, #128	@ 0x80
 80049c2:	d919      	bls.n	80049f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80049c8:	d902      	bls.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049ca:	2302      	movs	r3, #2
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	e013      	b.n	80049f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049d0:	2301      	movs	r3, #1
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	e010      	b.n	80049f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b80      	cmp	r3, #128	@ 0x80
 80049da:	d902      	bls.n	80049e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049dc:	2303      	movs	r3, #3
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	e00a      	b.n	80049f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b80      	cmp	r3, #128	@ 0x80
 80049e6:	d102      	bne.n	80049ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049e8:	2302      	movs	r3, #2
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	e004      	b.n	80049f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b70      	cmp	r3, #112	@ 0x70
 80049f2:	d101      	bne.n	80049f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049f4:	2301      	movs	r3, #1
 80049f6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f023 0207 	bic.w	r2, r3, #7
 8004a00:	4909      	ldr	r1, [pc, #36]	@ (8004a28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a08:	4b07      	ldr	r3, [pc, #28]	@ (8004a28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d001      	beq.n	8004a1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40021000 	.word	0x40021000
 8004a28:	40022000 	.word	0x40022000

08004a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a34:	2300      	movs	r3, #0
 8004a36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a38:	2300      	movs	r3, #0
 8004a3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d041      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004a50:	d02a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004a56:	d824      	bhi.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a5c:	d008      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a62:	d81e      	bhi.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a6c:	d010      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a6e:	e018      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a70:	4b86      	ldr	r3, [pc, #536]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a85      	ldr	r2, [pc, #532]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a7c:	e015      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3304      	adds	r3, #4
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fabb 	bl	8005000 <RCCEx_PLLSAI1_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a8e:	e00c      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3320      	adds	r3, #32
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fba6 	bl	80051e8 <RCCEx_PLLSAI2_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aa0:	e003      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	74fb      	strb	r3, [r7, #19]
      break;
 8004aa6:	e000      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ab0:	4b76      	ldr	r3, [pc, #472]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004abe:	4973      	ldr	r1, [pc, #460]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ac6:	e001      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d041      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004adc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ae0:	d02a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ae2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ae6:	d824      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ae8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004aec:	d008      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004aee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004af2:	d81e      	bhi.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004afc:	d010      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004afe:	e018      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b00:	4b62      	ldr	r3, [pc, #392]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	4a61      	ldr	r2, [pc, #388]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b0c:	e015      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3304      	adds	r3, #4
 8004b12:	2100      	movs	r1, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fa73 	bl	8005000 <RCCEx_PLLSAI1_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b1e:	e00c      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3320      	adds	r3, #32
 8004b24:	2100      	movs	r1, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb5e 	bl	80051e8 <RCCEx_PLLSAI2_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b30:	e003      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	74fb      	strb	r3, [r7, #19]
      break;
 8004b36:	e000      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10b      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b40:	4b52      	ldr	r3, [pc, #328]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b4e:	494f      	ldr	r1, [pc, #316]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004b56:	e001      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 80a0 	beq.w	8004caa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b6e:	4b47      	ldr	r3, [pc, #284]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00d      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b84:	4b41      	ldr	r3, [pc, #260]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b88:	4a40      	ldr	r2, [pc, #256]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b90:	4b3e      	ldr	r3, [pc, #248]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a3a      	ldr	r2, [pc, #232]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004baa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bac:	f7fe fd78 	bl	80036a0 <HAL_GetTick>
 8004bb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bb2:	e009      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb4:	f7fe fd74 	bl	80036a0 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d902      	bls.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	74fb      	strb	r3, [r7, #19]
        break;
 8004bc6:	e005      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bc8:	4b31      	ldr	r3, [pc, #196]	@ (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ef      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d15c      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bda:	4b2c      	ldr	r3, [pc, #176]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01f      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d019      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bf8:	4b24      	ldr	r3, [pc, #144]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c04:	4b21      	ldr	r3, [pc, #132]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0a:	4a20      	ldr	r2, [pc, #128]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c14:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c24:	4a19      	ldr	r2, [pc, #100]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d016      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c36:	f7fe fd33 	bl	80036a0 <HAL_GetTick>
 8004c3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c3c:	e00b      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fe fd2f 	bl	80036a0 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d902      	bls.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	74fb      	strb	r3, [r7, #19]
            break;
 8004c54:	e006      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c56:	4b0d      	ldr	r3, [pc, #52]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0ec      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c6a:	4b08      	ldr	r3, [pc, #32]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c7a:	4904      	ldr	r1, [pc, #16]	@ (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c82:	e009      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c84:	7cfb      	ldrb	r3, [r7, #19]
 8004c86:	74bb      	strb	r3, [r7, #18]
 8004c88:	e006      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c8a:	bf00      	nop
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c94:	7cfb      	ldrb	r3, [r7, #19]
 8004c96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c98:	7c7b      	ldrb	r3, [r7, #17]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d105      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c9e:	4b9e      	ldr	r3, [pc, #632]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca2:	4a9d      	ldr	r2, [pc, #628]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ca8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cb6:	4b98      	ldr	r3, [pc, #608]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbc:	f023 0203 	bic.w	r2, r3, #3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc4:	4994      	ldr	r1, [pc, #592]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cd8:	4b8f      	ldr	r3, [pc, #572]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cde:	f023 020c 	bic.w	r2, r3, #12
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce6:	498c      	ldr	r1, [pc, #560]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cfa:	4b87      	ldr	r3, [pc, #540]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d00:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	4983      	ldr	r1, [pc, #524]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	497b      	ldr	r1, [pc, #492]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d3e:	4b76      	ldr	r3, [pc, #472]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d4c:	4972      	ldr	r1, [pc, #456]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d60:	4b6d      	ldr	r3, [pc, #436]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d6e:	496a      	ldr	r1, [pc, #424]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d82:	4b65      	ldr	r3, [pc, #404]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d90:	4961      	ldr	r1, [pc, #388]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004da4:	4b5c      	ldr	r3, [pc, #368]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004daa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db2:	4959      	ldr	r1, [pc, #356]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dc6:	4b54      	ldr	r3, [pc, #336]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dcc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd4:	4950      	ldr	r1, [pc, #320]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004de8:	4b4b      	ldr	r3, [pc, #300]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df6:	4948      	ldr	r1, [pc, #288]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e0a:	4b43      	ldr	r3, [pc, #268]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e18:	493f      	ldr	r1, [pc, #252]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d028      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e3a:	4937      	ldr	r1, [pc, #220]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e4a:	d106      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e4c:	4b32      	ldr	r3, [pc, #200]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a31      	ldr	r2, [pc, #196]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e56:	60d3      	str	r3, [r2, #12]
 8004e58:	e011      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e62:	d10c      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3304      	adds	r3, #4
 8004e68:	2101      	movs	r1, #1
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f8c8 	bl	8005000 <RCCEx_PLLSAI1_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e7a:	7cfb      	ldrb	r3, [r7, #19]
 8004e7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d028      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e8a:	4b23      	ldr	r3, [pc, #140]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e90:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e98:	491f      	ldr	r1, [pc, #124]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ea8:	d106      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	4a1a      	ldr	r2, [pc, #104]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eb4:	60d3      	str	r3, [r2, #12]
 8004eb6:	e011      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ebc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f899 	bl	8005000 <RCCEx_PLLSAI1_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ed2:	7cfb      	ldrb	r3, [r7, #19]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d02b      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef6:	4908      	ldr	r1, [pc, #32]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f06:	d109      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f08:	4b03      	ldr	r3, [pc, #12]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4a02      	ldr	r2, [pc, #8]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f12:	60d3      	str	r3, [r2, #12]
 8004f14:	e014      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f16:	bf00      	nop
 8004f18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 f867 	bl	8005000 <RCCEx_PLLSAI1_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f3c:	7cfb      	ldrb	r3, [r7, #19]
 8004f3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d02f      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f5a:	4928      	ldr	r1, [pc, #160]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f6a:	d10d      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	2102      	movs	r1, #2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f844 	bl	8005000 <RCCEx_PLLSAI1_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d014      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f82:	7cfb      	ldrb	r3, [r7, #19]
 8004f84:	74bb      	strb	r3, [r7, #18]
 8004f86:	e011      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f90:	d10c      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3320      	adds	r3, #32
 8004f96:	2102      	movs	r1, #2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 f925 	bl	80051e8 <RCCEx_PLLSAI2_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fa2:	7cfb      	ldrb	r3, [r7, #19]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fb8:	4b10      	ldr	r3, [pc, #64]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fbe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fc6:	490d      	ldr	r1, [pc, #52]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fda:	4b08      	ldr	r3, [pc, #32]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fea:	4904      	ldr	r1, [pc, #16]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ff2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40021000 	.word	0x40021000

08005000 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800500e:	4b75      	ldr	r3, [pc, #468]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d018      	beq.n	800504c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800501a:	4b72      	ldr	r3, [pc, #456]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f003 0203 	and.w	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d10d      	bne.n	8005046 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
       ||
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005032:	4b6c      	ldr	r3, [pc, #432]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	091b      	lsrs	r3, r3, #4
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
       ||
 8005042:	429a      	cmp	r2, r3
 8005044:	d047      	beq.n	80050d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
 800504a:	e044      	b.n	80050d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b03      	cmp	r3, #3
 8005052:	d018      	beq.n	8005086 <RCCEx_PLLSAI1_Config+0x86>
 8005054:	2b03      	cmp	r3, #3
 8005056:	d825      	bhi.n	80050a4 <RCCEx_PLLSAI1_Config+0xa4>
 8005058:	2b01      	cmp	r3, #1
 800505a:	d002      	beq.n	8005062 <RCCEx_PLLSAI1_Config+0x62>
 800505c:	2b02      	cmp	r3, #2
 800505e:	d009      	beq.n	8005074 <RCCEx_PLLSAI1_Config+0x74>
 8005060:	e020      	b.n	80050a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005062:	4b60      	ldr	r3, [pc, #384]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11d      	bne.n	80050aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005072:	e01a      	b.n	80050aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005074:	4b5b      	ldr	r3, [pc, #364]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800507c:	2b00      	cmp	r3, #0
 800507e:	d116      	bne.n	80050ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005084:	e013      	b.n	80050ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005086:	4b57      	ldr	r3, [pc, #348]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10f      	bne.n	80050b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005092:	4b54      	ldr	r3, [pc, #336]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050a2:	e006      	b.n	80050b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      break;
 80050a8:	e004      	b.n	80050b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050aa:	bf00      	nop
 80050ac:	e002      	b.n	80050b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ae:	bf00      	nop
 80050b0:	e000      	b.n	80050b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10d      	bne.n	80050d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050ba:	4b4a      	ldr	r3, [pc, #296]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6819      	ldr	r1, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	430b      	orrs	r3, r1
 80050d0:	4944      	ldr	r1, [pc, #272]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d17d      	bne.n	80051d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050dc:	4b41      	ldr	r3, [pc, #260]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a40      	ldr	r2, [pc, #256]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e8:	f7fe fada 	bl	80036a0 <HAL_GetTick>
 80050ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050ee:	e009      	b.n	8005104 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050f0:	f7fe fad6 	bl	80036a0 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d902      	bls.n	8005104 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	73fb      	strb	r3, [r7, #15]
        break;
 8005102:	e005      	b.n	8005110 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005104:	4b37      	ldr	r3, [pc, #220]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1ef      	bne.n	80050f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d160      	bne.n	80051d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d111      	bne.n	8005140 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800511c:	4b31      	ldr	r3, [pc, #196]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6892      	ldr	r2, [r2, #8]
 800512c:	0211      	lsls	r1, r2, #8
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68d2      	ldr	r2, [r2, #12]
 8005132:	0912      	lsrs	r2, r2, #4
 8005134:	0452      	lsls	r2, r2, #17
 8005136:	430a      	orrs	r2, r1
 8005138:	492a      	ldr	r1, [pc, #168]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513a:	4313      	orrs	r3, r2
 800513c:	610b      	str	r3, [r1, #16]
 800513e:	e027      	b.n	8005190 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d112      	bne.n	800516c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005146:	4b27      	ldr	r3, [pc, #156]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800514e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6892      	ldr	r2, [r2, #8]
 8005156:	0211      	lsls	r1, r2, #8
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6912      	ldr	r2, [r2, #16]
 800515c:	0852      	lsrs	r2, r2, #1
 800515e:	3a01      	subs	r2, #1
 8005160:	0552      	lsls	r2, r2, #21
 8005162:	430a      	orrs	r2, r1
 8005164:	491f      	ldr	r1, [pc, #124]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005166:	4313      	orrs	r3, r2
 8005168:	610b      	str	r3, [r1, #16]
 800516a:	e011      	b.n	8005190 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800516c:	4b1d      	ldr	r3, [pc, #116]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005174:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6892      	ldr	r2, [r2, #8]
 800517c:	0211      	lsls	r1, r2, #8
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6952      	ldr	r2, [r2, #20]
 8005182:	0852      	lsrs	r2, r2, #1
 8005184:	3a01      	subs	r2, #1
 8005186:	0652      	lsls	r2, r2, #25
 8005188:	430a      	orrs	r2, r1
 800518a:	4916      	ldr	r1, [pc, #88]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800518c:	4313      	orrs	r3, r2
 800518e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005190:	4b14      	ldr	r3, [pc, #80]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a13      	ldr	r2, [pc, #76]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005196:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800519a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519c:	f7fe fa80 	bl	80036a0 <HAL_GetTick>
 80051a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051a2:	e009      	b.n	80051b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051a4:	f7fe fa7c 	bl	80036a0 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d902      	bls.n	80051b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	73fb      	strb	r3, [r7, #15]
          break;
 80051b6:	e005      	b.n	80051c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051b8:	4b0a      	ldr	r3, [pc, #40]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0ef      	beq.n	80051a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051ca:	4b06      	ldr	r3, [pc, #24]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	4904      	ldr	r1, [pc, #16]	@ (80051e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40021000 	.word	0x40021000

080051e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051f6:	4b6a      	ldr	r3, [pc, #424]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d018      	beq.n	8005234 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005202:	4b67      	ldr	r3, [pc, #412]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0203 	and.w	r2, r3, #3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d10d      	bne.n	800522e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
       ||
 8005216:	2b00      	cmp	r3, #0
 8005218:	d009      	beq.n	800522e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800521a:	4b61      	ldr	r3, [pc, #388]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	091b      	lsrs	r3, r3, #4
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
       ||
 800522a:	429a      	cmp	r2, r3
 800522c:	d047      	beq.n	80052be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
 8005232:	e044      	b.n	80052be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d018      	beq.n	800526e <RCCEx_PLLSAI2_Config+0x86>
 800523c:	2b03      	cmp	r3, #3
 800523e:	d825      	bhi.n	800528c <RCCEx_PLLSAI2_Config+0xa4>
 8005240:	2b01      	cmp	r3, #1
 8005242:	d002      	beq.n	800524a <RCCEx_PLLSAI2_Config+0x62>
 8005244:	2b02      	cmp	r3, #2
 8005246:	d009      	beq.n	800525c <RCCEx_PLLSAI2_Config+0x74>
 8005248:	e020      	b.n	800528c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800524a:	4b55      	ldr	r3, [pc, #340]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d11d      	bne.n	8005292 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800525a:	e01a      	b.n	8005292 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800525c:	4b50      	ldr	r3, [pc, #320]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005264:	2b00      	cmp	r3, #0
 8005266:	d116      	bne.n	8005296 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800526c:	e013      	b.n	8005296 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800526e:	4b4c      	ldr	r3, [pc, #304]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10f      	bne.n	800529a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800527a:	4b49      	ldr	r3, [pc, #292]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800528a:	e006      	b.n	800529a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
      break;
 8005290:	e004      	b.n	800529c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005292:	bf00      	nop
 8005294:	e002      	b.n	800529c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005296:	bf00      	nop
 8005298:	e000      	b.n	800529c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800529a:	bf00      	nop
    }

    if(status == HAL_OK)
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10d      	bne.n	80052be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052a2:	4b3f      	ldr	r3, [pc, #252]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6819      	ldr	r1, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	430b      	orrs	r3, r1
 80052b8:	4939      	ldr	r1, [pc, #228]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052be:	7bfb      	ldrb	r3, [r7, #15]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d167      	bne.n	8005394 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052c4:	4b36      	ldr	r3, [pc, #216]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a35      	ldr	r2, [pc, #212]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d0:	f7fe f9e6 	bl	80036a0 <HAL_GetTick>
 80052d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052d6:	e009      	b.n	80052ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052d8:	f7fe f9e2 	bl	80036a0 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d902      	bls.n	80052ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	73fb      	strb	r3, [r7, #15]
        break;
 80052ea:	e005      	b.n	80052f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052ec:	4b2c      	ldr	r3, [pc, #176]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1ef      	bne.n	80052d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d14a      	bne.n	8005394 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d111      	bne.n	8005328 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005304:	4b26      	ldr	r3, [pc, #152]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800530c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6892      	ldr	r2, [r2, #8]
 8005314:	0211      	lsls	r1, r2, #8
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68d2      	ldr	r2, [r2, #12]
 800531a:	0912      	lsrs	r2, r2, #4
 800531c:	0452      	lsls	r2, r2, #17
 800531e:	430a      	orrs	r2, r1
 8005320:	491f      	ldr	r1, [pc, #124]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005322:	4313      	orrs	r3, r2
 8005324:	614b      	str	r3, [r1, #20]
 8005326:	e011      	b.n	800534c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005328:	4b1d      	ldr	r3, [pc, #116]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005330:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6892      	ldr	r2, [r2, #8]
 8005338:	0211      	lsls	r1, r2, #8
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6912      	ldr	r2, [r2, #16]
 800533e:	0852      	lsrs	r2, r2, #1
 8005340:	3a01      	subs	r2, #1
 8005342:	0652      	lsls	r2, r2, #25
 8005344:	430a      	orrs	r2, r1
 8005346:	4916      	ldr	r1, [pc, #88]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005348:	4313      	orrs	r3, r2
 800534a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800534c:	4b14      	ldr	r3, [pc, #80]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a13      	ldr	r2, [pc, #76]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005356:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005358:	f7fe f9a2 	bl	80036a0 <HAL_GetTick>
 800535c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800535e:	e009      	b.n	8005374 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005360:	f7fe f99e 	bl	80036a0 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d902      	bls.n	8005374 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	73fb      	strb	r3, [r7, #15]
          break;
 8005372:	e005      	b.n	8005380 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005374:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0ef      	beq.n	8005360 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005386:	4b06      	ldr	r3, [pc, #24]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	4904      	ldr	r1, [pc, #16]	@ (80053a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005390:	4313      	orrs	r3, r2
 8005392:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005394:	7bfb      	ldrb	r3, [r7, #15]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40021000 	.word	0x40021000

080053a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e049      	b.n	800544a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f841 	bl	8005452 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f000 f9e0 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	d001      	beq.n	8005480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e04f      	b.n	8005520 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a23      	ldr	r2, [pc, #140]	@ (800552c <HAL_TIM_Base_Start_IT+0xc4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01d      	beq.n	80054de <HAL_TIM_Base_Start_IT+0x76>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054aa:	d018      	beq.n	80054de <HAL_TIM_Base_Start_IT+0x76>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005530 <HAL_TIM_Base_Start_IT+0xc8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_TIM_Base_Start_IT+0x76>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005534 <HAL_TIM_Base_Start_IT+0xcc>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00e      	beq.n	80054de <HAL_TIM_Base_Start_IT+0x76>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005538 <HAL_TIM_Base_Start_IT+0xd0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d009      	beq.n	80054de <HAL_TIM_Base_Start_IT+0x76>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1b      	ldr	r2, [pc, #108]	@ (800553c <HAL_TIM_Base_Start_IT+0xd4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d004      	beq.n	80054de <HAL_TIM_Base_Start_IT+0x76>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a19      	ldr	r2, [pc, #100]	@ (8005540 <HAL_TIM_Base_Start_IT+0xd8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d115      	bne.n	800550a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	4b17      	ldr	r3, [pc, #92]	@ (8005544 <HAL_TIM_Base_Start_IT+0xdc>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b06      	cmp	r3, #6
 80054ee:	d015      	beq.n	800551c <HAL_TIM_Base_Start_IT+0xb4>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054f6:	d011      	beq.n	800551c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0201 	orr.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005508:	e008      	b.n	800551c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0201 	orr.w	r2, r2, #1
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	e000      	b.n	800551e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	40012c00 	.word	0x40012c00
 8005530:	40000400 	.word	0x40000400
 8005534:	40000800 	.word	0x40000800
 8005538:	40000c00 	.word	0x40000c00
 800553c:	40013400 	.word	0x40013400
 8005540:	40014000 	.word	0x40014000
 8005544:	00010007 	.word	0x00010007

08005548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0202 	mvn.w	r2, #2
 800557c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f8e9 	bl	800576a <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f8db 	bl	8005756 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f8ec 	bl	800577e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d020      	beq.n	80055f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01b      	beq.n	80055f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0204 	mvn.w	r2, #4
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2202      	movs	r2, #2
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8c3 	bl	800576a <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f8b5 	bl	8005756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f8c6 	bl	800577e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d020      	beq.n	8005644 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01b      	beq.n	8005644 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0208 	mvn.w	r2, #8
 8005614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2204      	movs	r2, #4
 800561a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f89d 	bl	800576a <HAL_TIM_IC_CaptureCallback>
 8005630:	e005      	b.n	800563e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f88f 	bl	8005756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f8a0 	bl	800577e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b00      	cmp	r3, #0
 800564c:	d020      	beq.n	8005690 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01b      	beq.n	8005690 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0210 	mvn.w	r2, #16
 8005660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2208      	movs	r2, #8
 8005666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f877 	bl	800576a <HAL_TIM_IC_CaptureCallback>
 800567c:	e005      	b.n	800568a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f869 	bl	8005756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f87a 	bl	800577e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00c      	beq.n	80056b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0201 	mvn.w	r2, #1
 80056ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fd fd42 	bl	8003138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d104      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00c      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80056da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f913 	bl	8005908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00c      	beq.n	8005706 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80056fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f90b 	bl	800591c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00c      	beq.n	800572a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d007      	beq.n	800572a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f834 	bl	8005792 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00c      	beq.n	800574e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f06f 0220 	mvn.w	r2, #32
 8005746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f8d3 	bl	80058f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800574e:	bf00      	nop
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a46      	ldr	r2, [pc, #280]	@ (80058d4 <TIM_Base_SetConfig+0x12c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d013      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c6:	d00f      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a43      	ldr	r2, [pc, #268]	@ (80058d8 <TIM_Base_SetConfig+0x130>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00b      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a42      	ldr	r2, [pc, #264]	@ (80058dc <TIM_Base_SetConfig+0x134>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d007      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a41      	ldr	r2, [pc, #260]	@ (80058e0 <TIM_Base_SetConfig+0x138>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a40      	ldr	r2, [pc, #256]	@ (80058e4 <TIM_Base_SetConfig+0x13c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d108      	bne.n	80057fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a35      	ldr	r2, [pc, #212]	@ (80058d4 <TIM_Base_SetConfig+0x12c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01f      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005808:	d01b      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a32      	ldr	r2, [pc, #200]	@ (80058d8 <TIM_Base_SetConfig+0x130>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d017      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a31      	ldr	r2, [pc, #196]	@ (80058dc <TIM_Base_SetConfig+0x134>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a30      	ldr	r2, [pc, #192]	@ (80058e0 <TIM_Base_SetConfig+0x138>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00f      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a2f      	ldr	r2, [pc, #188]	@ (80058e4 <TIM_Base_SetConfig+0x13c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00b      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2e      	ldr	r2, [pc, #184]	@ (80058e8 <TIM_Base_SetConfig+0x140>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d007      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a2d      	ldr	r2, [pc, #180]	@ (80058ec <TIM_Base_SetConfig+0x144>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d003      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2c      	ldr	r2, [pc, #176]	@ (80058f0 <TIM_Base_SetConfig+0x148>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d108      	bne.n	8005854 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a16      	ldr	r2, [pc, #88]	@ (80058d4 <TIM_Base_SetConfig+0x12c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00f      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a18      	ldr	r2, [pc, #96]	@ (80058e4 <TIM_Base_SetConfig+0x13c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00b      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a17      	ldr	r2, [pc, #92]	@ (80058e8 <TIM_Base_SetConfig+0x140>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a16      	ldr	r2, [pc, #88]	@ (80058ec <TIM_Base_SetConfig+0x144>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a15      	ldr	r2, [pc, #84]	@ (80058f0 <TIM_Base_SetConfig+0x148>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d103      	bne.n	80058a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d105      	bne.n	80058c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f023 0201 	bic.w	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	611a      	str	r2, [r3, #16]
  }
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40013400 	.word	0x40013400
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40014400 	.word	0x40014400
 80058f0:	40014800 	.word	0x40014800

080058f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e040      	b.n	80059c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fd fde2 	bl	800351c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2224      	movs	r2, #36	@ 0x24
 800595c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0201 	bic.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fedc 	bl	8006734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fc21 	bl	80061c4 <UART_SetConfig>
 8005982:	4603      	mov	r3, r0
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e01b      	b.n	80059c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800599a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0201 	orr.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 ff5b 	bl	8006878 <UART_CheckIdleState>
 80059c2:	4603      	mov	r3, r0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	@ 0x28
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	d177      	bne.n	8005ad4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_UART_Transmit+0x24>
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e070      	b.n	8005ad6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2221      	movs	r2, #33	@ 0x21
 8005a00:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a02:	f7fd fe4d 	bl	80036a0 <HAL_GetTick>
 8005a06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	88fa      	ldrh	r2, [r7, #6]
 8005a0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a20:	d108      	bne.n	8005a34 <HAL_UART_Transmit+0x68>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d104      	bne.n	8005a34 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	e003      	b.n	8005a3c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a3c:	e02f      	b.n	8005a9e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2200      	movs	r2, #0
 8005a46:	2180      	movs	r1, #128	@ 0x80
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 ffbd 	bl	80069c8 <UART_WaitOnFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e03b      	b.n	8005ad6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	881a      	ldrh	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a70:	b292      	uxth	r2, r2
 8005a72:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	3302      	adds	r3, #2
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	e007      	b.n	8005a8c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	781a      	ldrb	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1c9      	bne.n	8005a3e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2140      	movs	r1, #64	@ 0x40
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 ff87 	bl	80069c8 <UART_WaitOnFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e005      	b.n	8005ad6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2220      	movs	r2, #32
 8005ace:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08a      	sub	sp, #40	@ 0x28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4613      	mov	r3, r2
 8005aec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d137      	bne.n	8005b68 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <HAL_UART_Receive_IT+0x24>
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e030      	b.n	8005b6a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a18      	ldr	r2, [pc, #96]	@ (8005b74 <HAL_UART_Receive_IT+0x94>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d01f      	beq.n	8005b58 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d018      	beq.n	8005b58 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	613b      	str	r3, [r7, #16]
   return(result);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	623b      	str	r3, [r7, #32]
 8005b46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	69f9      	ldr	r1, [r7, #28]
 8005b4a:	6a3a      	ldr	r2, [r7, #32]
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e6      	bne.n	8005b26 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	68b9      	ldr	r1, [r7, #8]
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 ffa0 	bl	8006aa4 <UART_Start_Receive_IT>
 8005b64:	4603      	mov	r3, r0
 8005b66:	e000      	b.n	8005b6a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b68:	2302      	movs	r3, #2
  }
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3728      	adds	r7, #40	@ 0x28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40008000 	.word	0x40008000

08005b78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b0ba      	sub	sp, #232	@ 0xe8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005ba2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005bac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d115      	bne.n	8005be0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00f      	beq.n	8005be0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d009      	beq.n	8005be0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 82ca 	beq.w	800616a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
      }
      return;
 8005bde:	e2c4      	b.n	800616a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8117 	beq.w	8005e18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d106      	bne.n	8005c04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005bf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005bfa:	4b85      	ldr	r3, [pc, #532]	@ (8005e10 <HAL_UART_IRQHandler+0x298>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 810a 	beq.w	8005e18 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d011      	beq.n	8005c34 <HAL_UART_IRQHandler+0xbc>
 8005c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2201      	movs	r2, #1
 8005c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c2a:	f043 0201 	orr.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d011      	beq.n	8005c64 <HAL_UART_IRQHandler+0xec>
 8005c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2202      	movs	r2, #2
 8005c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c5a:	f043 0204 	orr.w	r2, r3, #4
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d011      	beq.n	8005c94 <HAL_UART_IRQHandler+0x11c>
 8005c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00b      	beq.n	8005c94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2204      	movs	r2, #4
 8005c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c8a:	f043 0202 	orr.w	r2, r3, #2
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d017      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d105      	bne.n	8005cb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00b      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cc6:	f043 0208 	orr.w	r2, r3, #8
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d012      	beq.n	8005d02 <HAL_UART_IRQHandler+0x18a>
 8005cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00c      	beq.n	8005d02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cf8:	f043 0220 	orr.w	r2, r3, #32
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8230 	beq.w	800616e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00d      	beq.n	8005d36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4a:	2b40      	cmp	r3, #64	@ 0x40
 8005d4c:	d005      	beq.n	8005d5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d04f      	beq.n	8005dfa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 ff68 	bl	8006c30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6a:	2b40      	cmp	r3, #64	@ 0x40
 8005d6c:	d141      	bne.n	8005df2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3308      	adds	r3, #8
 8005d74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3308      	adds	r3, #8
 8005d96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005da6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1d9      	bne.n	8005d6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d013      	beq.n	8005dea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dc6:	4a13      	ldr	r2, [pc, #76]	@ (8005e14 <HAL_UART_IRQHandler+0x29c>)
 8005dc8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fd fd92 	bl	80038f8 <HAL_DMA_Abort_IT>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d017      	beq.n	8005e0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005de4:	4610      	mov	r0, r2
 8005de6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de8:	e00f      	b.n	8005e0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f9d4 	bl	8006198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df0:	e00b      	b.n	8005e0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f9d0 	bl	8006198 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df8:	e007      	b.n	8005e0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f9cc 	bl	8006198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005e08:	e1b1      	b.n	800616e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0a:	bf00      	nop
    return;
 8005e0c:	e1af      	b.n	800616e <HAL_UART_IRQHandler+0x5f6>
 8005e0e:	bf00      	nop
 8005e10:	04000120 	.word	0x04000120
 8005e14:	08006cf9 	.word	0x08006cf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	f040 816a 	bne.w	80060f6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 8163 	beq.w	80060f6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e34:	f003 0310 	and.w	r3, r3, #16
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 815c 	beq.w	80060f6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2210      	movs	r2, #16
 8005e44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e50:	2b40      	cmp	r3, #64	@ 0x40
 8005e52:	f040 80d4 	bne.w	8005ffe <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80ad 	beq.w	8005fc6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e76:	429a      	cmp	r2, r3
 8005e78:	f080 80a5 	bcs.w	8005fc6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f040 8086 	bne.w	8005fa4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ec6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1da      	bne.n	8005e98 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3308      	adds	r3, #8
 8005f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e1      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3308      	adds	r3, #8
 8005f24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e3      	bne.n	8005f1e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f74:	f023 0310 	bic.w	r3, r3, #16
 8005f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	461a      	mov	r2, r3
 8005f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e4      	bne.n	8005f64 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fd fc6c 	bl	800387c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f8f4 	bl	80061ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005fc4:	e0d5      	b.n	8006172 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005fcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	f040 80ce 	bne.w	8006172 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	f040 80c5 	bne.w	8006172 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f8d8 	bl	80061ac <HAL_UARTEx_RxEventCallback>
      return;
 8005ffc:	e0b9      	b.n	8006172 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800600a:	b29b      	uxth	r3, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80ab 	beq.w	8006176 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80a6 	beq.w	8006176 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800603e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800604c:	647b      	str	r3, [r7, #68]	@ 0x44
 800604e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006052:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800605a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e4      	bne.n	800602a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3308      	adds	r3, #8
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	623b      	str	r3, [r7, #32]
   return(result);
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3308      	adds	r3, #8
 8006080:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006084:	633a      	str	r2, [r7, #48]	@ 0x30
 8006086:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800608a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e3      	bne.n	8006060 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f023 0310 	bic.w	r3, r3, #16
 80060c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	69b9      	ldr	r1, [r7, #24]
 80060d4:	69fa      	ldr	r2, [r7, #28]
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	617b      	str	r3, [r7, #20]
   return(result);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e4      	bne.n	80060ac <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2202      	movs	r2, #2
 80060e6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f85c 	bl	80061ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060f4:	e03f      	b.n	8006176 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00e      	beq.n	8006120 <HAL_UART_IRQHandler+0x5a8>
 8006102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d008      	beq.n	8006120 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006116:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 ffe9 	bl	80070f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800611e:	e02d      	b.n	800617c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00e      	beq.n	800614a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006134:	2b00      	cmp	r3, #0
 8006136:	d008      	beq.n	800614a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01c      	beq.n	800617a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4798      	blx	r3
    }
    return;
 8006148:	e017      	b.n	800617a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800614a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800614e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	d012      	beq.n	800617c <HAL_UART_IRQHandler+0x604>
 8006156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800615a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00c      	beq.n	800617c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fdde 	bl	8006d24 <UART_EndTransmit_IT>
    return;
 8006168:	e008      	b.n	800617c <HAL_UART_IRQHandler+0x604>
      return;
 800616a:	bf00      	nop
 800616c:	e006      	b.n	800617c <HAL_UART_IRQHandler+0x604>
    return;
 800616e:	bf00      	nop
 8006170:	e004      	b.n	800617c <HAL_UART_IRQHandler+0x604>
      return;
 8006172:	bf00      	nop
 8006174:	e002      	b.n	800617c <HAL_UART_IRQHandler+0x604>
      return;
 8006176:	bf00      	nop
 8006178:	e000      	b.n	800617c <HAL_UART_IRQHandler+0x604>
    return;
 800617a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800617c:	37e8      	adds	r7, #232	@ 0xe8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop

08006184 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061c8:	b08a      	sub	sp, #40	@ 0x28
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	431a      	orrs	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4ba4      	ldr	r3, [pc, #656]	@ (8006484 <UART_SetConfig+0x2c0>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061fc:	430b      	orrs	r3, r1
 80061fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a99      	ldr	r2, [pc, #612]	@ (8006488 <UART_SetConfig+0x2c4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d004      	beq.n	8006230 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622c:	4313      	orrs	r3, r2
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006240:	430a      	orrs	r2, r1
 8006242:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a90      	ldr	r2, [pc, #576]	@ (800648c <UART_SetConfig+0x2c8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d126      	bne.n	800629c <UART_SetConfig+0xd8>
 800624e:	4b90      	ldr	r3, [pc, #576]	@ (8006490 <UART_SetConfig+0x2cc>)
 8006250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	2b03      	cmp	r3, #3
 800625a:	d81b      	bhi.n	8006294 <UART_SetConfig+0xd0>
 800625c:	a201      	add	r2, pc, #4	@ (adr r2, 8006264 <UART_SetConfig+0xa0>)
 800625e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006262:	bf00      	nop
 8006264:	08006275 	.word	0x08006275
 8006268:	08006285 	.word	0x08006285
 800626c:	0800627d 	.word	0x0800627d
 8006270:	0800628d 	.word	0x0800628d
 8006274:	2301      	movs	r3, #1
 8006276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800627a:	e116      	b.n	80064aa <UART_SetConfig+0x2e6>
 800627c:	2302      	movs	r3, #2
 800627e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006282:	e112      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006284:	2304      	movs	r3, #4
 8006286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800628a:	e10e      	b.n	80064aa <UART_SetConfig+0x2e6>
 800628c:	2308      	movs	r3, #8
 800628e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006292:	e10a      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006294:	2310      	movs	r3, #16
 8006296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800629a:	e106      	b.n	80064aa <UART_SetConfig+0x2e6>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a7c      	ldr	r2, [pc, #496]	@ (8006494 <UART_SetConfig+0x2d0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d138      	bne.n	8006318 <UART_SetConfig+0x154>
 80062a6:	4b7a      	ldr	r3, [pc, #488]	@ (8006490 <UART_SetConfig+0x2cc>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ac:	f003 030c 	and.w	r3, r3, #12
 80062b0:	2b0c      	cmp	r3, #12
 80062b2:	d82d      	bhi.n	8006310 <UART_SetConfig+0x14c>
 80062b4:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <UART_SetConfig+0xf8>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062f1 	.word	0x080062f1
 80062c0:	08006311 	.word	0x08006311
 80062c4:	08006311 	.word	0x08006311
 80062c8:	08006311 	.word	0x08006311
 80062cc:	08006301 	.word	0x08006301
 80062d0:	08006311 	.word	0x08006311
 80062d4:	08006311 	.word	0x08006311
 80062d8:	08006311 	.word	0x08006311
 80062dc:	080062f9 	.word	0x080062f9
 80062e0:	08006311 	.word	0x08006311
 80062e4:	08006311 	.word	0x08006311
 80062e8:	08006311 	.word	0x08006311
 80062ec:	08006309 	.word	0x08006309
 80062f0:	2300      	movs	r3, #0
 80062f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062f6:	e0d8      	b.n	80064aa <UART_SetConfig+0x2e6>
 80062f8:	2302      	movs	r3, #2
 80062fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062fe:	e0d4      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006300:	2304      	movs	r3, #4
 8006302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006306:	e0d0      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006308:	2308      	movs	r3, #8
 800630a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800630e:	e0cc      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006310:	2310      	movs	r3, #16
 8006312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006316:	e0c8      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a5e      	ldr	r2, [pc, #376]	@ (8006498 <UART_SetConfig+0x2d4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d125      	bne.n	800636e <UART_SetConfig+0x1aa>
 8006322:	4b5b      	ldr	r3, [pc, #364]	@ (8006490 <UART_SetConfig+0x2cc>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006328:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800632c:	2b30      	cmp	r3, #48	@ 0x30
 800632e:	d016      	beq.n	800635e <UART_SetConfig+0x19a>
 8006330:	2b30      	cmp	r3, #48	@ 0x30
 8006332:	d818      	bhi.n	8006366 <UART_SetConfig+0x1a2>
 8006334:	2b20      	cmp	r3, #32
 8006336:	d00a      	beq.n	800634e <UART_SetConfig+0x18a>
 8006338:	2b20      	cmp	r3, #32
 800633a:	d814      	bhi.n	8006366 <UART_SetConfig+0x1a2>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <UART_SetConfig+0x182>
 8006340:	2b10      	cmp	r3, #16
 8006342:	d008      	beq.n	8006356 <UART_SetConfig+0x192>
 8006344:	e00f      	b.n	8006366 <UART_SetConfig+0x1a2>
 8006346:	2300      	movs	r3, #0
 8006348:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800634c:	e0ad      	b.n	80064aa <UART_SetConfig+0x2e6>
 800634e:	2302      	movs	r3, #2
 8006350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006354:	e0a9      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006356:	2304      	movs	r3, #4
 8006358:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800635c:	e0a5      	b.n	80064aa <UART_SetConfig+0x2e6>
 800635e:	2308      	movs	r3, #8
 8006360:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006364:	e0a1      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006366:	2310      	movs	r3, #16
 8006368:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800636c:	e09d      	b.n	80064aa <UART_SetConfig+0x2e6>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a4a      	ldr	r2, [pc, #296]	@ (800649c <UART_SetConfig+0x2d8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d125      	bne.n	80063c4 <UART_SetConfig+0x200>
 8006378:	4b45      	ldr	r3, [pc, #276]	@ (8006490 <UART_SetConfig+0x2cc>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006382:	2bc0      	cmp	r3, #192	@ 0xc0
 8006384:	d016      	beq.n	80063b4 <UART_SetConfig+0x1f0>
 8006386:	2bc0      	cmp	r3, #192	@ 0xc0
 8006388:	d818      	bhi.n	80063bc <UART_SetConfig+0x1f8>
 800638a:	2b80      	cmp	r3, #128	@ 0x80
 800638c:	d00a      	beq.n	80063a4 <UART_SetConfig+0x1e0>
 800638e:	2b80      	cmp	r3, #128	@ 0x80
 8006390:	d814      	bhi.n	80063bc <UART_SetConfig+0x1f8>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <UART_SetConfig+0x1d8>
 8006396:	2b40      	cmp	r3, #64	@ 0x40
 8006398:	d008      	beq.n	80063ac <UART_SetConfig+0x1e8>
 800639a:	e00f      	b.n	80063bc <UART_SetConfig+0x1f8>
 800639c:	2300      	movs	r3, #0
 800639e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063a2:	e082      	b.n	80064aa <UART_SetConfig+0x2e6>
 80063a4:	2302      	movs	r3, #2
 80063a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063aa:	e07e      	b.n	80064aa <UART_SetConfig+0x2e6>
 80063ac:	2304      	movs	r3, #4
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063b2:	e07a      	b.n	80064aa <UART_SetConfig+0x2e6>
 80063b4:	2308      	movs	r3, #8
 80063b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ba:	e076      	b.n	80064aa <UART_SetConfig+0x2e6>
 80063bc:	2310      	movs	r3, #16
 80063be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063c2:	e072      	b.n	80064aa <UART_SetConfig+0x2e6>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a35      	ldr	r2, [pc, #212]	@ (80064a0 <UART_SetConfig+0x2dc>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d12a      	bne.n	8006424 <UART_SetConfig+0x260>
 80063ce:	4b30      	ldr	r3, [pc, #192]	@ (8006490 <UART_SetConfig+0x2cc>)
 80063d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063dc:	d01a      	beq.n	8006414 <UART_SetConfig+0x250>
 80063de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063e2:	d81b      	bhi.n	800641c <UART_SetConfig+0x258>
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e8:	d00c      	beq.n	8006404 <UART_SetConfig+0x240>
 80063ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ee:	d815      	bhi.n	800641c <UART_SetConfig+0x258>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <UART_SetConfig+0x238>
 80063f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063f8:	d008      	beq.n	800640c <UART_SetConfig+0x248>
 80063fa:	e00f      	b.n	800641c <UART_SetConfig+0x258>
 80063fc:	2300      	movs	r3, #0
 80063fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006402:	e052      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006404:	2302      	movs	r3, #2
 8006406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800640a:	e04e      	b.n	80064aa <UART_SetConfig+0x2e6>
 800640c:	2304      	movs	r3, #4
 800640e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006412:	e04a      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006414:	2308      	movs	r3, #8
 8006416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800641a:	e046      	b.n	80064aa <UART_SetConfig+0x2e6>
 800641c:	2310      	movs	r3, #16
 800641e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006422:	e042      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a17      	ldr	r2, [pc, #92]	@ (8006488 <UART_SetConfig+0x2c4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d13a      	bne.n	80064a4 <UART_SetConfig+0x2e0>
 800642e:	4b18      	ldr	r3, [pc, #96]	@ (8006490 <UART_SetConfig+0x2cc>)
 8006430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006434:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006438:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800643c:	d01a      	beq.n	8006474 <UART_SetConfig+0x2b0>
 800643e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006442:	d81b      	bhi.n	800647c <UART_SetConfig+0x2b8>
 8006444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006448:	d00c      	beq.n	8006464 <UART_SetConfig+0x2a0>
 800644a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800644e:	d815      	bhi.n	800647c <UART_SetConfig+0x2b8>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <UART_SetConfig+0x298>
 8006454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006458:	d008      	beq.n	800646c <UART_SetConfig+0x2a8>
 800645a:	e00f      	b.n	800647c <UART_SetConfig+0x2b8>
 800645c:	2300      	movs	r3, #0
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006462:	e022      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006464:	2302      	movs	r3, #2
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800646a:	e01e      	b.n	80064aa <UART_SetConfig+0x2e6>
 800646c:	2304      	movs	r3, #4
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006472:	e01a      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006474:	2308      	movs	r3, #8
 8006476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647a:	e016      	b.n	80064aa <UART_SetConfig+0x2e6>
 800647c:	2310      	movs	r3, #16
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006482:	e012      	b.n	80064aa <UART_SetConfig+0x2e6>
 8006484:	efff69f3 	.word	0xefff69f3
 8006488:	40008000 	.word	0x40008000
 800648c:	40013800 	.word	0x40013800
 8006490:	40021000 	.word	0x40021000
 8006494:	40004400 	.word	0x40004400
 8006498:	40004800 	.word	0x40004800
 800649c:	40004c00 	.word	0x40004c00
 80064a0:	40005000 	.word	0x40005000
 80064a4:	2310      	movs	r3, #16
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a9f      	ldr	r2, [pc, #636]	@ (800672c <UART_SetConfig+0x568>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d17a      	bne.n	80065aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d824      	bhi.n	8006506 <UART_SetConfig+0x342>
 80064bc:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <UART_SetConfig+0x300>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	08006507 	.word	0x08006507
 80064cc:	080064f1 	.word	0x080064f1
 80064d0:	08006507 	.word	0x08006507
 80064d4:	080064f7 	.word	0x080064f7
 80064d8:	08006507 	.word	0x08006507
 80064dc:	08006507 	.word	0x08006507
 80064e0:	08006507 	.word	0x08006507
 80064e4:	080064ff 	.word	0x080064ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e8:	f7fe f9e2 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 80064ec:	61f8      	str	r0, [r7, #28]
        break;
 80064ee:	e010      	b.n	8006512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f0:	4b8f      	ldr	r3, [pc, #572]	@ (8006730 <UART_SetConfig+0x56c>)
 80064f2:	61fb      	str	r3, [r7, #28]
        break;
 80064f4:	e00d      	b.n	8006512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064f6:	f7fe f943 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 80064fa:	61f8      	str	r0, [r7, #28]
        break;
 80064fc:	e009      	b.n	8006512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006502:	61fb      	str	r3, [r7, #28]
        break;
 8006504:	e005      	b.n	8006512 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006510:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80fb 	beq.w	8006710 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4413      	add	r3, r2
 8006524:	69fa      	ldr	r2, [r7, #28]
 8006526:	429a      	cmp	r2, r3
 8006528:	d305      	bcc.n	8006536 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	429a      	cmp	r2, r3
 8006534:	d903      	bls.n	800653e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800653c:	e0e8      	b.n	8006710 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	2200      	movs	r2, #0
 8006542:	461c      	mov	r4, r3
 8006544:	4615      	mov	r5, r2
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	022b      	lsls	r3, r5, #8
 8006550:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006554:	0222      	lsls	r2, r4, #8
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	6849      	ldr	r1, [r1, #4]
 800655a:	0849      	lsrs	r1, r1, #1
 800655c:	2000      	movs	r0, #0
 800655e:	4688      	mov	r8, r1
 8006560:	4681      	mov	r9, r0
 8006562:	eb12 0a08 	adds.w	sl, r2, r8
 8006566:	eb43 0b09 	adc.w	fp, r3, r9
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006578:	4650      	mov	r0, sl
 800657a:	4659      	mov	r1, fp
 800657c:	f7fa fb94 	bl	8000ca8 <__aeabi_uldivmod>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4613      	mov	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800658e:	d308      	bcc.n	80065a2 <UART_SetConfig+0x3de>
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006596:	d204      	bcs.n	80065a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	60da      	str	r2, [r3, #12]
 80065a0:	e0b6      	b.n	8006710 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065a8:	e0b2      	b.n	8006710 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b2:	d15e      	bne.n	8006672 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80065b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d828      	bhi.n	800660e <UART_SetConfig+0x44a>
 80065bc:	a201      	add	r2, pc, #4	@ (adr r2, 80065c4 <UART_SetConfig+0x400>)
 80065be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c2:	bf00      	nop
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	080065f1 	.word	0x080065f1
 80065cc:	080065f9 	.word	0x080065f9
 80065d0:	0800660f 	.word	0x0800660f
 80065d4:	080065ff 	.word	0x080065ff
 80065d8:	0800660f 	.word	0x0800660f
 80065dc:	0800660f 	.word	0x0800660f
 80065e0:	0800660f 	.word	0x0800660f
 80065e4:	08006607 	.word	0x08006607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e8:	f7fe f962 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 80065ec:	61f8      	str	r0, [r7, #28]
        break;
 80065ee:	e014      	b.n	800661a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f0:	f7fe f974 	bl	80048dc <HAL_RCC_GetPCLK2Freq>
 80065f4:	61f8      	str	r0, [r7, #28]
        break;
 80065f6:	e010      	b.n	800661a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006730 <UART_SetConfig+0x56c>)
 80065fa:	61fb      	str	r3, [r7, #28]
        break;
 80065fc:	e00d      	b.n	800661a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065fe:	f7fe f8bf 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 8006602:	61f8      	str	r0, [r7, #28]
        break;
 8006604:	e009      	b.n	800661a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800660a:	61fb      	str	r3, [r7, #28]
        break;
 800660c:	e005      	b.n	800661a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d077      	beq.n	8006710 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	005a      	lsls	r2, r3, #1
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	441a      	add	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2b0f      	cmp	r3, #15
 800663a:	d916      	bls.n	800666a <UART_SetConfig+0x4a6>
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006642:	d212      	bcs.n	800666a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	b29b      	uxth	r3, r3
 8006648:	f023 030f 	bic.w	r3, r3, #15
 800664c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	b29b      	uxth	r3, r3
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	b29a      	uxth	r2, r3
 800665a:	8afb      	ldrh	r3, [r7, #22]
 800665c:	4313      	orrs	r3, r2
 800665e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	8afa      	ldrh	r2, [r7, #22]
 8006666:	60da      	str	r2, [r3, #12]
 8006668:	e052      	b.n	8006710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006670:	e04e      	b.n	8006710 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006672:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006676:	2b08      	cmp	r3, #8
 8006678:	d827      	bhi.n	80066ca <UART_SetConfig+0x506>
 800667a:	a201      	add	r2, pc, #4	@ (adr r2, 8006680 <UART_SetConfig+0x4bc>)
 800667c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006680:	080066a5 	.word	0x080066a5
 8006684:	080066ad 	.word	0x080066ad
 8006688:	080066b5 	.word	0x080066b5
 800668c:	080066cb 	.word	0x080066cb
 8006690:	080066bb 	.word	0x080066bb
 8006694:	080066cb 	.word	0x080066cb
 8006698:	080066cb 	.word	0x080066cb
 800669c:	080066cb 	.word	0x080066cb
 80066a0:	080066c3 	.word	0x080066c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066a4:	f7fe f904 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 80066a8:	61f8      	str	r0, [r7, #28]
        break;
 80066aa:	e014      	b.n	80066d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ac:	f7fe f916 	bl	80048dc <HAL_RCC_GetPCLK2Freq>
 80066b0:	61f8      	str	r0, [r7, #28]
        break;
 80066b2:	e010      	b.n	80066d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006730 <UART_SetConfig+0x56c>)
 80066b6:	61fb      	str	r3, [r7, #28]
        break;
 80066b8:	e00d      	b.n	80066d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ba:	f7fe f861 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 80066be:	61f8      	str	r0, [r7, #28]
        break;
 80066c0:	e009      	b.n	80066d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066c6:	61fb      	str	r3, [r7, #28]
        break;
 80066c8:	e005      	b.n	80066d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066d4:	bf00      	nop
    }

    if (pclk != 0U)
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d019      	beq.n	8006710 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	085a      	lsrs	r2, r3, #1
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	441a      	add	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	2b0f      	cmp	r3, #15
 80066f4:	d909      	bls.n	800670a <UART_SetConfig+0x546>
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066fc:	d205      	bcs.n	800670a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60da      	str	r2, [r3, #12]
 8006708:	e002      	b.n	8006710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800671c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006720:	4618      	mov	r0, r3
 8006722:	3728      	adds	r7, #40	@ 0x28
 8006724:	46bd      	mov	sp, r7
 8006726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800672a:	bf00      	nop
 800672c:	40008000 	.word	0x40008000
 8006730:	00f42400 	.word	0x00f42400

08006734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00a      	beq.n	80067a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00a      	beq.n	80067e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01a      	beq.n	800684a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006832:	d10a      	bne.n	800684a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
  }
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b098      	sub	sp, #96	@ 0x60
 800687c:	af02      	add	r7, sp, #8
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006888:	f7fc ff0a 	bl	80036a0 <HAL_GetTick>
 800688c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b08      	cmp	r3, #8
 800689a:	d12e      	bne.n	80068fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800689c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068a4:	2200      	movs	r2, #0
 80068a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f88c 	bl	80069c8 <UART_WaitOnFlagUntilTimeout>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d021      	beq.n	80068fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80068d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e6      	bne.n	80068b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e062      	b.n	80069c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b04      	cmp	r3, #4
 8006906:	d149      	bne.n	800699c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006908:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006910:	2200      	movs	r2, #0
 8006912:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f856 	bl	80069c8 <UART_WaitOnFlagUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d03c      	beq.n	800699c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	623b      	str	r3, [r7, #32]
   return(result);
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006940:	633b      	str	r3, [r7, #48]	@ 0x30
 8006942:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e6      	bne.n	8006922 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3308      	adds	r3, #8
 800695a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	60fb      	str	r3, [r7, #12]
   return(result);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006974:	61fa      	str	r2, [r7, #28]
 8006976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	69b9      	ldr	r1, [r7, #24]
 800697a:	69fa      	ldr	r2, [r7, #28]
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	617b      	str	r3, [r7, #20]
   return(result);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e5      	bne.n	8006954 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e011      	b.n	80069c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3758      	adds	r7, #88	@ 0x58
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	4613      	mov	r3, r2
 80069d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d8:	e04f      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d04b      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e2:	f7fc fe5d 	bl	80036a0 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d302      	bcc.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e04e      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d037      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b80      	cmp	r3, #128	@ 0x80
 8006a0e:	d034      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b40      	cmp	r3, #64	@ 0x40
 8006a14:	d031      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d110      	bne.n	8006a46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2208      	movs	r2, #8
 8006a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f8ff 	bl	8006c30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2208      	movs	r2, #8
 8006a36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e029      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a54:	d111      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f8e5 	bl	8006c30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e00f      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4013      	ands	r3, r2
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d0a0      	beq.n	80069da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b097      	sub	sp, #92	@ 0x5c
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	88fa      	ldrh	r2, [r7, #6]
 8006abc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	88fa      	ldrh	r2, [r7, #6]
 8006ac4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad6:	d10e      	bne.n	8006af6 <UART_Start_Receive_IT+0x52>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d105      	bne.n	8006aec <UART_Start_Receive_IT+0x48>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006ae6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006aea:	e02d      	b.n	8006b48 <UART_Start_Receive_IT+0xa4>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	22ff      	movs	r2, #255	@ 0xff
 8006af0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006af4:	e028      	b.n	8006b48 <UART_Start_Receive_IT+0xa4>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10d      	bne.n	8006b1a <UART_Start_Receive_IT+0x76>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d104      	bne.n	8006b10 <UART_Start_Receive_IT+0x6c>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	22ff      	movs	r2, #255	@ 0xff
 8006b0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b0e:	e01b      	b.n	8006b48 <UART_Start_Receive_IT+0xa4>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	227f      	movs	r2, #127	@ 0x7f
 8006b14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b18:	e016      	b.n	8006b48 <UART_Start_Receive_IT+0xa4>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b22:	d10d      	bne.n	8006b40 <UART_Start_Receive_IT+0x9c>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <UART_Start_Receive_IT+0x92>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	227f      	movs	r2, #127	@ 0x7f
 8006b30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b34:	e008      	b.n	8006b48 <UART_Start_Receive_IT+0xa4>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	223f      	movs	r2, #63	@ 0x3f
 8006b3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006b3e:	e003      	b.n	8006b48 <UART_Start_Receive_IT+0xa4>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2222      	movs	r2, #34	@ 0x22
 8006b54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6a:	f043 0301 	orr.w	r3, r3, #1
 8006b6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3308      	adds	r3, #8
 8006b76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b78:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006b7a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b94:	d107      	bne.n	8006ba6 <UART_Start_Receive_IT+0x102>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d103      	bne.n	8006ba6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4a21      	ldr	r2, [pc, #132]	@ (8006c28 <UART_Start_Receive_IT+0x184>)
 8006ba2:	669a      	str	r2, [r3, #104]	@ 0x68
 8006ba4:	e002      	b.n	8006bac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4a20      	ldr	r2, [pc, #128]	@ (8006c2c <UART_Start_Receive_IT+0x188>)
 8006baa:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d019      	beq.n	8006be8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e6      	bne.n	8006bb4 <UART_Start_Receive_IT+0x110>
 8006be6:	e018      	b.n	8006c1a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f043 0320 	orr.w	r3, r3, #32
 8006bfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c06:	623b      	str	r3, [r7, #32]
 8006c08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	69f9      	ldr	r1, [r7, #28]
 8006c0c:	6a3a      	ldr	r2, [r7, #32]
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e6      	bne.n	8006be8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	375c      	adds	r7, #92	@ 0x5c
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	08006f35 	.word	0x08006f35
 8006c2c:	08006d79 	.word	0x08006d79

08006c30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b095      	sub	sp, #84	@ 0x54
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c56:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1e6      	bne.n	8006c38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3308      	adds	r3, #8
 8006c70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	f023 0301 	bic.w	r3, r3, #1
 8006c80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3308      	adds	r3, #8
 8006c88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e5      	bne.n	8006c6a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d118      	bne.n	8006cd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f023 0310 	bic.w	r3, r3, #16
 8006cba:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc4:	61bb      	str	r3, [r7, #24]
 8006cc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6979      	ldr	r1, [r7, #20]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e6      	bne.n	8006ca6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006cec:	bf00      	nop
 8006cee:	3754      	adds	r7, #84	@ 0x54
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f7ff fa3e 	bl	8006198 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d40:	61fb      	str	r3, [r7, #28]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	6979      	ldr	r1, [r7, #20]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	613b      	str	r3, [r7, #16]
   return(result);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e6      	bne.n	8006d2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2220      	movs	r2, #32
 8006d62:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fa0a 	bl	8006184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d70:	bf00      	nop
 8006d72:	3720      	adds	r7, #32
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b09c      	sub	sp, #112	@ 0x70
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d86:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d90:	2b22      	cmp	r3, #34	@ 0x22
 8006d92:	f040 80be 	bne.w	8006f12 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006d9c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006da0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006da4:	b2d9      	uxtb	r1, r3
 8006da6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006db0:	400a      	ands	r2, r1
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 80a3 	bne.w	8006f26 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006df0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e6      	bne.n	8006de0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3308      	adds	r3, #8
 8006e18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e24:	f023 0301 	bic.w	r3, r3, #1
 8006e28:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3308      	adds	r3, #8
 8006e30:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e32:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e5      	bne.n	8006e12 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a34      	ldr	r2, [pc, #208]	@ (8006f30 <UART_RxISR_8BIT+0x1b8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d01f      	beq.n	8006ea4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d018      	beq.n	8006ea4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e86:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e6      	bne.n	8006e72 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d12e      	bne.n	8006f0a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0310 	bic.w	r3, r3, #16
 8006ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	69b9      	ldr	r1, [r7, #24]
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e6      	bne.n	8006eb2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	f003 0310 	and.w	r3, r3, #16
 8006eee:	2b10      	cmp	r3, #16
 8006ef0:	d103      	bne.n	8006efa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2210      	movs	r2, #16
 8006ef8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7ff f952 	bl	80061ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f08:	e00d      	b.n	8006f26 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7fa f9be 	bl	800128c <HAL_UART_RxCpltCallback>
}
 8006f10:	e009      	b.n	8006f26 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	8b1b      	ldrh	r3, [r3, #24]
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0208 	orr.w	r2, r2, #8
 8006f22:	b292      	uxth	r2, r2
 8006f24:	831a      	strh	r2, [r3, #24]
}
 8006f26:	bf00      	nop
 8006f28:	3770      	adds	r7, #112	@ 0x70
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	40008000 	.word	0x40008000

08006f34 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b09c      	sub	sp, #112	@ 0x70
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f42:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f4c:	2b22      	cmp	r3, #34	@ 0x22
 8006f4e:	f040 80be 	bne.w	80070ce <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006f58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f60:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f62:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006f66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f76:	1c9a      	adds	r2, r3, #2
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f040 80a3 	bne.w	80070e2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fa4:	e853 3f00 	ldrex	r3, [r3]
 8006fa8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fba:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fbc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006fc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1e6      	bne.n	8006f9c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3308      	adds	r3, #8
 8006fd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe0:	f023 0301 	bic.w	r3, r3, #1
 8006fe4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006fee:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ff4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e5      	bne.n	8006fce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a34      	ldr	r2, [pc, #208]	@ (80070ec <UART_RxISR_16BIT+0x1b8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d01f      	beq.n	8007060 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d018      	beq.n	8007060 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	61fb      	str	r3, [r7, #28]
   return(result);
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007042:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800704c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800704e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e6      	bne.n	800702e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007064:	2b01      	cmp	r3, #1
 8007066:	d12e      	bne.n	80070c6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	60bb      	str	r3, [r7, #8]
   return(result);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f023 0310 	bic.w	r3, r3, #16
 8007082:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6979      	ldr	r1, [r7, #20]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	613b      	str	r3, [r7, #16]
   return(result);
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e6      	bne.n	800706e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	f003 0310 	and.w	r3, r3, #16
 80070aa:	2b10      	cmp	r3, #16
 80070ac:	d103      	bne.n	80070b6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2210      	movs	r2, #16
 80070b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff f874 	bl	80061ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070c4:	e00d      	b.n	80070e2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fa f8e0 	bl	800128c <HAL_UART_RxCpltCallback>
}
 80070cc:	e009      	b.n	80070e2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	8b1b      	ldrh	r3, [r3, #24]
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0208 	orr.w	r2, r2, #8
 80070de:	b292      	uxth	r2, r2
 80070e0:	831a      	strh	r2, [r3, #24]
}
 80070e2:	bf00      	nop
 80070e4:	3770      	adds	r7, #112	@ 0x70
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	40008000 	.word	0x40008000

080070f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007116:	2b84      	cmp	r3, #132	@ 0x84
 8007118:	d005      	beq.n	8007126 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800711a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	3303      	adds	r3, #3
 8007124:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007126:	68fb      	ldr	r3, [r7, #12]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007138:	f000 fe4e 	bl	8007dd8 <vTaskStartScheduler>
  
  return osOK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	bd80      	pop	{r7, pc}

08007142 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007144:	b089      	sub	sp, #36	@ 0x24
 8007146:	af04      	add	r7, sp, #16
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d020      	beq.n	8007196 <osThreadCreate+0x54>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01c      	beq.n	8007196 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685c      	ldr	r4, [r3, #4]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	691e      	ldr	r6, [r3, #16]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800716e:	4618      	mov	r0, r3
 8007170:	f7ff ffc8 	bl	8007104 <makeFreeRtosPriority>
 8007174:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800717e:	9202      	str	r2, [sp, #8]
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	9100      	str	r1, [sp, #0]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	4632      	mov	r2, r6
 8007188:	4629      	mov	r1, r5
 800718a:	4620      	mov	r0, r4
 800718c:	f000 fc3f 	bl	8007a0e <xTaskCreateStatic>
 8007190:	4603      	mov	r3, r0
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	e01c      	b.n	80071d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685c      	ldr	r4, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071a2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff ffaa 	bl	8007104 <makeFreeRtosPriority>
 80071b0:	4602      	mov	r2, r0
 80071b2:	f107 030c 	add.w	r3, r7, #12
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	9200      	str	r2, [sp, #0]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	4632      	mov	r2, r6
 80071be:	4629      	mov	r1, r5
 80071c0:	4620      	mov	r0, r4
 80071c2:	f000 fc84 	bl	8007ace <xTaskCreate>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d001      	beq.n	80071d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	e000      	b.n	80071d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80071d0:	68fb      	ldr	r3, [r7, #12]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <osDelay+0x16>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	e000      	b.n	80071f2 <osDelay+0x18>
 80071f0:	2301      	movs	r3, #1
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fdba 	bl	8007d6c <vTaskDelay>
  
  return osOK;
 80071f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f103 0208 	add.w	r2, r3, #8
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f04f 32ff 	mov.w	r2, #4294967295
 800721a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f103 0208 	add.w	r2, r3, #8
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f103 0208 	add.w	r2, r3, #8
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	601a      	str	r2, [r3, #0]
}
 8007298:	bf00      	nop
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	d103      	bne.n	80072c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	e00c      	b.n	80072de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3308      	adds	r3, #8
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	e002      	b.n	80072d2 <vListInsert+0x2e>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d2f6      	bcs.n	80072cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	601a      	str	r2, [r3, #0]
}
 800730a:	bf00      	nop
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6892      	ldr	r2, [r2, #8]
 800732c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6852      	ldr	r2, [r2, #4]
 8007336:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	429a      	cmp	r2, r3
 8007340:	d103      	bne.n	800734a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	1e5a      	subs	r2, r3, #1
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800736a:	b580      	push	{r7, lr}
 800736c:	b08c      	sub	sp, #48	@ 0x30
 800736e:	af02      	add	r7, sp, #8
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d111      	bne.n	80073a0 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800737c:	2301      	movs	r3, #1
 800737e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2b04      	cmp	r3, #4
 8007386:	d81d      	bhi.n	80073c4 <xStreamBufferGenericCreate+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738c:	f383 8811 	msr	BASEPRI, r3
 8007390:	f3bf 8f6f 	isb	sy
 8007394:	f3bf 8f4f 	dsb	sy
 8007398:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800739a:	bf00      	nop
 800739c:	bf00      	nop
 800739e:	e7fd      	b.n	800739c <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10b      	bne.n	80073c4 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	61bb      	str	r3, [r7, #24]
}
 80073be:	bf00      	nop
 80073c0:	bf00      	nop
 80073c2:	e7fd      	b.n	80073c0 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d90b      	bls.n	80073e4 <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	617b      	str	r3, [r7, #20]
}
 80073de:	bf00      	nop
 80073e0:	bf00      	nop
 80073e2:	e7fd      	b.n	80073e0 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80073ea:	2301      	movs	r3, #1
 80073ec:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3301      	adds	r3, #1
 80073f2:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3320      	adds	r3, #32
 80073f8:	4618      	mov	r0, r3
 80073fa:	f001 fcf7 	bl	8008dec <pvPortMalloc>
 80073fe:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	f103 0120 	add.w	r1, r3, #32
 800740c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	6a38      	ldr	r0, [r7, #32]
 8007418:	f000 fac5 	bl	80079a6 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800741c:	6a3b      	ldr	r3, [r7, #32]
	}
 800741e:	4618      	mov	r0, r3
 8007420:	3728      	adds	r7, #40	@ 0x28
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8007426:	b480      	push	{r7}
 8007428:	b087      	sub	sp, #28
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10b      	bne.n	8007450 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	60fb      	str	r3, [r7, #12]
}
 800744a:	bf00      	nop
 800744c:	bf00      	nop
 800744e:	e7fd      	b.n	800744c <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4413      	add	r3, r2
 800745a:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	3b01      	subs	r3, #1
 800746a:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	429a      	cmp	r2, r3
 8007474:	d304      	bcc.n	8007480 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8007480:	697b      	ldr	r3, [r7, #20]
}
 8007482:	4618      	mov	r0, r3
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b090      	sub	sp, #64	@ 0x40
 8007492:	af02      	add	r7, sp, #8
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10b      	bne.n	80074c2 <xStreamBufferSendFromISR+0x34>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	623b      	str	r3, [r7, #32]
}
 80074bc:	bf00      	nop
 80074be:	bf00      	nop
 80074c0:	e7fd      	b.n	80074be <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 80074c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10b      	bne.n	80074e0 <xStreamBufferSendFromISR+0x52>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	61fb      	str	r3, [r7, #28]
}
 80074da:	bf00      	nop
 80074dc:	bf00      	nop
 80074de:	e7fd      	b.n	80074dc <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	7f1b      	ldrb	r3, [r3, #28]
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80074ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ee:	3304      	adds	r3, #4
 80074f0:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80074f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074f4:	f7ff ff97 	bl	8007426 <xStreamBufferSpacesAvailable>
 80074f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80074fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007506:	f000 f835 	bl	8007574 <prvWriteMessageToBuffer>
 800750a:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750e:	2b00      	cmp	r3, #0
 8007510:	d02b      	beq.n	800756a <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8007512:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007514:	f000 fa27 	bl	8007966 <prvBytesInBuffer>
 8007518:	4602      	mov	r2, r0
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	429a      	cmp	r2, r3
 8007520:	d323      	bcc.n	800756a <xStreamBufferSendFromISR+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007522:	f3ef 8211 	mrs	r2, BASEPRI
 8007526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	61ba      	str	r2, [r7, #24]
 8007538:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800753a:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800753c:	627b      	str	r3, [r7, #36]	@ 0x24
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <xStreamBufferSendFromISR+0xd0>
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	6918      	ldr	r0, [r3, #16]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	2300      	movs	r3, #0
 8007550:	2200      	movs	r2, #0
 8007552:	2100      	movs	r1, #0
 8007554:	f001 f882 	bl	800865c <xTaskGenericNotifyFromISR>
 8007558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755a:	2200      	movs	r2, #0
 800755c:	611a      	str	r2, [r3, #16]
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007560:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007568:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 800756a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800756c:	4618      	mov	r0, r3
 800756e:	3738      	adds	r7, #56	@ 0x38
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
 8007580:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	e01d      	b.n	80075ca <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	7f1b      	ldrb	r3, [r3, #28]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d108      	bne.n	80075ac <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800759a:	2301      	movs	r3, #1
 800759c:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	4293      	cmp	r3, r2
 80075a4:	bf28      	it	cs
 80075a6:	4613      	movcs	r3, r2
 80075a8:	607b      	str	r3, [r7, #4]
 80075aa:	e00e      	b.n	80075ca <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d308      	bcc.n	80075c6 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80075b4:	2301      	movs	r3, #1
 80075b6:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80075b8:	1d3b      	adds	r3, r7, #4
 80075ba:	2204      	movs	r2, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f8df 	bl	8007782 <prvWriteBytesToBuffer>
 80075c4:	e001      	b.n	80075ca <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	461a      	mov	r2, r3
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f8d3 	bl	8007782 <prvWriteBytesToBuffer>
 80075dc:	6138      	str	r0, [r7, #16]
 80075de:	e001      	b.n	80075e4 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80075e4:	693b      	ldr	r3, [r7, #16]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b08e      	sub	sp, #56	@ 0x38
 80075f2:	af02      	add	r7, sp, #8
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8007600:	2300      	movs	r3, #0
 8007602:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10b      	bne.n	8007622 <xStreamBufferReceive+0x34>
	__asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	61fb      	str	r3, [r7, #28]
}
 800761c:	bf00      	nop
 800761e:	bf00      	nop
 8007620:	e7fd      	b.n	800761e <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10b      	bne.n	8007640 <xStreamBufferReceive+0x52>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	61bb      	str	r3, [r7, #24]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	7f1b      	ldrb	r3, [r3, #28]
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800764c:	2304      	movs	r3, #4
 800764e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007650:	e001      	b.n	8007656 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d035      	beq.n	80076c8 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800765c:	f001 faa4 	bl	8008ba8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8007660:	6a38      	ldr	r0, [r7, #32]
 8007662:	f000 f980 	bl	8007966 <prvBytesInBuffer>
 8007666:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8007668:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800766a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766c:	429a      	cmp	r2, r3
 800766e:	d817      	bhi.n	80076a0 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8007670:	2000      	movs	r0, #0
 8007672:	f001 f8d9 	bl	8008828 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <xStreamBufferReceive+0xa8>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	617b      	str	r3, [r7, #20]
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	e7fd      	b.n	8007692 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8007696:	f000 feaf 	bl	80083f8 <xTaskGetCurrentTaskHandle>
 800769a:	4602      	mov	r2, r0
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80076a0:	f001 fab4 	bl	8008c0c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80076a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d811      	bhi.n	80076d0 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2200      	movs	r2, #0
 80076b0:	2100      	movs	r1, #0
 80076b2:	2000      	movs	r0, #0
 80076b4:	f000 feb0 	bl	8008418 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	2200      	movs	r2, #0
 80076bc:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80076be:	6a38      	ldr	r0, [r7, #32]
 80076c0:	f000 f951 	bl	8007966 <prvBytesInBuffer>
 80076c4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80076c6:	e003      	b.n	80076d0 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80076c8:	6a38      	ldr	r0, [r7, #32]
 80076ca:	f000 f94c 	bl	8007966 <prvBytesInBuffer>
 80076ce:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80076d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d91d      	bls.n	8007714 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	6a38      	ldr	r0, [r7, #32]
 80076e4:	f000 f81b 	bl	800771e <prvReadMessageFromBuffer>
 80076e8:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80076ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d011      	beq.n	8007714 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80076f0:	f000 fbdc 	bl	8007eac <vTaskSuspendAll>
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d009      	beq.n	8007710 <xStreamBufferReceive+0x122>
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	6958      	ldr	r0, [r3, #20]
 8007700:	2300      	movs	r3, #0
 8007702:	2200      	movs	r2, #0
 8007704:	2100      	movs	r1, #0
 8007706:	f000 fee7 	bl	80084d8 <xTaskGenericNotify>
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	2200      	movs	r2, #0
 800770e:	615a      	str	r2, [r3, #20]
 8007710:	f000 fbda 	bl	8007ec8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8007714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007716:	4618      	mov	r0, r3
 8007718:	3730      	adds	r7, #48	@ 0x30
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b088      	sub	sp, #32
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	607a      	str	r2, [r7, #4]
 800772a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800772c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772e:	2b00      	cmp	r3, #0
 8007730:	d019      	beq.n	8007766 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8007738:	f107 0110 	add.w	r1, r7, #16
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f893 	bl	800786c <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	429a      	cmp	r2, r3
 8007758:	d907      	bls.n	800776a <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	e001      	b.n	800776a <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	69fa      	ldr	r2, [r7, #28]
 800776e:	68b9      	ldr	r1, [r7, #8]
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 f87b 	bl	800786c <prvReadBytesFromBuffer>
 8007776:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8007778:	697b      	ldr	r3, [r7, #20]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3720      	adds	r7, #32
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b08a      	sub	sp, #40	@ 0x28
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	61fb      	str	r3, [r7, #28]
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	4293      	cmp	r3, r2
 80077be:	bf28      	it	cs
 80077c0:	4613      	movcs	r3, r2
 80077c2:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80077c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	441a      	add	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d90b      	bls.n	80077ea <prvWriteBytesToBuffer+0x68>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	61bb      	str	r3, [r7, #24]
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	e7fd      	b.n	80077e6 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	4413      	add	r3, r2
 80077f2:	6a3a      	ldr	r2, [r7, #32]
 80077f4:	68b9      	ldr	r1, [r7, #8]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f003 fa4f 	bl	800ac9a <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	429a      	cmp	r2, r3
 8007802:	d91d      	bls.n	8007840 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	1ad2      	subs	r2, r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	429a      	cmp	r2, r3
 8007810:	d90b      	bls.n	800782a <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	617b      	str	r3, [r7, #20]
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	e7fd      	b.n	8007826 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6998      	ldr	r0, [r3, #24]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	18d1      	adds	r1, r2, r3
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	461a      	mov	r2, r3
 800783c:	f003 fa2d 	bl	800ac9a <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8007840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4413      	add	r3, r2
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800784e:	429a      	cmp	r2, r3
 8007850:	d304      	bcc.n	800785c <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007860:	605a      	str	r2, [r3, #4]

	return xCount;
 8007862:	687b      	ldr	r3, [r7, #4]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3728      	adds	r7, #40	@ 0x28
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	@ 0x28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	4293      	cmp	r3, r2
 8007880:	bf28      	it	cs
 8007882:	4613      	movcs	r3, r2
 8007884:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d067      	beq.n	800795c <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	6a3a      	ldr	r2, [r7, #32]
 800789c:	4293      	cmp	r3, r2
 800789e:	bf28      	it	cs
 80078a0:	4613      	movcs	r3, r2
 80078a2:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80078a4:	69fa      	ldr	r2, [r7, #28]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d90b      	bls.n	80078c4 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	61bb      	str	r3, [r7, #24]
}
 80078be:	bf00      	nop
 80078c0:	bf00      	nop
 80078c2:	e7fd      	b.n	80078c0 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80078c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	441a      	add	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d90b      	bls.n	80078ea <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	617b      	str	r3, [r7, #20]
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	e7fd      	b.n	80078e6 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	4413      	add	r3, r2
 80078f2:	69fa      	ldr	r2, [r7, #28]
 80078f4:	4619      	mov	r1, r3
 80078f6:	68b8      	ldr	r0, [r7, #8]
 80078f8:	f003 f9cf 	bl	800ac9a <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80078fc:	6a3a      	ldr	r2, [r7, #32]
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	429a      	cmp	r2, r3
 8007902:	d91a      	bls.n	800793a <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8007904:	6a3a      	ldr	r2, [r7, #32]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d90b      	bls.n	8007924 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	613b      	str	r3, [r7, #16]
}
 800791e:	bf00      	nop
 8007920:	bf00      	nop
 8007922:	e7fd      	b.n	8007920 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	18d0      	adds	r0, r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6999      	ldr	r1, [r3, #24]
 800792e:	6a3a      	ldr	r2, [r7, #32]
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	461a      	mov	r2, r3
 8007936:	f003 f9b0 	bl	800ac9a <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800793a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	4413      	add	r3, r2
 8007940:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007948:	429a      	cmp	r2, r3
 800794a:	d304      	bcc.n	8007956 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800795a:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800795c:	6a3b      	ldr	r3, [r7, #32]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3728      	adds	r7, #40	@ 0x28
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8007966:	b480      	push	{r7}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	4413      	add	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	429a      	cmp	r2, r3
 800798c:	d304      	bcc.n	8007998 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8007998:	68fb      	ldr	r3, [r7, #12]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b086      	sub	sp, #24
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
 80079b2:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80079b4:	2355      	movs	r3, #85	@ 0x55
 80079b6:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6979      	ldr	r1, [r7, #20]
 80079bc:	68b8      	ldr	r0, [r7, #8]
 80079be:	f003 f820 	bl	800aa02 <memset>
 80079c2:	4602      	mov	r2, r0
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00b      	beq.n	80079e2 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	613b      	str	r3, [r7, #16]
}
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	e7fd      	b.n	80079de <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80079e2:	2220      	movs	r2, #32
 80079e4:	2100      	movs	r1, #0
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f003 f80b 	bl	800aa02 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007a04:	771a      	strb	r2, [r3, #28]
}
 8007a06:	bf00      	nop
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b08e      	sub	sp, #56	@ 0x38
 8007a12:	af04      	add	r7, sp, #16
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	607a      	str	r2, [r7, #4]
 8007a1a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10b      	bne.n	8007a3a <xTaskCreateStatic+0x2c>
	__asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	623b      	str	r3, [r7, #32]
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	e7fd      	b.n	8007a36 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10b      	bne.n	8007a58 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	61fb      	str	r3, [r7, #28]
}
 8007a52:	bf00      	nop
 8007a54:	bf00      	nop
 8007a56:	e7fd      	b.n	8007a54 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a58:	23a0      	movs	r3, #160	@ 0xa0
 8007a5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2ba0      	cmp	r3, #160	@ 0xa0
 8007a60:	d00b      	beq.n	8007a7a <xTaskCreateStatic+0x6c>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	61bb      	str	r3, [r7, #24]
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	e7fd      	b.n	8007a76 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d01e      	beq.n	8007ac0 <xTaskCreateStatic+0xb2>
 8007a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01b      	beq.n	8007ac0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a90:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a94:	2202      	movs	r2, #2
 8007a96:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9303      	str	r3, [sp, #12]
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	9302      	str	r3, [sp, #8]
 8007aa2:	f107 0314 	add.w	r3, r7, #20
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	68b9      	ldr	r1, [r7, #8]
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 f850 	bl	8007b58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ab8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007aba:	f000 f8ed 	bl	8007c98 <prvAddNewTaskToReadyList>
 8007abe:	e001      	b.n	8007ac4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ac4:	697b      	ldr	r3, [r7, #20]
	}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3728      	adds	r7, #40	@ 0x28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b08c      	sub	sp, #48	@ 0x30
 8007ad2:	af04      	add	r7, sp, #16
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	603b      	str	r3, [r7, #0]
 8007ada:	4613      	mov	r3, r2
 8007adc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ade:	88fb      	ldrh	r3, [r7, #6]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f001 f982 	bl	8008dec <pvPortMalloc>
 8007ae8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00e      	beq.n	8007b0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007af0:	20a0      	movs	r0, #160	@ 0xa0
 8007af2:	f001 f97b 	bl	8008dec <pvPortMalloc>
 8007af6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b04:	e005      	b.n	8007b12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b06:	6978      	ldr	r0, [r7, #20]
 8007b08:	f001 fa3e 	bl	8008f88 <vPortFree>
 8007b0c:	e001      	b.n	8007b12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d017      	beq.n	8007b48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b20:	88fa      	ldrh	r2, [r7, #6]
 8007b22:	2300      	movs	r3, #0
 8007b24:	9303      	str	r3, [sp, #12]
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	9302      	str	r3, [sp, #8]
 8007b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 f80e 	bl	8007b58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b3c:	69f8      	ldr	r0, [r7, #28]
 8007b3e:	f000 f8ab 	bl	8007c98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b42:	2301      	movs	r3, #1
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	e002      	b.n	8007b4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b48:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
	}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3720      	adds	r7, #32
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b088      	sub	sp, #32
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007b70:	3b01      	subs	r3, #1
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	f023 0307 	bic.w	r3, r3, #7
 8007b7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00b      	beq.n	8007ba2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	617b      	str	r3, [r7, #20]
}
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	e7fd      	b.n	8007b9e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01f      	beq.n	8007be8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	e012      	b.n	8007bd4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	7819      	ldrb	r1, [r3, #0]
 8007bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	4413      	add	r3, r2
 8007bbc:	3334      	adds	r3, #52	@ 0x34
 8007bbe:	460a      	mov	r2, r1
 8007bc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d006      	beq.n	8007bdc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	61fb      	str	r3, [r7, #28]
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	2b0f      	cmp	r3, #15
 8007bd8:	d9e9      	bls.n	8007bae <prvInitialiseNewTask+0x56>
 8007bda:	e000      	b.n	8007bde <prvInitialiseNewTask+0x86>
			{
				break;
 8007bdc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007be6:	e003      	b.n	8007bf0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf2:	2b06      	cmp	r3, #6
 8007bf4:	d901      	bls.n	8007bfa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007bf6:	2306      	movs	r3, #6
 8007bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c04:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c08:	2200      	movs	r2, #0
 8007c0a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	3304      	adds	r3, #4
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7ff fb16 	bl	8007242 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c18:	3318      	adds	r3, #24
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff fb11 	bl	8007242 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c28:	f1c3 0207 	rsb	r2, r3, #7
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c48:	334c      	adds	r3, #76	@ 0x4c
 8007c4a:	224c      	movs	r2, #76	@ 0x4c
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f002 fed7 	bl	800aa02 <memset>
 8007c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c56:	4a0d      	ldr	r2, [pc, #52]	@ (8007c8c <prvInitialiseNewTask+0x134>)
 8007c58:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5c:	4a0c      	ldr	r2, [pc, #48]	@ (8007c90 <prvInitialiseNewTask+0x138>)
 8007c5e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c62:	4a0c      	ldr	r2, [pc, #48]	@ (8007c94 <prvInitialiseNewTask+0x13c>)
 8007c64:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	68f9      	ldr	r1, [r7, #12]
 8007c6a:	69b8      	ldr	r0, [r7, #24]
 8007c6c:	f000 fe68 	bl	8008940 <pxPortInitialiseStack>
 8007c70:	4602      	mov	r2, r0
 8007c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c82:	bf00      	nop
 8007c84:	3720      	adds	r7, #32
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20005a28 	.word	0x20005a28
 8007c90:	20005a90 	.word	0x20005a90
 8007c94:	20005af8 	.word	0x20005af8

08007c98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ca0:	f000 ff82 	bl	8008ba8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8007d50 <prvAddNewTaskToReadyList+0xb8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	4a29      	ldr	r2, [pc, #164]	@ (8007d50 <prvAddNewTaskToReadyList+0xb8>)
 8007cac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cae:	4b29      	ldr	r3, [pc, #164]	@ (8007d54 <prvAddNewTaskToReadyList+0xbc>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d109      	bne.n	8007cca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007cb6:	4a27      	ldr	r2, [pc, #156]	@ (8007d54 <prvAddNewTaskToReadyList+0xbc>)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007cbc:	4b24      	ldr	r3, [pc, #144]	@ (8007d50 <prvAddNewTaskToReadyList+0xb8>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d110      	bne.n	8007ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007cc4:	f000 fad4 	bl	8008270 <prvInitialiseTaskLists>
 8007cc8:	e00d      	b.n	8007ce6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007cca:	4b23      	ldr	r3, [pc, #140]	@ (8007d58 <prvAddNewTaskToReadyList+0xc0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d109      	bne.n	8007ce6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007cd2:	4b20      	ldr	r3, [pc, #128]	@ (8007d54 <prvAddNewTaskToReadyList+0xbc>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d802      	bhi.n	8007ce6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d54 <prvAddNewTaskToReadyList+0xbc>)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d5c <prvAddNewTaskToReadyList+0xc4>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3301      	adds	r3, #1
 8007cec:	4a1b      	ldr	r2, [pc, #108]	@ (8007d5c <prvAddNewTaskToReadyList+0xc4>)
 8007cee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	409a      	lsls	r2, r3
 8007cf8:	4b19      	ldr	r3, [pc, #100]	@ (8007d60 <prvAddNewTaskToReadyList+0xc8>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	4a18      	ldr	r2, [pc, #96]	@ (8007d60 <prvAddNewTaskToReadyList+0xc8>)
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4a15      	ldr	r2, [pc, #84]	@ (8007d64 <prvAddNewTaskToReadyList+0xcc>)
 8007d10:	441a      	add	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	3304      	adds	r3, #4
 8007d16:	4619      	mov	r1, r3
 8007d18:	4610      	mov	r0, r2
 8007d1a:	f7ff fa9f 	bl	800725c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d1e:	f000 ff75 	bl	8008c0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d22:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <prvAddNewTaskToReadyList+0xc0>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00e      	beq.n	8007d48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d54 <prvAddNewTaskToReadyList+0xbc>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d207      	bcs.n	8007d48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d38:	4b0b      	ldr	r3, [pc, #44]	@ (8007d68 <prvAddNewTaskToReadyList+0xd0>)
 8007d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000bb4 	.word	0x20000bb4
 8007d54:	20000ab4 	.word	0x20000ab4
 8007d58:	20000bc0 	.word	0x20000bc0
 8007d5c:	20000bd0 	.word	0x20000bd0
 8007d60:	20000bbc 	.word	0x20000bbc
 8007d64:	20000ab8 	.word	0x20000ab8
 8007d68:	e000ed04 	.word	0xe000ed04

08007d6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d018      	beq.n	8007db0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d7e:	4b14      	ldr	r3, [pc, #80]	@ (8007dd0 <vTaskDelay+0x64>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00b      	beq.n	8007d9e <vTaskDelay+0x32>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	60bb      	str	r3, [r7, #8]
}
 8007d98:	bf00      	nop
 8007d9a:	bf00      	nop
 8007d9c:	e7fd      	b.n	8007d9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d9e:	f000 f885 	bl	8007eac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007da2:	2100      	movs	r1, #0
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fd65 	bl	8008874 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007daa:	f000 f88d 	bl	8007ec8 <xTaskResumeAll>
 8007dae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d107      	bne.n	8007dc6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007db6:	4b07      	ldr	r3, [pc, #28]	@ (8007dd4 <vTaskDelay+0x68>)
 8007db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007dc6:	bf00      	nop
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000bdc 	.word	0x20000bdc
 8007dd4:	e000ed04 	.word	0xe000ed04

08007dd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08a      	sub	sp, #40	@ 0x28
 8007ddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007de6:	463a      	mov	r2, r7
 8007de8:	1d39      	adds	r1, r7, #4
 8007dea:	f107 0308 	add.w	r3, r7, #8
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7f9 f926 	bl	8001040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	9202      	str	r2, [sp, #8]
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	2300      	movs	r3, #0
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	2300      	movs	r3, #0
 8007e04:	460a      	mov	r2, r1
 8007e06:	4921      	ldr	r1, [pc, #132]	@ (8007e8c <vTaskStartScheduler+0xb4>)
 8007e08:	4821      	ldr	r0, [pc, #132]	@ (8007e90 <vTaskStartScheduler+0xb8>)
 8007e0a:	f7ff fe00 	bl	8007a0e <xTaskCreateStatic>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	4a20      	ldr	r2, [pc, #128]	@ (8007e94 <vTaskStartScheduler+0xbc>)
 8007e12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e14:	4b1f      	ldr	r3, [pc, #124]	@ (8007e94 <vTaskStartScheduler+0xbc>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	e001      	b.n	8007e26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d11b      	bne.n	8007e64 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	613b      	str	r3, [r7, #16]
}
 8007e3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e40:	4b15      	ldr	r3, [pc, #84]	@ (8007e98 <vTaskStartScheduler+0xc0>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	334c      	adds	r3, #76	@ 0x4c
 8007e46:	4a15      	ldr	r2, [pc, #84]	@ (8007e9c <vTaskStartScheduler+0xc4>)
 8007e48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e4a:	4b15      	ldr	r3, [pc, #84]	@ (8007ea0 <vTaskStartScheduler+0xc8>)
 8007e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e52:	4b14      	ldr	r3, [pc, #80]	@ (8007ea4 <vTaskStartScheduler+0xcc>)
 8007e54:	2201      	movs	r2, #1
 8007e56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e58:	4b13      	ldr	r3, [pc, #76]	@ (8007ea8 <vTaskStartScheduler+0xd0>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e5e:	f000 fdff 	bl	8008a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e62:	e00f      	b.n	8007e84 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6a:	d10b      	bne.n	8007e84 <vTaskStartScheduler+0xac>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	60fb      	str	r3, [r7, #12]
}
 8007e7e:	bf00      	nop
 8007e80:	bf00      	nop
 8007e82:	e7fd      	b.n	8007e80 <vTaskStartScheduler+0xa8>
}
 8007e84:	bf00      	nop
 8007e86:	3718      	adds	r7, #24
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	0800ec9c 	.word	0x0800ec9c
 8007e90:	08008241 	.word	0x08008241
 8007e94:	20000bd8 	.word	0x20000bd8
 8007e98:	20000ab4 	.word	0x20000ab4
 8007e9c:	20000430 	.word	0x20000430
 8007ea0:	20000bd4 	.word	0x20000bd4
 8007ea4:	20000bc0 	.word	0x20000bc0
 8007ea8:	20000bb8 	.word	0x20000bb8

08007eac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007eb0:	4b04      	ldr	r3, [pc, #16]	@ (8007ec4 <vTaskSuspendAll+0x18>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	4a03      	ldr	r2, [pc, #12]	@ (8007ec4 <vTaskSuspendAll+0x18>)
 8007eb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007eba:	bf00      	nop
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	20000bdc 	.word	0x20000bdc

08007ec8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ed6:	4b42      	ldr	r3, [pc, #264]	@ (8007fe0 <xTaskResumeAll+0x118>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10b      	bne.n	8007ef6 <xTaskResumeAll+0x2e>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	603b      	str	r3, [r7, #0]
}
 8007ef0:	bf00      	nop
 8007ef2:	bf00      	nop
 8007ef4:	e7fd      	b.n	8007ef2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ef6:	f000 fe57 	bl	8008ba8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007efa:	4b39      	ldr	r3, [pc, #228]	@ (8007fe0 <xTaskResumeAll+0x118>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4a37      	ldr	r2, [pc, #220]	@ (8007fe0 <xTaskResumeAll+0x118>)
 8007f02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f04:	4b36      	ldr	r3, [pc, #216]	@ (8007fe0 <xTaskResumeAll+0x118>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d161      	bne.n	8007fd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f0c:	4b35      	ldr	r3, [pc, #212]	@ (8007fe4 <xTaskResumeAll+0x11c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d05d      	beq.n	8007fd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f14:	e02e      	b.n	8007f74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f16:	4b34      	ldr	r3, [pc, #208]	@ (8007fe8 <xTaskResumeAll+0x120>)
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3318      	adds	r3, #24
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff f9f7 	bl	8007316 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff f9f2 	bl	8007316 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f36:	2201      	movs	r2, #1
 8007f38:	409a      	lsls	r2, r3
 8007f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8007fec <xTaskResumeAll+0x124>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	4a2a      	ldr	r2, [pc, #168]	@ (8007fec <xTaskResumeAll+0x124>)
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f48:	4613      	mov	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4a27      	ldr	r2, [pc, #156]	@ (8007ff0 <xTaskResumeAll+0x128>)
 8007f52:	441a      	add	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3304      	adds	r3, #4
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f7ff f97e 	bl	800725c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f64:	4b23      	ldr	r3, [pc, #140]	@ (8007ff4 <xTaskResumeAll+0x12c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d302      	bcc.n	8007f74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007f6e:	4b22      	ldr	r3, [pc, #136]	@ (8007ff8 <xTaskResumeAll+0x130>)
 8007f70:	2201      	movs	r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f74:	4b1c      	ldr	r3, [pc, #112]	@ (8007fe8 <xTaskResumeAll+0x120>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1cc      	bne.n	8007f16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f82:	f000 fa19 	bl	80083b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f86:	4b1d      	ldr	r3, [pc, #116]	@ (8007ffc <xTaskResumeAll+0x134>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d010      	beq.n	8007fb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f92:	f000 f837 	bl	8008004 <xTaskIncrementTick>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007f9c:	4b16      	ldr	r3, [pc, #88]	@ (8007ff8 <xTaskResumeAll+0x130>)
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1f1      	bne.n	8007f92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007fae:	4b13      	ldr	r3, [pc, #76]	@ (8007ffc <xTaskResumeAll+0x134>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007fb4:	4b10      	ldr	r3, [pc, #64]	@ (8007ff8 <xTaskResumeAll+0x130>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d009      	beq.n	8007fd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8008000 <xTaskResumeAll+0x138>)
 8007fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fd0:	f000 fe1c 	bl	8008c0c <vPortExitCritical>

	return xAlreadyYielded;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000bdc 	.word	0x20000bdc
 8007fe4:	20000bb4 	.word	0x20000bb4
 8007fe8:	20000b74 	.word	0x20000b74
 8007fec:	20000bbc 	.word	0x20000bbc
 8007ff0:	20000ab8 	.word	0x20000ab8
 8007ff4:	20000ab4 	.word	0x20000ab4
 8007ff8:	20000bc8 	.word	0x20000bc8
 8007ffc:	20000bc4 	.word	0x20000bc4
 8008000:	e000ed04 	.word	0xe000ed04

08008004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800800a:	2300      	movs	r3, #0
 800800c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800800e:	4b4f      	ldr	r3, [pc, #316]	@ (800814c <xTaskIncrementTick+0x148>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	f040 808f 	bne.w	8008136 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008018:	4b4d      	ldr	r3, [pc, #308]	@ (8008150 <xTaskIncrementTick+0x14c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3301      	adds	r3, #1
 800801e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008020:	4a4b      	ldr	r2, [pc, #300]	@ (8008150 <xTaskIncrementTick+0x14c>)
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d121      	bne.n	8008070 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800802c:	4b49      	ldr	r3, [pc, #292]	@ (8008154 <xTaskIncrementTick+0x150>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00b      	beq.n	800804e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	603b      	str	r3, [r7, #0]
}
 8008048:	bf00      	nop
 800804a:	bf00      	nop
 800804c:	e7fd      	b.n	800804a <xTaskIncrementTick+0x46>
 800804e:	4b41      	ldr	r3, [pc, #260]	@ (8008154 <xTaskIncrementTick+0x150>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	4b40      	ldr	r3, [pc, #256]	@ (8008158 <xTaskIncrementTick+0x154>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a3e      	ldr	r2, [pc, #248]	@ (8008154 <xTaskIncrementTick+0x150>)
 800805a:	6013      	str	r3, [r2, #0]
 800805c:	4a3e      	ldr	r2, [pc, #248]	@ (8008158 <xTaskIncrementTick+0x154>)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6013      	str	r3, [r2, #0]
 8008062:	4b3e      	ldr	r3, [pc, #248]	@ (800815c <xTaskIncrementTick+0x158>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3301      	adds	r3, #1
 8008068:	4a3c      	ldr	r2, [pc, #240]	@ (800815c <xTaskIncrementTick+0x158>)
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	f000 f9a4 	bl	80083b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008070:	4b3b      	ldr	r3, [pc, #236]	@ (8008160 <xTaskIncrementTick+0x15c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	429a      	cmp	r2, r3
 8008078:	d348      	bcc.n	800810c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800807a:	4b36      	ldr	r3, [pc, #216]	@ (8008154 <xTaskIncrementTick+0x150>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d104      	bne.n	800808e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008084:	4b36      	ldr	r3, [pc, #216]	@ (8008160 <xTaskIncrementTick+0x15c>)
 8008086:	f04f 32ff 	mov.w	r2, #4294967295
 800808a:	601a      	str	r2, [r3, #0]
					break;
 800808c:	e03e      	b.n	800810c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800808e:	4b31      	ldr	r3, [pc, #196]	@ (8008154 <xTaskIncrementTick+0x150>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d203      	bcs.n	80080ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80080a6:	4a2e      	ldr	r2, [pc, #184]	@ (8008160 <xTaskIncrementTick+0x15c>)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80080ac:	e02e      	b.n	800810c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	3304      	adds	r3, #4
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff f92f 	bl	8007316 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d004      	beq.n	80080ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	3318      	adds	r3, #24
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff f926 	bl	8007316 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ce:	2201      	movs	r2, #1
 80080d0:	409a      	lsls	r2, r3
 80080d2:	4b24      	ldr	r3, [pc, #144]	@ (8008164 <xTaskIncrementTick+0x160>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	4a22      	ldr	r2, [pc, #136]	@ (8008164 <xTaskIncrementTick+0x160>)
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4a1f      	ldr	r2, [pc, #124]	@ (8008168 <xTaskIncrementTick+0x164>)
 80080ea:	441a      	add	r2, r3
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	3304      	adds	r3, #4
 80080f0:	4619      	mov	r1, r3
 80080f2:	4610      	mov	r0, r2
 80080f4:	f7ff f8b2 	bl	800725c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080fc:	4b1b      	ldr	r3, [pc, #108]	@ (800816c <xTaskIncrementTick+0x168>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008102:	429a      	cmp	r2, r3
 8008104:	d3b9      	bcc.n	800807a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008106:	2301      	movs	r3, #1
 8008108:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800810a:	e7b6      	b.n	800807a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800810c:	4b17      	ldr	r3, [pc, #92]	@ (800816c <xTaskIncrementTick+0x168>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008112:	4915      	ldr	r1, [pc, #84]	@ (8008168 <xTaskIncrementTick+0x164>)
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	440b      	add	r3, r1
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d901      	bls.n	8008128 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008124:	2301      	movs	r3, #1
 8008126:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008128:	4b11      	ldr	r3, [pc, #68]	@ (8008170 <xTaskIncrementTick+0x16c>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008130:	2301      	movs	r3, #1
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e004      	b.n	8008140 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008136:	4b0f      	ldr	r3, [pc, #60]	@ (8008174 <xTaskIncrementTick+0x170>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3301      	adds	r3, #1
 800813c:	4a0d      	ldr	r2, [pc, #52]	@ (8008174 <xTaskIncrementTick+0x170>)
 800813e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008140:	697b      	ldr	r3, [r7, #20]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	20000bdc 	.word	0x20000bdc
 8008150:	20000bb8 	.word	0x20000bb8
 8008154:	20000b6c 	.word	0x20000b6c
 8008158:	20000b70 	.word	0x20000b70
 800815c:	20000bcc 	.word	0x20000bcc
 8008160:	20000bd4 	.word	0x20000bd4
 8008164:	20000bbc 	.word	0x20000bbc
 8008168:	20000ab8 	.word	0x20000ab8
 800816c:	20000ab4 	.word	0x20000ab4
 8008170:	20000bc8 	.word	0x20000bc8
 8008174:	20000bc4 	.word	0x20000bc4

08008178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800817e:	4b2a      	ldr	r3, [pc, #168]	@ (8008228 <vTaskSwitchContext+0xb0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008186:	4b29      	ldr	r3, [pc, #164]	@ (800822c <vTaskSwitchContext+0xb4>)
 8008188:	2201      	movs	r2, #1
 800818a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800818c:	e045      	b.n	800821a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800818e:	4b27      	ldr	r3, [pc, #156]	@ (800822c <vTaskSwitchContext+0xb4>)
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008194:	4b26      	ldr	r3, [pc, #152]	@ (8008230 <vTaskSwitchContext+0xb8>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	fab3 f383 	clz	r3, r3
 80081a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80081a2:	7afb      	ldrb	r3, [r7, #11]
 80081a4:	f1c3 031f 	rsb	r3, r3, #31
 80081a8:	617b      	str	r3, [r7, #20]
 80081aa:	4922      	ldr	r1, [pc, #136]	@ (8008234 <vTaskSwitchContext+0xbc>)
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	4613      	mov	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	440b      	add	r3, r1
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10b      	bne.n	80081d6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	607b      	str	r3, [r7, #4]
}
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	e7fd      	b.n	80081d2 <vTaskSwitchContext+0x5a>
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4a14      	ldr	r2, [pc, #80]	@ (8008234 <vTaskSwitchContext+0xbc>)
 80081e2:	4413      	add	r3, r2
 80081e4:	613b      	str	r3, [r7, #16]
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	605a      	str	r2, [r3, #4]
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	3308      	adds	r3, #8
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d104      	bne.n	8008206 <vTaskSwitchContext+0x8e>
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	605a      	str	r2, [r3, #4]
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	4a0a      	ldr	r2, [pc, #40]	@ (8008238 <vTaskSwitchContext+0xc0>)
 800820e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008210:	4b09      	ldr	r3, [pc, #36]	@ (8008238 <vTaskSwitchContext+0xc0>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	334c      	adds	r3, #76	@ 0x4c
 8008216:	4a09      	ldr	r2, [pc, #36]	@ (800823c <vTaskSwitchContext+0xc4>)
 8008218:	6013      	str	r3, [r2, #0]
}
 800821a:	bf00      	nop
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	20000bdc 	.word	0x20000bdc
 800822c:	20000bc8 	.word	0x20000bc8
 8008230:	20000bbc 	.word	0x20000bbc
 8008234:	20000ab8 	.word	0x20000ab8
 8008238:	20000ab4 	.word	0x20000ab4
 800823c:	20000430 	.word	0x20000430

08008240 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008248:	f000 f852 	bl	80082f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800824c:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <prvIdleTask+0x28>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d9f9      	bls.n	8008248 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008254:	4b05      	ldr	r3, [pc, #20]	@ (800826c <prvIdleTask+0x2c>)
 8008256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008264:	e7f0      	b.n	8008248 <prvIdleTask+0x8>
 8008266:	bf00      	nop
 8008268:	20000ab8 	.word	0x20000ab8
 800826c:	e000ed04 	.word	0xe000ed04

08008270 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008276:	2300      	movs	r3, #0
 8008278:	607b      	str	r3, [r7, #4]
 800827a:	e00c      	b.n	8008296 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4a12      	ldr	r2, [pc, #72]	@ (80082d0 <prvInitialiseTaskLists+0x60>)
 8008288:	4413      	add	r3, r2
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe ffb9 	bl	8007202 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3301      	adds	r3, #1
 8008294:	607b      	str	r3, [r7, #4]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b06      	cmp	r3, #6
 800829a:	d9ef      	bls.n	800827c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800829c:	480d      	ldr	r0, [pc, #52]	@ (80082d4 <prvInitialiseTaskLists+0x64>)
 800829e:	f7fe ffb0 	bl	8007202 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082a2:	480d      	ldr	r0, [pc, #52]	@ (80082d8 <prvInitialiseTaskLists+0x68>)
 80082a4:	f7fe ffad 	bl	8007202 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082a8:	480c      	ldr	r0, [pc, #48]	@ (80082dc <prvInitialiseTaskLists+0x6c>)
 80082aa:	f7fe ffaa 	bl	8007202 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082ae:	480c      	ldr	r0, [pc, #48]	@ (80082e0 <prvInitialiseTaskLists+0x70>)
 80082b0:	f7fe ffa7 	bl	8007202 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082b4:	480b      	ldr	r0, [pc, #44]	@ (80082e4 <prvInitialiseTaskLists+0x74>)
 80082b6:	f7fe ffa4 	bl	8007202 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082ba:	4b0b      	ldr	r3, [pc, #44]	@ (80082e8 <prvInitialiseTaskLists+0x78>)
 80082bc:	4a05      	ldr	r2, [pc, #20]	@ (80082d4 <prvInitialiseTaskLists+0x64>)
 80082be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082c0:	4b0a      	ldr	r3, [pc, #40]	@ (80082ec <prvInitialiseTaskLists+0x7c>)
 80082c2:	4a05      	ldr	r2, [pc, #20]	@ (80082d8 <prvInitialiseTaskLists+0x68>)
 80082c4:	601a      	str	r2, [r3, #0]
}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	20000ab8 	.word	0x20000ab8
 80082d4:	20000b44 	.word	0x20000b44
 80082d8:	20000b58 	.word	0x20000b58
 80082dc:	20000b74 	.word	0x20000b74
 80082e0:	20000b88 	.word	0x20000b88
 80082e4:	20000ba0 	.word	0x20000ba0
 80082e8:	20000b6c 	.word	0x20000b6c
 80082ec:	20000b70 	.word	0x20000b70

080082f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082f6:	e019      	b.n	800832c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082f8:	f000 fc56 	bl	8008ba8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082fc:	4b10      	ldr	r3, [pc, #64]	@ (8008340 <prvCheckTasksWaitingTermination+0x50>)
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3304      	adds	r3, #4
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff f804 	bl	8007316 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800830e:	4b0d      	ldr	r3, [pc, #52]	@ (8008344 <prvCheckTasksWaitingTermination+0x54>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3b01      	subs	r3, #1
 8008314:	4a0b      	ldr	r2, [pc, #44]	@ (8008344 <prvCheckTasksWaitingTermination+0x54>)
 8008316:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008318:	4b0b      	ldr	r3, [pc, #44]	@ (8008348 <prvCheckTasksWaitingTermination+0x58>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	3b01      	subs	r3, #1
 800831e:	4a0a      	ldr	r2, [pc, #40]	@ (8008348 <prvCheckTasksWaitingTermination+0x58>)
 8008320:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008322:	f000 fc73 	bl	8008c0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f810 	bl	800834c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800832c:	4b06      	ldr	r3, [pc, #24]	@ (8008348 <prvCheckTasksWaitingTermination+0x58>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1e1      	bne.n	80082f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	20000b88 	.word	0x20000b88
 8008344:	20000bb4 	.word	0x20000bb4
 8008348:	20000b9c 	.word	0x20000b9c

0800834c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	334c      	adds	r3, #76	@ 0x4c
 8008358:	4618      	mov	r0, r3
 800835a:	f002 fbdd 	bl	800ab18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008364:	2b00      	cmp	r3, #0
 8008366:	d108      	bne.n	800837a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fe0b 	bl	8008f88 <vPortFree>
				vPortFree( pxTCB );
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fe08 	bl	8008f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008378:	e019      	b.n	80083ae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008380:	2b01      	cmp	r3, #1
 8008382:	d103      	bne.n	800838c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fdff 	bl	8008f88 <vPortFree>
	}
 800838a:	e010      	b.n	80083ae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008392:	2b02      	cmp	r3, #2
 8008394:	d00b      	beq.n	80083ae <prvDeleteTCB+0x62>
	__asm volatile
 8008396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	60fb      	str	r3, [r7, #12]
}
 80083a8:	bf00      	nop
 80083aa:	bf00      	nop
 80083ac:	e7fd      	b.n	80083aa <prvDeleteTCB+0x5e>
	}
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
	...

080083b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083be:	4b0c      	ldr	r3, [pc, #48]	@ (80083f0 <prvResetNextTaskUnblockTime+0x38>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d104      	bne.n	80083d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083c8:	4b0a      	ldr	r3, [pc, #40]	@ (80083f4 <prvResetNextTaskUnblockTime+0x3c>)
 80083ca:	f04f 32ff 	mov.w	r2, #4294967295
 80083ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083d0:	e008      	b.n	80083e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d2:	4b07      	ldr	r3, [pc, #28]	@ (80083f0 <prvResetNextTaskUnblockTime+0x38>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	4a04      	ldr	r2, [pc, #16]	@ (80083f4 <prvResetNextTaskUnblockTime+0x3c>)
 80083e2:	6013      	str	r3, [r2, #0]
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	20000b6c 	.word	0x20000b6c
 80083f4:	20000bd4 	.word	0x20000bd4

080083f8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80083fe:	4b05      	ldr	r3, [pc, #20]	@ (8008414 <xTaskGetCurrentTaskHandle+0x1c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008404:	687b      	ldr	r3, [r7, #4]
	}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	20000ab4 	.word	0x20000ab4

08008418 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
 8008424:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008426:	f000 fbbf 	bl	8008ba8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800842a:	4b29      	ldr	r3, [pc, #164]	@ (80084d0 <xTaskNotifyWait+0xb8>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b02      	cmp	r3, #2
 8008436:	d01c      	beq.n	8008472 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008438:	4b25      	ldr	r3, [pc, #148]	@ (80084d0 <xTaskNotifyWait+0xb8>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	43d2      	mvns	r2, r2
 8008444:	400a      	ands	r2, r1
 8008446:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800844a:	4b21      	ldr	r3, [pc, #132]	@ (80084d0 <xTaskNotifyWait+0xb8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00b      	beq.n	8008472 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800845a:	2101      	movs	r1, #1
 800845c:	6838      	ldr	r0, [r7, #0]
 800845e:	f000 fa09 	bl	8008874 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008462:	4b1c      	ldr	r3, [pc, #112]	@ (80084d4 <xTaskNotifyWait+0xbc>)
 8008464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008472:	f000 fbcb 	bl	8008c0c <vPortExitCritical>

		taskENTER_CRITICAL();
 8008476:	f000 fb97 	bl	8008ba8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d005      	beq.n	800848c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008480:	4b13      	ldr	r3, [pc, #76]	@ (80084d0 <xTaskNotifyWait+0xb8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800848c:	4b10      	ldr	r3, [pc, #64]	@ (80084d0 <xTaskNotifyWait+0xb8>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d002      	beq.n	80084a0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	e00a      	b.n	80084b6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80084a0:	4b0b      	ldr	r3, [pc, #44]	@ (80084d0 <xTaskNotifyWait+0xb8>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	43d2      	mvns	r2, r2
 80084ac:	400a      	ands	r2, r1
 80084ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 80084b2:	2301      	movs	r3, #1
 80084b4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084b6:	4b06      	ldr	r3, [pc, #24]	@ (80084d0 <xTaskNotifyWait+0xb8>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 80084c0:	f000 fba4 	bl	8008c0c <vPortExitCritical>

		return xReturn;
 80084c4:	697b      	ldr	r3, [r7, #20]
	}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	20000ab4 	.word	0x20000ab4
 80084d4:	e000ed04 	.word	0xe000ed04

080084d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08a      	sub	sp, #40	@ 0x28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	4613      	mov	r3, r2
 80084e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80084e8:	2301      	movs	r3, #1
 80084ea:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10b      	bne.n	800850a <xTaskGenericNotify+0x32>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	61bb      	str	r3, [r7, #24]
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop
 8008508:	e7fd      	b.n	8008506 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800850e:	f000 fb4b 	bl	8008ba8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d004      	beq.n	8008522 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008528:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	2202      	movs	r2, #2
 800852e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8008532:	79fb      	ldrb	r3, [r7, #7]
 8008534:	2b04      	cmp	r3, #4
 8008536:	d82e      	bhi.n	8008596 <xTaskGenericNotify+0xbe>
 8008538:	a201      	add	r2, pc, #4	@ (adr r2, 8008540 <xTaskGenericNotify+0x68>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	080085bb 	.word	0x080085bb
 8008544:	08008555 	.word	0x08008555
 8008548:	08008567 	.word	0x08008567
 800854c:	08008577 	.word	0x08008577
 8008550:	08008581 	.word	0x08008581
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	431a      	orrs	r2, r3
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008564:	e02c      	b.n	80085c0 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008574:	e024      	b.n	80085c0 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800857e:	e01f      	b.n	80085c0 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008580:	7ffb      	ldrb	r3, [r7, #31]
 8008582:	2b02      	cmp	r3, #2
 8008584:	d004      	beq.n	8008590 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800858e:	e017      	b.n	80085c0 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8008590:	2300      	movs	r3, #0
 8008592:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8008594:	e014      	b.n	80085c0 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a0:	d00d      	beq.n	80085be <xTaskGenericNotify+0xe6>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	617b      	str	r3, [r7, #20]
}
 80085b4:	bf00      	nop
 80085b6:	bf00      	nop
 80085b8:	e7fd      	b.n	80085b6 <xTaskGenericNotify+0xde>
					break;
 80085ba:	bf00      	nop
 80085bc:	e000      	b.n	80085c0 <xTaskGenericNotify+0xe8>

					break;
 80085be:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80085c0:	7ffb      	ldrb	r3, [r7, #31]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d13a      	bne.n	800863c <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	3304      	adds	r3, #4
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fea3 	bl	8007316 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d4:	2201      	movs	r2, #1
 80085d6:	409a      	lsls	r2, r3
 80085d8:	4b1c      	ldr	r3, [pc, #112]	@ (800864c <xTaskGenericNotify+0x174>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4313      	orrs	r3, r2
 80085de:	4a1b      	ldr	r2, [pc, #108]	@ (800864c <xTaskGenericNotify+0x174>)
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085e6:	4613      	mov	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4a18      	ldr	r2, [pc, #96]	@ (8008650 <xTaskGenericNotify+0x178>)
 80085f0:	441a      	add	r2, r3
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	3304      	adds	r3, #4
 80085f6:	4619      	mov	r1, r3
 80085f8:	4610      	mov	r0, r2
 80085fa:	f7fe fe2f 	bl	800725c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <xTaskGenericNotify+0x146>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	613b      	str	r3, [r7, #16]
}
 8008618:	bf00      	nop
 800861a:	bf00      	nop
 800861c:	e7fd      	b.n	800861a <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008622:	4b0c      	ldr	r3, [pc, #48]	@ (8008654 <xTaskGenericNotify+0x17c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008628:	429a      	cmp	r2, r3
 800862a:	d907      	bls.n	800863c <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800862c:	4b0a      	ldr	r3, [pc, #40]	@ (8008658 <xTaskGenericNotify+0x180>)
 800862e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800863c:	f000 fae6 	bl	8008c0c <vPortExitCritical>

		return xReturn;
 8008640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8008642:	4618      	mov	r0, r3
 8008644:	3728      	adds	r7, #40	@ 0x28
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000bbc 	.word	0x20000bbc
 8008650:	20000ab8 	.word	0x20000ab8
 8008654:	20000ab4 	.word	0x20000ab4
 8008658:	e000ed04 	.word	0xe000ed04

0800865c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08e      	sub	sp, #56	@ 0x38
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	603b      	str	r3, [r7, #0]
 8008668:	4613      	mov	r3, r2
 800866a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800866c:	2301      	movs	r3, #1
 800866e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10b      	bne.n	800868e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	e7fd      	b.n	800868a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800868e:	f000 fb6b 	bl	8008d68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8008696:	f3ef 8211 	mrs	r2, BASEPRI
 800869a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	623a      	str	r2, [r7, #32]
 80086ac:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80086ae:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d004      	beq.n	80086c2 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80086c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80086c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80086cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80086d4:	79fb      	ldrb	r3, [r7, #7]
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d82e      	bhi.n	8008738 <xTaskGenericNotifyFromISR+0xdc>
 80086da:	a201      	add	r2, pc, #4	@ (adr r2, 80086e0 <xTaskGenericNotifyFromISR+0x84>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	0800875d 	.word	0x0800875d
 80086e4:	080086f5 	.word	0x080086f5
 80086e8:	08008707 	.word	0x08008707
 80086ec:	08008717 	.word	0x08008717
 80086f0:	08008721 	.word	0x08008721
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80086f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	431a      	orrs	r2, r3
 80086fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008700:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008704:	e02d      	b.n	8008762 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008710:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008714:	e025      	b.n	8008762 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800871e:	e020      	b.n	8008762 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008720:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008724:	2b02      	cmp	r3, #2
 8008726:	d004      	beq.n	8008732 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008730:	e017      	b.n	8008762 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8008732:	2300      	movs	r3, #0
 8008734:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8008736:	e014      	b.n	8008762 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800873e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008742:	d00d      	beq.n	8008760 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	61bb      	str	r3, [r7, #24]
}
 8008756:	bf00      	nop
 8008758:	bf00      	nop
 800875a:	e7fd      	b.n	8008758 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800875c:	bf00      	nop
 800875e:	e000      	b.n	8008762 <xTaskGenericNotifyFromISR+0x106>
					break;
 8008760:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008762:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008766:	2b01      	cmp	r3, #1
 8008768:	d146      	bne.n	80087f8 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00b      	beq.n	800878a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	617b      	str	r3, [r7, #20]
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop
 8008788:	e7fd      	b.n	8008786 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800878a:	4b21      	ldr	r3, [pc, #132]	@ (8008810 <xTaskGenericNotifyFromISR+0x1b4>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d11c      	bne.n	80087cc <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008794:	3304      	adds	r3, #4
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe fdbd 	bl	8007316 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800879c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a0:	2201      	movs	r2, #1
 80087a2:	409a      	lsls	r2, r3
 80087a4:	4b1b      	ldr	r3, [pc, #108]	@ (8008814 <xTaskGenericNotifyFromISR+0x1b8>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	4a1a      	ldr	r2, [pc, #104]	@ (8008814 <xTaskGenericNotifyFromISR+0x1b8>)
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b2:	4613      	mov	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4a17      	ldr	r2, [pc, #92]	@ (8008818 <xTaskGenericNotifyFromISR+0x1bc>)
 80087bc:	441a      	add	r2, r3
 80087be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c0:	3304      	adds	r3, #4
 80087c2:	4619      	mov	r1, r3
 80087c4:	4610      	mov	r0, r2
 80087c6:	f7fe fd49 	bl	800725c <vListInsertEnd>
 80087ca:	e005      	b.n	80087d8 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80087cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ce:	3318      	adds	r3, #24
 80087d0:	4619      	mov	r1, r3
 80087d2:	4812      	ldr	r0, [pc, #72]	@ (800881c <xTaskGenericNotifyFromISR+0x1c0>)
 80087d4:	f7fe fd42 	bl	800725c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087dc:	4b10      	ldr	r3, [pc, #64]	@ (8008820 <xTaskGenericNotifyFromISR+0x1c4>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d908      	bls.n	80087f8 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80087e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80087ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ee:	2201      	movs	r2, #1
 80087f0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80087f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008824 <xTaskGenericNotifyFromISR+0x1c8>)
 80087f4:	2201      	movs	r2, #1
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fa:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f383 8811 	msr	BASEPRI, r3
}
 8008802:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8008806:	4618      	mov	r0, r3
 8008808:	3738      	adds	r7, #56	@ 0x38
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000bdc 	.word	0x20000bdc
 8008814:	20000bbc 	.word	0x20000bbc
 8008818:	20000ab8 	.word	0x20000ab8
 800881c:	20000b74 	.word	0x20000b74
 8008820:	20000ab4 	.word	0x20000ab4
 8008824:	20000bc8 	.word	0x20000bc8

08008828 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d102      	bne.n	800883c <xTaskNotifyStateClear+0x14>
 8008836:	4b0e      	ldr	r3, [pc, #56]	@ (8008870 <xTaskNotifyStateClear+0x48>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	e000      	b.n	800883e <xTaskNotifyStateClear+0x16>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8008840:	f000 f9b2 	bl	8008ba8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b02      	cmp	r3, #2
 800884e:	d106      	bne.n	800885e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				xReturn = pdPASS;
 8008858:	2301      	movs	r3, #1
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	e001      	b.n	8008862 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8008862:	f000 f9d3 	bl	8008c0c <vPortExitCritical>

		return xReturn;
 8008866:	68fb      	ldr	r3, [r7, #12]
	}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	20000ab4 	.word	0x20000ab4

08008874 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800887e:	4b29      	ldr	r3, [pc, #164]	@ (8008924 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008884:	4b28      	ldr	r3, [pc, #160]	@ (8008928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3304      	adds	r3, #4
 800888a:	4618      	mov	r0, r3
 800888c:	f7fe fd43 	bl	8007316 <uxListRemove>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10b      	bne.n	80088ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008896:	4b24      	ldr	r3, [pc, #144]	@ (8008928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889c:	2201      	movs	r2, #1
 800889e:	fa02 f303 	lsl.w	r3, r2, r3
 80088a2:	43da      	mvns	r2, r3
 80088a4:	4b21      	ldr	r3, [pc, #132]	@ (800892c <prvAddCurrentTaskToDelayedList+0xb8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4013      	ands	r3, r2
 80088aa:	4a20      	ldr	r2, [pc, #128]	@ (800892c <prvAddCurrentTaskToDelayedList+0xb8>)
 80088ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b4:	d10a      	bne.n	80088cc <prvAddCurrentTaskToDelayedList+0x58>
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d007      	beq.n	80088cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3304      	adds	r3, #4
 80088c2:	4619      	mov	r1, r3
 80088c4:	481a      	ldr	r0, [pc, #104]	@ (8008930 <prvAddCurrentTaskToDelayedList+0xbc>)
 80088c6:	f7fe fcc9 	bl	800725c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088ca:	e026      	b.n	800891a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4413      	add	r3, r2
 80088d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088d4:	4b14      	ldr	r3, [pc, #80]	@ (8008928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d209      	bcs.n	80088f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088e4:	4b13      	ldr	r3, [pc, #76]	@ (8008934 <prvAddCurrentTaskToDelayedList+0xc0>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3304      	adds	r3, #4
 80088ee:	4619      	mov	r1, r3
 80088f0:	4610      	mov	r0, r2
 80088f2:	f7fe fcd7 	bl	80072a4 <vListInsert>
}
 80088f6:	e010      	b.n	800891a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008938 <prvAddCurrentTaskToDelayedList+0xc4>)
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3304      	adds	r3, #4
 8008902:	4619      	mov	r1, r3
 8008904:	4610      	mov	r0, r2
 8008906:	f7fe fccd 	bl	80072a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800890a:	4b0c      	ldr	r3, [pc, #48]	@ (800893c <prvAddCurrentTaskToDelayedList+0xc8>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	429a      	cmp	r2, r3
 8008912:	d202      	bcs.n	800891a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008914:	4a09      	ldr	r2, [pc, #36]	@ (800893c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6013      	str	r3, [r2, #0]
}
 800891a:	bf00      	nop
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	20000bb8 	.word	0x20000bb8
 8008928:	20000ab4 	.word	0x20000ab4
 800892c:	20000bbc 	.word	0x20000bbc
 8008930:	20000ba0 	.word	0x20000ba0
 8008934:	20000b70 	.word	0x20000b70
 8008938:	20000b6c 	.word	0x20000b6c
 800893c:	20000bd4 	.word	0x20000bd4

08008940 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3b04      	subs	r3, #4
 8008950:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3b04      	subs	r3, #4
 800895e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f023 0201 	bic.w	r2, r3, #1
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3b04      	subs	r3, #4
 800896e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008970:	4a0c      	ldr	r2, [pc, #48]	@ (80089a4 <pxPortInitialiseStack+0x64>)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3b14      	subs	r3, #20
 800897a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	3b04      	subs	r3, #4
 8008986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f06f 0202 	mvn.w	r2, #2
 800898e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	3b20      	subs	r3, #32
 8008994:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008996:	68fb      	ldr	r3, [r7, #12]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	080089a9 	.word	0x080089a9

080089a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089ae:	2300      	movs	r3, #0
 80089b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089b2:	4b13      	ldr	r3, [pc, #76]	@ (8008a00 <prvTaskExitError+0x58>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ba:	d00b      	beq.n	80089d4 <prvTaskExitError+0x2c>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	60fb      	str	r3, [r7, #12]
}
 80089ce:	bf00      	nop
 80089d0:	bf00      	nop
 80089d2:	e7fd      	b.n	80089d0 <prvTaskExitError+0x28>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	60bb      	str	r3, [r7, #8]
}
 80089e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089e8:	bf00      	nop
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0fc      	beq.n	80089ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089f0:	bf00      	nop
 80089f2:	bf00      	nop
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	200002b4 	.word	0x200002b4
	...

08008a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a10:	4b07      	ldr	r3, [pc, #28]	@ (8008a30 <pxCurrentTCBConst2>)
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	6808      	ldr	r0, [r1, #0]
 8008a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1a:	f380 8809 	msr	PSP, r0
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8811 	msr	BASEPRI, r0
 8008a2a:	4770      	bx	lr
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst2>:
 8008a30:	20000ab4 	.word	0x20000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a38:	4808      	ldr	r0, [pc, #32]	@ (8008a5c <prvPortStartFirstTask+0x24>)
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	6800      	ldr	r0, [r0, #0]
 8008a3e:	f380 8808 	msr	MSP, r0
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8814 	msr	CONTROL, r0
 8008a4a:	b662      	cpsie	i
 8008a4c:	b661      	cpsie	f
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	df00      	svc	0
 8008a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a5a:	bf00      	nop
 8008a5c:	e000ed08 	.word	0xe000ed08

08008a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a66:	4b47      	ldr	r3, [pc, #284]	@ (8008b84 <xPortStartScheduler+0x124>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a47      	ldr	r2, [pc, #284]	@ (8008b88 <xPortStartScheduler+0x128>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10b      	bne.n	8008a88 <xPortStartScheduler+0x28>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	60fb      	str	r3, [r7, #12]
}
 8008a82:	bf00      	nop
 8008a84:	bf00      	nop
 8008a86:	e7fd      	b.n	8008a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a88:	4b3e      	ldr	r3, [pc, #248]	@ (8008b84 <xPortStartScheduler+0x124>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b8c <xPortStartScheduler+0x12c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d10b      	bne.n	8008aaa <xPortStartScheduler+0x4a>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	613b      	str	r3, [r7, #16]
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	e7fd      	b.n	8008aa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008aaa:	4b39      	ldr	r3, [pc, #228]	@ (8008b90 <xPortStartScheduler+0x130>)
 8008aac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	22ff      	movs	r2, #255	@ 0xff
 8008aba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	4b31      	ldr	r3, [pc, #196]	@ (8008b94 <xPortStartScheduler+0x134>)
 8008ad0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ad2:	4b31      	ldr	r3, [pc, #196]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008ad4:	2207      	movs	r2, #7
 8008ad6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ad8:	e009      	b.n	8008aee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008ada:	4b2f      	ldr	r3, [pc, #188]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008ae2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af6:	2b80      	cmp	r3, #128	@ 0x80
 8008af8:	d0ef      	beq.n	8008ada <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008afa:	4b27      	ldr	r3, [pc, #156]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f1c3 0307 	rsb	r3, r3, #7
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d00b      	beq.n	8008b1e <xPortStartScheduler+0xbe>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	60bb      	str	r3, [r7, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	e7fd      	b.n	8008b1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	4a1c      	ldr	r2, [pc, #112]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b28:	4b1b      	ldr	r3, [pc, #108]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b30:	4a19      	ldr	r2, [pc, #100]	@ (8008b98 <xPortStartScheduler+0x138>)
 8008b32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b3c:	4b17      	ldr	r3, [pc, #92]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a16      	ldr	r2, [pc, #88]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b48:	4b14      	ldr	r3, [pc, #80]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a13      	ldr	r2, [pc, #76]	@ (8008b9c <xPortStartScheduler+0x13c>)
 8008b4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b54:	f000 f8da 	bl	8008d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b58:	4b11      	ldr	r3, [pc, #68]	@ (8008ba0 <xPortStartScheduler+0x140>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b5e:	f000 f8f9 	bl	8008d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b62:	4b10      	ldr	r3, [pc, #64]	@ (8008ba4 <xPortStartScheduler+0x144>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a0f      	ldr	r2, [pc, #60]	@ (8008ba4 <xPortStartScheduler+0x144>)
 8008b68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b6e:	f7ff ff63 	bl	8008a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b72:	f7ff fb01 	bl	8008178 <vTaskSwitchContext>
	prvTaskExitError();
 8008b76:	f7ff ff17 	bl	80089a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	e000ed00 	.word	0xe000ed00
 8008b88:	410fc271 	.word	0x410fc271
 8008b8c:	410fc270 	.word	0x410fc270
 8008b90:	e000e400 	.word	0xe000e400
 8008b94:	20000be0 	.word	0x20000be0
 8008b98:	20000be4 	.word	0x20000be4
 8008b9c:	e000ed20 	.word	0xe000ed20
 8008ba0:	200002b4 	.word	0x200002b4
 8008ba4:	e000ef34 	.word	0xe000ef34

08008ba8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	607b      	str	r3, [r7, #4]
}
 8008bc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bc2:	4b10      	ldr	r3, [pc, #64]	@ (8008c04 <vPortEnterCritical+0x5c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8008c04 <vPortEnterCritical+0x5c>)
 8008bca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008c04 <vPortEnterCritical+0x5c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d110      	bne.n	8008bf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c08 <vPortEnterCritical+0x60>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	603b      	str	r3, [r7, #0]
}
 8008bf0:	bf00      	nop
 8008bf2:	bf00      	nop
 8008bf4:	e7fd      	b.n	8008bf2 <vPortEnterCritical+0x4a>
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	200002b4 	.word	0x200002b4
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c12:	4b12      	ldr	r3, [pc, #72]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10b      	bne.n	8008c32 <vPortExitCritical+0x26>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	607b      	str	r3, [r7, #4]
}
 8008c2c:	bf00      	nop
 8008c2e:	bf00      	nop
 8008c30:	e7fd      	b.n	8008c2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c32:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	4a08      	ldr	r2, [pc, #32]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c3c:	4b07      	ldr	r3, [pc, #28]	@ (8008c5c <vPortExitCritical+0x50>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d105      	bne.n	8008c50 <vPortExitCritical+0x44>
 8008c44:	2300      	movs	r3, #0
 8008c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	f383 8811 	msr	BASEPRI, r3
}
 8008c4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	200002b4 	.word	0x200002b4

08008c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c60:	f3ef 8009 	mrs	r0, PSP
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4b15      	ldr	r3, [pc, #84]	@ (8008cc0 <pxCurrentTCBConst>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	f01e 0f10 	tst.w	lr, #16
 8008c70:	bf08      	it	eq
 8008c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7a:	6010      	str	r0, [r2, #0]
 8008c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c84:	f380 8811 	msr	BASEPRI, r0
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f7ff fa72 	bl	8008178 <vTaskSwitchContext>
 8008c94:	f04f 0000 	mov.w	r0, #0
 8008c98:	f380 8811 	msr	BASEPRI, r0
 8008c9c:	bc09      	pop	{r0, r3}
 8008c9e:	6819      	ldr	r1, [r3, #0]
 8008ca0:	6808      	ldr	r0, [r1, #0]
 8008ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca6:	f01e 0f10 	tst.w	lr, #16
 8008caa:	bf08      	it	eq
 8008cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cb0:	f380 8809 	msr	PSP, r0
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	f3af 8000 	nop.w

08008cc0 <pxCurrentTCBConst>:
 8008cc0:	20000ab4 	.word	0x20000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop

08008cc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	607b      	str	r3, [r7, #4]
}
 8008ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ce2:	f7ff f98f 	bl	8008004 <xTaskIncrementTick>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cec:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <SysTick_Handler+0x40>)
 8008cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	f383 8811 	msr	BASEPRI, r3
}
 8008cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d10:	4b0b      	ldr	r3, [pc, #44]	@ (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d16:	4b0b      	ldr	r3, [pc, #44]	@ (8008d44 <vPortSetupTimerInterrupt+0x38>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d48 <vPortSetupTimerInterrupt+0x3c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0a      	ldr	r2, [pc, #40]	@ (8008d4c <vPortSetupTimerInterrupt+0x40>)
 8008d22:	fba2 2303 	umull	r2, r3, r2, r3
 8008d26:	099b      	lsrs	r3, r3, #6
 8008d28:	4a09      	ldr	r2, [pc, #36]	@ (8008d50 <vPortSetupTimerInterrupt+0x44>)
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d2e:	4b04      	ldr	r3, [pc, #16]	@ (8008d40 <vPortSetupTimerInterrupt+0x34>)
 8008d30:	2207      	movs	r2, #7
 8008d32:	601a      	str	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	e000e010 	.word	0xe000e010
 8008d44:	e000e018 	.word	0xe000e018
 8008d48:	200002a8 	.word	0x200002a8
 8008d4c:	10624dd3 	.word	0x10624dd3
 8008d50:	e000e014 	.word	0xe000e014

08008d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d64 <vPortEnableVFP+0x10>
 8008d58:	6801      	ldr	r1, [r0, #0]
 8008d5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d5e:	6001      	str	r1, [r0, #0]
 8008d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d62:	bf00      	nop
 8008d64:	e000ed88 	.word	0xe000ed88

08008d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d6e:	f3ef 8305 	mrs	r3, IPSR
 8008d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b0f      	cmp	r3, #15
 8008d78:	d915      	bls.n	8008da6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d7a:	4a18      	ldr	r2, [pc, #96]	@ (8008ddc <vPortValidateInterruptPriority+0x74>)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d84:	4b16      	ldr	r3, [pc, #88]	@ (8008de0 <vPortValidateInterruptPriority+0x78>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	7afa      	ldrb	r2, [r7, #11]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d20b      	bcs.n	8008da6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	607b      	str	r3, [r7, #4]
}
 8008da0:	bf00      	nop
 8008da2:	bf00      	nop
 8008da4:	e7fd      	b.n	8008da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008da6:	4b0f      	ldr	r3, [pc, #60]	@ (8008de4 <vPortValidateInterruptPriority+0x7c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008dae:	4b0e      	ldr	r3, [pc, #56]	@ (8008de8 <vPortValidateInterruptPriority+0x80>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d90b      	bls.n	8008dce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	603b      	str	r3, [r7, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	e7fd      	b.n	8008dca <vPortValidateInterruptPriority+0x62>
	}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	e000e3f0 	.word	0xe000e3f0
 8008de0:	20000be0 	.word	0x20000be0
 8008de4:	e000ed0c 	.word	0xe000ed0c
 8008de8:	20000be4 	.word	0x20000be4

08008dec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08a      	sub	sp, #40	@ 0x28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008df8:	f7ff f858 	bl	8007eac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8008f70 <pvPortMalloc+0x184>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e04:	f000 f924 	bl	8009050 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e08:	4b5a      	ldr	r3, [pc, #360]	@ (8008f74 <pvPortMalloc+0x188>)
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f040 8095 	bne.w	8008f40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01e      	beq.n	8008e5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e1c:	2208      	movs	r2, #8
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4413      	add	r3, r2
 8008e22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d015      	beq.n	8008e5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f023 0307 	bic.w	r3, r3, #7
 8008e34:	3308      	adds	r3, #8
 8008e36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <pvPortMalloc+0x6e>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	617b      	str	r3, [r7, #20]
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop
 8008e58:	e7fd      	b.n	8008e56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d06f      	beq.n	8008f40 <pvPortMalloc+0x154>
 8008e60:	4b45      	ldr	r3, [pc, #276]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d86a      	bhi.n	8008f40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e6a:	4b44      	ldr	r3, [pc, #272]	@ (8008f7c <pvPortMalloc+0x190>)
 8008e6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e6e:	4b43      	ldr	r3, [pc, #268]	@ (8008f7c <pvPortMalloc+0x190>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e74:	e004      	b.n	8008e80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d903      	bls.n	8008e92 <pvPortMalloc+0xa6>
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1f1      	bne.n	8008e76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e92:	4b37      	ldr	r3, [pc, #220]	@ (8008f70 <pvPortMalloc+0x184>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d051      	beq.n	8008f40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	4413      	add	r3, r2
 8008ea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	1ad2      	subs	r2, r2, r3
 8008eb6:	2308      	movs	r3, #8
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d920      	bls.n	8008f00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <pvPortMalloc+0xfc>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	613b      	str	r3, [r7, #16]
}
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	e7fd      	b.n	8008ee4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008efa:	69b8      	ldr	r0, [r7, #24]
 8008efc:	f000 f90a 	bl	8009114 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f00:	4b1d      	ldr	r3, [pc, #116]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	4b1b      	ldr	r3, [pc, #108]	@ (8008f80 <pvPortMalloc+0x194>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d203      	bcs.n	8008f22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f1a:	4b17      	ldr	r3, [pc, #92]	@ (8008f78 <pvPortMalloc+0x18c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a18      	ldr	r2, [pc, #96]	@ (8008f80 <pvPortMalloc+0x194>)
 8008f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	4b13      	ldr	r3, [pc, #76]	@ (8008f74 <pvPortMalloc+0x188>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f36:	4b13      	ldr	r3, [pc, #76]	@ (8008f84 <pvPortMalloc+0x198>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	4a11      	ldr	r2, [pc, #68]	@ (8008f84 <pvPortMalloc+0x198>)
 8008f3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f40:	f7fe ffc2 	bl	8007ec8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00b      	beq.n	8008f66 <pvPortMalloc+0x17a>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	60fb      	str	r3, [r7, #12]
}
 8008f60:	bf00      	nop
 8008f62:	bf00      	nop
 8008f64:	e7fd      	b.n	8008f62 <pvPortMalloc+0x176>
	return pvReturn;
 8008f66:	69fb      	ldr	r3, [r7, #28]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3728      	adds	r7, #40	@ 0x28
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20005a10 	.word	0x20005a10
 8008f74:	20005a24 	.word	0x20005a24
 8008f78:	20005a14 	.word	0x20005a14
 8008f7c:	20005a08 	.word	0x20005a08
 8008f80:	20005a18 	.word	0x20005a18
 8008f84:	20005a1c 	.word	0x20005a1c

08008f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d04f      	beq.n	800903a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f9a:	2308      	movs	r3, #8
 8008f9c:	425b      	negs	r3, r3
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	4b25      	ldr	r3, [pc, #148]	@ (8009044 <vPortFree+0xbc>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10b      	bne.n	8008fce <vPortFree+0x46>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	60fb      	str	r3, [r7, #12]
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	e7fd      	b.n	8008fca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00b      	beq.n	8008fee <vPortFree+0x66>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	60bb      	str	r3, [r7, #8]
}
 8008fe8:	bf00      	nop
 8008fea:	bf00      	nop
 8008fec:	e7fd      	b.n	8008fea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	4b14      	ldr	r3, [pc, #80]	@ (8009044 <vPortFree+0xbc>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01e      	beq.n	800903a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d11a      	bne.n	800903a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	4b0e      	ldr	r3, [pc, #56]	@ (8009044 <vPortFree+0xbc>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	43db      	mvns	r3, r3
 800900e:	401a      	ands	r2, r3
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009014:	f7fe ff4a 	bl	8007eac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b0a      	ldr	r3, [pc, #40]	@ (8009048 <vPortFree+0xc0>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4413      	add	r3, r2
 8009022:	4a09      	ldr	r2, [pc, #36]	@ (8009048 <vPortFree+0xc0>)
 8009024:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009026:	6938      	ldr	r0, [r7, #16]
 8009028:	f000 f874 	bl	8009114 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800902c:	4b07      	ldr	r3, [pc, #28]	@ (800904c <vPortFree+0xc4>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3301      	adds	r3, #1
 8009032:	4a06      	ldr	r2, [pc, #24]	@ (800904c <vPortFree+0xc4>)
 8009034:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009036:	f7fe ff47 	bl	8007ec8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800903a:	bf00      	nop
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20005a24 	.word	0x20005a24
 8009048:	20005a14 	.word	0x20005a14
 800904c:	20005a20 	.word	0x20005a20

08009050 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009056:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800905a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800905c:	4b27      	ldr	r3, [pc, #156]	@ (80090fc <prvHeapInit+0xac>)
 800905e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00c      	beq.n	8009084 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3307      	adds	r3, #7
 800906e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0307 	bic.w	r3, r3, #7
 8009076:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	4a1f      	ldr	r2, [pc, #124]	@ (80090fc <prvHeapInit+0xac>)
 8009080:	4413      	add	r3, r2
 8009082:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009088:	4a1d      	ldr	r2, [pc, #116]	@ (8009100 <prvHeapInit+0xb0>)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800908e:	4b1c      	ldr	r3, [pc, #112]	@ (8009100 <prvHeapInit+0xb0>)
 8009090:	2200      	movs	r2, #0
 8009092:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	4413      	add	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800909c:	2208      	movs	r2, #8
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	1a9b      	subs	r3, r3, r2
 80090a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	4a15      	ldr	r2, [pc, #84]	@ (8009104 <prvHeapInit+0xb4>)
 80090b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090b2:	4b14      	ldr	r3, [pc, #80]	@ (8009104 <prvHeapInit+0xb4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2200      	movs	r2, #0
 80090b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ba:	4b12      	ldr	r3, [pc, #72]	@ (8009104 <prvHeapInit+0xb4>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	1ad2      	subs	r2, r2, r3
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <prvHeapInit+0xb4>)
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009108 <prvHeapInit+0xb8>)
 80090de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	4a09      	ldr	r2, [pc, #36]	@ (800910c <prvHeapInit+0xbc>)
 80090e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090e8:	4b09      	ldr	r3, [pc, #36]	@ (8009110 <prvHeapInit+0xc0>)
 80090ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80090ee:	601a      	str	r2, [r3, #0]
}
 80090f0:	bf00      	nop
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	20000be8 	.word	0x20000be8
 8009100:	20005a08 	.word	0x20005a08
 8009104:	20005a10 	.word	0x20005a10
 8009108:	20005a18 	.word	0x20005a18
 800910c:	20005a14 	.word	0x20005a14
 8009110:	20005a24 	.word	0x20005a24

08009114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800911c:	4b28      	ldr	r3, [pc, #160]	@ (80091c0 <prvInsertBlockIntoFreeList+0xac>)
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	e002      	b.n	8009128 <prvInsertBlockIntoFreeList+0x14>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	429a      	cmp	r2, r3
 8009130:	d8f7      	bhi.n	8009122 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	4413      	add	r3, r2
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	429a      	cmp	r2, r3
 8009142:	d108      	bne.n	8009156 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	441a      	add	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d118      	bne.n	800919c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	4b15      	ldr	r3, [pc, #84]	@ (80091c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d00d      	beq.n	8009192 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	441a      	add	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	e008      	b.n	80091a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009192:	4b0c      	ldr	r3, [pc, #48]	@ (80091c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	601a      	str	r2, [r3, #0]
 800919a:	e003      	b.n	80091a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d002      	beq.n	80091b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	20005a08 	.word	0x20005a08
 80091c4:	20005a10 	.word	0x20005a10

080091c8 <atof>:
 80091c8:	2100      	movs	r1, #0
 80091ca:	f000 be0d 	b.w	8009de8 <strtod>

080091ce <atoi>:
 80091ce:	220a      	movs	r2, #10
 80091d0:	2100      	movs	r1, #0
 80091d2:	f000 be8f 	b.w	8009ef4 <strtol>

080091d6 <atol>:
 80091d6:	220a      	movs	r2, #10
 80091d8:	2100      	movs	r1, #0
 80091da:	f000 be8b 	b.w	8009ef4 <strtol>

080091de <sulp>:
 80091de:	b570      	push	{r4, r5, r6, lr}
 80091e0:	4604      	mov	r4, r0
 80091e2:	460d      	mov	r5, r1
 80091e4:	ec45 4b10 	vmov	d0, r4, r5
 80091e8:	4616      	mov	r6, r2
 80091ea:	f003 fb9d 	bl	800c928 <__ulp>
 80091ee:	ec51 0b10 	vmov	r0, r1, d0
 80091f2:	b17e      	cbz	r6, 8009214 <sulp+0x36>
 80091f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80091f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	dd09      	ble.n	8009214 <sulp+0x36>
 8009200:	051b      	lsls	r3, r3, #20
 8009202:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009206:	2400      	movs	r4, #0
 8009208:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800920c:	4622      	mov	r2, r4
 800920e:	462b      	mov	r3, r5
 8009210:	f7f7 fa02 	bl	8000618 <__aeabi_dmul>
 8009214:	ec41 0b10 	vmov	d0, r0, r1
 8009218:	bd70      	pop	{r4, r5, r6, pc}
 800921a:	0000      	movs	r0, r0
 800921c:	0000      	movs	r0, r0
	...

08009220 <_strtod_l>:
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	b09f      	sub	sp, #124	@ 0x7c
 8009226:	460c      	mov	r4, r1
 8009228:	9217      	str	r2, [sp, #92]	@ 0x5c
 800922a:	2200      	movs	r2, #0
 800922c:	921a      	str	r2, [sp, #104]	@ 0x68
 800922e:	9005      	str	r0, [sp, #20]
 8009230:	f04f 0a00 	mov.w	sl, #0
 8009234:	f04f 0b00 	mov.w	fp, #0
 8009238:	460a      	mov	r2, r1
 800923a:	9219      	str	r2, [sp, #100]	@ 0x64
 800923c:	7811      	ldrb	r1, [r2, #0]
 800923e:	292b      	cmp	r1, #43	@ 0x2b
 8009240:	d04a      	beq.n	80092d8 <_strtod_l+0xb8>
 8009242:	d838      	bhi.n	80092b6 <_strtod_l+0x96>
 8009244:	290d      	cmp	r1, #13
 8009246:	d832      	bhi.n	80092ae <_strtod_l+0x8e>
 8009248:	2908      	cmp	r1, #8
 800924a:	d832      	bhi.n	80092b2 <_strtod_l+0x92>
 800924c:	2900      	cmp	r1, #0
 800924e:	d03b      	beq.n	80092c8 <_strtod_l+0xa8>
 8009250:	2200      	movs	r2, #0
 8009252:	920e      	str	r2, [sp, #56]	@ 0x38
 8009254:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009256:	782a      	ldrb	r2, [r5, #0]
 8009258:	2a30      	cmp	r2, #48	@ 0x30
 800925a:	f040 80b2 	bne.w	80093c2 <_strtod_l+0x1a2>
 800925e:	786a      	ldrb	r2, [r5, #1]
 8009260:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009264:	2a58      	cmp	r2, #88	@ 0x58
 8009266:	d16e      	bne.n	8009346 <_strtod_l+0x126>
 8009268:	9302      	str	r3, [sp, #8]
 800926a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	4a8f      	ldr	r2, [pc, #572]	@ (80094b0 <_strtod_l+0x290>)
 8009274:	9805      	ldr	r0, [sp, #20]
 8009276:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009278:	a919      	add	r1, sp, #100	@ 0x64
 800927a:	f002 fc4f 	bl	800bb1c <__gethex>
 800927e:	f010 060f 	ands.w	r6, r0, #15
 8009282:	4604      	mov	r4, r0
 8009284:	d005      	beq.n	8009292 <_strtod_l+0x72>
 8009286:	2e06      	cmp	r6, #6
 8009288:	d128      	bne.n	80092dc <_strtod_l+0xbc>
 800928a:	3501      	adds	r5, #1
 800928c:	2300      	movs	r3, #0
 800928e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009290:	930e      	str	r3, [sp, #56]	@ 0x38
 8009292:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009294:	2b00      	cmp	r3, #0
 8009296:	f040 858e 	bne.w	8009db6 <_strtod_l+0xb96>
 800929a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800929c:	b1cb      	cbz	r3, 80092d2 <_strtod_l+0xb2>
 800929e:	4652      	mov	r2, sl
 80092a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80092a4:	ec43 2b10 	vmov	d0, r2, r3
 80092a8:	b01f      	add	sp, #124	@ 0x7c
 80092aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ae:	2920      	cmp	r1, #32
 80092b0:	d1ce      	bne.n	8009250 <_strtod_l+0x30>
 80092b2:	3201      	adds	r2, #1
 80092b4:	e7c1      	b.n	800923a <_strtod_l+0x1a>
 80092b6:	292d      	cmp	r1, #45	@ 0x2d
 80092b8:	d1ca      	bne.n	8009250 <_strtod_l+0x30>
 80092ba:	2101      	movs	r1, #1
 80092bc:	910e      	str	r1, [sp, #56]	@ 0x38
 80092be:	1c51      	adds	r1, r2, #1
 80092c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80092c2:	7852      	ldrb	r2, [r2, #1]
 80092c4:	2a00      	cmp	r2, #0
 80092c6:	d1c5      	bne.n	8009254 <_strtod_l+0x34>
 80092c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f040 8570 	bne.w	8009db2 <_strtod_l+0xb92>
 80092d2:	4652      	mov	r2, sl
 80092d4:	465b      	mov	r3, fp
 80092d6:	e7e5      	b.n	80092a4 <_strtod_l+0x84>
 80092d8:	2100      	movs	r1, #0
 80092da:	e7ef      	b.n	80092bc <_strtod_l+0x9c>
 80092dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092de:	b13a      	cbz	r2, 80092f0 <_strtod_l+0xd0>
 80092e0:	2135      	movs	r1, #53	@ 0x35
 80092e2:	a81c      	add	r0, sp, #112	@ 0x70
 80092e4:	f003 fc1a 	bl	800cb1c <__copybits>
 80092e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092ea:	9805      	ldr	r0, [sp, #20]
 80092ec:	f002 fff0 	bl	800c2d0 <_Bfree>
 80092f0:	3e01      	subs	r6, #1
 80092f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80092f4:	2e04      	cmp	r6, #4
 80092f6:	d806      	bhi.n	8009306 <_strtod_l+0xe6>
 80092f8:	e8df f006 	tbb	[pc, r6]
 80092fc:	201d0314 	.word	0x201d0314
 8009300:	14          	.byte	0x14
 8009301:	00          	.byte	0x00
 8009302:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009306:	05e1      	lsls	r1, r4, #23
 8009308:	bf48      	it	mi
 800930a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800930e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009312:	0d1b      	lsrs	r3, r3, #20
 8009314:	051b      	lsls	r3, r3, #20
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1bb      	bne.n	8009292 <_strtod_l+0x72>
 800931a:	f001 fc91 	bl	800ac40 <__errno>
 800931e:	2322      	movs	r3, #34	@ 0x22
 8009320:	6003      	str	r3, [r0, #0]
 8009322:	e7b6      	b.n	8009292 <_strtod_l+0x72>
 8009324:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009328:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800932c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009330:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009334:	e7e7      	b.n	8009306 <_strtod_l+0xe6>
 8009336:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80094b8 <_strtod_l+0x298>
 800933a:	e7e4      	b.n	8009306 <_strtod_l+0xe6>
 800933c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009340:	f04f 3aff 	mov.w	sl, #4294967295
 8009344:	e7df      	b.n	8009306 <_strtod_l+0xe6>
 8009346:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	9219      	str	r2, [sp, #100]	@ 0x64
 800934c:	785b      	ldrb	r3, [r3, #1]
 800934e:	2b30      	cmp	r3, #48	@ 0x30
 8009350:	d0f9      	beq.n	8009346 <_strtod_l+0x126>
 8009352:	2b00      	cmp	r3, #0
 8009354:	d09d      	beq.n	8009292 <_strtod_l+0x72>
 8009356:	2301      	movs	r3, #1
 8009358:	2700      	movs	r7, #0
 800935a:	9308      	str	r3, [sp, #32]
 800935c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800935e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009360:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009362:	46b9      	mov	r9, r7
 8009364:	220a      	movs	r2, #10
 8009366:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009368:	7805      	ldrb	r5, [r0, #0]
 800936a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800936e:	b2d9      	uxtb	r1, r3
 8009370:	2909      	cmp	r1, #9
 8009372:	d928      	bls.n	80093c6 <_strtod_l+0x1a6>
 8009374:	494f      	ldr	r1, [pc, #316]	@ (80094b4 <_strtod_l+0x294>)
 8009376:	2201      	movs	r2, #1
 8009378:	f001 fb4b 	bl	800aa12 <strncmp>
 800937c:	2800      	cmp	r0, #0
 800937e:	d032      	beq.n	80093e6 <_strtod_l+0x1c6>
 8009380:	2000      	movs	r0, #0
 8009382:	462a      	mov	r2, r5
 8009384:	900a      	str	r0, [sp, #40]	@ 0x28
 8009386:	464d      	mov	r5, r9
 8009388:	4603      	mov	r3, r0
 800938a:	2a65      	cmp	r2, #101	@ 0x65
 800938c:	d001      	beq.n	8009392 <_strtod_l+0x172>
 800938e:	2a45      	cmp	r2, #69	@ 0x45
 8009390:	d114      	bne.n	80093bc <_strtod_l+0x19c>
 8009392:	b91d      	cbnz	r5, 800939c <_strtod_l+0x17c>
 8009394:	9a08      	ldr	r2, [sp, #32]
 8009396:	4302      	orrs	r2, r0
 8009398:	d096      	beq.n	80092c8 <_strtod_l+0xa8>
 800939a:	2500      	movs	r5, #0
 800939c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800939e:	1c62      	adds	r2, r4, #1
 80093a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80093a2:	7862      	ldrb	r2, [r4, #1]
 80093a4:	2a2b      	cmp	r2, #43	@ 0x2b
 80093a6:	d07a      	beq.n	800949e <_strtod_l+0x27e>
 80093a8:	2a2d      	cmp	r2, #45	@ 0x2d
 80093aa:	d07e      	beq.n	80094aa <_strtod_l+0x28a>
 80093ac:	f04f 0c00 	mov.w	ip, #0
 80093b0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80093b4:	2909      	cmp	r1, #9
 80093b6:	f240 8085 	bls.w	80094c4 <_strtod_l+0x2a4>
 80093ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80093bc:	f04f 0800 	mov.w	r8, #0
 80093c0:	e0a5      	b.n	800950e <_strtod_l+0x2ee>
 80093c2:	2300      	movs	r3, #0
 80093c4:	e7c8      	b.n	8009358 <_strtod_l+0x138>
 80093c6:	f1b9 0f08 	cmp.w	r9, #8
 80093ca:	bfd8      	it	le
 80093cc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80093ce:	f100 0001 	add.w	r0, r0, #1
 80093d2:	bfda      	itte	le
 80093d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80093d8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80093da:	fb02 3707 	mlagt	r7, r2, r7, r3
 80093de:	f109 0901 	add.w	r9, r9, #1
 80093e2:	9019      	str	r0, [sp, #100]	@ 0x64
 80093e4:	e7bf      	b.n	8009366 <_strtod_l+0x146>
 80093e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093e8:	1c5a      	adds	r2, r3, #1
 80093ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80093ec:	785a      	ldrb	r2, [r3, #1]
 80093ee:	f1b9 0f00 	cmp.w	r9, #0
 80093f2:	d03b      	beq.n	800946c <_strtod_l+0x24c>
 80093f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80093f6:	464d      	mov	r5, r9
 80093f8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80093fc:	2b09      	cmp	r3, #9
 80093fe:	d912      	bls.n	8009426 <_strtod_l+0x206>
 8009400:	2301      	movs	r3, #1
 8009402:	e7c2      	b.n	800938a <_strtod_l+0x16a>
 8009404:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	9219      	str	r2, [sp, #100]	@ 0x64
 800940a:	785a      	ldrb	r2, [r3, #1]
 800940c:	3001      	adds	r0, #1
 800940e:	2a30      	cmp	r2, #48	@ 0x30
 8009410:	d0f8      	beq.n	8009404 <_strtod_l+0x1e4>
 8009412:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009416:	2b08      	cmp	r3, #8
 8009418:	f200 84d2 	bhi.w	8009dc0 <_strtod_l+0xba0>
 800941c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800941e:	900a      	str	r0, [sp, #40]	@ 0x28
 8009420:	2000      	movs	r0, #0
 8009422:	930c      	str	r3, [sp, #48]	@ 0x30
 8009424:	4605      	mov	r5, r0
 8009426:	3a30      	subs	r2, #48	@ 0x30
 8009428:	f100 0301 	add.w	r3, r0, #1
 800942c:	d018      	beq.n	8009460 <_strtod_l+0x240>
 800942e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009430:	4419      	add	r1, r3
 8009432:	910a      	str	r1, [sp, #40]	@ 0x28
 8009434:	462e      	mov	r6, r5
 8009436:	f04f 0e0a 	mov.w	lr, #10
 800943a:	1c71      	adds	r1, r6, #1
 800943c:	eba1 0c05 	sub.w	ip, r1, r5
 8009440:	4563      	cmp	r3, ip
 8009442:	dc15      	bgt.n	8009470 <_strtod_l+0x250>
 8009444:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009448:	182b      	adds	r3, r5, r0
 800944a:	2b08      	cmp	r3, #8
 800944c:	f105 0501 	add.w	r5, r5, #1
 8009450:	4405      	add	r5, r0
 8009452:	dc1a      	bgt.n	800948a <_strtod_l+0x26a>
 8009454:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009456:	230a      	movs	r3, #10
 8009458:	fb03 2301 	mla	r3, r3, r1, r2
 800945c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800945e:	2300      	movs	r3, #0
 8009460:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009462:	1c51      	adds	r1, r2, #1
 8009464:	9119      	str	r1, [sp, #100]	@ 0x64
 8009466:	7852      	ldrb	r2, [r2, #1]
 8009468:	4618      	mov	r0, r3
 800946a:	e7c5      	b.n	80093f8 <_strtod_l+0x1d8>
 800946c:	4648      	mov	r0, r9
 800946e:	e7ce      	b.n	800940e <_strtod_l+0x1ee>
 8009470:	2e08      	cmp	r6, #8
 8009472:	dc05      	bgt.n	8009480 <_strtod_l+0x260>
 8009474:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009476:	fb0e f606 	mul.w	r6, lr, r6
 800947a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800947c:	460e      	mov	r6, r1
 800947e:	e7dc      	b.n	800943a <_strtod_l+0x21a>
 8009480:	2910      	cmp	r1, #16
 8009482:	bfd8      	it	le
 8009484:	fb0e f707 	mulle.w	r7, lr, r7
 8009488:	e7f8      	b.n	800947c <_strtod_l+0x25c>
 800948a:	2b0f      	cmp	r3, #15
 800948c:	bfdc      	itt	le
 800948e:	230a      	movle	r3, #10
 8009490:	fb03 2707 	mlale	r7, r3, r7, r2
 8009494:	e7e3      	b.n	800945e <_strtod_l+0x23e>
 8009496:	2300      	movs	r3, #0
 8009498:	930a      	str	r3, [sp, #40]	@ 0x28
 800949a:	2301      	movs	r3, #1
 800949c:	e77a      	b.n	8009394 <_strtod_l+0x174>
 800949e:	f04f 0c00 	mov.w	ip, #0
 80094a2:	1ca2      	adds	r2, r4, #2
 80094a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80094a6:	78a2      	ldrb	r2, [r4, #2]
 80094a8:	e782      	b.n	80093b0 <_strtod_l+0x190>
 80094aa:	f04f 0c01 	mov.w	ip, #1
 80094ae:	e7f8      	b.n	80094a2 <_strtod_l+0x282>
 80094b0:	0800ef2c 	.word	0x0800ef2c
 80094b4:	0800ecec 	.word	0x0800ecec
 80094b8:	7ff00000 	.word	0x7ff00000
 80094bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094be:	1c51      	adds	r1, r2, #1
 80094c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80094c2:	7852      	ldrb	r2, [r2, #1]
 80094c4:	2a30      	cmp	r2, #48	@ 0x30
 80094c6:	d0f9      	beq.n	80094bc <_strtod_l+0x29c>
 80094c8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80094cc:	2908      	cmp	r1, #8
 80094ce:	f63f af75 	bhi.w	80093bc <_strtod_l+0x19c>
 80094d2:	3a30      	subs	r2, #48	@ 0x30
 80094d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80094d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094d8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80094da:	f04f 080a 	mov.w	r8, #10
 80094de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094e0:	1c56      	adds	r6, r2, #1
 80094e2:	9619      	str	r6, [sp, #100]	@ 0x64
 80094e4:	7852      	ldrb	r2, [r2, #1]
 80094e6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80094ea:	f1be 0f09 	cmp.w	lr, #9
 80094ee:	d939      	bls.n	8009564 <_strtod_l+0x344>
 80094f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80094f2:	1a76      	subs	r6, r6, r1
 80094f4:	2e08      	cmp	r6, #8
 80094f6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80094fa:	dc03      	bgt.n	8009504 <_strtod_l+0x2e4>
 80094fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094fe:	4588      	cmp	r8, r1
 8009500:	bfa8      	it	ge
 8009502:	4688      	movge	r8, r1
 8009504:	f1bc 0f00 	cmp.w	ip, #0
 8009508:	d001      	beq.n	800950e <_strtod_l+0x2ee>
 800950a:	f1c8 0800 	rsb	r8, r8, #0
 800950e:	2d00      	cmp	r5, #0
 8009510:	d14e      	bne.n	80095b0 <_strtod_l+0x390>
 8009512:	9908      	ldr	r1, [sp, #32]
 8009514:	4308      	orrs	r0, r1
 8009516:	f47f aebc 	bne.w	8009292 <_strtod_l+0x72>
 800951a:	2b00      	cmp	r3, #0
 800951c:	f47f aed4 	bne.w	80092c8 <_strtod_l+0xa8>
 8009520:	2a69      	cmp	r2, #105	@ 0x69
 8009522:	d028      	beq.n	8009576 <_strtod_l+0x356>
 8009524:	dc25      	bgt.n	8009572 <_strtod_l+0x352>
 8009526:	2a49      	cmp	r2, #73	@ 0x49
 8009528:	d025      	beq.n	8009576 <_strtod_l+0x356>
 800952a:	2a4e      	cmp	r2, #78	@ 0x4e
 800952c:	f47f aecc 	bne.w	80092c8 <_strtod_l+0xa8>
 8009530:	499a      	ldr	r1, [pc, #616]	@ (800979c <_strtod_l+0x57c>)
 8009532:	a819      	add	r0, sp, #100	@ 0x64
 8009534:	f002 fd14 	bl	800bf60 <__match>
 8009538:	2800      	cmp	r0, #0
 800953a:	f43f aec5 	beq.w	80092c8 <_strtod_l+0xa8>
 800953e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	2b28      	cmp	r3, #40	@ 0x28
 8009544:	d12e      	bne.n	80095a4 <_strtod_l+0x384>
 8009546:	4996      	ldr	r1, [pc, #600]	@ (80097a0 <_strtod_l+0x580>)
 8009548:	aa1c      	add	r2, sp, #112	@ 0x70
 800954a:	a819      	add	r0, sp, #100	@ 0x64
 800954c:	f002 fd1c 	bl	800bf88 <__hexnan>
 8009550:	2805      	cmp	r0, #5
 8009552:	d127      	bne.n	80095a4 <_strtod_l+0x384>
 8009554:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009556:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800955a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800955e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009562:	e696      	b.n	8009292 <_strtod_l+0x72>
 8009564:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009566:	fb08 2101 	mla	r1, r8, r1, r2
 800956a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800956e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009570:	e7b5      	b.n	80094de <_strtod_l+0x2be>
 8009572:	2a6e      	cmp	r2, #110	@ 0x6e
 8009574:	e7da      	b.n	800952c <_strtod_l+0x30c>
 8009576:	498b      	ldr	r1, [pc, #556]	@ (80097a4 <_strtod_l+0x584>)
 8009578:	a819      	add	r0, sp, #100	@ 0x64
 800957a:	f002 fcf1 	bl	800bf60 <__match>
 800957e:	2800      	cmp	r0, #0
 8009580:	f43f aea2 	beq.w	80092c8 <_strtod_l+0xa8>
 8009584:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009586:	4988      	ldr	r1, [pc, #544]	@ (80097a8 <_strtod_l+0x588>)
 8009588:	3b01      	subs	r3, #1
 800958a:	a819      	add	r0, sp, #100	@ 0x64
 800958c:	9319      	str	r3, [sp, #100]	@ 0x64
 800958e:	f002 fce7 	bl	800bf60 <__match>
 8009592:	b910      	cbnz	r0, 800959a <_strtod_l+0x37a>
 8009594:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009596:	3301      	adds	r3, #1
 8009598:	9319      	str	r3, [sp, #100]	@ 0x64
 800959a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80097b8 <_strtod_l+0x598>
 800959e:	f04f 0a00 	mov.w	sl, #0
 80095a2:	e676      	b.n	8009292 <_strtod_l+0x72>
 80095a4:	4881      	ldr	r0, [pc, #516]	@ (80097ac <_strtod_l+0x58c>)
 80095a6:	f001 fb87 	bl	800acb8 <nan>
 80095aa:	ec5b ab10 	vmov	sl, fp, d0
 80095ae:	e670      	b.n	8009292 <_strtod_l+0x72>
 80095b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095b2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80095b4:	eba8 0303 	sub.w	r3, r8, r3
 80095b8:	f1b9 0f00 	cmp.w	r9, #0
 80095bc:	bf08      	it	eq
 80095be:	46a9      	moveq	r9, r5
 80095c0:	2d10      	cmp	r5, #16
 80095c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095c4:	462c      	mov	r4, r5
 80095c6:	bfa8      	it	ge
 80095c8:	2410      	movge	r4, #16
 80095ca:	f7f6 ffab 	bl	8000524 <__aeabi_ui2d>
 80095ce:	2d09      	cmp	r5, #9
 80095d0:	4682      	mov	sl, r0
 80095d2:	468b      	mov	fp, r1
 80095d4:	dc13      	bgt.n	80095fe <_strtod_l+0x3de>
 80095d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f43f ae5a 	beq.w	8009292 <_strtod_l+0x72>
 80095de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e0:	dd78      	ble.n	80096d4 <_strtod_l+0x4b4>
 80095e2:	2b16      	cmp	r3, #22
 80095e4:	dc5f      	bgt.n	80096a6 <_strtod_l+0x486>
 80095e6:	4972      	ldr	r1, [pc, #456]	@ (80097b0 <_strtod_l+0x590>)
 80095e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095f0:	4652      	mov	r2, sl
 80095f2:	465b      	mov	r3, fp
 80095f4:	f7f7 f810 	bl	8000618 <__aeabi_dmul>
 80095f8:	4682      	mov	sl, r0
 80095fa:	468b      	mov	fp, r1
 80095fc:	e649      	b.n	8009292 <_strtod_l+0x72>
 80095fe:	4b6c      	ldr	r3, [pc, #432]	@ (80097b0 <_strtod_l+0x590>)
 8009600:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009604:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009608:	f7f7 f806 	bl	8000618 <__aeabi_dmul>
 800960c:	4682      	mov	sl, r0
 800960e:	4638      	mov	r0, r7
 8009610:	468b      	mov	fp, r1
 8009612:	f7f6 ff87 	bl	8000524 <__aeabi_ui2d>
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	4650      	mov	r0, sl
 800961c:	4659      	mov	r1, fp
 800961e:	f7f6 fe45 	bl	80002ac <__adddf3>
 8009622:	2d0f      	cmp	r5, #15
 8009624:	4682      	mov	sl, r0
 8009626:	468b      	mov	fp, r1
 8009628:	ddd5      	ble.n	80095d6 <_strtod_l+0x3b6>
 800962a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800962c:	1b2c      	subs	r4, r5, r4
 800962e:	441c      	add	r4, r3
 8009630:	2c00      	cmp	r4, #0
 8009632:	f340 8093 	ble.w	800975c <_strtod_l+0x53c>
 8009636:	f014 030f 	ands.w	r3, r4, #15
 800963a:	d00a      	beq.n	8009652 <_strtod_l+0x432>
 800963c:	495c      	ldr	r1, [pc, #368]	@ (80097b0 <_strtod_l+0x590>)
 800963e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009642:	4652      	mov	r2, sl
 8009644:	465b      	mov	r3, fp
 8009646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800964a:	f7f6 ffe5 	bl	8000618 <__aeabi_dmul>
 800964e:	4682      	mov	sl, r0
 8009650:	468b      	mov	fp, r1
 8009652:	f034 040f 	bics.w	r4, r4, #15
 8009656:	d073      	beq.n	8009740 <_strtod_l+0x520>
 8009658:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800965c:	dd49      	ble.n	80096f2 <_strtod_l+0x4d2>
 800965e:	2400      	movs	r4, #0
 8009660:	46a0      	mov	r8, r4
 8009662:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009664:	46a1      	mov	r9, r4
 8009666:	9a05      	ldr	r2, [sp, #20]
 8009668:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80097b8 <_strtod_l+0x598>
 800966c:	2322      	movs	r3, #34	@ 0x22
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	f04f 0a00 	mov.w	sl, #0
 8009674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009676:	2b00      	cmp	r3, #0
 8009678:	f43f ae0b 	beq.w	8009292 <_strtod_l+0x72>
 800967c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800967e:	9805      	ldr	r0, [sp, #20]
 8009680:	f002 fe26 	bl	800c2d0 <_Bfree>
 8009684:	9805      	ldr	r0, [sp, #20]
 8009686:	4649      	mov	r1, r9
 8009688:	f002 fe22 	bl	800c2d0 <_Bfree>
 800968c:	9805      	ldr	r0, [sp, #20]
 800968e:	4641      	mov	r1, r8
 8009690:	f002 fe1e 	bl	800c2d0 <_Bfree>
 8009694:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009696:	9805      	ldr	r0, [sp, #20]
 8009698:	f002 fe1a 	bl	800c2d0 <_Bfree>
 800969c:	9805      	ldr	r0, [sp, #20]
 800969e:	4621      	mov	r1, r4
 80096a0:	f002 fe16 	bl	800c2d0 <_Bfree>
 80096a4:	e5f5      	b.n	8009292 <_strtod_l+0x72>
 80096a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80096ac:	4293      	cmp	r3, r2
 80096ae:	dbbc      	blt.n	800962a <_strtod_l+0x40a>
 80096b0:	4c3f      	ldr	r4, [pc, #252]	@ (80097b0 <_strtod_l+0x590>)
 80096b2:	f1c5 050f 	rsb	r5, r5, #15
 80096b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80096ba:	4652      	mov	r2, sl
 80096bc:	465b      	mov	r3, fp
 80096be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096c2:	f7f6 ffa9 	bl	8000618 <__aeabi_dmul>
 80096c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c8:	1b5d      	subs	r5, r3, r5
 80096ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096d2:	e78f      	b.n	80095f4 <_strtod_l+0x3d4>
 80096d4:	3316      	adds	r3, #22
 80096d6:	dba8      	blt.n	800962a <_strtod_l+0x40a>
 80096d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096da:	eba3 0808 	sub.w	r8, r3, r8
 80096de:	4b34      	ldr	r3, [pc, #208]	@ (80097b0 <_strtod_l+0x590>)
 80096e0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80096e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80096e8:	4650      	mov	r0, sl
 80096ea:	4659      	mov	r1, fp
 80096ec:	f7f7 f8be 	bl	800086c <__aeabi_ddiv>
 80096f0:	e782      	b.n	80095f8 <_strtod_l+0x3d8>
 80096f2:	2300      	movs	r3, #0
 80096f4:	4f2f      	ldr	r7, [pc, #188]	@ (80097b4 <_strtod_l+0x594>)
 80096f6:	1124      	asrs	r4, r4, #4
 80096f8:	4650      	mov	r0, sl
 80096fa:	4659      	mov	r1, fp
 80096fc:	461e      	mov	r6, r3
 80096fe:	2c01      	cmp	r4, #1
 8009700:	dc21      	bgt.n	8009746 <_strtod_l+0x526>
 8009702:	b10b      	cbz	r3, 8009708 <_strtod_l+0x4e8>
 8009704:	4682      	mov	sl, r0
 8009706:	468b      	mov	fp, r1
 8009708:	492a      	ldr	r1, [pc, #168]	@ (80097b4 <_strtod_l+0x594>)
 800970a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800970e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009712:	4652      	mov	r2, sl
 8009714:	465b      	mov	r3, fp
 8009716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800971a:	f7f6 ff7d 	bl	8000618 <__aeabi_dmul>
 800971e:	4b26      	ldr	r3, [pc, #152]	@ (80097b8 <_strtod_l+0x598>)
 8009720:	460a      	mov	r2, r1
 8009722:	400b      	ands	r3, r1
 8009724:	4925      	ldr	r1, [pc, #148]	@ (80097bc <_strtod_l+0x59c>)
 8009726:	428b      	cmp	r3, r1
 8009728:	4682      	mov	sl, r0
 800972a:	d898      	bhi.n	800965e <_strtod_l+0x43e>
 800972c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009730:	428b      	cmp	r3, r1
 8009732:	bf86      	itte	hi
 8009734:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80097c0 <_strtod_l+0x5a0>
 8009738:	f04f 3aff 	movhi.w	sl, #4294967295
 800973c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009740:	2300      	movs	r3, #0
 8009742:	9308      	str	r3, [sp, #32]
 8009744:	e076      	b.n	8009834 <_strtod_l+0x614>
 8009746:	07e2      	lsls	r2, r4, #31
 8009748:	d504      	bpl.n	8009754 <_strtod_l+0x534>
 800974a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800974e:	f7f6 ff63 	bl	8000618 <__aeabi_dmul>
 8009752:	2301      	movs	r3, #1
 8009754:	3601      	adds	r6, #1
 8009756:	1064      	asrs	r4, r4, #1
 8009758:	3708      	adds	r7, #8
 800975a:	e7d0      	b.n	80096fe <_strtod_l+0x4de>
 800975c:	d0f0      	beq.n	8009740 <_strtod_l+0x520>
 800975e:	4264      	negs	r4, r4
 8009760:	f014 020f 	ands.w	r2, r4, #15
 8009764:	d00a      	beq.n	800977c <_strtod_l+0x55c>
 8009766:	4b12      	ldr	r3, [pc, #72]	@ (80097b0 <_strtod_l+0x590>)
 8009768:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800976c:	4650      	mov	r0, sl
 800976e:	4659      	mov	r1, fp
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f7f7 f87a 	bl	800086c <__aeabi_ddiv>
 8009778:	4682      	mov	sl, r0
 800977a:	468b      	mov	fp, r1
 800977c:	1124      	asrs	r4, r4, #4
 800977e:	d0df      	beq.n	8009740 <_strtod_l+0x520>
 8009780:	2c1f      	cmp	r4, #31
 8009782:	dd1f      	ble.n	80097c4 <_strtod_l+0x5a4>
 8009784:	2400      	movs	r4, #0
 8009786:	46a0      	mov	r8, r4
 8009788:	940b      	str	r4, [sp, #44]	@ 0x2c
 800978a:	46a1      	mov	r9, r4
 800978c:	9a05      	ldr	r2, [sp, #20]
 800978e:	2322      	movs	r3, #34	@ 0x22
 8009790:	f04f 0a00 	mov.w	sl, #0
 8009794:	f04f 0b00 	mov.w	fp, #0
 8009798:	6013      	str	r3, [r2, #0]
 800979a:	e76b      	b.n	8009674 <_strtod_l+0x454>
 800979c:	0800ecfb 	.word	0x0800ecfb
 80097a0:	0800ef18 	.word	0x0800ef18
 80097a4:	0800ecf3 	.word	0x0800ecf3
 80097a8:	0800edda 	.word	0x0800edda
 80097ac:	0800edd6 	.word	0x0800edd6
 80097b0:	0800f0a0 	.word	0x0800f0a0
 80097b4:	0800f078 	.word	0x0800f078
 80097b8:	7ff00000 	.word	0x7ff00000
 80097bc:	7ca00000 	.word	0x7ca00000
 80097c0:	7fefffff 	.word	0x7fefffff
 80097c4:	f014 0310 	ands.w	r3, r4, #16
 80097c8:	bf18      	it	ne
 80097ca:	236a      	movne	r3, #106	@ 0x6a
 80097cc:	4ea9      	ldr	r6, [pc, #676]	@ (8009a74 <_strtod_l+0x854>)
 80097ce:	9308      	str	r3, [sp, #32]
 80097d0:	4650      	mov	r0, sl
 80097d2:	4659      	mov	r1, fp
 80097d4:	2300      	movs	r3, #0
 80097d6:	07e7      	lsls	r7, r4, #31
 80097d8:	d504      	bpl.n	80097e4 <_strtod_l+0x5c4>
 80097da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097de:	f7f6 ff1b 	bl	8000618 <__aeabi_dmul>
 80097e2:	2301      	movs	r3, #1
 80097e4:	1064      	asrs	r4, r4, #1
 80097e6:	f106 0608 	add.w	r6, r6, #8
 80097ea:	d1f4      	bne.n	80097d6 <_strtod_l+0x5b6>
 80097ec:	b10b      	cbz	r3, 80097f2 <_strtod_l+0x5d2>
 80097ee:	4682      	mov	sl, r0
 80097f0:	468b      	mov	fp, r1
 80097f2:	9b08      	ldr	r3, [sp, #32]
 80097f4:	b1b3      	cbz	r3, 8009824 <_strtod_l+0x604>
 80097f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80097fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80097fe:	2b00      	cmp	r3, #0
 8009800:	4659      	mov	r1, fp
 8009802:	dd0f      	ble.n	8009824 <_strtod_l+0x604>
 8009804:	2b1f      	cmp	r3, #31
 8009806:	dd56      	ble.n	80098b6 <_strtod_l+0x696>
 8009808:	2b34      	cmp	r3, #52	@ 0x34
 800980a:	bfde      	ittt	le
 800980c:	f04f 33ff 	movle.w	r3, #4294967295
 8009810:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009814:	4093      	lslle	r3, r2
 8009816:	f04f 0a00 	mov.w	sl, #0
 800981a:	bfcc      	ite	gt
 800981c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009820:	ea03 0b01 	andle.w	fp, r3, r1
 8009824:	2200      	movs	r2, #0
 8009826:	2300      	movs	r3, #0
 8009828:	4650      	mov	r0, sl
 800982a:	4659      	mov	r1, fp
 800982c:	f7f7 f95c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009830:	2800      	cmp	r0, #0
 8009832:	d1a7      	bne.n	8009784 <_strtod_l+0x564>
 8009834:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800983a:	9805      	ldr	r0, [sp, #20]
 800983c:	462b      	mov	r3, r5
 800983e:	464a      	mov	r2, r9
 8009840:	f002 fdae 	bl	800c3a0 <__s2b>
 8009844:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009846:	2800      	cmp	r0, #0
 8009848:	f43f af09 	beq.w	800965e <_strtod_l+0x43e>
 800984c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800984e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009850:	2a00      	cmp	r2, #0
 8009852:	eba3 0308 	sub.w	r3, r3, r8
 8009856:	bfa8      	it	ge
 8009858:	2300      	movge	r3, #0
 800985a:	9312      	str	r3, [sp, #72]	@ 0x48
 800985c:	2400      	movs	r4, #0
 800985e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009862:	9316      	str	r3, [sp, #88]	@ 0x58
 8009864:	46a0      	mov	r8, r4
 8009866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009868:	9805      	ldr	r0, [sp, #20]
 800986a:	6859      	ldr	r1, [r3, #4]
 800986c:	f002 fcf0 	bl	800c250 <_Balloc>
 8009870:	4681      	mov	r9, r0
 8009872:	2800      	cmp	r0, #0
 8009874:	f43f aef7 	beq.w	8009666 <_strtod_l+0x446>
 8009878:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800987a:	691a      	ldr	r2, [r3, #16]
 800987c:	3202      	adds	r2, #2
 800987e:	f103 010c 	add.w	r1, r3, #12
 8009882:	0092      	lsls	r2, r2, #2
 8009884:	300c      	adds	r0, #12
 8009886:	f001 fa08 	bl	800ac9a <memcpy>
 800988a:	ec4b ab10 	vmov	d0, sl, fp
 800988e:	9805      	ldr	r0, [sp, #20]
 8009890:	aa1c      	add	r2, sp, #112	@ 0x70
 8009892:	a91b      	add	r1, sp, #108	@ 0x6c
 8009894:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009898:	f003 f8b6 	bl	800ca08 <__d2b>
 800989c:	901a      	str	r0, [sp, #104]	@ 0x68
 800989e:	2800      	cmp	r0, #0
 80098a0:	f43f aee1 	beq.w	8009666 <_strtod_l+0x446>
 80098a4:	9805      	ldr	r0, [sp, #20]
 80098a6:	2101      	movs	r1, #1
 80098a8:	f002 fe10 	bl	800c4cc <__i2b>
 80098ac:	4680      	mov	r8, r0
 80098ae:	b948      	cbnz	r0, 80098c4 <_strtod_l+0x6a4>
 80098b0:	f04f 0800 	mov.w	r8, #0
 80098b4:	e6d7      	b.n	8009666 <_strtod_l+0x446>
 80098b6:	f04f 32ff 	mov.w	r2, #4294967295
 80098ba:	fa02 f303 	lsl.w	r3, r2, r3
 80098be:	ea03 0a0a 	and.w	sl, r3, sl
 80098c2:	e7af      	b.n	8009824 <_strtod_l+0x604>
 80098c4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80098c6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80098c8:	2d00      	cmp	r5, #0
 80098ca:	bfab      	itete	ge
 80098cc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80098ce:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80098d0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80098d2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80098d4:	bfac      	ite	ge
 80098d6:	18ef      	addge	r7, r5, r3
 80098d8:	1b5e      	sublt	r6, r3, r5
 80098da:	9b08      	ldr	r3, [sp, #32]
 80098dc:	1aed      	subs	r5, r5, r3
 80098de:	4415      	add	r5, r2
 80098e0:	4b65      	ldr	r3, [pc, #404]	@ (8009a78 <_strtod_l+0x858>)
 80098e2:	3d01      	subs	r5, #1
 80098e4:	429d      	cmp	r5, r3
 80098e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80098ea:	da50      	bge.n	800998e <_strtod_l+0x76e>
 80098ec:	1b5b      	subs	r3, r3, r5
 80098ee:	2b1f      	cmp	r3, #31
 80098f0:	eba2 0203 	sub.w	r2, r2, r3
 80098f4:	f04f 0101 	mov.w	r1, #1
 80098f8:	dc3d      	bgt.n	8009976 <_strtod_l+0x756>
 80098fa:	fa01 f303 	lsl.w	r3, r1, r3
 80098fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009900:	2300      	movs	r3, #0
 8009902:	9310      	str	r3, [sp, #64]	@ 0x40
 8009904:	18bd      	adds	r5, r7, r2
 8009906:	9b08      	ldr	r3, [sp, #32]
 8009908:	42af      	cmp	r7, r5
 800990a:	4416      	add	r6, r2
 800990c:	441e      	add	r6, r3
 800990e:	463b      	mov	r3, r7
 8009910:	bfa8      	it	ge
 8009912:	462b      	movge	r3, r5
 8009914:	42b3      	cmp	r3, r6
 8009916:	bfa8      	it	ge
 8009918:	4633      	movge	r3, r6
 800991a:	2b00      	cmp	r3, #0
 800991c:	bfc2      	ittt	gt
 800991e:	1aed      	subgt	r5, r5, r3
 8009920:	1af6      	subgt	r6, r6, r3
 8009922:	1aff      	subgt	r7, r7, r3
 8009924:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009926:	2b00      	cmp	r3, #0
 8009928:	dd16      	ble.n	8009958 <_strtod_l+0x738>
 800992a:	4641      	mov	r1, r8
 800992c:	9805      	ldr	r0, [sp, #20]
 800992e:	461a      	mov	r2, r3
 8009930:	f002 fe84 	bl	800c63c <__pow5mult>
 8009934:	4680      	mov	r8, r0
 8009936:	2800      	cmp	r0, #0
 8009938:	d0ba      	beq.n	80098b0 <_strtod_l+0x690>
 800993a:	4601      	mov	r1, r0
 800993c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800993e:	9805      	ldr	r0, [sp, #20]
 8009940:	f002 fdda 	bl	800c4f8 <__multiply>
 8009944:	900a      	str	r0, [sp, #40]	@ 0x28
 8009946:	2800      	cmp	r0, #0
 8009948:	f43f ae8d 	beq.w	8009666 <_strtod_l+0x446>
 800994c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800994e:	9805      	ldr	r0, [sp, #20]
 8009950:	f002 fcbe 	bl	800c2d0 <_Bfree>
 8009954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009956:	931a      	str	r3, [sp, #104]	@ 0x68
 8009958:	2d00      	cmp	r5, #0
 800995a:	dc1d      	bgt.n	8009998 <_strtod_l+0x778>
 800995c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800995e:	2b00      	cmp	r3, #0
 8009960:	dd23      	ble.n	80099aa <_strtod_l+0x78a>
 8009962:	4649      	mov	r1, r9
 8009964:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009966:	9805      	ldr	r0, [sp, #20]
 8009968:	f002 fe68 	bl	800c63c <__pow5mult>
 800996c:	4681      	mov	r9, r0
 800996e:	b9e0      	cbnz	r0, 80099aa <_strtod_l+0x78a>
 8009970:	f04f 0900 	mov.w	r9, #0
 8009974:	e677      	b.n	8009666 <_strtod_l+0x446>
 8009976:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800997a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800997e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009982:	35e2      	adds	r5, #226	@ 0xe2
 8009984:	fa01 f305 	lsl.w	r3, r1, r5
 8009988:	9310      	str	r3, [sp, #64]	@ 0x40
 800998a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800998c:	e7ba      	b.n	8009904 <_strtod_l+0x6e4>
 800998e:	2300      	movs	r3, #0
 8009990:	9310      	str	r3, [sp, #64]	@ 0x40
 8009992:	2301      	movs	r3, #1
 8009994:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009996:	e7b5      	b.n	8009904 <_strtod_l+0x6e4>
 8009998:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800999a:	9805      	ldr	r0, [sp, #20]
 800999c:	462a      	mov	r2, r5
 800999e:	f002 fea7 	bl	800c6f0 <__lshift>
 80099a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d1d9      	bne.n	800995c <_strtod_l+0x73c>
 80099a8:	e65d      	b.n	8009666 <_strtod_l+0x446>
 80099aa:	2e00      	cmp	r6, #0
 80099ac:	dd07      	ble.n	80099be <_strtod_l+0x79e>
 80099ae:	4649      	mov	r1, r9
 80099b0:	9805      	ldr	r0, [sp, #20]
 80099b2:	4632      	mov	r2, r6
 80099b4:	f002 fe9c 	bl	800c6f0 <__lshift>
 80099b8:	4681      	mov	r9, r0
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d0d8      	beq.n	8009970 <_strtod_l+0x750>
 80099be:	2f00      	cmp	r7, #0
 80099c0:	dd08      	ble.n	80099d4 <_strtod_l+0x7b4>
 80099c2:	4641      	mov	r1, r8
 80099c4:	9805      	ldr	r0, [sp, #20]
 80099c6:	463a      	mov	r2, r7
 80099c8:	f002 fe92 	bl	800c6f0 <__lshift>
 80099cc:	4680      	mov	r8, r0
 80099ce:	2800      	cmp	r0, #0
 80099d0:	f43f ae49 	beq.w	8009666 <_strtod_l+0x446>
 80099d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099d6:	9805      	ldr	r0, [sp, #20]
 80099d8:	464a      	mov	r2, r9
 80099da:	f002 ff11 	bl	800c800 <__mdiff>
 80099de:	4604      	mov	r4, r0
 80099e0:	2800      	cmp	r0, #0
 80099e2:	f43f ae40 	beq.w	8009666 <_strtod_l+0x446>
 80099e6:	68c3      	ldr	r3, [r0, #12]
 80099e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099ea:	2300      	movs	r3, #0
 80099ec:	60c3      	str	r3, [r0, #12]
 80099ee:	4641      	mov	r1, r8
 80099f0:	f002 feea 	bl	800c7c8 <__mcmp>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	da45      	bge.n	8009a84 <_strtod_l+0x864>
 80099f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099fa:	ea53 030a 	orrs.w	r3, r3, sl
 80099fe:	d16b      	bne.n	8009ad8 <_strtod_l+0x8b8>
 8009a00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d167      	bne.n	8009ad8 <_strtod_l+0x8b8>
 8009a08:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a0c:	0d1b      	lsrs	r3, r3, #20
 8009a0e:	051b      	lsls	r3, r3, #20
 8009a10:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a14:	d960      	bls.n	8009ad8 <_strtod_l+0x8b8>
 8009a16:	6963      	ldr	r3, [r4, #20]
 8009a18:	b913      	cbnz	r3, 8009a20 <_strtod_l+0x800>
 8009a1a:	6923      	ldr	r3, [r4, #16]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	dd5b      	ble.n	8009ad8 <_strtod_l+0x8b8>
 8009a20:	4621      	mov	r1, r4
 8009a22:	2201      	movs	r2, #1
 8009a24:	9805      	ldr	r0, [sp, #20]
 8009a26:	f002 fe63 	bl	800c6f0 <__lshift>
 8009a2a:	4641      	mov	r1, r8
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	f002 fecb 	bl	800c7c8 <__mcmp>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	dd50      	ble.n	8009ad8 <_strtod_l+0x8b8>
 8009a36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a3a:	9a08      	ldr	r2, [sp, #32]
 8009a3c:	0d1b      	lsrs	r3, r3, #20
 8009a3e:	051b      	lsls	r3, r3, #20
 8009a40:	2a00      	cmp	r2, #0
 8009a42:	d06a      	beq.n	8009b1a <_strtod_l+0x8fa>
 8009a44:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a48:	d867      	bhi.n	8009b1a <_strtod_l+0x8fa>
 8009a4a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009a4e:	f67f ae9d 	bls.w	800978c <_strtod_l+0x56c>
 8009a52:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <_strtod_l+0x85c>)
 8009a54:	4650      	mov	r0, sl
 8009a56:	4659      	mov	r1, fp
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f7f6 fddd 	bl	8000618 <__aeabi_dmul>
 8009a5e:	4b08      	ldr	r3, [pc, #32]	@ (8009a80 <_strtod_l+0x860>)
 8009a60:	400b      	ands	r3, r1
 8009a62:	4682      	mov	sl, r0
 8009a64:	468b      	mov	fp, r1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f47f ae08 	bne.w	800967c <_strtod_l+0x45c>
 8009a6c:	9a05      	ldr	r2, [sp, #20]
 8009a6e:	2322      	movs	r3, #34	@ 0x22
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	e603      	b.n	800967c <_strtod_l+0x45c>
 8009a74:	0800ef40 	.word	0x0800ef40
 8009a78:	fffffc02 	.word	0xfffffc02
 8009a7c:	39500000 	.word	0x39500000
 8009a80:	7ff00000 	.word	0x7ff00000
 8009a84:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009a88:	d165      	bne.n	8009b56 <_strtod_l+0x936>
 8009a8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a90:	b35a      	cbz	r2, 8009aea <_strtod_l+0x8ca>
 8009a92:	4a9f      	ldr	r2, [pc, #636]	@ (8009d10 <_strtod_l+0xaf0>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d12b      	bne.n	8009af0 <_strtod_l+0x8d0>
 8009a98:	9b08      	ldr	r3, [sp, #32]
 8009a9a:	4651      	mov	r1, sl
 8009a9c:	b303      	cbz	r3, 8009ae0 <_strtod_l+0x8c0>
 8009a9e:	4b9d      	ldr	r3, [pc, #628]	@ (8009d14 <_strtod_l+0xaf4>)
 8009aa0:	465a      	mov	r2, fp
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8009aac:	d81b      	bhi.n	8009ae6 <_strtod_l+0x8c6>
 8009aae:	0d1b      	lsrs	r3, r3, #20
 8009ab0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab8:	4299      	cmp	r1, r3
 8009aba:	d119      	bne.n	8009af0 <_strtod_l+0x8d0>
 8009abc:	4b96      	ldr	r3, [pc, #600]	@ (8009d18 <_strtod_l+0xaf8>)
 8009abe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d102      	bne.n	8009aca <_strtod_l+0x8aa>
 8009ac4:	3101      	adds	r1, #1
 8009ac6:	f43f adce 	beq.w	8009666 <_strtod_l+0x446>
 8009aca:	4b92      	ldr	r3, [pc, #584]	@ (8009d14 <_strtod_l+0xaf4>)
 8009acc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ace:	401a      	ands	r2, r3
 8009ad0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009ad4:	f04f 0a00 	mov.w	sl, #0
 8009ad8:	9b08      	ldr	r3, [sp, #32]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1b9      	bne.n	8009a52 <_strtod_l+0x832>
 8009ade:	e5cd      	b.n	800967c <_strtod_l+0x45c>
 8009ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae4:	e7e8      	b.n	8009ab8 <_strtod_l+0x898>
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	e7e6      	b.n	8009ab8 <_strtod_l+0x898>
 8009aea:	ea53 030a 	orrs.w	r3, r3, sl
 8009aee:	d0a2      	beq.n	8009a36 <_strtod_l+0x816>
 8009af0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009af2:	b1db      	cbz	r3, 8009b2c <_strtod_l+0x90c>
 8009af4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009af6:	4213      	tst	r3, r2
 8009af8:	d0ee      	beq.n	8009ad8 <_strtod_l+0x8b8>
 8009afa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009afc:	9a08      	ldr	r2, [sp, #32]
 8009afe:	4650      	mov	r0, sl
 8009b00:	4659      	mov	r1, fp
 8009b02:	b1bb      	cbz	r3, 8009b34 <_strtod_l+0x914>
 8009b04:	f7ff fb6b 	bl	80091de <sulp>
 8009b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b0c:	ec53 2b10 	vmov	r2, r3, d0
 8009b10:	f7f6 fbcc 	bl	80002ac <__adddf3>
 8009b14:	4682      	mov	sl, r0
 8009b16:	468b      	mov	fp, r1
 8009b18:	e7de      	b.n	8009ad8 <_strtod_l+0x8b8>
 8009b1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009b1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009b22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009b26:	f04f 3aff 	mov.w	sl, #4294967295
 8009b2a:	e7d5      	b.n	8009ad8 <_strtod_l+0x8b8>
 8009b2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b2e:	ea13 0f0a 	tst.w	r3, sl
 8009b32:	e7e1      	b.n	8009af8 <_strtod_l+0x8d8>
 8009b34:	f7ff fb53 	bl	80091de <sulp>
 8009b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b3c:	ec53 2b10 	vmov	r2, r3, d0
 8009b40:	f7f6 fbb2 	bl	80002a8 <__aeabi_dsub>
 8009b44:	2200      	movs	r2, #0
 8009b46:	2300      	movs	r3, #0
 8009b48:	4682      	mov	sl, r0
 8009b4a:	468b      	mov	fp, r1
 8009b4c:	f7f6 ffcc 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d0c1      	beq.n	8009ad8 <_strtod_l+0x8b8>
 8009b54:	e61a      	b.n	800978c <_strtod_l+0x56c>
 8009b56:	4641      	mov	r1, r8
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f002 ffad 	bl	800cab8 <__ratio>
 8009b5e:	ec57 6b10 	vmov	r6, r7, d0
 8009b62:	2200      	movs	r2, #0
 8009b64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009b68:	4630      	mov	r0, r6
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	f7f6 ffd0 	bl	8000b10 <__aeabi_dcmple>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d06f      	beq.n	8009c54 <_strtod_l+0xa34>
 8009b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d17a      	bne.n	8009c70 <_strtod_l+0xa50>
 8009b7a:	f1ba 0f00 	cmp.w	sl, #0
 8009b7e:	d158      	bne.n	8009c32 <_strtod_l+0xa12>
 8009b80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d15a      	bne.n	8009c40 <_strtod_l+0xa20>
 8009b8a:	4b64      	ldr	r3, [pc, #400]	@ (8009d1c <_strtod_l+0xafc>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	4630      	mov	r0, r6
 8009b90:	4639      	mov	r1, r7
 8009b92:	f7f6 ffb3 	bl	8000afc <__aeabi_dcmplt>
 8009b96:	2800      	cmp	r0, #0
 8009b98:	d159      	bne.n	8009c4e <_strtod_l+0xa2e>
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	4b60      	ldr	r3, [pc, #384]	@ (8009d20 <_strtod_l+0xb00>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f7f6 fd39 	bl	8000618 <__aeabi_dmul>
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	460f      	mov	r7, r1
 8009baa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009bae:	9606      	str	r6, [sp, #24]
 8009bb0:	9307      	str	r3, [sp, #28]
 8009bb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bb6:	4d57      	ldr	r5, [pc, #348]	@ (8009d14 <_strtod_l+0xaf4>)
 8009bb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bbe:	401d      	ands	r5, r3
 8009bc0:	4b58      	ldr	r3, [pc, #352]	@ (8009d24 <_strtod_l+0xb04>)
 8009bc2:	429d      	cmp	r5, r3
 8009bc4:	f040 80b2 	bne.w	8009d2c <_strtod_l+0xb0c>
 8009bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009bce:	ec4b ab10 	vmov	d0, sl, fp
 8009bd2:	f002 fea9 	bl	800c928 <__ulp>
 8009bd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bda:	ec51 0b10 	vmov	r0, r1, d0
 8009bde:	f7f6 fd1b 	bl	8000618 <__aeabi_dmul>
 8009be2:	4652      	mov	r2, sl
 8009be4:	465b      	mov	r3, fp
 8009be6:	f7f6 fb61 	bl	80002ac <__adddf3>
 8009bea:	460b      	mov	r3, r1
 8009bec:	4949      	ldr	r1, [pc, #292]	@ (8009d14 <_strtod_l+0xaf4>)
 8009bee:	4a4e      	ldr	r2, [pc, #312]	@ (8009d28 <_strtod_l+0xb08>)
 8009bf0:	4019      	ands	r1, r3
 8009bf2:	4291      	cmp	r1, r2
 8009bf4:	4682      	mov	sl, r0
 8009bf6:	d942      	bls.n	8009c7e <_strtod_l+0xa5e>
 8009bf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bfa:	4b47      	ldr	r3, [pc, #284]	@ (8009d18 <_strtod_l+0xaf8>)
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d103      	bne.n	8009c08 <_strtod_l+0x9e8>
 8009c00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c02:	3301      	adds	r3, #1
 8009c04:	f43f ad2f 	beq.w	8009666 <_strtod_l+0x446>
 8009c08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009d18 <_strtod_l+0xaf8>
 8009c0c:	f04f 3aff 	mov.w	sl, #4294967295
 8009c10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c12:	9805      	ldr	r0, [sp, #20]
 8009c14:	f002 fb5c 	bl	800c2d0 <_Bfree>
 8009c18:	9805      	ldr	r0, [sp, #20]
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f002 fb58 	bl	800c2d0 <_Bfree>
 8009c20:	9805      	ldr	r0, [sp, #20]
 8009c22:	4641      	mov	r1, r8
 8009c24:	f002 fb54 	bl	800c2d0 <_Bfree>
 8009c28:	9805      	ldr	r0, [sp, #20]
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	f002 fb50 	bl	800c2d0 <_Bfree>
 8009c30:	e619      	b.n	8009866 <_strtod_l+0x646>
 8009c32:	f1ba 0f01 	cmp.w	sl, #1
 8009c36:	d103      	bne.n	8009c40 <_strtod_l+0xa20>
 8009c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f43f ada6 	beq.w	800978c <_strtod_l+0x56c>
 8009c40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009cf0 <_strtod_l+0xad0>
 8009c44:	4f35      	ldr	r7, [pc, #212]	@ (8009d1c <_strtod_l+0xafc>)
 8009c46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c4a:	2600      	movs	r6, #0
 8009c4c:	e7b1      	b.n	8009bb2 <_strtod_l+0x992>
 8009c4e:	4f34      	ldr	r7, [pc, #208]	@ (8009d20 <_strtod_l+0xb00>)
 8009c50:	2600      	movs	r6, #0
 8009c52:	e7aa      	b.n	8009baa <_strtod_l+0x98a>
 8009c54:	4b32      	ldr	r3, [pc, #200]	@ (8009d20 <_strtod_l+0xb00>)
 8009c56:	4630      	mov	r0, r6
 8009c58:	4639      	mov	r1, r7
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f7f6 fcdc 	bl	8000618 <__aeabi_dmul>
 8009c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c62:	4606      	mov	r6, r0
 8009c64:	460f      	mov	r7, r1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d09f      	beq.n	8009baa <_strtod_l+0x98a>
 8009c6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c6e:	e7a0      	b.n	8009bb2 <_strtod_l+0x992>
 8009c70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009cf8 <_strtod_l+0xad8>
 8009c74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c78:	ec57 6b17 	vmov	r6, r7, d7
 8009c7c:	e799      	b.n	8009bb2 <_strtod_l+0x992>
 8009c7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009c82:	9b08      	ldr	r3, [sp, #32]
 8009c84:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1c1      	bne.n	8009c10 <_strtod_l+0x9f0>
 8009c8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c90:	0d1b      	lsrs	r3, r3, #20
 8009c92:	051b      	lsls	r3, r3, #20
 8009c94:	429d      	cmp	r5, r3
 8009c96:	d1bb      	bne.n	8009c10 <_strtod_l+0x9f0>
 8009c98:	4630      	mov	r0, r6
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	f7f7 f81c 	bl	8000cd8 <__aeabi_d2lz>
 8009ca0:	f7f6 fc8c 	bl	80005bc <__aeabi_l2d>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4630      	mov	r0, r6
 8009caa:	4639      	mov	r1, r7
 8009cac:	f7f6 fafc 	bl	80002a8 <__aeabi_dsub>
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009cb8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cbe:	ea46 060a 	orr.w	r6, r6, sl
 8009cc2:	431e      	orrs	r6, r3
 8009cc4:	d06f      	beq.n	8009da6 <_strtod_l+0xb86>
 8009cc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d00 <_strtod_l+0xae0>)
 8009cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ccc:	f7f6 ff16 	bl	8000afc <__aeabi_dcmplt>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	f47f acd3 	bne.w	800967c <_strtod_l+0x45c>
 8009cd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009d08 <_strtod_l+0xae8>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ce0:	f7f6 ff2a 	bl	8000b38 <__aeabi_dcmpgt>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d093      	beq.n	8009c10 <_strtod_l+0x9f0>
 8009ce8:	e4c8      	b.n	800967c <_strtod_l+0x45c>
 8009cea:	bf00      	nop
 8009cec:	f3af 8000 	nop.w
 8009cf0:	00000000 	.word	0x00000000
 8009cf4:	bff00000 	.word	0xbff00000
 8009cf8:	00000000 	.word	0x00000000
 8009cfc:	3ff00000 	.word	0x3ff00000
 8009d00:	94a03595 	.word	0x94a03595
 8009d04:	3fdfffff 	.word	0x3fdfffff
 8009d08:	35afe535 	.word	0x35afe535
 8009d0c:	3fe00000 	.word	0x3fe00000
 8009d10:	000fffff 	.word	0x000fffff
 8009d14:	7ff00000 	.word	0x7ff00000
 8009d18:	7fefffff 	.word	0x7fefffff
 8009d1c:	3ff00000 	.word	0x3ff00000
 8009d20:	3fe00000 	.word	0x3fe00000
 8009d24:	7fe00000 	.word	0x7fe00000
 8009d28:	7c9fffff 	.word	0x7c9fffff
 8009d2c:	9b08      	ldr	r3, [sp, #32]
 8009d2e:	b323      	cbz	r3, 8009d7a <_strtod_l+0xb5a>
 8009d30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009d34:	d821      	bhi.n	8009d7a <_strtod_l+0xb5a>
 8009d36:	a328      	add	r3, pc, #160	@ (adr r3, 8009dd8 <_strtod_l+0xbb8>)
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	4639      	mov	r1, r7
 8009d40:	f7f6 fee6 	bl	8000b10 <__aeabi_dcmple>
 8009d44:	b1a0      	cbz	r0, 8009d70 <_strtod_l+0xb50>
 8009d46:	4639      	mov	r1, r7
 8009d48:	4630      	mov	r0, r6
 8009d4a:	f7f6 ff3d 	bl	8000bc8 <__aeabi_d2uiz>
 8009d4e:	2801      	cmp	r0, #1
 8009d50:	bf38      	it	cc
 8009d52:	2001      	movcc	r0, #1
 8009d54:	f7f6 fbe6 	bl	8000524 <__aeabi_ui2d>
 8009d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	460f      	mov	r7, r1
 8009d5e:	b9fb      	cbnz	r3, 8009da0 <_strtod_l+0xb80>
 8009d60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d64:	9014      	str	r0, [sp, #80]	@ 0x50
 8009d66:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009d6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009d76:	1b5b      	subs	r3, r3, r5
 8009d78:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009d82:	f002 fdd1 	bl	800c928 <__ulp>
 8009d86:	4650      	mov	r0, sl
 8009d88:	ec53 2b10 	vmov	r2, r3, d0
 8009d8c:	4659      	mov	r1, fp
 8009d8e:	f7f6 fc43 	bl	8000618 <__aeabi_dmul>
 8009d92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d96:	f7f6 fa89 	bl	80002ac <__adddf3>
 8009d9a:	4682      	mov	sl, r0
 8009d9c:	468b      	mov	fp, r1
 8009d9e:	e770      	b.n	8009c82 <_strtod_l+0xa62>
 8009da0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009da4:	e7e0      	b.n	8009d68 <_strtod_l+0xb48>
 8009da6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009de0 <_strtod_l+0xbc0>)
 8009da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dac:	f7f6 fea6 	bl	8000afc <__aeabi_dcmplt>
 8009db0:	e798      	b.n	8009ce4 <_strtod_l+0xac4>
 8009db2:	2300      	movs	r3, #0
 8009db4:	930e      	str	r3, [sp, #56]	@ 0x38
 8009db6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009db8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dba:	6013      	str	r3, [r2, #0]
 8009dbc:	f7ff ba6d 	b.w	800929a <_strtod_l+0x7a>
 8009dc0:	2a65      	cmp	r2, #101	@ 0x65
 8009dc2:	f43f ab68 	beq.w	8009496 <_strtod_l+0x276>
 8009dc6:	2a45      	cmp	r2, #69	@ 0x45
 8009dc8:	f43f ab65 	beq.w	8009496 <_strtod_l+0x276>
 8009dcc:	2301      	movs	r3, #1
 8009dce:	f7ff bba0 	b.w	8009512 <_strtod_l+0x2f2>
 8009dd2:	bf00      	nop
 8009dd4:	f3af 8000 	nop.w
 8009dd8:	ffc00000 	.word	0xffc00000
 8009ddc:	41dfffff 	.word	0x41dfffff
 8009de0:	94a03595 	.word	0x94a03595
 8009de4:	3fcfffff 	.word	0x3fcfffff

08009de8 <strtod>:
 8009de8:	460a      	mov	r2, r1
 8009dea:	4601      	mov	r1, r0
 8009dec:	4802      	ldr	r0, [pc, #8]	@ (8009df8 <strtod+0x10>)
 8009dee:	4b03      	ldr	r3, [pc, #12]	@ (8009dfc <strtod+0x14>)
 8009df0:	6800      	ldr	r0, [r0, #0]
 8009df2:	f7ff ba15 	b.w	8009220 <_strtod_l>
 8009df6:	bf00      	nop
 8009df8:	20000430 	.word	0x20000430
 8009dfc:	200002c4 	.word	0x200002c4

08009e00 <_strtol_l.isra.0>:
 8009e00:	2b24      	cmp	r3, #36	@ 0x24
 8009e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e06:	4686      	mov	lr, r0
 8009e08:	4690      	mov	r8, r2
 8009e0a:	d801      	bhi.n	8009e10 <_strtol_l.isra.0+0x10>
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d106      	bne.n	8009e1e <_strtol_l.isra.0+0x1e>
 8009e10:	f000 ff16 	bl	800ac40 <__errno>
 8009e14:	2316      	movs	r3, #22
 8009e16:	6003      	str	r3, [r0, #0]
 8009e18:	2000      	movs	r0, #0
 8009e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1e:	4834      	ldr	r0, [pc, #208]	@ (8009ef0 <_strtol_l.isra.0+0xf0>)
 8009e20:	460d      	mov	r5, r1
 8009e22:	462a      	mov	r2, r5
 8009e24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e28:	5d06      	ldrb	r6, [r0, r4]
 8009e2a:	f016 0608 	ands.w	r6, r6, #8
 8009e2e:	d1f8      	bne.n	8009e22 <_strtol_l.isra.0+0x22>
 8009e30:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e32:	d110      	bne.n	8009e56 <_strtol_l.isra.0+0x56>
 8009e34:	782c      	ldrb	r4, [r5, #0]
 8009e36:	2601      	movs	r6, #1
 8009e38:	1c95      	adds	r5, r2, #2
 8009e3a:	f033 0210 	bics.w	r2, r3, #16
 8009e3e:	d115      	bne.n	8009e6c <_strtol_l.isra.0+0x6c>
 8009e40:	2c30      	cmp	r4, #48	@ 0x30
 8009e42:	d10d      	bne.n	8009e60 <_strtol_l.isra.0+0x60>
 8009e44:	782a      	ldrb	r2, [r5, #0]
 8009e46:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e4a:	2a58      	cmp	r2, #88	@ 0x58
 8009e4c:	d108      	bne.n	8009e60 <_strtol_l.isra.0+0x60>
 8009e4e:	786c      	ldrb	r4, [r5, #1]
 8009e50:	3502      	adds	r5, #2
 8009e52:	2310      	movs	r3, #16
 8009e54:	e00a      	b.n	8009e6c <_strtol_l.isra.0+0x6c>
 8009e56:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e58:	bf04      	itt	eq
 8009e5a:	782c      	ldrbeq	r4, [r5, #0]
 8009e5c:	1c95      	addeq	r5, r2, #2
 8009e5e:	e7ec      	b.n	8009e3a <_strtol_l.isra.0+0x3a>
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1f6      	bne.n	8009e52 <_strtol_l.isra.0+0x52>
 8009e64:	2c30      	cmp	r4, #48	@ 0x30
 8009e66:	bf14      	ite	ne
 8009e68:	230a      	movne	r3, #10
 8009e6a:	2308      	moveq	r3, #8
 8009e6c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e70:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009e74:	2200      	movs	r2, #0
 8009e76:	fbbc f9f3 	udiv	r9, ip, r3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009e80:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e84:	2f09      	cmp	r7, #9
 8009e86:	d80f      	bhi.n	8009ea8 <_strtol_l.isra.0+0xa8>
 8009e88:	463c      	mov	r4, r7
 8009e8a:	42a3      	cmp	r3, r4
 8009e8c:	dd1b      	ble.n	8009ec6 <_strtol_l.isra.0+0xc6>
 8009e8e:	1c57      	adds	r7, r2, #1
 8009e90:	d007      	beq.n	8009ea2 <_strtol_l.isra.0+0xa2>
 8009e92:	4581      	cmp	r9, r0
 8009e94:	d314      	bcc.n	8009ec0 <_strtol_l.isra.0+0xc0>
 8009e96:	d101      	bne.n	8009e9c <_strtol_l.isra.0+0x9c>
 8009e98:	45a2      	cmp	sl, r4
 8009e9a:	db11      	blt.n	8009ec0 <_strtol_l.isra.0+0xc0>
 8009e9c:	fb00 4003 	mla	r0, r0, r3, r4
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ea6:	e7eb      	b.n	8009e80 <_strtol_l.isra.0+0x80>
 8009ea8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009eac:	2f19      	cmp	r7, #25
 8009eae:	d801      	bhi.n	8009eb4 <_strtol_l.isra.0+0xb4>
 8009eb0:	3c37      	subs	r4, #55	@ 0x37
 8009eb2:	e7ea      	b.n	8009e8a <_strtol_l.isra.0+0x8a>
 8009eb4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009eb8:	2f19      	cmp	r7, #25
 8009eba:	d804      	bhi.n	8009ec6 <_strtol_l.isra.0+0xc6>
 8009ebc:	3c57      	subs	r4, #87	@ 0x57
 8009ebe:	e7e4      	b.n	8009e8a <_strtol_l.isra.0+0x8a>
 8009ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec4:	e7ed      	b.n	8009ea2 <_strtol_l.isra.0+0xa2>
 8009ec6:	1c53      	adds	r3, r2, #1
 8009ec8:	d108      	bne.n	8009edc <_strtol_l.isra.0+0xdc>
 8009eca:	2322      	movs	r3, #34	@ 0x22
 8009ecc:	f8ce 3000 	str.w	r3, [lr]
 8009ed0:	4660      	mov	r0, ip
 8009ed2:	f1b8 0f00 	cmp.w	r8, #0
 8009ed6:	d0a0      	beq.n	8009e1a <_strtol_l.isra.0+0x1a>
 8009ed8:	1e69      	subs	r1, r5, #1
 8009eda:	e006      	b.n	8009eea <_strtol_l.isra.0+0xea>
 8009edc:	b106      	cbz	r6, 8009ee0 <_strtol_l.isra.0+0xe0>
 8009ede:	4240      	negs	r0, r0
 8009ee0:	f1b8 0f00 	cmp.w	r8, #0
 8009ee4:	d099      	beq.n	8009e1a <_strtol_l.isra.0+0x1a>
 8009ee6:	2a00      	cmp	r2, #0
 8009ee8:	d1f6      	bne.n	8009ed8 <_strtol_l.isra.0+0xd8>
 8009eea:	f8c8 1000 	str.w	r1, [r8]
 8009eee:	e794      	b.n	8009e1a <_strtol_l.isra.0+0x1a>
 8009ef0:	0800ef69 	.word	0x0800ef69

08009ef4 <strtol>:
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	460a      	mov	r2, r1
 8009ef8:	4601      	mov	r1, r0
 8009efa:	4802      	ldr	r0, [pc, #8]	@ (8009f04 <strtol+0x10>)
 8009efc:	6800      	ldr	r0, [r0, #0]
 8009efe:	f7ff bf7f 	b.w	8009e00 <_strtol_l.isra.0>
 8009f02:	bf00      	nop
 8009f04:	20000430 	.word	0x20000430

08009f08 <__cvt>:
 8009f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f0c:	ec57 6b10 	vmov	r6, r7, d0
 8009f10:	2f00      	cmp	r7, #0
 8009f12:	460c      	mov	r4, r1
 8009f14:	4619      	mov	r1, r3
 8009f16:	463b      	mov	r3, r7
 8009f18:	bfbb      	ittet	lt
 8009f1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f1e:	461f      	movlt	r7, r3
 8009f20:	2300      	movge	r3, #0
 8009f22:	232d      	movlt	r3, #45	@ 0x2d
 8009f24:	700b      	strb	r3, [r1, #0]
 8009f26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f2c:	4691      	mov	r9, r2
 8009f2e:	f023 0820 	bic.w	r8, r3, #32
 8009f32:	bfbc      	itt	lt
 8009f34:	4632      	movlt	r2, r6
 8009f36:	4616      	movlt	r6, r2
 8009f38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f3c:	d005      	beq.n	8009f4a <__cvt+0x42>
 8009f3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f42:	d100      	bne.n	8009f46 <__cvt+0x3e>
 8009f44:	3401      	adds	r4, #1
 8009f46:	2102      	movs	r1, #2
 8009f48:	e000      	b.n	8009f4c <__cvt+0x44>
 8009f4a:	2103      	movs	r1, #3
 8009f4c:	ab03      	add	r3, sp, #12
 8009f4e:	9301      	str	r3, [sp, #4]
 8009f50:	ab02      	add	r3, sp, #8
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	ec47 6b10 	vmov	d0, r6, r7
 8009f58:	4653      	mov	r3, sl
 8009f5a:	4622      	mov	r2, r4
 8009f5c:	f000 ff5c 	bl	800ae18 <_dtoa_r>
 8009f60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009f64:	4605      	mov	r5, r0
 8009f66:	d119      	bne.n	8009f9c <__cvt+0x94>
 8009f68:	f019 0f01 	tst.w	r9, #1
 8009f6c:	d00e      	beq.n	8009f8c <__cvt+0x84>
 8009f6e:	eb00 0904 	add.w	r9, r0, r4
 8009f72:	2200      	movs	r2, #0
 8009f74:	2300      	movs	r3, #0
 8009f76:	4630      	mov	r0, r6
 8009f78:	4639      	mov	r1, r7
 8009f7a:	f7f6 fdb5 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f7e:	b108      	cbz	r0, 8009f84 <__cvt+0x7c>
 8009f80:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f84:	2230      	movs	r2, #48	@ 0x30
 8009f86:	9b03      	ldr	r3, [sp, #12]
 8009f88:	454b      	cmp	r3, r9
 8009f8a:	d31e      	bcc.n	8009fca <__cvt+0xc2>
 8009f8c:	9b03      	ldr	r3, [sp, #12]
 8009f8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f90:	1b5b      	subs	r3, r3, r5
 8009f92:	4628      	mov	r0, r5
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	b004      	add	sp, #16
 8009f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fa0:	eb00 0904 	add.w	r9, r0, r4
 8009fa4:	d1e5      	bne.n	8009f72 <__cvt+0x6a>
 8009fa6:	7803      	ldrb	r3, [r0, #0]
 8009fa8:	2b30      	cmp	r3, #48	@ 0x30
 8009faa:	d10a      	bne.n	8009fc2 <__cvt+0xba>
 8009fac:	2200      	movs	r2, #0
 8009fae:	2300      	movs	r3, #0
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	f7f6 fd98 	bl	8000ae8 <__aeabi_dcmpeq>
 8009fb8:	b918      	cbnz	r0, 8009fc2 <__cvt+0xba>
 8009fba:	f1c4 0401 	rsb	r4, r4, #1
 8009fbe:	f8ca 4000 	str.w	r4, [sl]
 8009fc2:	f8da 3000 	ldr.w	r3, [sl]
 8009fc6:	4499      	add	r9, r3
 8009fc8:	e7d3      	b.n	8009f72 <__cvt+0x6a>
 8009fca:	1c59      	adds	r1, r3, #1
 8009fcc:	9103      	str	r1, [sp, #12]
 8009fce:	701a      	strb	r2, [r3, #0]
 8009fd0:	e7d9      	b.n	8009f86 <__cvt+0x7e>

08009fd2 <__exponent>:
 8009fd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fd4:	2900      	cmp	r1, #0
 8009fd6:	bfba      	itte	lt
 8009fd8:	4249      	neglt	r1, r1
 8009fda:	232d      	movlt	r3, #45	@ 0x2d
 8009fdc:	232b      	movge	r3, #43	@ 0x2b
 8009fde:	2909      	cmp	r1, #9
 8009fe0:	7002      	strb	r2, [r0, #0]
 8009fe2:	7043      	strb	r3, [r0, #1]
 8009fe4:	dd29      	ble.n	800a03a <__exponent+0x68>
 8009fe6:	f10d 0307 	add.w	r3, sp, #7
 8009fea:	461d      	mov	r5, r3
 8009fec:	270a      	movs	r7, #10
 8009fee:	461a      	mov	r2, r3
 8009ff0:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ff4:	fb07 1416 	mls	r4, r7, r6, r1
 8009ff8:	3430      	adds	r4, #48	@ 0x30
 8009ffa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ffe:	460c      	mov	r4, r1
 800a000:	2c63      	cmp	r4, #99	@ 0x63
 800a002:	f103 33ff 	add.w	r3, r3, #4294967295
 800a006:	4631      	mov	r1, r6
 800a008:	dcf1      	bgt.n	8009fee <__exponent+0x1c>
 800a00a:	3130      	adds	r1, #48	@ 0x30
 800a00c:	1e94      	subs	r4, r2, #2
 800a00e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a012:	1c41      	adds	r1, r0, #1
 800a014:	4623      	mov	r3, r4
 800a016:	42ab      	cmp	r3, r5
 800a018:	d30a      	bcc.n	800a030 <__exponent+0x5e>
 800a01a:	f10d 0309 	add.w	r3, sp, #9
 800a01e:	1a9b      	subs	r3, r3, r2
 800a020:	42ac      	cmp	r4, r5
 800a022:	bf88      	it	hi
 800a024:	2300      	movhi	r3, #0
 800a026:	3302      	adds	r3, #2
 800a028:	4403      	add	r3, r0
 800a02a:	1a18      	subs	r0, r3, r0
 800a02c:	b003      	add	sp, #12
 800a02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a030:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a034:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a038:	e7ed      	b.n	800a016 <__exponent+0x44>
 800a03a:	2330      	movs	r3, #48	@ 0x30
 800a03c:	3130      	adds	r1, #48	@ 0x30
 800a03e:	7083      	strb	r3, [r0, #2]
 800a040:	70c1      	strb	r1, [r0, #3]
 800a042:	1d03      	adds	r3, r0, #4
 800a044:	e7f1      	b.n	800a02a <__exponent+0x58>
	...

0800a048 <_printf_float>:
 800a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	b08d      	sub	sp, #52	@ 0x34
 800a04e:	460c      	mov	r4, r1
 800a050:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a054:	4616      	mov	r6, r2
 800a056:	461f      	mov	r7, r3
 800a058:	4605      	mov	r5, r0
 800a05a:	f000 fd49 	bl	800aaf0 <_localeconv_r>
 800a05e:	6803      	ldr	r3, [r0, #0]
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	4618      	mov	r0, r3
 800a064:	f7f6 f914 	bl	8000290 <strlen>
 800a068:	2300      	movs	r3, #0
 800a06a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a06c:	f8d8 3000 	ldr.w	r3, [r8]
 800a070:	9005      	str	r0, [sp, #20]
 800a072:	3307      	adds	r3, #7
 800a074:	f023 0307 	bic.w	r3, r3, #7
 800a078:	f103 0208 	add.w	r2, r3, #8
 800a07c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a080:	f8d4 b000 	ldr.w	fp, [r4]
 800a084:	f8c8 2000 	str.w	r2, [r8]
 800a088:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a08c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a090:	9307      	str	r3, [sp, #28]
 800a092:	f8cd 8018 	str.w	r8, [sp, #24]
 800a096:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a09a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a09e:	4b9c      	ldr	r3, [pc, #624]	@ (800a310 <_printf_float+0x2c8>)
 800a0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a4:	f7f6 fd52 	bl	8000b4c <__aeabi_dcmpun>
 800a0a8:	bb70      	cbnz	r0, 800a108 <_printf_float+0xc0>
 800a0aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0ae:	4b98      	ldr	r3, [pc, #608]	@ (800a310 <_printf_float+0x2c8>)
 800a0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0b4:	f7f6 fd2c 	bl	8000b10 <__aeabi_dcmple>
 800a0b8:	bb30      	cbnz	r0, 800a108 <_printf_float+0xc0>
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4640      	mov	r0, r8
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	f7f6 fd1b 	bl	8000afc <__aeabi_dcmplt>
 800a0c6:	b110      	cbz	r0, 800a0ce <_printf_float+0x86>
 800a0c8:	232d      	movs	r3, #45	@ 0x2d
 800a0ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0ce:	4a91      	ldr	r2, [pc, #580]	@ (800a314 <_printf_float+0x2cc>)
 800a0d0:	4b91      	ldr	r3, [pc, #580]	@ (800a318 <_printf_float+0x2d0>)
 800a0d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0d6:	bf8c      	ite	hi
 800a0d8:	4690      	movhi	r8, r2
 800a0da:	4698      	movls	r8, r3
 800a0dc:	2303      	movs	r3, #3
 800a0de:	6123      	str	r3, [r4, #16]
 800a0e0:	f02b 0304 	bic.w	r3, fp, #4
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	f04f 0900 	mov.w	r9, #0
 800a0ea:	9700      	str	r7, [sp, #0]
 800a0ec:	4633      	mov	r3, r6
 800a0ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a0f0:	4621      	mov	r1, r4
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	f000 f9d2 	bl	800a49c <_printf_common>
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	f040 808d 	bne.w	800a218 <_printf_float+0x1d0>
 800a0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a102:	b00d      	add	sp, #52	@ 0x34
 800a104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a108:	4642      	mov	r2, r8
 800a10a:	464b      	mov	r3, r9
 800a10c:	4640      	mov	r0, r8
 800a10e:	4649      	mov	r1, r9
 800a110:	f7f6 fd1c 	bl	8000b4c <__aeabi_dcmpun>
 800a114:	b140      	cbz	r0, 800a128 <_printf_float+0xe0>
 800a116:	464b      	mov	r3, r9
 800a118:	2b00      	cmp	r3, #0
 800a11a:	bfbc      	itt	lt
 800a11c:	232d      	movlt	r3, #45	@ 0x2d
 800a11e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a122:	4a7e      	ldr	r2, [pc, #504]	@ (800a31c <_printf_float+0x2d4>)
 800a124:	4b7e      	ldr	r3, [pc, #504]	@ (800a320 <_printf_float+0x2d8>)
 800a126:	e7d4      	b.n	800a0d2 <_printf_float+0x8a>
 800a128:	6863      	ldr	r3, [r4, #4]
 800a12a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a12e:	9206      	str	r2, [sp, #24]
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	d13b      	bne.n	800a1ac <_printf_float+0x164>
 800a134:	2306      	movs	r3, #6
 800a136:	6063      	str	r3, [r4, #4]
 800a138:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a13c:	2300      	movs	r3, #0
 800a13e:	6022      	str	r2, [r4, #0]
 800a140:	9303      	str	r3, [sp, #12]
 800a142:	ab0a      	add	r3, sp, #40	@ 0x28
 800a144:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a148:	ab09      	add	r3, sp, #36	@ 0x24
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	6861      	ldr	r1, [r4, #4]
 800a14e:	ec49 8b10 	vmov	d0, r8, r9
 800a152:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a156:	4628      	mov	r0, r5
 800a158:	f7ff fed6 	bl	8009f08 <__cvt>
 800a15c:	9b06      	ldr	r3, [sp, #24]
 800a15e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a160:	2b47      	cmp	r3, #71	@ 0x47
 800a162:	4680      	mov	r8, r0
 800a164:	d129      	bne.n	800a1ba <_printf_float+0x172>
 800a166:	1cc8      	adds	r0, r1, #3
 800a168:	db02      	blt.n	800a170 <_printf_float+0x128>
 800a16a:	6863      	ldr	r3, [r4, #4]
 800a16c:	4299      	cmp	r1, r3
 800a16e:	dd41      	ble.n	800a1f4 <_printf_float+0x1ac>
 800a170:	f1aa 0a02 	sub.w	sl, sl, #2
 800a174:	fa5f fa8a 	uxtb.w	sl, sl
 800a178:	3901      	subs	r1, #1
 800a17a:	4652      	mov	r2, sl
 800a17c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a180:	9109      	str	r1, [sp, #36]	@ 0x24
 800a182:	f7ff ff26 	bl	8009fd2 <__exponent>
 800a186:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a188:	1813      	adds	r3, r2, r0
 800a18a:	2a01      	cmp	r2, #1
 800a18c:	4681      	mov	r9, r0
 800a18e:	6123      	str	r3, [r4, #16]
 800a190:	dc02      	bgt.n	800a198 <_printf_float+0x150>
 800a192:	6822      	ldr	r2, [r4, #0]
 800a194:	07d2      	lsls	r2, r2, #31
 800a196:	d501      	bpl.n	800a19c <_printf_float+0x154>
 800a198:	3301      	adds	r3, #1
 800a19a:	6123      	str	r3, [r4, #16]
 800a19c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d0a2      	beq.n	800a0ea <_printf_float+0xa2>
 800a1a4:	232d      	movs	r3, #45	@ 0x2d
 800a1a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1aa:	e79e      	b.n	800a0ea <_printf_float+0xa2>
 800a1ac:	9a06      	ldr	r2, [sp, #24]
 800a1ae:	2a47      	cmp	r2, #71	@ 0x47
 800a1b0:	d1c2      	bne.n	800a138 <_printf_float+0xf0>
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1c0      	bne.n	800a138 <_printf_float+0xf0>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e7bd      	b.n	800a136 <_printf_float+0xee>
 800a1ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1be:	d9db      	bls.n	800a178 <_printf_float+0x130>
 800a1c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a1c4:	d118      	bne.n	800a1f8 <_printf_float+0x1b0>
 800a1c6:	2900      	cmp	r1, #0
 800a1c8:	6863      	ldr	r3, [r4, #4]
 800a1ca:	dd0b      	ble.n	800a1e4 <_printf_float+0x19c>
 800a1cc:	6121      	str	r1, [r4, #16]
 800a1ce:	b913      	cbnz	r3, 800a1d6 <_printf_float+0x18e>
 800a1d0:	6822      	ldr	r2, [r4, #0]
 800a1d2:	07d0      	lsls	r0, r2, #31
 800a1d4:	d502      	bpl.n	800a1dc <_printf_float+0x194>
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	440b      	add	r3, r1
 800a1da:	6123      	str	r3, [r4, #16]
 800a1dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a1de:	f04f 0900 	mov.w	r9, #0
 800a1e2:	e7db      	b.n	800a19c <_printf_float+0x154>
 800a1e4:	b913      	cbnz	r3, 800a1ec <_printf_float+0x1a4>
 800a1e6:	6822      	ldr	r2, [r4, #0]
 800a1e8:	07d2      	lsls	r2, r2, #31
 800a1ea:	d501      	bpl.n	800a1f0 <_printf_float+0x1a8>
 800a1ec:	3302      	adds	r3, #2
 800a1ee:	e7f4      	b.n	800a1da <_printf_float+0x192>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e7f2      	b.n	800a1da <_printf_float+0x192>
 800a1f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a1f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1fa:	4299      	cmp	r1, r3
 800a1fc:	db05      	blt.n	800a20a <_printf_float+0x1c2>
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	6121      	str	r1, [r4, #16]
 800a202:	07d8      	lsls	r0, r3, #31
 800a204:	d5ea      	bpl.n	800a1dc <_printf_float+0x194>
 800a206:	1c4b      	adds	r3, r1, #1
 800a208:	e7e7      	b.n	800a1da <_printf_float+0x192>
 800a20a:	2900      	cmp	r1, #0
 800a20c:	bfd4      	ite	le
 800a20e:	f1c1 0202 	rsble	r2, r1, #2
 800a212:	2201      	movgt	r2, #1
 800a214:	4413      	add	r3, r2
 800a216:	e7e0      	b.n	800a1da <_printf_float+0x192>
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	055a      	lsls	r2, r3, #21
 800a21c:	d407      	bmi.n	800a22e <_printf_float+0x1e6>
 800a21e:	6923      	ldr	r3, [r4, #16]
 800a220:	4642      	mov	r2, r8
 800a222:	4631      	mov	r1, r6
 800a224:	4628      	mov	r0, r5
 800a226:	47b8      	blx	r7
 800a228:	3001      	adds	r0, #1
 800a22a:	d12b      	bne.n	800a284 <_printf_float+0x23c>
 800a22c:	e767      	b.n	800a0fe <_printf_float+0xb6>
 800a22e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a232:	f240 80dd 	bls.w	800a3f0 <_printf_float+0x3a8>
 800a236:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a23a:	2200      	movs	r2, #0
 800a23c:	2300      	movs	r3, #0
 800a23e:	f7f6 fc53 	bl	8000ae8 <__aeabi_dcmpeq>
 800a242:	2800      	cmp	r0, #0
 800a244:	d033      	beq.n	800a2ae <_printf_float+0x266>
 800a246:	4a37      	ldr	r2, [pc, #220]	@ (800a324 <_printf_float+0x2dc>)
 800a248:	2301      	movs	r3, #1
 800a24a:	4631      	mov	r1, r6
 800a24c:	4628      	mov	r0, r5
 800a24e:	47b8      	blx	r7
 800a250:	3001      	adds	r0, #1
 800a252:	f43f af54 	beq.w	800a0fe <_printf_float+0xb6>
 800a256:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a25a:	4543      	cmp	r3, r8
 800a25c:	db02      	blt.n	800a264 <_printf_float+0x21c>
 800a25e:	6823      	ldr	r3, [r4, #0]
 800a260:	07d8      	lsls	r0, r3, #31
 800a262:	d50f      	bpl.n	800a284 <_printf_float+0x23c>
 800a264:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a268:	4631      	mov	r1, r6
 800a26a:	4628      	mov	r0, r5
 800a26c:	47b8      	blx	r7
 800a26e:	3001      	adds	r0, #1
 800a270:	f43f af45 	beq.w	800a0fe <_printf_float+0xb6>
 800a274:	f04f 0900 	mov.w	r9, #0
 800a278:	f108 38ff 	add.w	r8, r8, #4294967295
 800a27c:	f104 0a1a 	add.w	sl, r4, #26
 800a280:	45c8      	cmp	r8, r9
 800a282:	dc09      	bgt.n	800a298 <_printf_float+0x250>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	079b      	lsls	r3, r3, #30
 800a288:	f100 8103 	bmi.w	800a492 <_printf_float+0x44a>
 800a28c:	68e0      	ldr	r0, [r4, #12]
 800a28e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a290:	4298      	cmp	r0, r3
 800a292:	bfb8      	it	lt
 800a294:	4618      	movlt	r0, r3
 800a296:	e734      	b.n	800a102 <_printf_float+0xba>
 800a298:	2301      	movs	r3, #1
 800a29a:	4652      	mov	r2, sl
 800a29c:	4631      	mov	r1, r6
 800a29e:	4628      	mov	r0, r5
 800a2a0:	47b8      	blx	r7
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	f43f af2b 	beq.w	800a0fe <_printf_float+0xb6>
 800a2a8:	f109 0901 	add.w	r9, r9, #1
 800a2ac:	e7e8      	b.n	800a280 <_printf_float+0x238>
 800a2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	dc39      	bgt.n	800a328 <_printf_float+0x2e0>
 800a2b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a324 <_printf_float+0x2dc>)
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	47b8      	blx	r7
 800a2be:	3001      	adds	r0, #1
 800a2c0:	f43f af1d 	beq.w	800a0fe <_printf_float+0xb6>
 800a2c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a2c8:	ea59 0303 	orrs.w	r3, r9, r3
 800a2cc:	d102      	bne.n	800a2d4 <_printf_float+0x28c>
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	07d9      	lsls	r1, r3, #31
 800a2d2:	d5d7      	bpl.n	800a284 <_printf_float+0x23c>
 800a2d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2d8:	4631      	mov	r1, r6
 800a2da:	4628      	mov	r0, r5
 800a2dc:	47b8      	blx	r7
 800a2de:	3001      	adds	r0, #1
 800a2e0:	f43f af0d 	beq.w	800a0fe <_printf_float+0xb6>
 800a2e4:	f04f 0a00 	mov.w	sl, #0
 800a2e8:	f104 0b1a 	add.w	fp, r4, #26
 800a2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ee:	425b      	negs	r3, r3
 800a2f0:	4553      	cmp	r3, sl
 800a2f2:	dc01      	bgt.n	800a2f8 <_printf_float+0x2b0>
 800a2f4:	464b      	mov	r3, r9
 800a2f6:	e793      	b.n	800a220 <_printf_float+0x1d8>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	465a      	mov	r2, fp
 800a2fc:	4631      	mov	r1, r6
 800a2fe:	4628      	mov	r0, r5
 800a300:	47b8      	blx	r7
 800a302:	3001      	adds	r0, #1
 800a304:	f43f aefb 	beq.w	800a0fe <_printf_float+0xb6>
 800a308:	f10a 0a01 	add.w	sl, sl, #1
 800a30c:	e7ee      	b.n	800a2ec <_printf_float+0x2a4>
 800a30e:	bf00      	nop
 800a310:	7fefffff 	.word	0x7fefffff
 800a314:	0800ecf2 	.word	0x0800ecf2
 800a318:	0800ecee 	.word	0x0800ecee
 800a31c:	0800ecfa 	.word	0x0800ecfa
 800a320:	0800ecf6 	.word	0x0800ecf6
 800a324:	0800ecfe 	.word	0x0800ecfe
 800a328:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a32a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a32e:	4553      	cmp	r3, sl
 800a330:	bfa8      	it	ge
 800a332:	4653      	movge	r3, sl
 800a334:	2b00      	cmp	r3, #0
 800a336:	4699      	mov	r9, r3
 800a338:	dc36      	bgt.n	800a3a8 <_printf_float+0x360>
 800a33a:	f04f 0b00 	mov.w	fp, #0
 800a33e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a342:	f104 021a 	add.w	r2, r4, #26
 800a346:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a348:	9306      	str	r3, [sp, #24]
 800a34a:	eba3 0309 	sub.w	r3, r3, r9
 800a34e:	455b      	cmp	r3, fp
 800a350:	dc31      	bgt.n	800a3b6 <_printf_float+0x36e>
 800a352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a354:	459a      	cmp	sl, r3
 800a356:	dc3a      	bgt.n	800a3ce <_printf_float+0x386>
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	07da      	lsls	r2, r3, #31
 800a35c:	d437      	bmi.n	800a3ce <_printf_float+0x386>
 800a35e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a360:	ebaa 0903 	sub.w	r9, sl, r3
 800a364:	9b06      	ldr	r3, [sp, #24]
 800a366:	ebaa 0303 	sub.w	r3, sl, r3
 800a36a:	4599      	cmp	r9, r3
 800a36c:	bfa8      	it	ge
 800a36e:	4699      	movge	r9, r3
 800a370:	f1b9 0f00 	cmp.w	r9, #0
 800a374:	dc33      	bgt.n	800a3de <_printf_float+0x396>
 800a376:	f04f 0800 	mov.w	r8, #0
 800a37a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a37e:	f104 0b1a 	add.w	fp, r4, #26
 800a382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a384:	ebaa 0303 	sub.w	r3, sl, r3
 800a388:	eba3 0309 	sub.w	r3, r3, r9
 800a38c:	4543      	cmp	r3, r8
 800a38e:	f77f af79 	ble.w	800a284 <_printf_float+0x23c>
 800a392:	2301      	movs	r3, #1
 800a394:	465a      	mov	r2, fp
 800a396:	4631      	mov	r1, r6
 800a398:	4628      	mov	r0, r5
 800a39a:	47b8      	blx	r7
 800a39c:	3001      	adds	r0, #1
 800a39e:	f43f aeae 	beq.w	800a0fe <_printf_float+0xb6>
 800a3a2:	f108 0801 	add.w	r8, r8, #1
 800a3a6:	e7ec      	b.n	800a382 <_printf_float+0x33a>
 800a3a8:	4642      	mov	r2, r8
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	47b8      	blx	r7
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	d1c2      	bne.n	800a33a <_printf_float+0x2f2>
 800a3b4:	e6a3      	b.n	800a0fe <_printf_float+0xb6>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	9206      	str	r2, [sp, #24]
 800a3be:	47b8      	blx	r7
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	f43f ae9c 	beq.w	800a0fe <_printf_float+0xb6>
 800a3c6:	9a06      	ldr	r2, [sp, #24]
 800a3c8:	f10b 0b01 	add.w	fp, fp, #1
 800a3cc:	e7bb      	b.n	800a346 <_printf_float+0x2fe>
 800a3ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3d2:	4631      	mov	r1, r6
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	47b8      	blx	r7
 800a3d8:	3001      	adds	r0, #1
 800a3da:	d1c0      	bne.n	800a35e <_printf_float+0x316>
 800a3dc:	e68f      	b.n	800a0fe <_printf_float+0xb6>
 800a3de:	9a06      	ldr	r2, [sp, #24]
 800a3e0:	464b      	mov	r3, r9
 800a3e2:	4442      	add	r2, r8
 800a3e4:	4631      	mov	r1, r6
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	47b8      	blx	r7
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	d1c3      	bne.n	800a376 <_printf_float+0x32e>
 800a3ee:	e686      	b.n	800a0fe <_printf_float+0xb6>
 800a3f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a3f4:	f1ba 0f01 	cmp.w	sl, #1
 800a3f8:	dc01      	bgt.n	800a3fe <_printf_float+0x3b6>
 800a3fa:	07db      	lsls	r3, r3, #31
 800a3fc:	d536      	bpl.n	800a46c <_printf_float+0x424>
 800a3fe:	2301      	movs	r3, #1
 800a400:	4642      	mov	r2, r8
 800a402:	4631      	mov	r1, r6
 800a404:	4628      	mov	r0, r5
 800a406:	47b8      	blx	r7
 800a408:	3001      	adds	r0, #1
 800a40a:	f43f ae78 	beq.w	800a0fe <_printf_float+0xb6>
 800a40e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a412:	4631      	mov	r1, r6
 800a414:	4628      	mov	r0, r5
 800a416:	47b8      	blx	r7
 800a418:	3001      	adds	r0, #1
 800a41a:	f43f ae70 	beq.w	800a0fe <_printf_float+0xb6>
 800a41e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a422:	2200      	movs	r2, #0
 800a424:	2300      	movs	r3, #0
 800a426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a42a:	f7f6 fb5d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a42e:	b9c0      	cbnz	r0, 800a462 <_printf_float+0x41a>
 800a430:	4653      	mov	r3, sl
 800a432:	f108 0201 	add.w	r2, r8, #1
 800a436:	4631      	mov	r1, r6
 800a438:	4628      	mov	r0, r5
 800a43a:	47b8      	blx	r7
 800a43c:	3001      	adds	r0, #1
 800a43e:	d10c      	bne.n	800a45a <_printf_float+0x412>
 800a440:	e65d      	b.n	800a0fe <_printf_float+0xb6>
 800a442:	2301      	movs	r3, #1
 800a444:	465a      	mov	r2, fp
 800a446:	4631      	mov	r1, r6
 800a448:	4628      	mov	r0, r5
 800a44a:	47b8      	blx	r7
 800a44c:	3001      	adds	r0, #1
 800a44e:	f43f ae56 	beq.w	800a0fe <_printf_float+0xb6>
 800a452:	f108 0801 	add.w	r8, r8, #1
 800a456:	45d0      	cmp	r8, sl
 800a458:	dbf3      	blt.n	800a442 <_printf_float+0x3fa>
 800a45a:	464b      	mov	r3, r9
 800a45c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a460:	e6df      	b.n	800a222 <_printf_float+0x1da>
 800a462:	f04f 0800 	mov.w	r8, #0
 800a466:	f104 0b1a 	add.w	fp, r4, #26
 800a46a:	e7f4      	b.n	800a456 <_printf_float+0x40e>
 800a46c:	2301      	movs	r3, #1
 800a46e:	4642      	mov	r2, r8
 800a470:	e7e1      	b.n	800a436 <_printf_float+0x3ee>
 800a472:	2301      	movs	r3, #1
 800a474:	464a      	mov	r2, r9
 800a476:	4631      	mov	r1, r6
 800a478:	4628      	mov	r0, r5
 800a47a:	47b8      	blx	r7
 800a47c:	3001      	adds	r0, #1
 800a47e:	f43f ae3e 	beq.w	800a0fe <_printf_float+0xb6>
 800a482:	f108 0801 	add.w	r8, r8, #1
 800a486:	68e3      	ldr	r3, [r4, #12]
 800a488:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a48a:	1a5b      	subs	r3, r3, r1
 800a48c:	4543      	cmp	r3, r8
 800a48e:	dcf0      	bgt.n	800a472 <_printf_float+0x42a>
 800a490:	e6fc      	b.n	800a28c <_printf_float+0x244>
 800a492:	f04f 0800 	mov.w	r8, #0
 800a496:	f104 0919 	add.w	r9, r4, #25
 800a49a:	e7f4      	b.n	800a486 <_printf_float+0x43e>

0800a49c <_printf_common>:
 800a49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a0:	4616      	mov	r6, r2
 800a4a2:	4698      	mov	r8, r3
 800a4a4:	688a      	ldr	r2, [r1, #8]
 800a4a6:	690b      	ldr	r3, [r1, #16]
 800a4a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	bfb8      	it	lt
 800a4b0:	4613      	movlt	r3, r2
 800a4b2:	6033      	str	r3, [r6, #0]
 800a4b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	b10a      	cbz	r2, 800a4c2 <_printf_common+0x26>
 800a4be:	3301      	adds	r3, #1
 800a4c0:	6033      	str	r3, [r6, #0]
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	0699      	lsls	r1, r3, #26
 800a4c6:	bf42      	ittt	mi
 800a4c8:	6833      	ldrmi	r3, [r6, #0]
 800a4ca:	3302      	addmi	r3, #2
 800a4cc:	6033      	strmi	r3, [r6, #0]
 800a4ce:	6825      	ldr	r5, [r4, #0]
 800a4d0:	f015 0506 	ands.w	r5, r5, #6
 800a4d4:	d106      	bne.n	800a4e4 <_printf_common+0x48>
 800a4d6:	f104 0a19 	add.w	sl, r4, #25
 800a4da:	68e3      	ldr	r3, [r4, #12]
 800a4dc:	6832      	ldr	r2, [r6, #0]
 800a4de:	1a9b      	subs	r3, r3, r2
 800a4e0:	42ab      	cmp	r3, r5
 800a4e2:	dc26      	bgt.n	800a532 <_printf_common+0x96>
 800a4e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4e8:	6822      	ldr	r2, [r4, #0]
 800a4ea:	3b00      	subs	r3, #0
 800a4ec:	bf18      	it	ne
 800a4ee:	2301      	movne	r3, #1
 800a4f0:	0692      	lsls	r2, r2, #26
 800a4f2:	d42b      	bmi.n	800a54c <_printf_common+0xb0>
 800a4f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a4f8:	4641      	mov	r1, r8
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	47c8      	blx	r9
 800a4fe:	3001      	adds	r0, #1
 800a500:	d01e      	beq.n	800a540 <_printf_common+0xa4>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	6922      	ldr	r2, [r4, #16]
 800a506:	f003 0306 	and.w	r3, r3, #6
 800a50a:	2b04      	cmp	r3, #4
 800a50c:	bf02      	ittt	eq
 800a50e:	68e5      	ldreq	r5, [r4, #12]
 800a510:	6833      	ldreq	r3, [r6, #0]
 800a512:	1aed      	subeq	r5, r5, r3
 800a514:	68a3      	ldr	r3, [r4, #8]
 800a516:	bf0c      	ite	eq
 800a518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a51c:	2500      	movne	r5, #0
 800a51e:	4293      	cmp	r3, r2
 800a520:	bfc4      	itt	gt
 800a522:	1a9b      	subgt	r3, r3, r2
 800a524:	18ed      	addgt	r5, r5, r3
 800a526:	2600      	movs	r6, #0
 800a528:	341a      	adds	r4, #26
 800a52a:	42b5      	cmp	r5, r6
 800a52c:	d11a      	bne.n	800a564 <_printf_common+0xc8>
 800a52e:	2000      	movs	r0, #0
 800a530:	e008      	b.n	800a544 <_printf_common+0xa8>
 800a532:	2301      	movs	r3, #1
 800a534:	4652      	mov	r2, sl
 800a536:	4641      	mov	r1, r8
 800a538:	4638      	mov	r0, r7
 800a53a:	47c8      	blx	r9
 800a53c:	3001      	adds	r0, #1
 800a53e:	d103      	bne.n	800a548 <_printf_common+0xac>
 800a540:	f04f 30ff 	mov.w	r0, #4294967295
 800a544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a548:	3501      	adds	r5, #1
 800a54a:	e7c6      	b.n	800a4da <_printf_common+0x3e>
 800a54c:	18e1      	adds	r1, r4, r3
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	2030      	movs	r0, #48	@ 0x30
 800a552:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a556:	4422      	add	r2, r4
 800a558:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a55c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a560:	3302      	adds	r3, #2
 800a562:	e7c7      	b.n	800a4f4 <_printf_common+0x58>
 800a564:	2301      	movs	r3, #1
 800a566:	4622      	mov	r2, r4
 800a568:	4641      	mov	r1, r8
 800a56a:	4638      	mov	r0, r7
 800a56c:	47c8      	blx	r9
 800a56e:	3001      	adds	r0, #1
 800a570:	d0e6      	beq.n	800a540 <_printf_common+0xa4>
 800a572:	3601      	adds	r6, #1
 800a574:	e7d9      	b.n	800a52a <_printf_common+0x8e>
	...

0800a578 <_printf_i>:
 800a578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a57c:	7e0f      	ldrb	r7, [r1, #24]
 800a57e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a580:	2f78      	cmp	r7, #120	@ 0x78
 800a582:	4691      	mov	r9, r2
 800a584:	4680      	mov	r8, r0
 800a586:	460c      	mov	r4, r1
 800a588:	469a      	mov	sl, r3
 800a58a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a58e:	d807      	bhi.n	800a5a0 <_printf_i+0x28>
 800a590:	2f62      	cmp	r7, #98	@ 0x62
 800a592:	d80a      	bhi.n	800a5aa <_printf_i+0x32>
 800a594:	2f00      	cmp	r7, #0
 800a596:	f000 80d1 	beq.w	800a73c <_printf_i+0x1c4>
 800a59a:	2f58      	cmp	r7, #88	@ 0x58
 800a59c:	f000 80b8 	beq.w	800a710 <_printf_i+0x198>
 800a5a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5a8:	e03a      	b.n	800a620 <_printf_i+0xa8>
 800a5aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5ae:	2b15      	cmp	r3, #21
 800a5b0:	d8f6      	bhi.n	800a5a0 <_printf_i+0x28>
 800a5b2:	a101      	add	r1, pc, #4	@ (adr r1, 800a5b8 <_printf_i+0x40>)
 800a5b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5b8:	0800a611 	.word	0x0800a611
 800a5bc:	0800a625 	.word	0x0800a625
 800a5c0:	0800a5a1 	.word	0x0800a5a1
 800a5c4:	0800a5a1 	.word	0x0800a5a1
 800a5c8:	0800a5a1 	.word	0x0800a5a1
 800a5cc:	0800a5a1 	.word	0x0800a5a1
 800a5d0:	0800a625 	.word	0x0800a625
 800a5d4:	0800a5a1 	.word	0x0800a5a1
 800a5d8:	0800a5a1 	.word	0x0800a5a1
 800a5dc:	0800a5a1 	.word	0x0800a5a1
 800a5e0:	0800a5a1 	.word	0x0800a5a1
 800a5e4:	0800a723 	.word	0x0800a723
 800a5e8:	0800a64f 	.word	0x0800a64f
 800a5ec:	0800a6dd 	.word	0x0800a6dd
 800a5f0:	0800a5a1 	.word	0x0800a5a1
 800a5f4:	0800a5a1 	.word	0x0800a5a1
 800a5f8:	0800a745 	.word	0x0800a745
 800a5fc:	0800a5a1 	.word	0x0800a5a1
 800a600:	0800a64f 	.word	0x0800a64f
 800a604:	0800a5a1 	.word	0x0800a5a1
 800a608:	0800a5a1 	.word	0x0800a5a1
 800a60c:	0800a6e5 	.word	0x0800a6e5
 800a610:	6833      	ldr	r3, [r6, #0]
 800a612:	1d1a      	adds	r2, r3, #4
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6032      	str	r2, [r6, #0]
 800a618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a61c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a620:	2301      	movs	r3, #1
 800a622:	e09c      	b.n	800a75e <_printf_i+0x1e6>
 800a624:	6833      	ldr	r3, [r6, #0]
 800a626:	6820      	ldr	r0, [r4, #0]
 800a628:	1d19      	adds	r1, r3, #4
 800a62a:	6031      	str	r1, [r6, #0]
 800a62c:	0606      	lsls	r6, r0, #24
 800a62e:	d501      	bpl.n	800a634 <_printf_i+0xbc>
 800a630:	681d      	ldr	r5, [r3, #0]
 800a632:	e003      	b.n	800a63c <_printf_i+0xc4>
 800a634:	0645      	lsls	r5, r0, #25
 800a636:	d5fb      	bpl.n	800a630 <_printf_i+0xb8>
 800a638:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a63c:	2d00      	cmp	r5, #0
 800a63e:	da03      	bge.n	800a648 <_printf_i+0xd0>
 800a640:	232d      	movs	r3, #45	@ 0x2d
 800a642:	426d      	negs	r5, r5
 800a644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a648:	4858      	ldr	r0, [pc, #352]	@ (800a7ac <_printf_i+0x234>)
 800a64a:	230a      	movs	r3, #10
 800a64c:	e011      	b.n	800a672 <_printf_i+0xfa>
 800a64e:	6821      	ldr	r1, [r4, #0]
 800a650:	6833      	ldr	r3, [r6, #0]
 800a652:	0608      	lsls	r0, r1, #24
 800a654:	f853 5b04 	ldr.w	r5, [r3], #4
 800a658:	d402      	bmi.n	800a660 <_printf_i+0xe8>
 800a65a:	0649      	lsls	r1, r1, #25
 800a65c:	bf48      	it	mi
 800a65e:	b2ad      	uxthmi	r5, r5
 800a660:	2f6f      	cmp	r7, #111	@ 0x6f
 800a662:	4852      	ldr	r0, [pc, #328]	@ (800a7ac <_printf_i+0x234>)
 800a664:	6033      	str	r3, [r6, #0]
 800a666:	bf14      	ite	ne
 800a668:	230a      	movne	r3, #10
 800a66a:	2308      	moveq	r3, #8
 800a66c:	2100      	movs	r1, #0
 800a66e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a672:	6866      	ldr	r6, [r4, #4]
 800a674:	60a6      	str	r6, [r4, #8]
 800a676:	2e00      	cmp	r6, #0
 800a678:	db05      	blt.n	800a686 <_printf_i+0x10e>
 800a67a:	6821      	ldr	r1, [r4, #0]
 800a67c:	432e      	orrs	r6, r5
 800a67e:	f021 0104 	bic.w	r1, r1, #4
 800a682:	6021      	str	r1, [r4, #0]
 800a684:	d04b      	beq.n	800a71e <_printf_i+0x1a6>
 800a686:	4616      	mov	r6, r2
 800a688:	fbb5 f1f3 	udiv	r1, r5, r3
 800a68c:	fb03 5711 	mls	r7, r3, r1, r5
 800a690:	5dc7      	ldrb	r7, [r0, r7]
 800a692:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a696:	462f      	mov	r7, r5
 800a698:	42bb      	cmp	r3, r7
 800a69a:	460d      	mov	r5, r1
 800a69c:	d9f4      	bls.n	800a688 <_printf_i+0x110>
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d10b      	bne.n	800a6ba <_printf_i+0x142>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	07df      	lsls	r7, r3, #31
 800a6a6:	d508      	bpl.n	800a6ba <_printf_i+0x142>
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	6861      	ldr	r1, [r4, #4]
 800a6ac:	4299      	cmp	r1, r3
 800a6ae:	bfde      	ittt	le
 800a6b0:	2330      	movle	r3, #48	@ 0x30
 800a6b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6ba:	1b92      	subs	r2, r2, r6
 800a6bc:	6122      	str	r2, [r4, #16]
 800a6be:	f8cd a000 	str.w	sl, [sp]
 800a6c2:	464b      	mov	r3, r9
 800a6c4:	aa03      	add	r2, sp, #12
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	f7ff fee7 	bl	800a49c <_printf_common>
 800a6ce:	3001      	adds	r0, #1
 800a6d0:	d14a      	bne.n	800a768 <_printf_i+0x1f0>
 800a6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d6:	b004      	add	sp, #16
 800a6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	f043 0320 	orr.w	r3, r3, #32
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	4832      	ldr	r0, [pc, #200]	@ (800a7b0 <_printf_i+0x238>)
 800a6e6:	2778      	movs	r7, #120	@ 0x78
 800a6e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	6831      	ldr	r1, [r6, #0]
 800a6f0:	061f      	lsls	r7, r3, #24
 800a6f2:	f851 5b04 	ldr.w	r5, [r1], #4
 800a6f6:	d402      	bmi.n	800a6fe <_printf_i+0x186>
 800a6f8:	065f      	lsls	r7, r3, #25
 800a6fa:	bf48      	it	mi
 800a6fc:	b2ad      	uxthmi	r5, r5
 800a6fe:	6031      	str	r1, [r6, #0]
 800a700:	07d9      	lsls	r1, r3, #31
 800a702:	bf44      	itt	mi
 800a704:	f043 0320 	orrmi.w	r3, r3, #32
 800a708:	6023      	strmi	r3, [r4, #0]
 800a70a:	b11d      	cbz	r5, 800a714 <_printf_i+0x19c>
 800a70c:	2310      	movs	r3, #16
 800a70e:	e7ad      	b.n	800a66c <_printf_i+0xf4>
 800a710:	4826      	ldr	r0, [pc, #152]	@ (800a7ac <_printf_i+0x234>)
 800a712:	e7e9      	b.n	800a6e8 <_printf_i+0x170>
 800a714:	6823      	ldr	r3, [r4, #0]
 800a716:	f023 0320 	bic.w	r3, r3, #32
 800a71a:	6023      	str	r3, [r4, #0]
 800a71c:	e7f6      	b.n	800a70c <_printf_i+0x194>
 800a71e:	4616      	mov	r6, r2
 800a720:	e7bd      	b.n	800a69e <_printf_i+0x126>
 800a722:	6833      	ldr	r3, [r6, #0]
 800a724:	6825      	ldr	r5, [r4, #0]
 800a726:	6961      	ldr	r1, [r4, #20]
 800a728:	1d18      	adds	r0, r3, #4
 800a72a:	6030      	str	r0, [r6, #0]
 800a72c:	062e      	lsls	r6, r5, #24
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	d501      	bpl.n	800a736 <_printf_i+0x1be>
 800a732:	6019      	str	r1, [r3, #0]
 800a734:	e002      	b.n	800a73c <_printf_i+0x1c4>
 800a736:	0668      	lsls	r0, r5, #25
 800a738:	d5fb      	bpl.n	800a732 <_printf_i+0x1ba>
 800a73a:	8019      	strh	r1, [r3, #0]
 800a73c:	2300      	movs	r3, #0
 800a73e:	6123      	str	r3, [r4, #16]
 800a740:	4616      	mov	r6, r2
 800a742:	e7bc      	b.n	800a6be <_printf_i+0x146>
 800a744:	6833      	ldr	r3, [r6, #0]
 800a746:	1d1a      	adds	r2, r3, #4
 800a748:	6032      	str	r2, [r6, #0]
 800a74a:	681e      	ldr	r6, [r3, #0]
 800a74c:	6862      	ldr	r2, [r4, #4]
 800a74e:	2100      	movs	r1, #0
 800a750:	4630      	mov	r0, r6
 800a752:	f7f5 fd4d 	bl	80001f0 <memchr>
 800a756:	b108      	cbz	r0, 800a75c <_printf_i+0x1e4>
 800a758:	1b80      	subs	r0, r0, r6
 800a75a:	6060      	str	r0, [r4, #4]
 800a75c:	6863      	ldr	r3, [r4, #4]
 800a75e:	6123      	str	r3, [r4, #16]
 800a760:	2300      	movs	r3, #0
 800a762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a766:	e7aa      	b.n	800a6be <_printf_i+0x146>
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	4632      	mov	r2, r6
 800a76c:	4649      	mov	r1, r9
 800a76e:	4640      	mov	r0, r8
 800a770:	47d0      	blx	sl
 800a772:	3001      	adds	r0, #1
 800a774:	d0ad      	beq.n	800a6d2 <_printf_i+0x15a>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	079b      	lsls	r3, r3, #30
 800a77a:	d413      	bmi.n	800a7a4 <_printf_i+0x22c>
 800a77c:	68e0      	ldr	r0, [r4, #12]
 800a77e:	9b03      	ldr	r3, [sp, #12]
 800a780:	4298      	cmp	r0, r3
 800a782:	bfb8      	it	lt
 800a784:	4618      	movlt	r0, r3
 800a786:	e7a6      	b.n	800a6d6 <_printf_i+0x15e>
 800a788:	2301      	movs	r3, #1
 800a78a:	4632      	mov	r2, r6
 800a78c:	4649      	mov	r1, r9
 800a78e:	4640      	mov	r0, r8
 800a790:	47d0      	blx	sl
 800a792:	3001      	adds	r0, #1
 800a794:	d09d      	beq.n	800a6d2 <_printf_i+0x15a>
 800a796:	3501      	adds	r5, #1
 800a798:	68e3      	ldr	r3, [r4, #12]
 800a79a:	9903      	ldr	r1, [sp, #12]
 800a79c:	1a5b      	subs	r3, r3, r1
 800a79e:	42ab      	cmp	r3, r5
 800a7a0:	dcf2      	bgt.n	800a788 <_printf_i+0x210>
 800a7a2:	e7eb      	b.n	800a77c <_printf_i+0x204>
 800a7a4:	2500      	movs	r5, #0
 800a7a6:	f104 0619 	add.w	r6, r4, #25
 800a7aa:	e7f5      	b.n	800a798 <_printf_i+0x220>
 800a7ac:	0800ed00 	.word	0x0800ed00
 800a7b0:	0800ed11 	.word	0x0800ed11

0800a7b4 <std>:
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	b510      	push	{r4, lr}
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a7be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7c2:	6083      	str	r3, [r0, #8]
 800a7c4:	8181      	strh	r1, [r0, #12]
 800a7c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a7c8:	81c2      	strh	r2, [r0, #14]
 800a7ca:	6183      	str	r3, [r0, #24]
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	2208      	movs	r2, #8
 800a7d0:	305c      	adds	r0, #92	@ 0x5c
 800a7d2:	f000 f916 	bl	800aa02 <memset>
 800a7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a80c <std+0x58>)
 800a7d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a7da:	4b0d      	ldr	r3, [pc, #52]	@ (800a810 <std+0x5c>)
 800a7dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a7de:	4b0d      	ldr	r3, [pc, #52]	@ (800a814 <std+0x60>)
 800a7e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a818 <std+0x64>)
 800a7e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a81c <std+0x68>)
 800a7e8:	6224      	str	r4, [r4, #32]
 800a7ea:	429c      	cmp	r4, r3
 800a7ec:	d006      	beq.n	800a7fc <std+0x48>
 800a7ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a7f2:	4294      	cmp	r4, r2
 800a7f4:	d002      	beq.n	800a7fc <std+0x48>
 800a7f6:	33d0      	adds	r3, #208	@ 0xd0
 800a7f8:	429c      	cmp	r4, r3
 800a7fa:	d105      	bne.n	800a808 <std+0x54>
 800a7fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a804:	f000 ba46 	b.w	800ac94 <__retarget_lock_init_recursive>
 800a808:	bd10      	pop	{r4, pc}
 800a80a:	bf00      	nop
 800a80c:	0800a97d 	.word	0x0800a97d
 800a810:	0800a99f 	.word	0x0800a99f
 800a814:	0800a9d7 	.word	0x0800a9d7
 800a818:	0800a9fb 	.word	0x0800a9fb
 800a81c:	20005a28 	.word	0x20005a28

0800a820 <stdio_exit_handler>:
 800a820:	4a02      	ldr	r2, [pc, #8]	@ (800a82c <stdio_exit_handler+0xc>)
 800a822:	4903      	ldr	r1, [pc, #12]	@ (800a830 <stdio_exit_handler+0x10>)
 800a824:	4803      	ldr	r0, [pc, #12]	@ (800a834 <stdio_exit_handler+0x14>)
 800a826:	f000 b869 	b.w	800a8fc <_fwalk_sglue>
 800a82a:	bf00      	nop
 800a82c:	200002b8 	.word	0x200002b8
 800a830:	0800cf75 	.word	0x0800cf75
 800a834:	20000434 	.word	0x20000434

0800a838 <cleanup_stdio>:
 800a838:	6841      	ldr	r1, [r0, #4]
 800a83a:	4b0c      	ldr	r3, [pc, #48]	@ (800a86c <cleanup_stdio+0x34>)
 800a83c:	4299      	cmp	r1, r3
 800a83e:	b510      	push	{r4, lr}
 800a840:	4604      	mov	r4, r0
 800a842:	d001      	beq.n	800a848 <cleanup_stdio+0x10>
 800a844:	f002 fb96 	bl	800cf74 <_fflush_r>
 800a848:	68a1      	ldr	r1, [r4, #8]
 800a84a:	4b09      	ldr	r3, [pc, #36]	@ (800a870 <cleanup_stdio+0x38>)
 800a84c:	4299      	cmp	r1, r3
 800a84e:	d002      	beq.n	800a856 <cleanup_stdio+0x1e>
 800a850:	4620      	mov	r0, r4
 800a852:	f002 fb8f 	bl	800cf74 <_fflush_r>
 800a856:	68e1      	ldr	r1, [r4, #12]
 800a858:	4b06      	ldr	r3, [pc, #24]	@ (800a874 <cleanup_stdio+0x3c>)
 800a85a:	4299      	cmp	r1, r3
 800a85c:	d004      	beq.n	800a868 <cleanup_stdio+0x30>
 800a85e:	4620      	mov	r0, r4
 800a860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a864:	f002 bb86 	b.w	800cf74 <_fflush_r>
 800a868:	bd10      	pop	{r4, pc}
 800a86a:	bf00      	nop
 800a86c:	20005a28 	.word	0x20005a28
 800a870:	20005a90 	.word	0x20005a90
 800a874:	20005af8 	.word	0x20005af8

0800a878 <global_stdio_init.part.0>:
 800a878:	b510      	push	{r4, lr}
 800a87a:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a8 <global_stdio_init.part.0+0x30>)
 800a87c:	4c0b      	ldr	r4, [pc, #44]	@ (800a8ac <global_stdio_init.part.0+0x34>)
 800a87e:	4a0c      	ldr	r2, [pc, #48]	@ (800a8b0 <global_stdio_init.part.0+0x38>)
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	4620      	mov	r0, r4
 800a884:	2200      	movs	r2, #0
 800a886:	2104      	movs	r1, #4
 800a888:	f7ff ff94 	bl	800a7b4 <std>
 800a88c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a890:	2201      	movs	r2, #1
 800a892:	2109      	movs	r1, #9
 800a894:	f7ff ff8e 	bl	800a7b4 <std>
 800a898:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a89c:	2202      	movs	r2, #2
 800a89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8a2:	2112      	movs	r1, #18
 800a8a4:	f7ff bf86 	b.w	800a7b4 <std>
 800a8a8:	20005b60 	.word	0x20005b60
 800a8ac:	20005a28 	.word	0x20005a28
 800a8b0:	0800a821 	.word	0x0800a821

0800a8b4 <__sfp_lock_acquire>:
 800a8b4:	4801      	ldr	r0, [pc, #4]	@ (800a8bc <__sfp_lock_acquire+0x8>)
 800a8b6:	f000 b9ee 	b.w	800ac96 <__retarget_lock_acquire_recursive>
 800a8ba:	bf00      	nop
 800a8bc:	20005b69 	.word	0x20005b69

0800a8c0 <__sfp_lock_release>:
 800a8c0:	4801      	ldr	r0, [pc, #4]	@ (800a8c8 <__sfp_lock_release+0x8>)
 800a8c2:	f000 b9e9 	b.w	800ac98 <__retarget_lock_release_recursive>
 800a8c6:	bf00      	nop
 800a8c8:	20005b69 	.word	0x20005b69

0800a8cc <__sinit>:
 800a8cc:	b510      	push	{r4, lr}
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	f7ff fff0 	bl	800a8b4 <__sfp_lock_acquire>
 800a8d4:	6a23      	ldr	r3, [r4, #32]
 800a8d6:	b11b      	cbz	r3, 800a8e0 <__sinit+0x14>
 800a8d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8dc:	f7ff bff0 	b.w	800a8c0 <__sfp_lock_release>
 800a8e0:	4b04      	ldr	r3, [pc, #16]	@ (800a8f4 <__sinit+0x28>)
 800a8e2:	6223      	str	r3, [r4, #32]
 800a8e4:	4b04      	ldr	r3, [pc, #16]	@ (800a8f8 <__sinit+0x2c>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1f5      	bne.n	800a8d8 <__sinit+0xc>
 800a8ec:	f7ff ffc4 	bl	800a878 <global_stdio_init.part.0>
 800a8f0:	e7f2      	b.n	800a8d8 <__sinit+0xc>
 800a8f2:	bf00      	nop
 800a8f4:	0800a839 	.word	0x0800a839
 800a8f8:	20005b60 	.word	0x20005b60

0800a8fc <_fwalk_sglue>:
 800a8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a900:	4607      	mov	r7, r0
 800a902:	4688      	mov	r8, r1
 800a904:	4614      	mov	r4, r2
 800a906:	2600      	movs	r6, #0
 800a908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a90c:	f1b9 0901 	subs.w	r9, r9, #1
 800a910:	d505      	bpl.n	800a91e <_fwalk_sglue+0x22>
 800a912:	6824      	ldr	r4, [r4, #0]
 800a914:	2c00      	cmp	r4, #0
 800a916:	d1f7      	bne.n	800a908 <_fwalk_sglue+0xc>
 800a918:	4630      	mov	r0, r6
 800a91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a91e:	89ab      	ldrh	r3, [r5, #12]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d907      	bls.n	800a934 <_fwalk_sglue+0x38>
 800a924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a928:	3301      	adds	r3, #1
 800a92a:	d003      	beq.n	800a934 <_fwalk_sglue+0x38>
 800a92c:	4629      	mov	r1, r5
 800a92e:	4638      	mov	r0, r7
 800a930:	47c0      	blx	r8
 800a932:	4306      	orrs	r6, r0
 800a934:	3568      	adds	r5, #104	@ 0x68
 800a936:	e7e9      	b.n	800a90c <_fwalk_sglue+0x10>

0800a938 <siprintf>:
 800a938:	b40e      	push	{r1, r2, r3}
 800a93a:	b510      	push	{r4, lr}
 800a93c:	b09d      	sub	sp, #116	@ 0x74
 800a93e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a940:	9002      	str	r0, [sp, #8]
 800a942:	9006      	str	r0, [sp, #24]
 800a944:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a948:	480a      	ldr	r0, [pc, #40]	@ (800a974 <siprintf+0x3c>)
 800a94a:	9107      	str	r1, [sp, #28]
 800a94c:	9104      	str	r1, [sp, #16]
 800a94e:	490a      	ldr	r1, [pc, #40]	@ (800a978 <siprintf+0x40>)
 800a950:	f853 2b04 	ldr.w	r2, [r3], #4
 800a954:	9105      	str	r1, [sp, #20]
 800a956:	2400      	movs	r4, #0
 800a958:	a902      	add	r1, sp, #8
 800a95a:	6800      	ldr	r0, [r0, #0]
 800a95c:	9301      	str	r3, [sp, #4]
 800a95e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a960:	f002 f988 	bl	800cc74 <_svfiprintf_r>
 800a964:	9b02      	ldr	r3, [sp, #8]
 800a966:	701c      	strb	r4, [r3, #0]
 800a968:	b01d      	add	sp, #116	@ 0x74
 800a96a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a96e:	b003      	add	sp, #12
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	20000430 	.word	0x20000430
 800a978:	ffff0208 	.word	0xffff0208

0800a97c <__sread>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	460c      	mov	r4, r1
 800a980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a984:	f000 f938 	bl	800abf8 <_read_r>
 800a988:	2800      	cmp	r0, #0
 800a98a:	bfab      	itete	ge
 800a98c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a98e:	89a3      	ldrhlt	r3, [r4, #12]
 800a990:	181b      	addge	r3, r3, r0
 800a992:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a996:	bfac      	ite	ge
 800a998:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a99a:	81a3      	strhlt	r3, [r4, #12]
 800a99c:	bd10      	pop	{r4, pc}

0800a99e <__swrite>:
 800a99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a2:	461f      	mov	r7, r3
 800a9a4:	898b      	ldrh	r3, [r1, #12]
 800a9a6:	05db      	lsls	r3, r3, #23
 800a9a8:	4605      	mov	r5, r0
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	4616      	mov	r6, r2
 800a9ae:	d505      	bpl.n	800a9bc <__swrite+0x1e>
 800a9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f000 f90c 	bl	800abd4 <_lseek_r>
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9c6:	81a3      	strh	r3, [r4, #12]
 800a9c8:	4632      	mov	r2, r6
 800a9ca:	463b      	mov	r3, r7
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d2:	f000 b923 	b.w	800ac1c <_write_r>

0800a9d6 <__sseek>:
 800a9d6:	b510      	push	{r4, lr}
 800a9d8:	460c      	mov	r4, r1
 800a9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9de:	f000 f8f9 	bl	800abd4 <_lseek_r>
 800a9e2:	1c43      	adds	r3, r0, #1
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	bf15      	itete	ne
 800a9e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a9ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a9ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a9f2:	81a3      	strheq	r3, [r4, #12]
 800a9f4:	bf18      	it	ne
 800a9f6:	81a3      	strhne	r3, [r4, #12]
 800a9f8:	bd10      	pop	{r4, pc}

0800a9fa <__sclose>:
 800a9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fe:	f000 b87b 	b.w	800aaf8 <_close_r>

0800aa02 <memset>:
 800aa02:	4402      	add	r2, r0
 800aa04:	4603      	mov	r3, r0
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d100      	bne.n	800aa0c <memset+0xa>
 800aa0a:	4770      	bx	lr
 800aa0c:	f803 1b01 	strb.w	r1, [r3], #1
 800aa10:	e7f9      	b.n	800aa06 <memset+0x4>

0800aa12 <strncmp>:
 800aa12:	b510      	push	{r4, lr}
 800aa14:	b16a      	cbz	r2, 800aa32 <strncmp+0x20>
 800aa16:	3901      	subs	r1, #1
 800aa18:	1884      	adds	r4, r0, r2
 800aa1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa1e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d103      	bne.n	800aa2e <strncmp+0x1c>
 800aa26:	42a0      	cmp	r0, r4
 800aa28:	d001      	beq.n	800aa2e <strncmp+0x1c>
 800aa2a:	2a00      	cmp	r2, #0
 800aa2c:	d1f5      	bne.n	800aa1a <strncmp+0x8>
 800aa2e:	1ad0      	subs	r0, r2, r3
 800aa30:	bd10      	pop	{r4, pc}
 800aa32:	4610      	mov	r0, r2
 800aa34:	e7fc      	b.n	800aa30 <strncmp+0x1e>
	...

0800aa38 <strtok>:
 800aa38:	4b16      	ldr	r3, [pc, #88]	@ (800aa94 <strtok+0x5c>)
 800aa3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa3e:	681f      	ldr	r7, [r3, #0]
 800aa40:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800aa42:	4605      	mov	r5, r0
 800aa44:	460e      	mov	r6, r1
 800aa46:	b9ec      	cbnz	r4, 800aa84 <strtok+0x4c>
 800aa48:	2050      	movs	r0, #80	@ 0x50
 800aa4a:	f001 fb39 	bl	800c0c0 <malloc>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	6478      	str	r0, [r7, #68]	@ 0x44
 800aa52:	b920      	cbnz	r0, 800aa5e <strtok+0x26>
 800aa54:	4b10      	ldr	r3, [pc, #64]	@ (800aa98 <strtok+0x60>)
 800aa56:	4811      	ldr	r0, [pc, #68]	@ (800aa9c <strtok+0x64>)
 800aa58:	215b      	movs	r1, #91	@ 0x5b
 800aa5a:	f000 f935 	bl	800acc8 <__assert_func>
 800aa5e:	e9c0 4400 	strd	r4, r4, [r0]
 800aa62:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aa66:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aa6a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800aa6e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800aa72:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800aa76:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800aa7a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800aa7e:	6184      	str	r4, [r0, #24]
 800aa80:	7704      	strb	r4, [r0, #28]
 800aa82:	6244      	str	r4, [r0, #36]	@ 0x24
 800aa84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa86:	4631      	mov	r1, r6
 800aa88:	4628      	mov	r0, r5
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa90:	f000 b806 	b.w	800aaa0 <__strtok_r>
 800aa94:	20000430 	.word	0x20000430
 800aa98:	0800ed22 	.word	0x0800ed22
 800aa9c:	0800ed39 	.word	0x0800ed39

0800aaa0 <__strtok_r>:
 800aaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	b908      	cbnz	r0, 800aaaa <__strtok_r+0xa>
 800aaa6:	6814      	ldr	r4, [r2, #0]
 800aaa8:	b144      	cbz	r4, 800aabc <__strtok_r+0x1c>
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aab0:	460f      	mov	r7, r1
 800aab2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aab6:	b91e      	cbnz	r6, 800aac0 <__strtok_r+0x20>
 800aab8:	b965      	cbnz	r5, 800aad4 <__strtok_r+0x34>
 800aaba:	6015      	str	r5, [r2, #0]
 800aabc:	2000      	movs	r0, #0
 800aabe:	e005      	b.n	800aacc <__strtok_r+0x2c>
 800aac0:	42b5      	cmp	r5, r6
 800aac2:	d1f6      	bne.n	800aab2 <__strtok_r+0x12>
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1f0      	bne.n	800aaaa <__strtok_r+0xa>
 800aac8:	6014      	str	r4, [r2, #0]
 800aaca:	7003      	strb	r3, [r0, #0]
 800aacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aace:	461c      	mov	r4, r3
 800aad0:	e00c      	b.n	800aaec <__strtok_r+0x4c>
 800aad2:	b91d      	cbnz	r5, 800aadc <__strtok_r+0x3c>
 800aad4:	4627      	mov	r7, r4
 800aad6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aada:	460e      	mov	r6, r1
 800aadc:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aae0:	42ab      	cmp	r3, r5
 800aae2:	d1f6      	bne.n	800aad2 <__strtok_r+0x32>
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d0f2      	beq.n	800aace <__strtok_r+0x2e>
 800aae8:	2300      	movs	r3, #0
 800aaea:	703b      	strb	r3, [r7, #0]
 800aaec:	6014      	str	r4, [r2, #0]
 800aaee:	e7ed      	b.n	800aacc <__strtok_r+0x2c>

0800aaf0 <_localeconv_r>:
 800aaf0:	4800      	ldr	r0, [pc, #0]	@ (800aaf4 <_localeconv_r+0x4>)
 800aaf2:	4770      	bx	lr
 800aaf4:	200003b4 	.word	0x200003b4

0800aaf8 <_close_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4d06      	ldr	r5, [pc, #24]	@ (800ab14 <_close_r+0x1c>)
 800aafc:	2300      	movs	r3, #0
 800aafe:	4604      	mov	r4, r0
 800ab00:	4608      	mov	r0, r1
 800ab02:	602b      	str	r3, [r5, #0]
 800ab04:	f7f8 fc5e 	bl	80033c4 <_close>
 800ab08:	1c43      	adds	r3, r0, #1
 800ab0a:	d102      	bne.n	800ab12 <_close_r+0x1a>
 800ab0c:	682b      	ldr	r3, [r5, #0]
 800ab0e:	b103      	cbz	r3, 800ab12 <_close_r+0x1a>
 800ab10:	6023      	str	r3, [r4, #0]
 800ab12:	bd38      	pop	{r3, r4, r5, pc}
 800ab14:	20005b64 	.word	0x20005b64

0800ab18 <_reclaim_reent>:
 800ab18:	4b2d      	ldr	r3, [pc, #180]	@ (800abd0 <_reclaim_reent+0xb8>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4283      	cmp	r3, r0
 800ab1e:	b570      	push	{r4, r5, r6, lr}
 800ab20:	4604      	mov	r4, r0
 800ab22:	d053      	beq.n	800abcc <_reclaim_reent+0xb4>
 800ab24:	69c3      	ldr	r3, [r0, #28]
 800ab26:	b31b      	cbz	r3, 800ab70 <_reclaim_reent+0x58>
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	b163      	cbz	r3, 800ab46 <_reclaim_reent+0x2e>
 800ab2c:	2500      	movs	r5, #0
 800ab2e:	69e3      	ldr	r3, [r4, #28]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	5959      	ldr	r1, [r3, r5]
 800ab34:	b9b1      	cbnz	r1, 800ab64 <_reclaim_reent+0x4c>
 800ab36:	3504      	adds	r5, #4
 800ab38:	2d80      	cmp	r5, #128	@ 0x80
 800ab3a:	d1f8      	bne.n	800ab2e <_reclaim_reent+0x16>
 800ab3c:	69e3      	ldr	r3, [r4, #28]
 800ab3e:	4620      	mov	r0, r4
 800ab40:	68d9      	ldr	r1, [r3, #12]
 800ab42:	f000 ff39 	bl	800b9b8 <_free_r>
 800ab46:	69e3      	ldr	r3, [r4, #28]
 800ab48:	6819      	ldr	r1, [r3, #0]
 800ab4a:	b111      	cbz	r1, 800ab52 <_reclaim_reent+0x3a>
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f000 ff33 	bl	800b9b8 <_free_r>
 800ab52:	69e3      	ldr	r3, [r4, #28]
 800ab54:	689d      	ldr	r5, [r3, #8]
 800ab56:	b15d      	cbz	r5, 800ab70 <_reclaim_reent+0x58>
 800ab58:	4629      	mov	r1, r5
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	682d      	ldr	r5, [r5, #0]
 800ab5e:	f000 ff2b 	bl	800b9b8 <_free_r>
 800ab62:	e7f8      	b.n	800ab56 <_reclaim_reent+0x3e>
 800ab64:	680e      	ldr	r6, [r1, #0]
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 ff26 	bl	800b9b8 <_free_r>
 800ab6c:	4631      	mov	r1, r6
 800ab6e:	e7e1      	b.n	800ab34 <_reclaim_reent+0x1c>
 800ab70:	6961      	ldr	r1, [r4, #20]
 800ab72:	b111      	cbz	r1, 800ab7a <_reclaim_reent+0x62>
 800ab74:	4620      	mov	r0, r4
 800ab76:	f000 ff1f 	bl	800b9b8 <_free_r>
 800ab7a:	69e1      	ldr	r1, [r4, #28]
 800ab7c:	b111      	cbz	r1, 800ab84 <_reclaim_reent+0x6c>
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 ff1a 	bl	800b9b8 <_free_r>
 800ab84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ab86:	b111      	cbz	r1, 800ab8e <_reclaim_reent+0x76>
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f000 ff15 	bl	800b9b8 <_free_r>
 800ab8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab90:	b111      	cbz	r1, 800ab98 <_reclaim_reent+0x80>
 800ab92:	4620      	mov	r0, r4
 800ab94:	f000 ff10 	bl	800b9b8 <_free_r>
 800ab98:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ab9a:	b111      	cbz	r1, 800aba2 <_reclaim_reent+0x8a>
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 ff0b 	bl	800b9b8 <_free_r>
 800aba2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800aba4:	b111      	cbz	r1, 800abac <_reclaim_reent+0x94>
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 ff06 	bl	800b9b8 <_free_r>
 800abac:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800abae:	b111      	cbz	r1, 800abb6 <_reclaim_reent+0x9e>
 800abb0:	4620      	mov	r0, r4
 800abb2:	f000 ff01 	bl	800b9b8 <_free_r>
 800abb6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800abb8:	b111      	cbz	r1, 800abc0 <_reclaim_reent+0xa8>
 800abba:	4620      	mov	r0, r4
 800abbc:	f000 fefc 	bl	800b9b8 <_free_r>
 800abc0:	6a23      	ldr	r3, [r4, #32]
 800abc2:	b11b      	cbz	r3, 800abcc <_reclaim_reent+0xb4>
 800abc4:	4620      	mov	r0, r4
 800abc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800abca:	4718      	bx	r3
 800abcc:	bd70      	pop	{r4, r5, r6, pc}
 800abce:	bf00      	nop
 800abd0:	20000430 	.word	0x20000430

0800abd4 <_lseek_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4d07      	ldr	r5, [pc, #28]	@ (800abf4 <_lseek_r+0x20>)
 800abd8:	4604      	mov	r4, r0
 800abda:	4608      	mov	r0, r1
 800abdc:	4611      	mov	r1, r2
 800abde:	2200      	movs	r2, #0
 800abe0:	602a      	str	r2, [r5, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	f7f8 fc15 	bl	8003412 <_lseek>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d102      	bne.n	800abf2 <_lseek_r+0x1e>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	b103      	cbz	r3, 800abf2 <_lseek_r+0x1e>
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
 800abf4:	20005b64 	.word	0x20005b64

0800abf8 <_read_r>:
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	4d07      	ldr	r5, [pc, #28]	@ (800ac18 <_read_r+0x20>)
 800abfc:	4604      	mov	r4, r0
 800abfe:	4608      	mov	r0, r1
 800ac00:	4611      	mov	r1, r2
 800ac02:	2200      	movs	r2, #0
 800ac04:	602a      	str	r2, [r5, #0]
 800ac06:	461a      	mov	r2, r3
 800ac08:	f7f8 fba3 	bl	8003352 <_read>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	d102      	bne.n	800ac16 <_read_r+0x1e>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	b103      	cbz	r3, 800ac16 <_read_r+0x1e>
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	bd38      	pop	{r3, r4, r5, pc}
 800ac18:	20005b64 	.word	0x20005b64

0800ac1c <_write_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4d07      	ldr	r5, [pc, #28]	@ (800ac3c <_write_r+0x20>)
 800ac20:	4604      	mov	r4, r0
 800ac22:	4608      	mov	r0, r1
 800ac24:	4611      	mov	r1, r2
 800ac26:	2200      	movs	r2, #0
 800ac28:	602a      	str	r2, [r5, #0]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	f7f8 fbae 	bl	800338c <_write>
 800ac30:	1c43      	adds	r3, r0, #1
 800ac32:	d102      	bne.n	800ac3a <_write_r+0x1e>
 800ac34:	682b      	ldr	r3, [r5, #0]
 800ac36:	b103      	cbz	r3, 800ac3a <_write_r+0x1e>
 800ac38:	6023      	str	r3, [r4, #0]
 800ac3a:	bd38      	pop	{r3, r4, r5, pc}
 800ac3c:	20005b64 	.word	0x20005b64

0800ac40 <__errno>:
 800ac40:	4b01      	ldr	r3, [pc, #4]	@ (800ac48 <__errno+0x8>)
 800ac42:	6818      	ldr	r0, [r3, #0]
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	20000430 	.word	0x20000430

0800ac4c <__libc_init_array>:
 800ac4c:	b570      	push	{r4, r5, r6, lr}
 800ac4e:	4d0d      	ldr	r5, [pc, #52]	@ (800ac84 <__libc_init_array+0x38>)
 800ac50:	4c0d      	ldr	r4, [pc, #52]	@ (800ac88 <__libc_init_array+0x3c>)
 800ac52:	1b64      	subs	r4, r4, r5
 800ac54:	10a4      	asrs	r4, r4, #2
 800ac56:	2600      	movs	r6, #0
 800ac58:	42a6      	cmp	r6, r4
 800ac5a:	d109      	bne.n	800ac70 <__libc_init_array+0x24>
 800ac5c:	4d0b      	ldr	r5, [pc, #44]	@ (800ac8c <__libc_init_array+0x40>)
 800ac5e:	4c0c      	ldr	r4, [pc, #48]	@ (800ac90 <__libc_init_array+0x44>)
 800ac60:	f002 fcda 	bl	800d618 <_init>
 800ac64:	1b64      	subs	r4, r4, r5
 800ac66:	10a4      	asrs	r4, r4, #2
 800ac68:	2600      	movs	r6, #0
 800ac6a:	42a6      	cmp	r6, r4
 800ac6c:	d105      	bne.n	800ac7a <__libc_init_array+0x2e>
 800ac6e:	bd70      	pop	{r4, r5, r6, pc}
 800ac70:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac74:	4798      	blx	r3
 800ac76:	3601      	adds	r6, #1
 800ac78:	e7ee      	b.n	800ac58 <__libc_init_array+0xc>
 800ac7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac7e:	4798      	blx	r3
 800ac80:	3601      	adds	r6, #1
 800ac82:	e7f2      	b.n	800ac6a <__libc_init_array+0x1e>
 800ac84:	0800f170 	.word	0x0800f170
 800ac88:	0800f170 	.word	0x0800f170
 800ac8c:	0800f170 	.word	0x0800f170
 800ac90:	0800f174 	.word	0x0800f174

0800ac94 <__retarget_lock_init_recursive>:
 800ac94:	4770      	bx	lr

0800ac96 <__retarget_lock_acquire_recursive>:
 800ac96:	4770      	bx	lr

0800ac98 <__retarget_lock_release_recursive>:
 800ac98:	4770      	bx	lr

0800ac9a <memcpy>:
 800ac9a:	440a      	add	r2, r1
 800ac9c:	4291      	cmp	r1, r2
 800ac9e:	f100 33ff 	add.w	r3, r0, #4294967295
 800aca2:	d100      	bne.n	800aca6 <memcpy+0xc>
 800aca4:	4770      	bx	lr
 800aca6:	b510      	push	{r4, lr}
 800aca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acb0:	4291      	cmp	r1, r2
 800acb2:	d1f9      	bne.n	800aca8 <memcpy+0xe>
 800acb4:	bd10      	pop	{r4, pc}
	...

0800acb8 <nan>:
 800acb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800acc0 <nan+0x8>
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	00000000 	.word	0x00000000
 800acc4:	7ff80000 	.word	0x7ff80000

0800acc8 <__assert_func>:
 800acc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acca:	4614      	mov	r4, r2
 800accc:	461a      	mov	r2, r3
 800acce:	4b09      	ldr	r3, [pc, #36]	@ (800acf4 <__assert_func+0x2c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4605      	mov	r5, r0
 800acd4:	68d8      	ldr	r0, [r3, #12]
 800acd6:	b14c      	cbz	r4, 800acec <__assert_func+0x24>
 800acd8:	4b07      	ldr	r3, [pc, #28]	@ (800acf8 <__assert_func+0x30>)
 800acda:	9100      	str	r1, [sp, #0]
 800acdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ace0:	4906      	ldr	r1, [pc, #24]	@ (800acfc <__assert_func+0x34>)
 800ace2:	462b      	mov	r3, r5
 800ace4:	f002 f96e 	bl	800cfc4 <fiprintf>
 800ace8:	f002 f9a8 	bl	800d03c <abort>
 800acec:	4b04      	ldr	r3, [pc, #16]	@ (800ad00 <__assert_func+0x38>)
 800acee:	461c      	mov	r4, r3
 800acf0:	e7f3      	b.n	800acda <__assert_func+0x12>
 800acf2:	bf00      	nop
 800acf4:	20000430 	.word	0x20000430
 800acf8:	0800ed9b 	.word	0x0800ed9b
 800acfc:	0800eda8 	.word	0x0800eda8
 800ad00:	0800edd6 	.word	0x0800edd6

0800ad04 <quorem>:
 800ad04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	6903      	ldr	r3, [r0, #16]
 800ad0a:	690c      	ldr	r4, [r1, #16]
 800ad0c:	42a3      	cmp	r3, r4
 800ad0e:	4607      	mov	r7, r0
 800ad10:	db7e      	blt.n	800ae10 <quorem+0x10c>
 800ad12:	3c01      	subs	r4, #1
 800ad14:	f101 0814 	add.w	r8, r1, #20
 800ad18:	00a3      	lsls	r3, r4, #2
 800ad1a:	f100 0514 	add.w	r5, r0, #20
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	429a      	cmp	r2, r3
 800ad32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad36:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad3a:	d32e      	bcc.n	800ad9a <quorem+0x96>
 800ad3c:	f04f 0a00 	mov.w	sl, #0
 800ad40:	46c4      	mov	ip, r8
 800ad42:	46ae      	mov	lr, r5
 800ad44:	46d3      	mov	fp, sl
 800ad46:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad4a:	b298      	uxth	r0, r3
 800ad4c:	fb06 a000 	mla	r0, r6, r0, sl
 800ad50:	0c02      	lsrs	r2, r0, #16
 800ad52:	0c1b      	lsrs	r3, r3, #16
 800ad54:	fb06 2303 	mla	r3, r6, r3, r2
 800ad58:	f8de 2000 	ldr.w	r2, [lr]
 800ad5c:	b280      	uxth	r0, r0
 800ad5e:	b292      	uxth	r2, r2
 800ad60:	1a12      	subs	r2, r2, r0
 800ad62:	445a      	add	r2, fp
 800ad64:	f8de 0000 	ldr.w	r0, [lr]
 800ad68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ad72:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ad76:	b292      	uxth	r2, r2
 800ad78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ad7c:	45e1      	cmp	r9, ip
 800ad7e:	f84e 2b04 	str.w	r2, [lr], #4
 800ad82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ad86:	d2de      	bcs.n	800ad46 <quorem+0x42>
 800ad88:	9b00      	ldr	r3, [sp, #0]
 800ad8a:	58eb      	ldr	r3, [r5, r3]
 800ad8c:	b92b      	cbnz	r3, 800ad9a <quorem+0x96>
 800ad8e:	9b01      	ldr	r3, [sp, #4]
 800ad90:	3b04      	subs	r3, #4
 800ad92:	429d      	cmp	r5, r3
 800ad94:	461a      	mov	r2, r3
 800ad96:	d32f      	bcc.n	800adf8 <quorem+0xf4>
 800ad98:	613c      	str	r4, [r7, #16]
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	f001 fd14 	bl	800c7c8 <__mcmp>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	db25      	blt.n	800adf0 <quorem+0xec>
 800ada4:	4629      	mov	r1, r5
 800ada6:	2000      	movs	r0, #0
 800ada8:	f858 2b04 	ldr.w	r2, [r8], #4
 800adac:	f8d1 c000 	ldr.w	ip, [r1]
 800adb0:	fa1f fe82 	uxth.w	lr, r2
 800adb4:	fa1f f38c 	uxth.w	r3, ip
 800adb8:	eba3 030e 	sub.w	r3, r3, lr
 800adbc:	4403      	add	r3, r0
 800adbe:	0c12      	lsrs	r2, r2, #16
 800adc0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800adc4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800adc8:	b29b      	uxth	r3, r3
 800adca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adce:	45c1      	cmp	r9, r8
 800add0:	f841 3b04 	str.w	r3, [r1], #4
 800add4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800add8:	d2e6      	bcs.n	800ada8 <quorem+0xa4>
 800adda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ade2:	b922      	cbnz	r2, 800adee <quorem+0xea>
 800ade4:	3b04      	subs	r3, #4
 800ade6:	429d      	cmp	r5, r3
 800ade8:	461a      	mov	r2, r3
 800adea:	d30b      	bcc.n	800ae04 <quorem+0x100>
 800adec:	613c      	str	r4, [r7, #16]
 800adee:	3601      	adds	r6, #1
 800adf0:	4630      	mov	r0, r6
 800adf2:	b003      	add	sp, #12
 800adf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf8:	6812      	ldr	r2, [r2, #0]
 800adfa:	3b04      	subs	r3, #4
 800adfc:	2a00      	cmp	r2, #0
 800adfe:	d1cb      	bne.n	800ad98 <quorem+0x94>
 800ae00:	3c01      	subs	r4, #1
 800ae02:	e7c6      	b.n	800ad92 <quorem+0x8e>
 800ae04:	6812      	ldr	r2, [r2, #0]
 800ae06:	3b04      	subs	r3, #4
 800ae08:	2a00      	cmp	r2, #0
 800ae0a:	d1ef      	bne.n	800adec <quorem+0xe8>
 800ae0c:	3c01      	subs	r4, #1
 800ae0e:	e7ea      	b.n	800ade6 <quorem+0xe2>
 800ae10:	2000      	movs	r0, #0
 800ae12:	e7ee      	b.n	800adf2 <quorem+0xee>
 800ae14:	0000      	movs	r0, r0
	...

0800ae18 <_dtoa_r>:
 800ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1c:	69c7      	ldr	r7, [r0, #28]
 800ae1e:	b097      	sub	sp, #92	@ 0x5c
 800ae20:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ae24:	ec55 4b10 	vmov	r4, r5, d0
 800ae28:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ae2a:	9107      	str	r1, [sp, #28]
 800ae2c:	4681      	mov	r9, r0
 800ae2e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ae30:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae32:	b97f      	cbnz	r7, 800ae54 <_dtoa_r+0x3c>
 800ae34:	2010      	movs	r0, #16
 800ae36:	f001 f943 	bl	800c0c0 <malloc>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	f8c9 001c 	str.w	r0, [r9, #28]
 800ae40:	b920      	cbnz	r0, 800ae4c <_dtoa_r+0x34>
 800ae42:	4ba9      	ldr	r3, [pc, #676]	@ (800b0e8 <_dtoa_r+0x2d0>)
 800ae44:	21ef      	movs	r1, #239	@ 0xef
 800ae46:	48a9      	ldr	r0, [pc, #676]	@ (800b0ec <_dtoa_r+0x2d4>)
 800ae48:	f7ff ff3e 	bl	800acc8 <__assert_func>
 800ae4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ae50:	6007      	str	r7, [r0, #0]
 800ae52:	60c7      	str	r7, [r0, #12]
 800ae54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ae58:	6819      	ldr	r1, [r3, #0]
 800ae5a:	b159      	cbz	r1, 800ae74 <_dtoa_r+0x5c>
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	604a      	str	r2, [r1, #4]
 800ae60:	2301      	movs	r3, #1
 800ae62:	4093      	lsls	r3, r2
 800ae64:	608b      	str	r3, [r1, #8]
 800ae66:	4648      	mov	r0, r9
 800ae68:	f001 fa32 	bl	800c2d0 <_Bfree>
 800ae6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	1e2b      	subs	r3, r5, #0
 800ae76:	bfb9      	ittee	lt
 800ae78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ae7c:	9305      	strlt	r3, [sp, #20]
 800ae7e:	2300      	movge	r3, #0
 800ae80:	6033      	strge	r3, [r6, #0]
 800ae82:	9f05      	ldr	r7, [sp, #20]
 800ae84:	4b9a      	ldr	r3, [pc, #616]	@ (800b0f0 <_dtoa_r+0x2d8>)
 800ae86:	bfbc      	itt	lt
 800ae88:	2201      	movlt	r2, #1
 800ae8a:	6032      	strlt	r2, [r6, #0]
 800ae8c:	43bb      	bics	r3, r7
 800ae8e:	d112      	bne.n	800aeb6 <_dtoa_r+0x9e>
 800ae90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ae92:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae9c:	4323      	orrs	r3, r4
 800ae9e:	f000 855a 	beq.w	800b956 <_dtoa_r+0xb3e>
 800aea2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aea4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b104 <_dtoa_r+0x2ec>
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 855c 	beq.w	800b966 <_dtoa_r+0xb4e>
 800aeae:	f10a 0303 	add.w	r3, sl, #3
 800aeb2:	f000 bd56 	b.w	800b962 <_dtoa_r+0xb4a>
 800aeb6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aeba:	2200      	movs	r2, #0
 800aebc:	ec51 0b17 	vmov	r0, r1, d7
 800aec0:	2300      	movs	r3, #0
 800aec2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800aec6:	f7f5 fe0f 	bl	8000ae8 <__aeabi_dcmpeq>
 800aeca:	4680      	mov	r8, r0
 800aecc:	b158      	cbz	r0, 800aee6 <_dtoa_r+0xce>
 800aece:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aed0:	2301      	movs	r3, #1
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aed6:	b113      	cbz	r3, 800aede <_dtoa_r+0xc6>
 800aed8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aeda:	4b86      	ldr	r3, [pc, #536]	@ (800b0f4 <_dtoa_r+0x2dc>)
 800aedc:	6013      	str	r3, [r2, #0]
 800aede:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b108 <_dtoa_r+0x2f0>
 800aee2:	f000 bd40 	b.w	800b966 <_dtoa_r+0xb4e>
 800aee6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800aeea:	aa14      	add	r2, sp, #80	@ 0x50
 800aeec:	a915      	add	r1, sp, #84	@ 0x54
 800aeee:	4648      	mov	r0, r9
 800aef0:	f001 fd8a 	bl	800ca08 <__d2b>
 800aef4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aef8:	9002      	str	r0, [sp, #8]
 800aefa:	2e00      	cmp	r6, #0
 800aefc:	d078      	beq.n	800aff0 <_dtoa_r+0x1d8>
 800aefe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af00:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800af04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800af0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af18:	4619      	mov	r1, r3
 800af1a:	2200      	movs	r2, #0
 800af1c:	4b76      	ldr	r3, [pc, #472]	@ (800b0f8 <_dtoa_r+0x2e0>)
 800af1e:	f7f5 f9c3 	bl	80002a8 <__aeabi_dsub>
 800af22:	a36b      	add	r3, pc, #428	@ (adr r3, 800b0d0 <_dtoa_r+0x2b8>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	f7f5 fb76 	bl	8000618 <__aeabi_dmul>
 800af2c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b0d8 <_dtoa_r+0x2c0>)
 800af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af32:	f7f5 f9bb 	bl	80002ac <__adddf3>
 800af36:	4604      	mov	r4, r0
 800af38:	4630      	mov	r0, r6
 800af3a:	460d      	mov	r5, r1
 800af3c:	f7f5 fb02 	bl	8000544 <__aeabi_i2d>
 800af40:	a367      	add	r3, pc, #412	@ (adr r3, 800b0e0 <_dtoa_r+0x2c8>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	f7f5 fb67 	bl	8000618 <__aeabi_dmul>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4620      	mov	r0, r4
 800af50:	4629      	mov	r1, r5
 800af52:	f7f5 f9ab 	bl	80002ac <__adddf3>
 800af56:	4604      	mov	r4, r0
 800af58:	460d      	mov	r5, r1
 800af5a:	f7f5 fe0d 	bl	8000b78 <__aeabi_d2iz>
 800af5e:	2200      	movs	r2, #0
 800af60:	4607      	mov	r7, r0
 800af62:	2300      	movs	r3, #0
 800af64:	4620      	mov	r0, r4
 800af66:	4629      	mov	r1, r5
 800af68:	f7f5 fdc8 	bl	8000afc <__aeabi_dcmplt>
 800af6c:	b140      	cbz	r0, 800af80 <_dtoa_r+0x168>
 800af6e:	4638      	mov	r0, r7
 800af70:	f7f5 fae8 	bl	8000544 <__aeabi_i2d>
 800af74:	4622      	mov	r2, r4
 800af76:	462b      	mov	r3, r5
 800af78:	f7f5 fdb6 	bl	8000ae8 <__aeabi_dcmpeq>
 800af7c:	b900      	cbnz	r0, 800af80 <_dtoa_r+0x168>
 800af7e:	3f01      	subs	r7, #1
 800af80:	2f16      	cmp	r7, #22
 800af82:	d852      	bhi.n	800b02a <_dtoa_r+0x212>
 800af84:	4b5d      	ldr	r3, [pc, #372]	@ (800b0fc <_dtoa_r+0x2e4>)
 800af86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800af92:	f7f5 fdb3 	bl	8000afc <__aeabi_dcmplt>
 800af96:	2800      	cmp	r0, #0
 800af98:	d049      	beq.n	800b02e <_dtoa_r+0x216>
 800af9a:	3f01      	subs	r7, #1
 800af9c:	2300      	movs	r3, #0
 800af9e:	9310      	str	r3, [sp, #64]	@ 0x40
 800afa0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800afa2:	1b9b      	subs	r3, r3, r6
 800afa4:	1e5a      	subs	r2, r3, #1
 800afa6:	bf45      	ittet	mi
 800afa8:	f1c3 0301 	rsbmi	r3, r3, #1
 800afac:	9300      	strmi	r3, [sp, #0]
 800afae:	2300      	movpl	r3, #0
 800afb0:	2300      	movmi	r3, #0
 800afb2:	9206      	str	r2, [sp, #24]
 800afb4:	bf54      	ite	pl
 800afb6:	9300      	strpl	r3, [sp, #0]
 800afb8:	9306      	strmi	r3, [sp, #24]
 800afba:	2f00      	cmp	r7, #0
 800afbc:	db39      	blt.n	800b032 <_dtoa_r+0x21a>
 800afbe:	9b06      	ldr	r3, [sp, #24]
 800afc0:	970d      	str	r7, [sp, #52]	@ 0x34
 800afc2:	443b      	add	r3, r7
 800afc4:	9306      	str	r3, [sp, #24]
 800afc6:	2300      	movs	r3, #0
 800afc8:	9308      	str	r3, [sp, #32]
 800afca:	9b07      	ldr	r3, [sp, #28]
 800afcc:	2b09      	cmp	r3, #9
 800afce:	d863      	bhi.n	800b098 <_dtoa_r+0x280>
 800afd0:	2b05      	cmp	r3, #5
 800afd2:	bfc4      	itt	gt
 800afd4:	3b04      	subgt	r3, #4
 800afd6:	9307      	strgt	r3, [sp, #28]
 800afd8:	9b07      	ldr	r3, [sp, #28]
 800afda:	f1a3 0302 	sub.w	r3, r3, #2
 800afde:	bfcc      	ite	gt
 800afe0:	2400      	movgt	r4, #0
 800afe2:	2401      	movle	r4, #1
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d863      	bhi.n	800b0b0 <_dtoa_r+0x298>
 800afe8:	e8df f003 	tbb	[pc, r3]
 800afec:	2b375452 	.word	0x2b375452
 800aff0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aff4:	441e      	add	r6, r3
 800aff6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800affa:	2b20      	cmp	r3, #32
 800affc:	bfc1      	itttt	gt
 800affe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b002:	409f      	lslgt	r7, r3
 800b004:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b008:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b00c:	bfd6      	itet	le
 800b00e:	f1c3 0320 	rsble	r3, r3, #32
 800b012:	ea47 0003 	orrgt.w	r0, r7, r3
 800b016:	fa04 f003 	lslle.w	r0, r4, r3
 800b01a:	f7f5 fa83 	bl	8000524 <__aeabi_ui2d>
 800b01e:	2201      	movs	r2, #1
 800b020:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b024:	3e01      	subs	r6, #1
 800b026:	9212      	str	r2, [sp, #72]	@ 0x48
 800b028:	e776      	b.n	800af18 <_dtoa_r+0x100>
 800b02a:	2301      	movs	r3, #1
 800b02c:	e7b7      	b.n	800af9e <_dtoa_r+0x186>
 800b02e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b030:	e7b6      	b.n	800afa0 <_dtoa_r+0x188>
 800b032:	9b00      	ldr	r3, [sp, #0]
 800b034:	1bdb      	subs	r3, r3, r7
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	427b      	negs	r3, r7
 800b03a:	9308      	str	r3, [sp, #32]
 800b03c:	2300      	movs	r3, #0
 800b03e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b040:	e7c3      	b.n	800afca <_dtoa_r+0x1b2>
 800b042:	2301      	movs	r3, #1
 800b044:	9309      	str	r3, [sp, #36]	@ 0x24
 800b046:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b048:	eb07 0b03 	add.w	fp, r7, r3
 800b04c:	f10b 0301 	add.w	r3, fp, #1
 800b050:	2b01      	cmp	r3, #1
 800b052:	9303      	str	r3, [sp, #12]
 800b054:	bfb8      	it	lt
 800b056:	2301      	movlt	r3, #1
 800b058:	e006      	b.n	800b068 <_dtoa_r+0x250>
 800b05a:	2301      	movs	r3, #1
 800b05c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b05e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b060:	2b00      	cmp	r3, #0
 800b062:	dd28      	ble.n	800b0b6 <_dtoa_r+0x29e>
 800b064:	469b      	mov	fp, r3
 800b066:	9303      	str	r3, [sp, #12]
 800b068:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b06c:	2100      	movs	r1, #0
 800b06e:	2204      	movs	r2, #4
 800b070:	f102 0514 	add.w	r5, r2, #20
 800b074:	429d      	cmp	r5, r3
 800b076:	d926      	bls.n	800b0c6 <_dtoa_r+0x2ae>
 800b078:	6041      	str	r1, [r0, #4]
 800b07a:	4648      	mov	r0, r9
 800b07c:	f001 f8e8 	bl	800c250 <_Balloc>
 800b080:	4682      	mov	sl, r0
 800b082:	2800      	cmp	r0, #0
 800b084:	d142      	bne.n	800b10c <_dtoa_r+0x2f4>
 800b086:	4b1e      	ldr	r3, [pc, #120]	@ (800b100 <_dtoa_r+0x2e8>)
 800b088:	4602      	mov	r2, r0
 800b08a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b08e:	e6da      	b.n	800ae46 <_dtoa_r+0x2e>
 800b090:	2300      	movs	r3, #0
 800b092:	e7e3      	b.n	800b05c <_dtoa_r+0x244>
 800b094:	2300      	movs	r3, #0
 800b096:	e7d5      	b.n	800b044 <_dtoa_r+0x22c>
 800b098:	2401      	movs	r4, #1
 800b09a:	2300      	movs	r3, #0
 800b09c:	9307      	str	r3, [sp, #28]
 800b09e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b0a0:	f04f 3bff 	mov.w	fp, #4294967295
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f8cd b00c 	str.w	fp, [sp, #12]
 800b0aa:	2312      	movs	r3, #18
 800b0ac:	920c      	str	r2, [sp, #48]	@ 0x30
 800b0ae:	e7db      	b.n	800b068 <_dtoa_r+0x250>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0b4:	e7f4      	b.n	800b0a0 <_dtoa_r+0x288>
 800b0b6:	f04f 0b01 	mov.w	fp, #1
 800b0ba:	f8cd b00c 	str.w	fp, [sp, #12]
 800b0be:	465b      	mov	r3, fp
 800b0c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b0c4:	e7d0      	b.n	800b068 <_dtoa_r+0x250>
 800b0c6:	3101      	adds	r1, #1
 800b0c8:	0052      	lsls	r2, r2, #1
 800b0ca:	e7d1      	b.n	800b070 <_dtoa_r+0x258>
 800b0cc:	f3af 8000 	nop.w
 800b0d0:	636f4361 	.word	0x636f4361
 800b0d4:	3fd287a7 	.word	0x3fd287a7
 800b0d8:	8b60c8b3 	.word	0x8b60c8b3
 800b0dc:	3fc68a28 	.word	0x3fc68a28
 800b0e0:	509f79fb 	.word	0x509f79fb
 800b0e4:	3fd34413 	.word	0x3fd34413
 800b0e8:	0800ed22 	.word	0x0800ed22
 800b0ec:	0800ede4 	.word	0x0800ede4
 800b0f0:	7ff00000 	.word	0x7ff00000
 800b0f4:	0800ecff 	.word	0x0800ecff
 800b0f8:	3ff80000 	.word	0x3ff80000
 800b0fc:	0800f0a0 	.word	0x0800f0a0
 800b100:	0800ee3c 	.word	0x0800ee3c
 800b104:	0800ede0 	.word	0x0800ede0
 800b108:	0800ecfe 	.word	0x0800ecfe
 800b10c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b110:	6018      	str	r0, [r3, #0]
 800b112:	9b03      	ldr	r3, [sp, #12]
 800b114:	2b0e      	cmp	r3, #14
 800b116:	f200 80a1 	bhi.w	800b25c <_dtoa_r+0x444>
 800b11a:	2c00      	cmp	r4, #0
 800b11c:	f000 809e 	beq.w	800b25c <_dtoa_r+0x444>
 800b120:	2f00      	cmp	r7, #0
 800b122:	dd33      	ble.n	800b18c <_dtoa_r+0x374>
 800b124:	4b9c      	ldr	r3, [pc, #624]	@ (800b398 <_dtoa_r+0x580>)
 800b126:	f007 020f 	and.w	r2, r7, #15
 800b12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b12e:	ed93 7b00 	vldr	d7, [r3]
 800b132:	05f8      	lsls	r0, r7, #23
 800b134:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b138:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b13c:	d516      	bpl.n	800b16c <_dtoa_r+0x354>
 800b13e:	4b97      	ldr	r3, [pc, #604]	@ (800b39c <_dtoa_r+0x584>)
 800b140:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b148:	f7f5 fb90 	bl	800086c <__aeabi_ddiv>
 800b14c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b150:	f004 040f 	and.w	r4, r4, #15
 800b154:	2603      	movs	r6, #3
 800b156:	4d91      	ldr	r5, [pc, #580]	@ (800b39c <_dtoa_r+0x584>)
 800b158:	b954      	cbnz	r4, 800b170 <_dtoa_r+0x358>
 800b15a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b15e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b162:	f7f5 fb83 	bl	800086c <__aeabi_ddiv>
 800b166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b16a:	e028      	b.n	800b1be <_dtoa_r+0x3a6>
 800b16c:	2602      	movs	r6, #2
 800b16e:	e7f2      	b.n	800b156 <_dtoa_r+0x33e>
 800b170:	07e1      	lsls	r1, r4, #31
 800b172:	d508      	bpl.n	800b186 <_dtoa_r+0x36e>
 800b174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b178:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b17c:	f7f5 fa4c 	bl	8000618 <__aeabi_dmul>
 800b180:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b184:	3601      	adds	r6, #1
 800b186:	1064      	asrs	r4, r4, #1
 800b188:	3508      	adds	r5, #8
 800b18a:	e7e5      	b.n	800b158 <_dtoa_r+0x340>
 800b18c:	f000 80af 	beq.w	800b2ee <_dtoa_r+0x4d6>
 800b190:	427c      	negs	r4, r7
 800b192:	4b81      	ldr	r3, [pc, #516]	@ (800b398 <_dtoa_r+0x580>)
 800b194:	4d81      	ldr	r5, [pc, #516]	@ (800b39c <_dtoa_r+0x584>)
 800b196:	f004 020f 	and.w	r2, r4, #15
 800b19a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b1a6:	f7f5 fa37 	bl	8000618 <__aeabi_dmul>
 800b1aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1ae:	1124      	asrs	r4, r4, #4
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	2602      	movs	r6, #2
 800b1b4:	2c00      	cmp	r4, #0
 800b1b6:	f040 808f 	bne.w	800b2d8 <_dtoa_r+0x4c0>
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d1d3      	bne.n	800b166 <_dtoa_r+0x34e>
 800b1be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b1c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f000 8094 	beq.w	800b2f2 <_dtoa_r+0x4da>
 800b1ca:	4b75      	ldr	r3, [pc, #468]	@ (800b3a0 <_dtoa_r+0x588>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	f7f5 fc93 	bl	8000afc <__aeabi_dcmplt>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	f000 808b 	beq.w	800b2f2 <_dtoa_r+0x4da>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 8087 	beq.w	800b2f2 <_dtoa_r+0x4da>
 800b1e4:	f1bb 0f00 	cmp.w	fp, #0
 800b1e8:	dd34      	ble.n	800b254 <_dtoa_r+0x43c>
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	4b6d      	ldr	r3, [pc, #436]	@ (800b3a4 <_dtoa_r+0x58c>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	f7f5 fa11 	bl	8000618 <__aeabi_dmul>
 800b1f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1fa:	f107 38ff 	add.w	r8, r7, #4294967295
 800b1fe:	3601      	adds	r6, #1
 800b200:	465c      	mov	r4, fp
 800b202:	4630      	mov	r0, r6
 800b204:	f7f5 f99e 	bl	8000544 <__aeabi_i2d>
 800b208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b20c:	f7f5 fa04 	bl	8000618 <__aeabi_dmul>
 800b210:	4b65      	ldr	r3, [pc, #404]	@ (800b3a8 <_dtoa_r+0x590>)
 800b212:	2200      	movs	r2, #0
 800b214:	f7f5 f84a 	bl	80002ac <__adddf3>
 800b218:	4605      	mov	r5, r0
 800b21a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b21e:	2c00      	cmp	r4, #0
 800b220:	d16a      	bne.n	800b2f8 <_dtoa_r+0x4e0>
 800b222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b226:	4b61      	ldr	r3, [pc, #388]	@ (800b3ac <_dtoa_r+0x594>)
 800b228:	2200      	movs	r2, #0
 800b22a:	f7f5 f83d 	bl	80002a8 <__aeabi_dsub>
 800b22e:	4602      	mov	r2, r0
 800b230:	460b      	mov	r3, r1
 800b232:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b236:	462a      	mov	r2, r5
 800b238:	4633      	mov	r3, r6
 800b23a:	f7f5 fc7d 	bl	8000b38 <__aeabi_dcmpgt>
 800b23e:	2800      	cmp	r0, #0
 800b240:	f040 8298 	bne.w	800b774 <_dtoa_r+0x95c>
 800b244:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b248:	462a      	mov	r2, r5
 800b24a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b24e:	f7f5 fc55 	bl	8000afc <__aeabi_dcmplt>
 800b252:	bb38      	cbnz	r0, 800b2a4 <_dtoa_r+0x48c>
 800b254:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b258:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b25c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f2c0 8157 	blt.w	800b512 <_dtoa_r+0x6fa>
 800b264:	2f0e      	cmp	r7, #14
 800b266:	f300 8154 	bgt.w	800b512 <_dtoa_r+0x6fa>
 800b26a:	4b4b      	ldr	r3, [pc, #300]	@ (800b398 <_dtoa_r+0x580>)
 800b26c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b270:	ed93 7b00 	vldr	d7, [r3]
 800b274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b276:	2b00      	cmp	r3, #0
 800b278:	ed8d 7b00 	vstr	d7, [sp]
 800b27c:	f280 80e5 	bge.w	800b44a <_dtoa_r+0x632>
 800b280:	9b03      	ldr	r3, [sp, #12]
 800b282:	2b00      	cmp	r3, #0
 800b284:	f300 80e1 	bgt.w	800b44a <_dtoa_r+0x632>
 800b288:	d10c      	bne.n	800b2a4 <_dtoa_r+0x48c>
 800b28a:	4b48      	ldr	r3, [pc, #288]	@ (800b3ac <_dtoa_r+0x594>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	ec51 0b17 	vmov	r0, r1, d7
 800b292:	f7f5 f9c1 	bl	8000618 <__aeabi_dmul>
 800b296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b29a:	f7f5 fc43 	bl	8000b24 <__aeabi_dcmpge>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f000 8266 	beq.w	800b770 <_dtoa_r+0x958>
 800b2a4:	2400      	movs	r4, #0
 800b2a6:	4625      	mov	r5, r4
 800b2a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2aa:	4656      	mov	r6, sl
 800b2ac:	ea6f 0803 	mvn.w	r8, r3
 800b2b0:	2700      	movs	r7, #0
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	4648      	mov	r0, r9
 800b2b6:	f001 f80b 	bl	800c2d0 <_Bfree>
 800b2ba:	2d00      	cmp	r5, #0
 800b2bc:	f000 80bd 	beq.w	800b43a <_dtoa_r+0x622>
 800b2c0:	b12f      	cbz	r7, 800b2ce <_dtoa_r+0x4b6>
 800b2c2:	42af      	cmp	r7, r5
 800b2c4:	d003      	beq.n	800b2ce <_dtoa_r+0x4b6>
 800b2c6:	4639      	mov	r1, r7
 800b2c8:	4648      	mov	r0, r9
 800b2ca:	f001 f801 	bl	800c2d0 <_Bfree>
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4648      	mov	r0, r9
 800b2d2:	f000 fffd 	bl	800c2d0 <_Bfree>
 800b2d6:	e0b0      	b.n	800b43a <_dtoa_r+0x622>
 800b2d8:	07e2      	lsls	r2, r4, #31
 800b2da:	d505      	bpl.n	800b2e8 <_dtoa_r+0x4d0>
 800b2dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2e0:	f7f5 f99a 	bl	8000618 <__aeabi_dmul>
 800b2e4:	3601      	adds	r6, #1
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	1064      	asrs	r4, r4, #1
 800b2ea:	3508      	adds	r5, #8
 800b2ec:	e762      	b.n	800b1b4 <_dtoa_r+0x39c>
 800b2ee:	2602      	movs	r6, #2
 800b2f0:	e765      	b.n	800b1be <_dtoa_r+0x3a6>
 800b2f2:	9c03      	ldr	r4, [sp, #12]
 800b2f4:	46b8      	mov	r8, r7
 800b2f6:	e784      	b.n	800b202 <_dtoa_r+0x3ea>
 800b2f8:	4b27      	ldr	r3, [pc, #156]	@ (800b398 <_dtoa_r+0x580>)
 800b2fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b2fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b300:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b304:	4454      	add	r4, sl
 800b306:	2900      	cmp	r1, #0
 800b308:	d054      	beq.n	800b3b4 <_dtoa_r+0x59c>
 800b30a:	4929      	ldr	r1, [pc, #164]	@ (800b3b0 <_dtoa_r+0x598>)
 800b30c:	2000      	movs	r0, #0
 800b30e:	f7f5 faad 	bl	800086c <__aeabi_ddiv>
 800b312:	4633      	mov	r3, r6
 800b314:	462a      	mov	r2, r5
 800b316:	f7f4 ffc7 	bl	80002a8 <__aeabi_dsub>
 800b31a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b31e:	4656      	mov	r6, sl
 800b320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b324:	f7f5 fc28 	bl	8000b78 <__aeabi_d2iz>
 800b328:	4605      	mov	r5, r0
 800b32a:	f7f5 f90b 	bl	8000544 <__aeabi_i2d>
 800b32e:	4602      	mov	r2, r0
 800b330:	460b      	mov	r3, r1
 800b332:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b336:	f7f4 ffb7 	bl	80002a8 <__aeabi_dsub>
 800b33a:	3530      	adds	r5, #48	@ 0x30
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b344:	f806 5b01 	strb.w	r5, [r6], #1
 800b348:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b34c:	f7f5 fbd6 	bl	8000afc <__aeabi_dcmplt>
 800b350:	2800      	cmp	r0, #0
 800b352:	d172      	bne.n	800b43a <_dtoa_r+0x622>
 800b354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b358:	4911      	ldr	r1, [pc, #68]	@ (800b3a0 <_dtoa_r+0x588>)
 800b35a:	2000      	movs	r0, #0
 800b35c:	f7f4 ffa4 	bl	80002a8 <__aeabi_dsub>
 800b360:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b364:	f7f5 fbca 	bl	8000afc <__aeabi_dcmplt>
 800b368:	2800      	cmp	r0, #0
 800b36a:	f040 80b4 	bne.w	800b4d6 <_dtoa_r+0x6be>
 800b36e:	42a6      	cmp	r6, r4
 800b370:	f43f af70 	beq.w	800b254 <_dtoa_r+0x43c>
 800b374:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b378:	4b0a      	ldr	r3, [pc, #40]	@ (800b3a4 <_dtoa_r+0x58c>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	f7f5 f94c 	bl	8000618 <__aeabi_dmul>
 800b380:	4b08      	ldr	r3, [pc, #32]	@ (800b3a4 <_dtoa_r+0x58c>)
 800b382:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b386:	2200      	movs	r2, #0
 800b388:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b38c:	f7f5 f944 	bl	8000618 <__aeabi_dmul>
 800b390:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b394:	e7c4      	b.n	800b320 <_dtoa_r+0x508>
 800b396:	bf00      	nop
 800b398:	0800f0a0 	.word	0x0800f0a0
 800b39c:	0800f078 	.word	0x0800f078
 800b3a0:	3ff00000 	.word	0x3ff00000
 800b3a4:	40240000 	.word	0x40240000
 800b3a8:	401c0000 	.word	0x401c0000
 800b3ac:	40140000 	.word	0x40140000
 800b3b0:	3fe00000 	.word	0x3fe00000
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	f7f5 f92e 	bl	8000618 <__aeabi_dmul>
 800b3bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b3c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b3c2:	4656      	mov	r6, sl
 800b3c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3c8:	f7f5 fbd6 	bl	8000b78 <__aeabi_d2iz>
 800b3cc:	4605      	mov	r5, r0
 800b3ce:	f7f5 f8b9 	bl	8000544 <__aeabi_i2d>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3da:	f7f4 ff65 	bl	80002a8 <__aeabi_dsub>
 800b3de:	3530      	adds	r5, #48	@ 0x30
 800b3e0:	f806 5b01 	strb.w	r5, [r6], #1
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	42a6      	cmp	r6, r4
 800b3ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b3ee:	f04f 0200 	mov.w	r2, #0
 800b3f2:	d124      	bne.n	800b43e <_dtoa_r+0x626>
 800b3f4:	4baf      	ldr	r3, [pc, #700]	@ (800b6b4 <_dtoa_r+0x89c>)
 800b3f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b3fa:	f7f4 ff57 	bl	80002ac <__adddf3>
 800b3fe:	4602      	mov	r2, r0
 800b400:	460b      	mov	r3, r1
 800b402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b406:	f7f5 fb97 	bl	8000b38 <__aeabi_dcmpgt>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d163      	bne.n	800b4d6 <_dtoa_r+0x6be>
 800b40e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b412:	49a8      	ldr	r1, [pc, #672]	@ (800b6b4 <_dtoa_r+0x89c>)
 800b414:	2000      	movs	r0, #0
 800b416:	f7f4 ff47 	bl	80002a8 <__aeabi_dsub>
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b422:	f7f5 fb6b 	bl	8000afc <__aeabi_dcmplt>
 800b426:	2800      	cmp	r0, #0
 800b428:	f43f af14 	beq.w	800b254 <_dtoa_r+0x43c>
 800b42c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b42e:	1e73      	subs	r3, r6, #1
 800b430:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b432:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b436:	2b30      	cmp	r3, #48	@ 0x30
 800b438:	d0f8      	beq.n	800b42c <_dtoa_r+0x614>
 800b43a:	4647      	mov	r7, r8
 800b43c:	e03b      	b.n	800b4b6 <_dtoa_r+0x69e>
 800b43e:	4b9e      	ldr	r3, [pc, #632]	@ (800b6b8 <_dtoa_r+0x8a0>)
 800b440:	f7f5 f8ea 	bl	8000618 <__aeabi_dmul>
 800b444:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b448:	e7bc      	b.n	800b3c4 <_dtoa_r+0x5ac>
 800b44a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b44e:	4656      	mov	r6, sl
 800b450:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b454:	4620      	mov	r0, r4
 800b456:	4629      	mov	r1, r5
 800b458:	f7f5 fa08 	bl	800086c <__aeabi_ddiv>
 800b45c:	f7f5 fb8c 	bl	8000b78 <__aeabi_d2iz>
 800b460:	4680      	mov	r8, r0
 800b462:	f7f5 f86f 	bl	8000544 <__aeabi_i2d>
 800b466:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b46a:	f7f5 f8d5 	bl	8000618 <__aeabi_dmul>
 800b46e:	4602      	mov	r2, r0
 800b470:	460b      	mov	r3, r1
 800b472:	4620      	mov	r0, r4
 800b474:	4629      	mov	r1, r5
 800b476:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b47a:	f7f4 ff15 	bl	80002a8 <__aeabi_dsub>
 800b47e:	f806 4b01 	strb.w	r4, [r6], #1
 800b482:	9d03      	ldr	r5, [sp, #12]
 800b484:	eba6 040a 	sub.w	r4, r6, sl
 800b488:	42a5      	cmp	r5, r4
 800b48a:	4602      	mov	r2, r0
 800b48c:	460b      	mov	r3, r1
 800b48e:	d133      	bne.n	800b4f8 <_dtoa_r+0x6e0>
 800b490:	f7f4 ff0c 	bl	80002ac <__adddf3>
 800b494:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b498:	4604      	mov	r4, r0
 800b49a:	460d      	mov	r5, r1
 800b49c:	f7f5 fb4c 	bl	8000b38 <__aeabi_dcmpgt>
 800b4a0:	b9c0      	cbnz	r0, 800b4d4 <_dtoa_r+0x6bc>
 800b4a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	f7f5 fb1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b4ae:	b110      	cbz	r0, 800b4b6 <_dtoa_r+0x69e>
 800b4b0:	f018 0f01 	tst.w	r8, #1
 800b4b4:	d10e      	bne.n	800b4d4 <_dtoa_r+0x6bc>
 800b4b6:	9902      	ldr	r1, [sp, #8]
 800b4b8:	4648      	mov	r0, r9
 800b4ba:	f000 ff09 	bl	800c2d0 <_Bfree>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	7033      	strb	r3, [r6, #0]
 800b4c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4c4:	3701      	adds	r7, #1
 800b4c6:	601f      	str	r7, [r3, #0]
 800b4c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	f000 824b 	beq.w	800b966 <_dtoa_r+0xb4e>
 800b4d0:	601e      	str	r6, [r3, #0]
 800b4d2:	e248      	b.n	800b966 <_dtoa_r+0xb4e>
 800b4d4:	46b8      	mov	r8, r7
 800b4d6:	4633      	mov	r3, r6
 800b4d8:	461e      	mov	r6, r3
 800b4da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4de:	2a39      	cmp	r2, #57	@ 0x39
 800b4e0:	d106      	bne.n	800b4f0 <_dtoa_r+0x6d8>
 800b4e2:	459a      	cmp	sl, r3
 800b4e4:	d1f8      	bne.n	800b4d8 <_dtoa_r+0x6c0>
 800b4e6:	2230      	movs	r2, #48	@ 0x30
 800b4e8:	f108 0801 	add.w	r8, r8, #1
 800b4ec:	f88a 2000 	strb.w	r2, [sl]
 800b4f0:	781a      	ldrb	r2, [r3, #0]
 800b4f2:	3201      	adds	r2, #1
 800b4f4:	701a      	strb	r2, [r3, #0]
 800b4f6:	e7a0      	b.n	800b43a <_dtoa_r+0x622>
 800b4f8:	4b6f      	ldr	r3, [pc, #444]	@ (800b6b8 <_dtoa_r+0x8a0>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f7f5 f88c 	bl	8000618 <__aeabi_dmul>
 800b500:	2200      	movs	r2, #0
 800b502:	2300      	movs	r3, #0
 800b504:	4604      	mov	r4, r0
 800b506:	460d      	mov	r5, r1
 800b508:	f7f5 faee 	bl	8000ae8 <__aeabi_dcmpeq>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d09f      	beq.n	800b450 <_dtoa_r+0x638>
 800b510:	e7d1      	b.n	800b4b6 <_dtoa_r+0x69e>
 800b512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b514:	2a00      	cmp	r2, #0
 800b516:	f000 80ea 	beq.w	800b6ee <_dtoa_r+0x8d6>
 800b51a:	9a07      	ldr	r2, [sp, #28]
 800b51c:	2a01      	cmp	r2, #1
 800b51e:	f300 80cd 	bgt.w	800b6bc <_dtoa_r+0x8a4>
 800b522:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b524:	2a00      	cmp	r2, #0
 800b526:	f000 80c1 	beq.w	800b6ac <_dtoa_r+0x894>
 800b52a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b52e:	9c08      	ldr	r4, [sp, #32]
 800b530:	9e00      	ldr	r6, [sp, #0]
 800b532:	9a00      	ldr	r2, [sp, #0]
 800b534:	441a      	add	r2, r3
 800b536:	9200      	str	r2, [sp, #0]
 800b538:	9a06      	ldr	r2, [sp, #24]
 800b53a:	2101      	movs	r1, #1
 800b53c:	441a      	add	r2, r3
 800b53e:	4648      	mov	r0, r9
 800b540:	9206      	str	r2, [sp, #24]
 800b542:	f000 ffc3 	bl	800c4cc <__i2b>
 800b546:	4605      	mov	r5, r0
 800b548:	b166      	cbz	r6, 800b564 <_dtoa_r+0x74c>
 800b54a:	9b06      	ldr	r3, [sp, #24]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	dd09      	ble.n	800b564 <_dtoa_r+0x74c>
 800b550:	42b3      	cmp	r3, r6
 800b552:	9a00      	ldr	r2, [sp, #0]
 800b554:	bfa8      	it	ge
 800b556:	4633      	movge	r3, r6
 800b558:	1ad2      	subs	r2, r2, r3
 800b55a:	9200      	str	r2, [sp, #0]
 800b55c:	9a06      	ldr	r2, [sp, #24]
 800b55e:	1af6      	subs	r6, r6, r3
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	9306      	str	r3, [sp, #24]
 800b564:	9b08      	ldr	r3, [sp, #32]
 800b566:	b30b      	cbz	r3, 800b5ac <_dtoa_r+0x794>
 800b568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f000 80c6 	beq.w	800b6fc <_dtoa_r+0x8e4>
 800b570:	2c00      	cmp	r4, #0
 800b572:	f000 80c0 	beq.w	800b6f6 <_dtoa_r+0x8de>
 800b576:	4629      	mov	r1, r5
 800b578:	4622      	mov	r2, r4
 800b57a:	4648      	mov	r0, r9
 800b57c:	f001 f85e 	bl	800c63c <__pow5mult>
 800b580:	9a02      	ldr	r2, [sp, #8]
 800b582:	4601      	mov	r1, r0
 800b584:	4605      	mov	r5, r0
 800b586:	4648      	mov	r0, r9
 800b588:	f000 ffb6 	bl	800c4f8 <__multiply>
 800b58c:	9902      	ldr	r1, [sp, #8]
 800b58e:	4680      	mov	r8, r0
 800b590:	4648      	mov	r0, r9
 800b592:	f000 fe9d 	bl	800c2d0 <_Bfree>
 800b596:	9b08      	ldr	r3, [sp, #32]
 800b598:	1b1b      	subs	r3, r3, r4
 800b59a:	9308      	str	r3, [sp, #32]
 800b59c:	f000 80b1 	beq.w	800b702 <_dtoa_r+0x8ea>
 800b5a0:	9a08      	ldr	r2, [sp, #32]
 800b5a2:	4641      	mov	r1, r8
 800b5a4:	4648      	mov	r0, r9
 800b5a6:	f001 f849 	bl	800c63c <__pow5mult>
 800b5aa:	9002      	str	r0, [sp, #8]
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	4648      	mov	r0, r9
 800b5b0:	f000 ff8c 	bl	800c4cc <__i2b>
 800b5b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 81d8 	beq.w	800b96e <_dtoa_r+0xb56>
 800b5be:	461a      	mov	r2, r3
 800b5c0:	4601      	mov	r1, r0
 800b5c2:	4648      	mov	r0, r9
 800b5c4:	f001 f83a 	bl	800c63c <__pow5mult>
 800b5c8:	9b07      	ldr	r3, [sp, #28]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	f300 809f 	bgt.w	800b710 <_dtoa_r+0x8f8>
 800b5d2:	9b04      	ldr	r3, [sp, #16]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f040 8097 	bne.w	800b708 <_dtoa_r+0x8f0>
 800b5da:	9b05      	ldr	r3, [sp, #20]
 800b5dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f040 8093 	bne.w	800b70c <_dtoa_r+0x8f4>
 800b5e6:	9b05      	ldr	r3, [sp, #20]
 800b5e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b5ec:	0d1b      	lsrs	r3, r3, #20
 800b5ee:	051b      	lsls	r3, r3, #20
 800b5f0:	b133      	cbz	r3, 800b600 <_dtoa_r+0x7e8>
 800b5f2:	9b00      	ldr	r3, [sp, #0]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	9b06      	ldr	r3, [sp, #24]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	9306      	str	r3, [sp, #24]
 800b5fe:	2301      	movs	r3, #1
 800b600:	9308      	str	r3, [sp, #32]
 800b602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 81b8 	beq.w	800b97a <_dtoa_r+0xb62>
 800b60a:	6923      	ldr	r3, [r4, #16]
 800b60c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b610:	6918      	ldr	r0, [r3, #16]
 800b612:	f000 ff0f 	bl	800c434 <__hi0bits>
 800b616:	f1c0 0020 	rsb	r0, r0, #32
 800b61a:	9b06      	ldr	r3, [sp, #24]
 800b61c:	4418      	add	r0, r3
 800b61e:	f010 001f 	ands.w	r0, r0, #31
 800b622:	f000 8082 	beq.w	800b72a <_dtoa_r+0x912>
 800b626:	f1c0 0320 	rsb	r3, r0, #32
 800b62a:	2b04      	cmp	r3, #4
 800b62c:	dd73      	ble.n	800b716 <_dtoa_r+0x8fe>
 800b62e:	9b00      	ldr	r3, [sp, #0]
 800b630:	f1c0 001c 	rsb	r0, r0, #28
 800b634:	4403      	add	r3, r0
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	9b06      	ldr	r3, [sp, #24]
 800b63a:	4403      	add	r3, r0
 800b63c:	4406      	add	r6, r0
 800b63e:	9306      	str	r3, [sp, #24]
 800b640:	9b00      	ldr	r3, [sp, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	dd05      	ble.n	800b652 <_dtoa_r+0x83a>
 800b646:	9902      	ldr	r1, [sp, #8]
 800b648:	461a      	mov	r2, r3
 800b64a:	4648      	mov	r0, r9
 800b64c:	f001 f850 	bl	800c6f0 <__lshift>
 800b650:	9002      	str	r0, [sp, #8]
 800b652:	9b06      	ldr	r3, [sp, #24]
 800b654:	2b00      	cmp	r3, #0
 800b656:	dd05      	ble.n	800b664 <_dtoa_r+0x84c>
 800b658:	4621      	mov	r1, r4
 800b65a:	461a      	mov	r2, r3
 800b65c:	4648      	mov	r0, r9
 800b65e:	f001 f847 	bl	800c6f0 <__lshift>
 800b662:	4604      	mov	r4, r0
 800b664:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b666:	2b00      	cmp	r3, #0
 800b668:	d061      	beq.n	800b72e <_dtoa_r+0x916>
 800b66a:	9802      	ldr	r0, [sp, #8]
 800b66c:	4621      	mov	r1, r4
 800b66e:	f001 f8ab 	bl	800c7c8 <__mcmp>
 800b672:	2800      	cmp	r0, #0
 800b674:	da5b      	bge.n	800b72e <_dtoa_r+0x916>
 800b676:	2300      	movs	r3, #0
 800b678:	9902      	ldr	r1, [sp, #8]
 800b67a:	220a      	movs	r2, #10
 800b67c:	4648      	mov	r0, r9
 800b67e:	f000 fe49 	bl	800c314 <__multadd>
 800b682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b684:	9002      	str	r0, [sp, #8]
 800b686:	f107 38ff 	add.w	r8, r7, #4294967295
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 8177 	beq.w	800b97e <_dtoa_r+0xb66>
 800b690:	4629      	mov	r1, r5
 800b692:	2300      	movs	r3, #0
 800b694:	220a      	movs	r2, #10
 800b696:	4648      	mov	r0, r9
 800b698:	f000 fe3c 	bl	800c314 <__multadd>
 800b69c:	f1bb 0f00 	cmp.w	fp, #0
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	dc6f      	bgt.n	800b784 <_dtoa_r+0x96c>
 800b6a4:	9b07      	ldr	r3, [sp, #28]
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	dc49      	bgt.n	800b73e <_dtoa_r+0x926>
 800b6aa:	e06b      	b.n	800b784 <_dtoa_r+0x96c>
 800b6ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b6ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b6b2:	e73c      	b.n	800b52e <_dtoa_r+0x716>
 800b6b4:	3fe00000 	.word	0x3fe00000
 800b6b8:	40240000 	.word	0x40240000
 800b6bc:	9b03      	ldr	r3, [sp, #12]
 800b6be:	1e5c      	subs	r4, r3, #1
 800b6c0:	9b08      	ldr	r3, [sp, #32]
 800b6c2:	42a3      	cmp	r3, r4
 800b6c4:	db09      	blt.n	800b6da <_dtoa_r+0x8c2>
 800b6c6:	1b1c      	subs	r4, r3, r4
 800b6c8:	9b03      	ldr	r3, [sp, #12]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f6bf af30 	bge.w	800b530 <_dtoa_r+0x718>
 800b6d0:	9b00      	ldr	r3, [sp, #0]
 800b6d2:	9a03      	ldr	r2, [sp, #12]
 800b6d4:	1a9e      	subs	r6, r3, r2
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	e72b      	b.n	800b532 <_dtoa_r+0x71a>
 800b6da:	9b08      	ldr	r3, [sp, #32]
 800b6dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6de:	9408      	str	r4, [sp, #32]
 800b6e0:	1ae3      	subs	r3, r4, r3
 800b6e2:	441a      	add	r2, r3
 800b6e4:	9e00      	ldr	r6, [sp, #0]
 800b6e6:	9b03      	ldr	r3, [sp, #12]
 800b6e8:	920d      	str	r2, [sp, #52]	@ 0x34
 800b6ea:	2400      	movs	r4, #0
 800b6ec:	e721      	b.n	800b532 <_dtoa_r+0x71a>
 800b6ee:	9c08      	ldr	r4, [sp, #32]
 800b6f0:	9e00      	ldr	r6, [sp, #0]
 800b6f2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b6f4:	e728      	b.n	800b548 <_dtoa_r+0x730>
 800b6f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b6fa:	e751      	b.n	800b5a0 <_dtoa_r+0x788>
 800b6fc:	9a08      	ldr	r2, [sp, #32]
 800b6fe:	9902      	ldr	r1, [sp, #8]
 800b700:	e750      	b.n	800b5a4 <_dtoa_r+0x78c>
 800b702:	f8cd 8008 	str.w	r8, [sp, #8]
 800b706:	e751      	b.n	800b5ac <_dtoa_r+0x794>
 800b708:	2300      	movs	r3, #0
 800b70a:	e779      	b.n	800b600 <_dtoa_r+0x7e8>
 800b70c:	9b04      	ldr	r3, [sp, #16]
 800b70e:	e777      	b.n	800b600 <_dtoa_r+0x7e8>
 800b710:	2300      	movs	r3, #0
 800b712:	9308      	str	r3, [sp, #32]
 800b714:	e779      	b.n	800b60a <_dtoa_r+0x7f2>
 800b716:	d093      	beq.n	800b640 <_dtoa_r+0x828>
 800b718:	9a00      	ldr	r2, [sp, #0]
 800b71a:	331c      	adds	r3, #28
 800b71c:	441a      	add	r2, r3
 800b71e:	9200      	str	r2, [sp, #0]
 800b720:	9a06      	ldr	r2, [sp, #24]
 800b722:	441a      	add	r2, r3
 800b724:	441e      	add	r6, r3
 800b726:	9206      	str	r2, [sp, #24]
 800b728:	e78a      	b.n	800b640 <_dtoa_r+0x828>
 800b72a:	4603      	mov	r3, r0
 800b72c:	e7f4      	b.n	800b718 <_dtoa_r+0x900>
 800b72e:	9b03      	ldr	r3, [sp, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	46b8      	mov	r8, r7
 800b734:	dc20      	bgt.n	800b778 <_dtoa_r+0x960>
 800b736:	469b      	mov	fp, r3
 800b738:	9b07      	ldr	r3, [sp, #28]
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	dd1e      	ble.n	800b77c <_dtoa_r+0x964>
 800b73e:	f1bb 0f00 	cmp.w	fp, #0
 800b742:	f47f adb1 	bne.w	800b2a8 <_dtoa_r+0x490>
 800b746:	4621      	mov	r1, r4
 800b748:	465b      	mov	r3, fp
 800b74a:	2205      	movs	r2, #5
 800b74c:	4648      	mov	r0, r9
 800b74e:	f000 fde1 	bl	800c314 <__multadd>
 800b752:	4601      	mov	r1, r0
 800b754:	4604      	mov	r4, r0
 800b756:	9802      	ldr	r0, [sp, #8]
 800b758:	f001 f836 	bl	800c7c8 <__mcmp>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	f77f ada3 	ble.w	800b2a8 <_dtoa_r+0x490>
 800b762:	4656      	mov	r6, sl
 800b764:	2331      	movs	r3, #49	@ 0x31
 800b766:	f806 3b01 	strb.w	r3, [r6], #1
 800b76a:	f108 0801 	add.w	r8, r8, #1
 800b76e:	e59f      	b.n	800b2b0 <_dtoa_r+0x498>
 800b770:	9c03      	ldr	r4, [sp, #12]
 800b772:	46b8      	mov	r8, r7
 800b774:	4625      	mov	r5, r4
 800b776:	e7f4      	b.n	800b762 <_dtoa_r+0x94a>
 800b778:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b77c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f000 8101 	beq.w	800b986 <_dtoa_r+0xb6e>
 800b784:	2e00      	cmp	r6, #0
 800b786:	dd05      	ble.n	800b794 <_dtoa_r+0x97c>
 800b788:	4629      	mov	r1, r5
 800b78a:	4632      	mov	r2, r6
 800b78c:	4648      	mov	r0, r9
 800b78e:	f000 ffaf 	bl	800c6f0 <__lshift>
 800b792:	4605      	mov	r5, r0
 800b794:	9b08      	ldr	r3, [sp, #32]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d05c      	beq.n	800b854 <_dtoa_r+0xa3c>
 800b79a:	6869      	ldr	r1, [r5, #4]
 800b79c:	4648      	mov	r0, r9
 800b79e:	f000 fd57 	bl	800c250 <_Balloc>
 800b7a2:	4606      	mov	r6, r0
 800b7a4:	b928      	cbnz	r0, 800b7b2 <_dtoa_r+0x99a>
 800b7a6:	4b82      	ldr	r3, [pc, #520]	@ (800b9b0 <_dtoa_r+0xb98>)
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b7ae:	f7ff bb4a 	b.w	800ae46 <_dtoa_r+0x2e>
 800b7b2:	692a      	ldr	r2, [r5, #16]
 800b7b4:	3202      	adds	r2, #2
 800b7b6:	0092      	lsls	r2, r2, #2
 800b7b8:	f105 010c 	add.w	r1, r5, #12
 800b7bc:	300c      	adds	r0, #12
 800b7be:	f7ff fa6c 	bl	800ac9a <memcpy>
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	4631      	mov	r1, r6
 800b7c6:	4648      	mov	r0, r9
 800b7c8:	f000 ff92 	bl	800c6f0 <__lshift>
 800b7cc:	f10a 0301 	add.w	r3, sl, #1
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	eb0a 030b 	add.w	r3, sl, fp
 800b7d6:	9308      	str	r3, [sp, #32]
 800b7d8:	9b04      	ldr	r3, [sp, #16]
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	462f      	mov	r7, r5
 800b7e0:	9306      	str	r3, [sp, #24]
 800b7e2:	4605      	mov	r5, r0
 800b7e4:	9b00      	ldr	r3, [sp, #0]
 800b7e6:	9802      	ldr	r0, [sp, #8]
 800b7e8:	4621      	mov	r1, r4
 800b7ea:	f103 3bff 	add.w	fp, r3, #4294967295
 800b7ee:	f7ff fa89 	bl	800ad04 <quorem>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	3330      	adds	r3, #48	@ 0x30
 800b7f6:	9003      	str	r0, [sp, #12]
 800b7f8:	4639      	mov	r1, r7
 800b7fa:	9802      	ldr	r0, [sp, #8]
 800b7fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7fe:	f000 ffe3 	bl	800c7c8 <__mcmp>
 800b802:	462a      	mov	r2, r5
 800b804:	9004      	str	r0, [sp, #16]
 800b806:	4621      	mov	r1, r4
 800b808:	4648      	mov	r0, r9
 800b80a:	f000 fff9 	bl	800c800 <__mdiff>
 800b80e:	68c2      	ldr	r2, [r0, #12]
 800b810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b812:	4606      	mov	r6, r0
 800b814:	bb02      	cbnz	r2, 800b858 <_dtoa_r+0xa40>
 800b816:	4601      	mov	r1, r0
 800b818:	9802      	ldr	r0, [sp, #8]
 800b81a:	f000 ffd5 	bl	800c7c8 <__mcmp>
 800b81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b820:	4602      	mov	r2, r0
 800b822:	4631      	mov	r1, r6
 800b824:	4648      	mov	r0, r9
 800b826:	920c      	str	r2, [sp, #48]	@ 0x30
 800b828:	9309      	str	r3, [sp, #36]	@ 0x24
 800b82a:	f000 fd51 	bl	800c2d0 <_Bfree>
 800b82e:	9b07      	ldr	r3, [sp, #28]
 800b830:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b832:	9e00      	ldr	r6, [sp, #0]
 800b834:	ea42 0103 	orr.w	r1, r2, r3
 800b838:	9b06      	ldr	r3, [sp, #24]
 800b83a:	4319      	orrs	r1, r3
 800b83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b83e:	d10d      	bne.n	800b85c <_dtoa_r+0xa44>
 800b840:	2b39      	cmp	r3, #57	@ 0x39
 800b842:	d027      	beq.n	800b894 <_dtoa_r+0xa7c>
 800b844:	9a04      	ldr	r2, [sp, #16]
 800b846:	2a00      	cmp	r2, #0
 800b848:	dd01      	ble.n	800b84e <_dtoa_r+0xa36>
 800b84a:	9b03      	ldr	r3, [sp, #12]
 800b84c:	3331      	adds	r3, #49	@ 0x31
 800b84e:	f88b 3000 	strb.w	r3, [fp]
 800b852:	e52e      	b.n	800b2b2 <_dtoa_r+0x49a>
 800b854:	4628      	mov	r0, r5
 800b856:	e7b9      	b.n	800b7cc <_dtoa_r+0x9b4>
 800b858:	2201      	movs	r2, #1
 800b85a:	e7e2      	b.n	800b822 <_dtoa_r+0xa0a>
 800b85c:	9904      	ldr	r1, [sp, #16]
 800b85e:	2900      	cmp	r1, #0
 800b860:	db04      	blt.n	800b86c <_dtoa_r+0xa54>
 800b862:	9807      	ldr	r0, [sp, #28]
 800b864:	4301      	orrs	r1, r0
 800b866:	9806      	ldr	r0, [sp, #24]
 800b868:	4301      	orrs	r1, r0
 800b86a:	d120      	bne.n	800b8ae <_dtoa_r+0xa96>
 800b86c:	2a00      	cmp	r2, #0
 800b86e:	ddee      	ble.n	800b84e <_dtoa_r+0xa36>
 800b870:	9902      	ldr	r1, [sp, #8]
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	2201      	movs	r2, #1
 800b876:	4648      	mov	r0, r9
 800b878:	f000 ff3a 	bl	800c6f0 <__lshift>
 800b87c:	4621      	mov	r1, r4
 800b87e:	9002      	str	r0, [sp, #8]
 800b880:	f000 ffa2 	bl	800c7c8 <__mcmp>
 800b884:	2800      	cmp	r0, #0
 800b886:	9b00      	ldr	r3, [sp, #0]
 800b888:	dc02      	bgt.n	800b890 <_dtoa_r+0xa78>
 800b88a:	d1e0      	bne.n	800b84e <_dtoa_r+0xa36>
 800b88c:	07da      	lsls	r2, r3, #31
 800b88e:	d5de      	bpl.n	800b84e <_dtoa_r+0xa36>
 800b890:	2b39      	cmp	r3, #57	@ 0x39
 800b892:	d1da      	bne.n	800b84a <_dtoa_r+0xa32>
 800b894:	2339      	movs	r3, #57	@ 0x39
 800b896:	f88b 3000 	strb.w	r3, [fp]
 800b89a:	4633      	mov	r3, r6
 800b89c:	461e      	mov	r6, r3
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b8a4:	2a39      	cmp	r2, #57	@ 0x39
 800b8a6:	d04e      	beq.n	800b946 <_dtoa_r+0xb2e>
 800b8a8:	3201      	adds	r2, #1
 800b8aa:	701a      	strb	r2, [r3, #0]
 800b8ac:	e501      	b.n	800b2b2 <_dtoa_r+0x49a>
 800b8ae:	2a00      	cmp	r2, #0
 800b8b0:	dd03      	ble.n	800b8ba <_dtoa_r+0xaa2>
 800b8b2:	2b39      	cmp	r3, #57	@ 0x39
 800b8b4:	d0ee      	beq.n	800b894 <_dtoa_r+0xa7c>
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	e7c9      	b.n	800b84e <_dtoa_r+0xa36>
 800b8ba:	9a00      	ldr	r2, [sp, #0]
 800b8bc:	9908      	ldr	r1, [sp, #32]
 800b8be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b8c2:	428a      	cmp	r2, r1
 800b8c4:	d028      	beq.n	800b918 <_dtoa_r+0xb00>
 800b8c6:	9902      	ldr	r1, [sp, #8]
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	220a      	movs	r2, #10
 800b8cc:	4648      	mov	r0, r9
 800b8ce:	f000 fd21 	bl	800c314 <__multadd>
 800b8d2:	42af      	cmp	r7, r5
 800b8d4:	9002      	str	r0, [sp, #8]
 800b8d6:	f04f 0300 	mov.w	r3, #0
 800b8da:	f04f 020a 	mov.w	r2, #10
 800b8de:	4639      	mov	r1, r7
 800b8e0:	4648      	mov	r0, r9
 800b8e2:	d107      	bne.n	800b8f4 <_dtoa_r+0xadc>
 800b8e4:	f000 fd16 	bl	800c314 <__multadd>
 800b8e8:	4607      	mov	r7, r0
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	9b00      	ldr	r3, [sp, #0]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	e777      	b.n	800b7e4 <_dtoa_r+0x9cc>
 800b8f4:	f000 fd0e 	bl	800c314 <__multadd>
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	4607      	mov	r7, r0
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	220a      	movs	r2, #10
 800b900:	4648      	mov	r0, r9
 800b902:	f000 fd07 	bl	800c314 <__multadd>
 800b906:	4605      	mov	r5, r0
 800b908:	e7f0      	b.n	800b8ec <_dtoa_r+0xad4>
 800b90a:	f1bb 0f00 	cmp.w	fp, #0
 800b90e:	bfcc      	ite	gt
 800b910:	465e      	movgt	r6, fp
 800b912:	2601      	movle	r6, #1
 800b914:	4456      	add	r6, sl
 800b916:	2700      	movs	r7, #0
 800b918:	9902      	ldr	r1, [sp, #8]
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	2201      	movs	r2, #1
 800b91e:	4648      	mov	r0, r9
 800b920:	f000 fee6 	bl	800c6f0 <__lshift>
 800b924:	4621      	mov	r1, r4
 800b926:	9002      	str	r0, [sp, #8]
 800b928:	f000 ff4e 	bl	800c7c8 <__mcmp>
 800b92c:	2800      	cmp	r0, #0
 800b92e:	dcb4      	bgt.n	800b89a <_dtoa_r+0xa82>
 800b930:	d102      	bne.n	800b938 <_dtoa_r+0xb20>
 800b932:	9b00      	ldr	r3, [sp, #0]
 800b934:	07db      	lsls	r3, r3, #31
 800b936:	d4b0      	bmi.n	800b89a <_dtoa_r+0xa82>
 800b938:	4633      	mov	r3, r6
 800b93a:	461e      	mov	r6, r3
 800b93c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b940:	2a30      	cmp	r2, #48	@ 0x30
 800b942:	d0fa      	beq.n	800b93a <_dtoa_r+0xb22>
 800b944:	e4b5      	b.n	800b2b2 <_dtoa_r+0x49a>
 800b946:	459a      	cmp	sl, r3
 800b948:	d1a8      	bne.n	800b89c <_dtoa_r+0xa84>
 800b94a:	2331      	movs	r3, #49	@ 0x31
 800b94c:	f108 0801 	add.w	r8, r8, #1
 800b950:	f88a 3000 	strb.w	r3, [sl]
 800b954:	e4ad      	b.n	800b2b2 <_dtoa_r+0x49a>
 800b956:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b958:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b9b4 <_dtoa_r+0xb9c>
 800b95c:	b11b      	cbz	r3, 800b966 <_dtoa_r+0xb4e>
 800b95e:	f10a 0308 	add.w	r3, sl, #8
 800b962:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b964:	6013      	str	r3, [r2, #0]
 800b966:	4650      	mov	r0, sl
 800b968:	b017      	add	sp, #92	@ 0x5c
 800b96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96e:	9b07      	ldr	r3, [sp, #28]
 800b970:	2b01      	cmp	r3, #1
 800b972:	f77f ae2e 	ble.w	800b5d2 <_dtoa_r+0x7ba>
 800b976:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b978:	9308      	str	r3, [sp, #32]
 800b97a:	2001      	movs	r0, #1
 800b97c:	e64d      	b.n	800b61a <_dtoa_r+0x802>
 800b97e:	f1bb 0f00 	cmp.w	fp, #0
 800b982:	f77f aed9 	ble.w	800b738 <_dtoa_r+0x920>
 800b986:	4656      	mov	r6, sl
 800b988:	9802      	ldr	r0, [sp, #8]
 800b98a:	4621      	mov	r1, r4
 800b98c:	f7ff f9ba 	bl	800ad04 <quorem>
 800b990:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b994:	f806 3b01 	strb.w	r3, [r6], #1
 800b998:	eba6 020a 	sub.w	r2, r6, sl
 800b99c:	4593      	cmp	fp, r2
 800b99e:	ddb4      	ble.n	800b90a <_dtoa_r+0xaf2>
 800b9a0:	9902      	ldr	r1, [sp, #8]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	220a      	movs	r2, #10
 800b9a6:	4648      	mov	r0, r9
 800b9a8:	f000 fcb4 	bl	800c314 <__multadd>
 800b9ac:	9002      	str	r0, [sp, #8]
 800b9ae:	e7eb      	b.n	800b988 <_dtoa_r+0xb70>
 800b9b0:	0800ee3c 	.word	0x0800ee3c
 800b9b4:	0800edd7 	.word	0x0800edd7

0800b9b8 <_free_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	4605      	mov	r5, r0
 800b9bc:	2900      	cmp	r1, #0
 800b9be:	d041      	beq.n	800ba44 <_free_r+0x8c>
 800b9c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9c4:	1f0c      	subs	r4, r1, #4
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	bfb8      	it	lt
 800b9ca:	18e4      	addlt	r4, r4, r3
 800b9cc:	f000 fc34 	bl	800c238 <__malloc_lock>
 800b9d0:	4a1d      	ldr	r2, [pc, #116]	@ (800ba48 <_free_r+0x90>)
 800b9d2:	6813      	ldr	r3, [r2, #0]
 800b9d4:	b933      	cbnz	r3, 800b9e4 <_free_r+0x2c>
 800b9d6:	6063      	str	r3, [r4, #4]
 800b9d8:	6014      	str	r4, [r2, #0]
 800b9da:	4628      	mov	r0, r5
 800b9dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9e0:	f000 bc30 	b.w	800c244 <__malloc_unlock>
 800b9e4:	42a3      	cmp	r3, r4
 800b9e6:	d908      	bls.n	800b9fa <_free_r+0x42>
 800b9e8:	6820      	ldr	r0, [r4, #0]
 800b9ea:	1821      	adds	r1, r4, r0
 800b9ec:	428b      	cmp	r3, r1
 800b9ee:	bf01      	itttt	eq
 800b9f0:	6819      	ldreq	r1, [r3, #0]
 800b9f2:	685b      	ldreq	r3, [r3, #4]
 800b9f4:	1809      	addeq	r1, r1, r0
 800b9f6:	6021      	streq	r1, [r4, #0]
 800b9f8:	e7ed      	b.n	800b9d6 <_free_r+0x1e>
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	b10b      	cbz	r3, 800ba04 <_free_r+0x4c>
 800ba00:	42a3      	cmp	r3, r4
 800ba02:	d9fa      	bls.n	800b9fa <_free_r+0x42>
 800ba04:	6811      	ldr	r1, [r2, #0]
 800ba06:	1850      	adds	r0, r2, r1
 800ba08:	42a0      	cmp	r0, r4
 800ba0a:	d10b      	bne.n	800ba24 <_free_r+0x6c>
 800ba0c:	6820      	ldr	r0, [r4, #0]
 800ba0e:	4401      	add	r1, r0
 800ba10:	1850      	adds	r0, r2, r1
 800ba12:	4283      	cmp	r3, r0
 800ba14:	6011      	str	r1, [r2, #0]
 800ba16:	d1e0      	bne.n	800b9da <_free_r+0x22>
 800ba18:	6818      	ldr	r0, [r3, #0]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	6053      	str	r3, [r2, #4]
 800ba1e:	4408      	add	r0, r1
 800ba20:	6010      	str	r0, [r2, #0]
 800ba22:	e7da      	b.n	800b9da <_free_r+0x22>
 800ba24:	d902      	bls.n	800ba2c <_free_r+0x74>
 800ba26:	230c      	movs	r3, #12
 800ba28:	602b      	str	r3, [r5, #0]
 800ba2a:	e7d6      	b.n	800b9da <_free_r+0x22>
 800ba2c:	6820      	ldr	r0, [r4, #0]
 800ba2e:	1821      	adds	r1, r4, r0
 800ba30:	428b      	cmp	r3, r1
 800ba32:	bf04      	itt	eq
 800ba34:	6819      	ldreq	r1, [r3, #0]
 800ba36:	685b      	ldreq	r3, [r3, #4]
 800ba38:	6063      	str	r3, [r4, #4]
 800ba3a:	bf04      	itt	eq
 800ba3c:	1809      	addeq	r1, r1, r0
 800ba3e:	6021      	streq	r1, [r4, #0]
 800ba40:	6054      	str	r4, [r2, #4]
 800ba42:	e7ca      	b.n	800b9da <_free_r+0x22>
 800ba44:	bd38      	pop	{r3, r4, r5, pc}
 800ba46:	bf00      	nop
 800ba48:	20005b70 	.word	0x20005b70

0800ba4c <rshift>:
 800ba4c:	6903      	ldr	r3, [r0, #16]
 800ba4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba5a:	f100 0414 	add.w	r4, r0, #20
 800ba5e:	dd45      	ble.n	800baec <rshift+0xa0>
 800ba60:	f011 011f 	ands.w	r1, r1, #31
 800ba64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba6c:	d10c      	bne.n	800ba88 <rshift+0x3c>
 800ba6e:	f100 0710 	add.w	r7, r0, #16
 800ba72:	4629      	mov	r1, r5
 800ba74:	42b1      	cmp	r1, r6
 800ba76:	d334      	bcc.n	800bae2 <rshift+0x96>
 800ba78:	1a9b      	subs	r3, r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	1eea      	subs	r2, r5, #3
 800ba7e:	4296      	cmp	r6, r2
 800ba80:	bf38      	it	cc
 800ba82:	2300      	movcc	r3, #0
 800ba84:	4423      	add	r3, r4
 800ba86:	e015      	b.n	800bab4 <rshift+0x68>
 800ba88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba8c:	f1c1 0820 	rsb	r8, r1, #32
 800ba90:	40cf      	lsrs	r7, r1
 800ba92:	f105 0e04 	add.w	lr, r5, #4
 800ba96:	46a1      	mov	r9, r4
 800ba98:	4576      	cmp	r6, lr
 800ba9a:	46f4      	mov	ip, lr
 800ba9c:	d815      	bhi.n	800baca <rshift+0x7e>
 800ba9e:	1a9a      	subs	r2, r3, r2
 800baa0:	0092      	lsls	r2, r2, #2
 800baa2:	3a04      	subs	r2, #4
 800baa4:	3501      	adds	r5, #1
 800baa6:	42ae      	cmp	r6, r5
 800baa8:	bf38      	it	cc
 800baaa:	2200      	movcc	r2, #0
 800baac:	18a3      	adds	r3, r4, r2
 800baae:	50a7      	str	r7, [r4, r2]
 800bab0:	b107      	cbz	r7, 800bab4 <rshift+0x68>
 800bab2:	3304      	adds	r3, #4
 800bab4:	1b1a      	subs	r2, r3, r4
 800bab6:	42a3      	cmp	r3, r4
 800bab8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800babc:	bf08      	it	eq
 800babe:	2300      	moveq	r3, #0
 800bac0:	6102      	str	r2, [r0, #16]
 800bac2:	bf08      	it	eq
 800bac4:	6143      	streq	r3, [r0, #20]
 800bac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baca:	f8dc c000 	ldr.w	ip, [ip]
 800bace:	fa0c fc08 	lsl.w	ip, ip, r8
 800bad2:	ea4c 0707 	orr.w	r7, ip, r7
 800bad6:	f849 7b04 	str.w	r7, [r9], #4
 800bada:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bade:	40cf      	lsrs	r7, r1
 800bae0:	e7da      	b.n	800ba98 <rshift+0x4c>
 800bae2:	f851 cb04 	ldr.w	ip, [r1], #4
 800bae6:	f847 cf04 	str.w	ip, [r7, #4]!
 800baea:	e7c3      	b.n	800ba74 <rshift+0x28>
 800baec:	4623      	mov	r3, r4
 800baee:	e7e1      	b.n	800bab4 <rshift+0x68>

0800baf0 <__hexdig_fun>:
 800baf0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800baf4:	2b09      	cmp	r3, #9
 800baf6:	d802      	bhi.n	800bafe <__hexdig_fun+0xe>
 800baf8:	3820      	subs	r0, #32
 800bafa:	b2c0      	uxtb	r0, r0
 800bafc:	4770      	bx	lr
 800bafe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bb02:	2b05      	cmp	r3, #5
 800bb04:	d801      	bhi.n	800bb0a <__hexdig_fun+0x1a>
 800bb06:	3847      	subs	r0, #71	@ 0x47
 800bb08:	e7f7      	b.n	800bafa <__hexdig_fun+0xa>
 800bb0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bb0e:	2b05      	cmp	r3, #5
 800bb10:	d801      	bhi.n	800bb16 <__hexdig_fun+0x26>
 800bb12:	3827      	subs	r0, #39	@ 0x27
 800bb14:	e7f1      	b.n	800bafa <__hexdig_fun+0xa>
 800bb16:	2000      	movs	r0, #0
 800bb18:	4770      	bx	lr
	...

0800bb1c <__gethex>:
 800bb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb20:	b085      	sub	sp, #20
 800bb22:	468a      	mov	sl, r1
 800bb24:	9302      	str	r3, [sp, #8]
 800bb26:	680b      	ldr	r3, [r1, #0]
 800bb28:	9001      	str	r0, [sp, #4]
 800bb2a:	4690      	mov	r8, r2
 800bb2c:	1c9c      	adds	r4, r3, #2
 800bb2e:	46a1      	mov	r9, r4
 800bb30:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bb34:	2830      	cmp	r0, #48	@ 0x30
 800bb36:	d0fa      	beq.n	800bb2e <__gethex+0x12>
 800bb38:	eba9 0303 	sub.w	r3, r9, r3
 800bb3c:	f1a3 0b02 	sub.w	fp, r3, #2
 800bb40:	f7ff ffd6 	bl	800baf0 <__hexdig_fun>
 800bb44:	4605      	mov	r5, r0
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d168      	bne.n	800bc1c <__gethex+0x100>
 800bb4a:	49a0      	ldr	r1, [pc, #640]	@ (800bdcc <__gethex+0x2b0>)
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	4648      	mov	r0, r9
 800bb50:	f7fe ff5f 	bl	800aa12 <strncmp>
 800bb54:	4607      	mov	r7, r0
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d167      	bne.n	800bc2a <__gethex+0x10e>
 800bb5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bb5e:	4626      	mov	r6, r4
 800bb60:	f7ff ffc6 	bl	800baf0 <__hexdig_fun>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d062      	beq.n	800bc2e <__gethex+0x112>
 800bb68:	4623      	mov	r3, r4
 800bb6a:	7818      	ldrb	r0, [r3, #0]
 800bb6c:	2830      	cmp	r0, #48	@ 0x30
 800bb6e:	4699      	mov	r9, r3
 800bb70:	f103 0301 	add.w	r3, r3, #1
 800bb74:	d0f9      	beq.n	800bb6a <__gethex+0x4e>
 800bb76:	f7ff ffbb 	bl	800baf0 <__hexdig_fun>
 800bb7a:	fab0 f580 	clz	r5, r0
 800bb7e:	096d      	lsrs	r5, r5, #5
 800bb80:	f04f 0b01 	mov.w	fp, #1
 800bb84:	464a      	mov	r2, r9
 800bb86:	4616      	mov	r6, r2
 800bb88:	3201      	adds	r2, #1
 800bb8a:	7830      	ldrb	r0, [r6, #0]
 800bb8c:	f7ff ffb0 	bl	800baf0 <__hexdig_fun>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d1f8      	bne.n	800bb86 <__gethex+0x6a>
 800bb94:	498d      	ldr	r1, [pc, #564]	@ (800bdcc <__gethex+0x2b0>)
 800bb96:	2201      	movs	r2, #1
 800bb98:	4630      	mov	r0, r6
 800bb9a:	f7fe ff3a 	bl	800aa12 <strncmp>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d13f      	bne.n	800bc22 <__gethex+0x106>
 800bba2:	b944      	cbnz	r4, 800bbb6 <__gethex+0x9a>
 800bba4:	1c74      	adds	r4, r6, #1
 800bba6:	4622      	mov	r2, r4
 800bba8:	4616      	mov	r6, r2
 800bbaa:	3201      	adds	r2, #1
 800bbac:	7830      	ldrb	r0, [r6, #0]
 800bbae:	f7ff ff9f 	bl	800baf0 <__hexdig_fun>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d1f8      	bne.n	800bba8 <__gethex+0x8c>
 800bbb6:	1ba4      	subs	r4, r4, r6
 800bbb8:	00a7      	lsls	r7, r4, #2
 800bbba:	7833      	ldrb	r3, [r6, #0]
 800bbbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bbc0:	2b50      	cmp	r3, #80	@ 0x50
 800bbc2:	d13e      	bne.n	800bc42 <__gethex+0x126>
 800bbc4:	7873      	ldrb	r3, [r6, #1]
 800bbc6:	2b2b      	cmp	r3, #43	@ 0x2b
 800bbc8:	d033      	beq.n	800bc32 <__gethex+0x116>
 800bbca:	2b2d      	cmp	r3, #45	@ 0x2d
 800bbcc:	d034      	beq.n	800bc38 <__gethex+0x11c>
 800bbce:	1c71      	adds	r1, r6, #1
 800bbd0:	2400      	movs	r4, #0
 800bbd2:	7808      	ldrb	r0, [r1, #0]
 800bbd4:	f7ff ff8c 	bl	800baf0 <__hexdig_fun>
 800bbd8:	1e43      	subs	r3, r0, #1
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	2b18      	cmp	r3, #24
 800bbde:	d830      	bhi.n	800bc42 <__gethex+0x126>
 800bbe0:	f1a0 0210 	sub.w	r2, r0, #16
 800bbe4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bbe8:	f7ff ff82 	bl	800baf0 <__hexdig_fun>
 800bbec:	f100 3cff 	add.w	ip, r0, #4294967295
 800bbf0:	fa5f fc8c 	uxtb.w	ip, ip
 800bbf4:	f1bc 0f18 	cmp.w	ip, #24
 800bbf8:	f04f 030a 	mov.w	r3, #10
 800bbfc:	d91e      	bls.n	800bc3c <__gethex+0x120>
 800bbfe:	b104      	cbz	r4, 800bc02 <__gethex+0xe6>
 800bc00:	4252      	negs	r2, r2
 800bc02:	4417      	add	r7, r2
 800bc04:	f8ca 1000 	str.w	r1, [sl]
 800bc08:	b1ed      	cbz	r5, 800bc46 <__gethex+0x12a>
 800bc0a:	f1bb 0f00 	cmp.w	fp, #0
 800bc0e:	bf0c      	ite	eq
 800bc10:	2506      	moveq	r5, #6
 800bc12:	2500      	movne	r5, #0
 800bc14:	4628      	mov	r0, r5
 800bc16:	b005      	add	sp, #20
 800bc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1c:	2500      	movs	r5, #0
 800bc1e:	462c      	mov	r4, r5
 800bc20:	e7b0      	b.n	800bb84 <__gethex+0x68>
 800bc22:	2c00      	cmp	r4, #0
 800bc24:	d1c7      	bne.n	800bbb6 <__gethex+0x9a>
 800bc26:	4627      	mov	r7, r4
 800bc28:	e7c7      	b.n	800bbba <__gethex+0x9e>
 800bc2a:	464e      	mov	r6, r9
 800bc2c:	462f      	mov	r7, r5
 800bc2e:	2501      	movs	r5, #1
 800bc30:	e7c3      	b.n	800bbba <__gethex+0x9e>
 800bc32:	2400      	movs	r4, #0
 800bc34:	1cb1      	adds	r1, r6, #2
 800bc36:	e7cc      	b.n	800bbd2 <__gethex+0xb6>
 800bc38:	2401      	movs	r4, #1
 800bc3a:	e7fb      	b.n	800bc34 <__gethex+0x118>
 800bc3c:	fb03 0002 	mla	r0, r3, r2, r0
 800bc40:	e7ce      	b.n	800bbe0 <__gethex+0xc4>
 800bc42:	4631      	mov	r1, r6
 800bc44:	e7de      	b.n	800bc04 <__gethex+0xe8>
 800bc46:	eba6 0309 	sub.w	r3, r6, r9
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	2b07      	cmp	r3, #7
 800bc50:	dc0a      	bgt.n	800bc68 <__gethex+0x14c>
 800bc52:	9801      	ldr	r0, [sp, #4]
 800bc54:	f000 fafc 	bl	800c250 <_Balloc>
 800bc58:	4604      	mov	r4, r0
 800bc5a:	b940      	cbnz	r0, 800bc6e <__gethex+0x152>
 800bc5c:	4b5c      	ldr	r3, [pc, #368]	@ (800bdd0 <__gethex+0x2b4>)
 800bc5e:	4602      	mov	r2, r0
 800bc60:	21e4      	movs	r1, #228	@ 0xe4
 800bc62:	485c      	ldr	r0, [pc, #368]	@ (800bdd4 <__gethex+0x2b8>)
 800bc64:	f7ff f830 	bl	800acc8 <__assert_func>
 800bc68:	3101      	adds	r1, #1
 800bc6a:	105b      	asrs	r3, r3, #1
 800bc6c:	e7ef      	b.n	800bc4e <__gethex+0x132>
 800bc6e:	f100 0a14 	add.w	sl, r0, #20
 800bc72:	2300      	movs	r3, #0
 800bc74:	4655      	mov	r5, sl
 800bc76:	469b      	mov	fp, r3
 800bc78:	45b1      	cmp	r9, r6
 800bc7a:	d337      	bcc.n	800bcec <__gethex+0x1d0>
 800bc7c:	f845 bb04 	str.w	fp, [r5], #4
 800bc80:	eba5 050a 	sub.w	r5, r5, sl
 800bc84:	10ad      	asrs	r5, r5, #2
 800bc86:	6125      	str	r5, [r4, #16]
 800bc88:	4658      	mov	r0, fp
 800bc8a:	f000 fbd3 	bl	800c434 <__hi0bits>
 800bc8e:	016d      	lsls	r5, r5, #5
 800bc90:	f8d8 6000 	ldr.w	r6, [r8]
 800bc94:	1a2d      	subs	r5, r5, r0
 800bc96:	42b5      	cmp	r5, r6
 800bc98:	dd54      	ble.n	800bd44 <__gethex+0x228>
 800bc9a:	1bad      	subs	r5, r5, r6
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 ff5f 	bl	800cb62 <__any_on>
 800bca4:	4681      	mov	r9, r0
 800bca6:	b178      	cbz	r0, 800bcc8 <__gethex+0x1ac>
 800bca8:	1e6b      	subs	r3, r5, #1
 800bcaa:	1159      	asrs	r1, r3, #5
 800bcac:	f003 021f 	and.w	r2, r3, #31
 800bcb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bcb4:	f04f 0901 	mov.w	r9, #1
 800bcb8:	fa09 f202 	lsl.w	r2, r9, r2
 800bcbc:	420a      	tst	r2, r1
 800bcbe:	d003      	beq.n	800bcc8 <__gethex+0x1ac>
 800bcc0:	454b      	cmp	r3, r9
 800bcc2:	dc36      	bgt.n	800bd32 <__gethex+0x216>
 800bcc4:	f04f 0902 	mov.w	r9, #2
 800bcc8:	4629      	mov	r1, r5
 800bcca:	4620      	mov	r0, r4
 800bccc:	f7ff febe 	bl	800ba4c <rshift>
 800bcd0:	442f      	add	r7, r5
 800bcd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcd6:	42bb      	cmp	r3, r7
 800bcd8:	da42      	bge.n	800bd60 <__gethex+0x244>
 800bcda:	9801      	ldr	r0, [sp, #4]
 800bcdc:	4621      	mov	r1, r4
 800bcde:	f000 faf7 	bl	800c2d0 <_Bfree>
 800bce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bce4:	2300      	movs	r3, #0
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	25a3      	movs	r5, #163	@ 0xa3
 800bcea:	e793      	b.n	800bc14 <__gethex+0xf8>
 800bcec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bcf0:	2a2e      	cmp	r2, #46	@ 0x2e
 800bcf2:	d012      	beq.n	800bd1a <__gethex+0x1fe>
 800bcf4:	2b20      	cmp	r3, #32
 800bcf6:	d104      	bne.n	800bd02 <__gethex+0x1e6>
 800bcf8:	f845 bb04 	str.w	fp, [r5], #4
 800bcfc:	f04f 0b00 	mov.w	fp, #0
 800bd00:	465b      	mov	r3, fp
 800bd02:	7830      	ldrb	r0, [r6, #0]
 800bd04:	9303      	str	r3, [sp, #12]
 800bd06:	f7ff fef3 	bl	800baf0 <__hexdig_fun>
 800bd0a:	9b03      	ldr	r3, [sp, #12]
 800bd0c:	f000 000f 	and.w	r0, r0, #15
 800bd10:	4098      	lsls	r0, r3
 800bd12:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd16:	3304      	adds	r3, #4
 800bd18:	e7ae      	b.n	800bc78 <__gethex+0x15c>
 800bd1a:	45b1      	cmp	r9, r6
 800bd1c:	d8ea      	bhi.n	800bcf4 <__gethex+0x1d8>
 800bd1e:	492b      	ldr	r1, [pc, #172]	@ (800bdcc <__gethex+0x2b0>)
 800bd20:	9303      	str	r3, [sp, #12]
 800bd22:	2201      	movs	r2, #1
 800bd24:	4630      	mov	r0, r6
 800bd26:	f7fe fe74 	bl	800aa12 <strncmp>
 800bd2a:	9b03      	ldr	r3, [sp, #12]
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d1e1      	bne.n	800bcf4 <__gethex+0x1d8>
 800bd30:	e7a2      	b.n	800bc78 <__gethex+0x15c>
 800bd32:	1ea9      	subs	r1, r5, #2
 800bd34:	4620      	mov	r0, r4
 800bd36:	f000 ff14 	bl	800cb62 <__any_on>
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	d0c2      	beq.n	800bcc4 <__gethex+0x1a8>
 800bd3e:	f04f 0903 	mov.w	r9, #3
 800bd42:	e7c1      	b.n	800bcc8 <__gethex+0x1ac>
 800bd44:	da09      	bge.n	800bd5a <__gethex+0x23e>
 800bd46:	1b75      	subs	r5, r6, r5
 800bd48:	4621      	mov	r1, r4
 800bd4a:	9801      	ldr	r0, [sp, #4]
 800bd4c:	462a      	mov	r2, r5
 800bd4e:	f000 fccf 	bl	800c6f0 <__lshift>
 800bd52:	1b7f      	subs	r7, r7, r5
 800bd54:	4604      	mov	r4, r0
 800bd56:	f100 0a14 	add.w	sl, r0, #20
 800bd5a:	f04f 0900 	mov.w	r9, #0
 800bd5e:	e7b8      	b.n	800bcd2 <__gethex+0x1b6>
 800bd60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd64:	42bd      	cmp	r5, r7
 800bd66:	dd6f      	ble.n	800be48 <__gethex+0x32c>
 800bd68:	1bed      	subs	r5, r5, r7
 800bd6a:	42ae      	cmp	r6, r5
 800bd6c:	dc34      	bgt.n	800bdd8 <__gethex+0x2bc>
 800bd6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	d022      	beq.n	800bdbc <__gethex+0x2a0>
 800bd76:	2b03      	cmp	r3, #3
 800bd78:	d024      	beq.n	800bdc4 <__gethex+0x2a8>
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d115      	bne.n	800bdaa <__gethex+0x28e>
 800bd7e:	42ae      	cmp	r6, r5
 800bd80:	d113      	bne.n	800bdaa <__gethex+0x28e>
 800bd82:	2e01      	cmp	r6, #1
 800bd84:	d10b      	bne.n	800bd9e <__gethex+0x282>
 800bd86:	9a02      	ldr	r2, [sp, #8]
 800bd88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd8c:	6013      	str	r3, [r2, #0]
 800bd8e:	2301      	movs	r3, #1
 800bd90:	6123      	str	r3, [r4, #16]
 800bd92:	f8ca 3000 	str.w	r3, [sl]
 800bd96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd98:	2562      	movs	r5, #98	@ 0x62
 800bd9a:	601c      	str	r4, [r3, #0]
 800bd9c:	e73a      	b.n	800bc14 <__gethex+0xf8>
 800bd9e:	1e71      	subs	r1, r6, #1
 800bda0:	4620      	mov	r0, r4
 800bda2:	f000 fede 	bl	800cb62 <__any_on>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d1ed      	bne.n	800bd86 <__gethex+0x26a>
 800bdaa:	9801      	ldr	r0, [sp, #4]
 800bdac:	4621      	mov	r1, r4
 800bdae:	f000 fa8f 	bl	800c2d0 <_Bfree>
 800bdb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	6013      	str	r3, [r2, #0]
 800bdb8:	2550      	movs	r5, #80	@ 0x50
 800bdba:	e72b      	b.n	800bc14 <__gethex+0xf8>
 800bdbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1f3      	bne.n	800bdaa <__gethex+0x28e>
 800bdc2:	e7e0      	b.n	800bd86 <__gethex+0x26a>
 800bdc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d1dd      	bne.n	800bd86 <__gethex+0x26a>
 800bdca:	e7ee      	b.n	800bdaa <__gethex+0x28e>
 800bdcc:	0800ecec 	.word	0x0800ecec
 800bdd0:	0800ee3c 	.word	0x0800ee3c
 800bdd4:	0800ee4d 	.word	0x0800ee4d
 800bdd8:	1e6f      	subs	r7, r5, #1
 800bdda:	f1b9 0f00 	cmp.w	r9, #0
 800bdde:	d130      	bne.n	800be42 <__gethex+0x326>
 800bde0:	b127      	cbz	r7, 800bdec <__gethex+0x2d0>
 800bde2:	4639      	mov	r1, r7
 800bde4:	4620      	mov	r0, r4
 800bde6:	f000 febc 	bl	800cb62 <__any_on>
 800bdea:	4681      	mov	r9, r0
 800bdec:	117a      	asrs	r2, r7, #5
 800bdee:	2301      	movs	r3, #1
 800bdf0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bdf4:	f007 071f 	and.w	r7, r7, #31
 800bdf8:	40bb      	lsls	r3, r7
 800bdfa:	4213      	tst	r3, r2
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	4620      	mov	r0, r4
 800be00:	bf18      	it	ne
 800be02:	f049 0902 	orrne.w	r9, r9, #2
 800be06:	f7ff fe21 	bl	800ba4c <rshift>
 800be0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800be0e:	1b76      	subs	r6, r6, r5
 800be10:	2502      	movs	r5, #2
 800be12:	f1b9 0f00 	cmp.w	r9, #0
 800be16:	d047      	beq.n	800bea8 <__gethex+0x38c>
 800be18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be1c:	2b02      	cmp	r3, #2
 800be1e:	d015      	beq.n	800be4c <__gethex+0x330>
 800be20:	2b03      	cmp	r3, #3
 800be22:	d017      	beq.n	800be54 <__gethex+0x338>
 800be24:	2b01      	cmp	r3, #1
 800be26:	d109      	bne.n	800be3c <__gethex+0x320>
 800be28:	f019 0f02 	tst.w	r9, #2
 800be2c:	d006      	beq.n	800be3c <__gethex+0x320>
 800be2e:	f8da 3000 	ldr.w	r3, [sl]
 800be32:	ea49 0903 	orr.w	r9, r9, r3
 800be36:	f019 0f01 	tst.w	r9, #1
 800be3a:	d10e      	bne.n	800be5a <__gethex+0x33e>
 800be3c:	f045 0510 	orr.w	r5, r5, #16
 800be40:	e032      	b.n	800bea8 <__gethex+0x38c>
 800be42:	f04f 0901 	mov.w	r9, #1
 800be46:	e7d1      	b.n	800bdec <__gethex+0x2d0>
 800be48:	2501      	movs	r5, #1
 800be4a:	e7e2      	b.n	800be12 <__gethex+0x2f6>
 800be4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be4e:	f1c3 0301 	rsb	r3, r3, #1
 800be52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be56:	2b00      	cmp	r3, #0
 800be58:	d0f0      	beq.n	800be3c <__gethex+0x320>
 800be5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be5e:	f104 0314 	add.w	r3, r4, #20
 800be62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800be6a:	f04f 0c00 	mov.w	ip, #0
 800be6e:	4618      	mov	r0, r3
 800be70:	f853 2b04 	ldr.w	r2, [r3], #4
 800be74:	f1b2 3fff 	cmp.w	r2, #4294967295
 800be78:	d01b      	beq.n	800beb2 <__gethex+0x396>
 800be7a:	3201      	adds	r2, #1
 800be7c:	6002      	str	r2, [r0, #0]
 800be7e:	2d02      	cmp	r5, #2
 800be80:	f104 0314 	add.w	r3, r4, #20
 800be84:	d13c      	bne.n	800bf00 <__gethex+0x3e4>
 800be86:	f8d8 2000 	ldr.w	r2, [r8]
 800be8a:	3a01      	subs	r2, #1
 800be8c:	42b2      	cmp	r2, r6
 800be8e:	d109      	bne.n	800bea4 <__gethex+0x388>
 800be90:	1171      	asrs	r1, r6, #5
 800be92:	2201      	movs	r2, #1
 800be94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800be98:	f006 061f 	and.w	r6, r6, #31
 800be9c:	fa02 f606 	lsl.w	r6, r2, r6
 800bea0:	421e      	tst	r6, r3
 800bea2:	d13a      	bne.n	800bf1a <__gethex+0x3fe>
 800bea4:	f045 0520 	orr.w	r5, r5, #32
 800bea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800beaa:	601c      	str	r4, [r3, #0]
 800beac:	9b02      	ldr	r3, [sp, #8]
 800beae:	601f      	str	r7, [r3, #0]
 800beb0:	e6b0      	b.n	800bc14 <__gethex+0xf8>
 800beb2:	4299      	cmp	r1, r3
 800beb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800beb8:	d8d9      	bhi.n	800be6e <__gethex+0x352>
 800beba:	68a3      	ldr	r3, [r4, #8]
 800bebc:	459b      	cmp	fp, r3
 800bebe:	db17      	blt.n	800bef0 <__gethex+0x3d4>
 800bec0:	6861      	ldr	r1, [r4, #4]
 800bec2:	9801      	ldr	r0, [sp, #4]
 800bec4:	3101      	adds	r1, #1
 800bec6:	f000 f9c3 	bl	800c250 <_Balloc>
 800beca:	4681      	mov	r9, r0
 800becc:	b918      	cbnz	r0, 800bed6 <__gethex+0x3ba>
 800bece:	4b1a      	ldr	r3, [pc, #104]	@ (800bf38 <__gethex+0x41c>)
 800bed0:	4602      	mov	r2, r0
 800bed2:	2184      	movs	r1, #132	@ 0x84
 800bed4:	e6c5      	b.n	800bc62 <__gethex+0x146>
 800bed6:	6922      	ldr	r2, [r4, #16]
 800bed8:	3202      	adds	r2, #2
 800beda:	f104 010c 	add.w	r1, r4, #12
 800bede:	0092      	lsls	r2, r2, #2
 800bee0:	300c      	adds	r0, #12
 800bee2:	f7fe feda 	bl	800ac9a <memcpy>
 800bee6:	4621      	mov	r1, r4
 800bee8:	9801      	ldr	r0, [sp, #4]
 800beea:	f000 f9f1 	bl	800c2d0 <_Bfree>
 800beee:	464c      	mov	r4, r9
 800bef0:	6923      	ldr	r3, [r4, #16]
 800bef2:	1c5a      	adds	r2, r3, #1
 800bef4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bef8:	6122      	str	r2, [r4, #16]
 800befa:	2201      	movs	r2, #1
 800befc:	615a      	str	r2, [r3, #20]
 800befe:	e7be      	b.n	800be7e <__gethex+0x362>
 800bf00:	6922      	ldr	r2, [r4, #16]
 800bf02:	455a      	cmp	r2, fp
 800bf04:	dd0b      	ble.n	800bf1e <__gethex+0x402>
 800bf06:	2101      	movs	r1, #1
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f7ff fd9f 	bl	800ba4c <rshift>
 800bf0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf12:	3701      	adds	r7, #1
 800bf14:	42bb      	cmp	r3, r7
 800bf16:	f6ff aee0 	blt.w	800bcda <__gethex+0x1be>
 800bf1a:	2501      	movs	r5, #1
 800bf1c:	e7c2      	b.n	800bea4 <__gethex+0x388>
 800bf1e:	f016 061f 	ands.w	r6, r6, #31
 800bf22:	d0fa      	beq.n	800bf1a <__gethex+0x3fe>
 800bf24:	4453      	add	r3, sl
 800bf26:	f1c6 0620 	rsb	r6, r6, #32
 800bf2a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf2e:	f000 fa81 	bl	800c434 <__hi0bits>
 800bf32:	42b0      	cmp	r0, r6
 800bf34:	dbe7      	blt.n	800bf06 <__gethex+0x3ea>
 800bf36:	e7f0      	b.n	800bf1a <__gethex+0x3fe>
 800bf38:	0800ee3c 	.word	0x0800ee3c

0800bf3c <L_shift>:
 800bf3c:	f1c2 0208 	rsb	r2, r2, #8
 800bf40:	0092      	lsls	r2, r2, #2
 800bf42:	b570      	push	{r4, r5, r6, lr}
 800bf44:	f1c2 0620 	rsb	r6, r2, #32
 800bf48:	6843      	ldr	r3, [r0, #4]
 800bf4a:	6804      	ldr	r4, [r0, #0]
 800bf4c:	fa03 f506 	lsl.w	r5, r3, r6
 800bf50:	432c      	orrs	r4, r5
 800bf52:	40d3      	lsrs	r3, r2
 800bf54:	6004      	str	r4, [r0, #0]
 800bf56:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf5a:	4288      	cmp	r0, r1
 800bf5c:	d3f4      	bcc.n	800bf48 <L_shift+0xc>
 800bf5e:	bd70      	pop	{r4, r5, r6, pc}

0800bf60 <__match>:
 800bf60:	b530      	push	{r4, r5, lr}
 800bf62:	6803      	ldr	r3, [r0, #0]
 800bf64:	3301      	adds	r3, #1
 800bf66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf6a:	b914      	cbnz	r4, 800bf72 <__match+0x12>
 800bf6c:	6003      	str	r3, [r0, #0]
 800bf6e:	2001      	movs	r0, #1
 800bf70:	bd30      	pop	{r4, r5, pc}
 800bf72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf76:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bf7a:	2d19      	cmp	r5, #25
 800bf7c:	bf98      	it	ls
 800bf7e:	3220      	addls	r2, #32
 800bf80:	42a2      	cmp	r2, r4
 800bf82:	d0f0      	beq.n	800bf66 <__match+0x6>
 800bf84:	2000      	movs	r0, #0
 800bf86:	e7f3      	b.n	800bf70 <__match+0x10>

0800bf88 <__hexnan>:
 800bf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8c:	680b      	ldr	r3, [r1, #0]
 800bf8e:	6801      	ldr	r1, [r0, #0]
 800bf90:	115e      	asrs	r6, r3, #5
 800bf92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf96:	f013 031f 	ands.w	r3, r3, #31
 800bf9a:	b087      	sub	sp, #28
 800bf9c:	bf18      	it	ne
 800bf9e:	3604      	addne	r6, #4
 800bfa0:	2500      	movs	r5, #0
 800bfa2:	1f37      	subs	r7, r6, #4
 800bfa4:	4682      	mov	sl, r0
 800bfa6:	4690      	mov	r8, r2
 800bfa8:	9301      	str	r3, [sp, #4]
 800bfaa:	f846 5c04 	str.w	r5, [r6, #-4]
 800bfae:	46b9      	mov	r9, r7
 800bfb0:	463c      	mov	r4, r7
 800bfb2:	9502      	str	r5, [sp, #8]
 800bfb4:	46ab      	mov	fp, r5
 800bfb6:	784a      	ldrb	r2, [r1, #1]
 800bfb8:	1c4b      	adds	r3, r1, #1
 800bfba:	9303      	str	r3, [sp, #12]
 800bfbc:	b342      	cbz	r2, 800c010 <__hexnan+0x88>
 800bfbe:	4610      	mov	r0, r2
 800bfc0:	9105      	str	r1, [sp, #20]
 800bfc2:	9204      	str	r2, [sp, #16]
 800bfc4:	f7ff fd94 	bl	800baf0 <__hexdig_fun>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d151      	bne.n	800c070 <__hexnan+0xe8>
 800bfcc:	9a04      	ldr	r2, [sp, #16]
 800bfce:	9905      	ldr	r1, [sp, #20]
 800bfd0:	2a20      	cmp	r2, #32
 800bfd2:	d818      	bhi.n	800c006 <__hexnan+0x7e>
 800bfd4:	9b02      	ldr	r3, [sp, #8]
 800bfd6:	459b      	cmp	fp, r3
 800bfd8:	dd13      	ble.n	800c002 <__hexnan+0x7a>
 800bfda:	454c      	cmp	r4, r9
 800bfdc:	d206      	bcs.n	800bfec <__hexnan+0x64>
 800bfde:	2d07      	cmp	r5, #7
 800bfe0:	dc04      	bgt.n	800bfec <__hexnan+0x64>
 800bfe2:	462a      	mov	r2, r5
 800bfe4:	4649      	mov	r1, r9
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f7ff ffa8 	bl	800bf3c <L_shift>
 800bfec:	4544      	cmp	r4, r8
 800bfee:	d952      	bls.n	800c096 <__hexnan+0x10e>
 800bff0:	2300      	movs	r3, #0
 800bff2:	f1a4 0904 	sub.w	r9, r4, #4
 800bff6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bffa:	f8cd b008 	str.w	fp, [sp, #8]
 800bffe:	464c      	mov	r4, r9
 800c000:	461d      	mov	r5, r3
 800c002:	9903      	ldr	r1, [sp, #12]
 800c004:	e7d7      	b.n	800bfb6 <__hexnan+0x2e>
 800c006:	2a29      	cmp	r2, #41	@ 0x29
 800c008:	d157      	bne.n	800c0ba <__hexnan+0x132>
 800c00a:	3102      	adds	r1, #2
 800c00c:	f8ca 1000 	str.w	r1, [sl]
 800c010:	f1bb 0f00 	cmp.w	fp, #0
 800c014:	d051      	beq.n	800c0ba <__hexnan+0x132>
 800c016:	454c      	cmp	r4, r9
 800c018:	d206      	bcs.n	800c028 <__hexnan+0xa0>
 800c01a:	2d07      	cmp	r5, #7
 800c01c:	dc04      	bgt.n	800c028 <__hexnan+0xa0>
 800c01e:	462a      	mov	r2, r5
 800c020:	4649      	mov	r1, r9
 800c022:	4620      	mov	r0, r4
 800c024:	f7ff ff8a 	bl	800bf3c <L_shift>
 800c028:	4544      	cmp	r4, r8
 800c02a:	d936      	bls.n	800c09a <__hexnan+0x112>
 800c02c:	f1a8 0204 	sub.w	r2, r8, #4
 800c030:	4623      	mov	r3, r4
 800c032:	f853 1b04 	ldr.w	r1, [r3], #4
 800c036:	f842 1f04 	str.w	r1, [r2, #4]!
 800c03a:	429f      	cmp	r7, r3
 800c03c:	d2f9      	bcs.n	800c032 <__hexnan+0xaa>
 800c03e:	1b3b      	subs	r3, r7, r4
 800c040:	f023 0303 	bic.w	r3, r3, #3
 800c044:	3304      	adds	r3, #4
 800c046:	3401      	adds	r4, #1
 800c048:	3e03      	subs	r6, #3
 800c04a:	42b4      	cmp	r4, r6
 800c04c:	bf88      	it	hi
 800c04e:	2304      	movhi	r3, #4
 800c050:	4443      	add	r3, r8
 800c052:	2200      	movs	r2, #0
 800c054:	f843 2b04 	str.w	r2, [r3], #4
 800c058:	429f      	cmp	r7, r3
 800c05a:	d2fb      	bcs.n	800c054 <__hexnan+0xcc>
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	b91b      	cbnz	r3, 800c068 <__hexnan+0xe0>
 800c060:	4547      	cmp	r7, r8
 800c062:	d128      	bne.n	800c0b6 <__hexnan+0x12e>
 800c064:	2301      	movs	r3, #1
 800c066:	603b      	str	r3, [r7, #0]
 800c068:	2005      	movs	r0, #5
 800c06a:	b007      	add	sp, #28
 800c06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c070:	3501      	adds	r5, #1
 800c072:	2d08      	cmp	r5, #8
 800c074:	f10b 0b01 	add.w	fp, fp, #1
 800c078:	dd06      	ble.n	800c088 <__hexnan+0x100>
 800c07a:	4544      	cmp	r4, r8
 800c07c:	d9c1      	bls.n	800c002 <__hexnan+0x7a>
 800c07e:	2300      	movs	r3, #0
 800c080:	f844 3c04 	str.w	r3, [r4, #-4]
 800c084:	2501      	movs	r5, #1
 800c086:	3c04      	subs	r4, #4
 800c088:	6822      	ldr	r2, [r4, #0]
 800c08a:	f000 000f 	and.w	r0, r0, #15
 800c08e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c092:	6020      	str	r0, [r4, #0]
 800c094:	e7b5      	b.n	800c002 <__hexnan+0x7a>
 800c096:	2508      	movs	r5, #8
 800c098:	e7b3      	b.n	800c002 <__hexnan+0x7a>
 800c09a:	9b01      	ldr	r3, [sp, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d0dd      	beq.n	800c05c <__hexnan+0xd4>
 800c0a0:	f1c3 0320 	rsb	r3, r3, #32
 800c0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a8:	40da      	lsrs	r2, r3
 800c0aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c0b4:	e7d2      	b.n	800c05c <__hexnan+0xd4>
 800c0b6:	3f04      	subs	r7, #4
 800c0b8:	e7d0      	b.n	800c05c <__hexnan+0xd4>
 800c0ba:	2004      	movs	r0, #4
 800c0bc:	e7d5      	b.n	800c06a <__hexnan+0xe2>
	...

0800c0c0 <malloc>:
 800c0c0:	4b02      	ldr	r3, [pc, #8]	@ (800c0cc <malloc+0xc>)
 800c0c2:	4601      	mov	r1, r0
 800c0c4:	6818      	ldr	r0, [r3, #0]
 800c0c6:	f000 b825 	b.w	800c114 <_malloc_r>
 800c0ca:	bf00      	nop
 800c0cc:	20000430 	.word	0x20000430

0800c0d0 <sbrk_aligned>:
 800c0d0:	b570      	push	{r4, r5, r6, lr}
 800c0d2:	4e0f      	ldr	r6, [pc, #60]	@ (800c110 <sbrk_aligned+0x40>)
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	6831      	ldr	r1, [r6, #0]
 800c0d8:	4605      	mov	r5, r0
 800c0da:	b911      	cbnz	r1, 800c0e2 <sbrk_aligned+0x12>
 800c0dc:	f000 ff9e 	bl	800d01c <_sbrk_r>
 800c0e0:	6030      	str	r0, [r6, #0]
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f000 ff99 	bl	800d01c <_sbrk_r>
 800c0ea:	1c43      	adds	r3, r0, #1
 800c0ec:	d103      	bne.n	800c0f6 <sbrk_aligned+0x26>
 800c0ee:	f04f 34ff 	mov.w	r4, #4294967295
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	bd70      	pop	{r4, r5, r6, pc}
 800c0f6:	1cc4      	adds	r4, r0, #3
 800c0f8:	f024 0403 	bic.w	r4, r4, #3
 800c0fc:	42a0      	cmp	r0, r4
 800c0fe:	d0f8      	beq.n	800c0f2 <sbrk_aligned+0x22>
 800c100:	1a21      	subs	r1, r4, r0
 800c102:	4628      	mov	r0, r5
 800c104:	f000 ff8a 	bl	800d01c <_sbrk_r>
 800c108:	3001      	adds	r0, #1
 800c10a:	d1f2      	bne.n	800c0f2 <sbrk_aligned+0x22>
 800c10c:	e7ef      	b.n	800c0ee <sbrk_aligned+0x1e>
 800c10e:	bf00      	nop
 800c110:	20005b6c 	.word	0x20005b6c

0800c114 <_malloc_r>:
 800c114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c118:	1ccd      	adds	r5, r1, #3
 800c11a:	f025 0503 	bic.w	r5, r5, #3
 800c11e:	3508      	adds	r5, #8
 800c120:	2d0c      	cmp	r5, #12
 800c122:	bf38      	it	cc
 800c124:	250c      	movcc	r5, #12
 800c126:	2d00      	cmp	r5, #0
 800c128:	4606      	mov	r6, r0
 800c12a:	db01      	blt.n	800c130 <_malloc_r+0x1c>
 800c12c:	42a9      	cmp	r1, r5
 800c12e:	d904      	bls.n	800c13a <_malloc_r+0x26>
 800c130:	230c      	movs	r3, #12
 800c132:	6033      	str	r3, [r6, #0]
 800c134:	2000      	movs	r0, #0
 800c136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c13a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c210 <_malloc_r+0xfc>
 800c13e:	f000 f87b 	bl	800c238 <__malloc_lock>
 800c142:	f8d8 3000 	ldr.w	r3, [r8]
 800c146:	461c      	mov	r4, r3
 800c148:	bb44      	cbnz	r4, 800c19c <_malloc_r+0x88>
 800c14a:	4629      	mov	r1, r5
 800c14c:	4630      	mov	r0, r6
 800c14e:	f7ff ffbf 	bl	800c0d0 <sbrk_aligned>
 800c152:	1c43      	adds	r3, r0, #1
 800c154:	4604      	mov	r4, r0
 800c156:	d158      	bne.n	800c20a <_malloc_r+0xf6>
 800c158:	f8d8 4000 	ldr.w	r4, [r8]
 800c15c:	4627      	mov	r7, r4
 800c15e:	2f00      	cmp	r7, #0
 800c160:	d143      	bne.n	800c1ea <_malloc_r+0xd6>
 800c162:	2c00      	cmp	r4, #0
 800c164:	d04b      	beq.n	800c1fe <_malloc_r+0xea>
 800c166:	6823      	ldr	r3, [r4, #0]
 800c168:	4639      	mov	r1, r7
 800c16a:	4630      	mov	r0, r6
 800c16c:	eb04 0903 	add.w	r9, r4, r3
 800c170:	f000 ff54 	bl	800d01c <_sbrk_r>
 800c174:	4581      	cmp	r9, r0
 800c176:	d142      	bne.n	800c1fe <_malloc_r+0xea>
 800c178:	6821      	ldr	r1, [r4, #0]
 800c17a:	1a6d      	subs	r5, r5, r1
 800c17c:	4629      	mov	r1, r5
 800c17e:	4630      	mov	r0, r6
 800c180:	f7ff ffa6 	bl	800c0d0 <sbrk_aligned>
 800c184:	3001      	adds	r0, #1
 800c186:	d03a      	beq.n	800c1fe <_malloc_r+0xea>
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	442b      	add	r3, r5
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	f8d8 3000 	ldr.w	r3, [r8]
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	bb62      	cbnz	r2, 800c1f0 <_malloc_r+0xdc>
 800c196:	f8c8 7000 	str.w	r7, [r8]
 800c19a:	e00f      	b.n	800c1bc <_malloc_r+0xa8>
 800c19c:	6822      	ldr	r2, [r4, #0]
 800c19e:	1b52      	subs	r2, r2, r5
 800c1a0:	d420      	bmi.n	800c1e4 <_malloc_r+0xd0>
 800c1a2:	2a0b      	cmp	r2, #11
 800c1a4:	d917      	bls.n	800c1d6 <_malloc_r+0xc2>
 800c1a6:	1961      	adds	r1, r4, r5
 800c1a8:	42a3      	cmp	r3, r4
 800c1aa:	6025      	str	r5, [r4, #0]
 800c1ac:	bf18      	it	ne
 800c1ae:	6059      	strne	r1, [r3, #4]
 800c1b0:	6863      	ldr	r3, [r4, #4]
 800c1b2:	bf08      	it	eq
 800c1b4:	f8c8 1000 	streq.w	r1, [r8]
 800c1b8:	5162      	str	r2, [r4, r5]
 800c1ba:	604b      	str	r3, [r1, #4]
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f000 f841 	bl	800c244 <__malloc_unlock>
 800c1c2:	f104 000b 	add.w	r0, r4, #11
 800c1c6:	1d23      	adds	r3, r4, #4
 800c1c8:	f020 0007 	bic.w	r0, r0, #7
 800c1cc:	1ac2      	subs	r2, r0, r3
 800c1ce:	bf1c      	itt	ne
 800c1d0:	1a1b      	subne	r3, r3, r0
 800c1d2:	50a3      	strne	r3, [r4, r2]
 800c1d4:	e7af      	b.n	800c136 <_malloc_r+0x22>
 800c1d6:	6862      	ldr	r2, [r4, #4]
 800c1d8:	42a3      	cmp	r3, r4
 800c1da:	bf0c      	ite	eq
 800c1dc:	f8c8 2000 	streq.w	r2, [r8]
 800c1e0:	605a      	strne	r2, [r3, #4]
 800c1e2:	e7eb      	b.n	800c1bc <_malloc_r+0xa8>
 800c1e4:	4623      	mov	r3, r4
 800c1e6:	6864      	ldr	r4, [r4, #4]
 800c1e8:	e7ae      	b.n	800c148 <_malloc_r+0x34>
 800c1ea:	463c      	mov	r4, r7
 800c1ec:	687f      	ldr	r7, [r7, #4]
 800c1ee:	e7b6      	b.n	800c15e <_malloc_r+0x4a>
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	42a3      	cmp	r3, r4
 800c1f6:	d1fb      	bne.n	800c1f0 <_malloc_r+0xdc>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	6053      	str	r3, [r2, #4]
 800c1fc:	e7de      	b.n	800c1bc <_malloc_r+0xa8>
 800c1fe:	230c      	movs	r3, #12
 800c200:	6033      	str	r3, [r6, #0]
 800c202:	4630      	mov	r0, r6
 800c204:	f000 f81e 	bl	800c244 <__malloc_unlock>
 800c208:	e794      	b.n	800c134 <_malloc_r+0x20>
 800c20a:	6005      	str	r5, [r0, #0]
 800c20c:	e7d6      	b.n	800c1bc <_malloc_r+0xa8>
 800c20e:	bf00      	nop
 800c210:	20005b70 	.word	0x20005b70

0800c214 <__ascii_mbtowc>:
 800c214:	b082      	sub	sp, #8
 800c216:	b901      	cbnz	r1, 800c21a <__ascii_mbtowc+0x6>
 800c218:	a901      	add	r1, sp, #4
 800c21a:	b142      	cbz	r2, 800c22e <__ascii_mbtowc+0x1a>
 800c21c:	b14b      	cbz	r3, 800c232 <__ascii_mbtowc+0x1e>
 800c21e:	7813      	ldrb	r3, [r2, #0]
 800c220:	600b      	str	r3, [r1, #0]
 800c222:	7812      	ldrb	r2, [r2, #0]
 800c224:	1e10      	subs	r0, r2, #0
 800c226:	bf18      	it	ne
 800c228:	2001      	movne	r0, #1
 800c22a:	b002      	add	sp, #8
 800c22c:	4770      	bx	lr
 800c22e:	4610      	mov	r0, r2
 800c230:	e7fb      	b.n	800c22a <__ascii_mbtowc+0x16>
 800c232:	f06f 0001 	mvn.w	r0, #1
 800c236:	e7f8      	b.n	800c22a <__ascii_mbtowc+0x16>

0800c238 <__malloc_lock>:
 800c238:	4801      	ldr	r0, [pc, #4]	@ (800c240 <__malloc_lock+0x8>)
 800c23a:	f7fe bd2c 	b.w	800ac96 <__retarget_lock_acquire_recursive>
 800c23e:	bf00      	nop
 800c240:	20005b68 	.word	0x20005b68

0800c244 <__malloc_unlock>:
 800c244:	4801      	ldr	r0, [pc, #4]	@ (800c24c <__malloc_unlock+0x8>)
 800c246:	f7fe bd27 	b.w	800ac98 <__retarget_lock_release_recursive>
 800c24a:	bf00      	nop
 800c24c:	20005b68 	.word	0x20005b68

0800c250 <_Balloc>:
 800c250:	b570      	push	{r4, r5, r6, lr}
 800c252:	69c6      	ldr	r6, [r0, #28]
 800c254:	4604      	mov	r4, r0
 800c256:	460d      	mov	r5, r1
 800c258:	b976      	cbnz	r6, 800c278 <_Balloc+0x28>
 800c25a:	2010      	movs	r0, #16
 800c25c:	f7ff ff30 	bl	800c0c0 <malloc>
 800c260:	4602      	mov	r2, r0
 800c262:	61e0      	str	r0, [r4, #28]
 800c264:	b920      	cbnz	r0, 800c270 <_Balloc+0x20>
 800c266:	4b18      	ldr	r3, [pc, #96]	@ (800c2c8 <_Balloc+0x78>)
 800c268:	4818      	ldr	r0, [pc, #96]	@ (800c2cc <_Balloc+0x7c>)
 800c26a:	216b      	movs	r1, #107	@ 0x6b
 800c26c:	f7fe fd2c 	bl	800acc8 <__assert_func>
 800c270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c274:	6006      	str	r6, [r0, #0]
 800c276:	60c6      	str	r6, [r0, #12]
 800c278:	69e6      	ldr	r6, [r4, #28]
 800c27a:	68f3      	ldr	r3, [r6, #12]
 800c27c:	b183      	cbz	r3, 800c2a0 <_Balloc+0x50>
 800c27e:	69e3      	ldr	r3, [r4, #28]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c286:	b9b8      	cbnz	r0, 800c2b8 <_Balloc+0x68>
 800c288:	2101      	movs	r1, #1
 800c28a:	fa01 f605 	lsl.w	r6, r1, r5
 800c28e:	1d72      	adds	r2, r6, #5
 800c290:	0092      	lsls	r2, r2, #2
 800c292:	4620      	mov	r0, r4
 800c294:	f000 fed9 	bl	800d04a <_calloc_r>
 800c298:	b160      	cbz	r0, 800c2b4 <_Balloc+0x64>
 800c29a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c29e:	e00e      	b.n	800c2be <_Balloc+0x6e>
 800c2a0:	2221      	movs	r2, #33	@ 0x21
 800c2a2:	2104      	movs	r1, #4
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f000 fed0 	bl	800d04a <_calloc_r>
 800c2aa:	69e3      	ldr	r3, [r4, #28]
 800c2ac:	60f0      	str	r0, [r6, #12]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1e4      	bne.n	800c27e <_Balloc+0x2e>
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}
 800c2b8:	6802      	ldr	r2, [r0, #0]
 800c2ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2c4:	e7f7      	b.n	800c2b6 <_Balloc+0x66>
 800c2c6:	bf00      	nop
 800c2c8:	0800ed22 	.word	0x0800ed22
 800c2cc:	0800eead 	.word	0x0800eead

0800c2d0 <_Bfree>:
 800c2d0:	b570      	push	{r4, r5, r6, lr}
 800c2d2:	69c6      	ldr	r6, [r0, #28]
 800c2d4:	4605      	mov	r5, r0
 800c2d6:	460c      	mov	r4, r1
 800c2d8:	b976      	cbnz	r6, 800c2f8 <_Bfree+0x28>
 800c2da:	2010      	movs	r0, #16
 800c2dc:	f7ff fef0 	bl	800c0c0 <malloc>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	61e8      	str	r0, [r5, #28]
 800c2e4:	b920      	cbnz	r0, 800c2f0 <_Bfree+0x20>
 800c2e6:	4b09      	ldr	r3, [pc, #36]	@ (800c30c <_Bfree+0x3c>)
 800c2e8:	4809      	ldr	r0, [pc, #36]	@ (800c310 <_Bfree+0x40>)
 800c2ea:	218f      	movs	r1, #143	@ 0x8f
 800c2ec:	f7fe fcec 	bl	800acc8 <__assert_func>
 800c2f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2f4:	6006      	str	r6, [r0, #0]
 800c2f6:	60c6      	str	r6, [r0, #12]
 800c2f8:	b13c      	cbz	r4, 800c30a <_Bfree+0x3a>
 800c2fa:	69eb      	ldr	r3, [r5, #28]
 800c2fc:	6862      	ldr	r2, [r4, #4]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c304:	6021      	str	r1, [r4, #0]
 800c306:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	0800ed22 	.word	0x0800ed22
 800c310:	0800eead 	.word	0x0800eead

0800c314 <__multadd>:
 800c314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c318:	690d      	ldr	r5, [r1, #16]
 800c31a:	4607      	mov	r7, r0
 800c31c:	460c      	mov	r4, r1
 800c31e:	461e      	mov	r6, r3
 800c320:	f101 0c14 	add.w	ip, r1, #20
 800c324:	2000      	movs	r0, #0
 800c326:	f8dc 3000 	ldr.w	r3, [ip]
 800c32a:	b299      	uxth	r1, r3
 800c32c:	fb02 6101 	mla	r1, r2, r1, r6
 800c330:	0c1e      	lsrs	r6, r3, #16
 800c332:	0c0b      	lsrs	r3, r1, #16
 800c334:	fb02 3306 	mla	r3, r2, r6, r3
 800c338:	b289      	uxth	r1, r1
 800c33a:	3001      	adds	r0, #1
 800c33c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c340:	4285      	cmp	r5, r0
 800c342:	f84c 1b04 	str.w	r1, [ip], #4
 800c346:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c34a:	dcec      	bgt.n	800c326 <__multadd+0x12>
 800c34c:	b30e      	cbz	r6, 800c392 <__multadd+0x7e>
 800c34e:	68a3      	ldr	r3, [r4, #8]
 800c350:	42ab      	cmp	r3, r5
 800c352:	dc19      	bgt.n	800c388 <__multadd+0x74>
 800c354:	6861      	ldr	r1, [r4, #4]
 800c356:	4638      	mov	r0, r7
 800c358:	3101      	adds	r1, #1
 800c35a:	f7ff ff79 	bl	800c250 <_Balloc>
 800c35e:	4680      	mov	r8, r0
 800c360:	b928      	cbnz	r0, 800c36e <__multadd+0x5a>
 800c362:	4602      	mov	r2, r0
 800c364:	4b0c      	ldr	r3, [pc, #48]	@ (800c398 <__multadd+0x84>)
 800c366:	480d      	ldr	r0, [pc, #52]	@ (800c39c <__multadd+0x88>)
 800c368:	21ba      	movs	r1, #186	@ 0xba
 800c36a:	f7fe fcad 	bl	800acc8 <__assert_func>
 800c36e:	6922      	ldr	r2, [r4, #16]
 800c370:	3202      	adds	r2, #2
 800c372:	f104 010c 	add.w	r1, r4, #12
 800c376:	0092      	lsls	r2, r2, #2
 800c378:	300c      	adds	r0, #12
 800c37a:	f7fe fc8e 	bl	800ac9a <memcpy>
 800c37e:	4621      	mov	r1, r4
 800c380:	4638      	mov	r0, r7
 800c382:	f7ff ffa5 	bl	800c2d0 <_Bfree>
 800c386:	4644      	mov	r4, r8
 800c388:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c38c:	3501      	adds	r5, #1
 800c38e:	615e      	str	r6, [r3, #20]
 800c390:	6125      	str	r5, [r4, #16]
 800c392:	4620      	mov	r0, r4
 800c394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c398:	0800ee3c 	.word	0x0800ee3c
 800c39c:	0800eead 	.word	0x0800eead

0800c3a0 <__s2b>:
 800c3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	4615      	mov	r5, r2
 800c3a8:	461f      	mov	r7, r3
 800c3aa:	2209      	movs	r2, #9
 800c3ac:	3308      	adds	r3, #8
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	db09      	blt.n	800c3d0 <__s2b+0x30>
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f7ff ff47 	bl	800c250 <_Balloc>
 800c3c2:	b940      	cbnz	r0, 800c3d6 <__s2b+0x36>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	4b19      	ldr	r3, [pc, #100]	@ (800c42c <__s2b+0x8c>)
 800c3c8:	4819      	ldr	r0, [pc, #100]	@ (800c430 <__s2b+0x90>)
 800c3ca:	21d3      	movs	r1, #211	@ 0xd3
 800c3cc:	f7fe fc7c 	bl	800acc8 <__assert_func>
 800c3d0:	0052      	lsls	r2, r2, #1
 800c3d2:	3101      	adds	r1, #1
 800c3d4:	e7f0      	b.n	800c3b8 <__s2b+0x18>
 800c3d6:	9b08      	ldr	r3, [sp, #32]
 800c3d8:	6143      	str	r3, [r0, #20]
 800c3da:	2d09      	cmp	r5, #9
 800c3dc:	f04f 0301 	mov.w	r3, #1
 800c3e0:	6103      	str	r3, [r0, #16]
 800c3e2:	dd16      	ble.n	800c412 <__s2b+0x72>
 800c3e4:	f104 0909 	add.w	r9, r4, #9
 800c3e8:	46c8      	mov	r8, r9
 800c3ea:	442c      	add	r4, r5
 800c3ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c3f0:	4601      	mov	r1, r0
 800c3f2:	3b30      	subs	r3, #48	@ 0x30
 800c3f4:	220a      	movs	r2, #10
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	f7ff ff8c 	bl	800c314 <__multadd>
 800c3fc:	45a0      	cmp	r8, r4
 800c3fe:	d1f5      	bne.n	800c3ec <__s2b+0x4c>
 800c400:	f1a5 0408 	sub.w	r4, r5, #8
 800c404:	444c      	add	r4, r9
 800c406:	1b2d      	subs	r5, r5, r4
 800c408:	1963      	adds	r3, r4, r5
 800c40a:	42bb      	cmp	r3, r7
 800c40c:	db04      	blt.n	800c418 <__s2b+0x78>
 800c40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c412:	340a      	adds	r4, #10
 800c414:	2509      	movs	r5, #9
 800c416:	e7f6      	b.n	800c406 <__s2b+0x66>
 800c418:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c41c:	4601      	mov	r1, r0
 800c41e:	3b30      	subs	r3, #48	@ 0x30
 800c420:	220a      	movs	r2, #10
 800c422:	4630      	mov	r0, r6
 800c424:	f7ff ff76 	bl	800c314 <__multadd>
 800c428:	e7ee      	b.n	800c408 <__s2b+0x68>
 800c42a:	bf00      	nop
 800c42c:	0800ee3c 	.word	0x0800ee3c
 800c430:	0800eead 	.word	0x0800eead

0800c434 <__hi0bits>:
 800c434:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c438:	4603      	mov	r3, r0
 800c43a:	bf36      	itet	cc
 800c43c:	0403      	lslcc	r3, r0, #16
 800c43e:	2000      	movcs	r0, #0
 800c440:	2010      	movcc	r0, #16
 800c442:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c446:	bf3c      	itt	cc
 800c448:	021b      	lslcc	r3, r3, #8
 800c44a:	3008      	addcc	r0, #8
 800c44c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c450:	bf3c      	itt	cc
 800c452:	011b      	lslcc	r3, r3, #4
 800c454:	3004      	addcc	r0, #4
 800c456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c45a:	bf3c      	itt	cc
 800c45c:	009b      	lslcc	r3, r3, #2
 800c45e:	3002      	addcc	r0, #2
 800c460:	2b00      	cmp	r3, #0
 800c462:	db05      	blt.n	800c470 <__hi0bits+0x3c>
 800c464:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c468:	f100 0001 	add.w	r0, r0, #1
 800c46c:	bf08      	it	eq
 800c46e:	2020      	moveq	r0, #32
 800c470:	4770      	bx	lr

0800c472 <__lo0bits>:
 800c472:	6803      	ldr	r3, [r0, #0]
 800c474:	4602      	mov	r2, r0
 800c476:	f013 0007 	ands.w	r0, r3, #7
 800c47a:	d00b      	beq.n	800c494 <__lo0bits+0x22>
 800c47c:	07d9      	lsls	r1, r3, #31
 800c47e:	d421      	bmi.n	800c4c4 <__lo0bits+0x52>
 800c480:	0798      	lsls	r0, r3, #30
 800c482:	bf49      	itett	mi
 800c484:	085b      	lsrmi	r3, r3, #1
 800c486:	089b      	lsrpl	r3, r3, #2
 800c488:	2001      	movmi	r0, #1
 800c48a:	6013      	strmi	r3, [r2, #0]
 800c48c:	bf5c      	itt	pl
 800c48e:	6013      	strpl	r3, [r2, #0]
 800c490:	2002      	movpl	r0, #2
 800c492:	4770      	bx	lr
 800c494:	b299      	uxth	r1, r3
 800c496:	b909      	cbnz	r1, 800c49c <__lo0bits+0x2a>
 800c498:	0c1b      	lsrs	r3, r3, #16
 800c49a:	2010      	movs	r0, #16
 800c49c:	b2d9      	uxtb	r1, r3
 800c49e:	b909      	cbnz	r1, 800c4a4 <__lo0bits+0x32>
 800c4a0:	3008      	adds	r0, #8
 800c4a2:	0a1b      	lsrs	r3, r3, #8
 800c4a4:	0719      	lsls	r1, r3, #28
 800c4a6:	bf04      	itt	eq
 800c4a8:	091b      	lsreq	r3, r3, #4
 800c4aa:	3004      	addeq	r0, #4
 800c4ac:	0799      	lsls	r1, r3, #30
 800c4ae:	bf04      	itt	eq
 800c4b0:	089b      	lsreq	r3, r3, #2
 800c4b2:	3002      	addeq	r0, #2
 800c4b4:	07d9      	lsls	r1, r3, #31
 800c4b6:	d403      	bmi.n	800c4c0 <__lo0bits+0x4e>
 800c4b8:	085b      	lsrs	r3, r3, #1
 800c4ba:	f100 0001 	add.w	r0, r0, #1
 800c4be:	d003      	beq.n	800c4c8 <__lo0bits+0x56>
 800c4c0:	6013      	str	r3, [r2, #0]
 800c4c2:	4770      	bx	lr
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	4770      	bx	lr
 800c4c8:	2020      	movs	r0, #32
 800c4ca:	4770      	bx	lr

0800c4cc <__i2b>:
 800c4cc:	b510      	push	{r4, lr}
 800c4ce:	460c      	mov	r4, r1
 800c4d0:	2101      	movs	r1, #1
 800c4d2:	f7ff febd 	bl	800c250 <_Balloc>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	b928      	cbnz	r0, 800c4e6 <__i2b+0x1a>
 800c4da:	4b05      	ldr	r3, [pc, #20]	@ (800c4f0 <__i2b+0x24>)
 800c4dc:	4805      	ldr	r0, [pc, #20]	@ (800c4f4 <__i2b+0x28>)
 800c4de:	f240 1145 	movw	r1, #325	@ 0x145
 800c4e2:	f7fe fbf1 	bl	800acc8 <__assert_func>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	6144      	str	r4, [r0, #20]
 800c4ea:	6103      	str	r3, [r0, #16]
 800c4ec:	bd10      	pop	{r4, pc}
 800c4ee:	bf00      	nop
 800c4f0:	0800ee3c 	.word	0x0800ee3c
 800c4f4:	0800eead 	.word	0x0800eead

0800c4f8 <__multiply>:
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fc:	4617      	mov	r7, r2
 800c4fe:	690a      	ldr	r2, [r1, #16]
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	429a      	cmp	r2, r3
 800c504:	bfa8      	it	ge
 800c506:	463b      	movge	r3, r7
 800c508:	4689      	mov	r9, r1
 800c50a:	bfa4      	itt	ge
 800c50c:	460f      	movge	r7, r1
 800c50e:	4699      	movge	r9, r3
 800c510:	693d      	ldr	r5, [r7, #16]
 800c512:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	6879      	ldr	r1, [r7, #4]
 800c51a:	eb05 060a 	add.w	r6, r5, sl
 800c51e:	42b3      	cmp	r3, r6
 800c520:	b085      	sub	sp, #20
 800c522:	bfb8      	it	lt
 800c524:	3101      	addlt	r1, #1
 800c526:	f7ff fe93 	bl	800c250 <_Balloc>
 800c52a:	b930      	cbnz	r0, 800c53a <__multiply+0x42>
 800c52c:	4602      	mov	r2, r0
 800c52e:	4b41      	ldr	r3, [pc, #260]	@ (800c634 <__multiply+0x13c>)
 800c530:	4841      	ldr	r0, [pc, #260]	@ (800c638 <__multiply+0x140>)
 800c532:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c536:	f7fe fbc7 	bl	800acc8 <__assert_func>
 800c53a:	f100 0414 	add.w	r4, r0, #20
 800c53e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c542:	4623      	mov	r3, r4
 800c544:	2200      	movs	r2, #0
 800c546:	4573      	cmp	r3, lr
 800c548:	d320      	bcc.n	800c58c <__multiply+0x94>
 800c54a:	f107 0814 	add.w	r8, r7, #20
 800c54e:	f109 0114 	add.w	r1, r9, #20
 800c552:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c556:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c55a:	9302      	str	r3, [sp, #8]
 800c55c:	1beb      	subs	r3, r5, r7
 800c55e:	3b15      	subs	r3, #21
 800c560:	f023 0303 	bic.w	r3, r3, #3
 800c564:	3304      	adds	r3, #4
 800c566:	3715      	adds	r7, #21
 800c568:	42bd      	cmp	r5, r7
 800c56a:	bf38      	it	cc
 800c56c:	2304      	movcc	r3, #4
 800c56e:	9301      	str	r3, [sp, #4]
 800c570:	9b02      	ldr	r3, [sp, #8]
 800c572:	9103      	str	r1, [sp, #12]
 800c574:	428b      	cmp	r3, r1
 800c576:	d80c      	bhi.n	800c592 <__multiply+0x9a>
 800c578:	2e00      	cmp	r6, #0
 800c57a:	dd03      	ble.n	800c584 <__multiply+0x8c>
 800c57c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c580:	2b00      	cmp	r3, #0
 800c582:	d055      	beq.n	800c630 <__multiply+0x138>
 800c584:	6106      	str	r6, [r0, #16]
 800c586:	b005      	add	sp, #20
 800c588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58c:	f843 2b04 	str.w	r2, [r3], #4
 800c590:	e7d9      	b.n	800c546 <__multiply+0x4e>
 800c592:	f8b1 a000 	ldrh.w	sl, [r1]
 800c596:	f1ba 0f00 	cmp.w	sl, #0
 800c59a:	d01f      	beq.n	800c5dc <__multiply+0xe4>
 800c59c:	46c4      	mov	ip, r8
 800c59e:	46a1      	mov	r9, r4
 800c5a0:	2700      	movs	r7, #0
 800c5a2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c5a6:	f8d9 3000 	ldr.w	r3, [r9]
 800c5aa:	fa1f fb82 	uxth.w	fp, r2
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c5b4:	443b      	add	r3, r7
 800c5b6:	f8d9 7000 	ldr.w	r7, [r9]
 800c5ba:	0c12      	lsrs	r2, r2, #16
 800c5bc:	0c3f      	lsrs	r7, r7, #16
 800c5be:	fb0a 7202 	mla	r2, sl, r2, r7
 800c5c2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5cc:	4565      	cmp	r5, ip
 800c5ce:	f849 3b04 	str.w	r3, [r9], #4
 800c5d2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c5d6:	d8e4      	bhi.n	800c5a2 <__multiply+0xaa>
 800c5d8:	9b01      	ldr	r3, [sp, #4]
 800c5da:	50e7      	str	r7, [r4, r3]
 800c5dc:	9b03      	ldr	r3, [sp, #12]
 800c5de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c5e2:	3104      	adds	r1, #4
 800c5e4:	f1b9 0f00 	cmp.w	r9, #0
 800c5e8:	d020      	beq.n	800c62c <__multiply+0x134>
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	4647      	mov	r7, r8
 800c5ee:	46a4      	mov	ip, r4
 800c5f0:	f04f 0a00 	mov.w	sl, #0
 800c5f4:	f8b7 b000 	ldrh.w	fp, [r7]
 800c5f8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c5fc:	fb09 220b 	mla	r2, r9, fp, r2
 800c600:	4452      	add	r2, sl
 800c602:	b29b      	uxth	r3, r3
 800c604:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c608:	f84c 3b04 	str.w	r3, [ip], #4
 800c60c:	f857 3b04 	ldr.w	r3, [r7], #4
 800c610:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c614:	f8bc 3000 	ldrh.w	r3, [ip]
 800c618:	fb09 330a 	mla	r3, r9, sl, r3
 800c61c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c620:	42bd      	cmp	r5, r7
 800c622:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c626:	d8e5      	bhi.n	800c5f4 <__multiply+0xfc>
 800c628:	9a01      	ldr	r2, [sp, #4]
 800c62a:	50a3      	str	r3, [r4, r2]
 800c62c:	3404      	adds	r4, #4
 800c62e:	e79f      	b.n	800c570 <__multiply+0x78>
 800c630:	3e01      	subs	r6, #1
 800c632:	e7a1      	b.n	800c578 <__multiply+0x80>
 800c634:	0800ee3c 	.word	0x0800ee3c
 800c638:	0800eead 	.word	0x0800eead

0800c63c <__pow5mult>:
 800c63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c640:	4615      	mov	r5, r2
 800c642:	f012 0203 	ands.w	r2, r2, #3
 800c646:	4607      	mov	r7, r0
 800c648:	460e      	mov	r6, r1
 800c64a:	d007      	beq.n	800c65c <__pow5mult+0x20>
 800c64c:	4c25      	ldr	r4, [pc, #148]	@ (800c6e4 <__pow5mult+0xa8>)
 800c64e:	3a01      	subs	r2, #1
 800c650:	2300      	movs	r3, #0
 800c652:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c656:	f7ff fe5d 	bl	800c314 <__multadd>
 800c65a:	4606      	mov	r6, r0
 800c65c:	10ad      	asrs	r5, r5, #2
 800c65e:	d03d      	beq.n	800c6dc <__pow5mult+0xa0>
 800c660:	69fc      	ldr	r4, [r7, #28]
 800c662:	b97c      	cbnz	r4, 800c684 <__pow5mult+0x48>
 800c664:	2010      	movs	r0, #16
 800c666:	f7ff fd2b 	bl	800c0c0 <malloc>
 800c66a:	4602      	mov	r2, r0
 800c66c:	61f8      	str	r0, [r7, #28]
 800c66e:	b928      	cbnz	r0, 800c67c <__pow5mult+0x40>
 800c670:	4b1d      	ldr	r3, [pc, #116]	@ (800c6e8 <__pow5mult+0xac>)
 800c672:	481e      	ldr	r0, [pc, #120]	@ (800c6ec <__pow5mult+0xb0>)
 800c674:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c678:	f7fe fb26 	bl	800acc8 <__assert_func>
 800c67c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c680:	6004      	str	r4, [r0, #0]
 800c682:	60c4      	str	r4, [r0, #12]
 800c684:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c688:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c68c:	b94c      	cbnz	r4, 800c6a2 <__pow5mult+0x66>
 800c68e:	f240 2171 	movw	r1, #625	@ 0x271
 800c692:	4638      	mov	r0, r7
 800c694:	f7ff ff1a 	bl	800c4cc <__i2b>
 800c698:	2300      	movs	r3, #0
 800c69a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c69e:	4604      	mov	r4, r0
 800c6a0:	6003      	str	r3, [r0, #0]
 800c6a2:	f04f 0900 	mov.w	r9, #0
 800c6a6:	07eb      	lsls	r3, r5, #31
 800c6a8:	d50a      	bpl.n	800c6c0 <__pow5mult+0x84>
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4622      	mov	r2, r4
 800c6ae:	4638      	mov	r0, r7
 800c6b0:	f7ff ff22 	bl	800c4f8 <__multiply>
 800c6b4:	4631      	mov	r1, r6
 800c6b6:	4680      	mov	r8, r0
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	f7ff fe09 	bl	800c2d0 <_Bfree>
 800c6be:	4646      	mov	r6, r8
 800c6c0:	106d      	asrs	r5, r5, #1
 800c6c2:	d00b      	beq.n	800c6dc <__pow5mult+0xa0>
 800c6c4:	6820      	ldr	r0, [r4, #0]
 800c6c6:	b938      	cbnz	r0, 800c6d8 <__pow5mult+0x9c>
 800c6c8:	4622      	mov	r2, r4
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	4638      	mov	r0, r7
 800c6ce:	f7ff ff13 	bl	800c4f8 <__multiply>
 800c6d2:	6020      	str	r0, [r4, #0]
 800c6d4:	f8c0 9000 	str.w	r9, [r0]
 800c6d8:	4604      	mov	r4, r0
 800c6da:	e7e4      	b.n	800c6a6 <__pow5mult+0x6a>
 800c6dc:	4630      	mov	r0, r6
 800c6de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6e2:	bf00      	nop
 800c6e4:	0800f06c 	.word	0x0800f06c
 800c6e8:	0800ed22 	.word	0x0800ed22
 800c6ec:	0800eead 	.word	0x0800eead

0800c6f0 <__lshift>:
 800c6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	6849      	ldr	r1, [r1, #4]
 800c6f8:	6923      	ldr	r3, [r4, #16]
 800c6fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6fe:	68a3      	ldr	r3, [r4, #8]
 800c700:	4607      	mov	r7, r0
 800c702:	4691      	mov	r9, r2
 800c704:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c708:	f108 0601 	add.w	r6, r8, #1
 800c70c:	42b3      	cmp	r3, r6
 800c70e:	db0b      	blt.n	800c728 <__lshift+0x38>
 800c710:	4638      	mov	r0, r7
 800c712:	f7ff fd9d 	bl	800c250 <_Balloc>
 800c716:	4605      	mov	r5, r0
 800c718:	b948      	cbnz	r0, 800c72e <__lshift+0x3e>
 800c71a:	4602      	mov	r2, r0
 800c71c:	4b28      	ldr	r3, [pc, #160]	@ (800c7c0 <__lshift+0xd0>)
 800c71e:	4829      	ldr	r0, [pc, #164]	@ (800c7c4 <__lshift+0xd4>)
 800c720:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c724:	f7fe fad0 	bl	800acc8 <__assert_func>
 800c728:	3101      	adds	r1, #1
 800c72a:	005b      	lsls	r3, r3, #1
 800c72c:	e7ee      	b.n	800c70c <__lshift+0x1c>
 800c72e:	2300      	movs	r3, #0
 800c730:	f100 0114 	add.w	r1, r0, #20
 800c734:	f100 0210 	add.w	r2, r0, #16
 800c738:	4618      	mov	r0, r3
 800c73a:	4553      	cmp	r3, sl
 800c73c:	db33      	blt.n	800c7a6 <__lshift+0xb6>
 800c73e:	6920      	ldr	r0, [r4, #16]
 800c740:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c744:	f104 0314 	add.w	r3, r4, #20
 800c748:	f019 091f 	ands.w	r9, r9, #31
 800c74c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c750:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c754:	d02b      	beq.n	800c7ae <__lshift+0xbe>
 800c756:	f1c9 0e20 	rsb	lr, r9, #32
 800c75a:	468a      	mov	sl, r1
 800c75c:	2200      	movs	r2, #0
 800c75e:	6818      	ldr	r0, [r3, #0]
 800c760:	fa00 f009 	lsl.w	r0, r0, r9
 800c764:	4310      	orrs	r0, r2
 800c766:	f84a 0b04 	str.w	r0, [sl], #4
 800c76a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c76e:	459c      	cmp	ip, r3
 800c770:	fa22 f20e 	lsr.w	r2, r2, lr
 800c774:	d8f3      	bhi.n	800c75e <__lshift+0x6e>
 800c776:	ebac 0304 	sub.w	r3, ip, r4
 800c77a:	3b15      	subs	r3, #21
 800c77c:	f023 0303 	bic.w	r3, r3, #3
 800c780:	3304      	adds	r3, #4
 800c782:	f104 0015 	add.w	r0, r4, #21
 800c786:	4560      	cmp	r0, ip
 800c788:	bf88      	it	hi
 800c78a:	2304      	movhi	r3, #4
 800c78c:	50ca      	str	r2, [r1, r3]
 800c78e:	b10a      	cbz	r2, 800c794 <__lshift+0xa4>
 800c790:	f108 0602 	add.w	r6, r8, #2
 800c794:	3e01      	subs	r6, #1
 800c796:	4638      	mov	r0, r7
 800c798:	612e      	str	r6, [r5, #16]
 800c79a:	4621      	mov	r1, r4
 800c79c:	f7ff fd98 	bl	800c2d0 <_Bfree>
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	e7c5      	b.n	800c73a <__lshift+0x4a>
 800c7ae:	3904      	subs	r1, #4
 800c7b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7b8:	459c      	cmp	ip, r3
 800c7ba:	d8f9      	bhi.n	800c7b0 <__lshift+0xc0>
 800c7bc:	e7ea      	b.n	800c794 <__lshift+0xa4>
 800c7be:	bf00      	nop
 800c7c0:	0800ee3c 	.word	0x0800ee3c
 800c7c4:	0800eead 	.word	0x0800eead

0800c7c8 <__mcmp>:
 800c7c8:	690a      	ldr	r2, [r1, #16]
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	6900      	ldr	r0, [r0, #16]
 800c7ce:	1a80      	subs	r0, r0, r2
 800c7d0:	b530      	push	{r4, r5, lr}
 800c7d2:	d10e      	bne.n	800c7f2 <__mcmp+0x2a>
 800c7d4:	3314      	adds	r3, #20
 800c7d6:	3114      	adds	r1, #20
 800c7d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c7dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c7e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c7e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c7e8:	4295      	cmp	r5, r2
 800c7ea:	d003      	beq.n	800c7f4 <__mcmp+0x2c>
 800c7ec:	d205      	bcs.n	800c7fa <__mcmp+0x32>
 800c7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f2:	bd30      	pop	{r4, r5, pc}
 800c7f4:	42a3      	cmp	r3, r4
 800c7f6:	d3f3      	bcc.n	800c7e0 <__mcmp+0x18>
 800c7f8:	e7fb      	b.n	800c7f2 <__mcmp+0x2a>
 800c7fa:	2001      	movs	r0, #1
 800c7fc:	e7f9      	b.n	800c7f2 <__mcmp+0x2a>
	...

0800c800 <__mdiff>:
 800c800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c804:	4689      	mov	r9, r1
 800c806:	4606      	mov	r6, r0
 800c808:	4611      	mov	r1, r2
 800c80a:	4648      	mov	r0, r9
 800c80c:	4614      	mov	r4, r2
 800c80e:	f7ff ffdb 	bl	800c7c8 <__mcmp>
 800c812:	1e05      	subs	r5, r0, #0
 800c814:	d112      	bne.n	800c83c <__mdiff+0x3c>
 800c816:	4629      	mov	r1, r5
 800c818:	4630      	mov	r0, r6
 800c81a:	f7ff fd19 	bl	800c250 <_Balloc>
 800c81e:	4602      	mov	r2, r0
 800c820:	b928      	cbnz	r0, 800c82e <__mdiff+0x2e>
 800c822:	4b3f      	ldr	r3, [pc, #252]	@ (800c920 <__mdiff+0x120>)
 800c824:	f240 2137 	movw	r1, #567	@ 0x237
 800c828:	483e      	ldr	r0, [pc, #248]	@ (800c924 <__mdiff+0x124>)
 800c82a:	f7fe fa4d 	bl	800acc8 <__assert_func>
 800c82e:	2301      	movs	r3, #1
 800c830:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c834:	4610      	mov	r0, r2
 800c836:	b003      	add	sp, #12
 800c838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83c:	bfbc      	itt	lt
 800c83e:	464b      	movlt	r3, r9
 800c840:	46a1      	movlt	r9, r4
 800c842:	4630      	mov	r0, r6
 800c844:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c848:	bfba      	itte	lt
 800c84a:	461c      	movlt	r4, r3
 800c84c:	2501      	movlt	r5, #1
 800c84e:	2500      	movge	r5, #0
 800c850:	f7ff fcfe 	bl	800c250 <_Balloc>
 800c854:	4602      	mov	r2, r0
 800c856:	b918      	cbnz	r0, 800c860 <__mdiff+0x60>
 800c858:	4b31      	ldr	r3, [pc, #196]	@ (800c920 <__mdiff+0x120>)
 800c85a:	f240 2145 	movw	r1, #581	@ 0x245
 800c85e:	e7e3      	b.n	800c828 <__mdiff+0x28>
 800c860:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c864:	6926      	ldr	r6, [r4, #16]
 800c866:	60c5      	str	r5, [r0, #12]
 800c868:	f109 0310 	add.w	r3, r9, #16
 800c86c:	f109 0514 	add.w	r5, r9, #20
 800c870:	f104 0e14 	add.w	lr, r4, #20
 800c874:	f100 0b14 	add.w	fp, r0, #20
 800c878:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c87c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c880:	9301      	str	r3, [sp, #4]
 800c882:	46d9      	mov	r9, fp
 800c884:	f04f 0c00 	mov.w	ip, #0
 800c888:	9b01      	ldr	r3, [sp, #4]
 800c88a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c88e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	fa1f f38a 	uxth.w	r3, sl
 800c898:	4619      	mov	r1, r3
 800c89a:	b283      	uxth	r3, r0
 800c89c:	1acb      	subs	r3, r1, r3
 800c89e:	0c00      	lsrs	r0, r0, #16
 800c8a0:	4463      	add	r3, ip
 800c8a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c8a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c8b0:	4576      	cmp	r6, lr
 800c8b2:	f849 3b04 	str.w	r3, [r9], #4
 800c8b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c8ba:	d8e5      	bhi.n	800c888 <__mdiff+0x88>
 800c8bc:	1b33      	subs	r3, r6, r4
 800c8be:	3b15      	subs	r3, #21
 800c8c0:	f023 0303 	bic.w	r3, r3, #3
 800c8c4:	3415      	adds	r4, #21
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	42a6      	cmp	r6, r4
 800c8ca:	bf38      	it	cc
 800c8cc:	2304      	movcc	r3, #4
 800c8ce:	441d      	add	r5, r3
 800c8d0:	445b      	add	r3, fp
 800c8d2:	461e      	mov	r6, r3
 800c8d4:	462c      	mov	r4, r5
 800c8d6:	4544      	cmp	r4, r8
 800c8d8:	d30e      	bcc.n	800c8f8 <__mdiff+0xf8>
 800c8da:	f108 0103 	add.w	r1, r8, #3
 800c8de:	1b49      	subs	r1, r1, r5
 800c8e0:	f021 0103 	bic.w	r1, r1, #3
 800c8e4:	3d03      	subs	r5, #3
 800c8e6:	45a8      	cmp	r8, r5
 800c8e8:	bf38      	it	cc
 800c8ea:	2100      	movcc	r1, #0
 800c8ec:	440b      	add	r3, r1
 800c8ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8f2:	b191      	cbz	r1, 800c91a <__mdiff+0x11a>
 800c8f4:	6117      	str	r7, [r2, #16]
 800c8f6:	e79d      	b.n	800c834 <__mdiff+0x34>
 800c8f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c8fc:	46e6      	mov	lr, ip
 800c8fe:	0c08      	lsrs	r0, r1, #16
 800c900:	fa1c fc81 	uxtah	ip, ip, r1
 800c904:	4471      	add	r1, lr
 800c906:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c90a:	b289      	uxth	r1, r1
 800c90c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c910:	f846 1b04 	str.w	r1, [r6], #4
 800c914:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c918:	e7dd      	b.n	800c8d6 <__mdiff+0xd6>
 800c91a:	3f01      	subs	r7, #1
 800c91c:	e7e7      	b.n	800c8ee <__mdiff+0xee>
 800c91e:	bf00      	nop
 800c920:	0800ee3c 	.word	0x0800ee3c
 800c924:	0800eead 	.word	0x0800eead

0800c928 <__ulp>:
 800c928:	b082      	sub	sp, #8
 800c92a:	ed8d 0b00 	vstr	d0, [sp]
 800c92e:	9a01      	ldr	r2, [sp, #4]
 800c930:	4b0f      	ldr	r3, [pc, #60]	@ (800c970 <__ulp+0x48>)
 800c932:	4013      	ands	r3, r2
 800c934:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	dc08      	bgt.n	800c94e <__ulp+0x26>
 800c93c:	425b      	negs	r3, r3
 800c93e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c942:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c946:	da04      	bge.n	800c952 <__ulp+0x2a>
 800c948:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c94c:	4113      	asrs	r3, r2
 800c94e:	2200      	movs	r2, #0
 800c950:	e008      	b.n	800c964 <__ulp+0x3c>
 800c952:	f1a2 0314 	sub.w	r3, r2, #20
 800c956:	2b1e      	cmp	r3, #30
 800c958:	bfda      	itte	le
 800c95a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c95e:	40da      	lsrle	r2, r3
 800c960:	2201      	movgt	r2, #1
 800c962:	2300      	movs	r3, #0
 800c964:	4619      	mov	r1, r3
 800c966:	4610      	mov	r0, r2
 800c968:	ec41 0b10 	vmov	d0, r0, r1
 800c96c:	b002      	add	sp, #8
 800c96e:	4770      	bx	lr
 800c970:	7ff00000 	.word	0x7ff00000

0800c974 <__b2d>:
 800c974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c978:	6906      	ldr	r6, [r0, #16]
 800c97a:	f100 0814 	add.w	r8, r0, #20
 800c97e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c982:	1f37      	subs	r7, r6, #4
 800c984:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c988:	4610      	mov	r0, r2
 800c98a:	f7ff fd53 	bl	800c434 <__hi0bits>
 800c98e:	f1c0 0320 	rsb	r3, r0, #32
 800c992:	280a      	cmp	r0, #10
 800c994:	600b      	str	r3, [r1, #0]
 800c996:	491b      	ldr	r1, [pc, #108]	@ (800ca04 <__b2d+0x90>)
 800c998:	dc15      	bgt.n	800c9c6 <__b2d+0x52>
 800c99a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c99e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c9a2:	45b8      	cmp	r8, r7
 800c9a4:	ea43 0501 	orr.w	r5, r3, r1
 800c9a8:	bf34      	ite	cc
 800c9aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c9ae:	2300      	movcs	r3, #0
 800c9b0:	3015      	adds	r0, #21
 800c9b2:	fa02 f000 	lsl.w	r0, r2, r0
 800c9b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c9ba:	4303      	orrs	r3, r0
 800c9bc:	461c      	mov	r4, r3
 800c9be:	ec45 4b10 	vmov	d0, r4, r5
 800c9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9c6:	45b8      	cmp	r8, r7
 800c9c8:	bf3a      	itte	cc
 800c9ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c9ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800c9d2:	2300      	movcs	r3, #0
 800c9d4:	380b      	subs	r0, #11
 800c9d6:	d012      	beq.n	800c9fe <__b2d+0x8a>
 800c9d8:	f1c0 0120 	rsb	r1, r0, #32
 800c9dc:	fa23 f401 	lsr.w	r4, r3, r1
 800c9e0:	4082      	lsls	r2, r0
 800c9e2:	4322      	orrs	r2, r4
 800c9e4:	4547      	cmp	r7, r8
 800c9e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c9ea:	bf8c      	ite	hi
 800c9ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c9f0:	2200      	movls	r2, #0
 800c9f2:	4083      	lsls	r3, r0
 800c9f4:	40ca      	lsrs	r2, r1
 800c9f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	e7de      	b.n	800c9bc <__b2d+0x48>
 800c9fe:	ea42 0501 	orr.w	r5, r2, r1
 800ca02:	e7db      	b.n	800c9bc <__b2d+0x48>
 800ca04:	3ff00000 	.word	0x3ff00000

0800ca08 <__d2b>:
 800ca08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca0c:	460f      	mov	r7, r1
 800ca0e:	2101      	movs	r1, #1
 800ca10:	ec59 8b10 	vmov	r8, r9, d0
 800ca14:	4616      	mov	r6, r2
 800ca16:	f7ff fc1b 	bl	800c250 <_Balloc>
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	b930      	cbnz	r0, 800ca2c <__d2b+0x24>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	4b23      	ldr	r3, [pc, #140]	@ (800cab0 <__d2b+0xa8>)
 800ca22:	4824      	ldr	r0, [pc, #144]	@ (800cab4 <__d2b+0xac>)
 800ca24:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca28:	f7fe f94e 	bl	800acc8 <__assert_func>
 800ca2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca34:	b10d      	cbz	r5, 800ca3a <__d2b+0x32>
 800ca36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca3a:	9301      	str	r3, [sp, #4]
 800ca3c:	f1b8 0300 	subs.w	r3, r8, #0
 800ca40:	d023      	beq.n	800ca8a <__d2b+0x82>
 800ca42:	4668      	mov	r0, sp
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	f7ff fd14 	bl	800c472 <__lo0bits>
 800ca4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca4e:	b1d0      	cbz	r0, 800ca86 <__d2b+0x7e>
 800ca50:	f1c0 0320 	rsb	r3, r0, #32
 800ca54:	fa02 f303 	lsl.w	r3, r2, r3
 800ca58:	430b      	orrs	r3, r1
 800ca5a:	40c2      	lsrs	r2, r0
 800ca5c:	6163      	str	r3, [r4, #20]
 800ca5e:	9201      	str	r2, [sp, #4]
 800ca60:	9b01      	ldr	r3, [sp, #4]
 800ca62:	61a3      	str	r3, [r4, #24]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	bf0c      	ite	eq
 800ca68:	2201      	moveq	r2, #1
 800ca6a:	2202      	movne	r2, #2
 800ca6c:	6122      	str	r2, [r4, #16]
 800ca6e:	b1a5      	cbz	r5, 800ca9a <__d2b+0x92>
 800ca70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ca74:	4405      	add	r5, r0
 800ca76:	603d      	str	r5, [r7, #0]
 800ca78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ca7c:	6030      	str	r0, [r6, #0]
 800ca7e:	4620      	mov	r0, r4
 800ca80:	b003      	add	sp, #12
 800ca82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca86:	6161      	str	r1, [r4, #20]
 800ca88:	e7ea      	b.n	800ca60 <__d2b+0x58>
 800ca8a:	a801      	add	r0, sp, #4
 800ca8c:	f7ff fcf1 	bl	800c472 <__lo0bits>
 800ca90:	9b01      	ldr	r3, [sp, #4]
 800ca92:	6163      	str	r3, [r4, #20]
 800ca94:	3020      	adds	r0, #32
 800ca96:	2201      	movs	r2, #1
 800ca98:	e7e8      	b.n	800ca6c <__d2b+0x64>
 800ca9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800caa2:	6038      	str	r0, [r7, #0]
 800caa4:	6918      	ldr	r0, [r3, #16]
 800caa6:	f7ff fcc5 	bl	800c434 <__hi0bits>
 800caaa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800caae:	e7e5      	b.n	800ca7c <__d2b+0x74>
 800cab0:	0800ee3c 	.word	0x0800ee3c
 800cab4:	0800eead 	.word	0x0800eead

0800cab8 <__ratio>:
 800cab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cabc:	b085      	sub	sp, #20
 800cabe:	e9cd 1000 	strd	r1, r0, [sp]
 800cac2:	a902      	add	r1, sp, #8
 800cac4:	f7ff ff56 	bl	800c974 <__b2d>
 800cac8:	9800      	ldr	r0, [sp, #0]
 800caca:	a903      	add	r1, sp, #12
 800cacc:	ec55 4b10 	vmov	r4, r5, d0
 800cad0:	f7ff ff50 	bl	800c974 <__b2d>
 800cad4:	9b01      	ldr	r3, [sp, #4]
 800cad6:	6919      	ldr	r1, [r3, #16]
 800cad8:	9b00      	ldr	r3, [sp, #0]
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	1ac9      	subs	r1, r1, r3
 800cade:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cae2:	1a9b      	subs	r3, r3, r2
 800cae4:	ec5b ab10 	vmov	sl, fp, d0
 800cae8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800caec:	2b00      	cmp	r3, #0
 800caee:	bfce      	itee	gt
 800caf0:	462a      	movgt	r2, r5
 800caf2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800caf6:	465a      	movle	r2, fp
 800caf8:	462f      	mov	r7, r5
 800cafa:	46d9      	mov	r9, fp
 800cafc:	bfcc      	ite	gt
 800cafe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cb02:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cb06:	464b      	mov	r3, r9
 800cb08:	4652      	mov	r2, sl
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	4639      	mov	r1, r7
 800cb0e:	f7f3 fead 	bl	800086c <__aeabi_ddiv>
 800cb12:	ec41 0b10 	vmov	d0, r0, r1
 800cb16:	b005      	add	sp, #20
 800cb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb1c <__copybits>:
 800cb1c:	3901      	subs	r1, #1
 800cb1e:	b570      	push	{r4, r5, r6, lr}
 800cb20:	1149      	asrs	r1, r1, #5
 800cb22:	6914      	ldr	r4, [r2, #16]
 800cb24:	3101      	adds	r1, #1
 800cb26:	f102 0314 	add.w	r3, r2, #20
 800cb2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb32:	1f05      	subs	r5, r0, #4
 800cb34:	42a3      	cmp	r3, r4
 800cb36:	d30c      	bcc.n	800cb52 <__copybits+0x36>
 800cb38:	1aa3      	subs	r3, r4, r2
 800cb3a:	3b11      	subs	r3, #17
 800cb3c:	f023 0303 	bic.w	r3, r3, #3
 800cb40:	3211      	adds	r2, #17
 800cb42:	42a2      	cmp	r2, r4
 800cb44:	bf88      	it	hi
 800cb46:	2300      	movhi	r3, #0
 800cb48:	4418      	add	r0, r3
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	4288      	cmp	r0, r1
 800cb4e:	d305      	bcc.n	800cb5c <__copybits+0x40>
 800cb50:	bd70      	pop	{r4, r5, r6, pc}
 800cb52:	f853 6b04 	ldr.w	r6, [r3], #4
 800cb56:	f845 6f04 	str.w	r6, [r5, #4]!
 800cb5a:	e7eb      	b.n	800cb34 <__copybits+0x18>
 800cb5c:	f840 3b04 	str.w	r3, [r0], #4
 800cb60:	e7f4      	b.n	800cb4c <__copybits+0x30>

0800cb62 <__any_on>:
 800cb62:	f100 0214 	add.w	r2, r0, #20
 800cb66:	6900      	ldr	r0, [r0, #16]
 800cb68:	114b      	asrs	r3, r1, #5
 800cb6a:	4298      	cmp	r0, r3
 800cb6c:	b510      	push	{r4, lr}
 800cb6e:	db11      	blt.n	800cb94 <__any_on+0x32>
 800cb70:	dd0a      	ble.n	800cb88 <__any_on+0x26>
 800cb72:	f011 011f 	ands.w	r1, r1, #31
 800cb76:	d007      	beq.n	800cb88 <__any_on+0x26>
 800cb78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb7c:	fa24 f001 	lsr.w	r0, r4, r1
 800cb80:	fa00 f101 	lsl.w	r1, r0, r1
 800cb84:	428c      	cmp	r4, r1
 800cb86:	d10b      	bne.n	800cba0 <__any_on+0x3e>
 800cb88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d803      	bhi.n	800cb98 <__any_on+0x36>
 800cb90:	2000      	movs	r0, #0
 800cb92:	bd10      	pop	{r4, pc}
 800cb94:	4603      	mov	r3, r0
 800cb96:	e7f7      	b.n	800cb88 <__any_on+0x26>
 800cb98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb9c:	2900      	cmp	r1, #0
 800cb9e:	d0f5      	beq.n	800cb8c <__any_on+0x2a>
 800cba0:	2001      	movs	r0, #1
 800cba2:	e7f6      	b.n	800cb92 <__any_on+0x30>

0800cba4 <__ascii_wctomb>:
 800cba4:	4603      	mov	r3, r0
 800cba6:	4608      	mov	r0, r1
 800cba8:	b141      	cbz	r1, 800cbbc <__ascii_wctomb+0x18>
 800cbaa:	2aff      	cmp	r2, #255	@ 0xff
 800cbac:	d904      	bls.n	800cbb8 <__ascii_wctomb+0x14>
 800cbae:	228a      	movs	r2, #138	@ 0x8a
 800cbb0:	601a      	str	r2, [r3, #0]
 800cbb2:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb6:	4770      	bx	lr
 800cbb8:	700a      	strb	r2, [r1, #0]
 800cbba:	2001      	movs	r0, #1
 800cbbc:	4770      	bx	lr

0800cbbe <__ssputs_r>:
 800cbbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc2:	688e      	ldr	r6, [r1, #8]
 800cbc4:	461f      	mov	r7, r3
 800cbc6:	42be      	cmp	r6, r7
 800cbc8:	680b      	ldr	r3, [r1, #0]
 800cbca:	4682      	mov	sl, r0
 800cbcc:	460c      	mov	r4, r1
 800cbce:	4690      	mov	r8, r2
 800cbd0:	d82d      	bhi.n	800cc2e <__ssputs_r+0x70>
 800cbd2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cbd6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cbda:	d026      	beq.n	800cc2a <__ssputs_r+0x6c>
 800cbdc:	6965      	ldr	r5, [r4, #20]
 800cbde:	6909      	ldr	r1, [r1, #16]
 800cbe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbe4:	eba3 0901 	sub.w	r9, r3, r1
 800cbe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbec:	1c7b      	adds	r3, r7, #1
 800cbee:	444b      	add	r3, r9
 800cbf0:	106d      	asrs	r5, r5, #1
 800cbf2:	429d      	cmp	r5, r3
 800cbf4:	bf38      	it	cc
 800cbf6:	461d      	movcc	r5, r3
 800cbf8:	0553      	lsls	r3, r2, #21
 800cbfa:	d527      	bpl.n	800cc4c <__ssputs_r+0x8e>
 800cbfc:	4629      	mov	r1, r5
 800cbfe:	f7ff fa89 	bl	800c114 <_malloc_r>
 800cc02:	4606      	mov	r6, r0
 800cc04:	b360      	cbz	r0, 800cc60 <__ssputs_r+0xa2>
 800cc06:	6921      	ldr	r1, [r4, #16]
 800cc08:	464a      	mov	r2, r9
 800cc0a:	f7fe f846 	bl	800ac9a <memcpy>
 800cc0e:	89a3      	ldrh	r3, [r4, #12]
 800cc10:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cc14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc18:	81a3      	strh	r3, [r4, #12]
 800cc1a:	6126      	str	r6, [r4, #16]
 800cc1c:	6165      	str	r5, [r4, #20]
 800cc1e:	444e      	add	r6, r9
 800cc20:	eba5 0509 	sub.w	r5, r5, r9
 800cc24:	6026      	str	r6, [r4, #0]
 800cc26:	60a5      	str	r5, [r4, #8]
 800cc28:	463e      	mov	r6, r7
 800cc2a:	42be      	cmp	r6, r7
 800cc2c:	d900      	bls.n	800cc30 <__ssputs_r+0x72>
 800cc2e:	463e      	mov	r6, r7
 800cc30:	6820      	ldr	r0, [r4, #0]
 800cc32:	4632      	mov	r2, r6
 800cc34:	4641      	mov	r1, r8
 800cc36:	f000 f9d7 	bl	800cfe8 <memmove>
 800cc3a:	68a3      	ldr	r3, [r4, #8]
 800cc3c:	1b9b      	subs	r3, r3, r6
 800cc3e:	60a3      	str	r3, [r4, #8]
 800cc40:	6823      	ldr	r3, [r4, #0]
 800cc42:	4433      	add	r3, r6
 800cc44:	6023      	str	r3, [r4, #0]
 800cc46:	2000      	movs	r0, #0
 800cc48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4c:	462a      	mov	r2, r5
 800cc4e:	f000 fa10 	bl	800d072 <_realloc_r>
 800cc52:	4606      	mov	r6, r0
 800cc54:	2800      	cmp	r0, #0
 800cc56:	d1e0      	bne.n	800cc1a <__ssputs_r+0x5c>
 800cc58:	6921      	ldr	r1, [r4, #16]
 800cc5a:	4650      	mov	r0, sl
 800cc5c:	f7fe feac 	bl	800b9b8 <_free_r>
 800cc60:	230c      	movs	r3, #12
 800cc62:	f8ca 3000 	str.w	r3, [sl]
 800cc66:	89a3      	ldrh	r3, [r4, #12]
 800cc68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc6c:	81a3      	strh	r3, [r4, #12]
 800cc6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc72:	e7e9      	b.n	800cc48 <__ssputs_r+0x8a>

0800cc74 <_svfiprintf_r>:
 800cc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc78:	4698      	mov	r8, r3
 800cc7a:	898b      	ldrh	r3, [r1, #12]
 800cc7c:	061b      	lsls	r3, r3, #24
 800cc7e:	b09d      	sub	sp, #116	@ 0x74
 800cc80:	4607      	mov	r7, r0
 800cc82:	460d      	mov	r5, r1
 800cc84:	4614      	mov	r4, r2
 800cc86:	d510      	bpl.n	800ccaa <_svfiprintf_r+0x36>
 800cc88:	690b      	ldr	r3, [r1, #16]
 800cc8a:	b973      	cbnz	r3, 800ccaa <_svfiprintf_r+0x36>
 800cc8c:	2140      	movs	r1, #64	@ 0x40
 800cc8e:	f7ff fa41 	bl	800c114 <_malloc_r>
 800cc92:	6028      	str	r0, [r5, #0]
 800cc94:	6128      	str	r0, [r5, #16]
 800cc96:	b930      	cbnz	r0, 800cca6 <_svfiprintf_r+0x32>
 800cc98:	230c      	movs	r3, #12
 800cc9a:	603b      	str	r3, [r7, #0]
 800cc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cca0:	b01d      	add	sp, #116	@ 0x74
 800cca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca6:	2340      	movs	r3, #64	@ 0x40
 800cca8:	616b      	str	r3, [r5, #20]
 800ccaa:	2300      	movs	r3, #0
 800ccac:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccae:	2320      	movs	r3, #32
 800ccb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccb8:	2330      	movs	r3, #48	@ 0x30
 800ccba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ce58 <_svfiprintf_r+0x1e4>
 800ccbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccc2:	f04f 0901 	mov.w	r9, #1
 800ccc6:	4623      	mov	r3, r4
 800ccc8:	469a      	mov	sl, r3
 800ccca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccce:	b10a      	cbz	r2, 800ccd4 <_svfiprintf_r+0x60>
 800ccd0:	2a25      	cmp	r2, #37	@ 0x25
 800ccd2:	d1f9      	bne.n	800ccc8 <_svfiprintf_r+0x54>
 800ccd4:	ebba 0b04 	subs.w	fp, sl, r4
 800ccd8:	d00b      	beq.n	800ccf2 <_svfiprintf_r+0x7e>
 800ccda:	465b      	mov	r3, fp
 800ccdc:	4622      	mov	r2, r4
 800ccde:	4629      	mov	r1, r5
 800cce0:	4638      	mov	r0, r7
 800cce2:	f7ff ff6c 	bl	800cbbe <__ssputs_r>
 800cce6:	3001      	adds	r0, #1
 800cce8:	f000 80a7 	beq.w	800ce3a <_svfiprintf_r+0x1c6>
 800ccec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccee:	445a      	add	r2, fp
 800ccf0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccf2:	f89a 3000 	ldrb.w	r3, [sl]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f000 809f 	beq.w	800ce3a <_svfiprintf_r+0x1c6>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	f04f 32ff 	mov.w	r2, #4294967295
 800cd02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd06:	f10a 0a01 	add.w	sl, sl, #1
 800cd0a:	9304      	str	r3, [sp, #16]
 800cd0c:	9307      	str	r3, [sp, #28]
 800cd0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd12:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd14:	4654      	mov	r4, sl
 800cd16:	2205      	movs	r2, #5
 800cd18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd1c:	484e      	ldr	r0, [pc, #312]	@ (800ce58 <_svfiprintf_r+0x1e4>)
 800cd1e:	f7f3 fa67 	bl	80001f0 <memchr>
 800cd22:	9a04      	ldr	r2, [sp, #16]
 800cd24:	b9d8      	cbnz	r0, 800cd5e <_svfiprintf_r+0xea>
 800cd26:	06d0      	lsls	r0, r2, #27
 800cd28:	bf44      	itt	mi
 800cd2a:	2320      	movmi	r3, #32
 800cd2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd30:	0711      	lsls	r1, r2, #28
 800cd32:	bf44      	itt	mi
 800cd34:	232b      	movmi	r3, #43	@ 0x2b
 800cd36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd40:	d015      	beq.n	800cd6e <_svfiprintf_r+0xfa>
 800cd42:	9a07      	ldr	r2, [sp, #28]
 800cd44:	4654      	mov	r4, sl
 800cd46:	2000      	movs	r0, #0
 800cd48:	f04f 0c0a 	mov.w	ip, #10
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd52:	3b30      	subs	r3, #48	@ 0x30
 800cd54:	2b09      	cmp	r3, #9
 800cd56:	d94b      	bls.n	800cdf0 <_svfiprintf_r+0x17c>
 800cd58:	b1b0      	cbz	r0, 800cd88 <_svfiprintf_r+0x114>
 800cd5a:	9207      	str	r2, [sp, #28]
 800cd5c:	e014      	b.n	800cd88 <_svfiprintf_r+0x114>
 800cd5e:	eba0 0308 	sub.w	r3, r0, r8
 800cd62:	fa09 f303 	lsl.w	r3, r9, r3
 800cd66:	4313      	orrs	r3, r2
 800cd68:	9304      	str	r3, [sp, #16]
 800cd6a:	46a2      	mov	sl, r4
 800cd6c:	e7d2      	b.n	800cd14 <_svfiprintf_r+0xa0>
 800cd6e:	9b03      	ldr	r3, [sp, #12]
 800cd70:	1d19      	adds	r1, r3, #4
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	9103      	str	r1, [sp, #12]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	bfbb      	ittet	lt
 800cd7a:	425b      	neglt	r3, r3
 800cd7c:	f042 0202 	orrlt.w	r2, r2, #2
 800cd80:	9307      	strge	r3, [sp, #28]
 800cd82:	9307      	strlt	r3, [sp, #28]
 800cd84:	bfb8      	it	lt
 800cd86:	9204      	strlt	r2, [sp, #16]
 800cd88:	7823      	ldrb	r3, [r4, #0]
 800cd8a:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd8c:	d10a      	bne.n	800cda4 <_svfiprintf_r+0x130>
 800cd8e:	7863      	ldrb	r3, [r4, #1]
 800cd90:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd92:	d132      	bne.n	800cdfa <_svfiprintf_r+0x186>
 800cd94:	9b03      	ldr	r3, [sp, #12]
 800cd96:	1d1a      	adds	r2, r3, #4
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	9203      	str	r2, [sp, #12]
 800cd9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cda0:	3402      	adds	r4, #2
 800cda2:	9305      	str	r3, [sp, #20]
 800cda4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ce68 <_svfiprintf_r+0x1f4>
 800cda8:	7821      	ldrb	r1, [r4, #0]
 800cdaa:	2203      	movs	r2, #3
 800cdac:	4650      	mov	r0, sl
 800cdae:	f7f3 fa1f 	bl	80001f0 <memchr>
 800cdb2:	b138      	cbz	r0, 800cdc4 <_svfiprintf_r+0x150>
 800cdb4:	9b04      	ldr	r3, [sp, #16]
 800cdb6:	eba0 000a 	sub.w	r0, r0, sl
 800cdba:	2240      	movs	r2, #64	@ 0x40
 800cdbc:	4082      	lsls	r2, r0
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	3401      	adds	r4, #1
 800cdc2:	9304      	str	r3, [sp, #16]
 800cdc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc8:	4824      	ldr	r0, [pc, #144]	@ (800ce5c <_svfiprintf_r+0x1e8>)
 800cdca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cdce:	2206      	movs	r2, #6
 800cdd0:	f7f3 fa0e 	bl	80001f0 <memchr>
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	d036      	beq.n	800ce46 <_svfiprintf_r+0x1d2>
 800cdd8:	4b21      	ldr	r3, [pc, #132]	@ (800ce60 <_svfiprintf_r+0x1ec>)
 800cdda:	bb1b      	cbnz	r3, 800ce24 <_svfiprintf_r+0x1b0>
 800cddc:	9b03      	ldr	r3, [sp, #12]
 800cdde:	3307      	adds	r3, #7
 800cde0:	f023 0307 	bic.w	r3, r3, #7
 800cde4:	3308      	adds	r3, #8
 800cde6:	9303      	str	r3, [sp, #12]
 800cde8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdea:	4433      	add	r3, r6
 800cdec:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdee:	e76a      	b.n	800ccc6 <_svfiprintf_r+0x52>
 800cdf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdf4:	460c      	mov	r4, r1
 800cdf6:	2001      	movs	r0, #1
 800cdf8:	e7a8      	b.n	800cd4c <_svfiprintf_r+0xd8>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	3401      	adds	r4, #1
 800cdfe:	9305      	str	r3, [sp, #20]
 800ce00:	4619      	mov	r1, r3
 800ce02:	f04f 0c0a 	mov.w	ip, #10
 800ce06:	4620      	mov	r0, r4
 800ce08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce0c:	3a30      	subs	r2, #48	@ 0x30
 800ce0e:	2a09      	cmp	r2, #9
 800ce10:	d903      	bls.n	800ce1a <_svfiprintf_r+0x1a6>
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d0c6      	beq.n	800cda4 <_svfiprintf_r+0x130>
 800ce16:	9105      	str	r1, [sp, #20]
 800ce18:	e7c4      	b.n	800cda4 <_svfiprintf_r+0x130>
 800ce1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce1e:	4604      	mov	r4, r0
 800ce20:	2301      	movs	r3, #1
 800ce22:	e7f0      	b.n	800ce06 <_svfiprintf_r+0x192>
 800ce24:	ab03      	add	r3, sp, #12
 800ce26:	9300      	str	r3, [sp, #0]
 800ce28:	462a      	mov	r2, r5
 800ce2a:	4b0e      	ldr	r3, [pc, #56]	@ (800ce64 <_svfiprintf_r+0x1f0>)
 800ce2c:	a904      	add	r1, sp, #16
 800ce2e:	4638      	mov	r0, r7
 800ce30:	f7fd f90a 	bl	800a048 <_printf_float>
 800ce34:	1c42      	adds	r2, r0, #1
 800ce36:	4606      	mov	r6, r0
 800ce38:	d1d6      	bne.n	800cde8 <_svfiprintf_r+0x174>
 800ce3a:	89ab      	ldrh	r3, [r5, #12]
 800ce3c:	065b      	lsls	r3, r3, #25
 800ce3e:	f53f af2d 	bmi.w	800cc9c <_svfiprintf_r+0x28>
 800ce42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce44:	e72c      	b.n	800cca0 <_svfiprintf_r+0x2c>
 800ce46:	ab03      	add	r3, sp, #12
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	462a      	mov	r2, r5
 800ce4c:	4b05      	ldr	r3, [pc, #20]	@ (800ce64 <_svfiprintf_r+0x1f0>)
 800ce4e:	a904      	add	r1, sp, #16
 800ce50:	4638      	mov	r0, r7
 800ce52:	f7fd fb91 	bl	800a578 <_printf_i>
 800ce56:	e7ed      	b.n	800ce34 <_svfiprintf_r+0x1c0>
 800ce58:	0800ef06 	.word	0x0800ef06
 800ce5c:	0800ef10 	.word	0x0800ef10
 800ce60:	0800a049 	.word	0x0800a049
 800ce64:	0800cbbf 	.word	0x0800cbbf
 800ce68:	0800ef0c 	.word	0x0800ef0c

0800ce6c <__sflush_r>:
 800ce6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce74:	0716      	lsls	r6, r2, #28
 800ce76:	4605      	mov	r5, r0
 800ce78:	460c      	mov	r4, r1
 800ce7a:	d454      	bmi.n	800cf26 <__sflush_r+0xba>
 800ce7c:	684b      	ldr	r3, [r1, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	dc02      	bgt.n	800ce88 <__sflush_r+0x1c>
 800ce82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	dd48      	ble.n	800cf1a <__sflush_r+0xae>
 800ce88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce8a:	2e00      	cmp	r6, #0
 800ce8c:	d045      	beq.n	800cf1a <__sflush_r+0xae>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ce94:	682f      	ldr	r7, [r5, #0]
 800ce96:	6a21      	ldr	r1, [r4, #32]
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	d030      	beq.n	800cefe <__sflush_r+0x92>
 800ce9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce9e:	89a3      	ldrh	r3, [r4, #12]
 800cea0:	0759      	lsls	r1, r3, #29
 800cea2:	d505      	bpl.n	800ceb0 <__sflush_r+0x44>
 800cea4:	6863      	ldr	r3, [r4, #4]
 800cea6:	1ad2      	subs	r2, r2, r3
 800cea8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ceaa:	b10b      	cbz	r3, 800ceb0 <__sflush_r+0x44>
 800ceac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ceae:	1ad2      	subs	r2, r2, r3
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ceb4:	6a21      	ldr	r1, [r4, #32]
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	47b0      	blx	r6
 800ceba:	1c43      	adds	r3, r0, #1
 800cebc:	89a3      	ldrh	r3, [r4, #12]
 800cebe:	d106      	bne.n	800cece <__sflush_r+0x62>
 800cec0:	6829      	ldr	r1, [r5, #0]
 800cec2:	291d      	cmp	r1, #29
 800cec4:	d82b      	bhi.n	800cf1e <__sflush_r+0xb2>
 800cec6:	4a2a      	ldr	r2, [pc, #168]	@ (800cf70 <__sflush_r+0x104>)
 800cec8:	40ca      	lsrs	r2, r1
 800ceca:	07d6      	lsls	r6, r2, #31
 800cecc:	d527      	bpl.n	800cf1e <__sflush_r+0xb2>
 800cece:	2200      	movs	r2, #0
 800ced0:	6062      	str	r2, [r4, #4]
 800ced2:	04d9      	lsls	r1, r3, #19
 800ced4:	6922      	ldr	r2, [r4, #16]
 800ced6:	6022      	str	r2, [r4, #0]
 800ced8:	d504      	bpl.n	800cee4 <__sflush_r+0x78>
 800ceda:	1c42      	adds	r2, r0, #1
 800cedc:	d101      	bne.n	800cee2 <__sflush_r+0x76>
 800cede:	682b      	ldr	r3, [r5, #0]
 800cee0:	b903      	cbnz	r3, 800cee4 <__sflush_r+0x78>
 800cee2:	6560      	str	r0, [r4, #84]	@ 0x54
 800cee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cee6:	602f      	str	r7, [r5, #0]
 800cee8:	b1b9      	cbz	r1, 800cf1a <__sflush_r+0xae>
 800ceea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ceee:	4299      	cmp	r1, r3
 800cef0:	d002      	beq.n	800cef8 <__sflush_r+0x8c>
 800cef2:	4628      	mov	r0, r5
 800cef4:	f7fe fd60 	bl	800b9b8 <_free_r>
 800cef8:	2300      	movs	r3, #0
 800cefa:	6363      	str	r3, [r4, #52]	@ 0x34
 800cefc:	e00d      	b.n	800cf1a <__sflush_r+0xae>
 800cefe:	2301      	movs	r3, #1
 800cf00:	4628      	mov	r0, r5
 800cf02:	47b0      	blx	r6
 800cf04:	4602      	mov	r2, r0
 800cf06:	1c50      	adds	r0, r2, #1
 800cf08:	d1c9      	bne.n	800ce9e <__sflush_r+0x32>
 800cf0a:	682b      	ldr	r3, [r5, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d0c6      	beq.n	800ce9e <__sflush_r+0x32>
 800cf10:	2b1d      	cmp	r3, #29
 800cf12:	d001      	beq.n	800cf18 <__sflush_r+0xac>
 800cf14:	2b16      	cmp	r3, #22
 800cf16:	d11e      	bne.n	800cf56 <__sflush_r+0xea>
 800cf18:	602f      	str	r7, [r5, #0]
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	e022      	b.n	800cf64 <__sflush_r+0xf8>
 800cf1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf22:	b21b      	sxth	r3, r3
 800cf24:	e01b      	b.n	800cf5e <__sflush_r+0xf2>
 800cf26:	690f      	ldr	r7, [r1, #16]
 800cf28:	2f00      	cmp	r7, #0
 800cf2a:	d0f6      	beq.n	800cf1a <__sflush_r+0xae>
 800cf2c:	0793      	lsls	r3, r2, #30
 800cf2e:	680e      	ldr	r6, [r1, #0]
 800cf30:	bf08      	it	eq
 800cf32:	694b      	ldreq	r3, [r1, #20]
 800cf34:	600f      	str	r7, [r1, #0]
 800cf36:	bf18      	it	ne
 800cf38:	2300      	movne	r3, #0
 800cf3a:	eba6 0807 	sub.w	r8, r6, r7
 800cf3e:	608b      	str	r3, [r1, #8]
 800cf40:	f1b8 0f00 	cmp.w	r8, #0
 800cf44:	dde9      	ble.n	800cf1a <__sflush_r+0xae>
 800cf46:	6a21      	ldr	r1, [r4, #32]
 800cf48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf4a:	4643      	mov	r3, r8
 800cf4c:	463a      	mov	r2, r7
 800cf4e:	4628      	mov	r0, r5
 800cf50:	47b0      	blx	r6
 800cf52:	2800      	cmp	r0, #0
 800cf54:	dc08      	bgt.n	800cf68 <__sflush_r+0xfc>
 800cf56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf5e:	81a3      	strh	r3, [r4, #12]
 800cf60:	f04f 30ff 	mov.w	r0, #4294967295
 800cf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf68:	4407      	add	r7, r0
 800cf6a:	eba8 0800 	sub.w	r8, r8, r0
 800cf6e:	e7e7      	b.n	800cf40 <__sflush_r+0xd4>
 800cf70:	20400001 	.word	0x20400001

0800cf74 <_fflush_r>:
 800cf74:	b538      	push	{r3, r4, r5, lr}
 800cf76:	690b      	ldr	r3, [r1, #16]
 800cf78:	4605      	mov	r5, r0
 800cf7a:	460c      	mov	r4, r1
 800cf7c:	b913      	cbnz	r3, 800cf84 <_fflush_r+0x10>
 800cf7e:	2500      	movs	r5, #0
 800cf80:	4628      	mov	r0, r5
 800cf82:	bd38      	pop	{r3, r4, r5, pc}
 800cf84:	b118      	cbz	r0, 800cf8e <_fflush_r+0x1a>
 800cf86:	6a03      	ldr	r3, [r0, #32]
 800cf88:	b90b      	cbnz	r3, 800cf8e <_fflush_r+0x1a>
 800cf8a:	f7fd fc9f 	bl	800a8cc <__sinit>
 800cf8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d0f3      	beq.n	800cf7e <_fflush_r+0xa>
 800cf96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf98:	07d0      	lsls	r0, r2, #31
 800cf9a:	d404      	bmi.n	800cfa6 <_fflush_r+0x32>
 800cf9c:	0599      	lsls	r1, r3, #22
 800cf9e:	d402      	bmi.n	800cfa6 <_fflush_r+0x32>
 800cfa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfa2:	f7fd fe78 	bl	800ac96 <__retarget_lock_acquire_recursive>
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	4621      	mov	r1, r4
 800cfaa:	f7ff ff5f 	bl	800ce6c <__sflush_r>
 800cfae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cfb0:	07da      	lsls	r2, r3, #31
 800cfb2:	4605      	mov	r5, r0
 800cfb4:	d4e4      	bmi.n	800cf80 <_fflush_r+0xc>
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	059b      	lsls	r3, r3, #22
 800cfba:	d4e1      	bmi.n	800cf80 <_fflush_r+0xc>
 800cfbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfbe:	f7fd fe6b 	bl	800ac98 <__retarget_lock_release_recursive>
 800cfc2:	e7dd      	b.n	800cf80 <_fflush_r+0xc>

0800cfc4 <fiprintf>:
 800cfc4:	b40e      	push	{r1, r2, r3}
 800cfc6:	b503      	push	{r0, r1, lr}
 800cfc8:	4601      	mov	r1, r0
 800cfca:	ab03      	add	r3, sp, #12
 800cfcc:	4805      	ldr	r0, [pc, #20]	@ (800cfe4 <fiprintf+0x20>)
 800cfce:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfd2:	6800      	ldr	r0, [r0, #0]
 800cfd4:	9301      	str	r3, [sp, #4]
 800cfd6:	f000 f8a3 	bl	800d120 <_vfiprintf_r>
 800cfda:	b002      	add	sp, #8
 800cfdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfe0:	b003      	add	sp, #12
 800cfe2:	4770      	bx	lr
 800cfe4:	20000430 	.word	0x20000430

0800cfe8 <memmove>:
 800cfe8:	4288      	cmp	r0, r1
 800cfea:	b510      	push	{r4, lr}
 800cfec:	eb01 0402 	add.w	r4, r1, r2
 800cff0:	d902      	bls.n	800cff8 <memmove+0x10>
 800cff2:	4284      	cmp	r4, r0
 800cff4:	4623      	mov	r3, r4
 800cff6:	d807      	bhi.n	800d008 <memmove+0x20>
 800cff8:	1e43      	subs	r3, r0, #1
 800cffa:	42a1      	cmp	r1, r4
 800cffc:	d008      	beq.n	800d010 <memmove+0x28>
 800cffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d002:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d006:	e7f8      	b.n	800cffa <memmove+0x12>
 800d008:	4402      	add	r2, r0
 800d00a:	4601      	mov	r1, r0
 800d00c:	428a      	cmp	r2, r1
 800d00e:	d100      	bne.n	800d012 <memmove+0x2a>
 800d010:	bd10      	pop	{r4, pc}
 800d012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d01a:	e7f7      	b.n	800d00c <memmove+0x24>

0800d01c <_sbrk_r>:
 800d01c:	b538      	push	{r3, r4, r5, lr}
 800d01e:	4d06      	ldr	r5, [pc, #24]	@ (800d038 <_sbrk_r+0x1c>)
 800d020:	2300      	movs	r3, #0
 800d022:	4604      	mov	r4, r0
 800d024:	4608      	mov	r0, r1
 800d026:	602b      	str	r3, [r5, #0]
 800d028:	f7f6 fa00 	bl	800342c <_sbrk>
 800d02c:	1c43      	adds	r3, r0, #1
 800d02e:	d102      	bne.n	800d036 <_sbrk_r+0x1a>
 800d030:	682b      	ldr	r3, [r5, #0]
 800d032:	b103      	cbz	r3, 800d036 <_sbrk_r+0x1a>
 800d034:	6023      	str	r3, [r4, #0]
 800d036:	bd38      	pop	{r3, r4, r5, pc}
 800d038:	20005b64 	.word	0x20005b64

0800d03c <abort>:
 800d03c:	b508      	push	{r3, lr}
 800d03e:	2006      	movs	r0, #6
 800d040:	f000 fa42 	bl	800d4c8 <raise>
 800d044:	2001      	movs	r0, #1
 800d046:	f7f6 f979 	bl	800333c <_exit>

0800d04a <_calloc_r>:
 800d04a:	b570      	push	{r4, r5, r6, lr}
 800d04c:	fba1 5402 	umull	r5, r4, r1, r2
 800d050:	b934      	cbnz	r4, 800d060 <_calloc_r+0x16>
 800d052:	4629      	mov	r1, r5
 800d054:	f7ff f85e 	bl	800c114 <_malloc_r>
 800d058:	4606      	mov	r6, r0
 800d05a:	b928      	cbnz	r0, 800d068 <_calloc_r+0x1e>
 800d05c:	4630      	mov	r0, r6
 800d05e:	bd70      	pop	{r4, r5, r6, pc}
 800d060:	220c      	movs	r2, #12
 800d062:	6002      	str	r2, [r0, #0]
 800d064:	2600      	movs	r6, #0
 800d066:	e7f9      	b.n	800d05c <_calloc_r+0x12>
 800d068:	462a      	mov	r2, r5
 800d06a:	4621      	mov	r1, r4
 800d06c:	f7fd fcc9 	bl	800aa02 <memset>
 800d070:	e7f4      	b.n	800d05c <_calloc_r+0x12>

0800d072 <_realloc_r>:
 800d072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d076:	4607      	mov	r7, r0
 800d078:	4614      	mov	r4, r2
 800d07a:	460d      	mov	r5, r1
 800d07c:	b921      	cbnz	r1, 800d088 <_realloc_r+0x16>
 800d07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d082:	4611      	mov	r1, r2
 800d084:	f7ff b846 	b.w	800c114 <_malloc_r>
 800d088:	b92a      	cbnz	r2, 800d096 <_realloc_r+0x24>
 800d08a:	f7fe fc95 	bl	800b9b8 <_free_r>
 800d08e:	4625      	mov	r5, r4
 800d090:	4628      	mov	r0, r5
 800d092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d096:	f000 fa33 	bl	800d500 <_malloc_usable_size_r>
 800d09a:	4284      	cmp	r4, r0
 800d09c:	4606      	mov	r6, r0
 800d09e:	d802      	bhi.n	800d0a6 <_realloc_r+0x34>
 800d0a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0a4:	d8f4      	bhi.n	800d090 <_realloc_r+0x1e>
 800d0a6:	4621      	mov	r1, r4
 800d0a8:	4638      	mov	r0, r7
 800d0aa:	f7ff f833 	bl	800c114 <_malloc_r>
 800d0ae:	4680      	mov	r8, r0
 800d0b0:	b908      	cbnz	r0, 800d0b6 <_realloc_r+0x44>
 800d0b2:	4645      	mov	r5, r8
 800d0b4:	e7ec      	b.n	800d090 <_realloc_r+0x1e>
 800d0b6:	42b4      	cmp	r4, r6
 800d0b8:	4622      	mov	r2, r4
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	bf28      	it	cs
 800d0be:	4632      	movcs	r2, r6
 800d0c0:	f7fd fdeb 	bl	800ac9a <memcpy>
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	f7fe fc76 	bl	800b9b8 <_free_r>
 800d0cc:	e7f1      	b.n	800d0b2 <_realloc_r+0x40>

0800d0ce <__sfputc_r>:
 800d0ce:	6893      	ldr	r3, [r2, #8]
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	b410      	push	{r4}
 800d0d6:	6093      	str	r3, [r2, #8]
 800d0d8:	da08      	bge.n	800d0ec <__sfputc_r+0x1e>
 800d0da:	6994      	ldr	r4, [r2, #24]
 800d0dc:	42a3      	cmp	r3, r4
 800d0de:	db01      	blt.n	800d0e4 <__sfputc_r+0x16>
 800d0e0:	290a      	cmp	r1, #10
 800d0e2:	d103      	bne.n	800d0ec <__sfputc_r+0x1e>
 800d0e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0e8:	f000 b932 	b.w	800d350 <__swbuf_r>
 800d0ec:	6813      	ldr	r3, [r2, #0]
 800d0ee:	1c58      	adds	r0, r3, #1
 800d0f0:	6010      	str	r0, [r2, #0]
 800d0f2:	7019      	strb	r1, [r3, #0]
 800d0f4:	4608      	mov	r0, r1
 800d0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0fa:	4770      	bx	lr

0800d0fc <__sfputs_r>:
 800d0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fe:	4606      	mov	r6, r0
 800d100:	460f      	mov	r7, r1
 800d102:	4614      	mov	r4, r2
 800d104:	18d5      	adds	r5, r2, r3
 800d106:	42ac      	cmp	r4, r5
 800d108:	d101      	bne.n	800d10e <__sfputs_r+0x12>
 800d10a:	2000      	movs	r0, #0
 800d10c:	e007      	b.n	800d11e <__sfputs_r+0x22>
 800d10e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d112:	463a      	mov	r2, r7
 800d114:	4630      	mov	r0, r6
 800d116:	f7ff ffda 	bl	800d0ce <__sfputc_r>
 800d11a:	1c43      	adds	r3, r0, #1
 800d11c:	d1f3      	bne.n	800d106 <__sfputs_r+0xa>
 800d11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d120 <_vfiprintf_r>:
 800d120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d124:	460d      	mov	r5, r1
 800d126:	b09d      	sub	sp, #116	@ 0x74
 800d128:	4614      	mov	r4, r2
 800d12a:	4698      	mov	r8, r3
 800d12c:	4606      	mov	r6, r0
 800d12e:	b118      	cbz	r0, 800d138 <_vfiprintf_r+0x18>
 800d130:	6a03      	ldr	r3, [r0, #32]
 800d132:	b90b      	cbnz	r3, 800d138 <_vfiprintf_r+0x18>
 800d134:	f7fd fbca 	bl	800a8cc <__sinit>
 800d138:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d13a:	07d9      	lsls	r1, r3, #31
 800d13c:	d405      	bmi.n	800d14a <_vfiprintf_r+0x2a>
 800d13e:	89ab      	ldrh	r3, [r5, #12]
 800d140:	059a      	lsls	r2, r3, #22
 800d142:	d402      	bmi.n	800d14a <_vfiprintf_r+0x2a>
 800d144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d146:	f7fd fda6 	bl	800ac96 <__retarget_lock_acquire_recursive>
 800d14a:	89ab      	ldrh	r3, [r5, #12]
 800d14c:	071b      	lsls	r3, r3, #28
 800d14e:	d501      	bpl.n	800d154 <_vfiprintf_r+0x34>
 800d150:	692b      	ldr	r3, [r5, #16]
 800d152:	b99b      	cbnz	r3, 800d17c <_vfiprintf_r+0x5c>
 800d154:	4629      	mov	r1, r5
 800d156:	4630      	mov	r0, r6
 800d158:	f000 f938 	bl	800d3cc <__swsetup_r>
 800d15c:	b170      	cbz	r0, 800d17c <_vfiprintf_r+0x5c>
 800d15e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d160:	07dc      	lsls	r4, r3, #31
 800d162:	d504      	bpl.n	800d16e <_vfiprintf_r+0x4e>
 800d164:	f04f 30ff 	mov.w	r0, #4294967295
 800d168:	b01d      	add	sp, #116	@ 0x74
 800d16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d16e:	89ab      	ldrh	r3, [r5, #12]
 800d170:	0598      	lsls	r0, r3, #22
 800d172:	d4f7      	bmi.n	800d164 <_vfiprintf_r+0x44>
 800d174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d176:	f7fd fd8f 	bl	800ac98 <__retarget_lock_release_recursive>
 800d17a:	e7f3      	b.n	800d164 <_vfiprintf_r+0x44>
 800d17c:	2300      	movs	r3, #0
 800d17e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d180:	2320      	movs	r3, #32
 800d182:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d186:	f8cd 800c 	str.w	r8, [sp, #12]
 800d18a:	2330      	movs	r3, #48	@ 0x30
 800d18c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d33c <_vfiprintf_r+0x21c>
 800d190:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d194:	f04f 0901 	mov.w	r9, #1
 800d198:	4623      	mov	r3, r4
 800d19a:	469a      	mov	sl, r3
 800d19c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1a0:	b10a      	cbz	r2, 800d1a6 <_vfiprintf_r+0x86>
 800d1a2:	2a25      	cmp	r2, #37	@ 0x25
 800d1a4:	d1f9      	bne.n	800d19a <_vfiprintf_r+0x7a>
 800d1a6:	ebba 0b04 	subs.w	fp, sl, r4
 800d1aa:	d00b      	beq.n	800d1c4 <_vfiprintf_r+0xa4>
 800d1ac:	465b      	mov	r3, fp
 800d1ae:	4622      	mov	r2, r4
 800d1b0:	4629      	mov	r1, r5
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f7ff ffa2 	bl	800d0fc <__sfputs_r>
 800d1b8:	3001      	adds	r0, #1
 800d1ba:	f000 80a7 	beq.w	800d30c <_vfiprintf_r+0x1ec>
 800d1be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1c0:	445a      	add	r2, fp
 800d1c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f000 809f 	beq.w	800d30c <_vfiprintf_r+0x1ec>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1d8:	f10a 0a01 	add.w	sl, sl, #1
 800d1dc:	9304      	str	r3, [sp, #16]
 800d1de:	9307      	str	r3, [sp, #28]
 800d1e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1e6:	4654      	mov	r4, sl
 800d1e8:	2205      	movs	r2, #5
 800d1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ee:	4853      	ldr	r0, [pc, #332]	@ (800d33c <_vfiprintf_r+0x21c>)
 800d1f0:	f7f2 fffe 	bl	80001f0 <memchr>
 800d1f4:	9a04      	ldr	r2, [sp, #16]
 800d1f6:	b9d8      	cbnz	r0, 800d230 <_vfiprintf_r+0x110>
 800d1f8:	06d1      	lsls	r1, r2, #27
 800d1fa:	bf44      	itt	mi
 800d1fc:	2320      	movmi	r3, #32
 800d1fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d202:	0713      	lsls	r3, r2, #28
 800d204:	bf44      	itt	mi
 800d206:	232b      	movmi	r3, #43	@ 0x2b
 800d208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d20c:	f89a 3000 	ldrb.w	r3, [sl]
 800d210:	2b2a      	cmp	r3, #42	@ 0x2a
 800d212:	d015      	beq.n	800d240 <_vfiprintf_r+0x120>
 800d214:	9a07      	ldr	r2, [sp, #28]
 800d216:	4654      	mov	r4, sl
 800d218:	2000      	movs	r0, #0
 800d21a:	f04f 0c0a 	mov.w	ip, #10
 800d21e:	4621      	mov	r1, r4
 800d220:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d224:	3b30      	subs	r3, #48	@ 0x30
 800d226:	2b09      	cmp	r3, #9
 800d228:	d94b      	bls.n	800d2c2 <_vfiprintf_r+0x1a2>
 800d22a:	b1b0      	cbz	r0, 800d25a <_vfiprintf_r+0x13a>
 800d22c:	9207      	str	r2, [sp, #28]
 800d22e:	e014      	b.n	800d25a <_vfiprintf_r+0x13a>
 800d230:	eba0 0308 	sub.w	r3, r0, r8
 800d234:	fa09 f303 	lsl.w	r3, r9, r3
 800d238:	4313      	orrs	r3, r2
 800d23a:	9304      	str	r3, [sp, #16]
 800d23c:	46a2      	mov	sl, r4
 800d23e:	e7d2      	b.n	800d1e6 <_vfiprintf_r+0xc6>
 800d240:	9b03      	ldr	r3, [sp, #12]
 800d242:	1d19      	adds	r1, r3, #4
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	9103      	str	r1, [sp, #12]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	bfbb      	ittet	lt
 800d24c:	425b      	neglt	r3, r3
 800d24e:	f042 0202 	orrlt.w	r2, r2, #2
 800d252:	9307      	strge	r3, [sp, #28]
 800d254:	9307      	strlt	r3, [sp, #28]
 800d256:	bfb8      	it	lt
 800d258:	9204      	strlt	r2, [sp, #16]
 800d25a:	7823      	ldrb	r3, [r4, #0]
 800d25c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d25e:	d10a      	bne.n	800d276 <_vfiprintf_r+0x156>
 800d260:	7863      	ldrb	r3, [r4, #1]
 800d262:	2b2a      	cmp	r3, #42	@ 0x2a
 800d264:	d132      	bne.n	800d2cc <_vfiprintf_r+0x1ac>
 800d266:	9b03      	ldr	r3, [sp, #12]
 800d268:	1d1a      	adds	r2, r3, #4
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	9203      	str	r2, [sp, #12]
 800d26e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d272:	3402      	adds	r4, #2
 800d274:	9305      	str	r3, [sp, #20]
 800d276:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d34c <_vfiprintf_r+0x22c>
 800d27a:	7821      	ldrb	r1, [r4, #0]
 800d27c:	2203      	movs	r2, #3
 800d27e:	4650      	mov	r0, sl
 800d280:	f7f2 ffb6 	bl	80001f0 <memchr>
 800d284:	b138      	cbz	r0, 800d296 <_vfiprintf_r+0x176>
 800d286:	9b04      	ldr	r3, [sp, #16]
 800d288:	eba0 000a 	sub.w	r0, r0, sl
 800d28c:	2240      	movs	r2, #64	@ 0x40
 800d28e:	4082      	lsls	r2, r0
 800d290:	4313      	orrs	r3, r2
 800d292:	3401      	adds	r4, #1
 800d294:	9304      	str	r3, [sp, #16]
 800d296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d29a:	4829      	ldr	r0, [pc, #164]	@ (800d340 <_vfiprintf_r+0x220>)
 800d29c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2a0:	2206      	movs	r2, #6
 800d2a2:	f7f2 ffa5 	bl	80001f0 <memchr>
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d03f      	beq.n	800d32a <_vfiprintf_r+0x20a>
 800d2aa:	4b26      	ldr	r3, [pc, #152]	@ (800d344 <_vfiprintf_r+0x224>)
 800d2ac:	bb1b      	cbnz	r3, 800d2f6 <_vfiprintf_r+0x1d6>
 800d2ae:	9b03      	ldr	r3, [sp, #12]
 800d2b0:	3307      	adds	r3, #7
 800d2b2:	f023 0307 	bic.w	r3, r3, #7
 800d2b6:	3308      	adds	r3, #8
 800d2b8:	9303      	str	r3, [sp, #12]
 800d2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2bc:	443b      	add	r3, r7
 800d2be:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2c0:	e76a      	b.n	800d198 <_vfiprintf_r+0x78>
 800d2c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2c6:	460c      	mov	r4, r1
 800d2c8:	2001      	movs	r0, #1
 800d2ca:	e7a8      	b.n	800d21e <_vfiprintf_r+0xfe>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	3401      	adds	r4, #1
 800d2d0:	9305      	str	r3, [sp, #20]
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	f04f 0c0a 	mov.w	ip, #10
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2de:	3a30      	subs	r2, #48	@ 0x30
 800d2e0:	2a09      	cmp	r2, #9
 800d2e2:	d903      	bls.n	800d2ec <_vfiprintf_r+0x1cc>
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d0c6      	beq.n	800d276 <_vfiprintf_r+0x156>
 800d2e8:	9105      	str	r1, [sp, #20]
 800d2ea:	e7c4      	b.n	800d276 <_vfiprintf_r+0x156>
 800d2ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	e7f0      	b.n	800d2d8 <_vfiprintf_r+0x1b8>
 800d2f6:	ab03      	add	r3, sp, #12
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	462a      	mov	r2, r5
 800d2fc:	4b12      	ldr	r3, [pc, #72]	@ (800d348 <_vfiprintf_r+0x228>)
 800d2fe:	a904      	add	r1, sp, #16
 800d300:	4630      	mov	r0, r6
 800d302:	f7fc fea1 	bl	800a048 <_printf_float>
 800d306:	4607      	mov	r7, r0
 800d308:	1c78      	adds	r0, r7, #1
 800d30a:	d1d6      	bne.n	800d2ba <_vfiprintf_r+0x19a>
 800d30c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d30e:	07d9      	lsls	r1, r3, #31
 800d310:	d405      	bmi.n	800d31e <_vfiprintf_r+0x1fe>
 800d312:	89ab      	ldrh	r3, [r5, #12]
 800d314:	059a      	lsls	r2, r3, #22
 800d316:	d402      	bmi.n	800d31e <_vfiprintf_r+0x1fe>
 800d318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d31a:	f7fd fcbd 	bl	800ac98 <__retarget_lock_release_recursive>
 800d31e:	89ab      	ldrh	r3, [r5, #12]
 800d320:	065b      	lsls	r3, r3, #25
 800d322:	f53f af1f 	bmi.w	800d164 <_vfiprintf_r+0x44>
 800d326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d328:	e71e      	b.n	800d168 <_vfiprintf_r+0x48>
 800d32a:	ab03      	add	r3, sp, #12
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	462a      	mov	r2, r5
 800d330:	4b05      	ldr	r3, [pc, #20]	@ (800d348 <_vfiprintf_r+0x228>)
 800d332:	a904      	add	r1, sp, #16
 800d334:	4630      	mov	r0, r6
 800d336:	f7fd f91f 	bl	800a578 <_printf_i>
 800d33a:	e7e4      	b.n	800d306 <_vfiprintf_r+0x1e6>
 800d33c:	0800ef06 	.word	0x0800ef06
 800d340:	0800ef10 	.word	0x0800ef10
 800d344:	0800a049 	.word	0x0800a049
 800d348:	0800d0fd 	.word	0x0800d0fd
 800d34c:	0800ef0c 	.word	0x0800ef0c

0800d350 <__swbuf_r>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	460e      	mov	r6, r1
 800d354:	4614      	mov	r4, r2
 800d356:	4605      	mov	r5, r0
 800d358:	b118      	cbz	r0, 800d362 <__swbuf_r+0x12>
 800d35a:	6a03      	ldr	r3, [r0, #32]
 800d35c:	b90b      	cbnz	r3, 800d362 <__swbuf_r+0x12>
 800d35e:	f7fd fab5 	bl	800a8cc <__sinit>
 800d362:	69a3      	ldr	r3, [r4, #24]
 800d364:	60a3      	str	r3, [r4, #8]
 800d366:	89a3      	ldrh	r3, [r4, #12]
 800d368:	071a      	lsls	r2, r3, #28
 800d36a:	d501      	bpl.n	800d370 <__swbuf_r+0x20>
 800d36c:	6923      	ldr	r3, [r4, #16]
 800d36e:	b943      	cbnz	r3, 800d382 <__swbuf_r+0x32>
 800d370:	4621      	mov	r1, r4
 800d372:	4628      	mov	r0, r5
 800d374:	f000 f82a 	bl	800d3cc <__swsetup_r>
 800d378:	b118      	cbz	r0, 800d382 <__swbuf_r+0x32>
 800d37a:	f04f 37ff 	mov.w	r7, #4294967295
 800d37e:	4638      	mov	r0, r7
 800d380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d382:	6823      	ldr	r3, [r4, #0]
 800d384:	6922      	ldr	r2, [r4, #16]
 800d386:	1a98      	subs	r0, r3, r2
 800d388:	6963      	ldr	r3, [r4, #20]
 800d38a:	b2f6      	uxtb	r6, r6
 800d38c:	4283      	cmp	r3, r0
 800d38e:	4637      	mov	r7, r6
 800d390:	dc05      	bgt.n	800d39e <__swbuf_r+0x4e>
 800d392:	4621      	mov	r1, r4
 800d394:	4628      	mov	r0, r5
 800d396:	f7ff fded 	bl	800cf74 <_fflush_r>
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d1ed      	bne.n	800d37a <__swbuf_r+0x2a>
 800d39e:	68a3      	ldr	r3, [r4, #8]
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	60a3      	str	r3, [r4, #8]
 800d3a4:	6823      	ldr	r3, [r4, #0]
 800d3a6:	1c5a      	adds	r2, r3, #1
 800d3a8:	6022      	str	r2, [r4, #0]
 800d3aa:	701e      	strb	r6, [r3, #0]
 800d3ac:	6962      	ldr	r2, [r4, #20]
 800d3ae:	1c43      	adds	r3, r0, #1
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d004      	beq.n	800d3be <__swbuf_r+0x6e>
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	07db      	lsls	r3, r3, #31
 800d3b8:	d5e1      	bpl.n	800d37e <__swbuf_r+0x2e>
 800d3ba:	2e0a      	cmp	r6, #10
 800d3bc:	d1df      	bne.n	800d37e <__swbuf_r+0x2e>
 800d3be:	4621      	mov	r1, r4
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	f7ff fdd7 	bl	800cf74 <_fflush_r>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d0d9      	beq.n	800d37e <__swbuf_r+0x2e>
 800d3ca:	e7d6      	b.n	800d37a <__swbuf_r+0x2a>

0800d3cc <__swsetup_r>:
 800d3cc:	b538      	push	{r3, r4, r5, lr}
 800d3ce:	4b29      	ldr	r3, [pc, #164]	@ (800d474 <__swsetup_r+0xa8>)
 800d3d0:	4605      	mov	r5, r0
 800d3d2:	6818      	ldr	r0, [r3, #0]
 800d3d4:	460c      	mov	r4, r1
 800d3d6:	b118      	cbz	r0, 800d3e0 <__swsetup_r+0x14>
 800d3d8:	6a03      	ldr	r3, [r0, #32]
 800d3da:	b90b      	cbnz	r3, 800d3e0 <__swsetup_r+0x14>
 800d3dc:	f7fd fa76 	bl	800a8cc <__sinit>
 800d3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3e4:	0719      	lsls	r1, r3, #28
 800d3e6:	d422      	bmi.n	800d42e <__swsetup_r+0x62>
 800d3e8:	06da      	lsls	r2, r3, #27
 800d3ea:	d407      	bmi.n	800d3fc <__swsetup_r+0x30>
 800d3ec:	2209      	movs	r2, #9
 800d3ee:	602a      	str	r2, [r5, #0]
 800d3f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3f4:	81a3      	strh	r3, [r4, #12]
 800d3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d3fa:	e033      	b.n	800d464 <__swsetup_r+0x98>
 800d3fc:	0758      	lsls	r0, r3, #29
 800d3fe:	d512      	bpl.n	800d426 <__swsetup_r+0x5a>
 800d400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d402:	b141      	cbz	r1, 800d416 <__swsetup_r+0x4a>
 800d404:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d408:	4299      	cmp	r1, r3
 800d40a:	d002      	beq.n	800d412 <__swsetup_r+0x46>
 800d40c:	4628      	mov	r0, r5
 800d40e:	f7fe fad3 	bl	800b9b8 <_free_r>
 800d412:	2300      	movs	r3, #0
 800d414:	6363      	str	r3, [r4, #52]	@ 0x34
 800d416:	89a3      	ldrh	r3, [r4, #12]
 800d418:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d41c:	81a3      	strh	r3, [r4, #12]
 800d41e:	2300      	movs	r3, #0
 800d420:	6063      	str	r3, [r4, #4]
 800d422:	6923      	ldr	r3, [r4, #16]
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	f043 0308 	orr.w	r3, r3, #8
 800d42c:	81a3      	strh	r3, [r4, #12]
 800d42e:	6923      	ldr	r3, [r4, #16]
 800d430:	b94b      	cbnz	r3, 800d446 <__swsetup_r+0x7a>
 800d432:	89a3      	ldrh	r3, [r4, #12]
 800d434:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d43c:	d003      	beq.n	800d446 <__swsetup_r+0x7a>
 800d43e:	4621      	mov	r1, r4
 800d440:	4628      	mov	r0, r5
 800d442:	f000 f88b 	bl	800d55c <__smakebuf_r>
 800d446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d44a:	f013 0201 	ands.w	r2, r3, #1
 800d44e:	d00a      	beq.n	800d466 <__swsetup_r+0x9a>
 800d450:	2200      	movs	r2, #0
 800d452:	60a2      	str	r2, [r4, #8]
 800d454:	6962      	ldr	r2, [r4, #20]
 800d456:	4252      	negs	r2, r2
 800d458:	61a2      	str	r2, [r4, #24]
 800d45a:	6922      	ldr	r2, [r4, #16]
 800d45c:	b942      	cbnz	r2, 800d470 <__swsetup_r+0xa4>
 800d45e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d462:	d1c5      	bne.n	800d3f0 <__swsetup_r+0x24>
 800d464:	bd38      	pop	{r3, r4, r5, pc}
 800d466:	0799      	lsls	r1, r3, #30
 800d468:	bf58      	it	pl
 800d46a:	6962      	ldrpl	r2, [r4, #20]
 800d46c:	60a2      	str	r2, [r4, #8]
 800d46e:	e7f4      	b.n	800d45a <__swsetup_r+0x8e>
 800d470:	2000      	movs	r0, #0
 800d472:	e7f7      	b.n	800d464 <__swsetup_r+0x98>
 800d474:	20000430 	.word	0x20000430

0800d478 <_raise_r>:
 800d478:	291f      	cmp	r1, #31
 800d47a:	b538      	push	{r3, r4, r5, lr}
 800d47c:	4605      	mov	r5, r0
 800d47e:	460c      	mov	r4, r1
 800d480:	d904      	bls.n	800d48c <_raise_r+0x14>
 800d482:	2316      	movs	r3, #22
 800d484:	6003      	str	r3, [r0, #0]
 800d486:	f04f 30ff 	mov.w	r0, #4294967295
 800d48a:	bd38      	pop	{r3, r4, r5, pc}
 800d48c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d48e:	b112      	cbz	r2, 800d496 <_raise_r+0x1e>
 800d490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d494:	b94b      	cbnz	r3, 800d4aa <_raise_r+0x32>
 800d496:	4628      	mov	r0, r5
 800d498:	f000 f830 	bl	800d4fc <_getpid_r>
 800d49c:	4622      	mov	r2, r4
 800d49e:	4601      	mov	r1, r0
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4a6:	f000 b817 	b.w	800d4d8 <_kill_r>
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d00a      	beq.n	800d4c4 <_raise_r+0x4c>
 800d4ae:	1c59      	adds	r1, r3, #1
 800d4b0:	d103      	bne.n	800d4ba <_raise_r+0x42>
 800d4b2:	2316      	movs	r3, #22
 800d4b4:	6003      	str	r3, [r0, #0]
 800d4b6:	2001      	movs	r0, #1
 800d4b8:	e7e7      	b.n	800d48a <_raise_r+0x12>
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	4798      	blx	r3
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	e7e0      	b.n	800d48a <_raise_r+0x12>

0800d4c8 <raise>:
 800d4c8:	4b02      	ldr	r3, [pc, #8]	@ (800d4d4 <raise+0xc>)
 800d4ca:	4601      	mov	r1, r0
 800d4cc:	6818      	ldr	r0, [r3, #0]
 800d4ce:	f7ff bfd3 	b.w	800d478 <_raise_r>
 800d4d2:	bf00      	nop
 800d4d4:	20000430 	.word	0x20000430

0800d4d8 <_kill_r>:
 800d4d8:	b538      	push	{r3, r4, r5, lr}
 800d4da:	4d07      	ldr	r5, [pc, #28]	@ (800d4f8 <_kill_r+0x20>)
 800d4dc:	2300      	movs	r3, #0
 800d4de:	4604      	mov	r4, r0
 800d4e0:	4608      	mov	r0, r1
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	602b      	str	r3, [r5, #0]
 800d4e6:	f7f5 ff19 	bl	800331c <_kill>
 800d4ea:	1c43      	adds	r3, r0, #1
 800d4ec:	d102      	bne.n	800d4f4 <_kill_r+0x1c>
 800d4ee:	682b      	ldr	r3, [r5, #0]
 800d4f0:	b103      	cbz	r3, 800d4f4 <_kill_r+0x1c>
 800d4f2:	6023      	str	r3, [r4, #0]
 800d4f4:	bd38      	pop	{r3, r4, r5, pc}
 800d4f6:	bf00      	nop
 800d4f8:	20005b64 	.word	0x20005b64

0800d4fc <_getpid_r>:
 800d4fc:	f7f5 bf06 	b.w	800330c <_getpid>

0800d500 <_malloc_usable_size_r>:
 800d500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d504:	1f18      	subs	r0, r3, #4
 800d506:	2b00      	cmp	r3, #0
 800d508:	bfbc      	itt	lt
 800d50a:	580b      	ldrlt	r3, [r1, r0]
 800d50c:	18c0      	addlt	r0, r0, r3
 800d50e:	4770      	bx	lr

0800d510 <__swhatbuf_r>:
 800d510:	b570      	push	{r4, r5, r6, lr}
 800d512:	460c      	mov	r4, r1
 800d514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d518:	2900      	cmp	r1, #0
 800d51a:	b096      	sub	sp, #88	@ 0x58
 800d51c:	4615      	mov	r5, r2
 800d51e:	461e      	mov	r6, r3
 800d520:	da0d      	bge.n	800d53e <__swhatbuf_r+0x2e>
 800d522:	89a3      	ldrh	r3, [r4, #12]
 800d524:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d528:	f04f 0100 	mov.w	r1, #0
 800d52c:	bf14      	ite	ne
 800d52e:	2340      	movne	r3, #64	@ 0x40
 800d530:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d534:	2000      	movs	r0, #0
 800d536:	6031      	str	r1, [r6, #0]
 800d538:	602b      	str	r3, [r5, #0]
 800d53a:	b016      	add	sp, #88	@ 0x58
 800d53c:	bd70      	pop	{r4, r5, r6, pc}
 800d53e:	466a      	mov	r2, sp
 800d540:	f000 f848 	bl	800d5d4 <_fstat_r>
 800d544:	2800      	cmp	r0, #0
 800d546:	dbec      	blt.n	800d522 <__swhatbuf_r+0x12>
 800d548:	9901      	ldr	r1, [sp, #4]
 800d54a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d54e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d552:	4259      	negs	r1, r3
 800d554:	4159      	adcs	r1, r3
 800d556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d55a:	e7eb      	b.n	800d534 <__swhatbuf_r+0x24>

0800d55c <__smakebuf_r>:
 800d55c:	898b      	ldrh	r3, [r1, #12]
 800d55e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d560:	079d      	lsls	r5, r3, #30
 800d562:	4606      	mov	r6, r0
 800d564:	460c      	mov	r4, r1
 800d566:	d507      	bpl.n	800d578 <__smakebuf_r+0x1c>
 800d568:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d56c:	6023      	str	r3, [r4, #0]
 800d56e:	6123      	str	r3, [r4, #16]
 800d570:	2301      	movs	r3, #1
 800d572:	6163      	str	r3, [r4, #20]
 800d574:	b003      	add	sp, #12
 800d576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d578:	ab01      	add	r3, sp, #4
 800d57a:	466a      	mov	r2, sp
 800d57c:	f7ff ffc8 	bl	800d510 <__swhatbuf_r>
 800d580:	9f00      	ldr	r7, [sp, #0]
 800d582:	4605      	mov	r5, r0
 800d584:	4639      	mov	r1, r7
 800d586:	4630      	mov	r0, r6
 800d588:	f7fe fdc4 	bl	800c114 <_malloc_r>
 800d58c:	b948      	cbnz	r0, 800d5a2 <__smakebuf_r+0x46>
 800d58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d592:	059a      	lsls	r2, r3, #22
 800d594:	d4ee      	bmi.n	800d574 <__smakebuf_r+0x18>
 800d596:	f023 0303 	bic.w	r3, r3, #3
 800d59a:	f043 0302 	orr.w	r3, r3, #2
 800d59e:	81a3      	strh	r3, [r4, #12]
 800d5a0:	e7e2      	b.n	800d568 <__smakebuf_r+0xc>
 800d5a2:	89a3      	ldrh	r3, [r4, #12]
 800d5a4:	6020      	str	r0, [r4, #0]
 800d5a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5aa:	81a3      	strh	r3, [r4, #12]
 800d5ac:	9b01      	ldr	r3, [sp, #4]
 800d5ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d5b2:	b15b      	cbz	r3, 800d5cc <__smakebuf_r+0x70>
 800d5b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	f000 f81d 	bl	800d5f8 <_isatty_r>
 800d5be:	b128      	cbz	r0, 800d5cc <__smakebuf_r+0x70>
 800d5c0:	89a3      	ldrh	r3, [r4, #12]
 800d5c2:	f023 0303 	bic.w	r3, r3, #3
 800d5c6:	f043 0301 	orr.w	r3, r3, #1
 800d5ca:	81a3      	strh	r3, [r4, #12]
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	431d      	orrs	r5, r3
 800d5d0:	81a5      	strh	r5, [r4, #12]
 800d5d2:	e7cf      	b.n	800d574 <__smakebuf_r+0x18>

0800d5d4 <_fstat_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4d07      	ldr	r5, [pc, #28]	@ (800d5f4 <_fstat_r+0x20>)
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4604      	mov	r4, r0
 800d5dc:	4608      	mov	r0, r1
 800d5de:	4611      	mov	r1, r2
 800d5e0:	602b      	str	r3, [r5, #0]
 800d5e2:	f7f5 fefb 	bl	80033dc <_fstat>
 800d5e6:	1c43      	adds	r3, r0, #1
 800d5e8:	d102      	bne.n	800d5f0 <_fstat_r+0x1c>
 800d5ea:	682b      	ldr	r3, [r5, #0]
 800d5ec:	b103      	cbz	r3, 800d5f0 <_fstat_r+0x1c>
 800d5ee:	6023      	str	r3, [r4, #0]
 800d5f0:	bd38      	pop	{r3, r4, r5, pc}
 800d5f2:	bf00      	nop
 800d5f4:	20005b64 	.word	0x20005b64

0800d5f8 <_isatty_r>:
 800d5f8:	b538      	push	{r3, r4, r5, lr}
 800d5fa:	4d06      	ldr	r5, [pc, #24]	@ (800d614 <_isatty_r+0x1c>)
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	4604      	mov	r4, r0
 800d600:	4608      	mov	r0, r1
 800d602:	602b      	str	r3, [r5, #0]
 800d604:	f7f5 fefa 	bl	80033fc <_isatty>
 800d608:	1c43      	adds	r3, r0, #1
 800d60a:	d102      	bne.n	800d612 <_isatty_r+0x1a>
 800d60c:	682b      	ldr	r3, [r5, #0]
 800d60e:	b103      	cbz	r3, 800d612 <_isatty_r+0x1a>
 800d610:	6023      	str	r3, [r4, #0]
 800d612:	bd38      	pop	{r3, r4, r5, pc}
 800d614:	20005b64 	.word	0x20005b64

0800d618 <_init>:
 800d618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61a:	bf00      	nop
 800d61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d61e:	bc08      	pop	{r3}
 800d620:	469e      	mov	lr, r3
 800d622:	4770      	bx	lr

0800d624 <_fini>:
 800d624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d626:	bf00      	nop
 800d628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d62a:	bc08      	pop	{r3}
 800d62c:	469e      	mov	lr, r3
 800d62e:	4770      	bx	lr
